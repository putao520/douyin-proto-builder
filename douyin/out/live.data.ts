// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "live.data.proto" (package "data", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message data.PatternRef
 */
export interface PatternRef {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string default_pattern = 2;
     */
    defaultPattern: string;
}
/**
 * @generated from protobuf message data.TextFormat
 */
export interface TextFormat {
    /**
     * @generated from protobuf field: string color = 1;
     */
    color: string;
    /**
     * @generated from protobuf field: bool bold = 2;
     */
    bold: boolean;
    /**
     * @generated from protobuf field: bool italic = 3;
     */
    italic: boolean;
    /**
     * @generated from protobuf field: int32 weight = 4;
     */
    weight: number;
    /**
     * @generated from protobuf field: int32 italic_angle = 5;
     */
    italicAngle: number;
    /**
     * @generated from protobuf field: int32 font_size = 6;
     */
    fontSize: number;
    /**
     * @generated from protobuf field: bool use_heigh_light_color = 7;
     */
    useHeighLightColor: boolean;
    /**
     * @generated from protobuf field: bool use_remote_clor = 8;
     */
    useRemoteClor: boolean;
}
/**
 * @generated from protobuf message data.TextPieceUser
 */
export interface TextPieceUser {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: bool with_colon = 2;
     */
    withColon: boolean;
    /**
     * @generated from protobuf field: bool self_show_real_name = 3;
     */
    selfShowRealName: boolean;
    /**
     * @generated from protobuf field: int32 left_show_extension = 4;
     */
    leftShowExtension: number;
    /**
     * @generated from protobuf field: string left_additional_content = 5;
     */
    leftAdditionalContent: string;
    /**
     * @generated from protobuf field: string right_additional_content = 6;
     */
    rightAdditionalContent: string;
}
/**
 * @generated from protobuf message data.TextPieceGift
 */
export interface TextPieceGift {
    /**
     * @generated from protobuf field: int64 gift_id = 1;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: data.PatternRef name_ref = 2;
     */
    nameRef?: PatternRef;
}
/**
 * @generated from protobuf message data.TextPieceHeart
 */
export interface TextPieceHeart {
    /**
     * @generated from protobuf field: string color = 1;
     */
    color: string;
}
/**
 * @generated from protobuf message data.TextPiecePatternRef
 */
export interface TextPiecePatternRef {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string default_pattern = 2;
     */
    defaultPattern: string;
}
/**
 * @generated from protobuf message data.TextPieceImage
 */
export interface TextPieceImage {
    /**
     * @generated from protobuf field: data.Image image = 1;
     */
    image?: Image;
    /**
     * @generated from protobuf field: float scaling_rate = 2;
     */
    scalingRate: number;
}
/**
 * @generated from protobuf message data.TextPiece
 */
export interface TextPiece {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: data.TextFormat format = 2;
     */
    format?: TextFormat;
    /**
     * @generated from protobuf field: string value_ref = 3;
     */
    valueRef: string;
    /**
     * @generated from protobuf field: string string_value = 11;
     */
    stringValue: string;
    /**
     * @generated from protobuf field: data.TextPieceUser user_value = 21;
     */
    userValue?: TextPieceUser;
    /**
     * @generated from protobuf field: data.TextPieceGift gift_value = 22;
     */
    giftValue?: TextPieceGift;
    /**
     * @generated from protobuf field: data.TextPieceHeart heart_value = 23;
     */
    heartValue?: TextPieceHeart;
    /**
     * @generated from protobuf field: data.TextPiecePatternRef pattern_ref_value = 24;
     */
    patternRefValue?: TextPiecePatternRef;
    /**
     * @generated from protobuf field: data.TextPieceImage image_value = 25;
     */
    imageValue?: TextPieceImage;
    /**
     * @generated from protobuf field: string schema_key = 100;
     */
    schemaKey: string;
}
/**
 * @generated from protobuf message data.Text
 */
export interface Text {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string default_pattern = 2;
     */
    defaultPattern: string;
    /**
     * @generated from protobuf field: data.TextFormat default_format = 3;
     */
    defaultFormat?: TextFormat;
    /**
     * @generated from protobuf field: repeated data.TextPiece pieces = 4;
     */
    pieces: TextPiece[];
}
/**
 * @generated from protobuf message data.CombinedText
 */
export interface CombinedText {
    /**
     * @generated from protobuf field: repeated data.DisplayItem display_items = 1;
     */
    displayItems: DisplayItem[];
    /**
     * @generated from protobuf field: data.SchemaInfo schema_info = 10;
     */
    schemaInfo?: SchemaInfo;
    /**
     * @generated from protobuf field: data.ComboInfo combo_info = 11;
     */
    comboInfo?: ComboInfo;
}
/**
 * @generated from protobuf message data.DisplayItem
 */
export interface DisplayItem {
    /**
     * @generated from protobuf field: int32 display_item_type = 1;
     */
    displayItemType: number;
    /**
     * @generated from protobuf field: bool combo_fresh = 20;
     */
    comboFresh: boolean;
    /**
     * @generated from protobuf field: data.SchemaInfo schema_info = 21;
     */
    schemaInfo?: SchemaInfo;
    /**
     * @generated from protobuf field: data.ImagesItem images_item = 50;
     */
    imagesItem?: ImagesItem;
    /**
     * @generated from protobuf field: data.TextItem text_item = 51;
     */
    textItem?: TextItem;
}
/**
 * @generated from protobuf message data.ImagesItem
 */
export interface ImagesItem {
    /**
     * @generated from protobuf field: repeated data.Image images = 1;
     */
    images: Image[];
    /**
     * @generated from protobuf field: int32 display_style = 20;
     */
    displayStyle: number;
}
/**
 * @generated from protobuf message data.TextItem
 */
export interface TextItem {
    /**
     * @generated from protobuf field: data.Text text = 1;
     */
    text?: Text;
}
/**
 * @generated from protobuf message data.SchemaInfo
 */
export interface SchemaInfo {
    /**
     * @generated from protobuf field: string schema_url = 1;
     */
    schemaUrl: string;
}
/**
 * @generated from protobuf message data.ComboInfo
 */
export interface ComboInfo {
    /**
     * @generated from protobuf field: int64 combo_seq = 1;
     */
    comboSeq: bigint;
    /**
     * @generated from protobuf field: int64 combo_order = 2;
     */
    comboOrder: bigint;
}
/**
 * @generated from protobuf message data.User
 */
export interface User {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 short_id = 2;
     */
    shortId: bigint;
    /**
     * @generated from protobuf field: string nickname = 3;
     */
    nickname: string;
    /**
     * @generated from protobuf field: int32 gender = 4;
     */
    gender: number;
    /**
     * @generated from protobuf field: string signature = 5;
     */
    signature: string;
    /**
     * @generated from protobuf field: int32 level = 6;
     */
    level: number;
    /**
     * @generated from protobuf field: int64 birthday = 7;
     */
    birthday: bigint;
    /**
     * @generated from protobuf field: string telephone = 8;
     */
    telephone: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 9;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_medium = 10;
     */
    avatarMedium?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_large = 11;
     */
    avatarLarge?: Image;
    /**
     * @generated from protobuf field: bool verified = 12;
     */
    verified: boolean;
    /**
     * @generated from protobuf field: int32 experience = 13;
     */
    experience: number;
    /**
     * @generated from protobuf field: string city = 14;
     */
    city: string;
    /**
     * @generated from protobuf field: int32 status = 15;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 create_time = 16;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int64 modify_time = 17;
     */
    modifyTime: bigint;
    /**
     * @generated from protobuf field: int32 secret = 18;
     */
    secret: number;
    /**
     * @generated from protobuf field: string share_qrcode_uri = 19;
     */
    shareQrcodeUri: string;
    /**
     * @generated from protobuf field: int32 income_share_percent = 20;
     */
    incomeSharePercent: number;
    /**
     * @generated from protobuf field: repeated data.Image badge_image_list = 21;
     */
    badgeImageList: Image[];
    /**
     * @generated from protobuf field: data.User.FollowInfo follow_info = 22;
     */
    followInfo?: User_FollowInfo;
    /**
     * @generated from protobuf field: data.User.PayGrade pay_grade = 23;
     */
    payGrade?: User_PayGrade;
    /**
     * @generated from protobuf field: data.User.FansClub fans_club = 24;
     */
    fansClub?: User_FansClub;
    /**
     * @generated from protobuf field: data.User.Border border = 25;
     */
    border?: User_Border;
    /**
     * @generated from protobuf field: string special_id = 26;
     */
    specialId: string;
    /**
     * @generated from protobuf field: data.Image avatar_border = 27;
     */
    avatarBorder?: Image;
    /**
     * @generated from protobuf field: data.Image medal = 28;
     */
    medal?: Image;
    /**
     * @generated from protobuf field: repeated data.Image real_time_icons = 29;
     */
    realTimeIcons: Image[];
    /**
     * @generated from protobuf field: repeated data.Image new_real_time_icons = 30;
     */
    newRealTimeIcons: Image[];
    /**
     * @generated from protobuf field: int64 top_vip_no = 31;
     */
    topVipNo: bigint;
    /**
     * @generated from protobuf field: data.User.UserAttr user_attr = 32;
     */
    userAttr?: User_UserAttr;
    /**
     * @generated from protobuf field: data.User.OwnRoom own_room = 33;
     */
    ownRoom?: User_OwnRoom;
    /**
     * @generated from protobuf field: int64 pay_score = 34;
     */
    payScore: bigint;
    /**
     * @generated from protobuf field: int64 ticket_count = 35;
     */
    ticketCount: bigint;
    /**
     * @generated from protobuf field: data.User.AnchorInfo anchor_info = 36;
     */
    anchorInfo?: User_AnchorInfo;
    /**
     * @generated from protobuf field: int32 link_mic_stats = 37;
     */
    linkMicStats: number;
    /**
     * @generated from protobuf field: string display_id = 38;
     */
    displayId: string;
    /**
     * @generated from protobuf field: bool with_commerce_permission = 39;
     */
    withCommercePermission: boolean;
    /**
     * @generated from protobuf field: bool with_fusion_shop_entry = 40;
     */
    withFusionShopEntry: boolean;
    /**
     * @generated from protobuf field: int64 total_recharge_diamond_count = 41;
     */
    totalRechargeDiamondCount: bigint;
    /**
     * @generated from protobuf field: data.User.AnchorLevel webcast_anchor_level = 42;
     */
    webcastAnchorLevel?: User_AnchorLevel;
    /**
     * @generated from protobuf field: string verified_content = 43;
     */
    verifiedContent: string;
    /**
     * @generated from protobuf field: data.User.AuthorStats author_stats = 44;
     */
    authorStats?: User_AuthorStats;
    /**
     * @generated from protobuf field: repeated data.User top_fans = 45;
     */
    topFans: User[];
    /**
     * @generated from protobuf field: string sec_uid = 46;
     */
    secUid: string;
    /**
     * @generated from protobuf field: int32 user_role = 47;
     */
    userRole: number;
    /**
     * @generated from protobuf field: data.User.XiguaParams xigua_info = 48;
     */
    xiguaInfo?: User_XiguaParams;
    /**
     * @generated from protobuf field: data.User.ActivityInfo activity_reward = 49;
     */
    activityReward?: User_ActivityInfo;
    /**
     * @generated from protobuf field: data.User.NobleLevelInfo noble_info = 50;
     */
    nobleInfo?: User_NobleLevelInfo;
    /**
     * @generated from protobuf field: data.User.BrotherhoodInfo brotherhood_info = 51;
     */
    brotherhoodInfo?: User_BrotherhoodInfo;
    /**
     * @generated from protobuf field: data.Image personal_card = 52;
     */
    personalCard?: Image;
    /**
     * @generated from protobuf field: data.User.AuthenticationInfo authentication_info = 53;
     */
    authenticationInfo?: User_AuthenticationInfo;
    /**
     * @generated from protobuf field: int32 authorization_info = 54;
     */
    authorizationInfo: number;
    /**
     * @generated from protobuf field: int32 adversary_authorization_info = 55;
     */
    adversaryAuthorizationInfo: number;
    /**
     * @generated from protobuf field: data.User.PoiInfo poi_info = 56;
     */
    poiInfo?: User_PoiInfo;
    /**
     * @generated from protobuf field: repeated data.Image media_badge_image_list = 57;
     */
    mediaBadgeImageList: Image[];
    /**
     * @generated from protobuf field: int32 adversary_user_status = 58;
     */
    adversaryUserStatus: number;
    /**
     * @generated from protobuf field: data.UserVIPInfo user_vip_info = 59;
     */
    userVipInfo?: UserVIPInfo;
    /**
     * @generated from protobuf field: repeated int64 commerce_webcast_config_ids = 60;
     */
    commerceWebcastConfigIds: bigint[];
    /**
     * @generated from protobuf field: repeated data.Image badge_image_list_v2 = 61;
     */
    badgeImageListV2: Image[];
    /**
     * @generated from protobuf field: data.IndustryCertification industry_certification = 62;
     */
    industryCertification?: IndustryCertification;
    /**
     * @generated from protobuf field: string location_city = 63;
     */
    locationCity: string;
    /**
     * @generated from protobuf field: data.User.FansGroupInfo fans_group_info = 64;
     */
    fansGroupInfo?: User_FansGroupInfo;
    /**
     * @generated from protobuf field: string remark_name = 65;
     */
    remarkName: string;
    /**
     * @generated from protobuf field: int32 mystery_man = 66;
     */
    mysteryMan: number;
    /**
     * @generated from protobuf field: string web_rid = 67;
     */
    webRid: string;
    /**
     * @generated from protobuf field: string desensitized_nickname = 68;
     */
    desensitizedNickname: string;
    /**
     * @generated from protobuf field: data.User.JAccreditInfo j_accredit_info = 69;
     */
    jAccreditInfo?: User_JAccreditInfo;
    /**
     * @generated from protobuf field: data.User.Subscribe subscribe = 70;
     */
    subscribe?: User_Subscribe;
    /**
     * @generated from protobuf field: bool is_anonymous = 71;
     */
    isAnonymous: boolean;
    /**
     * @generated from protobuf field: int32 consume_diamond_level = 72;
     */
    consumeDiamondLevel: number;
    /**
     * @generated from protobuf field: string webcast_uid = 73;
     */
    webcastUid: string;
    /**
     * @generated from protobuf field: data.User.ProfileStyleParams profile_style_params = 74;
     */
    profileStyleParams?: User_ProfileStyleParams;
    /**
     * @generated from protobuf field: data.User.UserDressInfo user_dress_info = 75;
     */
    userDressInfo?: User_UserDressInfo;
    /**
     * @generated from protobuf field: data.User.BizRelation biz_relation = 76;
     */
    bizRelation?: User_BizRelation;
    /**
     * @generated from protobuf field: bool allow_be_located = 1001;
     */
    allowBeLocated: boolean;
    /**
     * @generated from protobuf field: bool allow_find_by_contacts = 1002;
     */
    allowFindByContacts: boolean;
    /**
     * @generated from protobuf field: bool allow_others_download_video = 1003;
     */
    allowOthersDownloadVideo: boolean;
    /**
     * @generated from protobuf field: bool allow_others_download_when_sharing_video = 1004;
     */
    allowOthersDownloadWhenSharingVideo: boolean;
    /**
     * @generated from protobuf field: bool allow_share_show_profile = 1005;
     */
    allowShareShowProfile: boolean;
    /**
     * @generated from protobuf field: bool allow_show_in_gossip = 1006;
     */
    allowShowInGossip: boolean;
    /**
     * @generated from protobuf field: bool allow_show_my_action = 1007;
     */
    allowShowMyAction: boolean;
    /**
     * @generated from protobuf field: bool allow_strange_comment = 1008;
     */
    allowStrangeComment: boolean;
    /**
     * @generated from protobuf field: bool allow_unfollower_comment = 1009;
     */
    allowUnfollowerComment: boolean;
    /**
     * @generated from protobuf field: bool allow_use_linkmic = 1010;
     */
    allowUseLinkmic: boolean;
    /**
     * @generated from protobuf field: data.User.AnchorLevel anchor_level = 1011;
     */
    anchorLevel?: User_AnchorLevel;
    /**
     * @generated from protobuf field: data.Image avatar_jpg = 1012;
     */
    avatarJpg?: Image;
    /**
     * @generated from protobuf field: string bg_img_url = 1013;
     */
    bgImgUrl: string;
    /**
     * @generated from protobuf field: string birthday_description = 1014;
     */
    birthdayDescription: string;
    /**
     * @generated from protobuf field: bool birthday_valid = 1015;
     */
    birthdayValid: boolean;
    /**
     * @generated from protobuf field: int32 block_status = 1016;
     */
    blockStatus: number;
    /**
     * @generated from protobuf field: int32 comment_restrict = 1017;
     */
    commentRestrict: number;
    /**
     * @generated from protobuf field: string constellation = 1018;
     */
    constellation: string;
    /**
     * @generated from protobuf field: int32 disable_ichat = 1019;
     */
    disableIchat: number;
    /**
     * @generated from protobuf field: int64 enable_ichat_img = 1020;
     */
    enableIchatImg: bigint;
    /**
     * @generated from protobuf field: int32 exp = 1021;
     */
    exp: number;
    /**
     * @generated from protobuf field: int64 fan_ticket_count = 1022;
     */
    fanTicketCount: bigint;
    /**
     * @generated from protobuf field: bool fold_stranger_chat = 1023;
     */
    foldStrangerChat: boolean;
    /**
     * @generated from protobuf field: int64 follow_status = 1024;
     */
    followStatus: bigint;
    /**
     * @generated from protobuf field: bool hotsoon_verified = 1025;
     */
    hotsoonVerified: boolean;
    /**
     * @generated from protobuf field: string hotsoon_verified_reason = 1026;
     */
    hotsoonVerifiedReason: string;
    /**
     * @generated from protobuf field: int32 ichat_restrict_type = 1027;
     */
    ichatRestrictType: number;
    /**
     * @generated from protobuf field: string id_str = 1028;
     */
    idStr: string;
    /**
     * @generated from protobuf field: bool is_follower = 1029;
     */
    isFollower: boolean;
    /**
     * @generated from protobuf field: bool is_following = 1030;
     */
    isFollowing: boolean;
    /**
     * @generated from protobuf field: bool need_profile_guide = 1031;
     */
    needProfileGuide: boolean;
    /**
     * @generated from protobuf field: int64 pay_scores = 1032;
     */
    payScores: bigint;
    /**
     * @generated from protobuf field: bool push_comment_status = 1033;
     */
    pushCommentStatus: boolean;
    /**
     * @generated from protobuf field: bool push_digg = 1034;
     */
    pushDigg: boolean;
    /**
     * @generated from protobuf field: bool push_follow = 1035;
     */
    pushFollow: boolean;
    /**
     * @generated from protobuf field: bool push_friend_action = 1036;
     */
    pushFriendAction: boolean;
    /**
     * @generated from protobuf field: bool push_ichat = 1037;
     */
    pushIchat: boolean;
    /**
     * @generated from protobuf field: bool push_status = 1038;
     */
    pushStatus: boolean;
    /**
     * @generated from protobuf field: bool push_video_post = 1039;
     */
    pushVideoPost: boolean;
    /**
     * @generated from protobuf field: bool push_video_recommend = 1040;
     */
    pushVideoRecommend: boolean;
    /**
     * @generated from protobuf field: data.User.UserStats stats = 1041;
     */
    stats?: User_UserStats;
    /**
     * @generated from protobuf field: bool verified_mobile = 1042;
     */
    verifiedMobile: boolean;
    /**
     * @generated from protobuf field: string verified_reason = 1043;
     */
    verifiedReason: string;
    /**
     * @generated from protobuf field: bool with_car_management_permission = 1044;
     */
    withCarManagementPermission: boolean;
    /**
     * @generated from protobuf field: int32 age_range = 1045;
     */
    ageRange: number;
    /**
     * @generated from protobuf field: int64 watch_duration_month = 1046;
     */
    watchDurationMonth: bigint;
}
/**
 * @generated from protobuf message data.User.FollowInfo
 */
export interface User_FollowInfo {
    /**
     * @generated from protobuf field: int64 following_count = 1;
     */
    followingCount: bigint;
    /**
     * @generated from protobuf field: int64 follower_count = 2;
     */
    followerCount: bigint;
    /**
     * @generated from protobuf field: int64 follow_status = 3;
     */
    followStatus: bigint;
    /**
     * @generated from protobuf field: int64 push_status = 4;
     */
    pushStatus: bigint;
    /**
     * @generated from protobuf field: string remark_name = 5;
     */
    remarkName: string;
    /**
     * @generated from protobuf field: string follower_count_str = 6;
     */
    followerCountStr: string;
    /**
     * @generated from protobuf field: string following_count_str = 7;
     */
    followingCountStr: string;
    /**
     * @generated from protobuf field: bool invalid_follow_status = 8;
     */
    invalidFollowStatus: boolean;
}
/**
 * @generated from protobuf message data.User.PayGrade
 */
export interface User_PayGrade {
    /**
     * @generated from protobuf field: int64 total_diamond_count = 1;
     */
    totalDiamondCount: bigint;
    /**
     * @generated from protobuf field: data.Image diamond_icon = 2;
     */
    diamondIcon?: Image;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image icon = 4;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string next_name = 5;
     */
    nextName: string;
    /**
     * @generated from protobuf field: int64 level = 6;
     */
    level: bigint;
    /**
     * @generated from protobuf field: data.Image next_icon = 7;
     */
    nextIcon?: Image;
    /**
     * @generated from protobuf field: int64 next_diamond = 8;
     */
    nextDiamond: bigint;
    /**
     * @generated from protobuf field: int64 now_diamond = 9;
     */
    nowDiamond: bigint;
    /**
     * @generated from protobuf field: int64 this_grade_min_diamond = 10;
     */
    thisGradeMinDiamond: bigint;
    /**
     * @generated from protobuf field: int64 this_grade_max_diamond = 11;
     */
    thisGradeMaxDiamond: bigint;
    /**
     * @generated from protobuf field: int64 pay_diamond_bak = 12;
     */
    payDiamondBak: bigint;
    /**
     * @generated from protobuf field: string grade_describe = 13;
     */
    gradeDescribe: string;
    /**
     * @generated from protobuf field: repeated data.User.PayGrade.GradeIcon grade_icon_list = 14;
     */
    gradeIconList: User_PayGrade_GradeIcon[];
    /**
     * @generated from protobuf field: int64 screen_chat_type = 15;
     */
    screenChatType: bigint;
    /**
     * @generated from protobuf field: data.Image im_icon = 16;
     */
    imIcon?: Image;
    /**
     * @generated from protobuf field: data.Image im_icon_with_level = 17;
     */
    imIconWithLevel?: Image;
    /**
     * @generated from protobuf field: data.Image live_icon = 18;
     */
    liveIcon?: Image;
    /**
     * @generated from protobuf field: data.Image new_im_icon_with_level = 19;
     */
    newImIconWithLevel?: Image;
    /**
     * @generated from protobuf field: data.Image new_live_icon = 20;
     */
    newLiveIcon?: Image;
    /**
     * @generated from protobuf field: int64 upgrade_need_consume = 21;
     */
    upgradeNeedConsume: bigint;
    /**
     * @generated from protobuf field: string next_privileges = 22;
     */
    nextPrivileges: string;
    /**
     * @generated from protobuf field: data.Image background = 23;
     */
    background?: Image;
    /**
     * @generated from protobuf field: data.Image background_back = 24;
     */
    backgroundBack?: Image;
    /**
     * @generated from protobuf field: int64 score = 25;
     */
    score: bigint;
    /**
     * @generated from protobuf field: data.GradeBuffInfo buff_info = 26;
     */
    buffInfo?: GradeBuffInfo;
    /**
     * @generated from protobuf field: bool grade_describe_shining = 27;
     */
    gradeDescribeShining: boolean;
    /**
     * @generated from protobuf field: string grade_banner = 1001;
     */
    gradeBanner: string;
    /**
     * @generated from protobuf field: data.Image profile_dialog_bg = 1002;
     */
    profileDialogBg?: Image;
    /**
     * @generated from protobuf field: data.Image profile_dialog_bg_back = 1003;
     */
    profileDialogBgBack?: Image;
}
/**
 * @generated from protobuf message data.User.PayGrade.GradeIcon
 */
export interface User_PayGrade_GradeIcon {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 icon_diamond = 2;
     */
    iconDiamond: bigint;
    /**
     * @generated from protobuf field: int64 level = 3;
     */
    level: bigint;
    /**
     * @generated from protobuf field: string level_str = 4;
     */
    levelStr: string;
}
/**
 * @generated from protobuf message data.User.FansClub
 */
export interface User_FansClub {
    /**
     * @generated from protobuf field: data.User.FansClub.FansClubData data = 1;
     */
    data?: User_FansClub_FansClubData;
}
/**
 * @generated from protobuf message data.User.FansClub.FansClubData
 */
export interface User_FansClub_FansClubData {
    /**
     * @generated from protobuf field: string club_name = 1;
     */
    clubName: string;
    /**
     * @generated from protobuf field: int32 level = 2;
     */
    level: number;
    /**
     * @generated from protobuf field: int32 user_fans_club_status = 3;
     */
    userFansClubStatus: number;
    /**
     * @generated from protobuf field: data.User.FansClub.FansClubData.UserBadge badge = 4;
     */
    badge?: User_FansClub_FansClubData_UserBadge;
    /**
     * @generated from protobuf field: repeated int64 available_gift_ids = 5;
     */
    availableGiftIds: bigint[];
    /**
     * @generated from protobuf field: int64 anchor_id = 6;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: int32 badge_type = 7;
     */
    badgeType: number;
}
/**
 * @generated from protobuf message data.User.FansClub.FansClubData.UserBadge
 */
export interface User_FansClub_FansClubData_UserBadge {
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
}
/**
 * @generated from protobuf message data.User.Border
 */
export interface User_Border {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 level = 2;
     */
    level: bigint;
    /**
     * @generated from protobuf field: data.Image thumb_icon = 3;
     */
    thumbIcon?: Image;
    /**
     * @generated from protobuf field: string dress_id = 4;
     */
    dressId: string;
}
/**
 * @generated from protobuf message data.User.UserAttr
 */
export interface User_UserAttr {
    /**
     * @generated from protobuf field: bool is_muted = 1;
     */
    isMuted: boolean;
    /**
     * @generated from protobuf field: bool is_admin = 2;
     */
    isAdmin: boolean;
    /**
     * @generated from protobuf field: bool is_super_admin = 3;
     */
    isSuperAdmin: boolean;
    /**
     * @generated from protobuf field: repeated int32 admin_privileges = 4;
     */
    adminPrivileges: number[];
}
/**
 * @generated from protobuf message data.User.OwnRoom
 */
export interface User_OwnRoom {
    /**
     * @generated from protobuf field: repeated int64 room_ids = 1;
     */
    roomIds: bigint[];
    /**
     * @generated from protobuf field: repeated string room_ids_str = 2;
     */
    roomIdsStr: string[];
    /**
     * @generated from protobuf field: repeated int32 room_ids_display = 3;
     */
    roomIdsDisplay: number[];
}
/**
 * @generated from protobuf message data.User.AnchorInfo
 */
export interface User_AnchorInfo {
    /**
     * @generated from protobuf field: int64 level = 1;
     */
    level: bigint;
}
/**
 * @generated from protobuf message data.User.AnchorLevel
 */
export interface User_AnchorLevel {
    /**
     * @generated from protobuf field: int64 level = 1;
     */
    level: bigint;
    /**
     * @generated from protobuf field: int64 experience = 2;
     */
    experience: bigint;
    /**
     * @generated from protobuf field: int64 lowest_experience_this_level = 3;
     */
    lowestExperienceThisLevel: bigint;
    /**
     * @generated from protobuf field: int64 highest_experience_this_level = 4;
     */
    highestExperienceThisLevel: bigint;
    /**
     * @generated from protobuf field: int64 task_start_experience = 5;
     */
    taskStartExperience: bigint;
    /**
     * @generated from protobuf field: int64 task_start_time = 6;
     */
    taskStartTime: bigint;
    /**
     * @generated from protobuf field: int64 task_decrease_experience = 7;
     */
    taskDecreaseExperience: bigint;
    /**
     * @generated from protobuf field: int64 task_target_experience = 8;
     */
    taskTargetExperience: bigint;
    /**
     * @generated from protobuf field: int64 task_end_time = 9;
     */
    taskEndTime: bigint;
    /**
     * @generated from protobuf field: data.Image profile_dialog_bg = 10;
     */
    profileDialogBg?: Image;
    /**
     * @generated from protobuf field: data.Image profile_dialog_bg_back = 11;
     */
    profileDialogBgBack?: Image;
    /**
     * @generated from protobuf field: data.Image stage_level = 12;
     */
    stageLevel?: Image;
    /**
     * @generated from protobuf field: data.Image small_icon = 13;
     */
    smallIcon?: Image;
}
/**
 * @generated from protobuf message data.User.AuthorStats
 */
export interface User_AuthorStats {
    /**
     * @generated from protobuf field: int64 video_total_count = 1;
     */
    videoTotalCount: bigint;
    /**
     * @generated from protobuf field: int64 video_total_play_count = 2;
     */
    videoTotalPlayCount: bigint;
    /**
     * @generated from protobuf field: int64 video_total_share_count = 3;
     */
    videoTotalShareCount: bigint;
    /**
     * @generated from protobuf field: int64 video_total_series_count = 4;
     */
    videoTotalSeriesCount: bigint;
    /**
     * @generated from protobuf field: int64 variety_show_play_count = 5;
     */
    varietyShowPlayCount: bigint;
    /**
     * @generated from protobuf field: int64 video_total_favorite_count = 6;
     */
    videoTotalFavoriteCount: bigint;
}
/**
 * @generated from protobuf message data.User.XiguaParams
 */
export interface User_XiguaParams {
    /**
     * @generated from protobuf field: string user_auth_info = 1;
     */
    userAuthInfo: string;
    /**
     * @generated from protobuf field: int64 ugc_publish_media_id = 2;
     */
    ugcPublishMediaId: bigint;
    /**
     * @generated from protobuf field: int64 media_id = 3;
     */
    mediaId: bigint;
    /**
     * @generated from protobuf field: string author_desc = 4;
     */
    authorDesc: string;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: bool user_verified = 6;
     */
    userVerified: boolean;
    /**
     * @generated from protobuf field: data.User.XiguaParams.UserExtendInfo user_extend_info = 7;
     */
    userExtendInfo?: User_XiguaParams_UserExtendInfo;
    /**
     * @generated from protobuf field: int64 xigua_uid = 8;
     */
    xiguaUid: bigint;
    /**
     * @generated from protobuf field: string nick_name = 9;
     */
    nickName: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 10;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_medium = 11;
     */
    avatarMedium?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_large = 12;
     */
    avatarLarge?: Image;
}
/**
 * @generated from protobuf message data.User.XiguaParams.UserExtendInfo
 */
export interface User_XiguaParams_UserExtendInfo {
    /**
     * @generated from protobuf field: string share_url = 1;
     */
    shareUrl: string;
    /**
     * @generated from protobuf field: string r_schema_url = 2;
     */
    rSchemaUrl: string;
    /**
     * @generated from protobuf field: data.User.XiguaParams.UserExtendInfo.RocketSchema rocket_schema_info = 3;
     */
    rocketSchemaInfo?: User_XiguaParams_UserExtendInfo_RocketSchema;
}
/**
 * @generated from protobuf message data.User.XiguaParams.UserExtendInfo.RocketSchema
 */
export interface User_XiguaParams_UserExtendInfo_RocketSchema {
    /**
     * @generated from protobuf field: string r_schema = 1;
     */
    rSchema: string;
    /**
     * @generated from protobuf field: string r_token = 2;
     */
    rToken: string;
    /**
     * @generated from protobuf field: string download_url = 3;
     */
    downloadUrl: string;
}
/**
 * @generated from protobuf message data.User.ActivityInfo
 */
export interface User_ActivityInfo {
    /**
     * @generated from protobuf field: data.Image Badge = 1 [json_name = "Badge"];
     */
    badge?: Image;
    /**
     * @generated from protobuf field: data.Image StoryTag = 2 [json_name = "StoryTag"];
     */
    storyTag?: Image;
}
/**
 * @generated from protobuf message data.User.NobleLevelInfo
 */
export interface User_NobleLevelInfo {
    /**
     * @generated from protobuf field: data.Image noble_background = 1;
     */
    nobleBackground?: Image;
    /**
     * @generated from protobuf field: int64 noble_level = 2;
     */
    nobleLevel: bigint;
    /**
     * @generated from protobuf field: data.Image noble_icon = 3;
     */
    nobleIcon?: Image;
    /**
     * @generated from protobuf field: string noble_name = 4;
     */
    nobleName: string;
    /**
     * @generated from protobuf field: int64 expire_time = 5;
     */
    expireTime: bigint;
    /**
     * @generated from protobuf field: data.Image noble_big_icon = 6;
     */
    nobleBigIcon?: Image;
    /**
     * @generated from protobuf field: data.Image noble_icon_with_back = 7;
     */
    nobleIconWithBack?: Image;
    /**
     * @generated from protobuf field: data.Image noble_boarder = 8;
     */
    nobleBoarder?: Image;
    /**
     * @generated from protobuf field: repeated string noble_background_color = 9;
     */
    nobleBackgroundColor: string[];
}
/**
 * @generated from protobuf message data.User.BrotherhoodInfo
 */
export interface User_BrotherhoodInfo {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 level = 2;
     */
    level: bigint;
    /**
     * @generated from protobuf field: data.Image background = 3;
     */
    background?: Image;
    /**
     * @generated from protobuf field: string font_color = 4;
     */
    fontColor: string;
}
/**
 * @generated from protobuf message data.User.AuthenticationInfo
 */
export interface User_AuthenticationInfo {
    /**
     * @generated from protobuf field: string custom_verify = 1;
     */
    customVerify: string;
    /**
     * @generated from protobuf field: string enterprise_verify_reason = 2;
     */
    enterpriseVerifyReason: string;
    /**
     * @generated from protobuf field: data.Image authentication_badge = 3;
     */
    authenticationBadge?: Image;
    /**
     * @generated from protobuf field: repeated int32 level_list = 4;
     */
    levelList: number[];
}
/**
 * @generated from protobuf message data.User.PoiInfo
 */
export interface User_PoiInfo {
    /**
     * @generated from protobuf field: bool is_poi_enabled = 1;
     */
    isPoiEnabled: boolean;
    /**
     * @generated from protobuf field: int64 poi_id = 2;
     */
    poiId: bigint;
    /**
     * @generated from protobuf field: string poi_name = 3;
     */
    poiName: string;
    /**
     * @generated from protobuf field: string poi_id_str = 4;
     */
    poiIdStr: string;
    /**
     * @generated from protobuf field: int64 follower_count_permission = 5;
     */
    followerCountPermission: bigint;
    /**
     * @generated from protobuf field: int64 white_user_permission = 6;
     */
    whiteUserPermission: bigint;
}
/**
 * @generated from protobuf message data.User.FansGroupInfo
 */
export interface User_FansGroupInfo {
    /**
     * @generated from protobuf field: string list_fans_group_url = 1;
     */
    listFansGroupUrl: string;
}
/**
 * @generated from protobuf message data.User.JAccreditInfo
 */
export interface User_JAccreditInfo {
    /**
     * @generated from protobuf field: int32 JAccreditBasic = 1 [json_name = "JAccreditBasic"];
     */
    jAccreditBasic: number;
    /**
     * @generated from protobuf field: int32 JAccreditAdvance = 2 [json_name = "JAccreditAdvance"];
     */
    jAccreditAdvance: number;
    /**
     * @generated from protobuf field: int32 JAccreditContent = 3 [json_name = "JAccreditContent"];
     */
    jAccreditContent: number;
    /**
     * @generated from protobuf field: int32 JAccreditLive = 4 [json_name = "JAccreditLive"];
     */
    jAccreditLive: number;
}
/**
 * @generated from protobuf message data.User.Subscribe
 */
export interface User_Subscribe {
    /**
     * @generated from protobuf field: bool is_member = 1;
     */
    isMember: boolean;
    /**
     * @generated from protobuf field: int64 level = 2;
     */
    level: bigint;
    /**
     * @generated from protobuf field: int64 identity_type = 3;
     */
    identityType: bigint;
    /**
     * @generated from protobuf field: int64 buy_type = 4;
     */
    buyType: bigint;
    /**
     * @generated from protobuf field: int64 open = 5;
     */
    open: bigint;
}
/**
 * @generated from protobuf message data.User.ProfileStyleParams
 */
export interface User_ProfileStyleParams {
    /**
     * @generated from protobuf field: int64 profile_style = 1;
     */
    profileStyle: bigint;
    /**
     * @generated from protobuf field: int64 smart_switch = 2;
     */
    smartSwitch: bigint;
}
/**
 * @generated from protobuf message data.User.UserDressInfo
 */
export interface User_UserDressInfo {
    /**
     * @generated from protobuf field: repeated string dress_wear_ids = 1;
     */
    dressWearIds: string[];
    /**
     * @generated from protobuf field: repeated string dress_own_ids = 2;
     */
    dressOwnIds: string[];
}
/**
 * @generated from protobuf message data.User.BizRelation
 */
export interface User_BizRelation {
    /**
     * @generated from protobuf field: bool shop_fans_club_reverse = 1;
     */
    shopFansClubReverse: boolean;
}
/**
 * @generated from protobuf message data.User.UserStats
 */
export interface User_UserStats {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string id_str = 2;
     */
    idStr: string;
    /**
     * @generated from protobuf field: int64 following_count = 3;
     */
    followingCount: bigint;
    /**
     * @generated from protobuf field: int64 follower_count = 4;
     */
    followerCount: bigint;
    /**
     * @generated from protobuf field: int64 record_count = 5;
     */
    recordCount: bigint;
    /**
     * @generated from protobuf field: int64 total_duration = 6;
     */
    totalDuration: bigint;
    /**
     * @generated from protobuf field: int64 daily_fan_ticket_count = 7;
     */
    dailyFanTicketCount: bigint;
    /**
     * @generated from protobuf field: int64 daily_income = 8;
     */
    dailyIncome: bigint;
    /**
     * @generated from protobuf field: int64 item_count = 9;
     */
    itemCount: bigint;
    /**
     * @generated from protobuf field: int64 favorite_item_count = 10;
     */
    favoriteItemCount: bigint;
    /**
     * @generated from protobuf field: int64 diamond_count = 11;
     */
    diamondCount: bigint;
    /**
     * @generated from protobuf field: int64 diamond_consumed_count = 12;
     */
    diamondConsumedCount: bigint;
    /**
     * @generated from protobuf field: int64 tuwen_item_count = 13;
     */
    tuwenItemCount: bigint;
}
/**
 * @generated from protobuf message data.IndustryCertification
 */
export interface IndustryCertification {
    /**
     * @generated from protobuf field: data.IndustryCertificationProfile profile = 1;
     */
    profile?: IndustryCertificationProfile;
    /**
     * @generated from protobuf field: data.IndustryCertificationRoom room = 2;
     */
    room?: IndustryCertificationRoom;
}
/**
 * @generated from protobuf message data.IndustryCertificationProfile
 */
export interface IndustryCertificationProfile {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string schema = 3;
     */
    schema: string;
    /**
     * @generated from protobuf field: string content_color = 4;
     */
    contentColor: string;
    /**
     * @generated from protobuf field: string bg_color = 5;
     */
    bgColor: string;
    /**
     * @generated from protobuf field: int64 cert_type = 6;
     */
    certType: bigint;
}
/**
 * @generated from protobuf message data.IndustryCertificationRoom
 */
export interface IndustryCertificationRoom {
    /**
     * @generated from protobuf field: data.IndustryCertificationRoom.RoomOwner room_owner = 1;
     */
    roomOwner?: IndustryCertificationRoom_RoomOwner;
}
/**
 * @generated from protobuf message data.IndustryCertificationRoom.RoomOwner
 */
export interface IndustryCertificationRoom_RoomOwner {
    /**
     * @generated from protobuf field: data.Image title = 1;
     */
    title?: Image;
    /**
     * @generated from protobuf field: string sub_title = 2;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string left_color = 3;
     */
    leftColor: string;
    /**
     * @generated from protobuf field: string right_color = 4;
     */
    rightColor: string;
    /**
     * @generated from protobuf field: int32 anchor_industry_type = 5;
     */
    anchorIndustryType: number;
    /**
     * @generated from protobuf field: data.Image brand_store_title = 6;
     */
    brandStoreTitle?: Image;
    /**
     * @generated from protobuf field: data.Image brand_store_background = 7;
     */
    brandStoreBackground?: Image;
    /**
     * @generated from protobuf field: data.Image anchor_reds_icon = 8;
     */
    anchorRedsIcon?: Image;
    /**
     * @generated from protobuf field: data.Image anchor_reds_small_icon = 9;
     */
    anchorRedsSmallIcon?: Image;
}
/**
 * @generated from protobuf message data.Image
 */
export interface Image {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
    /**
     * @generated from protobuf field: int64 height = 3;
     */
    height: bigint;
    /**
     * @generated from protobuf field: int64 width = 4;
     */
    width: bigint;
    /**
     * @generated from protobuf field: string avg_color = 5;
     */
    avgColor: string;
    /**
     * @generated from protobuf field: int32 image_type = 6;
     */
    imageType: number;
    /**
     * @generated from protobuf field: string open_web_url = 7;
     */
    openWebUrl: string;
    /**
     * @generated from protobuf field: data.Image.Content content = 8;
     */
    content?: Image_Content;
    /**
     * @generated from protobuf field: bool is_animated = 9;
     */
    isAnimated: boolean;
    /**
     * @generated from protobuf field: repeated data.Image.NinePatchSetting flex_setting_list = 10;
     */
    flexSettingList: Image_NinePatchSetting[];
    /**
     * @generated from protobuf field: repeated data.Image.NinePatchSetting text_setting_list = 11;
     */
    textSettingList: Image_NinePatchSetting[];
}
/**
 * @generated from protobuf message data.Image.Content
 */
export interface Image_Content {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string font_color = 2;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: int64 level = 3;
     */
    level: bigint;
    /**
     * @generated from protobuf field: string alternative_text = 4;
     */
    alternativeText: string;
}
/**
 * @generated from protobuf message data.Image.NinePatchSetting
 */
export interface Image_NinePatchSetting {
    /**
     * @generated from protobuf field: repeated int64 setting_list = 1;
     */
    settingList: bigint[];
}
/**
 * @generated from protobuf message data.AnchorLinkmicUserSettings
 */
export interface AnchorLinkmicUserSettings {
    /**
     * @generated from protobuf field: bool is_turn_on = 1;
     */
    isTurnOn: boolean;
    /**
     * @generated from protobuf field: bool accept_multi_linkmic = 2;
     */
    acceptMultiLinkmic: boolean;
    /**
     * @generated from protobuf field: bool accept_not_follower_invite = 3;
     */
    acceptNotFollowerInvite: boolean;
    /**
     * @generated from protobuf field: bool allow_gift_to_other_anchors = 4;
     */
    allowGiftToOtherAnchors: boolean;
    /**
     * @generated from protobuf field: bool accept_friend_invite = 5;
     */
    acceptFriendInvite: boolean;
    /**
     * @generated from protobuf field: bool accept_hourly_rank_invite = 6;
     */
    acceptHourlyRankInvite: boolean;
    /**
     * @generated from protobuf field: bool accept_popularity_rank_invite = 7;
     */
    acceptPopularityRankInvite: boolean;
    /**
     * @generated from protobuf field: bool accept_recommend_search_invite = 8;
     */
    acceptRecommendSearchInvite: boolean;
}
/**
 * @generated from protobuf message data.BattleUserSettings
 */
export interface BattleUserSettings {
    /**
     * @generated from protobuf field: bool is_turn_on = 1;
     */
    isTurnOn: boolean;
    /**
     * @generated from protobuf field: bool accept_not_follower_invite = 2;
     */
    acceptNotFollowerInvite: boolean;
    /**
     * @generated from protobuf field: bool allow_gift_to_other_anchors = 3;
     */
    allowGiftToOtherAnchors: boolean;
    /**
     * @generated from protobuf field: bool accept_friend_invite = 4;
     */
    acceptFriendInvite: boolean;
    /**
     * @generated from protobuf field: bool accept_hourly_rank_invite = 5;
     */
    acceptHourlyRankInvite: boolean;
    /**
     * @generated from protobuf field: bool accept_popularity_rank_invite = 6;
     */
    acceptPopularityRankInvite: boolean;
    /**
     * @generated from protobuf field: int64 invite_reject_permanent_total = 7;
     */
    inviteRejectPermanentTotal: bigint;
    /**
     * @generated from protobuf field: int64 invite_reject_temporary_total = 8;
     */
    inviteRejectTemporaryTotal: bigint;
    /**
     * @generated from protobuf field: string invite_reject_temporary_text = 9;
     */
    inviteRejectTemporaryText: string;
    /**
     * @generated from protobuf field: bool pk_accept_volume_up = 10;
     */
    pkAcceptVolumeUp: boolean;
    /**
     * @generated from protobuf field: bool pk_auto_confirm = 11;
     */
    pkAutoConfirm: boolean;
    /**
     * @generated from protobuf field: bool accept_union_recommend_invite = 12;
     */
    acceptUnionRecommendInvite: boolean;
}
/**
 * @generated from protobuf message data.RivalExtraInfo
 */
export interface RivalExtraInfo {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 text_type = 2;
     */
    textType: number;
    /**
     * @generated from protobuf field: string label = 3;
     */
    label: string;
    /**
     * @generated from protobuf field: int32 anchor_layer = 4;
     */
    anchorLayer: number;
    /**
     * @generated from protobuf field: data.RivalExtraInfo.LinkerInfo linker_info = 5;
     */
    linkerInfo?: RivalExtraInfo_LinkerInfo;
    /**
     * @generated from protobuf field: data.AnchorLinkmicUserSettings linkmic_user_settings = 6;
     */
    linkmicUserSettings?: AnchorLinkmicUserSettings;
    /**
     * @generated from protobuf field: data.BattleUserSettings battle_user_settings = 7;
     */
    battleUserSettings?: BattleUserSettings;
    /**
     * @generated from protobuf field: int64 video_show_score = 8;
     */
    videoShowScore: bigint;
    /**
     * @generated from protobuf field: data.RivalExtraInfo.GameInfo game_info = 9;
     */
    gameInfo?: RivalExtraInfo_GameInfo;
    /**
     * @generated from protobuf field: string sign_extra = 10;
     */
    signExtra: string;
    /**
     * @generated from protobuf field: string recommend_info = 11;
     */
    recommendInfo: string;
    /**
     * @generated from protobuf field: int32 from_server_invite_type = 12;
     */
    fromServerInviteType: number;
}
/**
 * @generated from protobuf message data.RivalExtraInfo.LinkerInfo
 */
export interface RivalExtraInfo_LinkerInfo {
    /**
     * @generated from protobuf field: repeated data.RivalExtraInfo.LinkerInfo.UserInfo linked_users = 1;
     */
    linkedUsers: RivalExtraInfo_LinkerInfo_UserInfo[];
}
/**
 * @generated from protobuf message data.RivalExtraInfo.LinkerInfo.UserInfo
 */
export interface RivalExtraInfo_LinkerInfo_UserInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string nick_name = 2;
     */
    nickName: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 3;
     */
    avatarThumb?: Image;
}
/**
 * @generated from protobuf message data.RivalExtraInfo.GameInfo
 */
export interface RivalExtraInfo_GameInfo {
    /**
     * @generated from protobuf field: string game_text = 1;
     */
    gameText: string;
    /**
     * @generated from protobuf field: string game_name = 2;
     */
    gameName: string;
}
/**
 * @generated from protobuf message data.MultiPKModeInfo
 */
export interface MultiPKModeInfo {
    /**
     * @generated from protobuf field: int32 mode_tab = 1;
     */
    modeTab: number;
    /**
     * @generated from protobuf field: int64 version = 3;
     */
    version: bigint;
    /**
     * @generated from protobuf field: int32 switch_source = 4;
     */
    switchSource: number;
    /**
     * @generated from protobuf field: string version_str = 5;
     */
    versionStr: string;
    /**
     * @generated from protobuf field: string battle_config_setting = 6;
     */
    battleConfigSetting: string;
}
/**
 * @generated from protobuf message data.GameInviteInfo
 */
export interface GameInviteInfo {
    /**
     * @generated from protobuf field: int32 invite_source = 1;
     */
    inviteSource: number;
}
/**
 * @generated from protobuf message data.LinkmicInfo
 */
export interface LinkmicInfo {
    /**
     * @generated from protobuf field: string rtc_ext_info = 1;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_info = 2;
     */
    liveCoreInfo: string;
}
/**
 * @generated from protobuf message data.MultiChannelInfo
 */
export interface MultiChannelInfo {
    /**
     * @generated from protobuf field: bool use_multi_channel = 1;
     */
    useMultiChannel: boolean;
}
/**
 * @generated from protobuf message data.LinkIconConfig
 */
export interface LinkIconConfig {
    /**
     * @generated from protobuf field: repeated string yellow_dots = 1;
     */
    yellowDots: string[];
}
/**
 * @generated from protobuf message data.UserVIPInfo
 */
export interface UserVIPInfo {
    /**
     * @generated from protobuf field: int64 vip_level = 1;
     */
    vipLevel: bigint;
    /**
     * @generated from protobuf field: string vip_level_name = 2;
     */
    vipLevelName: string;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 start_time = 4;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 5;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int64 remaining_days = 6;
     */
    remainingDays: bigint;
    /**
     * @generated from protobuf field: int64 total_consume = 7;
     */
    totalConsume: bigint;
    /**
     * @generated from protobuf field: int64 target_consume = 8;
     */
    targetConsume: bigint;
}
/**
 * @generated from protobuf message data.GradeBuffInfo
 */
export interface GradeBuffInfo {
    /**
     * @generated from protobuf field: int64 buff_level = 1;
     */
    buffLevel: bigint;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 end_time = 3;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: data.Image buff_badge = 5;
     */
    buffBadge?: Image;
}
/**
 * @generated from protobuf message data.GameExtra
 */
export interface GameExtra {
    /**
     * @generated from protobuf field: int32 kind = 1;
     */
    kind: number;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 game_id = 3;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int32 gift_limit = 4;
     */
    giftLimit: number;
    /**
     * @generated from protobuf field: int64 round_id = 5;
     */
    roundId: bigint;
    /**
     * @generated from protobuf field: int32 game_kind = 6;
     */
    gameKind: number;
    /**
     * @generated from protobuf field: int64 chat = 7;
     */
    chat: bigint;
    /**
     * @generated from protobuf field: int64 loader = 8;
     */
    loader: bigint;
    /**
     * @generated from protobuf field: int64 reload = 9;
     */
    reload: bigint;
}
/**
 * @generated from protobuf message data.MatchRoomInfo
 */
export interface MatchRoomInfo {
    /**
     * @generated from protobuf field: data.MatchTabFrame match_tab_frame = 1;
     */
    matchTabFrame?: MatchTabFrame;
    /**
     * @generated from protobuf field: data.MatchTitle match_title = 2;
     */
    matchTitle?: MatchTitle;
    /**
     * @generated from protobuf field: data.ToutiaoMatchData match_data = 3;
     */
    matchData?: ToutiaoMatchData;
    /**
     * @generated from protobuf field: string match_hash_tag = 5;
     */
    matchHashTag: string;
    /**
     * @generated from protobuf field: repeated data.Image background_image_url_list = 6;
     */
    backgroundImageUrlList: Image[];
    /**
     * @generated from protobuf field: data.Image share_icon = 7;
     */
    shareIcon?: Image;
    /**
     * @generated from protobuf field: data.MatchRoomImInfo im_info = 8;
     */
    imInfo?: MatchRoomImInfo;
    /**
     * @generated from protobuf field: data.MatchShareBackground match_share_background = 9;
     */
    matchShareBackground?: MatchShareBackground;
    /**
     * @generated from protobuf field: string theme_id = 10;
     */
    themeId: string;
    /**
     * @generated from protobuf field: data.MatchShareBackground match_live_share_background = 11;
     */
    matchLiveShareBackground?: MatchShareBackground;
    /**
     * @generated from protobuf field: int64 match_id = 12;
     */
    matchId: bigint;
}
/**
 * @generated from protobuf message data.MainCameraMatchInfo
 */
export interface MainCameraMatchInfo {
    /**
     * @generated from protobuf field: data.ToutiaoMatchData match_data = 1;
     */
    matchData?: ToutiaoMatchData;
    /**
     * @generated from protobuf field: int64 match_id = 2;
     */
    matchId: bigint;
    /**
     * @generated from protobuf field: repeated int64 event_ids = 3;
     */
    eventIds: bigint[];
    /**
     * @generated from protobuf field: int64 content_id = 4;
     */
    contentId: bigint;
    /**
     * @generated from protobuf field: data.LeagueInfo league_info = 5;
     */
    leagueInfo?: LeagueInfo;
    /**
     * @generated from protobuf field: bool is_display_score_type = 6;
     */
    isDisplayScoreType: boolean;
    /**
     * @generated from protobuf field: repeated int64 hide_tab_ids = 7;
     */
    hideTabIds: bigint[];
    /**
     * @generated from protobuf field: string match_id_str = 8;
     */
    matchIdStr: string;
    /**
     * @generated from protobuf field: string content_id_str = 9;
     */
    contentIdStr: string;
}
/**
 * @generated from protobuf message data.LeagueInfo
 */
export interface LeagueInfo {
    /**
     * @generated from protobuf field: int64 league_id = 1;
     */
    leagueId: bigint;
    /**
     * @generated from protobuf field: string cnn_name = 2;
     */
    cnnName: string;
    /**
     * @generated from protobuf field: string enn_name = 3;
     */
    ennName: string;
    /**
     * @generated from protobuf field: string season = 4;
     */
    season: string;
}
/**
 * @generated from protobuf message data.MatchRoomImInfo
 */
export interface MatchRoomImInfo {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
}
/**
 * @generated from protobuf message data.MatchTabFrame
 */
export interface MatchTabFrame {
    /**
     * @generated from protobuf field: repeated data.MatchTab tabs = 1;
     */
    tabs: MatchTab[];
    /**
     * @generated from protobuf field: repeated data.MatchTab replay_tabs = 2;
     */
    replayTabs: MatchTab[];
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: string background_color = 4;
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message data.ClientComponent
 */
export interface ClientComponent {
    /**
     * @generated from protobuf field: bool is_open = 3;
     */
    isOpen: boolean;
    /**
     * @generated from protobuf field: int64 template_id = 4;
     */
    templateId: bigint;
}
/**
 * @generated from protobuf message data.ClientComponentInfo
 */
export interface ClientComponentInfo {
    /**
     * @generated from protobuf field: string container_id = 1;
     */
    containerId: string;
    /**
     * @generated from protobuf field: data.ClientComponentFunctionInfo function_detail = 2;
     */
    functionDetail?: ClientComponentFunctionInfo;
}
/**
 * @generated from protobuf message data.ClientComponentFunctionInfo
 */
export interface ClientComponentFunctionInfo {
    /**
     * @generated from protobuf field: string function_id = 1;
     */
    functionId: string;
}
/**
 * @generated from protobuf message data.Room
 */
export interface Room {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string id_str = 2;
     */
    idStr: string;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: int64 owner_user_id = 4;
     */
    ownerUserId: bigint;
    /**
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 user_count = 6;
     */
    userCount: bigint;
    /**
     * @generated from protobuf field: int64 create_time = 7;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int64 linkmic_layout = 8;
     */
    linkmicLayout: bigint;
    /**
     * @generated from protobuf field: int64 finish_time = 9;
     */
    finishTime: bigint;
    /**
     * @generated from protobuf field: data.RoomExtra extra = 10;
     */
    extra?: RoomExtra;
    /**
     * @generated from protobuf field: string dynamic_cover_uri = 11;
     */
    dynamicCoverUri: string;
    /**
     * @generated from protobuf field: int64 last_ping_time = 13;
     */
    lastPingTime: bigint;
    /**
     * @generated from protobuf field: int64 live_id = 14;
     */
    liveId: bigint;
    /**
     * @generated from protobuf field: int64 stream_provider = 15;
     */
    streamProvider: bigint;
    /**
     * @generated from protobuf field: int64 os_type = 16;
     */
    osType: bigint;
    /**
     * @generated from protobuf field: int64 client_version = 17;
     */
    clientVersion: bigint;
    /**
     * @generated from protobuf field: bool with_linkmic = 18;
     */
    withLinkmic: boolean;
    /**
     * @generated from protobuf field: bool enable_room_perspective = 19;
     */
    enableRoomPerspective: boolean;
    /**
     * @generated from protobuf field: data.Image cover = 20;
     */
    cover?: Image;
    /**
     * @generated from protobuf field: data.Image dynamic_cover = 21;
     */
    dynamicCover?: Image;
    /**
     * @generated from protobuf field: data.Image dynamic_cover_low = 22;
     */
    dynamicCoverLow?: Image;
    /**
     * @generated from protobuf field: string share_url = 23;
     */
    shareUrl: string;
    /**
     * @generated from protobuf field: string anchor_share_text = 24;
     */
    anchorShareText: string;
    /**
     * @generated from protobuf field: string user_share_text = 25;
     */
    userShareText: string;
    /**
     * @generated from protobuf field: int64 stream_id = 26;
     */
    streamId: bigint;
    /**
     * @generated from protobuf field: string stream_id_str = 27;
     */
    streamIdStr: string;
    /**
     * @generated from protobuf field: data.StreamUrl stream_url = 28;
     */
    streamUrl?: StreamUrl;
    /**
     * @generated from protobuf field: int64 mosaic_status = 29;
     */
    mosaicStatus: bigint;
    /**
     * @generated from protobuf field: string mosaic_tip = 30;
     */
    mosaicTip: string;
    /**
     * @generated from protobuf field: int64 cell_style = 31;
     */
    cellStyle: bigint;
    /**
     * @generated from protobuf field: data.LinkMic link_mic = 32;
     */
    linkMic?: LinkMic;
    /**
     * @generated from protobuf field: int64 luckymoney_num = 33;
     */
    luckymoneyNum: bigint;
    /**
     * @generated from protobuf field: repeated data.Decoration deco_list = 34;
     */
    decoList: Decoration[];
    /**
     * @generated from protobuf field: repeated data.TopFan top_fans = 35;
     */
    topFans: TopFan[];
    /**
     * @generated from protobuf field: data.RoomStats stats = 36;
     */
    stats?: RoomStats;
    /**
     * @generated from protobuf field: string sun_daily_icon_content = 37;
     */
    sunDailyIconContent: string;
    /**
     * @generated from protobuf field: string distance = 38;
     */
    distance: string;
    /**
     * @generated from protobuf field: string distance_city = 39;
     */
    distanceCity: string;
    /**
     * @generated from protobuf field: string location = 40;
     */
    location: string;
    /**
     * @generated from protobuf field: string real_distance = 41;
     */
    realDistance: string;
    /**
     * @generated from protobuf field: data.Image feed_room_label = 42;
     */
    feedRoomLabel?: Image;
    /**
     * @generated from protobuf field: string common_label_list = 43;
     */
    commonLabelList: string;
    /**
     * @generated from protobuf field: data.RoomUserAttr living_room_attrs = 44;
     */
    livingRoomAttrs?: RoomUserAttr;
    /**
     * @generated from protobuf field: repeated int64 admin_user_ids = 45;
     */
    adminUserIds: bigint[];
    /**
     * @generated from protobuf field: data.User owner = 46;
     */
    owner?: User;
    /**
     * @generated from protobuf field: string private_info = 47;
     */
    privateInfo: string;
    /**
     * @generated from protobuf field: bool has_commerce_goods = 48;
     */
    hasCommerceGoods: boolean;
    /**
     * @generated from protobuf field: bool live_type_normal = 49;
     */
    liveTypeNormal: boolean;
    /**
     * @generated from protobuf field: bool live_type_linkmic = 50;
     */
    liveTypeLinkmic: boolean;
    /**
     * @generated from protobuf field: bool live_type_audio = 51;
     */
    liveTypeAudio: boolean;
    /**
     * @generated from protobuf field: bool live_type_third_party = 52;
     */
    liveTypeThirdParty: boolean;
    /**
     * @generated from protobuf field: bool live_type_screenshot = 53;
     */
    liveTypeScreenshot: boolean;
    /**
     * @generated from protobuf field: bool live_type_sandbox = 54;
     */
    liveTypeSandbox: boolean;
    /**
     * @generated from protobuf field: bool live_type_official = 55;
     */
    liveTypeOfficial: boolean;
    /**
     * @generated from protobuf field: int64 group_id = 59;
     */
    groupId: bigint;
    /**
     * @generated from protobuf field: int64 orientation = 60;
     */
    orientation: bigint;
    /**
     * @generated from protobuf field: int64 category = 61;
     */
    category: bigint;
    /**
     * @generated from protobuf field: repeated int64 tags = 62;
     */
    tags: bigint[];
    /**
     * @generated from protobuf field: int64 start_time = 63;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 popularity = 64;
     */
    popularity: bigint;
    /**
     * @generated from protobuf field: string popularity_str = 65;
     */
    popularityStr: string;
    /**
     * @generated from protobuf field: int64 fcdn_appid = 66;
     */
    fcdnAppid: bigint;
    /**
     * @generated from protobuf field: bool sell_goods = 68;
     */
    sellGoods: boolean;
    /**
     * @generated from protobuf field: int64 web_count = 69;
     */
    webCount: bigint;
    /**
     * @generated from protobuf field: string vertical_cover_uri = 70;
     */
    verticalCoverUri: string;
    /**
     * @generated from protobuf field: int64 base_category = 71;
     */
    baseCategory: bigint;
    /**
     * @generated from protobuf field: data.RoomAuthStatus room_auth = 72;
     */
    roomAuth?: RoomAuthStatus;
    /**
     * @generated from protobuf field: repeated data.RoomTab room_tabs = 73;
     */
    roomTabs: RoomTab[];
    /**
     * @generated from protobuf field: string introduction = 74;
     */
    introduction: string;
    /**
     * @generated from protobuf field: data.BurstInfo burst = 75;
     */
    burst?: BurstInfo;
    /**
     * @generated from protobuf field: data.RoomHealthScoreInfo health_score = 76;
     */
    healthScore?: RoomHealthScoreInfo;
    /**
     * @generated from protobuf field: bool is_replay = 77;
     */
    isReplay: boolean;
    /**
     * @generated from protobuf field: string vid = 78;
     */
    vid: string;
    /**
     * @generated from protobuf field: int64 group_source = 79;
     */
    groupSource: bigint;
    /**
     * @generated from protobuf field: int64 lottery_finish_time = 80;
     */
    lotteryFinishTime: bigint;
    /**
     * @generated from protobuf field: data.RoomActivityTag activity_tag = 81;
     */
    activityTag?: RoomActivityTag;
    /**
     * @generated from protobuf field: data.Image portrait_cover = 82;
     */
    portraitCover?: Image;
    /**
     * @generated from protobuf field: data.Image background = 83;
     */
    background?: Image;
    /**
     * @generated from protobuf field: int64 layout = 84;
     */
    layout: bigint;
    /**
     * @generated from protobuf field: string wait_copy = 85;
     */
    waitCopy: string;
    /**
     * @generated from protobuf field: data.Image guide_button = 86;
     */
    guideButton?: Image;
    /**
     * @generated from protobuf field: string preview_copy = 87;
     */
    previewCopy: string;
    /**
     * @generated from protobuf field: bool is_show_inquiry_ball = 88;
     */
    isShowInquiryBall: boolean;
    /**
     * @generated from protobuf field: data.MatchInfo match_info = 89;
     */
    matchInfo?: MatchInfo;
    /**
     * @generated from protobuf field: bool use_filter = 90;
     */
    useFilter: boolean;
    /**
     * @generated from protobuf field: int64 gift_msg_style = 91;
     */
    giftMsgStyle: bigint;
    /**
     * @generated from protobuf field: string distance_km = 92;
     */
    distanceKm: string;
    /**
     * @generated from protobuf field: string finish_url = 93;
     */
    finishUrl: string;
    /**
     * @generated from protobuf field: data.OfficialRoomInfo official_room_info = 94;
     */
    officialRoomInfo?: OfficialRoomInfo;
    /**
     * @generated from protobuf field: bool is_show_user_card_switch = 95;
     */
    isShowUserCardSwitch: boolean;
    /**
     * @generated from protobuf field: string video_feed_tag = 96;
     */
    videoFeedTag: string;
    /**
     * @generated from protobuf field: string forum_extra_data = 97;
     */
    forumExtraData: string;
    /**
     * @generated from protobuf field: int64 fansclub_msg_style = 98;
     */
    fansclubMsgStyle: bigint;
    /**
     * @generated from protobuf field: int64 follow_msg_style = 99;
     */
    followMsgStyle: bigint;
    /**
     * @generated from protobuf field: int64 share_msg_style = 100;
     */
    shareMsgStyle: bigint;
    /**
     * @generated from protobuf field: int64 room_layout = 101;
     */
    roomLayout: bigint;
    /**
     * @generated from protobuf field: string short_title = 102;
     */
    shortTitle: string;
    /**
     * @generated from protobuf field: int64 book_time = 104;
     */
    bookTime: bigint;
    /**
     * @generated from protobuf field: int64 book_end_time = 105;
     */
    bookEndTime: bigint;
    /**
     * @generated from protobuf field: int64 room_audit_status = 106;
     */
    roomAuditStatus: bigint;
    /**
     * @generated from protobuf field: repeated int64 live_distribution = 107;
     */
    liveDistribution: bigint[];
    /**
     * @generated from protobuf field: data.TVStation tv = 108;
     */
    tv?: TVStation;
    /**
     * @generated from protobuf field: bool replay = 109;
     */
    replay: boolean;
    /**
     * @generated from protobuf field: string challenge_info = 110;
     */
    challengeInfo: string;
    /**
     * @generated from protobuf field: int64 like_count = 111;
     */
    likeCount: bigint;
    /**
     * @generated from protobuf field: int64 search_id = 112;
     */
    searchId: bigint;
    /**
     * @generated from protobuf field: string anchor_scheduled_time_text = 113;
     */
    anchorScheduledTimeText: string;
    /**
     * @generated from protobuf field: string hot_sentence_info = 114;
     */
    hotSentenceInfo: string;
    /**
     * @generated from protobuf field: int64 replay_location = 115;
     */
    replayLocation: bigint;
    /**
     * @generated from protobuf field: int64 stream_close_time = 116;
     */
    streamCloseTime: bigint;
    /**
     * @generated from protobuf field: string content_tag = 117;
     */
    contentTag: string;
    /**
     * @generated from protobuf field: data.Image content_label = 118;
     */
    contentLabel?: Image;
    /**
     * @generated from protobuf field: data.Image operation_label = 119;
     */
    operationLabel?: Image;
    /**
     * @generated from protobuf field: int32 anchor_tab_type = 120;
     */
    anchorTabType: number;
    /**
     * @generated from protobuf field: data.GameExtra game_extra = 121;
     */
    gameExtra?: GameExtra;
    /**
     * @generated from protobuf field: data.OfficialChannelInfo official_channel = 122;
     */
    officialChannel?: OfficialChannelInfo;
    /**
     * @generated from protobuf field: string stamps = 123;
     */
    stamps: string;
    /**
     * @generated from protobuf field: data.CommentBox comment_box = 124;
     */
    commentBox?: CommentBox;
    /**
     * @generated from protobuf field: int32 business_live = 125;
     */
    businessLive: number;
    /**
     * @generated from protobuf field: bool with_ktv = 126;
     */
    withKtv: boolean;
    /**
     * @generated from protobuf field: bool with_draw_something = 127;
     */
    withDrawSomething: boolean;
    /**
     * @generated from protobuf field: int64 webcast_comment_tcs = 128;
     */
    webcastCommentTcs: bigint;
    /**
     * @generated from protobuf field: int64 room_tag = 129;
     */
    roomTag: bigint;
    /**
     * @generated from protobuf field: int32 finish_reason = 131;
     */
    finishReason: number;
    /**
     * @generated from protobuf field: data.RoomCart room_cart = 132;
     */
    roomCart?: RoomCart;
    /**
     * @generated from protobuf field: string scroll_config = 133;
     */
    scrollConfig: string;
    /**
     * @generated from protobuf field: string relation_tag = 134;
     */
    relationTag: string;
    /**
     * @generated from protobuf field: int64 owner_device_id = 135;
     */
    ownerDeviceId: bigint;
    /**
     * @generated from protobuf field: int64 auto_cover = 136;
     */
    autoCover: bigint;
    /**
     * @generated from protobuf field: int64 app_id = 137;
     */
    appId: bigint;
    /**
     * @generated from protobuf field: int64 webcast_sdk_version = 138;
     */
    webcastSdkVersion: bigint;
    /**
     * @generated from protobuf field: int64 comment_name_mode = 139;
     */
    commentNameMode: bigint;
    /**
     * @generated from protobuf field: string room_create_ab_param = 140;
     */
    roomCreateAbParam: string;
    /**
     * @generated from protobuf field: int64 pre_enter_time = 141;
     */
    preEnterTime: bigint;
    /**
     * @generated from protobuf field: int64 ranklist_audience_type = 142;
     */
    ranklistAudienceType: bigint;
    /**
     * @generated from protobuf field: int64 preview_flow_tag = 143;
     */
    previewFlowTag: bigint;
    /**
     * @generated from protobuf field: data.Image preview_tag_url = 144;
     */
    previewTagUrl?: Image;
    /**
     * @generated from protobuf field: data.QuizExtra quiz_extra = 145;
     */
    quizExtra?: QuizExtra;
    /**
     * @generated from protobuf field: data.LinkerUsers linker_users = 147;
     */
    linkerUsers?: LinkerUsers;
    /**
     * @generated from protobuf field: int64 linkmic_display_type = 148;
     */
    linkmicDisplayType: bigint;
    /**
     * @generated from protobuf field: data.AudioBGData AudioRoomBGImage = 149 [json_name = "AudioRoomBGImage"];
     */
    audioRoomBGImage?: AudioBGData;
    /**
     * @generated from protobuf field: data.LinkerUsers city_top_linker_users = 150;
     */
    cityTopLinkerUsers?: LinkerUsers;
    /**
     * @generated from protobuf field: data.BorderInfo border_info = 151;
     */
    borderInfo?: BorderInfo;
    /**
     * @generated from protobuf field: data.Image city_top_background = 152;
     */
    cityTopBackground?: Image;
    /**
     * @generated from protobuf field: string city_top_distance = 153;
     */
    cityTopDistance: string;
    /**
     * @generated from protobuf field: int64 live_room_mode = 154;
     */
    liveRoomMode: bigint;
    /**
     * @generated from protobuf field: data.Bonus bonus = 155;
     */
    bonus?: Bonus;
    /**
     * @generated from protobuf field: bool highlight = 156;
     */
    highlight: boolean;
    /**
     * @generated from protobuf field: bool is_official_channel_room = 157;
     */
    isOfficialChannelRoom: boolean;
    /**
     * @generated from protobuf field: repeated int64 fans_group_admin_user_ids = 159;
     */
    fansGroupAdminUserIds: bigint[];
    /**
     * @generated from protobuf field: data.RoomReplayInfo replay_info = 160;
     */
    replayInfo?: RoomReplayInfo;
    /**
     * @generated from protobuf field: int64 official_channel_uid = 161;
     */
    officialChannelUid: bigint;
    /**
     * @generated from protobuf field: string live_platform_source = 162;
     */
    livePlatformSource: string;
    /**
     * @generated from protobuf field: int64 acquaintance_status = 163;
     */
    acquaintanceStatus: bigint;
    /**
     * @generated from protobuf field: data.CommentWallInfo comment_wall_info = 164;
     */
    commentWallInfo?: CommentWallInfo;
    /**
     * @generated from protobuf field: data.CommentWallPosition comment_wall_position = 165;
     */
    commentWallPosition?: CommentWallPosition;
    /**
     * @generated from protobuf field: bool live_type_vs_live = 166;
     */
    liveTypeVsLive: boolean;
    /**
     * @generated from protobuf field: bool live_type_vs_premiere = 167;
     */
    liveTypeVsPremiere: boolean;
    /**
     * @generated from protobuf field: data.EpisodeExtraInfo episode_extra = 168;
     */
    episodeExtra?: EpisodeExtraInfo;
    /**
     * @generated from protobuf field: repeated int32 vs_roles = 169;
     */
    vsRoles: number[];
    /**
     * @generated from protobuf field: string item_explicit_info = 170;
     */
    itemExplicitInfo: string;
    /**
     * @generated from protobuf field: data.ShortTouchAuth short_touch_auth = 171;
     */
    shortTouchAuth?: ShortTouchAuth;
    /**
     * @generated from protobuf field: int64 sofa_layout = 172;
     */
    sofaLayout: bigint;
    /**
     * @generated from protobuf field: data.AnnouncementInfo announcement_info = 173;
     */
    announcementInfo?: AnnouncementInfo;
    /**
     * @generated from protobuf field: bool is_need_check_list = 174;
     */
    isNeedCheckList: boolean;
    /**
     * @generated from protobuf field: data.LiveStatusInfo live_status_info = 175;
     */
    liveStatusInfo?: LiveStatusInfo;
    /**
     * @generated from protobuf field: data.RoomIMInfo im_info = 176;
     */
    imInfo?: RoomIMInfo;
    /**
     * @generated from protobuf field: data.LabelInfo assist_label = 177;
     */
    assistLabel?: LabelInfo;
    /**
     * @generated from protobuf field: data.VerticalTypeInfo vertical_type_info = 179;
     */
    verticalTypeInfo?: VerticalTypeInfo;
    /**
     * @generated from protobuf field: repeated data.FilterWord filter_words = 180;
     */
    filterWords: FilterWord[];
    /**
     * @generated from protobuf field: data.LabelInfo dynamic_label = 181;
     */
    dynamicLabel?: LabelInfo;
    /**
     * @generated from protobuf field: data.LinkerDetail linker_detail = 182;
     */
    linkerDetail?: LinkerDetail;
    /**
     * @generated from protobuf field: int32 visibility_range = 183;
     */
    visibilityRange: number;
    /**
     * @generated from protobuf field: data.CornerMarkReach corner_mark_reach = 184;
     */
    cornerMarkReach?: CornerMarkReach;
    /**
     * @generated from protobuf field: data.PreviewExposeData preview_expose = 185;
     */
    previewExpose?: PreviewExposeData;
    /**
     * @generated from protobuf field: data.WelfareProjectInfo welfare_project_info = 186;
     */
    welfareProjectInfo?: WelfareProjectInfo;
    /**
     * @generated from protobuf field: int32 game_room_type = 187;
     */
    gameRoomType: number;
    /**
     * @generated from protobuf field: data.PaidLiveData paid_live_data = 188;
     */
    paidLiveData?: PaidLiveData;
    /**
     * @generated from protobuf field: data.EasterEggData easter_egg_data = 189;
     */
    easterEggData?: EasterEggData;
    /**
     * @generated from protobuf field: bool title_recommend = 190;
     */
    titleRecommend: boolean;
    /**
     * @generated from protobuf field: int64 danmaku_detail = 191;
     */
    danmakuDetail: bigint;
    /**
     * @generated from protobuf field: data.AvatarLiveInfo avatar_live_info = 192;
     */
    avatarLiveInfo?: AvatarLiveInfo;
    /**
     * @generated from protobuf field: data.CircleInfo circle_info = 193;
     */
    circleInfo?: CircleInfo;
    /**
     * @generated from protobuf field: int64 has_promotion_games = 194;
     */
    hasPromotionGames: bigint;
    /**
     * @generated from protobuf field: data.Image screenshot_sover = 195;
     */
    screenshotSover?: Image;
    /**
     * @generated from protobuf field: data.Appearance appearance = 196;
     */
    appearance?: Appearance;
    /**
     * @generated from protobuf field: data.EcomData ecom_data = 197;
     */
    ecomData?: EcomData;
    /**
     * @generated from protobuf field: data.IndustryServiceInfo industry_service_info = 198;
     */
    industryServiceInfo?: IndustryServiceInfo;
    /**
     * @generated from protobuf field: data.RelevantRecommendation relevant_recommendation = 199;
     */
    relevantRecommendation?: RelevantRecommendation;
    /**
     * @generated from protobuf field: data.RoomSpecificSceneTypeInfo scene_type_info = 200;
     */
    sceneTypeInfo?: RoomSpecificSceneTypeInfo;
    /**
     * @generated from protobuf field: data.GameCPData game_cp = 201;
     */
    gameCp?: GameCPData;
    /**
     * @generated from protobuf field: data.GamePlayData game_play = 202;
     */
    gamePlay?: GamePlayData;
    /**
     * @generated from protobuf field: data.UnionLiveInfo union_live_info = 203;
     */
    unionLiveInfo?: UnionLiveInfo;
    /**
     * @generated from protobuf field: data.BeautifyInfo beautify_info = 204;
     */
    beautifyInfo?: BeautifyInfo;
    /**
     * @generated from protobuf field: data.ToolBarData toolbar_data = 205;
     */
    toolbarData?: ToolBarData;
    /**
     * @generated from protobuf field: data.AnchorTabLabel anchor_tab_label = 206;
     */
    anchorTabLabel?: AnchorTabLabel;
    /**
     * @generated from protobuf field: data.LifeGrouponInfo life_groupon_info = 207;
     */
    lifeGrouponInfo?: LifeGrouponInfo;
    /**
     * @generated from protobuf field: data.VipData vip_data = 208;
     */
    vipData?: VipData;
    /**
     * @generated from protobuf field: int64 toutiao_cover_recommend_level = 209;
     */
    toutiaoCoverRecommendLevel: bigint;
    /**
     * @generated from protobuf field: int64 toutiao_title_recommend_level = 210;
     */
    toutiaoTitleRecommendLevel: bigint;
    /**
     * @generated from protobuf field: repeated data.UpperRightWidgetData upper_right_widget_data_list = 211;
     */
    upperRightWidgetDataList: UpperRightWidgetData[];
    /**
     * @generated from protobuf field: data.FeedbackCard live_feedback_card = 212;
     */
    liveFeedbackCard?: FeedbackCard;
    /**
     * @generated from protobuf field: repeated data.LabelInfo assist_label_list = 213;
     */
    assistLabelList: LabelInfo[];
    /**
     * @generated from protobuf field: data.DesireInfo desire_info = 214;
     */
    desireInfo?: DesireInfo;
    /**
     * @generated from protobuf field: data.HotRoomInfo hot_room_info = 215;
     */
    hotRoomInfo?: HotRoomInfo;
    /**
     * @generated from protobuf field: bool with_aggregate_column = 216;
     */
    withAggregateColumn: boolean;
    /**
     * @generated from protobuf field: data.CastScreenData cast_screen_data = 217;
     */
    castScreenData?: CastScreenData;
    /**
     * @generated from protobuf field: data.OfficialChannelExtraInfo official_channel_extra = 218;
     */
    officialChannelExtra?: OfficialChannelExtraInfo;
    /**
     * @generated from protobuf field: string auth_city = 219;
     */
    authCity: string;
    /**
     * @generated from protobuf field: data.ActivityLiveRecommendConfig activity_live_recommend_config = 220;
     */
    activityLiveRecommendConfig?: ActivityLiveRecommendConfig;
    /**
     * @generated from protobuf field: data.RoomChannelData room_channel = 221;
     */
    roomChannel?: RoomChannelData;
    /**
     * @generated from protobuf field: data.PackMetaInfo pack_meta = 222;
     */
    packMeta?: PackMetaInfo;
    /**
     * @generated from protobuf field: data.ActivityData activity_data = 223;
     */
    activityData?: ActivityData;
    /**
     * @generated from protobuf field: data.LikeDisplayConfig like_display_config = 224;
     */
    likeDisplayConfig?: LikeDisplayConfig;
    /**
     * @generated from protobuf field: data.RoomViewStats room_view_stats = 225;
     */
    roomViewStats?: RoomViewStats;
    /**
     * @generated from protobuf field: data.MatchRoomData match = 226;
     */
    match?: MatchRoomData;
    /**
     * @generated from protobuf field: data.CommentaryRoomInfo commentary_room_info = 227;
     */
    commentaryRoomInfo?: CommentaryRoomInfo;
    /**
     * @generated from protobuf field: int64 redpacket_audience_auth = 228;
     */
    redpacketAudienceAuth: bigint;
    /**
     * @generated from protobuf field: data.MatchChatConfig match_chat_config = 229;
     */
    matchChatConfig?: MatchChatConfig;
    /**
     * @generated from protobuf field: int64 vs_main_replay_id = 230;
     */
    vsMainReplayId: bigint;
    /**
     * @generated from protobuf field: string screen_capture_sharing_title = 231;
     */
    screenCaptureSharingTitle: string;
    /**
     * @generated from protobuf field: data.ShareResource share_resource = 232;
     */
    shareResource?: ShareResource;
    /**
     * @generated from protobuf field: repeated string sharing_music_id_list = 233;
     */
    sharingMusicIdList: string[];
    /**
     * @generated from protobuf field: data.PublicScreenBottomInfo public_screen_bottom_info = 234;
     */
    publicScreenBottomInfo?: PublicScreenBottomInfo;
    /**
     * @generated from protobuf field: data.StreamUrl push_stream_hkt = 235;
     */
    pushStreamHkt?: StreamUrl;
    /**
     * @generated from protobuf field: data.RoomBasisData basis = 300;
     */
    basis?: RoomBasisData;
    /**
     * @generated from protobuf field: data.RoomInteractData interact = 301;
     */
    interact?: RoomInteractData;
    /**
     * @generated from protobuf field: data.RoomReqUserData req_user = 303;
     */
    reqUser?: RoomReqUserData;
    /**
     * @generated from protobuf field: data.RoomAnchorData anchor_data = 304;
     */
    anchorData?: RoomAnchorData;
    /**
     * @generated from protobuf field: data.RoomOthersData others = 305;
     */
    others?: RoomOthersData;
    /**
     * @generated from protobuf field: data.PicoInfo pico_info = 306;
     */
    picoInfo?: PicoInfo;
    /**
     * @generated from protobuf field: data.RoomGameData game_data = 307;
     */
    gameData?: RoomGameData;
    /**
     * @generated from protobuf field: data.RoomFeedData feed_data = 308;
     */
    feedData?: RoomFeedData;
    /**
     * @generated from protobuf field: data.OpenContentData open_content_data = 309;
     */
    openContentData?: OpenContentData;
    /**
     * @generated from protobuf field: data.ClientComponent client_component_data = 310;
     */
    clientComponentData?: ClientComponent;
    /**
     * @generated from protobuf field: data.RoomPlatformComponentsData platform_components_data = 311;
     */
    platformComponentsData?: RoomPlatformComponentsData;
}
/**
 * @generated from protobuf message data.RoomPlatformComponentsData
 */
export interface RoomPlatformComponentsData {
    /**
     * @generated from protobuf field: data.RoomTitle room_title = 1;
     */
    roomTitle?: RoomTitle;
    /**
     * @generated from protobuf field: data.RoomViewStats room_count = 2;
     */
    roomCount?: RoomViewStats;
    /**
     * @generated from protobuf field: data.RoomAvator room_avator = 3;
     */
    roomAvator?: RoomAvator;
}
/**
 * @generated from protobuf message data.RoomTitle
 */
export interface RoomTitle {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string introduction = 2;
     */
    introduction: string;
    /**
     * @generated from protobuf field: int64 left_tag = 3;
     */
    leftTag: bigint;
    /**
     * @generated from protobuf field: string left_period = 4;
     */
    leftPeriod: string;
    /**
     * @generated from protobuf field: string left_toast = 5;
     */
    leftToast: string;
}
/**
 * @generated from protobuf message data.RoomAvator
 */
export interface RoomAvator {
    /**
     * @generated from protobuf field: data.Image avatar = 1;
     */
    avatar?: Image;
    /**
     * @generated from protobuf field: data.Image authentication_info = 2;
     */
    authenticationInfo?: Image;
    /**
     * @generated from protobuf field: string nick_name = 3;
     */
    nickName: string;
    /**
     * @generated from protobuf field: bool has_fans_club = 4;
     */
    hasFansClub: boolean;
    /**
     * @generated from protobuf field: int64 follow_status = 5;
     */
    followStatus: bigint;
    /**
     * @generated from protobuf field: bool invalid_follow_status = 6;
     */
    invalidFollowStatus: boolean;
    /**
     * @generated from protobuf field: int64 follow_report_scene = 7;
     */
    followReportScene: bigint;
}
/**
 * @generated from protobuf message data.RoomFeedData
 */
export interface RoomFeedData {
    /**
     * @generated from protobuf field: data.LabelInfo relation_label = 1;
     */
    relationLabel?: LabelInfo;
    /**
     * @generated from protobuf field: data.RoomFeedData.FollowTopAppearance follow_top_appearance = 2;
     */
    followTopAppearance?: RoomFeedData_FollowTopAppearance;
    /**
     * @generated from protobuf field: data.RoomFeedData.StreamCutPosition cut_position = 3;
     */
    cutPosition?: RoomFeedData_StreamCutPosition;
}
/**
 * @generated from protobuf message data.RoomFeedData.StreamCutPosition
 */
export interface RoomFeedData_StreamCutPosition {
    /**
     * @generated from protobuf field: double x1 = 1;
     */
    x1: number;
    /**
     * @generated from protobuf field: double y1 = 2;
     */
    y1: number;
    /**
     * @generated from protobuf field: double x2 = 3;
     */
    x2: number;
    /**
     * @generated from protobuf field: double y2 = 4;
     */
    y2: number;
    /**
     * @generated from protobuf field: int32 source_width = 5;
     */
    sourceWidth: number;
    /**
     * @generated from protobuf field: int32 source_height = 6;
     */
    sourceHeight: number;
}
/**
 * @generated from protobuf message data.RoomFeedData.FollowTopAppearance
 */
export interface RoomFeedData_FollowTopAppearance {
    /**
     * @generated from protobuf field: int32 style = 1;
     */
    style: number;
    /**
     * @generated from protobuf field: data.RoomFeedData.StreamCutPosition cut_position = 2;
     */
    cutPosition?: RoomFeedData_StreamCutPosition;
    /**
     * @generated from protobuf field: data.Image image = 3;
     */
    image?: Image;
}
/**
 * @generated from protobuf message data.PicoInfo
 */
export interface PicoInfo {
    /**
     * @generated from protobuf field: int64 pico_live_type = 1;
     */
    picoLiveType: bigint;
    /**
     * @generated from protobuf field: string pico_virtual_live_bg_image_uri = 2;
     */
    picoVirtualLiveBgImageUri: string;
    /**
     * @generated from protobuf field: string pico_create_scene = 3;
     */
    picoCreateScene: string;
    /**
     * @generated from protobuf field: string custom_info = 4;
     */
    customInfo: string;
    /**
     * @generated from protobuf field: string pico_virtual_live_bg_image_digest = 5;
     */
    picoVirtualLiveBgImageDigest: string;
    /**
     * @generated from protobuf field: data.PicoInfo.VirtualLiveBgImages virtual_live_bg_images = 6;
     */
    virtualLiveBgImages?: PicoInfo_VirtualLiveBgImages;
    /**
     * @generated from protobuf field: float pitch = 7;
     */
    pitch: number;
    /**
     * @generated from protobuf field: int64 client_live_type = 8;
     */
    clientLiveType: bigint;
    /**
     * @generated from protobuf field: int32 pico_vr_transfer = 9;
     */
    picoVrTransfer: number;
    /**
     * @generated from protobuf field: int64 pico_live_mode = 11;
     */
    picoLiveMode: bigint;
}
/**
 * @generated from protobuf message data.PicoInfo.VirtualLiveBgImages
 */
export interface PicoInfo_VirtualLiveBgImages {
    /**
     * @generated from protobuf field: data.Image original_image = 1;
     */
    originalImage?: Image;
    /**
     * @generated from protobuf field: string original_digest = 2;
     */
    originalDigest: string;
    /**
     * @generated from protobuf field: bool is_upright = 3;
     */
    isUpright: boolean;
    /**
     * @generated from protobuf field: repeated data.Image converted_images = 4;
     */
    convertedImages: Image[];
    /**
     * @generated from protobuf field: repeated data.PicoInfo.VirtualLiveBgImages.ConvertedImage converted_list = 5;
     */
    convertedList: PicoInfo_VirtualLiveBgImages_ConvertedImage[];
}
/**
 * @generated from protobuf message data.PicoInfo.VirtualLiveBgImages.ConvertedImage
 */
export interface PicoInfo_VirtualLiveBgImages_ConvertedImage {
    /**
     * @generated from protobuf field: int64 quality = 1;
     */
    quality: bigint;
    /**
     * @generated from protobuf field: data.Image image = 2;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string digest = 3;
     */
    digest: string;
}
/**
 * @generated from protobuf message data.OpenContentData
 */
export interface OpenContentData {
    /**
     * @generated from protobuf field: data.OpenActivityData open_activity_data = 1;
     */
    openActivityData?: OpenActivityData;
}
/**
 * @generated from protobuf message data.OpenActivityData
 */
export interface OpenActivityData {
    /**
     * @generated from protobuf field: data.Image cover_label = 1;
     */
    coverLabel?: Image;
}
/**
 * @generated from protobuf message data.PublicScreenBottomInfo
 */
export interface PublicScreenBottomInfo {
    /**
     * @generated from protobuf field: repeated data.PublicScreenBottomInfo.BottomCard bottom_cards = 1;
     */
    bottomCards: PublicScreenBottomInfo_BottomCard[];
}
/**
 * @generated from protobuf message data.PublicScreenBottomInfo.BottomCard
 */
export interface PublicScreenBottomInfo_BottomCard {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 priority = 2;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string biz_params = 4;
     */
    bizParams: string;
}
/**
 * @generated from protobuf message data.ShareResource
 */
export interface ShareResource {
    /**
     * @generated from protobuf field: data.Image toast_background = 1;
     */
    toastBackground?: Image;
    /**
     * @generated from protobuf field: string ug_share_info = 3;
     */
    ugShareInfo: string;
}
/**
 * @generated from protobuf message data.MatchChatConfig
 */
export interface MatchChatConfig {
    /**
     * @generated from protobuf field: string main_group_icon_url = 1;
     */
    mainGroupIconUrl: string;
    /**
     * @generated from protobuf field: string main_group_background_url = 2;
     */
    mainGroupBackgroundUrl: string;
    /**
     * @generated from protobuf field: string guest_group_icon_url = 3;
     */
    guestGroupIconUrl: string;
    /**
     * @generated from protobuf field: string guest_group_background_url = 4;
     */
    guestGroupBackgroundUrl: string;
    /**
     * @generated from protobuf field: repeated string aggregate_icon_url = 5;
     */
    aggregateIconUrl: string[];
}
/**
 * @generated from protobuf message data.CommentaryRoomInfo
 */
export interface CommentaryRoomInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Image avatar = 2;
     */
    avatar?: Image;
    /**
     * @generated from protobuf field: string nickname = 3;
     */
    nickname: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 room_id = 5;
     */
    roomId: bigint;
}
/**
 * @generated from protobuf message data.RoomBasisData
 */
export interface RoomBasisData {
    /**
     * @generated from protobuf field: int64 next_ping = 1;
     */
    nextPing: bigint;
}
/**
 * @generated from protobuf message data.RoomInteractData
 */
export interface RoomInteractData {
    /**
     * @generated from protobuf field: int64 landscape_comment_style = 1;
     */
    landscapeCommentStyle: bigint;
    /**
     * @generated from protobuf field: data.EpisodeExtraInfo vs_component_extra = 2;
     */
    vsComponentExtra?: EpisodeExtraInfo;
}
/**
 * @generated from protobuf message data.RoomReqUserData
 */
export interface RoomReqUserData {
    /**
     * @generated from protobuf field: float user_share_room_score = 1;
     */
    userShareRoomScore: number;
    /**
     * @generated from protobuf field: int32 enter_user_device_type = 2;
     */
    enterUserDeviceType: number;
}
/**
 * @generated from protobuf message data.RoomAnchorData
 */
export interface RoomAnchorData {
    /**
     * @generated from protobuf field: string finish_schema = 1;
     */
    finishSchema: string;
    /**
     * @generated from protobuf field: data.GameAnchorInfo game_anchor_info = 2;
     */
    gameAnchorInfo?: GameAnchorInfo;
}
/**
 * @generated from protobuf message data.GameAnchorInfo
 */
export interface GameAnchorInfo {
    /**
     * @generated from protobuf field: string category_id = 1;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: bool is_key_anchor = 2;
     */
    isKeyAnchor: boolean;
}
/**
 * @generated from protobuf message data.RoomOthersData
 */
export interface RoomOthersData {
    /**
     * @generated from protobuf field: data.DecotationDetail deco_detail = 1;
     */
    decoDetail?: DecotationDetail;
    /**
     * @generated from protobuf field: data.MorePanelData more_panel_info = 2;
     */
    morePanelInfo?: MorePanelData;
    /**
     * @generated from protobuf field: data.AppointmentData appointment_info = 3;
     */
    appointmentInfo?: AppointmentData;
    /**
     * @generated from protobuf field: data.WebSkinData web_skin = 4;
     */
    webSkin?: WebSkinData;
    /**
     * @generated from protobuf field: data.WebProgramme programme = 5;
     */
    programme?: WebProgramme;
    /**
     * @generated from protobuf field: data.LiveMatrixInfo live_matrix_info = 6;
     */
    liveMatrixInfo?: LiveMatrixInfo;
    /**
     * @generated from protobuf field: data.GiftPanelTopperTray gift_panel_topper_tray = 8;
     */
    giftPanelTopperTray?: GiftPanelTopperTray;
    /**
     * @generated from protobuf field: data.EnterGiftAnimation enter_gift_animation = 9;
     */
    enterGiftAnimation?: EnterGiftAnimation;
}
/**
 * @generated from protobuf message data.WebLivePortConfig
 */
export interface WebLivePortConfig {
    /**
     * @generated from protobuf field: int32 strategy_type = 1;
     */
    strategyType: number;
    /**
     * @generated from protobuf field: bool use_config_duration = 2;
     */
    useConfigDuration: boolean;
    /**
     * @generated from protobuf field: string pause_monitor_duration = 3;
     */
    pauseMonitorDuration: string;
}
/**
 * @generated from protobuf message data.WebSkinData
 */
export interface WebSkinData {
    /**
     * @generated from protobuf field: bool enable_skin = 1;
     */
    enableSkin: boolean;
}
/**
 * @generated from protobuf message data.WebProgramme
 */
export interface WebProgramme {
    /**
     * @generated from protobuf field: bool enable_programme = 1;
     */
    enableProgramme: boolean;
}
/**
 * @generated from protobuf message data.LiveMatrixInfo
 */
export interface LiveMatrixInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message data.RoomGameData
 */
export interface RoomGameData {
    /**
     * @generated from protobuf field: data.RoomGameDataChannelConfig room_game_data_channel_config = 1;
     */
    roomGameDataChannelConfig?: RoomGameDataChannelConfig;
}
/**
 * @generated from protobuf message data.AppointmentData
 */
export interface AppointmentData {
    /**
     * @generated from protobuf field: int64 appointment_id = 1;
     */
    appointmentId: bigint;
    /**
     * @generated from protobuf field: bool is_subscribe = 2;
     */
    isSubscribe: boolean;
}
/**
 * @generated from protobuf message data.MorePanelData
 */
export interface MorePanelData {
    /**
     * @generated from protobuf field: int32 load_strategy = 1;
     */
    loadStrategy: number;
}
/**
 * @generated from protobuf message data.ActivityData
 */
export interface ActivityData {
    /**
     * @generated from protobuf field: bool xg_play = 1;
     */
    xgPlay: boolean;
    /**
     * @generated from protobuf field: data.MatchRoomData match = 2;
     */
    match?: MatchRoomData;
}
/**
 * @generated from protobuf message data.CastScreenData
 */
export interface CastScreenData {
    /**
     * @generated from protobuf field: string show_text = 1;
     */
    showText: string;
    /**
     * @generated from protobuf field: repeated int64 allow_list = 2;
     */
    allowList: bigint[];
    /**
     * @generated from protobuf field: int32 sdk_version = 3;
     */
    sdkVersion: number;
    /**
     * @generated from protobuf field: data.CastOttPermission permission = 4;
     */
    permission?: CastOttPermission;
    /**
     * @generated from protobuf field: int32 force_cast_only = 5;
     */
    forceCastOnly: number;
}
/**
 * @generated from protobuf message data.CastOttPermission
 */
export interface CastOttPermission {
    /**
     * @generated from protobuf field: bool enable = 1;
     */
    enable: boolean;
    /**
     * @generated from protobuf field: string failure_toast = 2;
     */
    failureToast: string;
}
/**
 * @generated from protobuf message data.DesireInfo
 */
export interface DesireInfo {
    /**
     * @generated from protobuf field: int64 desire_id = 1;
     */
    desireId: bigint;
    /**
     * @generated from protobuf field: string desire_id_str = 2;
     */
    desireIdStr: string;
}
/**
 * @generated from protobuf message data.FeedbackCard
 */
export interface FeedbackCard {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 feedback_id = 2;
     */
    feedbackId: bigint;
    /**
     * @generated from protobuf field: repeated data.FeedbackCard.Question question = 3;
     */
    question: FeedbackCard_Question[];
    /**
     * @generated from protobuf field: data.FeedbackCard.Condition condition = 4;
     */
    condition?: FeedbackCard_Condition;
    /**
     * @generated from protobuf field: int64 room_id = 5;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: data.Room room_data = 6;
     */
    roomData?: Room;
    /**
     * @generated from protobuf field: string negative_text = 7;
     */
    negativeText: string;
    /**
     * @generated from protobuf field: data.Image bgm = 8;
     */
    bgm?: Image;
    /**
     * @generated from protobuf field: int32 feedback_type = 9;
     */
    feedbackType: number;
    /**
     * @generated from protobuf field: int32 inflow_feedback_type = 10;
     */
    inflowFeedbackType: number;
}
/**
 * @generated from protobuf message data.FeedbackCard.Option
 */
export interface FeedbackCard_Option {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 sub_question_id = 3;
     */
    subQuestionId: bigint;
    /**
     * @generated from protobuf field: bool negative = 4;
     */
    negative: boolean;
    /**
     * @generated from protobuf field: string toast_text = 5;
     */
    toastText: string;
    /**
     * @generated from protobuf field: int32 tendency = 6;
     */
    tendency: number;
}
/**
 * @generated from protobuf message data.FeedbackCard.RoomCardStruct
 */
export interface FeedbackCard_RoomCardStruct {
    /**
     * @generated from protobuf field: data.Room data = 1;
     */
    data?: Room;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 3;
     */
    subTitle: string;
}
/**
 * @generated from protobuf message data.FeedbackCard.Question
 */
export interface FeedbackCard_Question {
    /**
     * @generated from protobuf field: string question_key = 1;
     */
    questionKey: string;
    /**
     * @generated from protobuf field: string question_text = 2;
     */
    questionText: string;
    /**
     * @generated from protobuf field: int64 type = 3;
     */
    type: bigint;
    /**
     * @generated from protobuf field: repeated data.FeedbackCard.Option options = 4;
     */
    options: FeedbackCard_Option[];
    /**
     * @generated from protobuf field: int64 question_id = 5;
     */
    questionId: bigint;
    /**
     * @generated from protobuf field: repeated data.FeedbackCard.RoomCardStruct room_cards = 6;
     */
    roomCards: FeedbackCard_RoomCardStruct[];
}
/**
 * @generated from protobuf message data.FeedbackCard.Condition
 */
export interface FeedbackCard_Condition {
    /**
     * @generated from protobuf field: int64 from_time = 1;
     */
    fromTime: bigint;
    /**
     * @generated from protobuf field: int64 to_time = 2;
     */
    toTime: bigint;
    /**
     * @generated from protobuf field: repeated int64 action_ids = 3;
     */
    actionIds: bigint[];
    /**
     * @generated from protobuf field: int64 action_type = 4;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: int64 preview_time = 5;
     */
    previewTime: bigint;
}
/**
 * @generated from protobuf message data.UpperRightWidgetData
 */
export interface UpperRightWidgetData {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 widget_type = 2;
     */
    widgetType: number;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
    /**
     * @generated from protobuf field: int32 priority = 4;
     */
    priority: number;
}
/**
 * @generated from protobuf message data.VipData
 */
export interface VipData {
    /**
     * @generated from protobuf field: int32 vip_room = 1;
     */
    vipRoom: number;
}
/**
 * @generated from protobuf message data.AnchorTabLabel
 */
export interface AnchorTabLabel {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: data.Image label = 2;
     */
    label?: Image;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int32 style = 4;
     */
    style: number;
    /**
     * @generated from protobuf field: int32 type = 5;
     */
    type: number;
    /**
     * @generated from protobuf field: string key = 6;
     */
    key: string;
    /**
     * @generated from protobuf field: string accessible_content = 7;
     */
    accessibleContent: string;
}
/**
 * @generated from protobuf message data.BeautifyInfo
 */
export interface BeautifyInfo {
    /**
     * @generated from protobuf field: bool use_filter = 1;
     */
    useFilter: boolean;
    /**
     * @generated from protobuf field: bool commerce_use_filter = 2;
     */
    commerceUseFilter: boolean;
}
/**
 * @generated from protobuf message data.UnionLiveInfo
 */
export interface UnionLiveInfo {
    /**
     * @generated from protobuf field: repeated data.UnionLiveInfo.GuestAnchor guest_anchors = 1;
     */
    guestAnchors: UnionLiveInfo_GuestAnchor[];
    /**
     * @generated from protobuf field: string avatar_description = 2;
     */
    avatarDescription: string;
    /**
     * @generated from protobuf field: bool fixed_sort = 3;
     */
    fixedSort: boolean;
    /**
     * @generated from protobuf field: string tag = 4;
     */
    tag: string;
    /**
     * @generated from protobuf field: int32 type = 5;
     */
    type: number;
}
/**
 * @generated from protobuf message data.UnionLiveInfo.GuestAnchor
 */
export interface UnionLiveInfo_GuestAnchor {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string tag = 2;
     */
    tag: string;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message data.RoomSpecificSceneTypeInfo
 */
export interface RoomSpecificSceneTypeInfo {
    /**
     * @generated from protobuf field: bool is_union_live_room = 1;
     */
    isUnionLiveRoom: boolean;
    /**
     * @generated from protobuf field: bool is_life = 2;
     */
    isLife: boolean;
    /**
     * @generated from protobuf field: int32 is_protected_room = 3;
     */
    isProtectedRoom: number;
    /**
     * @generated from protobuf field: int32 is_lasted_goods_room = 4;
     */
    isLastedGoodsRoom: number;
    /**
     * @generated from protobuf field: int32 is_desire_room = 5;
     */
    isDesireRoom: number;
    /**
     * @generated from protobuf field: bool commentary_type = 6;
     */
    commentaryType: boolean;
}
/**
 * @generated from protobuf message data.RelevantRecommendation
 */
export interface RelevantRecommendation {
    /**
     * @generated from protobuf field: int32 relevant_type = 1;
     */
    relevantType: number;
    /**
     * @generated from protobuf field: int32 bottom_bar_category = 2;
     */
    bottomBarCategory: number;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string bar_text_prefix = 4;
     */
    barTextPrefix: string;
    /**
     * @generated from protobuf field: string bar_text_postfix = 5;
     */
    barTextPostfix: string;
    /**
     * @generated from protobuf field: data.RelevantRecommendation.HighLightInfo high_light_info = 6;
     */
    highLightInfo?: RelevantRecommendation_HighLightInfo;
    /**
     * @generated from protobuf field: data.RelevantRecommendation.EcomInfo ecom_info = 7;
     */
    ecomInfo?: RelevantRecommendation_EcomInfo;
    /**
     * @generated from protobuf field: data.RelevantRecommendation.VsInfo vs_info = 8;
     */
    vsInfo?: RelevantRecommendation_VsInfo;
    /**
     * @generated from protobuf field: data.RelevantRecommendation.WhiteCategoryInfo white_category_info = 9;
     */
    whiteCategoryInfo?: RelevantRecommendation_WhiteCategoryInfo;
}
/**
 * @generated from protobuf message data.RelevantRecommendation.HighLightInfo
 */
export interface RelevantRecommendation_HighLightInfo {
    /**
     * @generated from protobuf field: string main_url = 1;
     */
    mainUrl: string;
    /**
     * @generated from protobuf field: string bak_url = 2;
     */
    bakUrl: string;
}
/**
 * @generated from protobuf message data.RelevantRecommendation.EcomInfo
 */
export interface RelevantRecommendation_EcomInfo {
    /**
     * @generated from protobuf field: int64 product_id = 1;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: string product_name = 2;
     */
    productName: string;
}
/**
 * @generated from protobuf message data.RelevantRecommendation.Episode
 */
export interface RelevantRecommendation_Episode {
    /**
     * @generated from protobuf field: int64 episode_id = 1;
     */
    episodeId: bigint;
    /**
     * @generated from protobuf field: string episode_name = 2;
     */
    episodeName: string;
    /**
     * @generated from protobuf field: data.Image episode_cover = 3;
     */
    episodeCover?: Image;
    /**
     * @generated from protobuf field: string current_period = 4;
     */
    currentPeriod: string;
    /**
     * @generated from protobuf field: int64 season_id = 5;
     */
    seasonId: bigint;
    /**
     * @generated from protobuf field: string item_id = 6;
     */
    itemId: string;
}
/**
 * @generated from protobuf message data.RelevantRecommendation.VsInfo
 */
export interface RelevantRecommendation_VsInfo {
    /**
     * @generated from protobuf field: repeated data.RelevantRecommendation.Episode episodes = 1;
     */
    episodes: RelevantRecommendation_Episode[];
}
/**
 * @generated from protobuf message data.RelevantRecommendation.WhiteCategoryInfo
 */
export interface RelevantRecommendation_WhiteCategoryInfo {
    /**
     * @generated from protobuf field: int64 first_level_tag_id = 1;
     */
    firstLevelTagId: bigint;
}
/**
 * @generated from protobuf message data.IndustryServiceInfo
 */
export interface IndustryServiceInfo {
    /**
     * @generated from protobuf field: bool entrance_open = 1;
     */
    entranceOpen: boolean;
    /**
     * @generated from protobuf field: data.Image icon_image = 2;
     */
    iconImage?: Image;
    /**
     * @generated from protobuf field: data.IndustryServiceInfo.ConsultInfo consult_info = 3;
     */
    consultInfo?: IndustryServiceInfo_ConsultInfo;
}
/**
 * @generated from protobuf message data.IndustryServiceInfo.ConsultInfo
 */
export interface IndustryServiceInfo_ConsultInfo {
    /**
     * @generated from protobuf field: string biz_info = 1;
     */
    bizInfo: string;
    /**
     * @generated from protobuf field: int32 consult_role = 2;
     */
    consultRole: number;
}
/**
 * @generated from protobuf message data.EcomData
 */
export interface EcomData {
    /**
     * @generated from protobuf field: data.EcomLiveCard live_card = 1;
     */
    liveCard?: EcomLiveCard;
    /**
     * @generated from protobuf field: data.EcomPop pop = 2;
     */
    pop?: EcomPop;
    /**
     * @generated from protobuf field: data.EcomGoodsCard goods_card = 3;
     */
    goodsCard?: EcomGoodsCard;
    /**
     * @generated from protobuf field: repeated data.RedsShowInfo reds_show_infos = 4;
     */
    redsShowInfos: RedsShowInfo[];
    /**
     * @generated from protobuf field: data.RoomCartV2 room_cart_v2 = 5;
     */
    roomCartV2?: RoomCartV2;
}
/**
 * @generated from protobuf message data.AvatarLiveInfo
 */
export interface AvatarLiveInfo {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 text_size = 3;
     */
    textSize: number;
    /**
     * @generated from protobuf field: data.Image image = 4;
     */
    image?: Image;
}
/**
 * @generated from protobuf message data.WelfareProjectInfo
 */
export interface WelfareProjectInfo {
    /**
     * @generated from protobuf field: int64 project_id = 1;
     */
    projectId: bigint;
    /**
     * @generated from protobuf field: int64 show_frequency = 2;
     */
    showFrequency: bigint;
    /**
     * @generated from protobuf field: string container_card_url = 3;
     */
    containerCardUrl: string;
    /**
     * @generated from protobuf field: string welfare_detail_page_url = 4;
     */
    welfareDetailPageUrl: string;
    /**
     * @generated from protobuf field: string project_id_str = 5;
     */
    projectIdStr: string;
}
/**
 * @generated from protobuf message data.CornerMarkReach
 */
export interface CornerMarkReach {
    /**
     * @generated from protobuf field: bool need_reach = 1;
     */
    needReach: boolean;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 elem_type = 3;
     */
    elemType: bigint;
}
/**
 * @generated from protobuf message data.VerticalTypeInfo
 */
export interface VerticalTypeInfo {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 tab_type = 2;
     */
    tabType: bigint;
    /**
     * @generated from protobuf field: int64 tag_id = 3;
     */
    tagId: bigint;
    /**
     * @generated from protobuf field: bool is_sub_tag = 4;
     */
    isSubTag: boolean;
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 valid_time = 6;
     */
    validTime: bigint;
    /**
     * @generated from protobuf field: int64 priority = 7;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: string extra = 8;
     */
    extra: string;
    /**
     * @generated from protobuf field: string event_extra = 9;
     */
    eventExtra: string;
}
/**
 * @generated from protobuf message data.FilterWord
 */
export interface FilterWord {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool is_selected = 2;
     */
    isSelected: boolean;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message data.LabelInfo
 */
export interface LabelInfo {
    /**
     * @generated from protobuf field: int64 label_type = 1;
     */
    labelType: bigint;
    /**
     * @generated from protobuf field: int64 display_type = 2;
     */
    displayType: bigint;
    /**
     * @generated from protobuf field: data.SpliceLabel splice_label = 3;
     */
    spliceLabel?: SpliceLabel;
    /**
     * @generated from protobuf field: data.Image whole_label = 4;
     */
    wholeLabel?: Image;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
    /**
     * @generated from protobuf field: data.ProfilePicSpliceLabel profile_pic_splice_label = 6;
     */
    profilePicSpliceLabel?: ProfilePicSpliceLabel;
}
/**
 * @generated from protobuf message data.VSLinkInfo
 */
export interface VSLinkInfo {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string tab_title = 2;
     */
    tabTitle: string;
    /**
     * @generated from protobuf field: repeated data.VSLinkNode rooms = 3;
     */
    rooms: VSLinkNode[];
    /**
     * @generated from protobuf field: int32 pattern = 4;
     */
    pattern: number;
}
/**
 * @generated from protobuf message data.VSLinkNode
 */
export interface VSLinkNode {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: string room_id_str = 2;
     */
    roomIdStr: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 live_room_mode = 4;
     */
    liveRoomMode: bigint;
    /**
     * @generated from protobuf field: data.User owner = 5;
     */
    owner?: User;
}
/**
 * @generated from protobuf message data.SpliceLabel
 */
export interface SpliceLabel {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: string text_color = 2;
     */
    textColor: string;
    /**
     * @generated from protobuf field: data.Image background_image = 3;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: data.Image icon_image = 4;
     */
    iconImage?: Image;
    /**
     * @generated from protobuf field: string background_color = 5;
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message data.ProfilePicSpliceLabel
 */
export interface ProfilePicSpliceLabel {
    /**
     * @generated from protobuf field: repeated data.LabelProfileItem profile_list = 1;
     */
    profileList: LabelProfileItem[];
}
/**
 * @generated from protobuf message data.LabelProfileItem
 */
export interface LabelProfileItem {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string nick_name = 2;
     */
    nickName: string;
    /**
     * @generated from protobuf field: data.Image profile_pic = 3;
     */
    profilePic?: Image;
}
/**
 * @generated from protobuf message data.LiveStatusInfo
 */
export interface LiveStatusInfo {
    /**
     * @generated from protobuf field: int32 live_status = 1;
     */
    liveStatus: number;
    /**
     * @generated from protobuf field: data.User live_user = 2;
     */
    liveUser?: User;
    /**
     * @generated from protobuf field: string preview_text = 4;
     */
    previewText: string;
}
/**
 * @generated from protobuf message data.ShortTouchAuth
 */
export interface ShortTouchAuth {
    /**
     * @generated from protobuf field: int32 commerce_lottery = 1;
     */
    commerceLottery: number;
}
/**
 * @generated from protobuf message data.EpisodeMod
 */
export interface EpisodeMod {
    /**
     * @generated from protobuf field: int32 episode_stage = 1;
     */
    episodeStage: number;
    /**
     * @generated from protobuf field: int32 episode_type = 2;
     */
    episodeType: number;
    /**
     * @generated from protobuf field: int32 episode_sub_type = 3;
     */
    episodeSubType: number;
    /**
     * @generated from protobuf field: int32 episode_record_type = 4;
     */
    episodeRecordType: number;
}
/**
 * @generated from protobuf message data.ToolbarItemConfig
 */
export interface ToolbarItemConfig {
    /**
     * @generated from protobuf field: int32 toolbar_type = 1;
     */
    toolbarType: number;
    /**
     * @generated from protobuf field: data.Image icon = 2;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string jump_schema = 3;
     */
    jumpSchema: string;
    /**
     * @generated from protobuf field: int32 display_type = 4;
     */
    displayType: number;
    /**
     * @generated from protobuf field: data.Image dynamic_icon = 5;
     */
    dynamicIcon?: Image;
    /**
     * @generated from protobuf field: data.Image icon_vertical = 6;
     */
    iconVertical?: Image;
    /**
     * @generated from protobuf field: data.Image dynamic_bottom_icon = 7;
     */
    dynamicBottomIcon?: Image;
    /**
     * @generated from protobuf field: data.Image bottom_icon = 8;
     */
    bottomIcon?: Image;
    /**
     * @generated from protobuf field: repeated data.Toast toast_list = 9;
     */
    toastList: Toast[];
    /**
     * @generated from protobuf field: string extra = 10;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.Toast
 */
export interface Toast {
    /**
     * @generated from protobuf field: int64 start_time = 1;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 2;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string schema = 4;
     */
    schema: string;
    /**
     * @generated from protobuf field: string toast_id = 5;
     */
    toastId: string;
}
/**
 * @generated from protobuf message data.WatchInfo
 */
export interface WatchInfo {
    /**
     * @generated from protobuf field: string desc = 1;
     */
    desc: string;
    /**
     * @generated from protobuf field: string count = 2;
     */
    count: string;
    /**
     * @generated from protobuf field: string count_with_backup = 3;
     */
    countWithBackup: string;
    /**
     * @generated from protobuf field: int32 real_count = 4;
     */
    realCount: number;
    /**
     * @generated from protobuf field: int64 real_count_int64 = 5;
     */
    realCountInt64: bigint;
    /**
     * @generated from protobuf field: int32 live_count_display_type = 6;
     */
    liveCountDisplayType: number;
    /**
     * @generated from protobuf field: int64 display_type_start_time = 7;
     */
    displayTypeStartTime: bigint;
    /**
     * @generated from protobuf field: string format_count = 8;
     */
    formatCount: string;
}
/**
 * @generated from protobuf message data.EpisodeExtraInfo
 */
export interface EpisodeExtraInfo {
    /**
     * @generated from protobuf field: data.EpisodeMod episode_mod = 1;
     */
    episodeMod?: EpisodeMod;
    /**
     * @generated from protobuf field: string current_period = 2;
     */
    currentPeriod: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string episode_list_h5 = 4;
     */
    episodeListH5: string;
    /**
     * @generated from protobuf field: data.WatchInfo watch_info = 5;
     */
    watchInfo?: WatchInfo;
    /**
     * @generated from protobuf field: int64 episode_id = 6;
     */
    episodeId: bigint;
    /**
     * @generated from protobuf field: string episode_id_str = 7;
     */
    episodeIdStr: string;
    /**
     * @generated from protobuf field: string item_id = 8;
     */
    itemId: string;
    /**
     * @generated from protobuf field: string selection_url = 9;
     */
    selectionUrl: string;
    /**
     * @generated from protobuf field: string relation_place_text = 10;
     */
    relationPlaceText: string;
    /**
     * @generated from protobuf field: repeated string operation_place_text_list = 11;
     */
    operationPlaceTextList: string[];
    /**
     * @generated from protobuf field: repeated data.ToolbarItemConfig toolbar_list = 12;
     */
    toolbarList: ToolbarItemConfig[];
    /**
     * @generated from protobuf field: bool collected = 13;
     */
    collected: boolean;
    /**
     * @generated from protobuf field: int64 season_id = 14;
     */
    seasonId: bigint;
    /**
     * @generated from protobuf field: string finish_url = 15;
     */
    finishUrl: string;
    /**
     * @generated from protobuf field: string release_time = 16;
     */
    releaseTime: string;
    /**
     * @generated from protobuf field: int64 watch_period = 17;
     */
    watchPeriod: bigint;
    /**
     * @generated from protobuf field: int64 latest_period = 18;
     */
    latestPeriod: bigint;
    /**
     * @generated from protobuf field: string show_name = 19;
     */
    showName: string;
    /**
     * @generated from protobuf field: int32 current_period_raw = 20;
     */
    currentPeriodRaw: number;
    /**
     * @generated from protobuf field: int32 video_code = 21;
     */
    videoCode: number;
    /**
     * @generated from protobuf field: string season_id_str = 22;
     */
    seasonIdStr: string;
    /**
     * @generated from protobuf field: string watch_pv_raw = 23;
     */
    watchPvRaw: string;
    /**
     * @generated from protobuf field: int64 next_special_episode_id = 24;
     */
    nextSpecialEpisodeId: bigint;
    /**
     * @generated from protobuf field: data.Image cover = 25;
     */
    cover?: Image;
    /**
     * @generated from protobuf field: data.Image cover_vertical = 26;
     */
    coverVertical?: Image;
    /**
     * @generated from protobuf field: int32 style = 27;
     */
    style: number;
    /**
     * @generated from protobuf field: data.EpisodePremierePlay play_control = 28;
     */
    playControl?: EpisodePremierePlay;
    /**
     * @generated from protobuf field: data.EpisodePreviewImage preview_image = 29;
     */
    previewImage?: EpisodePreviewImage;
    /**
     * @generated from protobuf field: data.VSGiftPannel gift_pannel = 30;
     */
    giftPannel?: VSGiftPannel;
    /**
     * @generated from protobuf field: data.VSPannelIcon pannel_icon = 31;
     */
    pannelIcon?: VSPannelIcon;
    /**
     * @generated from protobuf field: repeated data.ToolbarItemConfig pannel_toolbar = 32;
     */
    pannelToolbar: ToolbarItemConfig[];
    /**
     * @generated from protobuf field: data.EpisodePreviewBottom preview_bottom = 33;
     */
    previewBottom?: EpisodePreviewBottom;
    /**
     * @generated from protobuf field: string draw_sub_title = 34;
     */
    drawSubTitle: string;
    /**
     * @generated from protobuf field: data.Image season_cover_vertical = 35;
     */
    seasonCoverVertical?: Image;
    /**
     * @generated from protobuf field: repeated data.VSCameraInfo camera_infos = 36;
     */
    cameraInfos: VSCameraInfo[];
    /**
     * @generated from protobuf field: int64 default_camera_id = 37;
     */
    defaultCameraId: bigint;
    /**
     * @generated from protobuf field: int64 default_camera_id_str = 38;
     */
    defaultCameraIdStr: bigint;
    /**
     * @generated from protobuf field: string default_camera_id_str_v2 = 39;
     */
    defaultCameraIdStrV2: string;
    /**
     * @generated from protobuf field: data.VSCameraInfo priority_camera = 40;
     */
    priorityCamera?: VSCameraInfo;
    /**
     * @generated from protobuf field: string multi_season_tag = 41;
     */
    multiSeasonTag: string;
    /**
     * @generated from protobuf field: data.Image preview_background = 42;
     */
    previewBackground?: Image;
    /**
     * @generated from protobuf field: data.Image background = 43;
     */
    background?: Image;
    /**
     * @generated from protobuf field: data.EpisodeMod mod = 44;
     */
    mod?: EpisodeMod;
    /**
     * @generated from protobuf field: data.Image item_comment_icon = 45;
     */
    itemCommentIcon?: Image;
    /**
     * @generated from protobuf field: data.VSWatermark vs_watermark = 46;
     */
    vsWatermark?: VSWatermark;
    /**
     * @generated from protobuf field: data.VSItemComment item_comment = 47;
     */
    itemComment?: VSItemComment;
    /**
     * @generated from protobuf field: string season_type_name = 48;
     */
    seasonTypeName: string;
    /**
     * @generated from protobuf field: data.VSBar vs_bar = 49;
     */
    vsBar?: VSBar;
    /**
     * @generated from protobuf field: data.WatchInfo season_watch_info = 50;
     */
    seasonWatchInfo?: WatchInfo;
    /**
     * @generated from protobuf field: data.VSLinkInfo link_room_info = 51;
     */
    linkRoomInfo?: VSLinkInfo;
    /**
     * @generated from protobuf field: data.CommentConfig comment_config = 52;
     */
    commentConfig?: CommentConfig;
    /**
     * @generated from protobuf field: string camera_infos_table_title = 53;
     */
    cameraInfosTableTitle: string;
    /**
     * @generated from protobuf field: int32 episode_status = 54;
     */
    episodeStatus: number;
    /**
     * @generated from protobuf field: data.MatchRoomInfo match_room_info = 55;
     */
    matchRoomInfo?: MatchRoomInfo;
    /**
     * @generated from protobuf field: data.MultiCameraBasicInfo multi_camera_basic_info = 56;
     */
    multiCameraBasicInfo?: MultiCameraBasicInfo;
    /**
     * @generated from protobuf field: data.SharePosterInfo share_poster_info = 57;
     */
    sharePosterInfo?: SharePosterInfo;
    /**
     * @generated from protobuf field: data.VSPremiereToast premiere_toast = 58;
     */
    premiereToast?: VSPremiereToast;
    /**
     * @generated from protobuf field: string preview_bottom_text = 59;
     */
    previewBottomText: string;
    /**
     * @generated from protobuf field: repeated data.BusinessConfigure business_configure = 60;
     */
    businessConfigure: BusinessConfigure[];
    /**
     * @generated from protobuf field: string public_screen_color = 61;
     */
    publicScreenColor: string;
    /**
     * @generated from protobuf field: string chat_tray_color = 62;
     */
    chatTrayColor: string;
    /**
     * @generated from protobuf field: data.MultiTab multi_tab = 63;
     */
    multiTab?: MultiTab;
    /**
     * @generated from protobuf field: data.Image main_camera_cover = 64;
     */
    mainCameraCover?: Image;
    /**
     * @generated from protobuf field: string main_camera_title = 65;
     */
    mainCameraTitle: string;
    /**
     * @generated from protobuf field: bool is_interact_config_exist = 67;
     */
    isInteractConfigExist: boolean;
    /**
     * @generated from protobuf field: data.MainCameraMatchInfo main_camera_match_info = 68;
     */
    mainCameraMatchInfo?: MainCameraMatchInfo;
    /**
     * @generated from protobuf field: int64 group_id = 69;
     */
    groupId: bigint;
    /**
     * @generated from protobuf field: data.VSConfigDrawer vs_config_drawer = 70;
     */
    vsConfigDrawer?: VSConfigDrawer;
    /**
     * @generated from protobuf field: data.TitleIcon title_icon = 71;
     */
    titleIcon?: TitleIcon;
    /**
     * @generated from protobuf field: string group_id_str = 72;
     */
    groupIdStr: string;
}
/**
 * @generated from protobuf message data.TitleIcon
 */
export interface TitleIcon {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int32 size_type = 2;
     */
    sizeType: number;
}
/**
 * @generated from protobuf message data.VSConfigDrawer
 */
export interface VSConfigDrawer {
    /**
     * @generated from protobuf field: data.MatchDrawer drawer = 1;
     */
    drawer?: MatchDrawer;
    /**
     * @generated from protobuf field: data.Image drawer_label = 2;
     */
    drawerLabel?: Image;
    /**
     * @generated from protobuf field: data.Image drawer_background = 3;
     */
    drawerBackground?: Image;
}
/**
 * @generated from protobuf message data.VSPremiereToast
 */
export interface VSPremiereToast {
    /**
     * @generated from protobuf field: string left_top_toast = 1;
     */
    leftTopToast: string;
    /**
     * @generated from protobuf field: string player_toast = 2;
     */
    playerToast: string;
    /**
     * @generated from protobuf field: string player_top_toast = 3;
     */
    playerTopToast: string;
    /**
     * @generated from protobuf field: data.Image icon = 4;
     */
    icon?: Image;
}
/**
 * @generated from protobuf message data.CommentConfig
 */
export interface CommentConfig {
    /**
     * @generated from protobuf field: repeated data.CommentColor comment_colors = 1;
     */
    commentColors: CommentColor[];
    /**
     * @generated from protobuf field: repeated data.CommentRole comment_roles = 2;
     */
    commentRoles: CommentRole[];
    /**
     * @generated from protobuf field: string role_suffix = 3;
     */
    roleSuffix: string;
    /**
     * @generated from protobuf field: string role_title = 4;
     */
    roleTitle: string;
    /**
     * @generated from protobuf field: string unlock_role_tip = 5;
     */
    unlockRoleTip: string;
    /**
     * @generated from protobuf field: repeated data.CommentMedal comment_medals = 6;
     */
    commentMedals: CommentMedal[];
    /**
     * @generated from protobuf field: string medal_title = 7;
     */
    medalTitle: string;
}
/**
 * @generated from protobuf message data.CommentMedal
 */
export interface CommentMedal {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image image = 2;
     */
    image?: Image;
    /**
     * @generated from protobuf field: data.Image keyboard_image = 4;
     */
    keyboardImage?: Image;
}
/**
 * @generated from protobuf message data.CommentColor
 */
export interface CommentColor {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string color = 2;
     */
    color: string;
}
/**
 * @generated from protobuf message data.CommentRole
 */
export interface CommentRole {
    /**
     * @generated from protobuf field: int64 role_id = 1;
     */
    roleId: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image avatar = 3;
     */
    avatar?: Image;
}
/**
 * @generated from protobuf message data.Bonus
 */
export interface Bonus {
    /**
     * @generated from protobuf field: int64 bonus_type = 1;
     */
    bonusType: bigint;
    /**
     * @generated from protobuf field: data.BonusAuthor author = 2;
     */
    author?: BonusAuthor;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 4;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string text = 5;
     */
    text: string;
    /**
     * @generated from protobuf field: string style = 6;
     */
    style: string;
    /**
     * @generated from protobuf field: data.BonusCommerce commerce_info = 7;
     */
    commerceInfo?: BonusCommerce;
    /**
     * @generated from protobuf field: string open_url = 8;
     */
    openUrl: string;
    /**
     * @generated from protobuf field: string token = 9;
     */
    token: string;
    /**
     * @generated from protobuf field: int64 source = 10;
     */
    source: bigint;
    /**
     * @generated from protobuf field: data.Image label = 11;
     */
    label?: Image;
    /**
     * @generated from protobuf field: int64 scene_id = 12;
     */
    sceneId: bigint;
    /**
     * @generated from protobuf field: bool maybe_carp = 13;
     */
    maybeCarp: boolean;
    /**
     * @generated from protobuf field: int64 countdown_second = 14;
     */
    countdownSecond: bigint;
}
/**
 * @generated from protobuf message data.BonusCommerce
 */
export interface BonusCommerce {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.BonusAuthor
 */
export interface BonusAuthor {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image avatar_larger = 3;
     */
    avatarLarger?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 4;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_medium = 5;
     */
    avatarMedium?: Image;
}
/**
 * @generated from protobuf message data.BorderInfo
 */
export interface BorderInfo {
    /**
     * @generated from protobuf field: int64 border_type = 1;
     */
    borderType: bigint;
    /**
     * @generated from protobuf field: data.StaticBorderInfo static_border = 2;
     */
    staticBorder?: StaticBorderInfo;
    /**
     * @generated from protobuf field: data.DynamicBorderInfo dynamic_border = 3;
     */
    dynamicBorder?: DynamicBorderInfo;
    /**
     * @generated from protobuf field: int64 duration = 4;
     */
    duration: bigint;
}
/**
 * @generated from protobuf message data.StaticBorderInfo
 */
export interface StaticBorderInfo {
    /**
     * @generated from protobuf field: data.Image top = 1;
     */
    top?: Image;
    /**
     * @generated from protobuf field: data.Image bottom = 2;
     */
    bottom?: Image;
    /**
     * @generated from protobuf field: data.Image left = 3;
     */
    left?: Image;
    /**
     * @generated from protobuf field: data.Image right = 4;
     */
    right?: Image;
}
/**
 * @generated from protobuf message data.DynamicBorderInfo
 */
export interface DynamicBorderInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.LinkerUsers
 */
export interface LinkerUsers {
    /**
     * @generated from protobuf field: int64 count = 1;
     */
    count: bigint;
    /**
     * @generated from protobuf field: repeated data.User users_info = 2;
     */
    usersInfo: User[];
}
/**
 * @generated from protobuf message data.OfficialChannelInfo
 */
export interface OfficialChannelInfo {
    /**
     * @generated from protobuf field: data.User channel_user = 1;
     */
    channelUser?: User;
    /**
     * @generated from protobuf field: string channel_name = 2;
     */
    channelName: string;
    /**
     * @generated from protobuf field: string channel_intro = 3;
     */
    channelIntro: string;
    /**
     * @generated from protobuf field: int64 end_timestamp = 4;
     */
    endTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 forbidden_before_end = 5;
     */
    forbiddenBeforeEnd: bigint;
    /**
     * @generated from protobuf field: int32 current_show_id = 6;
     */
    currentShowId: number;
    /**
     * @generated from protobuf field: int64 max_enter_time = 7;
     */
    maxEnterTime: bigint;
    /**
     * @generated from protobuf field: int64 max_next_time = 8;
     */
    maxNextTime: bigint;
    /**
     * @generated from protobuf field: bool host_permission = 10;
     */
    hostPermission: boolean;
    /**
     * @generated from protobuf field: int64 backup_room_id = 11;
     */
    backupRoomId: bigint;
    /**
     * @generated from protobuf field: data.User living_user = 12;
     */
    livingUser?: User;
    /**
     * @generated from protobuf field: bool host_can_accept_gift = 13;
     */
    hostCanAcceptGift: boolean;
    /**
     * @generated from protobuf field: repeated int64 host_uids = 14;
     */
    hostUids: bigint[];
    /**
     * @generated from protobuf field: string backup_room_id_str = 15;
     */
    backupRoomIdStr: string;
    /**
     * @generated from protobuf field: bool enable_host = 16;
     */
    enableHost: boolean;
}
/**
 * @generated from protobuf message data.OfficialChannelExtraInfo
 */
export interface OfficialChannelExtraInfo {
    /**
     * @generated from protobuf field: int64 show_start_ts = 1;
     */
    showStartTs: bigint;
    /**
     * @generated from protobuf field: string showlist_schema = 2;
     */
    showlistSchema: string;
    /**
     * @generated from protobuf field: int64 showlist_id = 3;
     */
    showlistId: bigint;
    /**
     * @generated from protobuf field: string showlist_name = 4;
     */
    showlistName: string;
}
/**
 * @generated from protobuf message data.MatchInfo
 */
export interface MatchInfo {
    /**
     * @generated from protobuf field: data.MatchSkinInfo skin = 1;
     */
    skin?: MatchSkinInfo;
}
/**
 * @generated from protobuf message data.MatchSkinInfo
 */
export interface MatchSkinInfo {
    /**
     * @generated from protobuf field: data.MatchSkinInfo.FollowBtnSkin unfollow_skin = 1;
     */
    unfollowSkin?: MatchSkinInfo_FollowBtnSkin;
    /**
     * @generated from protobuf field: data.MatchSkinInfo.FollowBtnSkin followed_skin = 2;
     */
    followedSkin?: MatchSkinInfo_FollowBtnSkin;
    /**
     * @generated from protobuf field: string tab_selected_color = 3;
     */
    tabSelectedColor: string;
    /**
     * @generated from protobuf field: string tab_unselected_color = 4;
     */
    tabUnselectedColor: string;
    /**
     * @generated from protobuf field: string comment_place_holder_color = 5;
     */
    commentPlaceHolderColor: string;
    /**
     * @generated from protobuf field: string anchor_name_color = 6;
     */
    anchorNameColor: string;
    /**
     * @generated from protobuf field: string anchor_info_color = 7;
     */
    anchorInfoColor: string;
    /**
     * @generated from protobuf field: data.Image user_banner_image = 8;
     */
    userBannerImage?: Image;
    /**
     * @generated from protobuf field: data.Image tool_bar_image = 9;
     */
    toolBarImage?: Image;
    /**
     * @generated from protobuf field: string comment_place_holder_bg_color = 10;
     */
    commentPlaceHolderBgColor: string;
    /**
     * @generated from protobuf field: data.Image share_icon = 11;
     */
    shareIcon?: Image;
}
/**
 * @generated from protobuf message data.MatchSkinInfo.FollowBtnSkin
 */
export interface MatchSkinInfo_FollowBtnSkin {
    /**
     * @generated from protobuf field: string left_color = 1;
     */
    leftColor: string;
    /**
     * @generated from protobuf field: string right_color = 2;
     */
    rightColor: string;
    /**
     * @generated from protobuf field: string font_color = 3;
     */
    fontColor: string;
}
/**
 * @generated from protobuf message data.RoomActivityTag
 */
export interface RoomActivityTag {
    /**
     * @generated from protobuf field: int32 activity_type = 1;
     */
    activityType: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 3;
     */
    url: string;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
}
/**
 * @generated from protobuf message data.RoomAuthStatus
 */
export interface RoomAuthStatus {
    /**
     * @generated from protobuf field: bool Chat = 1 [json_name = "Chat"];
     */
    chat: boolean;
    /**
     * @generated from protobuf field: bool Danmaku = 2 [json_name = "Danmaku"];
     */
    danmaku: boolean;
    /**
     * @generated from protobuf field: bool Gift = 3 [json_name = "Gift"];
     */
    gift: boolean;
    /**
     * @generated from protobuf field: bool LuckMoney = 4 [json_name = "LuckMoney"];
     */
    luckMoney: boolean;
    /**
     * @generated from protobuf field: bool Digg = 5 [json_name = "Digg"];
     */
    digg: boolean;
    /**
     * @generated from protobuf field: bool RoomContributor = 7 [json_name = "RoomContributor"];
     */
    roomContributor: boolean;
    /**
     * @generated from protobuf field: bool Props = 8 [json_name = "Props"];
     */
    props: boolean;
    /**
     * @generated from protobuf field: bool UserCard = 9 [json_name = "UserCard"];
     */
    userCard: boolean;
    /**
     * @generated from protobuf field: bool POI = 10 [json_name = "POI"];
     */
    pOI: boolean;
    /**
     * @generated from protobuf field: int64 MoreAnchor = 11 [json_name = "MoreAnchor"];
     */
    moreAnchor: bigint;
    /**
     * @generated from protobuf field: int64 Banner = 12 [json_name = "Banner"];
     */
    banner: bigint;
    /**
     * @generated from protobuf field: int64 Share = 13 [json_name = "Share"];
     */
    share: bigint;
    /**
     * @generated from protobuf field: int64 UserCorner = 14 [json_name = "UserCorner"];
     */
    userCorner: bigint;
    /**
     * @generated from protobuf field: int64 Landscape = 15 [json_name = "Landscape"];
     */
    landscape: bigint;
    /**
     * @generated from protobuf field: int64 LandscapeChat = 16 [json_name = "LandscapeChat"];
     */
    landscapeChat: bigint;
    /**
     * @generated from protobuf field: int64 PublicScreen = 17 [json_name = "PublicScreen"];
     */
    publicScreen: bigint;
    /**
     * @generated from protobuf field: int64 GiftAnchorMt = 18 [json_name = "GiftAnchorMt"];
     */
    giftAnchorMt: bigint;
    /**
     * @generated from protobuf field: int64 RecordScreen = 19 [json_name = "RecordScreen"];
     */
    recordScreen: bigint;
    /**
     * @generated from protobuf field: int64 DonationSticker = 20 [json_name = "DonationSticker"];
     */
    donationSticker: bigint;
    /**
     * @generated from protobuf field: int64 HourRank = 21 [json_name = "HourRank"];
     */
    hourRank: bigint;
    /**
     * @generated from protobuf field: int64 CommerceCard = 22 [json_name = "CommerceCard"];
     */
    commerceCard: bigint;
    /**
     * @generated from protobuf field: int64 AudioChat = 23 [json_name = "AudioChat"];
     */
    audioChat: bigint;
    /**
     * @generated from protobuf field: int64 DanmakuDefault = 24 [json_name = "DanmakuDefault"];
     */
    danmakuDefault: bigint;
    /**
     * @generated from protobuf field: int64 KtvOrderSong = 25 [json_name = "KtvOrderSong"];
     */
    ktvOrderSong: bigint;
    /**
     * @generated from protobuf field: int64 SelectionAlbum = 26 [json_name = "SelectionAlbum"];
     */
    selectionAlbum: bigint;
    /**
     * @generated from protobuf field: int64 Like = 27 [json_name = "Like"];
     */
    like: bigint;
    /**
     * @generated from protobuf field: int64 MultiplierPlayback = 28 [json_name = "MultiplierPlayback"];
     */
    multiplierPlayback: bigint;
    /**
     * @generated from protobuf field: int64 DownloadVideo = 29 [json_name = "DownloadVideo"];
     */
    downloadVideo: bigint;
    /**
     * @generated from protobuf field: int64 Collect = 30 [json_name = "Collect"];
     */
    collect: bigint;
    /**
     * @generated from protobuf field: int64 TimedShutdown = 31 [json_name = "TimedShutdown"];
     */
    timedShutdown: bigint;
    /**
     * @generated from protobuf field: int64 Seek = 32 [json_name = "Seek"];
     */
    seek: bigint;
    /**
     * @generated from protobuf field: int64 Denounce = 33 [json_name = "Denounce"];
     */
    denounce: bigint;
    /**
     * @generated from protobuf field: int64 Dislike = 34 [json_name = "Dislike"];
     */
    dislike: bigint;
    /**
     * @generated from protobuf field: int64 OnlyTa = 35 [json_name = "OnlyTa"];
     */
    onlyTa: bigint;
    /**
     * @generated from protobuf field: int64 CastScreen = 36 [json_name = "CastScreen"];
     */
    castScreen: bigint;
    /**
     * @generated from protobuf field: int64 CommentWall = 37 [json_name = "CommentWall"];
     */
    commentWall: bigint;
    /**
     * @generated from protobuf field: int64 BulletStyle = 38 [json_name = "BulletStyle"];
     */
    bulletStyle: bigint;
    /**
     * @generated from protobuf field: int64 ShowGamePlugin = 39 [json_name = "ShowGamePlugin"];
     */
    showGamePlugin: bigint;
    /**
     * @generated from protobuf field: int64 VSGift = 40 [json_name = "VSGift"];
     */
    vSGift: bigint;
    /**
     * @generated from protobuf field: int64 VSTopic = 41 [json_name = "VSTopic"];
     */
    vSTopic: bigint;
    /**
     * @generated from protobuf field: int64 VSRank = 42 [json_name = "VSRank"];
     */
    vSRank: bigint;
    /**
     * @generated from protobuf field: int64 AdminCommentWall = 43 [json_name = "AdminCommentWall"];
     */
    adminCommentWall: bigint;
    /**
     * @generated from protobuf field: int64 CommerceComponent = 44 [json_name = "CommerceComponent"];
     */
    commerceComponent: bigint;
    /**
     * @generated from protobuf field: int64 DouPlus = 45 [json_name = "DouPlus"];
     */
    douPlus: bigint;
    /**
     * @generated from protobuf field: int64 GamePointsPlaying = 46 [json_name = "GamePointsPlaying"];
     */
    gamePointsPlaying: bigint;
    /**
     * @generated from protobuf field: int64 Poster = 47 [json_name = "Poster"];
     */
    poster: bigint;
    /**
     * @generated from protobuf field: int64 Highlights = 48 [json_name = "Highlights"];
     */
    highlights: bigint;
    /**
     * @generated from protobuf field: int64 TypingCommentState = 49 [json_name = "TypingCommentState"];
     */
    typingCommentState: bigint;
    /**
     * @generated from protobuf field: int64 StrokeUpDownGuide = 50 [json_name = "StrokeUpDownGuide"];
     */
    strokeUpDownGuide: bigint;
    /**
     * @generated from protobuf field: int64 UpRightStatsFloatingLayer = 51 [json_name = "UpRightStatsFloatingLayer"];
     */
    upRightStatsFloatingLayer: bigint;
    /**
     * @generated from protobuf field: int64 CastScreenExplicit = 52 [json_name = "CastScreenExplicit"];
     */
    castScreenExplicit: bigint;
    /**
     * @generated from protobuf field: int64 Selection = 53 [json_name = "Selection"];
     */
    selection: bigint;
    /**
     * @generated from protobuf field: int64 IndustryService = 54 [json_name = "IndustryService"];
     */
    industryService: bigint;
    /**
     * @generated from protobuf field: int64 VerticalRank = 55 [json_name = "VerticalRank"];
     */
    verticalRank: bigint;
    /**
     * @generated from protobuf field: int64 EnterEffects = 56 [json_name = "EnterEffects"];
     */
    enterEffects: bigint;
    /**
     * @generated from protobuf field: int64 FansClub = 57 [json_name = "FansClub"];
     */
    fansClub: bigint;
    /**
     * @generated from protobuf field: int64 EmojiOutside = 58 [json_name = "EmojiOutside"];
     */
    emojiOutside: bigint;
    /**
     * @generated from protobuf field: int64 CanSellTicket = 59 [json_name = "CanSellTicket"];
     */
    canSellTicket: bigint;
    /**
     * @generated from protobuf field: int64 DouPlusPopularityGem = 60 [json_name = "DouPlusPopularityGem"];
     */
    douPlusPopularityGem: bigint;
    /**
     * @generated from protobuf field: int64 MissionCenter = 61 [json_name = "MissionCenter"];
     */
    missionCenter: bigint;
    /**
     * @generated from protobuf field: int64 ExpandScreen = 62 [json_name = "ExpandScreen"];
     */
    expandScreen: bigint;
    /**
     * @generated from protobuf field: int64 FansGroup = 63 [json_name = "FansGroup"];
     */
    fansGroup: bigint;
    /**
     * @generated from protobuf field: int64 Topic = 64 [json_name = "Topic"];
     */
    topic: bigint;
    /**
     * @generated from protobuf field: int64 AnchorMission = 65 [json_name = "AnchorMission"];
     */
    anchorMission: bigint;
    /**
     * @generated from protobuf field: int64 Teleprompter = 66 [json_name = "Teleprompter"];
     */
    teleprompter: bigint;
    /**
     * @generated from protobuf field: int64 ChatDynamicSlideSpeed = 67 [json_name = "ChatDynamicSlideSpeed"];
     */
    chatDynamicSlideSpeed: bigint;
    /**
     * @generated from protobuf field: int64 SmallWindowDisplay = 68 [json_name = "SmallWindowDisplay"];
     */
    smallWindowDisplay: bigint;
    /**
     * @generated from protobuf field: int64 MessageDispatch = 69 [json_name = "MessageDispatch"];
     */
    messageDispatch: bigint;
    /**
     * @generated from protobuf field: int64 RoomChannel = 70 [json_name = "RoomChannel"];
     */
    roomChannel: bigint;
    /**
     * @generated from protobuf field: int64 ChatDispatch = 71 [json_name = "ChatDispatch"];
     */
    chatDispatch: bigint;
    /**
     * @generated from protobuf field: int64 LinkmicGuestLike = 72 [json_name = "LinkmicGuestLike"];
     */
    linkmicGuestLike: bigint;
    /**
     * @generated from protobuf field: int64 MediaLinkmic = 73 [json_name = "MediaLinkmic"];
     */
    mediaLinkmic: bigint;
    /**
     * @generated from protobuf field: int64 VideoShare = 74 [json_name = "VideoShare"];
     */
    videoShare: bigint;
    /**
     * @generated from protobuf field: int64 ChatGuideEmoji = 75 [json_name = "ChatGuideEmoji"];
     */
    chatGuideEmoji: bigint;
    /**
     * @generated from protobuf field: int64 ChatGuideImage = 76 [json_name = "ChatGuideImage"];
     */
    chatGuideImage: bigint;
    /**
     * @generated from protobuf field: int64 PCPlay = 77 [json_name = "PCPlay"];
     */
    pCPlay: bigint;
    /**
     * @generated from protobuf field: int64 PadPlay = 78 [json_name = "PadPlay"];
     */
    padPlay: bigint;
    /**
     * @generated from protobuf field: int64 LongTouch = 79 [json_name = "LongTouch"];
     */
    longTouch: bigint;
    /**
     * @generated from protobuf field: int64 FirstFeedHistChat = 80 [json_name = "FirstFeedHistChat"];
     */
    firstFeedHistChat: bigint;
    /**
     * @generated from protobuf field: int64 MoreHistChat = 81 [json_name = "MoreHistChat"];
     */
    moreHistChat: bigint;
    /**
     * @generated from protobuf field: int64 WordAssociation = 82 [json_name = "WordAssociation"];
     */
    wordAssociation: bigint;
    /**
     * @generated from protobuf field: int64 LandscapeScreenCapture = 83 [json_name = "LandscapeScreenCapture"];
     */
    landscapeScreenCapture: bigint;
    /**
     * @generated from protobuf field: int64 LandscapeScreenRecording = 84 [json_name = "LandscapeScreenRecording"];
     */
    landscapeScreenRecording: bigint;
    /**
     * @generated from protobuf field: int64 ScreenProjectionBarrage = 85 [json_name = "ScreenProjectionBarrage"];
     */
    screenProjectionBarrage: bigint;
    /**
     * @generated from protobuf field: int64 SmallWindowPlayer = 86 [json_name = "SmallWindowPlayer"];
     */
    smallWindowPlayer: bigint;
    /**
     * @generated from protobuf field: int64 ChatOperate = 87 [json_name = "ChatOperate"];
     */
    chatOperate: bigint;
    /**
     * @generated from protobuf field: int64 EcomFansClub = 88 [json_name = "EcomFansClub"];
     */
    ecomFansClub: bigint;
    /**
     * @generated from protobuf field: int64 AudioChatTotext = 89 [json_name = "AudioChatTotext"];
     */
    audioChatTotext: bigint;
    /**
     * @generated from protobuf field: int64 CommonCard = 90 [json_name = "CommonCard"];
     */
    commonCard: bigint;
    /**
     * @generated from protobuf field: int64 ShortTouch = 91 [json_name = "ShortTouch"];
     */
    shortTouch: bigint;
    /**
     * @generated from protobuf field: int64 HostTeamChannel = 92 [json_name = "HostTeamChannel"];
     */
    hostTeamChannel: bigint;
    /**
     * @generated from protobuf field: int64 LandscapeChatDynamicSlideSpeed = 93 [json_name = "LandscapeChatDynamicSlideSpeed"];
     */
    landscapeChatDynamicSlideSpeed: bigint;
    /**
     * @generated from protobuf field: int64 HostTeam = 94 [json_name = "HostTeam"];
     */
    hostTeam: bigint;
    /**
     * @generated from protobuf field: int64 AnchorHotMessageAggregated = 95 [json_name = "AnchorHotMessageAggregated"];
     */
    anchorHotMessageAggregated: bigint;
    /**
     * @generated from protobuf field: int64 AnchorColdMessageTiled = 96 [json_name = "AnchorColdMessageTiled"];
     */
    anchorColdMessageTiled: bigint;
    /**
     * @generated from protobuf field: int64 ScreenBottomInfo = 97 [json_name = "ScreenBottomInfo"];
     */
    screenBottomInfo: bigint;
    /**
     * @generated from protobuf field: int64 PreviewHotCommentSwitch = 98 [json_name = "PreviewHotCommentSwitch"];
     */
    previewHotCommentSwitch: bigint;
    /**
     * @generated from protobuf field: int64 RoomWidget = 99 [json_name = "RoomWidget"];
     */
    roomWidget: bigint;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthOffReasons OffReason = 100 [json_name = "OffReason"];
     */
    offReason?: RoomAuthStatus_RoomAuthOffReasons;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle SpecialStyle = 101 [json_name = "SpecialStyle"];
     */
    specialStyle?: RoomAuthStatus_RoomAuthSpecialStyle;
    /**
     * @generated from protobuf field: int64 PanelECService = 102 [json_name = "PanelECService"];
     */
    panelECService: bigint;
    /**
     * @generated from protobuf field: int64 FixedChat = 103 [json_name = "FixedChat"];
     */
    fixedChat: bigint;
    /**
     * @generated from protobuf field: int64 LandscapeGift = 104 [json_name = "LandscapeGift"];
     */
    landscapeGift: bigint;
    /**
     * @generated from protobuf field: int64 HotChatTray = 105 [json_name = "HotChatTray"];
     */
    hotChatTray: bigint;
    /**
     * @generated from protobuf field: int64 ItemShare = 106 [json_name = "ItemShare"];
     */
    itemShare: bigint;
    /**
     * @generated from protobuf field: int64 ShortTouchTempState = 107 [json_name = "ShortTouchTempState"];
     */
    shortTouchTempState: bigint;
    /**
     * @generated from protobuf field: int64 StickyMessage = 108 [json_name = "StickyMessage"];
     */
    stickyMessage: bigint;
    /**
     * @generated from protobuf field: int64 ProjectionBtn = 109 [json_name = "ProjectionBtn"];
     */
    projectionBtn: bigint;
    /**
     * @generated from protobuf field: int64 ChatDynamicSlideSpeedAnchor = 110 [json_name = "ChatDynamicSlideSpeedAnchor"];
     */
    chatDynamicSlideSpeedAnchor: bigint;
    /**
     * @generated from protobuf field: int64 PosterCache = 111 [json_name = "PosterCache"];
     */
    posterCache: bigint;
    /**
     * @generated from protobuf field: int64 MediaHistoryMessage = 112 [json_name = "MediaHistoryMessage"];
     */
    mediaHistoryMessage: bigint;
    /**
     * @generated from protobuf field: int64 ToolbarBubble = 113 [json_name = "ToolbarBubble"];
     */
    toolbarBubble: bigint;
    /**
     * @generated from protobuf field: int64 ImHeatValue = 114 [json_name = "ImHeatValue"];
     */
    imHeatValue: bigint;
    /**
     * @generated from protobuf field: int64 InteractiveComponent = 115 [json_name = "InteractiveComponent"];
     */
    interactiveComponent: bigint;
    /**
     * @generated from protobuf field: int64 ChatReply = 116 [json_name = "ChatReply"];
     */
    chatReply: bigint;
    /**
     * @generated from protobuf field: int64 ChatMention = 117 [json_name = "ChatMention"];
     */
    chatMention: bigint;
    /**
     * @generated from protobuf field: int64 FrequentlyChat = 118 [json_name = "FrequentlyChat"];
     */
    frequentlyChat: bigint;
    /**
     * @generated from protobuf field: int64 StreamAdaptation = 119 [json_name = "StreamAdaptation"];
     */
    streamAdaptation: bigint;
    /**
     * @generated from protobuf field: int64 VideoAmplificationType = 120 [json_name = "VideoAmplificationType"];
     */
    videoAmplificationType: bigint;
    /**
     * @generated from protobuf field: int64 VsCommentBar = 200 [json_name = "VsCommentBar"];
     */
    vsCommentBar: bigint;
    /**
     * @generated from protobuf field: int64 VsWelcomeDanmaku = 201 [json_name = "VsWelcomeDanmaku"];
     */
    vsWelcomeDanmaku: bigint;
    /**
     * @generated from protobuf field: int64 VsFansClub = 202 [json_name = "VsFansClub"];
     */
    vsFansClub: bigint;
    /**
     * @generated from protobuf field: int64 VsExtensionEnableFollow = 203 [json_name = "VsExtensionEnableFollow"];
     */
    vsExtensionEnableFollow: bigint;
    /**
     * @generated from protobuf field: int64 VsDouPlus = 204 [json_name = "VsDouPlus"];
     */
    vsDouPlus: bigint;
    /**
     * @generated from protobuf field: int64 QuizGamePointsPlaying = 205 [json_name = "QuizGamePointsPlaying"];
     */
    quizGamePointsPlaying: bigint;
    /**
     * @generated from protobuf field: int64 UgcVSReplayDelete = 206 [json_name = "UgcVSReplayDelete"];
     */
    ugcVSReplayDelete: bigint;
    /**
     * @generated from protobuf field: int64 UgcVsReplayVisibility = 207 [json_name = "UgcVsReplayVisibility"];
     */
    ugcVsReplayVisibility: bigint;
}
/**
 * @generated from protobuf message data.RoomAuthStatus.RoomAuthOffReasons
 */
export interface RoomAuthStatus_RoomAuthOffReasons {
    /**
     * @generated from protobuf field: string gift = 1;
     */
    gift: string;
}
/**
 * @generated from protobuf message data.RoomAuthStatus.RoomAuthSpecialStyle
 */
export interface RoomAuthStatus_RoomAuthSpecialStyle {
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style Chat = 1 [json_name = "Chat"];
     */
    chat?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style Gift = 2 [json_name = "Gift"];
     */
    gift?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style RoomContributor = 3 [json_name = "RoomContributor"];
     */
    roomContributor?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style Like = 4 [json_name = "Like"];
     */
    like?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style RoomChannel = 5 [json_name = "RoomChannel"];
     */
    roomChannel?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style Share = 6 [json_name = "Share"];
     */
    share?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style CastScreenAuth = 7 [json_name = "CastScreenAuth"];
     */
    castScreenAuth?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
    /**
     * @generated from protobuf field: data.RoomAuthStatus.RoomAuthSpecialStyle.Style Landscape = 8 [json_name = "Landscape"];
     */
    landscape?: RoomAuthStatus_RoomAuthSpecialStyle_Style;
}
/**
 * @generated from protobuf message data.RoomAuthStatus.RoomAuthSpecialStyle.Style
 */
export interface RoomAuthStatus_RoomAuthSpecialStyle_Style {
    /**
     * @generated from protobuf field: int32 UnableStyle = 1 [json_name = "UnableStyle"];
     */
    unableStyle: number;
    /**
     * @generated from protobuf field: string Content = 2 [json_name = "Content"];
     */
    content: string;
    /**
     * @generated from protobuf field: int32 OffType = 3 [json_name = "OffType"];
     */
    offType: number;
    /**
     * @generated from protobuf field: int32 AnchorSwitch = 4 [json_name = "AnchorSwitch"];
     */
    anchorSwitch: number;
    /**
     * @generated from protobuf field: string SwitchStatusTipMsg = 5 [json_name = "SwitchStatusTipMsg"];
     */
    switchStatusTipMsg: string;
    /**
     * @generated from protobuf field: string SwitchStatusAnchorTipMsg = 6 [json_name = "SwitchStatusAnchorTipMsg"];
     */
    switchStatusAnchorTipMsg: string;
    /**
     * @generated from protobuf field: int32 AnchorSwitchForPaidLive = 7 [json_name = "AnchorSwitchForPaidLive"];
     */
    anchorSwitchForPaidLive: number;
    /**
     * @generated from protobuf field: string ContentForPaidLive = 8 [json_name = "ContentForPaidLive"];
     */
    contentForPaidLive: string;
}
/**
 * @generated from protobuf message data.MoreEntrance
 */
export interface MoreEntrance {
    /**
     * @generated from protobuf field: string Title = 1 [json_name = "Title"];
     */
    title: string;
    /**
     * @generated from protobuf field: int64 Type = 2 [json_name = "Type"];
     */
    type: bigint;
}
/**
 * @generated from protobuf message data.RoomTab
 */
export interface RoomTab {
    /**
     * @generated from protobuf field: int32 tab_type = 1;
     */
    tabType: number;
    /**
     * @generated from protobuf field: string tab_name = 2;
     */
    tabName: string;
    /**
     * @generated from protobuf field: string tab_url = 3;
     */
    tabUrl: string;
}
/**
 * @generated from protobuf message data.RoomExtra
 */
export interface RoomExtra {
    /**
     * @generated from protobuf field: bool is_sandbox = 1;
     */
    isSandbox: boolean;
    /**
     * @generated from protobuf field: data.RegionRestriction enter_region_restriction = 2;
     */
    enterRegionRestriction?: RegionRestriction;
    /**
     * @generated from protobuf field: data.RegionMatch enter_region_match = 3;
     */
    enterRegionMatch?: RegionMatch;
    /**
     * @generated from protobuf field: data.SafeReason filter_with_no_context = 4;
     */
    filterWithNoContext?: SafeReason;
    /**
     * @generated from protobuf field: int64 xigua_uid = 5;
     */
    xiguaUid: bigint;
    /**
     * @generated from protobuf field: int64 limit_strategy = 6;
     */
    limitStrategy: bigint;
    /**
     * @generated from protobuf field: string limit_appid = 7;
     */
    limitAppid: string;
    /**
     * @generated from protobuf field: int32 geo_block = 8;
     */
    geoBlock: number;
    /**
     * @generated from protobuf field: int32 vr_type = 9;
     */
    vrType: number;
    /**
     * @generated from protobuf field: bool is_virtual_anchor = 10;
     */
    isVirtualAnchor: boolean;
    /**
     * @generated from protobuf field: string create_scene = 11;
     */
    createScene: string;
    /**
     * @generated from protobuf field: bool realtime_replay_enabled = 12;
     */
    realtimeReplayEnabled: boolean;
    /**
     * @generated from protobuf field: int64 realtime_playback_shift = 13;
     */
    realtimePlaybackShift: bigint;
    /**
     * @generated from protobuf field: int64 realtime_playback_start_shift = 14;
     */
    realtimePlaybackStartShift: bigint;
    /**
     * @generated from protobuf field: repeated data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality realtime_playback_qualities = 15;
     */
    realtimePlaybackQualities: StreamUrl_LiveCoreSDKData_PullData_Options_Quality[];
}
/**
 * @generated from protobuf message data.SafeReason
 */
export interface SafeReason {
    /**
     * @generated from protobuf field: int32 safe_type = 1;
     */
    safeType: number;
}
/**
 * @generated from protobuf message data.RegionRestriction
 */
export interface RegionRestriction {
    /**
     * @generated from protobuf field: int64 type = 1;
     */
    type: bigint;
    /**
     * @generated from protobuf field: repeated string white_list = 2;
     */
    whiteList: string[];
    /**
     * @generated from protobuf field: repeated string black_list = 3;
     */
    blackList: string[];
}
/**
 * @generated from protobuf message data.RegionMatch
 */
export interface RegionMatch {
    /**
     * @generated from protobuf field: int64 type = 1;
     */
    type: bigint;
    /**
     * @generated from protobuf field: repeated string allow_list = 2;
     */
    allowList: string[];
    /**
     * @generated from protobuf field: repeated string deny_list = 3;
     */
    denyList: string[];
}
/**
 * @generated from protobuf message data.StreamUrl
 */
export interface StreamUrl {
    /**
     * @generated from protobuf field: int64 provider = 1;
     */
    provider: bigint;
    /**
     * @generated from protobuf field: int64 id = 2;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string id_str = 3;
     */
    idStr: string;
    /**
     * @generated from protobuf field: string default_resolution = 5;
     */
    defaultResolution: string;
    /**
     * @generated from protobuf field: data.StreamUrl.StreamUrlExtra extra = 6;
     */
    extra?: StreamUrl_StreamUrlExtra;
    /**
     * @generated from protobuf field: string rtmp_push_url = 7;
     */
    rtmpPushUrl: string;
    /**
     * @generated from protobuf field: string rtmp_pull_url = 8;
     */
    rtmpPullUrl: string;
    /**
     * @generated from protobuf field: repeated string candidate_resolution = 10;
     */
    candidateResolution: string[];
    /**
     * @generated from protobuf field: string hls_pull_url = 11;
     */
    hlsPullUrl: string;
    /**
     * @generated from protobuf field: string hls_pull_url_params = 12;
     */
    hlsPullUrlParams: string;
    /**
     * @generated from protobuf field: string rtmp_pull_url_params = 13;
     */
    rtmpPullUrlParams: string;
    /**
     * @generated from protobuf field: string rtmp_push_url_params = 15;
     */
    rtmpPushUrlParams: string;
    /**
     * @generated from protobuf field: repeated string push_urls = 16;
     */
    pushUrls: string[];
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData live_core_sdk_data = 17;
     */
    liveCoreSdkData?: StreamUrl_LiveCoreSDKData;
    /**
     * @generated from protobuf field: repeated string complete_push_urls = 19;
     */
    completePushUrls: string[];
    /**
     * @generated from protobuf field: int32 stream_control_type = 20;
     */
    streamControlType: number;
    /**
     * @generated from protobuf field: int32 stream_orientation = 21;
     */
    streamOrientation: number;
    /**
     * @generated from protobuf field: int32 push_stream_type = 22;
     */
    pushStreamType: number;
    /**
     * @generated from protobuf field: data.StreamUrl.PlaySetting play = 24;
     */
    play?: StreamUrl_PlaySetting;
    /**
     * @generated from protobuf field: int32 vr_type = 26;
     */
    vrType: number;
}
/**
 * @generated from protobuf message data.StreamUrl.StreamUrlExtra
 */
export interface StreamUrl_StreamUrlExtra {
    /**
     * @generated from protobuf field: int64 height = 1;
     */
    height: bigint;
    /**
     * @generated from protobuf field: int64 width = 2;
     */
    width: bigint;
    /**
     * @generated from protobuf field: int64 fps = 3;
     */
    fps: bigint;
    /**
     * @generated from protobuf field: int64 max_bitrate = 4;
     */
    maxBitrate: bigint;
    /**
     * @generated from protobuf field: int64 min_bitrate = 5;
     */
    minBitrate: bigint;
    /**
     * @generated from protobuf field: int64 default_bitrate = 6;
     */
    defaultBitrate: bigint;
    /**
     * @generated from protobuf field: int64 bitrate_adapt_strategy = 7;
     */
    bitrateAdaptStrategy: bigint;
    /**
     * @generated from protobuf field: int64 anchor_interact_profile = 8;
     */
    anchorInteractProfile: bigint;
    /**
     * @generated from protobuf field: int64 audience_interact_profile = 9;
     */
    audienceInteractProfile: bigint;
    /**
     * @generated from protobuf field: bool hardware_encode = 10;
     */
    hardwareEncode: boolean;
    /**
     * @generated from protobuf field: int64 video_profile = 12;
     */
    videoProfile: bigint;
    /**
     * @generated from protobuf field: data.StreamUrl.StreamUrlExtra.SuperResolution super_resolution = 14;
     */
    superResolution?: StreamUrl_StreamUrlExtra_SuperResolution;
    /**
     * @generated from protobuf field: bool h265_enable = 15;
     */
    h265Enable: boolean;
    /**
     * @generated from protobuf field: int64 gop_sec = 16;
     */
    gopSec: bigint;
    /**
     * @generated from protobuf field: bool bframe_enable = 17;
     */
    bframeEnable: boolean;
    /**
     * @generated from protobuf field: bool roi = 18;
     */
    roi: boolean;
    /**
     * @generated from protobuf field: bool sw_roi = 19;
     */
    swRoi: boolean;
    /**
     * @generated from protobuf field: bool bytevc1_enable = 20;
     */
    bytevc1Enable: boolean;
    /**
     * @generated from protobuf field: data.StreamUrl.StreamUrlExtra.AnchorClientInfo anchor_client_info = 21;
     */
    anchorClientInfo?: StreamUrl_StreamUrlExtra_AnchorClientInfo;
}
/**
 * @generated from protobuf message data.StreamUrl.StreamUrlExtra.SuperResolution
 */
export interface StreamUrl_StreamUrlExtra_SuperResolution {
    /**
     * @generated from protobuf field: bool enable = 1;
     */
    enable: boolean;
    /**
     * @generated from protobuf field: int64 strength = 2;
     */
    strength: bigint;
    /**
     * @generated from protobuf field: bool antialiasing = 3;
     */
    antialiasing: boolean;
}
/**
 * @generated from protobuf message data.StreamUrl.StreamUrlExtra.AnchorClientInfo
 */
export interface StreamUrl_StreamUrlExtra_AnchorClientInfo {
    /**
     * @generated from protobuf field: string custom_info = 1;
     */
    customInfo: string;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData
 */
export interface StreamUrl_LiveCoreSDKData {
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData pull_data = 1;
     */
    pullData?: StreamUrl_LiveCoreSDKData_PullData;
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PushData push_data = 2;
     */
    pushData?: StreamUrl_LiveCoreSDKData_PushData;
    /**
     * @generated from protobuf field: string size = 3;
     */
    size: string;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData
 */
export interface StreamUrl_LiveCoreSDKData_PullData {
    /**
     * @generated from protobuf field: string stream_data = 1;
     */
    streamData: string;
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.Options options = 2;
     */
    options?: StreamUrl_LiveCoreSDKData_PullData_Options;
    /**
     * @generated from protobuf field: int64 version = 3;
     */
    version: bigint;
    /**
     * @generated from protobuf field: int32 kind = 5;
     */
    kind: number;
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.Extension extension = 6;
     */
    extension?: StreamUrl_LiveCoreSDKData_PullData_Extension;
    /**
     * @generated from protobuf field: repeated data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo Hls = 7 [json_name = "Hls"];
     */
    hls: StreamUrl_LiveCoreSDKData_PullData_PlayInfo[];
    /**
     * @generated from protobuf field: repeated data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo Flv = 8 [json_name = "Flv"];
     */
    flv: StreamUrl_LiveCoreSDKData_PullData_PlayInfo[];
    /**
     * @generated from protobuf field: string codec = 9;
     */
    codec: string;
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.Display display = 10;
     */
    display?: StreamUrl_LiveCoreSDKData_PullData_Display;
    /**
     * @generated from protobuf field: string compensatory_data = 11;
     */
    compensatoryData: string;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Options
 */
export interface StreamUrl_LiveCoreSDKData_PullData_Options {
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality default_quality = 1;
     */
    defaultQuality?: StreamUrl_LiveCoreSDKData_PullData_Options_Quality;
    /**
     * @generated from protobuf field: repeated data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality qualities = 2;
     */
    qualities: StreamUrl_LiveCoreSDKData_PullData_Options_Quality[];
    /**
     * @generated from protobuf field: bool vpass_default = 3;
     */
    vpassDefault: boolean;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality
 */
export interface StreamUrl_LiveCoreSDKData_PullData_Options_Quality {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string sdk_key = 2;
     */
    sdkKey: string;
    /**
     * @generated from protobuf field: string v_codec = 3;
     */
    vCodec: string;
    /**
     * @generated from protobuf field: string resolution = 4;
     */
    resolution: string;
    /**
     * @generated from protobuf field: int32 level = 5;
     */
    level: number;
    /**
     * @generated from protobuf field: int32 v_bit_rate = 6;
     */
    vBitRate: number;
    /**
     * @generated from protobuf field: string additional_content = 7;
     */
    additionalContent: string;
    /**
     * @generated from protobuf field: int32 fps = 8;
     */
    fps: number;
    /**
     * @generated from protobuf field: int32 disable = 9;
     */
    disable: number;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Clip
 */
export interface StreamUrl_LiveCoreSDKData_PullData_Clip {
    /**
     * @generated from protobuf field: float x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: float w = 3;
     */
    w: number;
    /**
     * @generated from protobuf field: float h = 4;
     */
    h: number;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData.CameraHorizontalPosition
 */
export interface StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition {
    /**
     * @generated from protobuf field: int32 anchor = 1;
     */
    anchor: number;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Extension
 */
export interface StreamUrl_LiveCoreSDKData_PullData_Extension {
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.Clip game_clip = 1;
     */
    gameClip?: StreamUrl_LiveCoreSDKData_PullData_Clip;
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.Clip camera_clip = 2;
     */
    cameraClip?: StreamUrl_LiveCoreSDKData_PullData_Clip;
    /**
     * @generated from protobuf field: int32 camera_hidden = 3;
     */
    cameraHidden: number;
    /**
     * @generated from protobuf field: string ts = 4;
     */
    ts: string;
    /**
     * @generated from protobuf field: int64 refresh = 5;
     */
    refresh: bigint;
    /**
     * @generated from protobuf field: int32 display_mode = 6;
     */
    displayMode: number;
    /**
     * @generated from protobuf field: int32 game_hidden = 7;
     */
    gameHidden: number;
    /**
     * @generated from protobuf field: string game_room_id = 8;
     */
    gameRoomId: string;
    /**
     * @generated from protobuf field: int32 layout = 9;
     */
    layout: number;
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.Clip camera_clip_custom = 10;
     */
    cameraClipCustom?: StreamUrl_LiveCoreSDKData_PullData_Clip;
    /**
     * @generated from protobuf field: int32 camera_vertical_type = 11;
     */
    cameraVerticalType: number;
    /**
     * @generated from protobuf field: data.StreamUrl.LiveCoreSDKData.PullData.CameraHorizontalPosition camera_horizontal_position = 12;
     */
    cameraHorizontalPosition?: StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition;
    /**
     * @generated from protobuf field: int32 camera_horizontal_hidden = 13;
     */
    cameraHorizontalHidden: number;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo
 */
export interface StreamUrl_LiveCoreSDKData_PullData_PlayInfo {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: string quality_name = 2;
     */
    qualityName: string;
    /**
     * @generated from protobuf field: string params = 3;
     */
    params: string;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Display
 */
export interface StreamUrl_LiveCoreSDKData_PullData_Display {
    /**
     * @generated from protobuf field: int64 scale_width = 1;
     */
    scaleWidth: bigint;
    /**
     * @generated from protobuf field: int64 scale_height = 2;
     */
    scaleHeight: bigint;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PushData
 */
export interface StreamUrl_LiveCoreSDKData_PushData {
    /**
     * @generated from protobuf field: int32 push_stream_level = 2;
     */
    pushStreamLevel: number;
    /**
     * @generated from protobuf field: bool pre_schedule = 3;
     */
    preSchedule: boolean;
    /**
     * @generated from protobuf field: string rtmp_push_url = 4;
     */
    rtmpPushUrl: string;
    /**
     * @generated from protobuf field: string push_params = 5;
     */
    pushParams: string;
    /**
     * @generated from protobuf field: int32 kind = 6;
     */
    kind: number;
    /**
     * @generated from protobuf field: int64 stream_id = 7;
     */
    streamId: bigint;
    /**
     * @generated from protobuf field: string stream_id_str = 8;
     */
    streamIdStr: string;
}
/**
 * @generated from protobuf message data.StreamUrl.LiveCoreSDKData.PushData.ResolutionParams
 */
export interface StreamUrl_LiveCoreSDKData_PushData_ResolutionParams {
    /**
     * @generated from protobuf field: int64 width = 1;
     */
    width: bigint;
    /**
     * @generated from protobuf field: int64 height = 2;
     */
    height: bigint;
    /**
     * @generated from protobuf field: int64 default_bitrate = 3;
     */
    defaultBitrate: bigint;
    /**
     * @generated from protobuf field: int64 min_bitrate = 4;
     */
    minBitrate: bigint;
    /**
     * @generated from protobuf field: int64 max_bitrate = 5;
     */
    maxBitrate: bigint;
    /**
     * @generated from protobuf field: int64 fps = 6;
     */
    fps: bigint;
}
/**
 * @generated from protobuf message data.StreamUrl.PlaySetting
 */
export interface StreamUrl_PlaySetting {
    /**
     * @generated from protobuf field: string horizontal = 1;
     */
    horizontal: string;
    /**
     * @generated from protobuf field: string vertical = 2;
     */
    vertical: string;
}
/**
 * @generated from protobuf message data.VSCameraInfo
 */
export interface VSCameraInfo {
    /**
     * @generated from protobuf field: int64 camera_id = 1;
     */
    cameraId: bigint;
    /**
     * @generated from protobuf field: string camera_id_str = 2;
     */
    cameraIdStr: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: data.Image cover = 4;
     */
    cover?: Image;
    /**
     * @generated from protobuf field: data.Image cover_vertical = 5;
     */
    coverVertical?: Image;
    /**
     * @generated from protobuf field: data.StreamUrl stream_info = 6;
     */
    streamInfo?: StreamUrl;
    /**
     * @generated from protobuf field: int64 start_time = 7;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 8;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 style = 9;
     */
    style: number;
    /**
     * @generated from protobuf field: data.RoomAuthStatus camera_room_auth = 10;
     */
    cameraRoomAuth?: RoomAuthStatus;
    /**
     * @generated from protobuf field: int32 vr_type = 11;
     */
    vrType: number;
    /**
     * @generated from protobuf field: data.CameraPaidInfo camera_paid_info = 12;
     */
    cameraPaidInfo?: CameraPaidInfo;
    /**
     * @generated from protobuf field: data.CameraMatchInfo camera_match_info = 13;
     */
    cameraMatchInfo?: CameraMatchInfo;
    /**
     * @generated from protobuf field: int64 group_id = 14;
     */
    groupId: bigint;
    /**
     * @generated from protobuf field: int32 camera_type = 15;
     */
    cameraType: number;
    /**
     * @generated from protobuf field: data.Image label = 16;
     */
    label?: Image;
    /**
     * @generated from protobuf field: int64 pcu = 17;
     */
    pcu: bigint;
    /**
     * @generated from protobuf field: bool is_subscribed = 18;
     */
    isSubscribed: boolean;
    /**
     * @generated from protobuf field: string group_id_str = 19;
     */
    groupIdStr: string;
}
/**
 * @generated from protobuf message data.CameraPaidInfo
 */
export interface CameraPaidInfo {
    /**
     * @generated from protobuf field: int32 max_duration = 1;
     */
    maxDuration: number;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: data.CameraPaidInfo.PriceInfo price_info = 3;
     */
    priceInfo?: CameraPaidInfo_PriceInfo;
    /**
     * @generated from protobuf field: data.PaidLiveBaseInfo paid_live_base_info = 4;
     */
    paidLiveBaseInfo?: PaidLiveBaseInfo;
    /**
     * @generated from protobuf field: data.CameraPaidInfo.PaidLiveBizExtra paid_live_biz_extra = 5;
     */
    paidLiveBizExtra?: CameraPaidInfo_PaidLiveBizExtra;
    /**
     * @generated from protobuf field: data.AsyncAuthData async_auth_data = 6;
     */
    asyncAuthData?: AsyncAuthData;
}
/**
 * @generated from protobuf message data.CameraPaidInfo.PriceInfo
 */
export interface CameraPaidInfo_PriceInfo {
    /**
     * @generated from protobuf field: string amount = 1;
     */
    amount: string;
    /**
     * @generated from protobuf field: string currency = 2;
     */
    currency: string;
}
/**
 * @generated from protobuf message data.CameraPaidInfo.PaidLiveBizExtra
 */
export interface CameraPaidInfo_PaidLiveBizExtra {
    /**
     * @generated from protobuf field: string ticket_panel_six_jump_url = 1;
     */
    ticketPanelSixJumpUrl: string;
    /**
     * @generated from protobuf field: bool is_replay = 2;
     */
    isReplay: boolean;
    /**
     * @generated from protobuf field: string paid_conversion_jump_url = 3;
     */
    paidConversionJumpUrl: string;
}
/**
 * @generated from protobuf message data.CameraMatchInfo
 */
export interface CameraMatchInfo {
    /**
     * @generated from protobuf field: int64 match_id = 1;
     */
    matchId: bigint;
    /**
     * @generated from protobuf field: int64 content_id = 2;
     */
    contentId: bigint;
    /**
     * @generated from protobuf field: repeated int64 event_ids = 3;
     */
    eventIds: bigint[];
    /**
     * @generated from protobuf field: repeated int64 hide_tab_ids = 4;
     */
    hideTabIds: bigint[];
    /**
     * @generated from protobuf field: string match_id_str = 5;
     */
    matchIdStr: string;
}
/**
 * @generated from protobuf message data.PaidLiveBaseInfo
 */
export interface PaidLiveBaseInfo {
    /**
     * @generated from protobuf field: int32 paid_live_type = 1;
     */
    paidLiveType: number;
    /**
     * @generated from protobuf field: int64 ticket_session_id = 2;
     */
    ticketSessionId: bigint;
    /**
     * @generated from protobuf field: int64 ticket_price = 3;
     */
    ticketPrice: bigint;
    /**
     * @generated from protobuf field: int32 view_right = 4;
     */
    viewRight: number;
    /**
     * @generated from protobuf field: int32 delivery = 5;
     */
    delivery: number;
}
/**
 * @generated from protobuf message data.LinkMic
 */
export interface LinkMic {
    /**
     * @generated from protobuf field: int64 channel_id = 1;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: data.LinkMic.LinkMicChannelInfo channel_info = 2;
     */
    channelInfo?: LinkMic_LinkMicChannelInfo;
    /**
     * @generated from protobuf field: repeated data.LinkMic.LinkMicBattleScore battle_scores = 3;
     */
    battleScores: LinkMic_LinkMicBattleScore[];
    /**
     * @generated from protobuf field: data.LinkMic.LinkMicBattleSetting battle_settings = 4;
     */
    battleSettings?: LinkMic_LinkMicBattleSetting;
    /**
     * @generated from protobuf field: int64 rival_anchor_id = 5;
     */
    rivalAnchorId: bigint;
    /**
     * @generated from protobuf field: int64 linkmic_anchor_count = 6;
     */
    linkmicAnchorCount: bigint;
}
/**
 * @generated from protobuf message data.LinkMic.LinkMicChannelInfo
 */
export interface LinkMic_LinkMicChannelInfo {
    /**
     * @generated from protobuf field: int64 layout = 1;
     */
    layout: bigint;
    /**
     * @generated from protobuf field: int64 vendor = 2;
     */
    vendor: bigint;
    /**
     * @generated from protobuf field: int64 dimension = 3;
     */
    dimension: bigint;
}
/**
 * @generated from protobuf message data.LinkMic.LinkMicBattleScore
 */
export interface LinkMic_LinkMicBattleScore {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
}
/**
 * @generated from protobuf message data.LinkMic.LinkMicBattleSetting
 */
export interface LinkMic_LinkMicBattleSetting {
    /**
     * @generated from protobuf field: int64 channel_id = 1;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 3;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 start_time_ms = 4;
     */
    startTimeMs: bigint;
    /**
     * @generated from protobuf field: string theme = 5;
     */
    theme: string;
    /**
     * @generated from protobuf field: int64 finished = 6;
     */
    finished: bigint;
    /**
     * @generated from protobuf field: int64 battle_id = 7;
     */
    battleId: bigint;
    /**
     * @generated from protobuf field: int64 match_type = 8;
     */
    matchType: bigint;
    /**
     * @generated from protobuf field: int64 play_mode = 9;
     */
    playMode: bigint;
    /**
     * @generated from protobuf field: int64 team_mode = 10;
     */
    teamMode: bigint;
    /**
     * @generated from protobuf field: int64 activity_mode = 11;
     */
    activityMode: bigint;
}
/**
 * @generated from protobuf message data.Reservation
 */
export interface Reservation {
    /**
     * @generated from protobuf field: int64 appointment_id = 1;
     */
    appointmentId: bigint;
    /**
     * @generated from protobuf field: int64 anchor_id = 2;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 3;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 4;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 5;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: repeated int64 btn_rect = 6;
     */
    btnRect: bigint[];
    /**
     * @generated from protobuf field: string btn_color = 7;
     */
    btnColor: string;
    /**
     * @generated from protobuf field: bool is_reserved = 8;
     */
    isReserved: boolean;
}
/**
 * @generated from protobuf message data.DecotationDetail
 */
export interface DecotationDetail {
    /**
     * @generated from protobuf field: data.Decoration text_decoration = 1;
     */
    textDecoration?: Decoration;
    /**
     * @generated from protobuf field: data.Decoration image_decoration = 2;
     */
    imageDecoration?: Decoration;
}
/**
 * @generated from protobuf message data.Decoration
 */
export interface Decoration {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: data.Image image = 2;
     */
    image?: Image;
    /**
     * @generated from protobuf field: int64 type = 3;
     */
    type: bigint;
    /**
     * @generated from protobuf field: repeated int64 input_rect = 4;
     */
    inputRect: bigint[];
    /**
     * @generated from protobuf field: int64 text_size = 5;
     */
    textSize: bigint;
    /**
     * @generated from protobuf field: string text_color = 6;
     */
    textColor: string;
    /**
     * @generated from protobuf field: string content = 7;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 max_length = 8;
     */
    maxLength: bigint;
    /**
     * @generated from protobuf field: int64 status = 9;
     */
    status: bigint;
    /**
     * @generated from protobuf field: int64 h = 10;
     */
    h: bigint;
    /**
     * @generated from protobuf field: int64 x = 11;
     */
    x: bigint;
    /**
     * @generated from protobuf field: int64 w = 12;
     */
    w: bigint;
    /**
     * @generated from protobuf field: int64 y = 13;
     */
    y: bigint;
    /**
     * @generated from protobuf field: int64 kind = 14;
     */
    kind: bigint;
    /**
     * @generated from protobuf field: int64 sub_type = 15;
     */
    subType: bigint;
    /**
     * @generated from protobuf field: data.Reservation reservation = 16;
     */
    reservation?: Reservation;
    /**
     * @generated from protobuf field: data.Image nine_patch_image = 17;
     */
    ninePatchImage?: Image;
    /**
     * @generated from protobuf field: repeated int64 text_special_effects = 18;
     */
    textSpecialEffects: bigint[];
    /**
     * @generated from protobuf field: int64 text_image_adjustable_start_position = 19;
     */
    textImageAdjustableStartPosition: bigint;
    /**
     * @generated from protobuf field: int64 text_image_adjustable_end_position = 20;
     */
    textImageAdjustableEndPosition: bigint;
    /**
     * @generated from protobuf field: data.DecorationFontConfig text_font_config = 21;
     */
    textFontConfig?: DecorationFontConfig;
    /**
     * @generated from protobuf field: string audit_text_color = 22;
     */
    auditTextColor: string;
}
/**
 * @generated from protobuf message data.DecorationFontConfig
 */
export interface DecorationFontConfig {
    /**
     * @generated from protobuf field: int64 FontID = 1 [json_name = "FontID"];
     */
    fontID: bigint;
    /**
     * @generated from protobuf field: string DownloadUrl = 2 [json_name = "DownloadUrl"];
     */
    downloadUrl: string;
    /**
     * @generated from protobuf field: int64 Status = 3 [json_name = "Status"];
     */
    status: bigint;
    /**
     * @generated from protobuf field: string font_name = 4;
     */
    fontName: string;
}
/**
 * @generated from protobuf message data.RoomStats
 */
export interface RoomStats {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string id_str = 2;
     */
    idStr: string;
    /**
     * @generated from protobuf field: int64 fan_ticket = 3;
     */
    fanTicket: bigint;
    /**
     * @generated from protobuf field: int64 money = 4;
     */
    money: bigint;
    /**
     * @generated from protobuf field: int64 total_user = 5;
     */
    totalUser: bigint;
    /**
     * @generated from protobuf field: int64 gift_uv_count = 6;
     */
    giftUvCount: bigint;
    /**
     * @generated from protobuf field: int64 follow_count = 7;
     */
    followCount: bigint;
    /**
     * @generated from protobuf field: data.RoomStats.UserCountComposition user_count_composition = 8;
     */
    userCountComposition?: RoomStats_UserCountComposition;
    /**
     * @generated from protobuf field: int64 watermelon = 9;
     */
    watermelon: bigint;
    /**
     * @generated from protobuf field: int64 digg_count = 10;
     */
    diggCount: bigint;
    /**
     * @generated from protobuf field: int64 enter_count = 11;
     */
    enterCount: bigint;
    /**
     * @generated from protobuf field: string dou_plus_promotion = 12;
     */
    douPlusPromotion: string;
    /**
     * @generated from protobuf field: string total_user_desp = 13;
     */
    totalUserDesp: string;
    /**
     * @generated from protobuf field: int64 like_count = 14;
     */
    likeCount: bigint;
    /**
     * @generated from protobuf field: string total_user_str = 15;
     */
    totalUserStr: string;
    /**
     * @generated from protobuf field: string user_count_str = 16;
     */
    userCountStr: string;
    /**
     * @generated from protobuf field: int64 comment_count = 17;
     */
    commentCount: bigint;
    /**
     * @generated from protobuf field: int64 welfare_donation_amount = 18;
     */
    welfareDonationAmount: bigint;
    /**
     * @generated from protobuf field: string up_right_stats_str = 19;
     */
    upRightStatsStr: string;
    /**
     * @generated from protobuf field: string up_right_stats_str_complete = 20;
     */
    upRightStatsStrComplete: string;
}
/**
 * @generated from protobuf message data.RoomStats.UserCountComposition
 */
export interface RoomStats_UserCountComposition {
    /**
     * @generated from protobuf field: double city = 1;
     */
    city: number;
    /**
     * @generated from protobuf field: double video_detail = 2;
     */
    videoDetail: number;
    /**
     * @generated from protobuf field: double my_follow = 3;
     */
    myFollow: number;
    /**
     * @generated from protobuf field: double other = 4;
     */
    other: number;
}
/**
 * @generated from protobuf message data.RoomViewStats
 */
export interface RoomViewStats {
    /**
     * @generated from protobuf field: bool is_hidden = 1;
     */
    isHidden: boolean;
    /**
     * @generated from protobuf field: string display_short = 2;
     */
    displayShort: string;
    /**
     * @generated from protobuf field: string display_middle = 3;
     */
    displayMiddle: string;
    /**
     * @generated from protobuf field: string display_long = 4;
     */
    displayLong: string;
    /**
     * @generated from protobuf field: int64 display_value = 5;
     */
    displayValue: bigint;
    /**
     * @generated from protobuf field: int64 display_version = 6;
     */
    displayVersion: bigint;
    /**
     * @generated from protobuf field: bool incremental = 7;
     */
    incremental: boolean;
    /**
     * @generated from protobuf field: int32 display_type = 8;
     */
    displayType: number;
    /**
     * @generated from protobuf field: string display_short_anchor = 9;
     */
    displayShortAnchor: string;
    /**
     * @generated from protobuf field: string display_middle_anchor = 10;
     */
    displayMiddleAnchor: string;
    /**
     * @generated from protobuf field: string display_long_anchor = 11;
     */
    displayLongAnchor: string;
}
/**
 * @generated from protobuf message data.TopFan
 */
export interface TopFan {
    /**
     * @generated from protobuf field: int64 fan_ticket = 1;
     */
    fanTicket: bigint;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
}
/**
 * @generated from protobuf message data.RoomUserAttr
 */
export interface RoomUserAttr {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: string room_id_str = 2;
     */
    roomIdStr: string;
    /**
     * @generated from protobuf field: int64 silence_flag = 3;
     */
    silenceFlag: bigint;
    /**
     * @generated from protobuf field: int64 admin_flag = 4;
     */
    adminFlag: bigint;
    /**
     * @generated from protobuf field: int64 rank = 5;
     */
    rank: bigint;
}
/**
 * @generated from protobuf message data.BurstInfo
 */
export interface BurstInfo {
    /**
     * @generated from protobuf field: int64 burst_time_remain_seconds = 1;
     */
    burstTimeRemainSeconds: bigint;
    /**
     * @generated from protobuf field: int64 multiple = 2;
     */
    multiple: bigint;
    /**
     * @generated from protobuf field: int64 property_definition_id = 3;
     */
    propertyDefinitionId: bigint;
    /**
     * @generated from protobuf field: data.Image property_icon = 4;
     */
    propertyIcon?: Image;
}
/**
 * @generated from protobuf message data.RoomHealthScoreInfo
 */
export interface RoomHealthScoreInfo {
    /**
     * @generated from protobuf field: double score = 1;
     */
    score: number;
    /**
     * @generated from protobuf field: string bubble_message = 2;
     */
    bubbleMessage: string;
    /**
     * @generated from protobuf field: string jump_url = 3;
     */
    jumpUrl: string;
}
/**
 * @generated from protobuf message data.TVStation
 */
export interface TVStation {
    /**
     * @generated from protobuf field: bool is_idle = 1;
     */
    isIdle: boolean;
    /**
     * @generated from protobuf field: string state_desc = 2;
     */
    stateDesc: string;
}
/**
 * @generated from protobuf message data.CommentBox
 */
export interface CommentBox {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string placeholder = 2;
     */
    placeholder: string;
}
/**
 * @generated from protobuf message data.RoomCartV2
 */
export interface RoomCartV2 {
    /**
     * @generated from protobuf field: int32 show_cart = 1;
     */
    showCart: number;
}
/**
 * @generated from protobuf message data.RoomCart
 */
export interface RoomCart {
    /**
     * @generated from protobuf field: bool contain_cart = 1;
     */
    containCart: boolean;
    /**
     * @generated from protobuf field: int64 total = 2;
     */
    total: bigint;
    /**
     * @generated from protobuf field: int64 flash_total = 3;
     */
    flashTotal: bigint;
    /**
     * @generated from protobuf field: string cart_icon = 4;
     */
    cartIcon: string;
    /**
     * @generated from protobuf field: int32 show_cart = 5;
     */
    showCart: number;
    /**
     * @generated from protobuf field: data.CartVertical vertical = 6;
     */
    vertical?: CartVertical;
    /**
     * @generated from protobuf field: data.CartHorizontal horizontal = 7;
     */
    horizontal?: CartHorizontal;
    /**
     * @generated from protobuf field: data.GlobalCustomIcons global_custom_icons = 8;
     */
    globalCustomIcons?: GlobalCustomIcons;
}
/**
 * @generated from protobuf message data.CartVertical
 */
export interface CartVertical {
    /**
     * @generated from protobuf field: bool allow_show_cart = 1;
     */
    allowShowCart: boolean;
}
/**
 * @generated from protobuf message data.CartHorizontal
 */
export interface CartHorizontal {
    /**
     * @generated from protobuf field: bool allow_show_cart = 1;
     */
    allowShowCart: boolean;
}
/**
 * @generated from protobuf message data.GlobalCustomIcons
 */
export interface GlobalCustomIcons {
    /**
     * @generated from protobuf field: string static_icon_url = 1;
     */
    staticIconUrl: string;
    /**
     * @generated from protobuf field: string animated_icon_url = 2;
     */
    animatedIconUrl: string;
    /**
     * @generated from protobuf field: string animated_common_icon_url = 3;
     */
    animatedCommonIconUrl: string;
}
/**
 * @generated from protobuf message data.ShortTouchBigCard
 */
export interface ShortTouchBigCard {
    /**
     * @generated from protobuf field: string big_card_url = 1;
     */
    bigCardUrl: string;
    /**
     * @generated from protobuf field: int32 container_type = 2;
     */
    containerType: number;
    /**
     * @generated from protobuf field: int32 width = 3;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 4;
     */
    height: number;
    /**
     * @generated from protobuf field: int32 duration = 5;
     */
    duration: number;
}
/**
 * @generated from protobuf message data.TextViewModel
 */
export interface TextViewModel {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: string text_color = 2;
     */
    textColor: string;
    /**
     * @generated from protobuf field: int32 text_size = 3;
     */
    textSize: number;
    /**
     * @generated from protobuf field: string bg_color = 4;
     */
    bgColor: string;
}
/**
 * @generated from protobuf message data.ShortTouchBubble
 */
export interface ShortTouchBubble {
    /**
     * @generated from protobuf field: string bubble_id = 1;
     */
    bubbleId: string;
    /**
     * @generated from protobuf field: data.TextViewModel ui_model = 2;
     */
    uiModel?: TextViewModel;
    /**
     * @generated from protobuf field: int32 strategy = 3;
     */
    strategy: number;
    /**
     * @generated from protobuf field: int32 duration = 4;
     */
    duration: number;
}
/**
 * @generated from protobuf message data.ShortTouchArea
 */
export interface ShortTouchArea {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: uint32 priority = 2;
     */
    priority: number;
    /**
     * @generated from protobuf field: int64 min_webcast_sdk_version = 3;
     */
    minWebcastSdkVersion: bigint;
    /**
     * @generated from protobuf field: int32 short_touch_type = 4;
     */
    shortTouchType: number;
    /**
     * @generated from protobuf field: data.ShortTouchInfo short_touch_info = 5;
     */
    shortTouchInfo?: ShortTouchInfo;
    /**
     * @generated from protobuf field: data.ShortTouchBigCard short_touch_big_card = 6;
     */
    shortTouchBigCard?: ShortTouchBigCard;
    /**
     * @generated from protobuf field: string container_payload = 7;
     */
    containerPayload: string;
    /**
     * @generated from protobuf field: int32 load_type = 8;
     */
    loadType: number;
    /**
     * @generated from protobuf field: data.ShortTouchBubble bubble_params = 9;
     */
    bubbleParams?: ShortTouchBubble;
    /**
     * @generated from protobuf field: string name = 10;
     */
    name: string;
}
/**
 * @generated from protobuf message data.ShortTouchImageLayers
 */
export interface ShortTouchImageLayers {
    /**
     * @generated from protobuf field: repeated data.ShortTouchImageLayers.Layer layers = 1;
     */
    layers: ShortTouchImageLayers_Layer[];
    /**
     * @generated from protobuf field: int32 base_width = 2;
     */
    baseWidth: number;
    /**
     * @generated from protobuf field: int32 base_height = 3;
     */
    baseHeight: number;
}
/**
 * @generated from protobuf message data.ShortTouchImageLayers.Layer
 */
export interface ShortTouchImageLayers_Layer {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: int32 x = 2;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 3;
     */
    y: number;
    /**
     * @generated from protobuf field: int32 width = 4;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 5;
     */
    height: number;
    /**
     * @generated from protobuf field: int32 radius = 6;
     */
    radius: number;
}
/**
 * @generated from protobuf message data.ShortTouchInfo
 */
export interface ShortTouchInfo {
    /**
     * @generated from protobuf field: string short_touch_url = 1;
     */
    shortTouchUrl: string;
    /**
     * @generated from protobuf field: string short_touch_fallback_url = 2;
     */
    shortTouchFallbackUrl: string;
    /**
     * @generated from protobuf field: int32 container_type = 3;
     */
    containerType: number;
    /**
     * @generated from protobuf field: uint32 width = 4;
     */
    width: number;
    /**
     * @generated from protobuf field: uint32 height = 5;
     */
    height: number;
    /**
     * @generated from protobuf field: string img_url = 6;
     */
    imgUrl: string;
    /**
     * @generated from protobuf field: string jump_schema = 7;
     */
    jumpSchema: string;
    /**
     * @generated from protobuf field: int32 show_animation = 8;
     */
    showAnimation: number;
    /**
     * @generated from protobuf field: int32 animation_type = 9;
     */
    animationType: number;
    /**
     * @generated from protobuf field: repeated string sub_item_list = 10;
     */
    subItemList: string[];
    /**
     * @generated from protobuf field: data.ShortTouchImageLayers img_layers = 11;
     */
    imgLayers?: ShortTouchImageLayers;
    /**
     * @generated from protobuf field: uint32 animation_quota = 12;
     */
    animationQuota: number;
    /**
     * @generated from protobuf field: string accessible_name = 13;
     */
    accessibleName: string;
}
/**
 * @generated from protobuf message data.QuizExtra
 */
export interface QuizExtra {
    /**
     * @generated from protobuf field: string quiz_infos = 1;
     */
    quizInfos: string;
}
/**
 * @generated from protobuf message data.AudioSpeakingImageList
 */
export interface AudioSpeakingImageList {
    /**
     * @generated from protobuf field: data.AudioSpeakingImageList.SpeakingImage male_speaking_image = 1;
     */
    maleSpeakingImage?: AudioSpeakingImageList_SpeakingImage;
    /**
     * @generated from protobuf field: data.AudioSpeakingImageList.SpeakingImage female_speaking_image = 2;
     */
    femaleSpeakingImage?: AudioSpeakingImageList_SpeakingImage;
    /**
     * @generated from protobuf field: data.AudioSpeakingImageList.SpeakingImage unknown_speaking_image = 3;
     */
    unknownSpeakingImage?: AudioSpeakingImageList_SpeakingImage;
}
/**
 * @generated from protobuf message data.AudioSpeakingImageList.SpeakingImage
 */
export interface AudioSpeakingImageList_SpeakingImage {
    /**
     * @generated from protobuf field: data.Image speaking_low_image = 1;
     */
    speakingLowImage?: Image;
    /**
     * @generated from protobuf field: data.Image speaking_default_image = 2;
     */
    speakingDefaultImage?: Image;
    /**
     * @generated from protobuf field: data.Image speaking_high_image = 3;
     */
    speakingHighImage?: Image;
}
/**
 * @generated from protobuf message data.ShowArea
 */
export interface ShowArea {
    /**
     * @generated from protobuf field: int64 x = 1;
     */
    x: bigint;
    /**
     * @generated from protobuf field: int64 y = 2;
     */
    y: bigint;
    /**
     * @generated from protobuf field: int64 h = 3;
     */
    h: bigint;
    /**
     * @generated from protobuf field: int64 w = 4;
     */
    w: bigint;
}
/**
 * @generated from protobuf message data.AnimatedBgInfo
 */
export interface AnimatedBgInfo {
    /**
     * @generated from protobuf field: data.ShowArea showArea = 1;
     */
    showArea?: ShowArea;
    /**
     * @generated from protobuf field: string fileFormat = 2;
     */
    fileFormat: string;
    /**
     * @generated from protobuf field: data.Image animatedBg = 3;
     */
    animatedBg?: Image;
}
/**
 * @generated from protobuf message data.AudioBGData
 */
export interface AudioBGData {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string image_uri = 2;
     */
    imageUri: string;
    /**
     * @generated from protobuf field: int32 img_type = 3;
     */
    imgType: number;
    /**
     * @generated from protobuf field: data.Image image = 4;
     */
    image?: Image;
    /**
     * @generated from protobuf field: data.Image imageThumbnail = 5;
     */
    imageThumbnail?: Image;
    /**
     * @generated from protobuf field: data.Image imageAnimatedBG = 6;
     */
    imageAnimatedBG?: Image;
    /**
     * @generated from protobuf field: data.Image imageNormalAvatar = 7;
     */
    imageNormalAvatar?: Image;
    /**
     * @generated from protobuf field: data.Image imageStartupAvatar = 8;
     */
    imageStartupAvatar?: Image;
    /**
     * @generated from protobuf field: data.Image imageChatJoinIcon = 9;
     */
    imageChatJoinIcon?: Image;
    /**
     * @generated from protobuf field: data.Image imageStaticBG = 10;
     */
    imageStaticBG?: Image;
    /**
     * @generated from protobuf field: data.AudioSpeakingImageList speakingImageList = 11;
     */
    speakingImageList?: AudioSpeakingImageList;
    /**
     * @generated from protobuf field: string status_color_value = 12;
     */
    statusColorValue: string;
    /**
     * @generated from protobuf field: string public_screen_color_value = 13;
     */
    publicScreenColorValue: string;
    /**
     * @generated from protobuf field: int32 time_limit = 14;
     */
    timeLimit: number;
    /**
     * @generated from protobuf field: int32 bg_type = 15;
     */
    bgType: number;
    /**
     * @generated from protobuf field: string empty_start_color = 16;
     */
    emptyStartColor: string;
    /**
     * @generated from protobuf field: string empty_end_color = 17;
     */
    emptyEndColor: string;
    /**
     * @generated from protobuf field: data.Image imageColdBG = 18;
     */
    imageColdBG?: Image;
    /**
     * @generated from protobuf field: string micBGColorValue = 19;
     */
    micBGColorValue: string;
    /**
     * @generated from protobuf field: repeated data.Image iconMicNormals = 20;
     */
    iconMicNormals: Image[];
    /**
     * @generated from protobuf field: data.Image iconMicLock = 21;
     */
    iconMicLock?: Image;
    /**
     * @generated from protobuf field: string colorMicText = 22;
     */
    colorMicText: string;
    /**
     * @generated from protobuf field: string colorMicLine = 23;
     */
    colorMicLine: string;
    /**
     * @generated from protobuf field: string colorMicBG = 24;
     */
    colorMicBG: string;
    /**
     * @generated from protobuf field: string themeLabel = 25;
     */
    themeLabel: string;
    /**
     * @generated from protobuf field: int32 bgStatus = 26;
     */
    bgStatus: number;
    /**
     * @generated from protobuf field: data.AnimatedBgInfo animateInfo = 27;
     */
    animateInfo?: AnimatedBgInfo;
    /**
     * @generated from protobuf field: string idStr = 28;
     */
    idStr: string;
    /**
     * @generated from protobuf field: int32 play_mode = 29;
     */
    playMode: number;
    /**
     * @generated from protobuf field: string theme_tag = 30;
     */
    themeTag: string;
    /**
     * @generated from protobuf field: int64 start_time = 31;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 32;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 format_type = 33;
     */
    formatType: number;
    /**
     * @generated from protobuf field: data.AudioSpeakingImageList speaking_image_v2 = 34;
     */
    speakingImageV2?: AudioSpeakingImageList;
}
/**
 * @generated from protobuf message data.RoomReplayInfo
 */
export interface RoomReplayInfo {
    /**
     * @generated from protobuf field: int64 replay_duration = 1;
     */
    replayDuration: bigint;
    /**
     * @generated from protobuf field: string replay_url = 2;
     */
    replayUrl: string;
    /**
     * @generated from protobuf field: string content_uniq_id = 3;
     */
    contentUniqId: string;
}
/**
 * @generated from protobuf message data.CommentWallInfo
 */
export interface CommentWallInfo {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 id = 2;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 comment_msg_id = 3;
     */
    commentMsgId: bigint;
    /**
     * @generated from protobuf field: int64 commenter_id = 4;
     */
    commenterId: bigint;
    /**
     * @generated from protobuf field: string commenter_nickname = 5;
     */
    commenterNickname: string;
    /**
     * @generated from protobuf field: int64 event_time = 6;
     */
    eventTime: bigint;
    /**
     * @generated from protobuf field: int64 msg_time = 7;
     */
    msgTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 8;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 countdown_style = 9;
     */
    countdownStyle: number;
    /**
     * @generated from protobuf field: int64 operator_id = 10;
     */
    operatorId: bigint;
    /**
     * @generated from protobuf field: string operator_nickname = 11;
     */
    operatorNickname: string;
}
/**
 * @generated from protobuf message data.CommentWallPosition
 */
export interface CommentWallPosition {
    /**
     * @generated from protobuf field: double x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: int64 event_time = 3;
     */
    eventTime: bigint;
}
/**
 * @generated from protobuf message data.AnnouncementInfo
 */
export interface AnnouncementInfo {
    /**
     * @generated from protobuf field: string scheduled_time_text = 1;
     */
    scheduledTimeText: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: bool subscribed = 3;
     */
    subscribed: boolean;
    /**
     * @generated from protobuf field: int64 appointment_id = 4;
     */
    appointmentId: bigint;
    /**
     * @generated from protobuf field: int32 scheduled_time = 5;
     */
    scheduledTime: number;
    /**
     * @generated from protobuf field: int32 scheduled_date = 6;
     */
    scheduledDate: number;
    /**
     * @generated from protobuf field: repeated int32 scheduled_weekdays = 7;
     */
    scheduledWeekdays: number[];
}
/**
 * @generated from protobuf message data.RoomIMInfo
 */
export interface RoomIMInfo {
    /**
     * @generated from protobuf field: repeated string welcome_messages = 1;
     */
    welcomeMessages: string[];
    /**
     * @generated from protobuf field: string room_tag = 2;
     */
    roomTag: string;
    /**
     * @generated from protobuf field: string hide_gift_message = 3;
     */
    hideGiftMessage: string;
}
/**
 * @generated from protobuf message data.PropsBGData
 */
export interface PropsBGData {
    /**
     * @generated from protobuf field: string image_uri = 1;
     */
    imageUri: string;
    /**
     * @generated from protobuf field: int32 img_type = 2;
     */
    imgType: number;
    /**
     * @generated from protobuf field: data.Image image = 3;
     */
    image?: Image;
    /**
     * @generated from protobuf field: data.Image imageThumbnail = 4;
     */
    imageThumbnail?: Image;
}
/**
 * @generated from protobuf message data.LinkerDetail
 */
export interface LinkerDetail {
    /**
     * @generated from protobuf field: repeated int64 linker_play_modes = 1;
     */
    linkerPlayModes: bigint[];
    /**
     * @generated from protobuf field: int32 big_party_layout_config_version = 2;
     */
    bigPartyLayoutConfigVersion: number;
    /**
     * @generated from protobuf field: bool accept_audience_pre_apply = 3;
     */
    acceptAudiencePreApply: boolean;
    /**
     * @generated from protobuf field: int64 linker_ui_layout = 4;
     */
    linkerUiLayout: bigint;
    /**
     * @generated from protobuf field: int32 enable_audience_linkmic = 5;
     */
    enableAudienceLinkmic: number;
    /**
     * @generated from protobuf field: string function_type = 6;
     */
    functionType: string;
    /**
     * @generated from protobuf field: string ktv_lyric_mode = 8;
     */
    ktvLyricMode: string;
    /**
     * @generated from protobuf field: string init_source = 9;
     */
    initSource: string;
    /**
     * @generated from protobuf field: bool forbid_apply_from_other = 10;
     */
    forbidApplyFromOther: boolean;
    /**
     * @generated from protobuf field: int32 ktv_exhibit_mode = 11;
     */
    ktvExhibitMode: number;
    /**
     * @generated from protobuf field: int64 enlarge_guest_turn_on_source = 12;
     */
    enlargeGuestTurnOnSource: bigint;
}
/**
 * @generated from protobuf message data.PreviewExposeData
 */
export interface PreviewExposeData {
    /**
     * @generated from protobuf field: int32 style = 1;
     */
    style: number;
    /**
     * @generated from protobuf field: data.PreviewExposeData.PreviewGuide preview_guide = 2;
     */
    previewGuide?: PreviewExposeData_PreviewGuide;
    /**
     * @generated from protobuf field: repeated data.PreviewExposeData.Meta metas = 3;
     */
    metas: PreviewExposeData_Meta[];
    /**
     * @generated from protobuf field: repeated data.PreviewExposeData.ChatMessage chat_msgs = 4;
     */
    chatMsgs: PreviewExposeData_ChatMessage[];
    /**
     * @generated from protobuf field: repeated data.PreviewExposeData.Meta force_insertion = 5;
     */
    forceInsertion: PreviewExposeData_Meta[];
    /**
     * @generated from protobuf field: int32 scroll_after_ms = 6;
     */
    scrollAfterMs: number;
    /**
     * @generated from protobuf field: bool need_realtime = 7;
     */
    needRealtime: boolean;
    /**
     * @generated from protobuf field: int32 message_scroll_after_ms = 8;
     */
    messageScrollAfterMs: number;
    /**
     * @generated from protobuf field: int32 message_scroll_interval_ms = 9;
     */
    messageScrollIntervalMs: number;
    /**
     * @generated from protobuf field: string preview_intro = 10;
     */
    previewIntro: string;
    /**
     * @generated from protobuf field: data.PreviewExposeData.PreviewExtendArea preview_extend_area = 11;
     */
    previewExtendArea?: PreviewExposeData_PreviewExtendArea;
    /**
     * @generated from protobuf field: int32 show_uv_pv = 12;
     */
    showUvPv: number;
    /**
     * @generated from protobuf field: int32 show_name_abbreviation = 13;
     */
    showNameAbbreviation: number;
    /**
     * @generated from protobuf field: data.PreviewExposeData.PreviewSwitch switch = 14;
     */
    switch?: PreviewExposeData_PreviewSwitch;
    /**
     * @generated from protobuf field: int32 is_preview_use_websocket = 15;
     */
    isPreviewUseWebsocket: number;
    /**
     * @generated from protobuf field: bool is_aweme_video_feed = 16;
     */
    isAwemeVideoFeed: boolean;
    /**
     * @generated from protobuf field: bool show_preview_cards = 17;
     */
    showPreviewCards: boolean;
    /**
     * @generated from protobuf field: data.PreviewExposeData.PreviewPromotion preview_promotion = 18;
     */
    previewPromotion?: PreviewExposeData_PreviewPromotion;
    /**
     * @generated from protobuf field: data.PreviewExposeData.PreviewIMExtend preview_im_extend = 19;
     */
    previewImExtend?: PreviewExposeData_PreviewIMExtend;
    /**
     * @generated from protobuf field: repeated data.PreviewExposeData.EtData et_data = 20;
     */
    etData: PreviewExposeData_EtData[];
    /**
     * @generated from protobuf field: int32 alive_checker = 21;
     */
    aliveChecker: number;
    /**
     * @generated from protobuf field: data.EnterPublicAreaAnimation enter_public_area_animation = 22;
     */
    enterPublicAreaAnimation?: EnterPublicAreaAnimation;
}
/**
 * @generated from protobuf message data.PreviewExposeData.PreviewGuide
 */
export interface PreviewExposeData_PreviewGuide {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string tip = 2;
     */
    tip: string;
    /**
     * @generated from protobuf field: int64 type = 3;
     */
    type: bigint;
    /**
     * @generated from protobuf field: repeated string roll_tips = 4;
     */
    rollTips: string[];
    /**
     * @generated from protobuf field: int64 coupon_mate_id = 5;
     */
    couponMateId: bigint;
    /**
     * @generated from protobuf field: int64 user_tag_get_coin = 6;
     */
    userTagGetCoin: bigint;
    /**
     * @generated from protobuf field: int64 live_mession_style = 7;
     */
    liveMessionStyle: bigint;
    /**
     * @generated from protobuf field: string et_type = 8;
     */
    etType: string;
    /**
     * @generated from protobuf field: string extra = 9;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.PreviewExposeData.Meta
 */
export interface PreviewExposeData_Meta {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: data.PreviewExposeData.Meta.Host host = 2;
     */
    host?: PreviewExposeData_Meta_Host;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
}
/**
 * @generated from protobuf message data.PreviewExposeData.Meta.Host
 */
export interface PreviewExposeData_Meta_Host {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string tip = 2;
     */
    tip: string;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
}
/**
 * @generated from protobuf message data.PreviewExposeData.ChatMessage
 */
export interface PreviewExposeData_ChatMessage {
    /**
     * @generated from protobuf field: string nick_name = 1;
     */
    nickName: string;
    /**
     * @generated from protobuf field: string nick_name_color = 2;
     */
    nickNameColor: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
}
/**
 * @generated from protobuf message data.PreviewExposeData.PreviewExtendArea
 */
export interface PreviewExposeData_PreviewExtendArea {
    /**
     * @generated from protobuf field: data.Image extend_icon = 1;
     */
    extendIcon?: Image;
    /**
     * @generated from protobuf field: string extend_pre_text = 2;
     */
    extendPreText: string;
    /**
     * @generated from protobuf field: string extend_text = 3;
     */
    extendText: string;
    /**
     * @generated from protobuf field: int32 extend_type = 4;
     */
    extendType: number;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
    /**
     * @generated from protobuf field: int32 use_marquee = 6;
     */
    useMarquee: number;
    /**
     * @generated from protobuf field: int32 icon_type = 7;
     */
    iconType: number;
    /**
     * @generated from protobuf field: repeated data.PreviewExposeData.PreviewExtendArea.Part right_part = 8;
     */
    rightPart: PreviewExposeData_PreviewExtendArea_Part[];
    /**
     * @generated from protobuf field: string button_part = 9;
     */
    buttonPart: string;
    /**
     * @generated from protobuf field: repeated data.PreviewExposeData.PreviewExtendArea.Part mid_part = 10;
     */
    midPart: PreviewExposeData_PreviewExtendArea_Part[];
    /**
     * @generated from protobuf field: bool need_delimiter = 11;
     */
    needDelimiter: boolean;
    /**
     * @generated from protobuf field: repeated data.PreviewExposeData.PreviewExtendArea.Part bottom_part = 12;
     */
    bottomPart: PreviewExposeData_PreviewExtendArea_Part[];
    /**
     * @generated from protobuf field: int32 ui_type = 13;
     */
    uiType: number;
    /**
     * @generated from protobuf field: int32 version = 14;
     */
    version: number;
    /**
     * @generated from protobuf field: data.PreviewExposeData.PreviewExtendArea.ActionConfig action_cfg = 17;
     */
    actionCfg?: PreviewExposeData_PreviewExtendArea_ActionConfig;
    /**
     * @generated from protobuf field: bool use_pass_through_extra_json = 18;
     */
    usePassThroughExtraJson: boolean;
    /**
     * @generated from protobuf field: string pass_through_extra_json = 19;
     */
    passThroughExtraJson: string;
    /**
     * @generated from protobuf field: string extra_business = 21;
     */
    extraBusiness: string;
    /**
     * @generated from protobuf field: bool no_need_poll = 22;
     */
    noNeedPoll: boolean;
    /**
     * @generated from protobuf field: int32 clickable_area = 24;
     */
    clickableArea: number;
}
/**
 * @generated from protobuf message data.PreviewExposeData.PreviewExtendArea.Part
 */
export interface PreviewExposeData_PreviewExtendArea_Part {
    /**
     * @generated from protobuf field: int32 fontSize = 1;
     */
    fontSize: number;
    /**
     * @generated from protobuf field: int32 interval = 2;
     */
    interval: number;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: bool cuttable = 4;
     */
    cuttable: boolean;
    /**
     * @generated from protobuf field: bool deleted = 5;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string font_color = 6;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: bool bold = 7;
     */
    bold: boolean;
    /**
     * @generated from protobuf field: int32 part_type = 8;
     */
    partType: number;
    /**
     * @generated from protobuf field: data.Image image = 9;
     */
    image?: Image;
}
/**
 * @generated from protobuf message data.PreviewExposeData.PreviewExtendArea.ActionConfig
 */
export interface PreviewExposeData_PreviewExtendArea_ActionConfig {
    /**
     * @generated from protobuf field: int32 areaAction = 1;
     */
    areaAction: number;
}
/**
 * @generated from protobuf message data.PreviewExposeData.PreviewSwitch
 */
export interface PreviewExposeData_PreviewSwitch {
    /**
     * @generated from protobuf field: int32 title = 1;
     */
    title: number;
    /**
     * @generated from protobuf field: int32 preview_guide = 2;
     */
    previewGuide: number;
    /**
     * @generated from protobuf field: int32 dynamic_label = 3;
     */
    dynamicLabel: number;
    /**
     * @generated from protobuf field: int32 assist_label = 4;
     */
    assistLabel: number;
    /**
     * @generated from protobuf field: int32 extend_area = 5;
     */
    extendArea: number;
}
/**
 * @generated from protobuf message data.PreviewExposeData.PreviewPromotion
 */
export interface PreviewExposeData_PreviewPromotion {
    /**
     * @generated from protobuf field: repeated data.Image avatar_icons = 1;
     */
    avatarIcons: Image[];
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: repeated string fast_comments = 3;
     */
    fastComments: string[];
}
/**
 * @generated from protobuf message data.PreviewExposeData.PreviewIMExtend
 */
export interface PreviewExposeData_PreviewIMExtend {
    /**
     * @generated from protobuf field: int64 im_extend_type = 1;
     */
    imExtendType: bigint;
    /**
     * @generated from protobuf field: data.Image icon = 2;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string main_title = 3;
     */
    mainTitle: string;
    /**
     * @generated from protobuf field: string sub_title = 4;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.PreviewExposeData.EtData
 */
export interface PreviewExposeData_EtData {
    /**
     * @generated from protobuf field: string type_enter_room = 1;
     */
    typeEnterRoom: string;
    /**
     * @generated from protobuf field: string type_mob_params = 2;
     */
    typeMobParams: string;
    /**
     * @generated from protobuf field: string type_params = 3;
     */
    typeParams: string;
    /**
     * @generated from protobuf field: string type_first_room_params = 4;
     */
    typeFirstRoomParams: string;
    /**
     * @generated from protobuf field: string type_first_room_mob_params = 5;
     */
    typeFirstRoomMobParams: string;
    /**
     * @generated from protobuf field: string type_first_show_room_params = 6;
     */
    typeFirstShowRoomParams: string;
    /**
     * @generated from protobuf field: string type_first_show_mob_params = 7;
     */
    typeFirstShowMobParams: string;
}
/**
 * @generated from protobuf message data.PaidLiveData
 */
export interface PaidLiveData {
    /**
     * @generated from protobuf field: int32 paid_type = 1;
     */
    paidType: number;
    /**
     * @generated from protobuf field: int32 view_right = 2;
     */
    viewRight: number;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: data.TicketData ticket_session = 4;
     */
    ticketSession?: TicketData;
    /**
     * @generated from protobuf field: data.OrderData order_data = 5;
     */
    orderData?: OrderData;
    /**
     * @generated from protobuf field: int32 delivery = 6;
     */
    delivery: number;
    /**
     * @generated from protobuf field: bool need_delivery_notice = 7;
     */
    needDeliveryNotice: boolean;
    /**
     * @generated from protobuf field: int32 anchor_right = 8;
     */
    anchorRight: number;
    /**
     * @generated from protobuf field: int32 pay_ab_type = 9;
     */
    payAbType: number;
    /**
     * @generated from protobuf field: data.AsyncAuthData async_auth_data = 12;
     */
    asyncAuthData?: AsyncAuthData;
}
/**
 * @generated from protobuf message data.AsyncAuthData
 */
export interface AsyncAuthData {
    /**
     * @generated from protobuf field: int64 keep_alive_time = 1;
     */
    keepAliveTime: bigint;
    /**
     * @generated from protobuf field: int64 async_authentication_operate = 2;
     */
    asyncAuthenticationOperate: bigint;
    /**
     * @generated from protobuf field: int64 async_authentication_ab_type = 3;
     */
    asyncAuthenticationAbType: bigint;
    /**
     * @generated from protobuf field: int64 keep_alive_time_stamp = 4;
     */
    keepAliveTimeStamp: bigint;
    /**
     * @generated from protobuf field: int64 buffer = 5;
     */
    buffer: bigint;
}
/**
 * @generated from protobuf message data.PaidLivePriceInfo
 */
export interface PaidLivePriceInfo {
    /**
     * @generated from protobuf field: int32 start_time = 1;
     */
    startTime: number;
    /**
     * @generated from protobuf field: int32 end_time = 2;
     */
    endTime: number;
    /**
     * @generated from protobuf field: int64 price = 3;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int32 claim_ddl = 4;
     */
    claimDdl: number;
    /**
     * @generated from protobuf field: int64 sku_id = 5;
     */
    skuId: bigint;
}
/**
 * @generated from protobuf message data.TicketData
 */
export interface TicketData {
    /**
     * @generated from protobuf field: int64 ticket_session_id = 1;
     */
    ticketSessionId: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 3;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string price = 4;
     */
    price: string;
    /**
     * @generated from protobuf field: int64 raw_release_time = 5;
     */
    rawReleaseTime: bigint;
    /**
     * @generated from protobuf field: repeated string tags = 6;
     */
    tags: string[];
    /**
     * @generated from protobuf field: string ticket_explanation_card_jump_url = 7;
     */
    ticketExplanationCardJumpUrl: string;
    /**
     * @generated from protobuf field: string ticket_panel_jump_url = 8;
     */
    ticketPanelJumpUrl: string;
    /**
     * @generated from protobuf field: string ticket_session_id_str = 9;
     */
    ticketSessionIdStr: string;
    /**
     * @generated from protobuf field: int32 sell_status = 10;
     */
    sellStatus: number;
    /**
     * @generated from protobuf field: string cover_uri = 11;
     */
    coverUri: string;
    /**
     * @generated from protobuf field: string cover_uri_vertical = 12;
     */
    coverUriVertical: string;
    /**
     * @generated from protobuf field: string Introduction = 13 [json_name = "Introduction"];
     */
    introduction: string;
    /**
     * @generated from protobuf field: int64 raw_show_start_time = 14;
     */
    rawShowStartTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_show_end_time = 15;
     */
    rawShowEndTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_sale_start_time = 16;
     */
    rawSaleStartTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_sale_end_time = 17;
     */
    rawSaleEndTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_refund_deadline = 18;
     */
    rawRefundDeadline: bigint;
    /**
     * @generated from protobuf field: int64 raw_early_bird_start_time = 19;
     */
    rawEarlyBirdStartTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_early_bird_end_time = 20;
     */
    rawEarlyBirdEndTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_full_price_start_time = 21;
     */
    rawFullPriceStartTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_full_price_end_time = 22;
     */
    rawFullPriceEndTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_activity_start_time = 23;
     */
    rawActivityStartTime: bigint;
    /**
     * @generated from protobuf field: int64 raw_activity_end_time = 24;
     */
    rawActivityEndTime: bigint;
    /**
     * @generated from protobuf field: string early_bird_price = 25;
     */
    earlyBirdPrice: string;
    /**
     * @generated from protobuf field: string activity_price = 26;
     */
    activityPrice: string;
    /**
     * @generated from protobuf field: int32 status = 27;
     */
    status: number;
    /**
     * @generated from protobuf field: string show_start_time = 28;
     */
    showStartTime: string;
    /**
     * @generated from protobuf field: string show_end_time = 29;
     */
    showEndTime: string;
    /**
     * @generated from protobuf field: string sale_start_time = 30;
     */
    saleStartTime: string;
    /**
     * @generated from protobuf field: string sale_end_time = 31;
     */
    saleEndTime: string;
    /**
     * @generated from protobuf field: string early_bird_start_time = 32;
     */
    earlyBirdStartTime: string;
    /**
     * @generated from protobuf field: string early_bird_end_time = 33;
     */
    earlyBirdEndTime: string;
    /**
     * @generated from protobuf field: string full_price_start_time = 34;
     */
    fullPriceStartTime: string;
    /**
     * @generated from protobuf field: string full_price_end_time = 35;
     */
    fullPriceEndTime: string;
    /**
     * @generated from protobuf field: string activity_start_time = 36;
     */
    activityStartTime: string;
    /**
     * @generated from protobuf field: string activity_end_time = 37;
     */
    activityEndTime: string;
    /**
     * @generated from protobuf field: string refund_deadline = 38;
     */
    refundDeadline: string;
    /**
     * @generated from protobuf field: string activity_title = 39;
     */
    activityTitle: string;
    /**
     * @generated from protobuf field: string activity_jump_url = 40;
     */
    activityJumpUrl: string;
    /**
     * @generated from protobuf field: string release_time = 41;
     */
    releaseTime: string;
    /**
     * @generated from protobuf field: int32 ticket_explanation_card_status = 42;
     */
    ticketExplanationCardStatus: number;
    /**
     * @generated from protobuf field: int32 last_duration = 43;
     */
    lastDuration: number;
    /**
     * @generated from protobuf field: string paid_conversion_jump_url = 44;
     */
    paidConversionJumpUrl: string;
    /**
     * @generated from protobuf field: string ticket_panel_six_jump_url = 45;
     */
    ticketPanelSixJumpUrl: string;
    /**
     * @generated from protobuf field: string ticket_panel_nine_jump_url = 46;
     */
    ticketPanelNineJumpUrl: string;
    /**
     * @generated from protobuf field: data.Image cover = 47;
     */
    cover?: Image;
    /**
     * @generated from protobuf field: int32 ios_pay_type = 48;
     */
    iosPayType: number;
    /**
     * @generated from protobuf field: int32 android_pay_type = 49;
     */
    androidPayType: number;
    /**
     * @generated from protobuf field: int32 ios_pay_price = 50;
     */
    iosPayPrice: number;
    /**
     * @generated from protobuf field: int32 android_pay_price = 51;
     */
    androidPayPrice: number;
    /**
     * @generated from protobuf field: int32 right_duration = 52;
     */
    rightDuration: number;
    /**
     * @generated from protobuf field: data.PaidLivePriceInfo friend_priceInfo = 53;
     */
    friendPriceInfo?: PaidLivePriceInfo;
    /**
     * @generated from protobuf field: data.PaidLivePriceInfo helping_priceInfo = 54;
     */
    helpingPriceInfo?: PaidLivePriceInfo;
    /**
     * @generated from protobuf field: int64 ticket_anchor_id = 56;
     */
    ticketAnchorId: bigint;
    /**
     * @generated from protobuf field: string extra = 57;
     */
    extra: string;
    /**
     * @generated from protobuf field: repeated data.TicketData.TicketSkuDetail sku_details = 58;
     */
    skuDetails: TicketData_TicketSkuDetail[];
    /**
     * @generated from protobuf field: data.TicketData.PaidLivePriceInfoV2 final_price_info = 59;
     */
    finalPriceInfo?: TicketData_PaidLivePriceInfoV2;
    /**
     * @generated from protobuf field: int64 parent_ticket_session_id = 60;
     */
    parentTicketSessionId: bigint;
    /**
     * @generated from protobuf field: string parent_ticket_session_id_str = 61;
     */
    parentTicketSessionIdStr: string;
    /**
     * @generated from protobuf field: int32 ticket_category = 62;
     */
    ticketCategory: number;
}
/**
 * @generated from protobuf message data.TicketData.PaidLivePriceInfoV2
 */
export interface TicketData_PaidLivePriceInfoV2 {
    /**
     * @generated from protobuf field: string amount = 1;
     */
    amount: string;
    /**
     * @generated from protobuf field: string currency = 2;
     */
    currency: string;
    /**
     * @generated from protobuf field: int64 pos = 3;
     */
    pos: bigint;
    /**
     * @generated from protobuf field: repeated int32 pay_type = 4;
     */
    payType: number[];
}
/**
 * @generated from protobuf message data.TicketData.TicketSkuDetail
 */
export interface TicketData_TicketSkuDetail {
    /**
     * @generated from protobuf field: int32 ticket_type = 1;
     */
    ticketType: number;
    /**
     * @generated from protobuf field: string ticket_name = 2;
     */
    ticketName: string;
    /**
     * @generated from protobuf field: int64 start_sell_time = 3;
     */
    startSellTime: bigint;
    /**
     * @generated from protobuf field: int64 closing_sell_time = 4;
     */
    closingSellTime: bigint;
    /**
     * @generated from protobuf field: int32 sell_status = 5;
     */
    sellStatus: number;
    /**
     * @generated from protobuf field: data.TicketData.PaidLivePriceInfoV2 price_info = 6;
     */
    priceInfo?: TicketData_PaidLivePriceInfoV2;
    /**
     * @generated from protobuf field: data.TicketData.PaidLivePriceInfoV2 dou_price_info = 7;
     */
    douPriceInfo?: TicketData_PaidLivePriceInfoV2;
    /**
     * @generated from protobuf field: int64 sku_id = 8;
     */
    skuId: bigint;
}
/**
 * @generated from protobuf message data.OrderData
 */
export interface OrderData {
    /**
     * @generated from protobuf field: string order_id = 1;
     */
    orderId: string;
}
/**
 * @generated from protobuf message data.Appearance
 */
export interface Appearance {
    /**
     * @generated from protobuf field: data.Appearance.Bubble head_bubble = 1;
     */
    headBubble?: Appearance_Bubble;
    /**
     * @generated from protobuf field: int64 up_right_stats_display_type = 2;
     */
    upRightStatsDisplayType: bigint;
    /**
     * @generated from protobuf field: data.MoreEntrance entrance = 3;
     */
    entrance?: MoreEntrance;
    /**
     * @generated from protobuf field: repeated data.ToolbarItemConfig toolbar_list = 4;
     */
    toolbarList: ToolbarItemConfig[];
    /**
     * @generated from protobuf field: int64 preview_style = 5;
     */
    previewStyle: bigint;
    /**
     * @generated from protobuf field: data.Image cover_gauss = 6;
     */
    coverGauss?: Image;
    /**
     * @generated from protobuf field: repeated data.Appearance.ContentTag content_tags = 7;
     */
    contentTags: Appearance_ContentTag[];
    /**
     * @generated from protobuf field: data.PreviewLabel preview_label = 8;
     */
    previewLabel?: PreviewLabel;
    /**
     * @generated from protobuf field: data.Image cover_dynamic_mask = 9;
     */
    coverDynamicMask?: Image;
    /**
     * @generated from protobuf field: data.Image horizontal_background = 10;
     */
    horizontalBackground?: Image;
    /**
     * @generated from protobuf field: repeated data.Appearance.WideCover wide_cover_list = 11;
     */
    wideCoverList: Appearance_WideCover[];
    /**
     * @generated from protobuf field: data.Image blur_placeholder_img = 12;
     */
    blurPlaceholderImg?: Image;
}
/**
 * @generated from protobuf message data.Appearance.Bubble
 */
export interface Appearance_Bubble {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: repeated string roll_tips = 2;
     */
    rollTips: string[];
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int32 roll_after_ms = 4;
     */
    rollAfterMs: number;
    /**
     * @generated from protobuf field: int64 coupon_mate_id = 5;
     */
    couponMateId: bigint;
    /**
     * @generated from protobuf field: string et_type = 6;
     */
    etType: string;
    /**
     * @generated from protobuf field: string extra = 7;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.Appearance.ContentTag
 */
export interface Appearance_ContentTag {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message data.Appearance.WideCover
 */
export interface Appearance_WideCover {
    /**
     * @generated from protobuf field: data.Image cover = 1;
     */
    cover?: Image;
    /**
     * @generated from protobuf field: int64 cover_type = 2;
     */
    coverType: bigint;
}
/**
 * @generated from protobuf message data.GameCPData
 */
export interface GameCPData {
    /**
     * @generated from protobuf field: int32 is_live_a_promoted_a = 1;
     */
    isLiveAPromotedA: number;
    /**
     * @generated from protobuf field: string game_id = 2;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string game_name = 3;
     */
    gameName: string;
}
/**
 * @generated from protobuf message data.GamePlayData
 */
export interface GamePlayData {
    /**
     * @generated from protobuf field: int32 play_type = 1;
     */
    playType: number;
    /**
     * @generated from protobuf field: int64 play_id = 2;
     */
    playId: bigint;
    /**
     * @generated from protobuf field: int64 game_id = 3;
     */
    gameId: bigint;
}
/**
 * @generated from protobuf message data.RoomGameDataChannelConfig
 */
export interface RoomGameDataChannelConfig {
    /**
     * @generated from protobuf field: string fusion_tag_id = 1;
     */
    fusionTagId: string;
    /**
     * @generated from protobuf field: string game_id = 2;
     */
    gameId: string;
    /**
     * @generated from protobuf field: int64 live_stay_limit = 3;
     */
    liveStayLimit: bigint;
}
/**
 * @generated from protobuf message data.ToolBarComponentData
 */
export interface ToolBarComponentData {
    /**
     * @generated from protobuf field: int32 group_id = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: int32 component_type = 2;
     */
    componentType: number;
    /**
     * @generated from protobuf field: int32 op_type = 3;
     */
    opType: number;
    /**
     * @generated from protobuf field: string text = 4;
     */
    text: string;
    /**
     * @generated from protobuf field: string schema_url = 5;
     */
    schemaUrl: string;
    /**
     * @generated from protobuf field: data.Image icon = 6;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 show_type = 7;
     */
    showType: bigint;
    /**
     * @generated from protobuf field: int64 data_status = 8;
     */
    dataStatus: bigint;
    /**
     * @generated from protobuf field: string extra = 99;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.ToolBarData
 */
export interface ToolBarData {
    /**
     * @generated from protobuf field: repeated data.ToolBarComponentData entrance_list = 1;
     */
    entranceList: ToolBarComponentData[];
    /**
     * @generated from protobuf field: repeated data.ToolBarComponentData more_panel = 2;
     */
    morePanel: ToolBarComponentData[];
    /**
     * @generated from protobuf field: int32 max_entrance_cnt = 3;
     */
    maxEntranceCnt: number;
    /**
     * @generated from protobuf field: repeated data.ToolBarComponentData landscape_up_right = 4;
     */
    landscapeUpRight: ToolBarComponentData[];
    /**
     * @generated from protobuf field: int32 max_entrance_cnt_landscape = 6;
     */
    maxEntranceCntLandscape: number;
    /**
     * @generated from protobuf field: data.ToolbarPermutation permutation = 7;
     */
    permutation?: ToolbarPermutation;
}
/**
 * @generated from protobuf message data.LifeGrouponInfo
 */
export interface LifeGrouponInfo {
    /**
     * @generated from protobuf field: int64 permission_status = 1;
     */
    permissionStatus: bigint;
    /**
     * @generated from protobuf field: int64 agg_card_id = 2;
     */
    aggCardId: bigint;
    /**
     * @generated from protobuf field: string icon_url = 3;
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: string dynamic_url = 4;
     */
    dynamicUrl: string;
}
/**
 * @generated from protobuf message data.PreviewLabel
 */
export interface PreviewLabel {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: repeated string label_tips = 2;
     */
    labelTips: string[];
    /**
     * @generated from protobuf field: int32 label_type = 3;
     */
    labelType: number;
    /**
     * @generated from protobuf field: data.Image label_image = 4;
     */
    labelImage?: Image;
    /**
     * @generated from protobuf field: bool hit_test = 5;
     */
    hitTest: boolean;
}
/**
 * @generated from protobuf message data.HotRoomInfo
 */
export interface HotRoomInfo {
    /**
     * @generated from protobuf field: int64 BitMap = 1 [json_name = "BitMap"];
     */
    bitMap: bigint;
}
/**
 * @generated from protobuf message data.ActivityLiveRecommendConfig
 */
export interface ActivityLiveRecommendConfig {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string level = 2;
     */
    level: string;
    /**
     * @generated from protobuf field: int64 start_time = 3;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 4;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 live_type = 5;
     */
    liveType: number;
    /**
     * @generated from protobuf field: repeated int64 actor_uids = 6;
     */
    actorUids: bigint[];
    /**
     * @generated from protobuf field: data.ActivityLiveRecommendConfig.EpisodeInfo episode_info = 7;
     */
    episodeInfo?: ActivityLiveRecommendConfig_EpisodeInfo;
}
/**
 * @generated from protobuf message data.ActivityLiveRecommendConfig.EpisodeInfo
 */
export interface ActivityLiveRecommendConfig_EpisodeInfo {
    /**
     * @generated from protobuf field: int32 content_type = 1;
     */
    contentType: number;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message data.RoomChannelData
 */
export interface RoomChannelData {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated data.RoomChannelInfo channel_list = 2;
     */
    channelList: RoomChannelInfo[];
    /**
     * @generated from protobuf field: int32 support_room_channel_mode = 3;
     */
    supportRoomChannelMode: number;
    /**
     * @generated from protobuf field: int32 limit_of_num = 4;
     */
    limitOfNum: number;
    /**
     * @generated from protobuf field: bool can_create = 5;
     */
    canCreate: boolean;
    /**
     * @generated from protobuf field: data.Image background = 6;
     */
    background?: Image;
    /**
     * @generated from protobuf field: bool tab_landing = 7;
     */
    tabLanding: boolean;
    /**
     * @generated from protobuf field: bool can_link_mic = 8;
     */
    canLinkMic: boolean;
    /**
     * @generated from protobuf field: bool hide_landscape = 101;
     */
    hideLandscape: boolean;
}
/**
 * @generated from protobuf message data.PackMetaInfo
 */
export interface PackMetaInfo {
    /**
     * @generated from protobuf field: string scene = 1;
     */
    scene: string;
    /**
     * @generated from protobuf field: string env = 2;
     */
    env: string;
    /**
     * @generated from protobuf field: string dc = 3;
     */
    dc: string;
    /**
     * @generated from protobuf field: string trace_id = 4;
     */
    traceId: string;
    /**
     * @generated from protobuf field: string cluster = 5;
     */
    cluster: string;
}
/**
 * @generated from protobuf message data.LikeDisplayConfig
 */
export interface LikeDisplayConfig {
    /**
     * @generated from protobuf field: int32 show_text = 1;
     */
    showText: number;
    /**
     * @generated from protobuf field: string display_text = 2;
     */
    displayText: string;
}
/**
 * @generated from protobuf message data.MatchRoomData
 */
export interface MatchRoomData {
    /**
     * @generated from protobuf field: data.MatchDrawer drawer = 1;
     */
    drawer?: MatchDrawer;
    /**
     * @generated from protobuf field: data.ToutiaoMatchData match = 2;
     */
    match?: ToutiaoMatchData;
    /**
     * @generated from protobuf field: data.Image drawer_label = 3;
     */
    drawerLabel?: Image;
    /**
     * @generated from protobuf field: string pcu_str = 4;
     */
    pcuStr: string;
    /**
     * @generated from protobuf field: data.Image drawer_official_label = 5;
     */
    drawerOfficialLabel?: Image;
    /**
     * @generated from protobuf field: data.Image match_background = 6;
     */
    matchBackground?: Image;
    /**
     * @generated from protobuf field: data.MatchUserInfo match_user_info = 7;
     */
    matchUserInfo?: MatchUserInfo;
}
/**
 * @generated from protobuf message data.MatchUserInfo
 */
export interface MatchUserInfo {
    /**
     * @generated from protobuf field: data.TeamInfo user_team_info = 1;
     */
    userTeamInfo?: TeamInfo;
    /**
     * @generated from protobuf field: bool is_activity_account = 3;
     */
    isActivityAccount: boolean;
    /**
     * @generated from protobuf field: bool need_retry = 4;
     */
    needRetry: boolean;
}
/**
 * @generated from protobuf message data.TeamInfo
 */
export interface TeamInfo {
    /**
     * @generated from protobuf field: int64 team_id = 1;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: string team_name = 2;
     */
    teamName: string;
    /**
     * @generated from protobuf field: string schema_url = 3;
     */
    schemaUrl: string;
    /**
     * @generated from protobuf field: data.Image team_icon = 4;
     */
    teamIcon?: Image;
    /**
     * @generated from protobuf field: data.Image team_badge = 5;
     */
    teamBadge?: Image;
    /**
     * @generated from protobuf field: data.Image team_background = 6;
     */
    teamBackground?: Image;
    /**
     * @generated from protobuf field: string system_msg = 7;
     */
    systemMsg: string;
    /**
     * @generated from protobuf field: string team_id_str = 8;
     */
    teamIdStr: string;
    /**
     * @generated from protobuf field: data.Image team_avatar_box = 9;
     */
    teamAvatarBox?: Image;
}
/**
 * @generated from protobuf message data.EnterPublicAreaAnimation
 */
export interface EnterPublicAreaAnimation {
    /**
     * @generated from protobuf field: string public_area_effect_url = 1;
     */
    publicAreaEffectUrl: string;
}
/**
 * @generated from protobuf message data.GiftPanelTopperTray
 */
export interface GiftPanelTopperTray {
    /**
     * @generated from protobuf field: string panel_schema = 1;
     */
    panelSchema: string;
    /**
     * @generated from protobuf field: repeated data.GiftPanelTopperTray.PeriodText period_texts = 2;
     */
    periodTexts: GiftPanelTopperTray_PeriodText[];
    /**
     * @generated from protobuf field: int32 display_duration = 3;
     */
    displayDuration: number;
    /**
     * @generated from protobuf field: string jump_schema = 4;
     */
    jumpSchema: string;
    /**
     * @generated from protobuf field: string animation_type = 5;
     */
    animationType: string;
    /**
     * @generated from protobuf field: int32 animation_gap = 6;
     */
    animationGap: number;
    /**
     * @generated from protobuf field: int32 animation_freq = 7;
     */
    animationFreq: number;
    /**
     * @generated from protobuf field: int32 text_round_period = 8;
     */
    textRoundPeriod: number;
}
/**
 * @generated from protobuf message data.GiftPanelTopperTray.PeriodText
 */
export interface GiftPanelTopperTray_PeriodText {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 daily_show_times = 2;
     */
    dailyShowTimes: number;
    /**
     * @generated from protobuf field: int32 priority = 3;
     */
    priority: number;
    /**
     * @generated from protobuf field: int32 panel_enum = 4;
     */
    panelEnum: number;
    /**
     * @generated from protobuf field: int32 key = 5;
     */
    key: number;
}
/**
 * @generated from protobuf message data.EnterGiftAnimation
 */
export interface EnterGiftAnimation {
    /**
     * @generated from protobuf field: int32 gift_effect_id = 1;
     */
    giftEffectId: number;
    /**
     * @generated from protobuf field: int32 display_gap = 2;
     */
    displayGap: number;
    /**
     * @generated from protobuf field: int32 display_freq = 3;
     */
    displayFreq: number;
}
/**
 * @generated from protobuf message data.CircleInfo
 */
export interface CircleInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image cover_img = 3;
     */
    coverImg?: Image;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
}
/**
 * @generated from protobuf message data.EasterEggData
 */
export interface EasterEggData {
    /**
     * @generated from protobuf field: bool has_easter_egg = 1;
     */
    hasEasterEgg: boolean;
    /**
     * @generated from protobuf field: int64 stage = 2;
     */
    stage: bigint;
    /**
     * @generated from protobuf field: int64 total_stage = 3;
     */
    totalStage: bigint;
    /**
     * @generated from protobuf field: int64 effects_num = 4;
     */
    effectsNum: bigint;
    /**
     * @generated from protobuf field: int64 start_count = 5;
     */
    startCount: bigint;
    /**
     * @generated from protobuf field: int64 end_count = 6;
     */
    endCount: bigint;
    /**
     * @generated from protobuf field: int64 count = 7;
     */
    count: bigint;
    /**
     * @generated from protobuf field: string panel_url = 8;
     */
    panelUrl: string;
    /**
     * @generated from protobuf field: data.Image entrance_icon = 9;
     */
    entranceIcon?: Image;
}
/**
 * @generated from protobuf message data.EcomLiveCard
 */
export interface EcomLiveCard {
    /**
     * @generated from protobuf field: data.EcomProduct product = 1;
     */
    product?: EcomProduct;
    /**
     * @generated from protobuf field: data.EcomIcon icon = 2;
     */
    icon?: EcomIcon;
    /**
     * @generated from protobuf field: data.EcomCampaign campaign = 3;
     */
    campaign?: EcomCampaign;
}
/**
 * @generated from protobuf message data.EcomProduct
 */
export interface EcomProduct {
    /**
     * @generated from protobuf field: int64 promotion_id = 1;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: int64 product_id = 2;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string cover_image = 4;
     */
    coverImage: string;
    /**
     * @generated from protobuf field: data.EcomPrice price = 5;
     */
    price?: EcomPrice;
    /**
     * @generated from protobuf field: int64 regular_price = 6;
     */
    regularPrice: bigint;
    /**
     * @generated from protobuf field: int64 deposit_price = 7;
     */
    depositPrice: bigint;
}
/**
 * @generated from protobuf message data.EcomPrice
 */
export interface EcomPrice {
    /**
     * @generated from protobuf field: string prefix = 1;
     */
    prefix: string;
    /**
     * @generated from protobuf field: string suffix = 2;
     */
    suffix: string;
    /**
     * @generated from protobuf field: int64 by_cent = 3;
     */
    byCent: bigint;
    /**
     * @generated from protobuf field: string format_price = 4;
     */
    formatPrice: string;
}
/**
 * @generated from protobuf message data.EcomIcon
 */
export interface EcomIcon {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message data.EcomCampaign
 */
export interface EcomCampaign {
    /**
     * @generated from protobuf field: int64 remaining_seconds = 1;
     */
    remainingSeconds: bigint;
    /**
     * @generated from protobuf field: data.EcomAuction auction = 2;
     */
    auction?: EcomAuction;
    /**
     * @generated from protobuf field: int64 type = 3;
     */
    type: bigint;
}
/**
 * @generated from protobuf message data.EcomAuction
 */
export interface EcomAuction {
    /**
     * @generated from protobuf field: int64 price = 1;
     */
    price: bigint;
    /**
     * @generated from protobuf field: string price_label = 2;
     */
    priceLabel: string;
    /**
     * @generated from protobuf field: string button_label = 3;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: data.EcomBidder user = 4;
     */
    user?: EcomBidder;
    /**
     * @generated from protobuf field: int64 status = 5;
     */
    status: bigint;
}
/**
 * @generated from protobuf message data.EcomBidder
 */
export interface EcomBidder {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: data.EcomAvatar avatar = 2;
     */
    avatar?: EcomAvatar;
}
/**
 * @generated from protobuf message data.EcomAvatar
 */
export interface EcomAvatar {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: int64 width = 2;
     */
    width: bigint;
    /**
     * @generated from protobuf field: int64 height = 3;
     */
    height: bigint;
}
/**
 * @generated from protobuf message data.EcomPop
 */
export interface EcomPop {
    /**
     * @generated from protobuf field: int64 product_id = 1;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int64 promotion_id = 2;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string cover = 4;
     */
    cover: string;
    /**
     * @generated from protobuf field: data.EcomPrice min_price = 5;
     */
    minPrice?: EcomPrice;
    /**
     * @generated from protobuf field: string selling_point = 6;
     */
    sellingPoint: string;
    /**
     * @generated from protobuf field: string jumanji_json = 7;
     */
    jumanjiJson: string;
}
/**
 * @generated from protobuf message data.Coupon
 */
export interface Coupon {
    /**
     * @generated from protobuf field: string icon = 1;
     */
    icon: string;
    /**
     * @generated from protobuf field: string start_time = 2;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string expire_time = 3;
     */
    expireTime: string;
    /**
     * @generated from protobuf field: string coupon_name = 4;
     */
    couponName: string;
    /**
     * @generated from protobuf field: string url = 5;
     */
    url: string;
    /**
     * @generated from protobuf field: string coupon_string = 6;
     */
    couponString: string;
    /**
     * @generated from protobuf field: int64 countdown = 7;
     */
    countdown: bigint;
    /**
     * @generated from protobuf field: int64 show_type = 8;
     */
    showType: bigint;
    /**
     * @generated from protobuf field: string coupon_meta_id = 9;
     */
    couponMetaId: string;
    /**
     * @generated from protobuf field: string coupon_type = 10;
     */
    couponType: string;
}
/**
 * @generated from protobuf message data.Redpack
 */
export interface Redpack {
    /**
     * @generated from protobuf field: int64 redpack_type = 1;
     */
    redpackType: bigint;
    /**
     * @generated from protobuf field: int64 redpack_activity_id = 2;
     */
    redpackActivityId: bigint;
    /**
     * @generated from protobuf field: string redpack_activity_display_text = 3;
     */
    redpackActivityDisplayText: string;
    /**
     * @generated from protobuf field: int64 start_apply_time = 4;
     */
    startApplyTime: bigint;
    /**
     * @generated from protobuf field: int64 end_apply_time = 5;
     */
    endApplyTime: bigint;
    /**
     * @generated from protobuf field: int64 preheat_time = 6;
     */
    preheatTime: bigint;
    /**
     * @generated from protobuf field: int64 server_time = 7;
     */
    serverTime: bigint;
    /**
     * @generated from protobuf field: int64 has_applied = 8;
     */
    hasApplied: bigint;
    /**
     * @generated from protobuf field: string icon_url = 9;
     */
    iconUrl: string;
}
/**
 * @generated from protobuf message data.EcomGoodsCard
 */
export interface EcomGoodsCard {
    /**
     * @generated from protobuf field: int64 product_id = 1;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string cover = 3;
     */
    cover: string;
    /**
     * @generated from protobuf field: data.EcomPrice min_price = 4;
     */
    minPrice?: EcomPrice;
    /**
     * @generated from protobuf field: data.Coupon coupon = 5;
     */
    coupon?: Coupon;
    /**
     * @generated from protobuf field: int64 promotion_id = 6;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: int64 jump_destination = 7;
     */
    jumpDestination: bigint;
    /**
     * @generated from protobuf field: int64 card_type = 8;
     */
    cardType: bigint;
    /**
     * @generated from protobuf field: data.Redpack redpack = 9;
     */
    redpack?: Redpack;
}
/**
 * @generated from protobuf message data.RedsShowInfo
 */
export interface RedsShowInfo {
    /**
     * @generated from protobuf field: int32 data_type = 1;
     */
    dataType: number;
    /**
     * @generated from protobuf field: string full_text = 2;
     */
    fullText: string;
}
/**
 * @generated from protobuf message data.SwitchExtraBase
 */
export interface SwitchExtraBase {
    /**
     * @generated from protobuf field: string schema_for_check = 1;
     */
    schemaForCheck: string;
}
/**
 * @generated from protobuf message data.SwitchExtraForOpen
 */
export interface SwitchExtraForOpen {
    /**
     * @generated from protobuf field: string schema_for_open = 1;
     */
    schemaForOpen: string;
}
/**
 * @generated from protobuf message data.GameInvite
 */
export interface GameInvite {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 kind = 2;
     */
    kind: bigint;
    /**
     * @generated from protobuf field: int64 create_time = 3;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int64 now_time = 4;
     */
    nowTime: bigint;
    /**
     * @generated from protobuf field: int64 expire_time = 5;
     */
    expireTime: bigint;
    /**
     * @generated from protobuf field: int64 status = 6;
     */
    status: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 7;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: string id_str = 8;
     */
    idStr: string;
}
/**
 * @generated from protobuf message data.InvitationSwitch
 */
export interface InvitationSwitch {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int32 game_kind = 2;
     */
    gameKind: number;
    /**
     * @generated from protobuf field: int64 game_id = 3;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 play_kind = 4;
     */
    playKind: bigint;
    /**
     * @generated from protobuf field: int64 status = 5;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string message = 6;
     */
    message: string;
    /**
     * @generated from protobuf field: data.SwitchExtraBase extra_base = 7;
     */
    extraBase?: SwitchExtraBase;
    /**
     * @generated from protobuf field: data.SwitchExtraForOpen extra_for_open = 8;
     */
    extraForOpen?: SwitchExtraForOpen;
    /**
     * @generated from protobuf field: string id_str = 9;
     */
    idStr: string;
}
/**
 * @generated from protobuf message data.OfficialRoomInfo
 */
export interface OfficialRoomInfo {
    /**
     * @generated from protobuf field: bool is_show_more_anchor = 1;
     */
    isShowMoreAnchor: boolean;
    /**
     * @generated from protobuf field: bool is_use_server_subtitle = 2;
     */
    isUseServerSubtitle: boolean;
    /**
     * @generated from protobuf field: string server_subtitle = 3;
     */
    serverSubtitle: string;
}
/**
 * @generated from protobuf message data.VsEpisodeHighLight
 */
export interface VsEpisodeHighLight {
    /**
     * @generated from protobuf field: int64 location = 1;
     */
    location: bigint;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: data.Image image = 3;
     */
    image?: Image;
}
/**
 * @generated from protobuf message data.EpisodePremierePlay
 */
export interface EpisodePremierePlay {
    /**
     * @generated from protobuf field: repeated data.VsEpisodeHighLight highlights = 1;
     */
    highlights: VsEpisodeHighLight[];
    /**
     * @generated from protobuf field: int32 play_type = 2;
     */
    playType: number;
    /**
     * @generated from protobuf field: int64 start_time = 3;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: string play_text = 4;
     */
    playText: string;
    /**
     * @generated from protobuf field: int64 text_duration = 5;
     */
    textDuration: bigint;
}
/**
 * @generated from protobuf message data.VSWatermark
 */
export interface VSWatermark {
    /**
     * @generated from protobuf field: int64 position = 1;
     */
    position: bigint;
    /**
     * @generated from protobuf field: int64 landscape_dis = 2;
     */
    landscapeDis: bigint;
    /**
     * @generated from protobuf field: int64 vertical_dis = 3;
     */
    verticalDis: bigint;
    /**
     * @generated from protobuf field: repeated data.VSWatermarkIcon watermark_icon = 4;
     */
    watermarkIcon: VSWatermarkIcon[];
}
/**
 * @generated from protobuf message data.VSWatermarkIcon
 */
export interface VSWatermarkIcon {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 icon_width = 2;
     */
    iconWidth: bigint;
    /**
     * @generated from protobuf field: int64 icon_type = 3;
     */
    iconType: bigint;
    /**
     * @generated from protobuf field: int64 landscape_dis = 4;
     */
    landscapeDis: bigint;
    /**
     * @generated from protobuf field: int64 vertical_dis = 5;
     */
    verticalDis: bigint;
}
/**
 * @generated from protobuf message data.VSBar
 */
export interface VSBar {
    /**
     * @generated from protobuf field: data.VSItemBar item_comment = 1;
     */
    itemComment?: VSItemBar;
    /**
     * @generated from protobuf field: data.VSItemBar item_bar = 2;
     */
    itemBar?: VSItemBar;
}
/**
 * @generated from protobuf message data.VSItemComment
 */
export interface VSItemComment {
    /**
     * @generated from protobuf field: data.Image item_comment_icon_dark = 1;
     */
    itemCommentIconDark?: Image;
    /**
     * @generated from protobuf field: data.Image item_comment_icon_light = 2;
     */
    itemCommentIconLight?: Image;
}
/**
 * @generated from protobuf message data.VSItemBar
 */
export interface VSItemBar {
    /**
     * @generated from protobuf field: data.Image icon_dark = 1;
     */
    iconDark?: Image;
    /**
     * @generated from protobuf field: data.Image icon_light = 2;
     */
    iconLight?: Image;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string seperator = 4;
     */
    seperator: string;
    /**
     * @generated from protobuf field: string detail = 5;
     */
    detail: string;
    /**
     * @generated from protobuf field: int64 watch_info_pv = 6;
     */
    watchInfoPv: bigint;
    /**
     * @generated from protobuf field: string watch_info_heat = 7;
     */
    watchInfoHeat: string;
    /**
     * @generated from protobuf field: int64 collection_id = 8;
     */
    collectionId: bigint;
    /**
     * @generated from protobuf field: int32 tab_id = 9;
     */
    tabId: number;
    /**
     * @generated from protobuf field: string content_type = 10;
     */
    contentType: string;
}
/**
 * @generated from protobuf message data.EpisodePreviewImage
 */
export interface EpisodePreviewImage {
    /**
     * @generated from protobuf field: data.Image preview_uri_up = 1;
     */
    previewUriUp?: Image;
    /**
     * @generated from protobuf field: data.Image preview_uri_down = 2;
     */
    previewUriDown?: Image;
    /**
     * @generated from protobuf field: int32 preview_type = 3;
     */
    previewType: number;
    /**
     * @generated from protobuf field: string preview_word_up = 4;
     */
    previewWordUp: string;
    /**
     * @generated from protobuf field: string preview_word_down = 5;
     */
    previewWordDown: string;
}
/**
 * @generated from protobuf message data.VSGiftPannel
 */
export interface VSGiftPannel {
    /**
     * @generated from protobuf field: repeated string background_colors = 1;
     */
    backgroundColors: string[];
    /**
     * @generated from protobuf field: data.Image background = 2;
     */
    background?: Image;
    /**
     * @generated from protobuf field: data.Image selected = 3;
     */
    selected?: Image;
    /**
     * @generated from protobuf field: data.Image top_title = 4;
     */
    topTitle?: Image;
    /**
     * @generated from protobuf field: data.Image background_bottom = 5;
     */
    backgroundBottom?: Image;
    /**
     * @generated from protobuf field: data.Image background_top = 6;
     */
    backgroundTop?: Image;
}
/**
 * @generated from protobuf message data.EpisodePreviewBottom
 */
export interface EpisodePreviewBottom {
    /**
     * @generated from protobuf field: string watch_period_str = 1;
     */
    watchPeriodStr: string;
    /**
     * @generated from protobuf field: string latest_period_str = 2;
     */
    latestPeriodStr: string;
}
/**
 * @generated from protobuf message data.VSPannelIcon
 */
export interface VSPannelIcon {
    /**
     * @generated from protobuf field: data.Image sp_landscape_icon = 1;
     */
    spLandscapeIcon?: Image;
    /**
     * @generated from protobuf field: data.Image sp_vertical_icon = 2;
     */
    spVerticalIcon?: Image;
    /**
     * @generated from protobuf field: data.Image landscape_vertical_switch_icon = 3;
     */
    landscapeVerticalSwitchIcon?: Image;
    /**
     * @generated from protobuf field: data.Image lock_screen_icon = 4;
     */
    lockScreenIcon?: Image;
    /**
     * @generated from protobuf field: data.Image landscape_more_icon = 9;
     */
    landscapeMoreIcon?: Image;
    /**
     * @generated from protobuf field: data.Image vertical_more_icon = 10;
     */
    verticalMoreIcon?: Image;
    /**
     * @generated from protobuf field: data.Image landscape_comment_icon = 11;
     */
    landscapeCommentIcon?: Image;
    /**
     * @generated from protobuf field: data.Image vertical_comment_icon = 12;
     */
    verticalCommentIcon?: Image;
    /**
     * @generated from protobuf field: data.Image vertical_landscape_switch_icon = 13;
     */
    verticalLandscapeSwitchIcon?: Image;
    /**
     * @generated from protobuf field: data.Image vertical_lock_screen_icon = 14;
     */
    verticalLockScreenIcon?: Image;
}
/**
 * @generated from protobuf message data.MultiCameraBasicInfo
 */
export interface MultiCameraBasicInfo {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string icon_background_color = 2;
     */
    iconBackgroundColor: string;
    /**
     * @generated from protobuf field: string panel_background_color = 3;
     */
    panelBackgroundColor: string;
    /**
     * @generated from protobuf field: data.Image icon_pad = 4;
     */
    iconPad?: Image;
    /**
     * @generated from protobuf field: bool ban_xgs = 5;
     */
    banXgs: boolean;
    /**
     * @generated from protobuf field: bool support_vs_core = 6;
     */
    supportVsCore: boolean;
    /**
     * @generated from protobuf field: string name = 7;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 default_display_duration = 8;
     */
    defaultDisplayDuration: number;
}
/**
 * @generated from protobuf message data.CollectionItem
 */
export interface CollectionItem {
    /**
     * @generated from protobuf field: string collection_id = 1;
     */
    collectionId: string;
    /**
     * @generated from protobuf field: int32 collection_type = 2;
     */
    collectionType: number;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: data.Image cover_img = 4;
     */
    coverImg?: Image;
    /**
     * @generated from protobuf field: string original_vid = 5;
     */
    originalVid: string;
    /**
     * @generated from protobuf field: string video_duration = 6;
     */
    videoDuration: string;
    /**
     * @generated from protobuf field: string collection_timing = 7;
     */
    collectionTiming: string;
    /**
     * @generated from protobuf field: string tmpl_vid = 8;
     */
    tmplVid: string;
    /**
     * @generated from protobuf field: repeated int32 reflow_tag_list = 10;
     */
    reflowTagList: number[];
    /**
     * @generated from protobuf field: string room_id = 11;
     */
    roomId: string;
    /**
     * @generated from protobuf field: int32 collection_source = 12;
     */
    collectionSource: number;
    /**
     * @generated from protobuf field: string original_vid_url = 13;
     */
    originalVidUrl: string;
    /**
     * @generated from protobuf field: int32 collection_tag = 14;
     */
    collectionTag: number;
    /**
     * @generated from protobuf field: string episode_id = 15;
     */
    episodeId: string;
    /**
     * @generated from protobuf field: string share_info = 16;
     */
    shareInfo: string;
    /**
     * @generated from protobuf field: int64 create_time = 17;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int32 status = 18;
     */
    status: number;
    /**
     * @generated from protobuf field: string ug_share_info = 19;
     */
    ugShareInfo: string;
    /**
     * @generated from protobuf field: string degrade_vid_url = 20;
     */
    degradeVidUrl: string;
    /**
     * @generated from protobuf field: int64 event_time = 21;
     */
    eventTime: bigint;
}
/**
 * @generated from protobuf message data.SharePosterInfo
 */
export interface SharePosterInfo {
    /**
     * @generated from protobuf field: data.SharePosterInfo.PosterData data = 1;
     */
    data?: SharePosterInfo_PosterData;
}
/**
 * @generated from protobuf message data.SharePosterInfo.PosterData
 */
export interface SharePosterInfo_PosterData {
    /**
     * @generated from protobuf field: repeated data.Image poster = 1;
     */
    poster: Image[];
    /**
     * @generated from protobuf field: repeated data.Image decorator = 2;
     */
    decorator: Image[];
}
/**
 * @generated from protobuf message data.BusinessConfigure
 */
export interface BusinessConfigure {
    /**
     * @generated from protobuf field: int64 BusinessID = 1 [json_name = "BusinessID"];
     */
    businessID: bigint;
    /**
     * @generated from protobuf field: int64 BusType = 2 [json_name = "BusType"];
     */
    busType: bigint;
    /**
     * @generated from protobuf field: int32 DelaySecond = 3 [json_name = "DelaySecond"];
     */
    delaySecond: number;
    /**
     * @generated from protobuf field: int64 PreciseTime = 4 [json_name = "PreciseTime"];
     */
    preciseTime: bigint;
    /**
     * @generated from protobuf field: int32 DisplaySecond = 5 [json_name = "DisplaySecond"];
     */
    displaySecond: number;
    /**
     * @generated from protobuf field: data.ResourceConfigure ResConfig = 6 [json_name = "ResConfig"];
     */
    resConfig?: ResourceConfigure;
    /**
     * @generated from protobuf field: int64 DelType = 7 [json_name = "DelType"];
     */
    delType: bigint;
}
/**
 * @generated from protobuf message data.ResourceConfigure
 */
export interface ResourceConfigure {
    /**
     * @generated from protobuf field: int64 ResourceID = 1 [json_name = "ResourceID"];
     */
    resourceID: bigint;
    /**
     * @generated from protobuf field: data.BarrageConfigure BarrageConf = 2 [json_name = "BarrageConf"];
     */
    barrageConf?: BarrageConfigure;
    /**
     * @generated from protobuf field: data.ScreenBarConfigure ScreenBarConf = 3 [json_name = "ScreenBarConf"];
     */
    screenBarConf?: ScreenBarConfigure;
}
/**
 * @generated from protobuf message data.BarrageConfigure
 */
export interface BarrageConfigure {
    /**
     * @generated from protobuf field: data.Image Logo = 1 [json_name = "Logo"];
     */
    logo?: Image;
    /**
     * @generated from protobuf field: string Text = 2 [json_name = "Text"];
     */
    text: string;
    /**
     * @generated from protobuf field: string AtomsBGColor = 3 [json_name = "AtomsBGColor"];
     */
    atomsBGColor: string;
    /**
     * @generated from protobuf field: string AtomsFrame = 4 [json_name = "AtomsFrame"];
     */
    atomsFrame: string;
    /**
     * @generated from protobuf field: string AtomsText = 5 [json_name = "AtomsText"];
     */
    atomsText: string;
    /**
     * @generated from protobuf field: data.Image Image = 6 [json_name = "Image"];
     */
    image?: Image;
}
/**
 * @generated from protobuf message data.ScreenBarConfigure
 */
export interface ScreenBarConfigure {
    /**
     * @generated from protobuf field: data.Image Image = 1 [json_name = "Image"];
     */
    image?: Image;
    /**
     * @generated from protobuf field: int32 IsDynamicImg = 2 [json_name = "IsDynamicImg"];
     */
    isDynamicImg: number;
    /**
     * @generated from protobuf field: string schema = 3;
     */
    schema: string;
    /**
     * @generated from protobuf field: string jump_prompt = 4;
     */
    jumpPrompt: string;
}
/**
 * @generated from protobuf message data.MultiTab
 */
export interface MultiTab {
    /**
     * @generated from protobuf field: string tab_title_color = 1;
     */
    tabTitleColor: string;
    /**
     * @generated from protobuf field: repeated data.MultiTab.TabItem tabs = 2;
     */
    tabs: MultiTab_TabItem[];
}
/**
 * @generated from protobuf message data.MultiTab.TabItem
 */
export interface MultiTab_TabItem {
    /**
     * @generated from protobuf field: int64 tab_type = 1;
     */
    tabType: bigint;
    /**
     * @generated from protobuf field: string tab_name = 2;
     */
    tabName: string;
    /**
     * @generated from protobuf field: string jump_link = 3;
     */
    jumpLink: string;
    /**
     * @generated from protobuf field: int64 tab_id = 4;
     */
    tabId: bigint;
    /**
     * @generated from protobuf field: int32 tab_show_type = 5;
     */
    tabShowType: number;
    /**
     * @generated from protobuf field: repeated int64 hide_camera_ids = 6;
     */
    hideCameraIds: bigint[];
}
/**
 * @generated from protobuf message data.ToolbarBizSkin
 */
export interface ToolbarBizSkin {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
}
/**
 * @generated from protobuf message data.ToolbarPermutation
 */
export interface ToolbarPermutation {
    /**
     * @generated from protobuf field: data.ToolbarPermutation.Rule vertical = 1;
     */
    vertical?: ToolbarPermutation_Rule;
    /**
     * @generated from protobuf field: data.ToolbarPermutation.Rule landscape = 2;
     */
    landscape?: ToolbarPermutation_Rule;
    /**
     * @generated from protobuf field: data.ToolbarPermutation.Rule general = 3;
     */
    general?: ToolbarPermutation_Rule;
}
/**
 * @generated from protobuf message data.ToolbarPermutation.Rule
 */
export interface ToolbarPermutation_Rule {
    /**
     * @generated from protobuf field: repeated int32 GroupPriority = 1 [json_name = "GroupPriority"];
     */
    groupPriority: number[];
    /**
     * @generated from protobuf field: repeated int32 ComponentSequence = 2 [json_name = "ComponentSequence"];
     */
    componentSequence: number[];
}
/**
 * @generated from protobuf message data.RoomChannelInfo
 */
export interface RoomChannelInfo {
    /**
     * @generated from protobuf field: int64 channel_id = 1;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
    /**
     * @generated from protobuf field: bool is_owner = 3;
     */
    isOwner: boolean;
    /**
     * @generated from protobuf field: int64 member_count = 4;
     */
    memberCount: bigint;
    /**
     * @generated from protobuf field: repeated data.User top_user = 5;
     */
    topUser: User[];
    /**
     * @generated from protobuf field: string channel_name = 6;
     */
    channelName: string;
    /**
     * @generated from protobuf field: int32 room_channel_mode = 7;
     */
    roomChannelMode: number;
    /**
     * @generated from protobuf field: data.User need_approval_user = 8;
     */
    needApprovalUser?: User;
    /**
     * @generated from protobuf field: data.User owner = 9;
     */
    owner?: User;
    /**
     * @generated from protobuf field: int64 max_member_count = 10;
     */
    maxMemberCount: bigint;
    /**
     * @generated from protobuf field: data.RtcExtInfo rtc_ext_info = 200;
     */
    rtcExtInfo?: RtcExtInfo;
}
/**
 * @generated from protobuf message data.RtcExtInfo
 */
export interface RtcExtInfo {
    /**
     * @generated from protobuf field: string link_mic_id_str = 1;
     */
    linkMicIdStr: string;
    /**
     * @generated from protobuf field: string rtc_ext_info = 2;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_exr_info = 3;
     */
    liveCoreExrInfo: string;
    /**
     * @generated from protobuf field: string rtc_strategy = 4;
     */
    rtcStrategy: string;
    /**
     * @generated from protobuf field: string public_stream_id = 5;
     */
    publicStreamId: string;
}
/**
 * @generated from protobuf message data.PlayByPlayItemInfo
 */
export interface PlayByPlayItemInfo {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: int64 player_id = 2;
     */
    playerId: bigint;
    /**
     * @generated from protobuf field: int64 ref_player_id = 3;
     */
    refPlayerId: bigint;
    /**
     * @generated from protobuf field: int32 incident_type = 4;
     */
    incidentType: number;
    /**
     * @generated from protobuf field: double elapsed = 5;
     */
    elapsed: number;
    /**
     * @generated from protobuf field: double elapsed_plus = 6;
     */
    elapsedPlus: number;
    /**
     * @generated from protobuf field: string player_name = 7;
     */
    playerName: string;
    /**
     * @generated from protobuf field: string ref_player_name = 8;
     */
    refPlayerName: string;
    /**
     * @generated from protobuf field: string player_id_str = 9;
     */
    playerIdStr: string;
    /**
     * @generated from protobuf field: string ref_player_id_str = 10;
     */
    refPlayerIdStr: string;
    /**
     * @generated from protobuf field: int64 start_time_pts = 11;
     */
    startTimePts: bigint;
    /**
     * @generated from protobuf field: int64 end_time_pts = 12;
     */
    endTimePts: bigint;
    /**
     * @generated from protobuf field: int64 start_time_sei = 13;
     */
    startTimeSei: bigint;
    /**
     * @generated from protobuf field: int64 end_time_sei = 14;
     */
    endTimeSei: bigint;
}
/**
 * @generated from protobuf message data.PlayerInfo
 */
export interface PlayerInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 shirt = 3;
     */
    shirt: number;
    /**
     * @generated from protobuf field: string position = 4;
     */
    position: string;
    /**
     * @generated from protobuf field: int32 lineup_type = 5;
     */
    lineupType: number;
    /**
     * @generated from protobuf field: data.Image portrait = 6;
     */
    portrait?: Image;
    /**
     * @generated from protobuf field: data.PlayByPlayItemInfo last_event = 7;
     */
    lastEvent?: PlayByPlayItemInfo;
    /**
     * @generated from protobuf field: double x_axis = 8;
     */
    xAxis: number;
    /**
     * @generated from protobuf field: double y_axis = 9;
     */
    yAxis: number;
    /**
     * @generated from protobuf field: int32 position_num = 10;
     */
    positionNum: number;
    /**
     * @generated from protobuf field: double playing_time = 11;
     */
    playingTime: number;
    /**
     * @generated from protobuf field: data.PlayerStats player_stats = 12;
     */
    playerStats?: PlayerStats;
    /**
     * @generated from protobuf field: string player_id_str = 13;
     */
    playerIdStr: string;
    /**
     * @generated from protobuf field: data.PlayByPlayItemInfo last_up_event = 14;
     */
    lastUpEvent?: PlayByPlayItemInfo;
    /**
     * @generated from protobuf field: repeated data.PlayByPlayItemInfo event_list = 15;
     */
    eventList: PlayByPlayItemInfo[];
    /**
     * @generated from protobuf field: int32 age = 16;
     */
    age: number;
    /**
     * @generated from protobuf field: double worth = 17;
     */
    worth: number;
    /**
     * @generated from protobuf field: string club_name = 18;
     */
    clubName: string;
    /**
     * @generated from protobuf field: bool superstar_flag = 19;
     */
    superstarFlag: boolean;
    /**
     * @generated from protobuf field: data.Image superstar_img = 20;
     */
    superstarImg?: Image;
    /**
     * @generated from protobuf field: string superstar_name = 21;
     */
    superstarName: string;
    /**
     * @generated from protobuf field: string superstar_desc = 22;
     */
    superstarDesc: string;
}
/**
 * @generated from protobuf message data.GoalStageDetail
 */
export interface GoalStageDetail {
    /**
     * @generated from protobuf field: string first_half_goal = 1;
     */
    firstHalfGoal: string;
    /**
     * @generated from protobuf field: string second_half_goal = 2;
     */
    secondHalfGoal: string;
    /**
     * @generated from protobuf field: string overtime = 3;
     */
    overtime: string;
    /**
     * @generated from protobuf field: string shots = 4;
     */
    shots: string;
    /**
     * @generated from protobuf field: string total = 5;
     */
    total: string;
}
/**
 * @generated from protobuf message data.Against
 */
export interface Against {
    /**
     * @generated from protobuf field: string left_name = 1;
     */
    leftName: string;
    /**
     * @generated from protobuf field: data.Image left_logo = 2;
     */
    leftLogo?: Image;
    /**
     * @generated from protobuf field: string left_goal = 3;
     */
    leftGoal: string;
    /**
     * @generated from protobuf field: repeated data.PlayerInfo left_players = 4;
     */
    leftPlayers: PlayerInfo[];
    /**
     * @generated from protobuf field: data.GoalStageDetail left_goal_stage_detail = 5;
     */
    leftGoalStageDetail?: GoalStageDetail;
    /**
     * @generated from protobuf field: string right_name = 6;
     */
    rightName: string;
    /**
     * @generated from protobuf field: data.Image right_logo = 7;
     */
    rightLogo?: Image;
    /**
     * @generated from protobuf field: string right_goal = 8;
     */
    rightGoal: string;
    /**
     * @generated from protobuf field: repeated data.PlayerInfo right_players = 9;
     */
    rightPlayers: PlayerInfo[];
    /**
     * @generated from protobuf field: data.GoalStageDetail right_goal_stage_detail = 10;
     */
    rightGoalStageDetail?: GoalStageDetail;
    /**
     * @generated from protobuf field: int64 timestamp = 11;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: int64 version = 12;
     */
    version: bigint;
    /**
     * @generated from protobuf field: int64 left_team_id = 13;
     */
    leftTeamId: bigint;
    /**
     * @generated from protobuf field: int64 right_team_id = 14;
     */
    rightTeamId: bigint;
    /**
     * @generated from protobuf field: int64 diff_sei2abs_second = 15 [json_name = "diffSei2absSecond"];
     */
    diffSei2AbsSecond: bigint;
    /**
     * @generated from protobuf field: int32 final_goal_stage = 16;
     */
    finalGoalStage: number;
    /**
     * @generated from protobuf field: int32 current_goal_stage = 17;
     */
    currentGoalStage: number;
    /**
     * @generated from protobuf field: int32 left_score_addition = 18;
     */
    leftScoreAddition: number;
    /**
     * @generated from protobuf field: int32 right_score_addition = 19;
     */
    rightScoreAddition: number;
    /**
     * @generated from protobuf field: int64 left_goal_int = 20;
     */
    leftGoalInt: bigint;
    /**
     * @generated from protobuf field: int64 right_goal_int = 21;
     */
    rightGoalInt: bigint;
    /**
     * @generated from protobuf field: data.BasketBallGoalStageDetail left_score_detail = 22;
     */
    leftScoreDetail?: BasketBallGoalStageDetail;
    /**
     * @generated from protobuf field: data.BasketBallGoalStageDetail right_score_detail = 23;
     */
    rightScoreDetail?: BasketBallGoalStageDetail;
    /**
     * @generated from protobuf field: data.BasketballStage basketball_stage = 24;
     */
    basketballStage?: BasketballStage;
    /**
     * @generated from protobuf field: data.ESportsStage esport_stage = 25;
     */
    esportStage?: ESportsStage;
}
/**
 * @generated from protobuf message data.ToutiaoMatchData
 */
export interface ToutiaoMatchData {
    /**
     * @generated from protobuf field: int64 match_id = 1;
     */
    matchId: bigint;
    /**
     * @generated from protobuf field: string match_title = 2;
     */
    matchTitle: string;
    /**
     * @generated from protobuf field: data.Against against = 3;
     */
    against?: Against;
    /**
     * @generated from protobuf field: string started_time = 4;
     */
    startedTime: string;
    /**
     * @generated from protobuf field: string city = 5;
     */
    city: string;
    /**
     * @generated from protobuf field: string venue_name = 6;
     */
    venueName: string;
    /**
     * @generated from protobuf field: string referee = 7;
     */
    referee: string;
    /**
     * @generated from protobuf field: data.TeamStats team_stats = 8;
     */
    teamStats?: TeamStats;
    /**
     * @generated from protobuf field: repeated data.PlayerStats player_stats = 9;
     */
    playerStats: PlayerStats[];
    /**
     * @generated from protobuf field: string match_group = 10;
     */
    matchGroup: string;
    /**
     * @generated from protobuf field: string match_round = 11;
     */
    matchRound: string;
    /**
     * @generated from protobuf field: string match_phase_name = 12;
     */
    matchPhaseName: string;
    /**
     * @generated from protobuf field: bool can_subscribe = 13;
     */
    canSubscribe: boolean;
    /**
     * @generated from protobuf field: int32 display_status = 14;
     */
    displayStatus: number;
    /**
     * @generated from protobuf field: string bjt_format = 15;
     */
    bjtFormat: string;
    /**
     * @generated from protobuf field: string local_time_format = 16;
     */
    localTimeFormat: string;
    /**
     * @generated from protobuf field: int32 live_status = 17;
     */
    liveStatus: number;
    /**
     * @generated from protobuf field: int32 match_status = 18;
     */
    matchStatus: number;
    /**
     * @generated from protobuf field: string match_id_str = 19;
     */
    matchIdStr: string;
    /**
     * @generated from protobuf field: int64 started_time_unix = 20;
     */
    startedTimeUnix: bigint;
    /**
     * @generated from protobuf field: int32 left_score_addition = 21;
     */
    leftScoreAddition: number;
    /**
     * @generated from protobuf field: int32 right_score_addition = 22;
     */
    rightScoreAddition: number;
    /**
     * @generated from protobuf field: string duration = 23;
     */
    duration: string;
    /**
     * @generated from protobuf field: repeated int64 event_ids = 24;
     */
    eventIds: bigint[];
    /**
     * @generated from protobuf field: int64 winner_id = 25;
     */
    winnerId: bigint;
    /**
     * @generated from protobuf field: string winner_id_str = 26;
     */
    winnerIdStr: string;
    /**
     * @generated from protobuf field: data.Image winner_icon = 27;
     */
    winnerIcon?: Image;
    /**
     * @generated from protobuf field: string event_name = 28;
     */
    eventName: string;
    /**
     * @generated from protobuf field: string bo_num = 29;
     */
    boNum: string;
}
/**
 * @generated from protobuf message data.TeamStats
 */
export interface TeamStats {
    /**
     * @generated from protobuf field: int64 team_id = 1;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: double possession = 2;
     */
    possession: number;
    /**
     * @generated from protobuf field: double shot_on = 3;
     */
    shotOn: number;
    /**
     * @generated from protobuf field: double shot_off = 4;
     */
    shotOff: number;
    /**
     * @generated from protobuf field: double free_kick = 5;
     */
    freeKick: number;
    /**
     * @generated from protobuf field: double corner = 6;
     */
    corner: number;
    /**
     * @generated from protobuf field: double counter = 7;
     */
    counter: number;
    /**
     * @generated from protobuf field: double saves = 8;
     */
    saves: number;
    /**
     * @generated from protobuf field: double offside = 9;
     */
    offside: number;
    /**
     * @generated from protobuf field: double foul_commit = 10;
     */
    foulCommit: number;
    /**
     * @generated from protobuf field: double yellow_cards = 11;
     */
    yellowCards: number;
    /**
     * @generated from protobuf field: double redCards = 12;
     */
    redCards: number;
    /**
     * @generated from protobuf field: double pass = 13;
     */
    pass: number;
    /**
     * @generated from protobuf field: double key_pass = 14;
     */
    keyPass: number;
    /**
     * @generated from protobuf field: double passes_completed = 15;
     */
    passesCompleted: number;
    /**
     * @generated from protobuf field: double steal = 16;
     */
    steal: number;
    /**
     * @generated from protobuf field: double intercept = 17;
     */
    intercept: number;
    /**
     * @generated from protobuf field: double shots = 18;
     */
    shots: number;
    /**
     * @generated from protobuf field: double possession_five_min = 19;
     */
    possessionFiveMin: number;
}
/**
 * @generated from protobuf message data.PlayerStats
 */
export interface PlayerStats {
    /**
     * @generated from protobuf field: int64 player_id = 1;
     */
    playerId: bigint;
    /**
     * @generated from protobuf field: int64 team_id = 2;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: double minutes_played = 3;
     */
    minutesPlayed: number;
    /**
     * @generated from protobuf field: double goals = 4;
     */
    goals: number;
    /**
     * @generated from protobuf field: double assists = 5;
     */
    assists: number;
    /**
     * @generated from protobuf field: double shots = 6;
     */
    shots: number;
    /**
     * @generated from protobuf field: double shots_on = 7;
     */
    shotsOn: number;
    /**
     * @generated from protobuf field: double y_cards = 8;
     */
    yCards: number;
    /**
     * @generated from protobuf field: double r_cards = 9;
     */
    rCards: number;
    /**
     * @generated from protobuf field: double offsides = 10;
     */
    offsides: number;
    /**
     * @generated from protobuf field: double fouls_committed = 11;
     */
    foulsCommitted: number;
    /**
     * @generated from protobuf field: double own_goals = 12;
     */
    ownGoals: number;
    /**
     * @generated from protobuf field: double saves = 13;
     */
    saves: number;
    /**
     * @generated from protobuf field: double caught_ball = 14;
     */
    caughtBall: number;
    /**
     * @generated from protobuf field: double clean_sheets = 15;
     */
    cleanSheets: number;
    /**
     * @generated from protobuf field: double pass = 16;
     */
    pass: number;
    /**
     * @generated from protobuf field: double key_pass = 17;
     */
    keyPass: number;
    /**
     * @generated from protobuf field: double passes_completed = 18;
     */
    passesCompleted: number;
    /**
     * @generated from protobuf field: double steal = 19;
     */
    steal: number;
    /**
     * @generated from protobuf field: double intercept = 20;
     */
    intercept: number;
    /**
     * @generated from protobuf field: double clearances = 21;
     */
    clearances: number;
}
/**
 * @generated from protobuf message data.MatchShareBackground
 */
export interface MatchShareBackground {
    /**
     * @generated from protobuf field: data.Image vertical_img = 1;
     */
    verticalImg?: Image;
    /**
     * @generated from protobuf field: data.Image horizontal_img = 2;
     */
    horizontalImg?: Image;
}
/**
 * @generated from protobuf message data.MatchTitle
 */
export interface MatchTitle {
    /**
     * @generated from protobuf field: string room_title = 1;
     */
    roomTitle: string;
    /**
     * @generated from protobuf field: data.MatchTitle.TitleIcon title_icon = 2;
     */
    titleIcon?: MatchTitle_TitleIcon;
}
/**
 * @generated from protobuf message data.MatchTitle.TitleIcon
 */
export interface MatchTitle_TitleIcon {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: int32 size_type = 2;
     */
    sizeType: number;
}
/**
 * @generated from protobuf message data.MatchTab
 */
export interface MatchTab {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string schema = 2;
     */
    schema: string;
    /**
     * @generated from protobuf field: int64 id = 3;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.MatchDrawer
 */
export interface MatchDrawer {
    /**
     * @generated from protobuf field: string entry_name = 1;
     */
    entryName: string;
    /**
     * @generated from protobuf field: data.Image entry_icon = 2;
     */
    entryIcon?: Image;
    /**
     * @generated from protobuf field: string drawer_title = 3;
     */
    drawerTitle: string;
    /**
     * @generated from protobuf field: data.Image drawer_background = 4;
     */
    drawerBackground?: Image;
    /**
     * @generated from protobuf field: string return_btn_text = 5;
     */
    returnBtnText: string;
    /**
     * @generated from protobuf field: int32 display_mode = 6;
     */
    displayMode: number;
}
/**
 * @generated from protobuf message data.BasketBallGoalStageDetail
 */
export interface BasketBallGoalStageDetail {
    /**
     * @generated from protobuf field: int32 first_period = 1;
     */
    firstPeriod: number;
    /**
     * @generated from protobuf field: int32 second_period = 2;
     */
    secondPeriod: number;
    /**
     * @generated from protobuf field: int32 third_period = 3;
     */
    thirdPeriod: number;
    /**
     * @generated from protobuf field: int32 forth_period = 4;
     */
    forthPeriod: number;
    /**
     * @generated from protobuf field: int32 overtime = 5;
     */
    overtime: number;
    /**
     * @generated from protobuf field: int32 total = 6;
     */
    total: number;
}
/**
 * @generated from protobuf message data.BasketballStage
 */
export interface BasketballStage {
    /**
     * @generated from protobuf field: int32 current_stage = 1;
     */
    currentStage: number;
    /**
     * @generated from protobuf field: int32 final_stage = 2;
     */
    finalStage: number;
}
/**
 * @generated from protobuf message data.ESportsStage
 */
export interface ESportsStage {
    /**
     * @generated from protobuf field: int32 current_stage = 1;
     */
    currentStage: number;
    /**
     * @generated from protobuf field: int32 final_stage = 2;
     */
    finalStage: number;
}
/**
 * @generated from protobuf message data.PaidLiveItemInfo
 */
export interface PaidLiveItemInfo {
    /**
     * @generated from protobuf field: int64 item_id = 1;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: int32 item_type = 2;
     */
    itemType: number;
}
/**
 * @generated from protobuf message data.PrivilegeInfo
 */
export interface PrivilegeInfo {
    /**
     * @generated from protobuf field: int64 entity_id = 1;
     */
    entityId: bigint;
    /**
     * @generated from protobuf field: repeated data.PaidLiveItemInfo item_list = 2;
     */
    itemList: PaidLiveItemInfo[];
    /**
     * @generated from protobuf field: int32 paid_live_type = 3;
     */
    paidLiveType: number;
    /**
     * @generated from protobuf field: data.PrivilegeBaseInfo paid_live_info = 4;
     */
    paidLiveInfo?: PrivilegeBaseInfo;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
    /**
     * @generated from protobuf field: data.PrivilegeUrl privilege_url = 6;
     */
    privilegeUrl?: PrivilegeUrl;
    /**
     * @generated from protobuf field: data.PaidLiveUIBaseConfig ui_config = 7;
     */
    uiConfig?: PaidLiveUIBaseConfig;
    /**
     * @generated from protobuf field: data.PaidLiveConfig entity_config = 8;
     */
    entityConfig?: PaidLiveConfig;
}
/**
 * @generated from protobuf message data.PrivilegeBaseInfo
 */
export interface PrivilegeBaseInfo {
    /**
     * @generated from protobuf field: int32 paid_live_type = 1;
     */
    paidLiveType: number;
    /**
     * @generated from protobuf field: int32 view_right = 2;
     */
    viewRight: number;
    /**
     * @generated from protobuf field: int32 delivery = 3;
     */
    delivery: number;
}
/**
 * @generated from protobuf message data.PrivilegeUrl
 */
export interface PrivilegeUrl {
    /**
     * @generated from protobuf field: string privilege_panel_schema = 1;
     */
    privilegePanelSchema: string;
    /**
     * @generated from protobuf field: string privilege_card_schema = 2;
     */
    privilegeCardSchema: string;
}
/**
 * @generated from protobuf message data.PaidLiveConfig
 */
export interface PaidLiveConfig {
    /**
     * @generated from protobuf field: int64 spu_id = 1;
     */
    spuId: bigint;
    /**
     * @generated from protobuf field: string spu_id_str = 2;
     */
    spuIdStr: string;
    /**
     * @generated from protobuf field: int64 sku_id = 3;
     */
    skuId: bigint;
    /**
     * @generated from protobuf field: string sku_id_str = 4;
     */
    skuIdStr: string;
    /**
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 6;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: repeated string tags = 7;
     */
    tags: string[];
    /**
     * @generated from protobuf field: data.Image cover = 8;
     */
    cover?: Image;
    /**
     * @generated from protobuf field: int32 sell_status = 9;
     */
    sellStatus: number;
    /**
     * @generated from protobuf field: int32 status = 10;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated data.PaidLiveConfig.PriceInfo ios_pay_price_info = 11;
     */
    iosPayPriceInfo: PaidLiveConfig_PriceInfo[];
    /**
     * @generated from protobuf field: repeated data.PaidLiveConfig.PriceInfo android_pay_price_info = 12;
     */
    androidPayPriceInfo: PaidLiveConfig_PriceInfo[];
    /**
     * @generated from protobuf field: data.PaidLiveConfig.UserRight user_right = 13;
     */
    userRight?: PaidLiveConfig_UserRight;
}
/**
 * @generated from protobuf message data.PaidLiveConfig.PriceInfo
 */
export interface PaidLiveConfig_PriceInfo {
    /**
     * @generated from protobuf field: int32 pay_type = 1;
     */
    payType: number;
    /**
     * @generated from protobuf field: int64 price = 2;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int32 right_duration = 3;
     */
    rightDuration: number;
}
/**
 * @generated from protobuf message data.PaidLiveConfig.UserRight
 */
export interface PaidLiveConfig_UserRight {
    /**
     * @generated from protobuf field: int32 view_right = 1;
     */
    viewRight: number;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int32 delivery = 6;
     */
    delivery: number;
    /**
     * @generated from protobuf field: bool need_delivery_notice = 7;
     */
    needDeliveryNotice: boolean;
}
/**
 * @generated from protobuf message data.PaidLiveUIBaseConfig
 */
export interface PaidLiveUIBaseConfig {
    /**
     * @generated from protobuf field: int32 paid_live_type = 1;
     */
    paidLiveType: number;
    /**
     * @generated from protobuf field: data.Image paid_live_icon = 2;
     */
    paidLiveIcon?: Image;
    /**
     * @generated from protobuf field: string paid_live_icon_title = 3;
     */
    paidLiveIconTitle: string;
    /**
     * @generated from protobuf field: int64 duration = 4;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string no_right_end_title = 5;
     */
    noRightEndTitle: string;
    /**
     * @generated from protobuf field: string no_right_end_sub_title = 6;
     */
    noRightEndSubTitle: string;
    /**
     * @generated from protobuf field: string has_right_end_title = 7;
     */
    hasRightEndTitle: string;
    /**
     * @generated from protobuf field: string has_right_end_sub_title = 8;
     */
    hasRightEndSubTitle: string;
    /**
     * @generated from protobuf field: string paid_conversion_jump_url = 9;
     */
    paidConversionJumpUrl: string;
    /**
     * @generated from protobuf field: string panel_six_jump_url = 10;
     */
    panelSixJumpUrl: string;
    /**
     * @generated from protobuf field: string feed_page_purchase_btn_word = 11;
     */
    feedPagePurchaseBtnWord: string;
    /**
     * @generated from protobuf field: string purchase_btn_word = 12;
     */
    purchaseBtnWord: string;
    /**
     * @generated from protobuf field: string im_share_top_title = 13;
     */
    imShareTopTitle: string;
    /**
     * @generated from protobuf field: string im_share_bottom_title = 14;
     */
    imShareBottomTitle: string;
    /**
     * @generated from protobuf field: string search_card_top_title = 15;
     */
    searchCardTopTitle: string;
    /**
     * @generated from protobuf field: string panel_feed_jump_url = 16;
     */
    panelFeedJumpUrl: string;
    /**
     * @generated from protobuf field: string panel_im_card_jump_url = 17;
     */
    panelImCardJumpUrl: string;
    /**
     * @generated from protobuf field: string panel_in_room_jump_url = 18;
     */
    panelInRoomJumpUrl: string;
    /**
     * @generated from protobuf field: string panel_search_card_jump_url = 19;
     */
    panelSearchCardJumpUrl: string;
}
/**
 * @generated from protobuf message data.ChatReplyRespInfo
 */
export interface ChatReplyRespInfo {
    /**
     * @generated from protobuf field: int64 reply_msg_id = 1;
     */
    replyMsgId: bigint;
    /**
     * @generated from protobuf field: int64 reply_id = 2;
     */
    replyId: bigint;
    /**
     * @generated from protobuf field: data.Text reply_text = 3;
     */
    replyText?: Text;
    /**
     * @generated from protobuf field: int64 reply_uid = 4;
     */
    replyUid: bigint;
    /**
     * @generated from protobuf field: string reply_webcast_uid = 5;
     */
    replyWebcastUid: string;
}
/**
 * @generated from protobuf message data.GiftIMPriority
 */
export interface GiftIMPriority {
    /**
     * @generated from protobuf field: repeated int64 queue_sizes = 1;
     */
    queueSizes: bigint[];
    /**
     * @generated from protobuf field: int64 self_queue_priority = 2;
     */
    selfQueuePriority: bigint;
    /**
     * @generated from protobuf field: int64 priority = 3;
     */
    priority: bigint;
}
/**
 * @generated from protobuf message data.ItemCardInfo
 */
export interface ItemCardInfo {
    /**
     * @generated from protobuf field: int32 item_card_type = 1;
     */
    itemCardType: number;
    /**
     * @generated from protobuf field: int32 card_play_type = 2;
     */
    cardPlayType: number;
    /**
     * @generated from protobuf field: string card_value = 3;
     */
    cardValue: string;
    /**
     * @generated from protobuf field: int64 rest_duration = 4;
     */
    restDuration: bigint;
    /**
     * @generated from protobuf field: int64 failure_time = 5;
     */
    failureTime: bigint;
    /**
     * @generated from protobuf field: string progress_text = 6;
     */
    progressText: string;
    /**
     * @generated from protobuf field: int32 item_card_status = 7;
     */
    itemCardStatus: number;
    /**
     * @generated from protobuf field: int64 mystery_rank_n = 8;
     */
    mysteryRankN: bigint;
    /**
     * @generated from protobuf field: int64 total_duration = 9;
     */
    totalDuration: bigint;
    /**
     * @generated from protobuf field: string card_name = 10;
     */
    cardName: string;
}
/**
 * @generated from protobuf message data.BreakthroughConfig
 */
export interface BreakthroughConfig {
    /**
     * @generated from protobuf field: repeated data.BreakthroughConfig.Stage stages = 1;
     */
    stages: BreakthroughConfig_Stage[];
    /**
     * @generated from protobuf field: data.Image mvp_image = 2;
     */
    mvpImage?: Image;
    /**
     * @generated from protobuf field: int64 high_score_threshold = 3;
     */
    highScoreThreshold: bigint;
}
/**
 * @generated from protobuf message data.BreakthroughConfig.Stage
 */
export interface BreakthroughConfig_Stage {
    /**
     * @generated from protobuf field: int64 target_score = 1;
     */
    targetScore: bigint;
    /**
     * @generated from protobuf field: string end_animation_url = 2;
     */
    endAnimationUrl: string;
    /**
     * @generated from protobuf field: string end_atmosphere_url = 3;
     */
    endAtmosphereUrl: string;
}
/**
 * @generated from protobuf message data.BreakthroughInfo
 */
export interface BreakthroughInfo {
    /**
     * @generated from protobuf field: int64 stage = 1;
     */
    stage: bigint;
    /**
     * @generated from protobuf field: int64 total_score = 2;
     */
    totalScore: bigint;
    /**
     * @generated from protobuf field: int64 mvp_anchor_id = 3;
     */
    mvpAnchorId: bigint;
    /**
     * @generated from protobuf field: int32 state = 4;
     */
    state: number;
}
/**
 * @generated from protobuf message data.BattleSettings
 */
export interface BattleSettings {
    /**
     * @generated from protobuf field: int64 battle_id = 1;
     */
    battleId: bigint;
    /**
     * @generated from protobuf field: int64 start_time_ms = 2;
     */
    startTimeMs: bigint;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string theme = 4;
     */
    theme: string;
    /**
     * @generated from protobuf field: int64 channel_id = 5;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 match_type = 6;
     */
    matchType: bigint;
    /**
     * @generated from protobuf field: int64 finished = 7;
     */
    finished: bigint;
    /**
     * @generated from protobuf field: string banner_url = 8;
     */
    bannerUrl: string;
    /**
     * @generated from protobuf field: int32 mode = 9;
     */
    mode: number;
    /**
     * @generated from protobuf field: string config = 10;
     */
    config: string;
    /**
     * @generated from protobuf field: string notify_scheme_url = 11;
     */
    notifySchemeUrl: string;
    /**
     * @generated from protobuf field: string hotsoon_notify_scheme_url = 12;
     */
    hotsoonNotifySchemeUrl: string;
    /**
     * @generated from protobuf field: data.BattleTitleConfig title_config = 13;
     */
    titleConfig?: BattleTitleConfig;
    /**
     * @generated from protobuf field: data.BattleTitleConfig punish_config = 14;
     */
    punishConfig?: BattleTitleConfig;
    /**
     * @generated from protobuf field: int64 punish_duration = 15;
     */
    punishDuration: bigint;
    /**
     * @generated from protobuf field: int64 punish_start_time_ms = 16;
     */
    punishStartTimeMs: bigint;
    /**
     * @generated from protobuf field: int32 optimize_version = 17;
     */
    optimizeVersion: number;
    /**
     * @generated from protobuf field: bool punish_optimize_on = 18;
     */
    punishOptimizeOn: boolean;
    /**
     * @generated from protobuf field: int64 blood_display_duration = 19;
     */
    bloodDisplayDuration: bigint;
    /**
     * @generated from protobuf field: int64 status_display_duration = 20;
     */
    statusDisplayDuration: bigint;
    /**
     * @generated from protobuf field: string toast = 21;
     */
    toast: string;
    /**
     * @generated from protobuf field: bool need_close_linkmic = 22;
     */
    needCloseLinkmic: boolean;
    /**
     * @generated from protobuf field: bool display_last_result = 23;
     */
    displayLastResult: boolean;
    /**
     * @generated from protobuf field: string normal_activity_name = 24;
     */
    normalActivityName: string;
    /**
     * @generated from protobuf field: int32 invite_type = 25;
     */
    inviteType: number;
    /**
     * @generated from protobuf field: data.BattleConfigSetting battle_config_setting = 27;
     */
    battleConfigSetting?: BattleConfigSetting;
    /**
     * @generated from protobuf field: data.BattleBarConfig bar_config = 28;
     */
    barConfig?: BattleBarConfig;
    /**
     * @generated from protobuf field: data.BattleBarConfig hotsoon_bar_config = 33;
     */
    hotsoonBarConfig?: BattleBarConfig;
    /**
     * @generated from protobuf field: int64 initiator_id = 34;
     */
    initiatorId: bigint;
    /**
     * @generated from protobuf field: int32 battle_type = 35;
     */
    battleType: number;
    /**
     * @generated from protobuf field: repeated int32 play_tags = 36;
     */
    playTags: number[];
    /**
     * @generated from protobuf field: int64 steal_tower_duration = 37;
     */
    stealTowerDuration: bigint;
    /**
     * @generated from protobuf field: string lynx_data = 38;
     */
    lynxData: string;
}
/**
 * @generated from protobuf message data.BattleTitleConfig
 */
export interface BattleTitleConfig {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string scheme = 3;
     */
    scheme: string;
    /**
     * @generated from protobuf field: string hotsoon_scheme = 4;
     */
    hotsoonScheme: string;
    /**
     * @generated from protobuf field: data.Image new_icon = 7;
     */
    newIcon?: Image;
    /**
     * @generated from protobuf field: data.Image pre_icon = 8;
     */
    preIcon?: Image;
    /**
     * @generated from protobuf field: data.Image icon_back_img = 9;
     */
    iconBackImg?: Image;
}
/**
 * @generated from protobuf message data.AnimeInfo
 */
export interface AnimeInfo {
    /**
     * @generated from protobuf field: int32 bar_type = 1;
     */
    barType: number;
    /**
     * @generated from protobuf field: int32 aura_type = 2;
     */
    auraType: number;
    /**
     * @generated from protobuf field: string normal_bar_url = 3;
     */
    normalBarUrl: string;
    /**
     * @generated from protobuf field: string buff_bar_url = 4;
     */
    buffBarUrl: string;
    /**
     * @generated from protobuf field: string steal_tower_bar_url = 5;
     */
    stealTowerBarUrl: string;
    /**
     * @generated from protobuf field: string cur_bar_url = 6;
     */
    curBarUrl: string;
    /**
     * @generated from protobuf field: string cur_aura_url = 7;
     */
    curAuraUrl: string;
}
/**
 * @generated from protobuf message data.BattleBarConfig
 */
export interface BattleBarConfig {
    /**
     * @generated from protobuf field: string left_color = 1;
     */
    leftColor: string;
    /**
     * @generated from protobuf field: string right_color = 2;
     */
    rightColor: string;
    /**
     * @generated from protobuf field: string left_score_view_color = 3;
     */
    leftScoreViewColor: string;
    /**
     * @generated from protobuf field: string right_score_view_color = 4;
     */
    rightScoreViewColor: string;
    /**
     * @generated from protobuf field: data.AnimeInfo anime_info = 5;
     */
    animeInfo?: AnimeInfo;
}
/**
 * @generated from protobuf message data.BattleShellConfig
 */
export interface BattleShellConfig {
    /**
     * @generated from protobuf field: int64 shell_type = 1;
     */
    shellType: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message data.BattleArmy
 */
export interface BattleArmy {
    /**
     * @generated from protobuf field: int64 anchor_id = 1;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: repeated data.BattleArmy.RankUser rank_list = 2;
     */
    rankList: BattleArmy_RankUser[];
    /**
     * @generated from protobuf field: string anchor_id_str = 3;
     */
    anchorIdStr: string;
}
/**
 * @generated from protobuf message data.BattleArmy.RankUser
 */
export interface BattleArmy_RankUser {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 3;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: int64 score = 4;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string user_id_str = 5;
     */
    userIdStr: string;
}
/**
 * @generated from protobuf message data.BattleScore
 */
export interface BattleScore {
    /**
     * @generated from protobuf field: int32 score = 1;
     */
    score: number;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int32 rank_bonus_score = 3;
     */
    rankBonusScore: number;
    /**
     * @generated from protobuf field: int32 weekly_rank = 4;
     */
    weeklyRank: number;
    /**
     * @generated from protobuf field: int32 winning_streak = 5;
     */
    winningStreak: number;
    /**
     * @generated from protobuf field: int32 winning_streak_bonus_score = 6;
     */
    winningStreakBonusScore: number;
    /**
     * @generated from protobuf field: int32 battle_count_bonus_score = 7;
     */
    battleCountBonusScore: number;
    /**
     * @generated from protobuf field: string user_id_str = 8;
     */
    userIdStr: string;
    /**
     * @generated from protobuf field: int32 current_bonus = 9;
     */
    currentBonus: number;
    /**
     * @generated from protobuf field: data.BattleStarActivityGrade grade = 10;
     */
    grade?: BattleStarActivityGrade;
    /**
     * @generated from protobuf field: bool score_relative = 11;
     */
    scoreRelative: boolean;
    /**
     * @generated from protobuf field: string score_relative_text = 12;
     */
    scoreRelativeText: string;
    /**
     * @generated from protobuf field: bool is_large_pk_score = 13;
     */
    isLargePkScore: boolean;
    /**
     * @generated from protobuf field: bool room_like_trigger = 14;
     */
    roomLikeTrigger: boolean;
    /**
     * @generated from protobuf field: string score_blur_text = 15;
     */
    scoreBlurText: string;
    /**
     * @generated from protobuf field: int64 battle_rank = 16;
     */
    battleRank: bigint;
    /**
     * @generated from protobuf field: bool new_score_open = 17;
     */
    newScoreOpen: boolean;
    /**
     * @generated from protobuf field: string multi_pk_team_score_text = 18;
     */
    multiPkTeamScoreText: string;
    /**
     * @generated from protobuf field: int64 multi_pk_team_score = 19;
     */
    multiPkTeamScore: bigint;
    /**
     * @generated from protobuf field: int64 multi_pk_team_rank = 20;
     */
    multiPkTeamRank: bigint;
    /**
     * @generated from protobuf field: bool is_multi_pk_relative_text = 21;
     */
    isMultiPkRelativeText: boolean;
}
/**
 * @generated from protobuf message data.BattleConsecutiveRecordInfo
 */
export interface BattleConsecutiveRecordInfo {
    /**
     * @generated from protobuf field: int32 battle_result_type = 1;
     */
    battleResultType: number;
    /**
     * @generated from protobuf field: int64 consecutive_count = 2;
     */
    consecutiveCount: bigint;
}
/**
 * @generated from protobuf message data.BattleUserInfo
 */
export interface BattleUserInfo {
    /**
     * @generated from protobuf field: data.BattleUserInfo.BaseUserInfo user = 1;
     */
    user?: BattleUserInfo_BaseUserInfo;
    /**
     * @generated from protobuf field: repeated data.BattleRivalTag tags = 2;
     */
    tags: BattleRivalTag[];
    /**
     * @generated from protobuf field: data.BattleConsecutiveRecordInfo consecutive_record = 3;
     */
    consecutiveRecord?: BattleConsecutiveRecordInfo;
    /**
     * @generated from protobuf field: data.BattleStarActivityGrade grade = 4;
     */
    grade?: BattleStarActivityGrade;
    /**
     * @generated from protobuf field: data.BattleStarActivityGradeChange grade_change = 5;
     */
    gradeChange?: BattleStarActivityGradeChange;
    /**
     * @generated from protobuf field: string team_coach_score = 6;
     */
    teamCoachScore: string;
    /**
     * @generated from protobuf field: int32 pk_role = 7;
     */
    pkRole: number;
    /**
     * @generated from protobuf field: int32 pk_result = 8;
     */
    pkResult: number;
    /**
     * @generated from protobuf field: data.ActivityUser activity_user = 9;
     */
    activityUser?: ActivityUser;
    /**
     * @generated from protobuf field: int64 multi_pk_team_id = 10;
     */
    multiPkTeamId: bigint;
    /**
     * @generated from protobuf field: string battle_start_desc_text = 11;
     */
    battleStartDescText: string;
    /**
     * @generated from protobuf field: data.BattleUserInfo.UserImgFlipInfo user_img_flip_info = 12;
     */
    userImgFlipInfo?: BattleUserInfo_UserImgFlipInfo;
}
/**
 * @generated from protobuf message data.BattleUserInfo.BaseUserInfo
 */
export interface BattleUserInfo_BaseUserInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string nick_name = 2;
     */
    nickName: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 3;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: int32 gender = 4;
     */
    gender: number;
}
/**
 * @generated from protobuf message data.BattleUserInfo.UserImgFlipInfo
 */
export interface BattleUserInfo_UserImgFlipInfo {
    /**
     * @generated from protobuf field: data.Image flip_image = 1;
     */
    flipImage?: Image;
    /**
     * @generated from protobuf field: data.Image pk_stage_medal = 2;
     */
    pkStageMedal?: Image;
    /**
     * @generated from protobuf field: string pk_stage_desc = 3;
     */
    pkStageDesc: string;
}
/**
 * @generated from protobuf message data.BattleSkinConfig
 */
export interface BattleSkinConfig {
    /**
     * @generated from protobuf field: string start_animation_url = 1;
     */
    startAnimationUrl: string;
    /**
     * @generated from protobuf field: string win_animation_url = 2;
     */
    winAnimationUrl: string;
    /**
     * @generated from protobuf field: string lose_animation_url = 3;
     */
    loseAnimationUrl: string;
    /**
     * @generated from protobuf field: string draw_animation_url = 4;
     */
    drawAnimationUrl: string;
    /**
     * @generated from protobuf field: bool is_show_enter_user_info = 5;
     */
    isShowEnterUserInfo: boolean;
    /**
     * @generated from protobuf field: data.Image room_bg_full_image = 6;
     */
    roomBgFullImage?: Image;
    /**
     * @generated from protobuf field: data.Image room_bg_top_image = 7;
     */
    roomBgTopImage?: Image;
    /**
     * @generated from protobuf field: data.Image room_bg_bottom_image = 8;
     */
    roomBgBottomImage?: Image;
    /**
     * @generated from protobuf field: int64 enter_user_info_position = 9;
     */
    enterUserInfoPosition: bigint;
    /**
     * @generated from protobuf field: int64 enter_show_time_ms = 10;
     */
    enterShowTimeMs: bigint;
}
/**
 * @generated from protobuf message data.BattleRivalTag
 */
export interface BattleRivalTag {
    /**
     * @generated from protobuf field: data.Image bg_image = 1;
     */
    bgImage?: Image;
    /**
     * @generated from protobuf field: data.Image icon_image = 2;
     */
    iconImage?: Image;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string font_color = 4;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: int32 tag_type = 5;
     */
    tagType: number;
}
/**
 * @generated from protobuf message data.TeamTask
 */
export interface TeamTask {
    /**
     * @generated from protobuf field: data.TeamTask.Config config = 1;
     */
    config?: TeamTask_Config;
    /**
     * @generated from protobuf field: string battle_id = 3;
     */
    battleId: string;
    /**
     * @generated from protobuf field: string trigger_user_id = 4;
     */
    triggerUserId: string;
    /**
     * @generated from protobuf field: int32 battle_type = 5;
     */
    battleType: number;
}
/**
 * @generated from protobuf message data.TeamTask.ExtraConfig
 */
export interface TeamTask_ExtraConfig {
    /**
     * @generated from protobuf field: data.TeamTask.SpecialGiftCountConfig special_gift_count_config = 5;
     */
    specialGiftCountConfig?: TeamTask_SpecialGiftCountConfig;
}
/**
 * @generated from protobuf message data.TeamTask.PeriodConfig
 */
export interface TeamTask_PeriodConfig {
    /**
     * @generated from protobuf field: int64 begin_second_relative_battle_finish = 1;
     */
    beginSecondRelativeBattleFinish: bigint;
    /**
     * @generated from protobuf field: int64 end_second_relative_battle_finish = 2;
     */
    endSecondRelativeBattleFinish: bigint;
}
/**
 * @generated from protobuf message data.TeamTask.SpecialGiftCountConfig
 */
export interface TeamTask_SpecialGiftCountConfig {
    /**
     * @generated from protobuf field: int64 gift_id = 1;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: string gift_name = 2;
     */
    giftName: string;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 max_gift_count_per_user = 4;
     */
    maxGiftCountPerUser: bigint;
    /**
     * @generated from protobuf field: int64 current_gift_count = 5;
     */
    currentGiftCount: bigint;
}
/**
 * @generated from protobuf message data.TeamTask.Config
 */
export interface TeamTask_Config {
    /**
     * @generated from protobuf field: int64 reward_buff_multiple = 2;
     */
    rewardBuffMultiple: bigint;
    /**
     * @generated from protobuf field: int32 task_type = 3;
     */
    taskType: number;
    /**
     * @generated from protobuf field: data.TeamTask.ExtraConfig extra_config = 4;
     */
    extraConfig?: TeamTask_ExtraConfig;
    /**
     * @generated from protobuf field: int32 target_type = 5;
     */
    targetType: number;
    /**
     * @generated from protobuf field: int32 reward_type = 6;
     */
    rewardType: number;
    /**
     * @generated from protobuf field: int32 team_work_team_task_type = 7;
     */
    teamWorkTeamTaskType: number;
    /**
     * @generated from protobuf field: repeated int64 stage_reward_buff_multiple = 8;
     */
    stageRewardBuffMultiple: bigint[];
}
/**
 * @generated from protobuf message data.TeamTask.Info
 */
export interface TeamTask_Info {
    /**
     * @generated from protobuf field: int64 target_user_count = 1;
     */
    targetUserCount: bigint;
    /**
     * @generated from protobuf field: int64 finish_user_count = 2;
     */
    finishUserCount: bigint;
    /**
     * @generated from protobuf field: int32 result = 3;
     */
    result: number;
    /**
     * @generated from protobuf field: data.TeamTask.Reward reward = 4;
     */
    reward?: TeamTask_Reward;
    /**
     * @generated from protobuf field: int64 ratio = 5;
     */
    ratio: bigint;
    /**
     * @generated from protobuf field: int32 role = 6;
     */
    role: number;
    /**
     * @generated from protobuf field: data.ItemCardInfo item_card_info = 7;
     */
    itemCardInfo?: ItemCardInfo;
    /**
     * @generated from protobuf field: string value_text = 8;
     */
    valueText: string;
    /**
     * @generated from protobuf field: string progress_blur_text = 9;
     */
    progressBlurText: string;
}
/**
 * @generated from protobuf message data.TeamTask.Reward
 */
export interface TeamTask_Reward {
    /**
     * @generated from protobuf field: int64 begin_second_relative_battle_finish = 1;
     */
    beginSecondRelativeBattleFinish: bigint;
    /**
     * @generated from protobuf field: int64 end_second_relative_battle_finish = 2;
     */
    endSecondRelativeBattleFinish: bigint;
    /**
     * @generated from protobuf field: int64 reward_score = 3;
     */
    rewardScore: bigint;
    /**
     * @generated from protobuf field: int64 current_reward_buff_multiple = 4;
     */
    currentRewardBuffMultiple: bigint;
}
/**
 * @generated from protobuf message data.BattleRankUser
 */
export interface BattleRankUser {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 rank = 3;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: int64 grade_buff_score = 4;
     */
    gradeBuffScore: bigint;
    /**
     * @generated from protobuf field: string sub_des = 5;
     */
    subDes: string;
}
/**
 * @generated from protobuf message data.BattleAnchorContributors
 */
export interface BattleAnchorContributors {
    /**
     * @generated from protobuf field: repeated data.BattleRankUser ranks = 1;
     */
    ranks: BattleRankUser[];
    /**
     * @generated from protobuf field: int64 total_count = 2;
     */
    totalCount: bigint;
    /**
     * @generated from protobuf field: repeated data.BattleBuffCardInfo buff_card_infos = 3;
     */
    buffCardInfos: BattleBuffCardInfo[];
}
/**
 * @generated from protobuf message data.BattleContributorsRankListV2
 */
export interface BattleContributorsRankListV2 {
    /**
     * @generated from protobuf field: data.TeamTask team_task = 2;
     */
    teamTask?: TeamTask;
    /**
     * @generated from protobuf field: data.BattleSettings battle_settings = 3;
     */
    battleSettings?: BattleSettings;
    /**
     * @generated from protobuf field: int64 loser_id = 4;
     */
    loserId: bigint;
    /**
     * @generated from protobuf field: string loser_id_str = 5;
     */
    loserIdStr: string;
}
/**
 * @generated from protobuf message data.OperationalPlay
 */
export interface OperationalPlay {
    /**
     * @generated from protobuf field: int32 operational_play_type = 1;
     */
    operationalPlayType: number;
    /**
     * @generated from protobuf field: data.MultipleMatches3 multiple_matches_3 = 2;
     */
    multipleMatches3?: MultipleMatches3;
}
/**
 * @generated from protobuf message data.MultipleMatches3
 */
export interface MultipleMatches3 {
    /**
     * @generated from protobuf field: int64 current_match = 2;
     */
    currentMatch: bigint;
    /**
     * @generated from protobuf field: bool end = 3;
     */
    end: boolean;
    /**
     * @generated from protobuf field: int64 winner_uid = 4;
     */
    winnerUid: bigint;
    /**
     * @generated from protobuf field: int64 current_winner_uid = 5;
     */
    currentWinnerUid: bigint;
}
/**
 * @generated from protobuf message data.MultipleMatchesUserInfo
 */
export interface MultipleMatchesUserInfo {
    /**
     * @generated from protobuf field: int64 win_count = 1;
     */
    winCount: bigint;
}
/**
 * @generated from protobuf message data.ActivityUser
 */
export interface ActivityUser {
    /**
     * @generated from protobuf field: string activity_name = 1;
     */
    activityName: string;
    /**
     * @generated from protobuf field: data.Text display_tab_text = 2;
     */
    displayTabText?: Text;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string user_id_str = 4;
     */
    userIdStr: string;
    /**
     * @generated from protobuf field: repeated data.BattleRivalTag labels = 5;
     */
    labels: BattleRivalTag[];
    /**
     * @generated from protobuf field: string sub_tab_text = 6;
     */
    subTabText: string;
    /**
     * @generated from protobuf field: bool is_valid = 7;
     */
    isValid: boolean;
    /**
     * @generated from protobuf field: string message = 8;
     */
    message: string;
    /**
     * @generated from protobuf field: data.Image button_image = 9;
     */
    buttonImage?: Image;
    /**
     * @generated from protobuf field: repeated data.Image back_ground_images = 10;
     */
    backGroundImages: Image[];
}
/**
 * @generated from protobuf message data.BattleSelfData
 */
export interface BattleSelfData {
    /**
     * @generated from protobuf field: int64 pk_duration_time = 1;
     */
    pkDurationTime: bigint;
    /**
     * @generated from protobuf field: int32 pk_value_type = 2;
     */
    pkValueType: number;
    /**
     * @generated from protobuf field: int64 like_type = 3;
     */
    likeType: bigint;
    /**
     * @generated from protobuf field: int64 gift_value_type = 4;
     */
    giftValueType: bigint;
    /**
     * @generated from protobuf field: int64 gift_uv_type = 5;
     */
    giftUvType: bigint;
    /**
     * @generated from protobuf field: int64 ticket_type = 6;
     */
    ticketType: bigint;
    /**
     * @generated from protobuf field: int64 set_uid = 7;
     */
    setUid: bigint;
}
/**
 * @generated from protobuf message data.BattleConfigSetting
 */
export interface BattleConfigSetting {
    /**
     * @generated from protobuf field: int32 mod_type = 1;
     */
    modType: number;
    /**
     * @generated from protobuf field: data.BattleSelfData self_data = 2;
     */
    selfData?: BattleSelfData;
    /**
     * @generated from protobuf field: data.VoteSetting vote_data = 3;
     */
    voteData?: VoteSetting;
    /**
     * @generated from protobuf field: data.BattleSelfSettingRate self_setting_rate = 4;
     */
    selfSettingRate?: BattleSelfSettingRate;
    /**
     * @generated from protobuf field: int64 flex_activity_id = 5;
     */
    flexActivityId: bigint;
    /**
     * @generated from protobuf field: data.BattleShellConfig shell_config = 6;
     */
    shellConfig?: BattleShellConfig;
    /**
     * @generated from protobuf field: data.BreakthroughConfig breakthrough_config = 7;
     */
    breakthroughConfig?: BreakthroughConfig;
    /**
     * @generated from protobuf field: data.SpecifyGiftConfig specify_gift_config = 8;
     */
    specifyGiftConfig?: SpecifyGiftConfig;
    /**
     * @generated from protobuf field: int32 play_mode = 9;
     */
    playMode: number;
    /**
     * @generated from protobuf field: int32 team_mode = 10;
     */
    teamMode: number;
    /**
     * @generated from protobuf field: int32 activity_mode = 11;
     */
    activityMode: number;
}
/**
 * @generated from protobuf message data.SpecifyGiftConfig
 */
export interface SpecifyGiftConfig {
    /**
     * @generated from protobuf field: repeated int64 gift_ids = 1;
     */
    giftIds: bigint[];
    /**
     * @generated from protobuf field: int64 set_uid = 3;
     */
    setUid: bigint;
    /**
     * @generated from protobuf field: string des = 4;
     */
    des: string;
}
/**
 * @generated from protobuf message data.BattleSelfSettingRate
 */
export interface BattleSelfSettingRate {
    /**
     * @generated from protobuf field: int64 pk_value_type = 1;
     */
    pkValueType: bigint;
    /**
     * @generated from protobuf field: int64 pk_2_like_rate = 2;
     */
    pk2LikeRate: bigint;
    /**
     * @generated from protobuf field: int64 gift_2_pk_rate = 3;
     */
    gift2PkRate: bigint;
    /**
     * @generated from protobuf field: int64 gift_uv_2_pk_rate = 4;
     */
    giftUv2PkRate: bigint;
    /**
     * @generated from protobuf field: int64 ticket_2_pk_rate = 5;
     */
    ticket2PkRate: bigint;
    /**
     * @generated from protobuf field: int64 set_uid = 6;
     */
    setUid: bigint;
}
/**
 * @generated from protobuf message data.GiftDetail
 */
export interface GiftDetail {
    /**
     * @generated from protobuf field: int64 gift_id = 1;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: string gift_name = 2;
     */
    giftName: string;
    /**
     * @generated from protobuf field: data.Image image = 3;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string gift_des = 4;
     */
    giftDes: string;
}
/**
 * @generated from protobuf message data.VoteSetting
 */
export interface VoteSetting {
    /**
     * @generated from protobuf field: int64 vote_type = 1;
     */
    voteType: bigint;
    /**
     * @generated from protobuf field: string vote_des = 2;
     */
    voteDes: string;
    /**
     * @generated from protobuf field: int64 duration_time = 3;
     */
    durationTime: bigint;
}
/**
 * @generated from protobuf message data.PanelTitle
 */
export interface PanelTitle {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string desc = 2;
     */
    desc: string;
    /**
     * @generated from protobuf field: data.Image icon_bg_image = 3;
     */
    iconBgImage?: Image;
}
/**
 * @generated from protobuf message data.BattleStarActivityGrade
 */
export interface BattleStarActivityGrade {
    /**
     * @generated from protobuf field: string grade = 1;
     */
    grade: string;
    /**
     * @generated from protobuf field: int64 level = 2;
     */
    level: bigint;
    /**
     * @generated from protobuf field: int64 star_count = 3;
     */
    starCount: bigint;
    /**
     * @generated from protobuf field: int64 target_star_count = 4;
     */
    targetStarCount: bigint;
    /**
     * @generated from protobuf field: data.BattleStarActivityGradeMedal star_activity_grade_medal = 5;
     */
    starActivityGradeMedal?: BattleStarActivityGradeMedal;
    /**
     * @generated from protobuf field: int32 grade_enum = 6;
     */
    gradeEnum: number;
}
/**
 * @generated from protobuf message data.BattleStarActivityGradeMedal
 */
export interface BattleStarActivityGradeMedal {
    /**
     * @generated from protobuf field: data.Image grade_medal = 1;
     */
    gradeMedal?: Image;
    /**
     * @generated from protobuf field: data.Image level_image = 2;
     */
    levelImage?: Image;
    /**
     * @generated from protobuf field: data.Image badge_image = 3;
     */
    badgeImage?: Image;
}
/**
 * @generated from protobuf message data.BattleBuffCardMeta
 */
export interface BattleBuffCardMeta {
    /**
     * @generated from protobuf field: int32 battle_buff_card_type = 1;
     */
    battleBuffCardType: number;
    /**
     * @generated from protobuf field: string effect_json = 2;
     */
    effectJson: string;
    /**
     * @generated from protobuf field: int64 effect_start_time_ms = 3;
     */
    effectStartTimeMs: bigint;
    /**
     * @generated from protobuf field: int64 effect_duration_ms = 4;
     */
    effectDurationMs: bigint;
    /**
     * @generated from protobuf field: int64 create_time_ms = 5;
     */
    createTimeMs: bigint;
    /**
     * @generated from protobuf field: string card_extra_info = 6;
     */
    cardExtraInfo: string;
}
/**
 * @generated from protobuf message data.BattleBuffCardInfo
 */
export interface BattleBuffCardInfo {
    /**
     * @generated from protobuf field: int32 battle_buff_card_type = 1;
     */
    battleBuffCardType: number;
    /**
     * @generated from protobuf field: repeated data.BattleBuffCardMeta effective_buff_cards = 2;
     */
    effectiveBuffCards: BattleBuffCardMeta[];
    /**
     * @generated from protobuf field: int64 waiting_buff_cards_count = 3;
     */
    waitingBuffCardsCount: bigint;
    /**
     * @generated from protobuf field: int64 bonus_score = 4;
     */
    bonusScore: bigint;
}
/**
 * @generated from protobuf message data.BattleStarActivityGradeChange
 */
export interface BattleStarActivityGradeChange {
    /**
     * @generated from protobuf field: int64 star = 1;
     */
    star: bigint;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string before_grade = 3;
     */
    beforeGrade: string;
    /**
     * @generated from protobuf field: int64 before_level = 4;
     */
    beforeLevel: bigint;
    /**
     * @generated from protobuf field: string current_grade = 5;
     */
    currentGrade: string;
    /**
     * @generated from protobuf field: int64 current_level = 6;
     */
    currentLevel: bigint;
}
/**
 * @generated from protobuf message data.LinkerBaseInfo
 */
export interface LinkerBaseInfo {
    /**
     * @generated from protobuf field: int32 scene = 1;
     */
    scene: number;
    /**
     * @generated from protobuf field: repeated int64 play_modes = 2;
     */
    playModes: bigint[];
    /**
     * @generated from protobuf field: int32 ui_layout = 3;
     */
    uiLayout: number;
    /**
     * @generated from protobuf field: int64 MaxMemberCount = 4 [json_name = "MaxMemberCount"];
     */
    maxMemberCount: bigint;
}
/**
 * @generated from protobuf message data.ListUser
 */
export interface ListUser {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 linkmic_id = 2;
     */
    linkmicId: bigint;
    /**
     * @generated from protobuf field: string linkmic_id_str = 3;
     */
    linkmicIdStr: string;
    /**
     * @generated from protobuf field: int32 link_status = 4;
     */
    linkStatus: number;
    /**
     * @generated from protobuf field: int32 link_type = 5;
     */
    linkType: number;
    /**
     * @generated from protobuf field: int32 user_position = 6;
     */
    userPosition: number;
    /**
     * @generated from protobuf field: int32 silence_status = 7;
     */
    silenceStatus: number;
    /**
     * @generated from protobuf field: int64 modify_time = 8;
     */
    modifyTime: bigint;
    /**
     * @generated from protobuf field: int64 linker_id = 9;
     */
    linkerId: bigint;
    /**
     * @generated from protobuf field: int32 role_type = 10;
     */
    roleType: number;
    /**
     * @generated from protobuf field: data.ListUser.Content content = 11;
     */
    content?: ListUser_Content;
    /**
     * @generated from protobuf field: int64 mc_status = 12;
     */
    mcStatus: bigint;
    /**
     * @generated from protobuf field: int64 is_background = 13;
     */
    isBackground: bigint;
    /**
     * @generated from protobuf field: data.HostInfo host = 14;
     */
    host?: HostInfo;
    /**
     * @generated from protobuf field: data.MicPosTagInfo mic_pos_tag_info = 15;
     */
    micPosTagInfo?: MicPosTagInfo;
    /**
     * @generated from protobuf field: bool pk_available = 16;
     */
    pkAvailable: boolean;
    /**
     * @generated from protobuf field: string extra = 200;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.ListUser.Content
 */
export interface ListUser_Content {
    /**
     * @generated from protobuf field: data.ListUserLinkmicContent linkmic_content = 2;
     */
    linkmicContent?: ListUserLinkmicContent;
    /**
     * @generated from protobuf field: data.ListUserLinkmicAudienceContent linkmic_audience_content = 3;
     */
    linkmicAudienceContent?: ListUserLinkmicAudienceContent;
}
/**
 * @generated from protobuf message data.BanUser
 */
export interface BanUser {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string reason = 2;
     */
    reason: string;
    /**
     * @generated from protobuf field: string url = 3;
     */
    url: string;
    /**
     * @generated from protobuf field: string anchor_explain = 4;
     */
    anchorExplain: string;
    /**
     * @generated from protobuf field: string audience_explain = 5;
     */
    audienceExplain: string;
}
/**
 * @generated from protobuf message data.ListUserLinkmicContent
 */
export interface ListUserLinkmicContent {
    /**
     * @generated from protobuf field: int64 resource_id = 1;
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: bool show_identity = 2;
     */
    showIdentity: boolean;
    /**
     * @generated from protobuf field: int32 pk_user_role = 3;
     */
    pkUserRole: number;
    /**
     * @generated from protobuf field: string game_name = 4;
     */
    gameName: string;
    /**
     * @generated from protobuf field: string fan_ticket = 5;
     */
    fanTicket: string;
    /**
     * @generated from protobuf field: int64 join_channel_time = 6;
     */
    joinChannelTime: bigint;
    /**
     * @generated from protobuf field: data.AnchorLinkmicIDInfo anchor_linkmic_id_info = 7;
     */
    anchorLinkmicIdInfo?: AnchorLinkmicIDInfo;
    /**
     * @generated from protobuf field: int32 anchor_auth_role = 8;
     */
    anchorAuthRole: number;
}
/**
 * @generated from protobuf message data.AnchorLinkmicIDInfo
 */
export interface AnchorLinkmicIDInfo {
    /**
     * @generated from protobuf field: string main_linkmic_id_str = 1;
     */
    mainLinkmicIdStr: string;
    /**
     * @generated from protobuf field: string backup_linkmic_id_str = 2;
     */
    backupLinkmicIdStr: string;
    /**
     * @generated from protobuf field: bool use_backup_stream = 3;
     */
    useBackupStream: boolean;
}
/**
 * @generated from protobuf message data.ListUserLinkmicAudienceContent
 */
export interface ListUserLinkmicAudienceContent {
    /**
     * @generated from protobuf field: int64 fan_ticket = 1;
     */
    fanTicket: bigint;
    /**
     * @generated from protobuf field: bool host_permission = 2;
     */
    hostPermission: boolean;
    /**
     * @generated from protobuf field: int64 app_id = 3;
     */
    appId: bigint;
    /**
     * @generated from protobuf field: int64 client_version = 4;
     */
    clientVersion: bigint;
    /**
     * @generated from protobuf field: string device_platform = 5;
     */
    devicePlatform: string;
    /**
     * @generated from protobuf field: int64 join_channel_time = 6;
     */
    joinChannelTime: bigint;
    /**
     * @generated from protobuf field: int64 expected_leave_time = 7;
     */
    expectedLeaveTime: bigint;
    /**
     * @generated from protobuf field: bool in_waiting_list = 8;
     */
    inWaitingList: boolean;
    /**
     * @generated from protobuf field: string extra = 9;
     */
    extra: string;
    /**
     * @generated from protobuf field: int64 current_time = 10;
     */
    currentTime: bigint;
    /**
     * @generated from protobuf field: string fan_ticket_fuzzy_str = 11;
     */
    fanTicketFuzzyStr: string;
    /**
     * @generated from protobuf field: int32 list_user_role = 12;
     */
    listUserRole: number;
    /**
     * @generated from protobuf field: string fan_ticket_real_str = 13;
     */
    fanTicketRealStr: string;
    /**
     * @generated from protobuf field: repeated int64 rank_contributor_ids = 14;
     */
    rankContributorIds: bigint[];
    /**
     * @generated from protobuf field: data.MicDress mic_dress = 15;
     */
    micDress?: MicDress;
    /**
     * @generated from protobuf field: int64 paid_count = 16;
     */
    paidCount: bigint;
    /**
     * @generated from protobuf field: bool is_enlarged = 17;
     */
    isEnlarged: boolean;
    /**
     * @generated from protobuf field: int64 self_discipline_duration = 18;
     */
    selfDisciplineDuration: bigint;
    /**
     * @generated from protobuf field: bool is_anonymous = 19;
     */
    isAnonymous: boolean;
    /**
     * @generated from protobuf field: int32 apply_type = 20;
     */
    applyType: number;
    /**
     * @generated from protobuf field: int64 self_discipline_start_time_ms = 21;
     */
    selfDisciplineStartTimeMs: bigint;
    /**
     * @generated from protobuf field: int64 self_discipline_start_time = 22;
     */
    selfDisciplineStartTime: bigint;
    /**
     * @generated from protobuf field: int64 self_discripline_target_duration = 23;
     */
    selfDiscriplineTargetDuration: bigint;
    /**
     * @generated from protobuf field: string device_id_str = 24;
     */
    deviceIdStr: string;
    /**
     * @generated from protobuf field: int32 themed_competition_role = 25;
     */
    themedCompetitionRole: number;
}
/**
 * @generated from protobuf message data.AudienceActionSource
 */
export interface AudienceActionSource {
    /**
     * @generated from protobuf field: int32 invite_source = 1;
     */
    inviteSource: number;
    /**
     * @generated from protobuf field: int32 permit_source = 2;
     */
    permitSource: number;
}
/**
 * @generated from protobuf message data.SwitchSceneData
 */
export interface SwitchSceneData {
    /**
     * @generated from protobuf field: string rtc_ext_info = 1;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_ext_info = 2;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 3;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: int32 scene = 4;
     */
    scene: number;
    /**
     * @generated from protobuf field: repeated int32 play_modes = 5;
     */
    playModes: number[];
    /**
     * @generated from protobuf field: int32 ui_layout = 6;
     */
    uiLayout: number;
    /**
     * @generated from protobuf field: data.MultiRtcInfo multi_rtc_info = 7;
     */
    multiRtcInfo?: MultiRtcInfo;
    /**
     * @generated from protobuf field: data.MultiLiveCoreInfo multi_live_core_info = 8;
     */
    multiLiveCoreInfo?: MultiLiveCoreInfo;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 9;
     */
    multiChannelInfo?: MultiChannelInfo;
    /**
     * @generated from protobuf field: int64 to_linker_id = 10;
     */
    toLinkerId: bigint;
    /**
     * @generated from protobuf field: data.MultiAnchorExtra multi_anchor_extra = 11;
     */
    multiAnchorExtra?: MultiAnchorExtra;
    /**
     * @generated from protobuf field: int32 anchor_ui_layout = 12;
     */
    anchorUiLayout: number;
    /**
     * @generated from protobuf field: int32 inviter_from_scene = 13;
     */
    inviterFromScene: number;
}
/**
 * @generated from protobuf message data.MultiAnchorExtra
 */
export interface MultiAnchorExtra {
    /**
     * @generated from protobuf field: int32 invite_role = 1;
     */
    inviteRole: number;
    /**
     * @generated from protobuf field: int64 match_type = 2;
     */
    matchType: bigint;
}
/**
 * @generated from protobuf message data.MultiLiveCoreInfo
 */
export interface MultiLiveCoreInfo {
    /**
     * @generated from protobuf field: int32 scene = 1;
     */
    scene: number;
}
/**
 * @generated from protobuf message data.MultiRtcInfo
 */
export interface MultiRtcInfo {
    /**
     * @generated from protobuf field: int32 scene = 1;
     */
    scene: number;
}
/**
 * @generated from protobuf message data.ChangePlayModeData
 */
export interface ChangePlayModeData {
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 1;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: string rtc_ext_info = 2;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_ext_info = 3;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: data.MultiRtcInfo multi_rtc_info = 4;
     */
    multiRtcInfo?: MultiRtcInfo;
    /**
     * @generated from protobuf field: data.MultiLiveCoreInfo multi_live_core_info = 5;
     */
    multiLiveCoreInfo?: MultiLiveCoreInfo;
    /**
     * @generated from protobuf field: repeated int32 play_modes = 6;
     */
    playModes: number[];
    /**
     * @generated from protobuf field: uint64 version = 7;
     */
    version: bigint;
}
/**
 * @generated from protobuf message data.RoomLinkerContent
 */
export interface RoomLinkerContent {
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 1;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: int32 room_link_silence_status = 2;
     */
    roomLinkSilenceStatus: number;
    /**
     * @generated from protobuf field: int64 anchor_id = 3;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: int64 is_anchor_background = 4;
     */
    isAnchorBackground: bigint;
    /**
     * @generated from protobuf field: int64 version = 5;
     */
    version: bigint;
}
/**
 * @generated from protobuf message data.HostInfo
 */
export interface HostInfo {
    /**
     * @generated from protobuf field: int64 is_host = 1;
     */
    isHost: bigint;
    /**
     * @generated from protobuf field: string host_position_name = 2;
     */
    hostPositionName: string;
}
/**
 * @generated from protobuf message data.MicPosTagInfo
 */
export interface MicPosTagInfo {
    /**
     * @generated from protobuf field: int32 tag_type = 1;
     */
    tagType: number;
    /**
     * @generated from protobuf field: string tag_name = 2;
     */
    tagName: string;
    /**
     * @generated from protobuf field: string text_color_value = 3;
     */
    textColorValue: string;
    /**
     * @generated from protobuf field: string bg_color_value = 4;
     */
    bgColorValue: string;
    /**
     * @generated from protobuf field: int64 tag_type_id = 5;
     */
    tagTypeId: bigint;
    /**
     * @generated from protobuf field: data.Image bg_color_img = 6;
     */
    bgColorImg?: Image;
    /**
     * @generated from protobuf field: bool open_tag_desc_page = 7;
     */
    openTagDescPage: boolean;
    /**
     * @generated from protobuf field: string schema = 8;
     */
    schema: string;
}
/**
 * @generated from protobuf message data.ChannelListUser
 */
export interface ChannelListUser {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: int32 link_status = 2;
     */
    linkStatus: number;
    /**
     * @generated from protobuf field: int32 link_type = 3;
     */
    linkType: number;
    /**
     * @generated from protobuf field: int32 silence_status = 4;
     */
    silenceStatus: number;
    /**
     * @generated from protobuf field: int64 modify_time = 5;
     */
    modifyTime: bigint;
    /**
     * @generated from protobuf field: int64 linker_id = 6;
     */
    linkerId: bigint;
    /**
     * @generated from protobuf field: int32 role_type = 7;
     */
    roleType: number;
    /**
     * @generated from protobuf field: int32 apply_type = 8;
     */
    applyType: number;
    /**
     * @generated from protobuf field: int32 invite_type = 9;
     */
    inviteType: number;
    /**
     * @generated from protobuf field: int64 linker_reportor = 10;
     */
    linkerReportor: bigint;
    /**
     * @generated from protobuf field: string rtc_user_id = 11;
     */
    rtcUserId: string;
    /**
     * @generated from protobuf field: string extra = 200;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.AnchorLinkmicChannelInfo
 */
export interface AnchorLinkmicChannelInfo {
    /**
     * @generated from protobuf field: string linkmic_id_str = 1;
     */
    linkmicIdStr: string;
    /**
     * @generated from protobuf field: string rtc_ext_info = 2;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 3;
     */
    multiChannelInfo?: MultiChannelInfo;
}
/**
 * @generated from protobuf message data.KTVComponentMediaInfo
 */
export interface KTVComponentMediaInfo {
    /**
     * @generated from protobuf field: string ktv_live_core_ext_info = 1;
     */
    ktvLiveCoreExtInfo: string;
}
/**
 * @generated from protobuf message data.PersonalKaraokeMediaInfo
 */
export interface PersonalKaraokeMediaInfo {
    /**
     * @generated from protobuf field: string personal_karaoke_live_core_ext_info = 1;
     */
    personalKaraokeLiveCoreExtInfo: string;
}
/**
 * @generated from protobuf message data.LinkmicMediaInfo
 */
export interface LinkmicMediaInfo {
    /**
     * @generated from protobuf field: string rtc_ext_info = 1;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string linkmic_id_str = 2;
     */
    linkmicIdStr: string;
    /**
     * @generated from protobuf field: string live_core_ext_info = 3;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: data.MultiRtcInfo multi_rtc_info = 4;
     */
    multiRtcInfo?: MultiRtcInfo;
    /**
     * @generated from protobuf field: data.MultiLiveCoreInfo multi_live_core_info = 5;
     */
    multiLiveCoreInfo?: MultiLiveCoreInfo;
}
/**
 * @generated from protobuf message data.UpdateMediaInfoNotify
 */
export interface UpdateMediaInfoNotify {
    /**
     * @generated from protobuf field: bool need_update = 1;
     */
    needUpdate: boolean;
    /**
     * @generated from protobuf field: int64 position = 2;
     */
    position: bigint;
}
/**
 * @generated from protobuf message data.LinkmicMediaParam
 */
export interface LinkmicMediaParam {
    /**
     * @generated from protobuf field: int32 linkmic_media_type = 1;
     */
    linkmicMediaType: number;
    /**
     * @generated from protobuf field: data.LinkmicMediaInfo linkmic_media_info = 2;
     */
    linkmicMediaInfo?: LinkmicMediaInfo;
    /**
     * @generated from protobuf field: data.KTVComponentMediaInfo ktv_component_media_info = 3;
     */
    ktvComponentMediaInfo?: KTVComponentMediaInfo;
    /**
     * @generated from protobuf field: data.UpdateMediaInfoNotify update_media_info_notify = 4;
     */
    updateMediaInfoNotify?: UpdateMediaInfoNotify;
    /**
     * @generated from protobuf field: data.PersonalKaraokeMediaInfo personal_karaoke_info = 5;
     */
    personalKaraokeInfo?: PersonalKaraokeMediaInfo;
}
/**
 * @generated from protobuf message data.MCUContent
 */
export interface MCUContent {
    /**
     * @generated from protobuf field: string current_stream_id = 1;
     */
    currentStreamId: string;
    /**
     * @generated from protobuf field: string rivals_stream_id = 2;
     */
    rivalsStreamId: string;
}
/**
 * @generated from protobuf message data.PreRTCInfo
 */
export interface PreRTCInfo {
    /**
     * @generated from protobuf field: int64 version = 3;
     */
    version: bigint;
}
/**
 * @generated from protobuf message data.PreRTCLinkUserInfo
 */
export interface PreRTCLinkUserInfo {
    /**
     * @generated from protobuf field: bool rtc_push_stream = 1;
     */
    rtcPushStream: boolean;
    /**
     * @generated from protobuf field: string linkmic_id_str = 2;
     */
    linkmicIdStr: string;
    /**
     * @generated from protobuf field: int32 link_status = 3;
     */
    linkStatus: number;
}
/**
 * @generated from protobuf message data.MicDress
 */
export interface MicDress {
    /**
     * @generated from protobuf field: data.VoiceWave voice_dress = 1;
     */
    voiceDress?: VoiceWave;
    /**
     * @generated from protobuf field: data.VoiceWave voice_wave = 2;
     */
    voiceWave?: VoiceWave;
}
/**
 * @generated from protobuf message data.VoiceWave
 */
export interface VoiceWave {
    /**
     * @generated from protobuf field: string dress_id = 1;
     */
    dressId: string;
    /**
     * @generated from protobuf field: data.Image low_img = 2;
     */
    lowImg?: Image;
    /**
     * @generated from protobuf field: data.Image medium_img = 3;
     */
    mediumImg?: Image;
    /**
     * @generated from protobuf field: data.Image high_img = 4;
     */
    highImg?: Image;
}
/**
 * @generated from protobuf message data.EmojiPermission
 */
export interface EmojiPermission {
    /**
     * @generated from protobuf field: bool has_permission = 1;
     */
    hasPermission: boolean;
    /**
     * @generated from protobuf field: string toast_without_permission = 2;
     */
    toastWithoutPermission: string;
    /**
     * @generated from protobuf field: string bottom_text = 3;
     */
    bottomText: string;
    /**
     * @generated from protobuf field: string schema = 4;
     */
    schema: string;
}
/**
 * @generated from protobuf message data.SendInteractEmojiConfig
 */
export interface SendInteractEmojiConfig {
    /**
     * @generated from protobuf field: data.Image interact_emoji = 1;
     */
    interactEmoji?: Image;
    /**
     * @generated from protobuf field: int64 duration_ms = 2;
     */
    durationMs: bigint;
    /**
     * @generated from protobuf field: int64 start = 3;
     */
    start: bigint;
    /**
     * @generated from protobuf field: data.Image own_emoji = 4;
     */
    ownEmoji?: Image;
    /**
     * @generated from protobuf field: int64 own_emoji_duration_ms = 5;
     */
    ownEmojiDurationMs: bigint;
    /**
     * @generated from protobuf field: int64 offset = 6;
     */
    offset: bigint;
    /**
     * @generated from protobuf field: int64 scale_up = 7;
     */
    scaleUp: bigint;
    /**
     * @generated from protobuf field: bool reshape = 8;
     */
    reshape: boolean;
    /**
     * @generated from protobuf field: string sound_url = 9;
     */
    soundUrl: string;
    /**
     * @generated from protobuf field: int64 reshape_start = 10;
     */
    reshapeStart: bigint;
}
/**
 * @generated from protobuf message data.EmojiInteractResource
 */
export interface EmojiInteractResource {
    /**
     * @generated from protobuf field: data.SendInteractEmojiConfig from_image = 1;
     */
    fromImage?: SendInteractEmojiConfig;
    /**
     * @generated from protobuf field: data.SendInteractEmojiConfig pass_image = 2;
     */
    passImage?: SendInteractEmojiConfig;
    /**
     * @generated from protobuf field: data.SendInteractEmojiConfig to_image = 3;
     */
    toImage?: SendInteractEmojiConfig;
}
/**
 * @generated from protobuf message data.EmojiAvatarResource
 */
export interface EmojiAvatarResource {
    /**
     * @generated from protobuf field: int64 action_id = 1;
     */
    actionId: bigint;
}
/**
 * @generated from protobuf message data.EmojiTag
 */
export interface EmojiTag {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
}
/**
 * @generated from protobuf message data.LinkmicAudienceEmoji
 */
export interface LinkmicAudienceEmoji {
    /**
     * @generated from protobuf field: int64 emoji_id = 1;
     */
    emojiId: bigint;
    /**
     * @generated from protobuf field: bool is_random = 2;
     */
    isRandom: boolean;
    /**
     * @generated from protobuf field: data.Image emoji_image = 3;
     */
    emojiImage?: Image;
    /**
     * @generated from protobuf field: data.Image emoji_dynamic_image = 4;
     */
    emojiDynamicImage?: Image;
    /**
     * @generated from protobuf field: string emoji_name = 5;
     */
    emojiName: string;
    /**
     * @generated from protobuf field: int64 animation_duration_ms = 6;
     */
    animationDurationMs: bigint;
    /**
     * @generated from protobuf field: int64 emoji_result_duration_ms = 7;
     */
    emojiResultDurationMs: bigint;
    /**
     * @generated from protobuf field: int32 type = 8;
     */
    type: number;
    /**
     * @generated from protobuf field: data.EmojiPermission permission = 9;
     */
    permission?: EmojiPermission;
    /**
     * @generated from protobuf field: string emoji_sound = 10;
     */
    emojiSound: string;
    /**
     * @generated from protobuf field: data.EmojiInteractResource interact_resource = 11;
     */
    interactResource?: EmojiInteractResource;
    /**
     * @generated from protobuf field: int32 category_type = 12;
     */
    categoryType: number;
    /**
     * @generated from protobuf field: data.EmojiAvatarResource avatar_resource = 13;
     */
    avatarResource?: EmojiAvatarResource;
    /**
     * @generated from protobuf field: bool need_reverse = 14;
     */
    needReverse: boolean;
    /**
     * @generated from protobuf field: data.EmojiTag emoji_tag = 15;
     */
    emojiTag?: EmojiTag;
    /**
     * @generated from protobuf field: int32 emoji_status = 16;
     */
    emojiStatus: number;
}
/**
 * @generated from protobuf message data.AnchorLinkmicInfo
 */
export interface AnchorLinkmicInfo {
    /**
     * @generated from protobuf field: string rtc_ext_info = 1;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string linkmic_id_str = 2;
     */
    linkmicIdStr: string;
    /**
     * @generated from protobuf field: bool use_backup_stream = 3;
     */
    useBackupStream: boolean;
}
/**
 * @generated from protobuf message data.LinkmicPositionItem
 */
export interface LinkmicPositionItem {
    /**
     * @generated from protobuf field: int64 position = 1;
     */
    position: bigint;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: string active_name = 3;
     */
    activeName: string;
    /**
     * @generated from protobuf field: int32 verify_status = 4;
     */
    verifyStatus: number;
    /**
     * @generated from protobuf field: int32 position_type = 5;
     */
    positionType: number;
}
/**
 * @generated from protobuf message data.LinkmicQuickInteract
 */
export interface LinkmicQuickInteract {
    /**
     * @generated from protobuf field: data.User send_gift_user = 1;
     */
    sendGiftUser?: User;
    /**
     * @generated from protobuf field: int64 thanks_carousel_duration = 2;
     */
    thanksCarouselDuration: bigint;
    /**
     * @generated from protobuf field: string thanks_content = 3;
     */
    thanksContent: string;
    /**
     * @generated from protobuf field: int64 receive_gift_user_id = 4;
     */
    receiveGiftUserId: bigint;
}
/**
 * @generated from protobuf message data.InviteRoomInfo
 */
export interface InviteRoomInfo {
    /**
     * @generated from protobuf field: int64 inviter_room_id = 1;
     */
    inviterRoomId: bigint;
    /**
     * @generated from protobuf field: int64 live_room_mode = 2;
     */
    liveRoomMode: bigint;
    /**
     * @generated from protobuf field: int64 user_count = 3;
     */
    userCount: bigint;
    /**
     * @generated from protobuf field: int64 score = 4;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string user_count_fuzzy = 5;
     */
    userCountFuzzy: string;
    /**
     * @generated from protobuf field: string score_fuzzy = 6;
     */
    scoreFuzzy: string;
    /**
     * @generated from protobuf field: string room_desc = 7;
     */
    roomDesc: string;
    /**
     * @generated from protobuf field: string inviter_room_id_str = 8;
     */
    inviterRoomIdStr: string;
}
/**
 * @generated from protobuf message data.CrossRoomLinkReplyGuestInfo
 */
export interface CrossRoomLinkReplyGuestInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: bool is_low_client_version = 2;
     */
    isLowClientVersion: boolean;
    /**
     * @generated from protobuf field: bool is_selected = 3;
     */
    isSelected: boolean;
    /**
     * @generated from protobuf field: bool is_not_support_app = 4;
     */
    isNotSupportApp: boolean;
    /**
     * @generated from protobuf field: string user_id_str = 5;
     */
    userIdStr: string;
}
/**
 * @generated from protobuf message data.UserHighScoreSongTag
 */
export interface UserHighScoreSongTag {
    /**
     * @generated from protobuf field: string high_score_song_count = 1;
     */
    highScoreSongCount: string;
    /**
     * @generated from protobuf field: string icon = 2;
     */
    icon: string;
    /**
     * @generated from protobuf field: repeated string bg_color = 3;
     */
    bgColor: string[];
}
/**
 * @generated from protobuf message data.KtvSongStruct
 */
export interface KtvSongStruct {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string author = 3;
     */
    author: string;
    /**
     * @generated from protobuf field: int64 lyric_type = 4;
     */
    lyricType: bigint;
    /**
     * @generated from protobuf field: string song_url = 5;
     */
    songUrl: string;
    /**
     * @generated from protobuf field: repeated string lyric_url_list = 6;
     */
    lyricUrlList: string[];
    /**
     * @generated from protobuf field: int64 duration = 7;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string cover_url = 8;
     */
    coverUrl: string;
    /**
     * @generated from protobuf field: int64 song_pattern = 9;
     */
    songPattern: bigint;
    /**
     * @generated from protobuf field: double preview_start_time = 10;
     */
    previewStartTime: number;
    /**
     * @generated from protobuf field: data.KtvSongStruct.AudioInfo full_track = 11;
     */
    fullTrack?: KtvSongStruct_AudioInfo;
    /**
     * @generated from protobuf field: data.KtvSongStruct.AudioInfo accompaniment_track = 12;
     */
    accompanimentTrack?: KtvSongStruct_AudioInfo;
    /**
     * @generated from protobuf field: string new_cover_url = 13;
     */
    newCoverUrl: string;
    /**
     * @generated from protobuf field: string midi_url = 14;
     */
    midiUrl: string;
    /**
     * @generated from protobuf field: bool is_favorite = 15;
     */
    isFavorite: boolean;
    /**
     * @generated from protobuf field: data.KtvSongStruct.OrderInfo order_info = 16;
     */
    orderInfo?: KtvSongStruct_OrderInfo;
    /**
     * @generated from protobuf field: repeated string tags = 17;
     */
    tags: string[];
    /**
     * @generated from protobuf field: repeated data.MusicInterval music_climax = 19;
     */
    musicClimax: MusicInterval[];
    /**
     * @generated from protobuf field: repeated data.MusicInterval preludes = 20;
     */
    preludes: MusicInterval[];
    /**
     * @generated from protobuf field: repeated data.MusicInterval interludes = 21;
     */
    interludes: MusicInterval[];
    /**
     * @generated from protobuf field: repeated data.MusicInterval segments = 22;
     */
    segments: MusicInterval[];
    /**
     * @generated from protobuf field: string pattern_file_url = 23;
     */
    patternFileUrl: string;
    /**
     * @generated from protobuf field: repeated data.MusicInterval bridge_segments = 24;
     */
    bridgeSegments: MusicInterval[];
    /**
     * @generated from protobuf field: repeated data.MusicInterval main_segments = 25;
     */
    mainSegments: MusicInterval[];
    /**
     * @generated from protobuf field: repeated data.MusicInterval finale_segments = 26;
     */
    finaleSegments: MusicInterval[];
    /**
     * @generated from protobuf field: data.ChorusVideoInfo chorus_info = 27;
     */
    chorusInfo?: ChorusVideoInfo;
    /**
     * @generated from protobuf field: int32 song_type = 28;
     */
    songType: number;
    /**
     * @generated from protobuf field: string add_song_source = 29;
     */
    addSongSource: string;
    /**
     * @generated from protobuf field: int64 total_order_with_cur_anchor = 30;
     */
    totalOrderWithCurAnchor: bigint;
    /**
     * @generated from protobuf field: int64 global_total_order = 31;
     */
    globalTotalOrder: bigint;
    /**
     * @generated from protobuf field: repeated int64 artist_ids = 32;
     */
    artistIds: bigint[];
    /**
     * @generated from protobuf field: string id_str = 33;
     */
    idStr: string;
    /**
     * @generated from protobuf field: repeated int32 song_copyright = 34;
     */
    songCopyright: number[];
    /**
     * @generated from protobuf field: bool is_prior_song = 35;
     */
    isPriorSong: boolean;
    /**
     * @generated from protobuf field: bool is_fragment_song = 36;
     */
    isFragmentSong: boolean;
    /**
     * @generated from protobuf field: string fragment_lyric = 37;
     */
    fragmentLyric: string;
    /**
     * @generated from protobuf field: data.KtvSongStruct.PersonalSongInfo personal_song_info = 38;
     */
    personalSongInfo?: KtvSongStruct_PersonalSongInfo;
    /**
     * @generated from protobuf field: string lyric_hash = 39;
     */
    lyricHash: string;
    /**
     * @generated from protobuf field: string midi_hash = 40;
     */
    midiHash: string;
    /**
     * @generated from protobuf field: data.KtvSongStruct.WantListenInfo want_listen_info = 41;
     */
    wantListenInfo?: KtvSongStruct_WantListenInfo;
    /**
     * @generated from protobuf field: data.KtvSongStruct.ChallengeInfo challenge_info = 42;
     */
    challengeInfo?: KtvSongStruct_ChallengeInfo;
}
/**
 * @generated from protobuf message data.KtvSongStruct.AudioInfo
 */
export interface KtvSongStruct_AudioInfo {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: int64 song_patten = 2;
     */
    songPatten: bigint;
    /**
     * @generated from protobuf field: int64 audio_id = 3;
     */
    audioId: bigint;
    /**
     * @generated from protobuf field: double volume_lufs = 4;
     */
    volumeLufs: number;
    /**
     * @generated from protobuf field: double volume_peak = 5;
     */
    volumePeak: number;
    /**
     * @generated from protobuf field: double bpm = 6;
     */
    bpm: number;
    /**
     * @generated from protobuf field: string beats_point_url = 7;
     */
    beatsPointUrl: string;
    /**
     * @generated from protobuf field: int64 create_time = 8;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: string file_hash = 9;
     */
    fileHash: string;
}
/**
 * @generated from protobuf message data.KtvSongStruct.UserInfo
 */
export interface KtvSongStruct_UserInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
    /**
     * @generated from protobuf field: data.Image avatar = 3;
     */
    avatar?: Image;
    /**
     * @generated from protobuf field: string id_str = 4;
     */
    idStr: string;
    /**
     * @generated from protobuf field: string high_score_song_count = 5;
     */
    highScoreSongCount: string;
    /**
     * @generated from protobuf field: string ktv_stage_mic_pos_tag_text = 6;
     */
    ktvStageMicPosTagText: string;
    /**
     * @generated from protobuf field: int32 ktv_lyric_text = 7;
     */
    ktvLyricText: number;
    /**
     * @generated from protobuf field: string ktv_component_lyric_text_first_line = 8;
     */
    ktvComponentLyricTextFirstLine: string;
    /**
     * @generated from protobuf field: int32 ktv_component_lyric_text_second_line = 9;
     */
    ktvComponentLyricTextSecondLine: number;
    /**
     * @generated from protobuf field: data.UserHighScoreSongTag high_score_song_tag = 10;
     */
    highScoreSongTag?: UserHighScoreSongTag;
    /**
     * @generated from protobuf field: int64 hit_midi_record_ab = 11;
     */
    hitMidiRecordAb: bigint;
    /**
     * @generated from protobuf field: double user_midi_score = 12;
     */
    userMidiScore: number;
    /**
     * @generated from protobuf field: bool is_high_score_song = 13;
     */
    isHighScoreSong: boolean;
}
/**
 * @generated from protobuf message data.KtvSongStruct.OrderInfo
 */
export interface KtvSongStruct_OrderInfo {
    /**
     * @generated from protobuf field: data.KtvSongStruct.UserInfo top_user = 1;
     */
    topUser?: KtvSongStruct_UserInfo;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 order_count = 3;
     */
    orderCount: bigint;
    /**
     * @generated from protobuf field: bool has_added = 4;
     */
    hasAdded: boolean;
}
/**
 * @generated from protobuf message data.KtvSongStruct.PersonalSongInfo
 */
export interface KtvSongStruct_PersonalSongInfo {
    /**
     * @generated from protobuf field: double user_midi_score = 1;
     */
    userMidiScore: number;
    /**
     * @generated from protobuf field: bool is_high_score_song = 2;
     */
    isHighScoreSong: boolean;
}
/**
 * @generated from protobuf message data.KtvSongStruct.WantListenInfo
 */
export interface KtvSongStruct_WantListenInfo {
    /**
     * @generated from protobuf field: int64 want_listen_count = 1;
     */
    wantListenCount: bigint;
}
/**
 * @generated from protobuf message data.KtvSongStruct.ChallengeInfo
 */
export interface KtvSongStruct_ChallengeInfo {
    /**
     * @generated from protobuf field: int32 ktv_challenge_type = 1;
     */
    ktvChallengeType: number;
    /**
     * @generated from protobuf field: bool is_success = 2;
     */
    isSuccess: boolean;
    /**
     * @generated from protobuf field: double score = 3;
     */
    score: number;
}
/**
 * @generated from protobuf message data.MusicInterval
 */
export interface MusicInterval {
    /**
     * @generated from protobuf field: int64 StartTimeMillisecond = 1 [json_name = "StartTimeMillisecond"];
     */
    startTimeMillisecond: bigint;
    /**
     * @generated from protobuf field: int64 DurationMillisecond = 2 [json_name = "DurationMillisecond"];
     */
    durationMillisecond: bigint;
}
/**
 * @generated from protobuf message data.ChorusVideoInfo
 */
export interface ChorusVideoInfo {
    /**
     * @generated from protobuf field: int64 item_id = 1;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: string item_description = 2;
     */
    itemDescription: string;
    /**
     * @generated from protobuf field: string item_url = 3;
     */
    itemUrl: string;
    /**
     * @generated from protobuf field: int64 author_id = 4;
     */
    authorId: bigint;
    /**
     * @generated from protobuf field: string author_name = 5;
     */
    authorName: string;
    /**
     * @generated from protobuf field: int64 use_times = 6;
     */
    useTimes: bigint;
    /**
     * @generated from protobuf field: data.Image image = 7;
     */
    image?: Image;
}
/**
 * @generated from protobuf message data.KtvAtmosphereVideoFrameColorData
 */
export interface KtvAtmosphereVideoFrameColorData {
    /**
     * @generated from protobuf field: data.KtvAtmosphereVideoFrameColorData.Color main = 1;
     */
    main?: KtvAtmosphereVideoFrameColorData_Color;
    /**
     * @generated from protobuf field: data.KtvAtmosphereVideoFrameColorData.Color secondary = 2;
     */
    secondary?: KtvAtmosphereVideoFrameColorData_Color;
}
/**
 * @generated from protobuf message data.KtvAtmosphereVideoFrameColorData.Color
 */
export interface KtvAtmosphereVideoFrameColorData_Color {
    /**
     * @generated from protobuf field: int32 red = 1;
     */
    red: number;
    /**
     * @generated from protobuf field: int32 green = 2;
     */
    green: number;
    /**
     * @generated from protobuf field: int32 blue = 3;
     */
    blue: number;
}
/**
 * @generated from protobuf message data.KtvAtmosphereVideoInfo
 */
export interface KtvAtmosphereVideoInfo {
    /**
     * @generated from protobuf field: string vid = 1;
     */
    vid: string;
    /**
     * @generated from protobuf field: string play_auth_token = 2;
     */
    playAuthToken: string;
    /**
     * @generated from protobuf field: int32 video_type = 3;
     */
    videoType: number;
    /**
     * @generated from protobuf field: repeated data.KtvAtmosphereVideoFrameColorData frame_color_data = 4;
     */
    frameColorData: KtvAtmosphereVideoFrameColorData[];
    /**
     * @generated from protobuf field: repeated string video_url = 5;
     */
    videoUrl: string[];
}
/**
 * @generated from protobuf message data.LinkmicTeamfightContributors
 */
export interface LinkmicTeamfightContributors {
    /**
     * @generated from protobuf field: repeated int64 user_ids = 1;
     */
    userIds: bigint[];
}
/**
 * @generated from protobuf message data.LinkmicTeamfightPlayer
 */
export interface LinkmicTeamfightPlayer {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string score_str = 3;
     */
    scoreStr: string;
    /**
     * @generated from protobuf field: string score_fuzzy = 4;
     */
    scoreFuzzy: string;
    /**
     * @generated from protobuf field: data.LinkmicTeamfightContributors contributors = 5;
     */
    contributors?: LinkmicTeamfightContributors;
    /**
     * @generated from protobuf field: int32 role = 6;
     */
    role: number;
}
/**
 * @generated from protobuf message data.LinkmicTeamfightBonusInfo
 */
export interface LinkmicTeamfightBonusInfo {
    /**
     * @generated from protobuf field: int64 start_time = 1;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: double coefficient = 3;
     */
    coefficient: number;
}
/**
 * @generated from protobuf message data.LinkmicTeamfightTeamInfo
 */
export interface LinkmicTeamfightTeamInfo {
    /**
     * @generated from protobuf field: int64 team_id = 1;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string score_str = 3;
     */
    scoreStr: string;
    /**
     * @generated from protobuf field: string score_fuzzy = 4;
     */
    scoreFuzzy: string;
    /**
     * @generated from protobuf field: data.LinkmicTeamfightContributors contributors = 5;
     */
    contributors?: LinkmicTeamfightContributors;
    /**
     * @generated from protobuf field: repeated data.LinkmicTeamfightPlayer players = 6;
     */
    players: LinkmicTeamfightPlayer[];
    /**
     * @generated from protobuf field: bool is_score_fuzzy = 7;
     */
    isScoreFuzzy: boolean;
    /**
     * @generated from protobuf field: int64 owner_id = 8;
     */
    ownerId: bigint;
    /**
     * @generated from protobuf field: string team_id_str = 9;
     */
    teamIdStr: string;
    /**
     * @generated from protobuf field: data.LinkmicTeamfightBonusInfo bonus_info = 10;
     */
    bonusInfo?: LinkmicTeamfightBonusInfo;
}
/**
 * @generated from protobuf message data.LinkmicTeamfightInfo
 */
export interface LinkmicTeamfightInfo {
    /**
     * @generated from protobuf field: int64 teamfight_id = 1;
     */
    teamfightId: bigint;
    /**
     * @generated from protobuf field: string teamfight_id_str = 2;
     */
    teamfightIdStr: string;
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 start_time = 5;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 duration = 6;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 punish_start_time = 7;
     */
    punishStartTime: bigint;
    /**
     * @generated from protobuf field: int64 punish_duration = 8;
     */
    punishDuration: bigint;
    /**
     * @generated from protobuf field: repeated data.LinkmicTeamfightTeamInfo team_infos = 9;
     */
    teamInfos: LinkmicTeamfightTeamInfo[];
    /**
     * @generated from protobuf field: int64 win_team_id = 10;
     */
    winTeamId: bigint;
    /**
     * @generated from protobuf field: int64 current_time_ms = 11;
     */
    currentTimeMs: bigint;
    /**
     * @generated from protobuf field: int32 pk_bar_style = 12;
     */
    pkBarStyle: number;
    /**
     * @generated from protobuf field: int64 show_start_time = 13;
     */
    showStartTime: bigint;
    /**
     * @generated from protobuf field: int64 initiator_user_id = 14;
     */
    initiatorUserId: bigint;
    /**
     * @generated from protobuf field: int32 score_type = 15;
     */
    scoreType: number;
    /**
     * @generated from protobuf field: int64 show_duration = 16;
     */
    showDuration: bigint;
    /**
     * @generated from protobuf field: int64 initiator_anchor_id = 17;
     */
    initiatorAnchorId: bigint;
    /**
     * @generated from protobuf field: string win_team_id_str = 18;
     */
    winTeamIdStr: string;
    /**
     * @generated from protobuf field: string dress_id = 19;
     */
    dressId: string;
    /**
     * @generated from protobuf field: data.TeamfightRoomBattleContent room_battle_content = 100;
     */
    roomBattleContent?: TeamfightRoomBattleContent;
}
/**
 * @generated from protobuf message data.JoinTeamfightInfo
 */
export interface JoinTeamfightInfo {
    /**
     * @generated from protobuf field: int64 team_id = 1;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: string team_id_str = 2;
     */
    teamIdStr: string;
}
/**
 * @generated from protobuf message data.RoomBattleProcessInfo
 */
export interface RoomBattleProcessInfo {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: data.RoomBattleProcessSelectGuestsContent select_guests_content = 2;
     */
    selectGuestsContent?: RoomBattleProcessSelectGuestsContent;
    /**
     * @generated from protobuf field: data.RoomBattleProcessWaitingBattleContent waiting_battle_content = 3;
     */
    waitingBattleContent?: RoomBattleProcessWaitingBattleContent;
}
/**
 * @generated from protobuf message data.RoomBattleProcessSelectGuestsContent
 */
export interface RoomBattleProcessSelectGuestsContent {
    /**
     * @generated from protobuf field: repeated data.CrossRoomLinkReplyGuestInfo guest_infos = 1;
     */
    guestInfos: CrossRoomLinkReplyGuestInfo[];
}
/**
 * @generated from protobuf message data.RoomBattleProcessWaitingBattleContent
 */
export interface RoomBattleProcessWaitingBattleContent {
    /**
     * @generated from protobuf field: string toast = 1;
     */
    toast: string;
    /**
     * @generated from protobuf field: int64 select_guests_waiting_sec = 2;
     */
    selectGuestsWaitingSec: bigint;
}
/**
 * @generated from protobuf message data.RoomBattleRoomInfo
 */
export interface RoomBattleRoomInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int32 join_status = 2;
     */
    joinStatus: number;
    /**
     * @generated from protobuf field: int64 start_operator_user_id = 3;
     */
    startOperatorUserId: bigint;
}
/**
 * @generated from protobuf message data.TeamfightRoomBattleContent
 */
export interface TeamfightRoomBattleContent {
    /**
     * @generated from protobuf field: int32 invite_source = 2;
     */
    inviteSource: number;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
    /**
     * @generated from protobuf field: data.RoomBattleMode room_battle_mode = 4;
     */
    roomBattleMode?: RoomBattleMode;
    /**
     * @generated from protobuf field: string if_theme_default = 5;
     */
    ifThemeDefault: string;
    /**
     * @generated from protobuf field: int64 theme_chooser_room_id = 6;
     */
    themeChooserRoomId: bigint;
    /**
     * @generated from protobuf field: int64 if_peak_hour = 7;
     */
    ifPeakHour: bigint;
    /**
     * @generated from protobuf field: string anchor_relation_type = 8;
     */
    anchorRelationType: string;
    /**
     * @generated from protobuf field: string begin_type = 9;
     */
    beginType: string;
}
/**
 * @generated from protobuf message data.RoomBattleThemeParam
 */
export interface RoomBattleThemeParam {
    /**
     * @generated from protobuf field: int64 theme_id = 1;
     */
    themeId: bigint;
    /**
     * @generated from protobuf field: int32 theme_type = 2;
     */
    themeType: number;
    /**
     * @generated from protobuf field: string theme_title = 3;
     */
    themeTitle: string;
    /**
     * @generated from protobuf field: string theme_description = 4;
     */
    themeDescription: string;
}
/**
 * @generated from protobuf message data.RoomBattleMode
 */
export interface RoomBattleMode {
    /**
     * @generated from protobuf field: int32 room_battle_mode_type = 1;
     */
    roomBattleModeType: number;
    /**
     * @generated from protobuf field: data.RoomBattleThemeParam room_battle_theme_param = 100;
     */
    roomBattleThemeParam?: RoomBattleThemeParam;
}
/**
 * @generated from protobuf message data.ChorusInfo
 */
export interface ChorusInfo {
    /**
     * @generated from protobuf field: int64 chorus_id = 1;
     */
    chorusId: bigint;
    /**
     * @generated from protobuf field: int64 lead_singer_id = 2;
     */
    leadSingerId: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 3;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 finish_time = 4;
     */
    finishTime: bigint;
}
/**
 * @generated from protobuf message data.ChorusSongInfo
 */
export interface ChorusSongInfo {
    /**
     * @generated from protobuf field: data.KtvSongStruct music = 1;
     */
    music?: KtvSongStruct;
    /**
     * @generated from protobuf field: bool is_self_seeing = 2;
     */
    isSelfSeeing: boolean;
}
/**
 * @generated from protobuf message data.BottomRightCardArea
 */
export interface BottomRightCardArea {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: uint32 priority = 2;
     */
    priority: number;
    /**
     * @generated from protobuf field: int32 toolbar_type = 3;
     */
    toolbarType: number;
    /**
     * @generated from protobuf field: data.CombineType combine_type = 4;
     */
    combineType?: CombineType;
    /**
     * @generated from protobuf field: data.CardDisplayInfo card_display_info = 5;
     */
    cardDisplayInfo?: CardDisplayInfo;
    /**
     * @generated from protobuf field: data.AnimConfig anim_config = 61;
     */
    animConfig?: AnimConfig;
    /**
     * @generated from protobuf field: bool is_preloading = 62;
     */
    isPreloading: boolean;
    /**
     * @generated from protobuf field: int32 mock_type = 6;
     */
    mockType: number;
}
/**
 * @generated from protobuf message data.AnimConfig
 */
export interface AnimConfig {
    /**
     * @generated from protobuf field: bool is_anim_supported = 1;
     */
    isAnimSupported: boolean;
    /**
     * @generated from protobuf field: int32 enter_anim_type = 2;
     */
    enterAnimType: number;
    /**
     * @generated from protobuf field: int32 exit_anim_type = 3;
     */
    exitAnimType: number;
}
/**
 * @generated from protobuf message data.CombineType
 */
export interface CombineType {
    /**
     * @generated from protobuf field: int32 area_type = 1;
     */
    areaType: number;
    /**
     * @generated from protobuf field: int32 area_sub_type = 2;
     */
    areaSubType: number;
}
/**
 * @generated from protobuf message data.CardDisplayInfo
 */
export interface CardDisplayInfo {
    /**
     * @generated from protobuf field: int32 card_id = 1;
     */
    cardId: number;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string fallback_url = 3;
     */
    fallbackUrl: string;
    /**
     * @generated from protobuf field: int32 container_type = 4;
     */
    containerType: number;
    /**
     * @generated from protobuf field: int64 duration_ms = 5;
     */
    durationMs: bigint;
    /**
     * @generated from protobuf field: uint32 width = 10;
     */
    width: number;
    /**
     * @generated from protobuf field: uint32 height = 11;
     */
    height: number;
    /**
     * @generated from protobuf field: uint32 bottom = 12;
     */
    bottom: number;
    /**
     * @generated from protobuf field: uint32 right = 13;
     */
    right: number;
    /**
     * @generated from protobuf field: string container_payload = 20;
     */
    containerPayload: string;
    /**
     * @generated from protobuf field: data.CardTriggerConfig trigger_config = 30;
     */
    triggerConfig?: CardTriggerConfig;
    /**
     * @generated from protobuf field: repeated data.CardCondition condition_list = 31;
     */
    conditionList: CardCondition[];
    /**
     * @generated from protobuf field: data.CardPreDefeatStrategy pre_defeat_strategy = 40;
     */
    preDefeatStrategy?: CardPreDefeatStrategy;
    /**
     * @generated from protobuf field: data.CardShowDefeatStrategy show_defeat_strategy = 41;
     */
    showDefeatStrategy?: CardShowDefeatStrategy;
    /**
     * @generated from protobuf field: data.LandScapeConfig landscape_config = 60;
     */
    landscapeConfig?: LandScapeConfig;
    /**
     * @generated from protobuf field: string accessible_name = 50;
     */
    accessibleName: string;
}
/**
 * @generated from protobuf message data.LandScapeConfig
 */
export interface LandScapeConfig {
    /**
     * @generated from protobuf field: bool is_landscape_supported = 1;
     */
    isLandscapeSupported: boolean;
    /**
     * @generated from protobuf field: uint32 width = 2;
     */
    width: number;
    /**
     * @generated from protobuf field: uint32 height = 3;
     */
    height: number;
    /**
     * @generated from protobuf field: uint32 bottom = 4;
     */
    bottom: number;
    /**
     * @generated from protobuf field: uint32 right = 5;
     */
    right: number;
}
/**
 * @generated from protobuf message data.CardTriggerConfig
 */
export interface CardTriggerConfig {
    /**
     * @generated from protobuf field: uint32 strategy = 1;
     */
    strategy: number;
    /**
     * @generated from protobuf field: repeated data.CardTrigger commonTriggerList = 2;
     */
    commonTriggerList: CardTrigger[];
}
/**
 * @generated from protobuf message data.CardTrigger
 */
export interface CardTrigger {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: int64 value = 2;
     */
    value: bigint;
}
/**
 * @generated from protobuf message data.CardCondition
 */
export interface CardCondition {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: int64 value = 2;
     */
    value: bigint;
}
/**
 * @generated from protobuf message data.CardPreDefeatStrategy
 */
export interface CardPreDefeatStrategy {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: int64 value = 2;
     */
    value: bigint;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.CardShowDefeatStrategy
 */
export interface CardShowDefeatStrategy {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: int64 value = 2;
     */
    value: bigint;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.GiftPreviewInfo
 */
export interface GiftPreviewInfo {
    /**
     * @generated from protobuf field: int64 lock_status = 1;
     */
    lockStatus: bigint;
    /**
     * @generated from protobuf field: bool client_block_use_scheme_url = 2;
     */
    clientBlockUseSchemeUrl: boolean;
    /**
     * @generated from protobuf field: string block_scheme_url = 3;
     */
    blockSchemeUrl: string;
    /**
     * @generated from protobuf field: bool client_check_left_diamond = 4;
     */
    clientCheckLeftDiamond: boolean;
    /**
     * @generated from protobuf field: string block_toast = 5;
     */
    blockToast: string;
}
/**
 * @generated from protobuf message data.BuffLockInfo
 */
export interface BuffLockInfo {
    /**
     * @generated from protobuf field: bool locked = 1;
     */
    locked: boolean;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
    /**
     * @generated from protobuf field: string schema = 3;
     */
    schema: string;
    /**
     * @generated from protobuf field: string cell_text = 4;
     */
    cellText: string;
}
/**
 * @generated from protobuf message data.GiftBuffInfo
 */
export interface GiftBuffInfo {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: string text_color = 2;
     */
    textColor: string;
    /**
     * @generated from protobuf field: data.Image bg_img = 3;
     */
    bgImg?: Image;
    /**
     * @generated from protobuf field: data.Image sweep_light_img = 4;
     */
    sweepLightImg?: Image;
    /**
     * @generated from protobuf field: data.Image buff_gift_describe_img = 5;
     */
    buffGiftDescribeImg?: Image;
    /**
     * @generated from protobuf field: int64 buff_gift_id = 6;
     */
    buffGiftId: bigint;
    /**
     * @generated from protobuf field: int32 buff_level = 7;
     */
    buffLevel: number;
    /**
     * @generated from protobuf field: bool buff_can_send = 8;
     */
    buffCanSend: boolean;
    /**
     * @generated from protobuf field: int64 buff_diamond_count = 9;
     */
    buffDiamondCount: bigint;
    /**
     * @generated from protobuf field: string lock_toast = 10;
     */
    lockToast: string;
    /**
     * @generated from protobuf field: int64 default_chose_action = 11;
     */
    defaultChoseAction: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 12;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: data.BuffLockInfo buff_lock_info = 13;
     */
    buffLockInfo?: BuffLockInfo;
}
/**
 * @generated from protobuf message data.GiftTip
 */
export interface GiftTip {
    /**
     * @generated from protobuf field: data.Text display_text = 1;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: string background_color = 2;
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: data.Image prefix_image = 3;
     */
    prefixImage?: Image;
    /**
     * @generated from protobuf field: int64 remaining_duration = 4;
     */
    remainingDuration: bigint;
    /**
     * @generated from protobuf field: data.Text remaining_duration_suffix_text = 5;
     */
    remainingDurationSuffixText?: Text;
    /**
     * @generated from protobuf field: int64 countdown_deadline_time = 6;
     */
    countdownDeadlineTime: bigint;
}
/**
 * @generated from protobuf message data.GiftStruct
 */
export interface GiftStruct {
    /**
     * @generated from protobuf field: data.Image image = 1;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string describe = 2;
     */
    describe: string;
    /**
     * @generated from protobuf field: bool notify = 3;
     */
    notify: boolean;
    /**
     * @generated from protobuf field: int64 duration = 4;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 id = 5;
     */
    id: bigint;
    /**
     * @generated from protobuf field: data.GiftStruct.GiftStructFansClubInfo fansclub_info = 6;
     */
    fansclubInfo?: GiftStruct_GiftStructFansClubInfo;
    /**
     * @generated from protobuf field: bool for_linkmic = 7;
     */
    forLinkmic: boolean;
    /**
     * @generated from protobuf field: bool doodle = 8;
     */
    doodle: boolean;
    /**
     * @generated from protobuf field: bool for_fansclub = 9;
     */
    forFansclub: boolean;
    /**
     * @generated from protobuf field: bool combo = 10;
     */
    combo: boolean;
    /**
     * @generated from protobuf field: int32 type = 11;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 diamond_count = 12;
     */
    diamondCount: number;
    /**
     * @generated from protobuf field: bool is_displayed_on_panel = 13;
     */
    isDisplayedOnPanel: boolean;
    /**
     * @generated from protobuf field: int64 primary_effect_id = 14;
     */
    primaryEffectId: bigint;
    /**
     * @generated from protobuf field: data.Image gift_label_icon = 15;
     */
    giftLabelIcon?: Image;
    /**
     * @generated from protobuf field: string name = 16;
     */
    name: string;
    /**
     * @generated from protobuf field: string region = 17;
     */
    region: string;
    /**
     * @generated from protobuf field: string manual = 18;
     */
    manual: string;
    /**
     * @generated from protobuf field: bool for_custom = 19;
     */
    forCustom: boolean;
    /**
     * @generated from protobuf field: data.Image icon = 21;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int32 action_type = 22;
     */
    actionType: number;
    /**
     * @generated from protobuf field: int32 watermelon_seeds = 23;
     */
    watermelonSeeds: number;
    /**
     * @generated from protobuf field: string gold_effect = 24;
     */
    goldEffect: string;
    /**
     * @generated from protobuf field: repeated data.LuckyMoneyGiftMeta subs = 25;
     */
    subs: LuckyMoneyGiftMeta[];
    /**
     * @generated from protobuf field: int64 golden_beans = 26;
     */
    goldenBeans: bigint;
    /**
     * @generated from protobuf field: int64 honor_level = 27;
     */
    honorLevel: bigint;
    /**
     * @generated from protobuf field: int32 item_type = 28;
     */
    itemType: number;
    /**
     * @generated from protobuf field: string scheme_url = 29;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: data.GiftPanelOperation gift_operation = 30;
     */
    giftOperation?: GiftPanelOperation;
    /**
     * @generated from protobuf field: string event_name = 31;
     */
    eventName: string;
    /**
     * @generated from protobuf field: int64 noble_level = 32;
     */
    nobleLevel: bigint;
    /**
     * @generated from protobuf field: string guide_url = 33;
     */
    guideUrl: string;
    /**
     * @generated from protobuf field: bool punish_medicine = 34;
     */
    punishMedicine: boolean;
    /**
     * @generated from protobuf field: bool for_portal = 35;
     */
    forPortal: boolean;
    /**
     * @generated from protobuf field: string business_text = 36;
     */
    businessText: string;
    /**
     * @generated from protobuf field: bool cny_gift = 37;
     */
    cnyGift: boolean;
    /**
     * @generated from protobuf field: int64 app_id = 38;
     */
    appId: bigint;
    /**
     * @generated from protobuf field: int64 vip_level = 39;
     */
    vipLevel: bigint;
    /**
     * @generated from protobuf field: bool is_gray = 40;
     */
    isGray: boolean;
    /**
     * @generated from protobuf field: string gray_scheme_url = 41;
     */
    graySchemeUrl: string;
    /**
     * @generated from protobuf field: int64 gift_scene = 42;
     */
    giftScene: bigint;
    /**
     * @generated from protobuf field: data.GiftBanner gift_banner = 43;
     */
    giftBanner?: GiftBanner;
    /**
     * @generated from protobuf field: repeated string trigger_words = 44;
     */
    triggerWords: string[];
    /**
     * @generated from protobuf field: repeated data.GiftBuffInfo gift_buff_infos = 45;
     */
    giftBuffInfos: GiftBuffInfo[];
    /**
     * @generated from protobuf field: bool for_first_recharge = 46;
     */
    forFirstRecharge: boolean;
    /**
     * @generated from protobuf field: data.Image dynamic_img_for_selected = 47;
     */
    dynamicImgForSelected?: Image;
    /**
     * @generated from protobuf field: int32 after_send_action = 48;
     */
    afterSendAction: number;
    /**
     * @generated from protobuf field: int64 gift_offline_time = 49;
     */
    giftOfflineTime: bigint;
    /**
     * @generated from protobuf field: string top_bar_text = 50;
     */
    topBarText: string;
    /**
     * @generated from protobuf field: data.Image top_right_avatar = 51;
     */
    topRightAvatar?: Image;
    /**
     * @generated from protobuf field: string banner_scheme_url = 52;
     */
    bannerSchemeUrl: string;
    /**
     * @generated from protobuf field: bool is_locked = 53;
     */
    isLocked: boolean;
    /**
     * @generated from protobuf field: int64 req_extra_type = 54;
     */
    reqExtraType: bigint;
    /**
     * @generated from protobuf field: repeated int64 asset_ids = 55;
     */
    assetIds: bigint[];
    /**
     * @generated from protobuf field: data.GiftPreviewInfo gift_preview_info = 56;
     */
    giftPreviewInfo?: GiftPreviewInfo;
    /**
     * @generated from protobuf field: data.GiftTip gift_tip = 57;
     */
    giftTip?: GiftTip;
    /**
     * @generated from protobuf field: int32 need_sweep_light_count = 58;
     */
    needSweepLightCount: number;
    /**
     * @generated from protobuf field: repeated data.GiftGroupInfo group_info = 59;
     */
    groupInfo: GiftGroupInfo[];
    /**
     * @generated from protobuf field: data.Text bottom_text = 60;
     */
    bottomText?: Text;
    /**
     * @generated from protobuf field: int32 mystery_shop_status = 61;
     */
    mysteryShopStatus: number;
    /**
     * @generated from protobuf field: repeated int64 optional_asset_ids = 62;
     */
    optionalAssetIds: bigint[];
    /**
     * @generated from protobuf field: bool disable_wish_list = 63;
     */
    disableWishList: boolean;
    /**
     * @generated from protobuf field: data.GiftStruct.GiftMsgBoard gift_msg_board = 64;
     */
    giftMsgBoard?: GiftStruct_GiftMsgBoard;
    /**
     * @generated from protobuf field: data.EmojiInteractResource emoji_interact_resource = 65;
     */
    emojiInteractResource?: EmojiInteractResource;
    /**
     * @generated from protobuf field: bool tray_dynamic_img_flippable = 66;
     */
    trayDynamicImgFlippable: boolean;
    /**
     * @generated from protobuf field: int64 pico_show_action = 67;
     */
    picoShowAction: bigint;
    /**
     * @generated from protobuf field: int64 selected_dynamic_effect = 68;
     */
    selectedDynamicEffect: bigint;
    /**
     * @generated from protobuf field: data.GiftTouchLabel gift_touch_label = 69;
     */
    giftTouchLabel?: GiftTouchLabel;
    /**
     * @generated from protobuf field: data.GiftUnselectedBottomInfo unselected_bottom_info = 70;
     */
    unselectedBottomInfo?: GiftUnselectedBottomInfo;
    /**
     * @generated from protobuf field: data.GiftConfirmInfo gift_confirm_info = 71;
     */
    giftConfirmInfo?: GiftConfirmInfo;
    /**
     * @generated from protobuf field: int32 biz_type = 72;
     */
    bizType: number;
    /**
     * @generated from protobuf field: data.GoodsBizItem biz_item = 73;
     */
    bizItem?: GoodsBizItem;
}
/**
 * @generated from protobuf message data.GiftStruct.GiftStructFansClubInfo
 */
export interface GiftStruct_GiftStructFansClubInfo {
    /**
     * @generated from protobuf field: int32 min_level = 1;
     */
    minLevel: number;
    /**
     * @generated from protobuf field: int32 insert_pos = 2;
     */
    insertPos: number;
}
/**
 * @generated from protobuf message data.GiftStruct.GiftMsgBoard
 */
export interface GiftStruct_GiftMsgBoard {
    /**
     * @generated from protobuf field: bool for_msg_board = 1;
     */
    forMsgBoard: boolean;
    /**
     * @generated from protobuf field: string prompt_text = 2;
     */
    promptText: string;
}
/**
 * @generated from protobuf message data.GoodsBizItem
 */
export interface GoodsBizItem {
    /**
     * @generated from protobuf field: data.BizGoods goods = 1;
     */
    goods?: BizGoods;
    /**
     * @generated from protobuf field: data.BizEntrance entrance = 2;
     */
    entrance?: BizEntrance;
}
/**
 * @generated from protobuf message data.BizGoods
 */
export interface BizGoods {
    /**
     * @generated from protobuf field: data.GoodsStruct goods = 1;
     */
    goods?: GoodsStruct;
    /**
     * @generated from protobuf field: string extra = 2;
     */
    extra: string;
    /**
     * @generated from protobuf field: int64 consume_scene = 3;
     */
    consumeScene: bigint;
}
/**
 * @generated from protobuf message data.BizEntrance
 */
export interface BizEntrance {
    /**
     * @generated from protobuf field: string scheme_url = 1;
     */
    schemeUrl: string;
}
/**
 * @generated from protobuf message data.GiftConfirmInfo
 */
export interface GiftConfirmInfo {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: string cancel_button_text = 3;
     */
    cancelButtonText: string;
    /**
     * @generated from protobuf field: string confirm_button_text = 4;
     */
    confirmButtonText: string;
    /**
     * @generated from protobuf field: int32 confirm_type = 5;
     */
    confirmType: number;
}
/**
 * @generated from protobuf message data.GiftUnselectedBottomInfo
 */
export interface GiftUnselectedBottomInfo {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message data.GiftTouchLabel
 */
export interface GiftTouchLabel {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string unique_key = 2;
     */
    uniqueKey: string;
}
/**
 * @generated from protobuf message data.GiftGroupInfo
 */
export interface GiftGroupInfo {
    /**
     * @generated from protobuf field: int32 group_count = 1;
     */
    groupCount: number;
    /**
     * @generated from protobuf field: string group_text = 2;
     */
    groupText: string;
}
/**
 * @generated from protobuf message data.GiftPanelOperation
 */
export interface GiftPanelOperation {
    /**
     * @generated from protobuf field: data.Image left_image = 1;
     */
    leftImage?: Image;
    /**
     * @generated from protobuf field: data.Image right_image = 2;
     */
    rightImage?: Image;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_color = 4;
     */
    titleColor: string;
    /**
     * @generated from protobuf field: int64 title_size = 5;
     */
    titleSize: bigint;
    /**
     * @generated from protobuf field: string scheme_url = 6;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: string event_name = 7;
     */
    eventName: string;
}
/**
 * @generated from protobuf message data.FreeGift
 */
export interface FreeGift {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: bigint;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 group_id = 4;
     */
    groupId: bigint;
    /**
     * @generated from protobuf field: int64 repeat_count = 5;
     */
    repeatCount: bigint;
    /**
     * @generated from protobuf field: int64 fan_tickets = 6;
     */
    fanTickets: bigint;
    /**
     * @generated from protobuf field: int64 waterwmlon = 7;
     */
    waterwmlon: bigint;
}
/**
 * @generated from protobuf message data.LuckyMoneyGiftMeta
 */
export interface LuckyMoneyGiftMeta {
    /**
     * @generated from protobuf field: data.Image image = 1;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string describe = 2;
     */
    describe: string;
    /**
     * @generated from protobuf field: int64 id = 3;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int32 diamond_count = 4;
     */
    diamondCount: number;
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
}
/**
 * @generated from protobuf message data.AnchorGiftData
 */
export interface AnchorGiftData {
    /**
     * @generated from protobuf field: data.Image anchor_diy_origin_img = 1;
     */
    anchorDiyOriginImg?: Image;
}
/**
 * @generated from protobuf message data.GiftBanner
 */
export interface GiftBanner {
    /**
     * @generated from protobuf field: data.Text display_text = 1;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: string display_text_bg_color = 2;
     */
    displayTextBgColor: string;
    /**
     * @generated from protobuf field: data.Image box_img = 3;
     */
    boxImg?: Image;
    /**
     * @generated from protobuf field: data.Image bg_img = 4;
     */
    bgImg?: Image;
    /**
     * @generated from protobuf field: string scheme_url = 5;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: bool animate = 6;
     */
    animate: boolean;
    /**
     * @generated from protobuf field: int64 box_id = 7;
     */
    boxId: bigint;
    /**
     * @generated from protobuf field: int64 available_box_count = 8;
     */
    availableBoxCount: bigint;
}
/**
 * @generated from protobuf message data.EffectMixImageInfo
 */
export interface EffectMixImageInfo {
    /**
     * @generated from protobuf field: string image_key = 1;
     */
    imageKey: string;
    /**
     * @generated from protobuf field: data.Image mix_image = 2;
     */
    mixImage?: Image;
}
/**
 * @generated from protobuf message data.AssetEffectMixInfo
 */
export interface AssetEffectMixInfo {
    /**
     * @generated from protobuf field: repeated data.EffectMixImageInfo effect_mix_image_infos = 1;
     */
    effectMixImageInfos: EffectMixImageInfo[];
}
/**
 * @generated from protobuf message data.GiftTrayInfo
 */
export interface GiftTrayInfo {
    /**
     * @generated from protobuf field: data.Text tray_display_text = 1;
     */
    trayDisplayText?: Text;
    /**
     * @generated from protobuf field: data.Image tray_base_img = 2;
     */
    trayBaseImg?: Image;
    /**
     * @generated from protobuf field: data.Image tray_head_img = 3;
     */
    trayHeadImg?: Image;
    /**
     * @generated from protobuf field: data.Image tray_right_img = 4;
     */
    trayRightImg?: Image;
    /**
     * @generated from protobuf field: int64 tray_level = 5;
     */
    trayLevel: bigint;
    /**
     * @generated from protobuf field: data.Image tray_dynamic_img = 6;
     */
    trayDynamicImg?: Image;
    /**
     * @generated from protobuf field: string tray_schema_url = 7;
     */
    traySchemaUrl: string;
    /**
     * @generated from protobuf field: int32 tray_type = 8;
     */
    trayType: number;
    /**
     * @generated from protobuf field: data.Image tray_base_img_v2 = 9;
     */
    trayBaseImgV2?: Image;
    /**
     * @generated from protobuf field: data.Image tray_right_img_v2 = 10;
     */
    trayRightImgV2?: Image;
    /**
     * @generated from protobuf field: bool use_high_layer = 11;
     */
    useHighLayer: boolean;
    /**
     * @generated from protobuf field: int64 duration = 12;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string toast = 13;
     */
    toast: string;
    /**
     * @generated from protobuf field: int32 tray_slide_rate = 14;
     */
    traySlideRate: number;
    /**
     * @generated from protobuf field: data.TrayPreEffect tray_pre_effect = 15;
     */
    trayPreEffect?: TrayPreEffect;
    /**
     * @generated from protobuf field: data.TrayPostEffect tray_post_effect = 16;
     */
    trayPostEffect?: TrayPostEffect;
    /**
     * @generated from protobuf field: int64 origin_gift_id = 17;
     */
    originGiftId: bigint;
    /**
     * @generated from protobuf field: int64 buff_level = 18;
     */
    buffLevel: bigint;
    /**
     * @generated from protobuf field: string toolbar_card_name = 19;
     */
    toolbarCardName: string;
}
/**
 * @generated from protobuf message data.TrayPreEffect
 */
export interface TrayPreEffect {
    /**
     * @generated from protobuf field: data.Image pre_effect_img = 1;
     */
    preEffectImg?: Image;
    /**
     * @generated from protobuf field: int64 tray_start_time = 2;
     */
    trayStartTime: bigint;
    /**
     * @generated from protobuf field: data.Image tray_ripple = 3;
     */
    trayRipple?: Image;
    /**
     * @generated from protobuf field: string pre_schema = 4;
     */
    preSchema: string;
    /**
     * @generated from protobuf field: int64 pre_duration = 5;
     */
    preDuration: bigint;
    /**
     * @generated from protobuf field: int32 pre_effect_source = 6;
     */
    preEffectSource: number;
    /**
     * @generated from protobuf field: string extra = 7;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.TrayPostEffect
 */
export interface TrayPostEffect {
    /**
     * @generated from protobuf field: data.Image post_effect_img = 1;
     */
    postEffectImg?: Image;
    /**
     * @generated from protobuf field: string post_schema = 2;
     */
    postSchema: string;
    /**
     * @generated from protobuf field: int64 post_duration = 3;
     */
    postDuration: bigint;
    /**
     * @generated from protobuf field: int32 post_effect_source = 4;
     */
    postEffectSource: number;
}
/**
 * @generated from protobuf message data.SeriesPlayGift
 */
export interface SeriesPlayGift {
    /**
     * @generated from protobuf field: data.GiftStruct gift_struct = 1;
     */
    giftStruct?: GiftStruct;
    /**
     * @generated from protobuf field: data.SeriesTrayInfo series_tray_info = 2;
     */
    seriesTrayInfo?: SeriesTrayInfo;
    /**
     * @generated from protobuf field: data.SendTogether send_together = 3;
     */
    sendTogether?: SendTogether;
    /**
     * @generated from protobuf field: string diy_item_info = 4;
     */
    diyItemInfo: string;
    /**
     * @generated from protobuf field: data.AnchorGiftData anchor_gift = 5;
     */
    anchorGift?: AnchorGiftData;
    /**
     * @generated from protobuf field: data.AssetEffectMixInfo asset_effect_mix_info = 6;
     */
    assetEffectMixInfo?: AssetEffectMixInfo;
}
/**
 * @generated from protobuf message data.SeriesTrayInfo
 */
export interface SeriesTrayInfo {
    /**
     * @generated from protobuf field: int64 duration = 1;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: data.Image static_img = 2;
     */
    staticImg?: Image;
    /**
     * @generated from protobuf field: data.Image dynamic_img = 3;
     */
    dynamicImg?: Image;
}
/**
 * @generated from protobuf message data.SendTogether
 */
export interface SendTogether {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 3;
     */
    endTime: bigint;
}
/**
 * @generated from protobuf message data.ExtraEffect
 */
export interface ExtraEffect {
    /**
     * @generated from protobuf field: int64 asset_id = 1;
     */
    assetId: bigint;
    /**
     * @generated from protobuf field: int32 display_form = 2;
     */
    displayForm: number;
}
/**
 * @generated from protobuf message data.GoodsStruct
 */
export interface GoodsStruct {
    /**
     * @generated from protobuf field: int64 goods_id = 1;
     */
    goodsId: bigint;
    /**
     * @generated from protobuf field: int64 goods_type = 2;
     */
    goodsType: bigint;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 diamond_count = 4;
     */
    diamondCount: bigint;
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
    /**
     * @generated from protobuf field: int64 offline_time = 7;
     */
    offlineTime: bigint;
    /**
     * @generated from protobuf field: string extra = 8;
     */
    extra: string;
    /**
     * @generated from protobuf field: repeated int64 options = 50;
     */
    options: bigint[];
}
/**
 * @generated from protobuf message data.GameImage
 */
export interface GameImage {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
    /**
     * @generated from protobuf field: int64 height = 3;
     */
    height: bigint;
    /**
     * @generated from protobuf field: int64 width = 4;
     */
    width: bigint;
    /**
     * @generated from protobuf field: int64 rotation = 5;
     */
    rotation: bigint;
}
/**
 * @generated from protobuf message data.GameImageBundler
 */
export interface GameImageBundler {
    /**
     * @generated from protobuf field: data.GameImage origin_image = 1;
     */
    originImage?: GameImage;
    /**
     * @generated from protobuf field: data.GameImage thumb_image = 2;
     */
    thumbImage?: GameImage;
    /**
     * @generated from protobuf field: data.GameImage thumb_heif_image = 3;
     */
    thumbHeifImage?: GameImage;
}
/**
 * @generated from protobuf message data.PlayTeamMember
 */
export interface PlayTeamMember {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message data.GiftVoteResult
 */
export interface GiftVoteResult {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: bigint;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 gift_id = 4;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 diamond_count = 6;
     */
    diamondCount: bigint;
    /**
     * @generated from protobuf field: int64 gift_type = 7;
     */
    giftType: bigint;
    /**
     * @generated from protobuf field: string count_str = 8;
     */
    countStr: string;
}
/**
 * @generated from protobuf message data.ShowStatusLabel
 */
export interface ShowStatusLabel {
    /**
     * @generated from protobuf field: string show_status_label_text = 1;
     */
    showStatusLabelText: string;
    /**
     * @generated from protobuf field: float show_status_label_text_transparency = 2;
     */
    showStatusLabelTextTransparency: number;
    /**
     * @generated from protobuf field: string show_status_label_bg_color = 3;
     */
    showStatusLabelBgColor: string;
}
/**
 * @generated from protobuf message data.GroupShowUserItem
 */
export interface GroupShowUserItem {
    /**
     * @generated from protobuf field: data.User group_show_user = 1;
     */
    groupShowUser?: User;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: string send_button_text = 3;
     */
    sendButtonText: string;
    /**
     * @generated from protobuf field: int64 group_show_fan_ticket_count = 4;
     */
    groupShowFanTicketCount: bigint;
    /**
     * @generated from protobuf field: int64 group_show_cur_round_fan_ticket_count = 5;
     */
    groupShowCurRoundFanTicketCount: bigint;
    /**
     * @generated from protobuf field: int64 show_end_time = 6;
     */
    showEndTime: bigint;
    /**
     * @generated from protobuf field: int32 identity_label = 7;
     */
    identityLabel: number;
    /**
     * @generated from protobuf field: data.Image live_avatar_frame_image = 8;
     */
    liveAvatarFrameImage?: Image;
    /**
     * @generated from protobuf field: data.Image bg_image = 9;
     */
    bgImage?: Image;
    /**
     * @generated from protobuf field: data.ShowStatusLabel show_status_label = 10;
     */
    showStatusLabel?: ShowStatusLabel;
    /**
     * @generated from protobuf field: bool is_best_shower = 11;
     */
    isBestShower: boolean;
    /**
     * @generated from protobuf field: int32 show_status = 12;
     */
    showStatus: number;
}
/**
 * @generated from protobuf message data.GroupShowInfo
 */
export interface GroupShowInfo {
    /**
     * @generated from protobuf field: repeated data.GroupShowUserItem group_show_users = 1;
     */
    groupShowUsers: GroupShowUserItem[];
    /**
     * @generated from protobuf field: int64 description_style = 2;
     */
    descriptionStyle: bigint;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 4;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: data.Image background_image = 5;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: int64 group_show_scene = 6;
     */
    groupShowScene: bigint;
    /**
     * @generated from protobuf field: bool is_live_show = 7;
     */
    isLiveShow: boolean;
    /**
     * @generated from protobuf field: string toast_text = 8;
     */
    toastText: string;
    /**
     * @generated from protobuf field: bool is_group_show_anchor = 9;
     */
    isGroupShowAnchor: boolean;
}
/**
 * @generated from protobuf message data.GrowthTaskCondDef
 */
export interface GrowthTaskCondDef {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string desc = 3;
     */
    desc: string;
    /**
     * @generated from protobuf field: string operator = 4;
     */
    operator: string;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
}
/**
 * @generated from protobuf message data.GrowthTaskCondition
 */
export interface GrowthTaskCondition {
    /**
     * @generated from protobuf field: data.GrowthTaskCondDef def = 1;
     */
    def?: GrowthTaskCondDef;
    /**
     * @generated from protobuf field: string desc = 2;
     */
    desc: string;
    /**
     * @generated from protobuf field: int64 current_value = 3;
     */
    currentValue: bigint;
    /**
     * @generated from protobuf field: int64 target_value = 4;
     */
    targetValue: bigint;
    /**
     * @generated from protobuf field: string display_current_value = 5;
     */
    displayCurrentValue: string;
    /**
     * @generated from protobuf field: string display_target_value = 6;
     */
    displayTargetValue: string;
    /**
     * @generated from protobuf field: string display_delta = 7;
     */
    displayDelta: string;
}
/**
 * @generated from protobuf message data.GrowthTaskRewardDef
 */
export interface GrowthTaskRewardDef {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int32 reward_type = 2;
     */
    rewardType: number;
    /**
     * @generated from protobuf field: int32 settle_type = 3;
     */
    settleType: number;
    /**
     * @generated from protobuf field: string target = 4;
     */
    target: string;
    /**
     * @generated from protobuf field: string desc = 5;
     */
    desc: string;
    /**
     * @generated from protobuf field: string operator = 6;
     */
    operator: string;
    /**
     * @generated from protobuf field: string send_param_str = 7;
     */
    sendParamStr: string;
    /**
     * @generated from protobuf field: string extra = 8;
     */
    extra: string;
    /**
     * @generated from protobuf field: string name = 9;
     */
    name: string;
}
/**
 * @generated from protobuf message data.GrowthTaskReward
 */
export interface GrowthTaskReward {
    /**
     * @generated from protobuf field: data.GrowthTaskRewardDef def = 1;
     */
    def?: GrowthTaskRewardDef;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
    /**
     * @generated from protobuf field: int64 remaining_count = 4;
     */
    remainingCount: bigint;
}
/**
 * @generated from protobuf message data.GrowthTaskStage
 */
export interface GrowthTaskStage {
    /**
     * @generated from protobuf field: repeated data.GrowthTaskCondition condition_list = 1;
     */
    conditionList: GrowthTaskCondition[];
    /**
     * @generated from protobuf field: repeated data.GrowthTaskReward reward_list = 2;
     */
    rewardList: GrowthTaskReward[];
    /**
     * @generated from protobuf field: int64 completed_time = 3;
     */
    completedTime: bigint;
}
/**
 * @generated from protobuf message data.GrowthTask
 */
export interface GrowthTask {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string id_str = 2;
     */
    idStr: string;
    /**
     * @generated from protobuf field: int64 live_id = 3;
     */
    liveId: bigint;
    /**
     * @generated from protobuf field: int64 app_id = 4;
     */
    appId: bigint;
    /**
     * @generated from protobuf field: int64 class_id = 5;
     */
    classId: bigint;
    /**
     * @generated from protobuf field: int64 group_id = 6;
     */
    groupId: bigint;
    /**
     * @generated from protobuf field: int32 item_type = 7;
     */
    itemType: number;
    /**
     * @generated from protobuf field: string item_id = 8;
     */
    itemId: string;
    /**
     * @generated from protobuf field: string task_name = 9;
     */
    taskName: string;
    /**
     * @generated from protobuf field: string task_desc = 10;
     */
    taskDesc: string;
    /**
     * @generated from protobuf field: int64 start_time = 11;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 12;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int64 display_start_time = 13;
     */
    displayStartTime: bigint;
    /**
     * @generated from protobuf field: int64 display_end_time = 14;
     */
    displayEndTime: bigint;
    /**
     * @generated from protobuf field: int32 status = 15;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 completed_stage = 16;
     */
    completedStage: bigint;
    /**
     * @generated from protobuf field: int64 finish_time = 17;
     */
    finishTime: bigint;
    /**
     * @generated from protobuf field: repeated data.GrowthTaskStage stage_list = 18;
     */
    stageList: GrowthTaskStage[];
    /**
     * @generated from protobuf field: string extra = 19;
     */
    extra: string;
    /**
     * @generated from protobuf field: string config = 20;
     */
    config: string;
    /**
     * @generated from protobuf field: int64 create_time = 21;
     */
    createTime: bigint;
}
/**
 * @generated from protobuf message data.GrowthTaskContributorRank
 */
export interface GrowthTaskContributorRank {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 rank = 3;
     */
    rank: bigint;
}
/**
 * @generated from protobuf message data.GuestBattleGradeItem
 */
export interface GuestBattleGradeItem {
    /**
     * @generated from protobuf field: int64 level = 1;
     */
    level: bigint;
    /**
     * @generated from protobuf field: string level_str = 2;
     */
    levelStr: string;
    /**
     * @generated from protobuf field: int64 score = 3;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string score_str = 4;
     */
    scoreStr: string;
    /**
     * @generated from protobuf field: bool is_full_level = 5;
     */
    isFullLevel: boolean;
}
/**
 * @generated from protobuf message data.GuestBattleUserGradeInfo
 */
export interface GuestBattleUserGradeInfo {
    /**
     * @generated from protobuf field: data.GuestBattleGradeItem cur_grade = 1;
     */
    curGrade?: GuestBattleGradeItem;
    /**
     * @generated from protobuf field: data.GuestBattleGradeItem next_grade = 2;
     */
    nextGrade?: GuestBattleGradeItem;
    /**
     * @generated from protobuf field: int64 upgrade_score = 3;
     */
    upgradeScore: bigint;
    /**
     * @generated from protobuf field: string upgrade_score_str = 4;
     */
    upgradeScoreStr: string;
}
/**
 * @generated from protobuf message data.GuestBattleUIInfo
 */
export interface GuestBattleUIInfo {
    /**
     * @generated from protobuf field: data.Image open_animation = 1;
     */
    openAnimation?: Image;
    /**
     * @generated from protobuf field: data.Image score_icon = 2;
     */
    scoreIcon?: Image;
}
/**
 * @generated from protobuf message data.GuestBattleContributors
 */
export interface GuestBattleContributors {
    /**
     * @generated from protobuf field: repeated int64 user_ids = 1;
     */
    userIds: bigint[];
}
/**
 * @generated from protobuf message data.BattleResult
 */
export interface BattleResult {
    /**
     * @generated from protobuf field: int64 guest_id = 1;
     */
    guestId: bigint;
    /**
     * @generated from protobuf field: string score = 2;
     */
    score: string;
    /**
     * @generated from protobuf field: int64 rank = 3;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: string score_fuzzy = 4;
     */
    scoreFuzzy: string;
    /**
     * @generated from protobuf field: data.GuestBattleContributors contributors = 5;
     */
    contributors?: GuestBattleContributors;
    /**
     * @generated from protobuf field: data.LinkmicQuickInteract quick_interact = 6;
     */
    quickInteract?: LinkmicQuickInteract;
    /**
     * @generated from protobuf field: data.GuestBattleUserGradeInfo crown_info = 7;
     */
    crownInfo?: GuestBattleUserGradeInfo;
    /**
     * @generated from protobuf field: string nickname = 8;
     */
    nickname: string;
    /**
     * @generated from protobuf field: int64 score_num = 9;
     */
    scoreNum: bigint;
    /**
     * @generated from protobuf field: int32 role = 10;
     */
    role: number;
    /**
     * @generated from protobuf field: string guest_id_str = 11;
     */
    guestIdStr: string;
}
/**
 * @generated from protobuf message data.GuestBattleInfo
 */
export interface GuestBattleInfo {
    /**
     * @generated from protobuf field: int64 battle_id = 1;
     */
    battleId: bigint;
    /**
     * @generated from protobuf field: int64 battle_type = 2;
     */
    battleType: bigint;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: repeated data.BattleResult results = 4;
     */
    results: BattleResult[];
    /**
     * @generated from protobuf field: int64 current_time = 5;
     */
    currentTime: bigint;
    /**
     * @generated from protobuf field: int64 finish_time = 6;
     */
    finishTime: bigint;
    /**
     * @generated from protobuf field: int64 show_duration = 7;
     */
    showDuration: bigint;
    /**
     * @generated from protobuf field: string battle_id_str = 8;
     */
    battleIdStr: string;
    /**
     * @generated from protobuf field: int64 loser_num = 9;
     */
    loserNum: bigint;
    /**
     * @generated from protobuf field: string dress_id = 10;
     */
    dressId: string;
    /**
     * @generated from protobuf field: int64 score_type = 11;
     */
    scoreType: bigint;
    /**
     * @generated from protobuf field: data.GuestBattleUIInfo ui_info = 12;
     */
    uiInfo?: GuestBattleUIInfo;
}
/**
 * @generated from protobuf message data.Banner
 */
export interface Banner {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: data.Image image = 3;
     */
    image?: Image;
    /**
     * @generated from protobuf field: int64 height = 4;
     */
    height: bigint;
    /**
     * @generated from protobuf field: int64 width = 5;
     */
    width: bigint;
    /**
     * @generated from protobuf field: string schema_url = 6;
     */
    schemaUrl: string;
    /**
     * @generated from protobuf field: int64 action_type = 7;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: int64 banner_type = 8;
     */
    bannerType: bigint;
    /**
     * @generated from protobuf field: int64 priority = 9;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: string text = 10;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 frame_type = 11;
     */
    frameType: bigint;
    /**
     * @generated from protobuf field: string extra = 12;
     */
    extra: string;
    /**
     * @generated from protobuf field: int64 status = 13;
     */
    status: bigint;
    /**
     * @generated from protobuf field: int64 uid = 14;
     */
    uid: bigint;
    /**
     * @generated from protobuf field: int64 roomid = 15;
     */
    roomid: bigint;
    /**
     * @generated from protobuf field: int64 appointment_start_timestamp = 16;
     */
    appointmentStartTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 appointment_end_timestamp = 17;
     */
    appointmentEndTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 appointment_id = 18;
     */
    appointmentId: bigint;
}
/**
 * @generated from protobuf message data.BannerCollapse
 */
export interface BannerCollapse {
    /**
     * @generated from protobuf field: data.Text collapse_title = 1;
     */
    collapseTitle?: Text;
    /**
     * @generated from protobuf field: data.Image collapse_image = 2;
     */
    collapseImage?: Image;
    /**
     * @generated from protobuf field: bool enable = 3;
     */
    enable: boolean;
    /**
     * @generated from protobuf field: string background_color = 4;
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: int64 collapse_height = 5;
     */
    collapseHeight: bigint;
    /**
     * @generated from protobuf field: string vertical_line_color = 6;
     */
    verticalLineColor: string;
}
/**
 * @generated from protobuf message data.BannerContainer
 */
export interface BannerContainer {
    /**
     * @generated from protobuf field: string container_url = 1;
     */
    containerUrl: string;
    /**
     * @generated from protobuf field: repeated data.Banner banner_list = 2;
     */
    bannerList: Banner[];
    /**
     * @generated from protobuf field: data.Image animation_image = 3;
     */
    animationImage?: Image;
    /**
     * @generated from protobuf field: data.BannerCollapse collapse = 4;
     */
    collapse?: BannerCollapse;
    /**
     * @generated from protobuf field: int64 container_height = 5;
     */
    containerHeight: bigint;
    /**
     * @generated from protobuf field: int64 container_width = 6;
     */
    containerWidth: bigint;
    /**
     * @generated from protobuf field: string lynx_container_url = 7;
     */
    lynxContainerUrl: string;
    /**
     * @generated from protobuf field: int64 container_type = 8;
     */
    containerType: bigint;
    /**
     * @generated from protobuf field: repeated string token_list = 9;
     */
    tokenList: string[];
}
/**
 * @generated from protobuf message data.BannerData
 */
export interface BannerData {
    /**
     * @generated from protobuf field: data.BannerContainer top_right = 1;
     */
    topRight?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer bottom_right = 2;
     */
    bottomRight?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer gift_panel = 3;
     */
    giftPanel?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer middle = 4;
     */
    middle?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer activity_top_right = 5;
     */
    activityTopRight?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer top_left = 6;
     */
    topLeft?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer live_scene = 7;
     */
    liveScene?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer activity_vs_interactive = 8;
     */
    activityVsInteractive?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer activity_interactive = 9;
     */
    activityInteractive?: BannerContainer;
    /**
     * @generated from protobuf field: data.BannerContainer activity_vs_bottom_right = 10;
     */
    activityVsBottomRight?: BannerContainer;
}
/**
 * @generated from protobuf message data.LikeIconInfo
 */
export interface LikeIconInfo {
    /**
     * @generated from protobuf field: repeated data.Image icons = 1;
     */
    icons: Image[];
}
/**
 * @generated from protobuf message data.LikeIconInfo.IconList
 */
export interface LikeIconInfo_IconList {
    /**
     * @generated from protobuf field: repeated data.Image icons = 1;
     */
    icons: Image[];
}
/**
 * @generated from protobuf message data.ChatEmojiGuideInfo
 */
export interface ChatEmojiGuideInfo {
    /**
     * @generated from protobuf field: repeated data.ChatEmojiGuideInfo.EmojiGuideConf emojis = 1;
     */
    emojis: ChatEmojiGuideInfo_EmojiGuideConf[];
}
/**
 * @generated from protobuf message data.ChatEmojiGuideInfo.EmojiGuideConf
 */
export interface ChatEmojiGuideInfo_EmojiGuideConf {
    /**
     * @generated from protobuf field: string emoji = 1;
     */
    emoji: string;
    /**
     * @generated from protobuf field: repeated string trigger_words = 2;
     */
    triggerWords: string[];
    /**
     * @generated from protobuf field: int64 begin_time = 10;
     */
    beginTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 11;
     */
    endTime: bigint;
}
/**
 * @generated from protobuf message data.ChatImageGuideInfo
 */
export interface ChatImageGuideInfo {
    /**
     * @generated from protobuf field: repeated data.ChatImageGuideInfo.ImageGuideConf images = 1;
     */
    images: ChatImageGuideInfo_ImageGuideConf[];
}
/**
 * @generated from protobuf message data.ChatImageGuideInfo.ImageGuideConf
 */
export interface ChatImageGuideInfo_ImageGuideConf {
    /**
     * @generated from protobuf field: string image_id = 1;
     */
    imageId: string;
    /**
     * @generated from protobuf field: data.Image image = 2;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: repeated string trigger_words = 4;
     */
    triggerWords: string[];
    /**
     * @generated from protobuf field: int64 begin_time = 10;
     */
    beginTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 11;
     */
    endTime: bigint;
}
/**
 * @generated from protobuf message data.ShareItemStyle
 */
export interface ShareItemStyle {
    /**
     * @generated from protobuf field: string item_type = 1;
     */
    itemType: string;
    /**
     * @generated from protobuf field: string item_id = 2;
     */
    itemId: string;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string name_color = 5;
     */
    nameColor: string;
    /**
     * @generated from protobuf field: string schema = 6;
     */
    schema: string;
    /**
     * @generated from protobuf field: string description = 7;
     */
    description: string;
}
/**
 * @generated from protobuf message data.BuoyMaterial
 */
export interface BuoyMaterial {
    /**
     * @generated from protobuf field: data.Image buoy_ball = 1;
     */
    buoyBall?: Image;
    /**
     * @generated from protobuf field: data.Image buoy_tailing = 2;
     */
    buoyTailing?: Image;
    /**
     * @generated from protobuf field: data.Image univ_scatter_deco_a = 3;
     */
    univScatterDecoA?: Image;
    /**
     * @generated from protobuf field: data.Image univ_scatter_deco_b = 4;
     */
    univScatterDecoB?: Image;
    /**
     * @generated from protobuf field: data.Image univ_scatter_deco_c = 5;
     */
    univScatterDecoC?: Image;
    /**
     * @generated from protobuf field: data.Image advan_scatter_deco_a = 6;
     */
    advanScatterDecoA?: Image;
    /**
     * @generated from protobuf field: data.Image advan_scatter_deco_b = 7;
     */
    advanScatterDecoB?: Image;
}
/**
 * @generated from protobuf message data.BackgroundMaterial
 */
export interface BackgroundMaterial {
    /**
     * @generated from protobuf field: data.Image buoy_area_bg = 1;
     */
    buoyAreaBg?: Image;
    /**
     * @generated from protobuf field: data.Image global_bg = 2;
     */
    globalBg?: Image;
    /**
     * @generated from protobuf field: data.Image scoreboard_bg = 3;
     */
    scoreboardBg?: Image;
    /**
     * @generated from protobuf field: string tone_line_start = 4;
     */
    toneLineStart: string;
    /**
     * @generated from protobuf field: string tone_line_end = 5;
     */
    toneLineEnd: string;
}
/**
 * @generated from protobuf message data.FeedbackMaterial
 */
export interface FeedbackMaterial {
    /**
     * @generated from protobuf field: data.Image nice = 1;
     */
    nice?: Image;
    /**
     * @generated from protobuf field: data.Image good = 2;
     */
    good?: Image;
    /**
     * @generated from protobuf field: data.Image perfect = 3;
     */
    perfect?: Image;
    /**
     * @generated from protobuf field: data.Image advan_perfect_bg = 4;
     */
    advanPerfectBg?: Image;
    /**
     * @generated from protobuf field: data.Image advan_perfect_tx = 5;
     */
    advanPerfectTx?: Image;
}
/**
 * @generated from protobuf message data.MidiSkinMaterial
 */
export interface MidiSkinMaterial {
    /**
     * @generated from protobuf field: data.BuoyMaterial buoy = 1;
     */
    buoy?: BuoyMaterial;
    /**
     * @generated from protobuf field: data.BackgroundMaterial bg = 2;
     */
    bg?: BackgroundMaterial;
    /**
     * @generated from protobuf field: data.FeedbackMaterial feedback = 3;
     */
    feedback?: FeedbackMaterial;
    /**
     * @generated from protobuf field: string lyric_color_value = 4;
     */
    lyricColorValue: string;
}
/**
 * @generated from protobuf message data.AddDressPrompt
 */
export interface AddDressPrompt {
    /**
     * @generated from protobuf field: bool has_add_dress = 1;
     */
    hasAddDress: boolean;
    /**
     * @generated from protobuf field: int64 add_dress_version = 2;
     */
    addDressVersion: bigint;
}
/**
 * @generated from protobuf message data.MidiSkinDressInfo
 */
export interface MidiSkinDressInfo {
    /**
     * @generated from protobuf field: string dress_id = 1;
     */
    dressId: string;
    /**
     * @generated from protobuf field: data.MidiSkinMaterial material = 2;
     */
    material?: MidiSkinMaterial;
}
/**
 * @generated from protobuf message data.LinkPhase
 */
export interface LinkPhase {
    /**
     * @generated from protobuf field: int32 phase_id = 1;
     */
    phaseId: number;
    /**
     * @generated from protobuf field: int32 phase_seconds_begin = 2;
     */
    phaseSecondsBegin: number;
    /**
     * @generated from protobuf field: int32 phase_seconds_end = 3;
     */
    phaseSecondsEnd: number;
}
/**
 * @generated from protobuf message data.LinkPhaseConfig
 */
export interface LinkPhaseConfig {
    /**
     * @generated from protobuf field: repeated data.LinkPhase phases = 1;
     */
    phases: LinkPhase[];
    /**
     * @generated from protobuf field: int32 easter_egg_cartoon_seconds = 2;
     */
    easterEggCartoonSeconds: number;
}
/**
 * @generated from protobuf message data.LinkmicSetting
 */
export interface LinkmicSetting {
    /**
     * @generated from protobuf field: int32 key = 1;
     */
    key: number;
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number;
    /**
     * @generated from protobuf field: data.SettingContent content = 3;
     */
    content?: SettingContent;
}
/**
 * @generated from protobuf message data.SettingContent
 */
export interface SettingContent {
    /**
     * @generated from protobuf field: data.ApplicationReasonContent application_reason_content = 1;
     */
    applicationReasonContent?: ApplicationReasonContent;
    /**
     * @generated from protobuf field: data.BidPaidLinkmicContent bid_paid_linkmic_content = 2;
     */
    bidPaidLinkmicContent?: BidPaidLinkmicContent;
    /**
     * @generated from protobuf field: data.NormalPaidLinkmicSettingContent normal_paid_linkmic_setting_content = 3;
     */
    normalPaidLinkmicSettingContent?: NormalPaidLinkmicSettingContent;
    /**
     * @generated from protobuf field: data.NormalPaidLinkmicDescContent normal_paid_linkmic_desc_content = 4;
     */
    normalPaidLinkmicDescContent?: NormalPaidLinkmicDescContent;
    /**
     * @generated from protobuf field: data.BidPaidLinkmicSettingContent bid_paid_linkmic_setting_content = 5;
     */
    bidPaidLinkmicSettingContent?: BidPaidLinkmicSettingContent;
    /**
     * @generated from protobuf field: data.KTVChallengeContent ktv_challenge_content = 6;
     */
    ktvChallengeContent?: KTVChallengeContent;
    /**
     * @generated from protobuf field: data.RoomBattleSettingContent room_battle_setting_content = 7;
     */
    roomBattleSettingContent?: RoomBattleSettingContent;
    /**
     * @generated from protobuf field: data.NormalPaidLinkmicAddPriceContent normal_paid_linkmic_add_price_content = 8;
     */
    normalPaidLinkmicAddPriceContent?: NormalPaidLinkmicAddPriceContent;
    /**
     * @generated from protobuf field: data.GuestBattleConfigContent guest_battle_config_content = 9;
     */
    guestBattleConfigContent?: GuestBattleConfigContent;
    /**
     * @generated from protobuf field: data.TeamFightConfigContent team_fight_config_content = 10;
     */
    teamFightConfigContent?: TeamFightConfigContent;
    /**
     * @generated from protobuf field: data.SelfDisciplineInfo self_discipline_info = 11;
     */
    selfDisciplineInfo?: SelfDisciplineInfo;
    /**
     * @generated from protobuf field: data.DuoBattleConfigContent duo_battle_config_content = 12;
     */
    duoBattleConfigContent?: DuoBattleConfigContent;
    /**
     * @generated from protobuf field: data.KTVComponentContent ktv_component_content = 13;
     */
    ktvComponentContent?: KTVComponentContent;
    /**
     * @generated from protobuf field: data.AudioSubtitleContent audio_subtitle_content = 14;
     */
    audioSubtitleContent?: AudioSubtitleContent;
    /**
     * @generated from protobuf field: data.LinkmicInitInfoContent linkmic_init_info_content = 15;
     */
    linkmicInitInfoContent?: LinkmicInitInfoContent;
}
/**
 * @generated from protobuf message data.LinkmicInitInfoContent
 */
export interface LinkmicInitInfoContent {
    /**
     * @generated from protobuf field: data.InitInfoSetting video_chat_init_info = 1;
     */
    videoChatInitInfo?: InitInfoSetting;
}
/**
 * @generated from protobuf message data.InitInfoSetting
 */
export interface InitInfoSetting {
    /**
     * @generated from protobuf field: int64 scene = 1;
     */
    scene: bigint;
    /**
     * @generated from protobuf field: int64 ui_layout = 2;
     */
    uiLayout: bigint;
    /**
     * @generated from protobuf field: int64 auto_open = 3;
     */
    autoOpen: bigint;
}
/**
 * @generated from protobuf message data.AudioSubtitleContent
 */
export interface AudioSubtitleContent {
    /**
     * @generated from protobuf field: int64 audio_subtitle_value = 1;
     */
    audioSubtitleValue: bigint;
}
/**
 * @generated from protobuf message data.ApplicationReasonContent
 */
export interface ApplicationReasonContent {
    /**
     * @generated from protobuf field: string ApplicationReasonExample = 1 [json_name = "ApplicationReasonExample"];
     */
    applicationReasonExample: string;
    /**
     * @generated from protobuf field: string DefaultApplicationReasonExample = 2 [json_name = "DefaultApplicationReasonExample"];
     */
    defaultApplicationReasonExample: string;
}
/**
 * @generated from protobuf message data.BidPaidLinkmicContent
 */
export interface BidPaidLinkmicContent {
    /**
     * @generated from protobuf field: int64 start_price = 1;
     */
    startPrice: bigint;
    /**
     * @generated from protobuf field: int64 link_duration = 2;
     */
    linkDuration: bigint;
    /**
     * @generated from protobuf field: int64 max_bid_price = 3;
     */
    maxBidPrice: bigint;
    /**
     * @generated from protobuf field: int64 bid_duration = 4;
     */
    bidDuration: bigint;
    /**
     * @generated from protobuf field: repeated data.BidPaidLinkmicOptionalStep bid_steps = 5;
     */
    bidSteps: BidPaidLinkmicOptionalStep[];
}
/**
 * @generated from protobuf message data.NormalPaidLinkmicSettingContent
 */
export interface NormalPaidLinkmicSettingContent {
    /**
     * @generated from protobuf field: int64 paid_count = 1;
     */
    paidCount: bigint;
    /**
     * @generated from protobuf field: int64 limited_time = 2;
     */
    limitedTime: bigint;
}
/**
 * @generated from protobuf message data.NormalPaidLinkmicDescContent
 */
export interface NormalPaidLinkmicDescContent {
    /**
     * @generated from protobuf field: repeated int64 saved_tag_ids = 1;
     */
    savedTagIds: bigint[];
    /**
     * @generated from protobuf field: repeated data.PaidLinkmicTag saved_tag_infos = 2;
     */
    savedTagInfos: PaidLinkmicTag[];
    /**
     * @generated from protobuf field: string saved_desc = 3;
     */
    savedDesc: string;
    /**
     * @generated from protobuf field: string reviewed_desc = 4;
     */
    reviewedDesc: string;
}
/**
 * @generated from protobuf message data.BidPaidLinkmicSettingContent
 */
export interface BidPaidLinkmicSettingContent {
    /**
     * @generated from protobuf field: int64 start_price = 1;
     */
    startPrice: bigint;
    /**
     * @generated from protobuf field: int64 link_duration = 2;
     */
    linkDuration: bigint;
}
/**
 * @generated from protobuf message data.KTVChallengeContent
 */
export interface KTVChallengeContent {
    /**
     * @generated from protobuf field: int64 TargetScore = 1 [json_name = "TargetScore"];
     */
    targetScore: bigint;
    /**
     * @generated from protobuf field: int64 TargetDurationSecond = 2 [json_name = "TargetDurationSecond"];
     */
    targetDurationSecond: bigint;
}
/**
 * @generated from protobuf message data.RoomBattleSettingContent
 */
export interface RoomBattleSettingContent {
    /**
     * @generated from protobuf field: int64 battle_duration = 1;
     */
    battleDuration: bigint;
    /**
     * @generated from protobuf field: bool accept_invite = 2;
     */
    acceptInvite: boolean;
    /**
     * @generated from protobuf field: bool only_accept_following_invite = 3;
     */
    onlyAcceptFollowingInvite: boolean;
    /**
     * @generated from protobuf field: bool not_accept_less_than_three_linked_invite = 4;
     */
    notAcceptLessThanThreeLinkedInvite: boolean;
    /**
     * @generated from protobuf field: data.RoomBattleThemeParam room_battle_theme_param = 5;
     */
    roomBattleThemeParam?: RoomBattleThemeParam;
}
/**
 * @generated from protobuf message data.NormalPaidLinkmicAddPriceContent
 */
export interface NormalPaidLinkmicAddPriceContent {
    /**
     * @generated from protobuf field: int32 add_price_strategy = 1;
     */
    addPriceStrategy: number;
    /**
     * @generated from protobuf field: int64 custom_add_price_value = 2;
     */
    customAddPriceValue: bigint;
}
/**
 * @generated from protobuf message data.GuestBattleConfigContent
 */
export interface GuestBattleConfigContent {
    /**
     * @generated from protobuf field: int32 is_anchor_involved = 1;
     */
    isAnchorInvolved: number;
    /**
     * @generated from protobuf field: int64 last_battle_duration_by_anchor = 2;
     */
    lastBattleDurationByAnchor: bigint;
    /**
     * @generated from protobuf field: int64 loser_num = 3;
     */
    loserNum: bigint;
    /**
     * @generated from protobuf field: int64 score_type = 4;
     */
    scoreType: bigint;
}
/**
 * @generated from protobuf message data.TeamFightConfigContent
 */
export interface TeamFightConfigContent {
    /**
     * @generated from protobuf field: int64 last_fight_duration_by_anchor = 1;
     */
    lastFightDurationByAnchor: bigint;
}
/**
 * @generated from protobuf message data.DuoBattleConfigContent
 */
export interface DuoBattleConfigContent {
    /**
     * @generated from protobuf field: int64 duration = 1;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int32 score_type = 2;
     */
    scoreType: number;
}
/**
 * @generated from protobuf message data.SelfDisciplineInfo
 */
export interface SelfDisciplineInfo {
    /**
     * @generated from protobuf field: repeated string target_list = 1;
     */
    targetList: string[];
    /**
     * @generated from protobuf field: string current_target = 2;
     */
    currentTarget: string;
    /**
     * @generated from protobuf field: string target_icon_uri = 3;
     */
    targetIconUri: string;
    /**
     * @generated from protobuf field: string text = 4;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 punch_duration = 6;
     */
    punchDuration: bigint;
    /**
     * @generated from protobuf field: string room_punch_count = 7;
     */
    roomPunchCount: string;
    /**
     * @generated from protobuf field: int64 version = 8;
     */
    version: bigint;
}
/**
 * @generated from protobuf message data.KTVComponentContent
 */
export interface KTVComponentContent {
    /**
     * @generated from protobuf field: int32 KTVComponentSwitchStatus = 1 [json_name = "KTVComponentSwitchStatus"];
     */
    kTVComponentSwitchStatus: number;
}
/**
 * @generated from protobuf message data.BidPaidLinkmicOptionalStep
 */
export interface BidPaidLinkmicOptionalStep {
    /**
     * @generated from protobuf field: int64 bid_left_closed_interval = 1;
     */
    bidLeftClosedInterval: bigint;
    /**
     * @generated from protobuf field: int64 bid_right_closed_interval = 2;
     */
    bidRightClosedInterval: bigint;
    /**
     * @generated from protobuf field: int64 bid_step = 3;
     */
    bidStep: bigint;
}
/**
 * @generated from protobuf message data.BidPaidLinkmicBidInfo
 */
export interface BidPaidLinkmicBidInfo {
    /**
     * @generated from protobuf field: int64 bid_price = 1;
     */
    bidPrice: bigint;
    /**
     * @generated from protobuf field: int64 bid_users_uv = 2;
     */
    bidUsersUv: bigint;
    /**
     * @generated from protobuf field: int64 server_left_time = 3;
     */
    serverLeftTime: bigint;
    /**
     * @generated from protobuf field: string user_name = 4;
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 user_id = 5;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Image user_avatar = 6;
     */
    userAvatar?: Image;
    /**
     * @generated from protobuf field: uint64 version = 7;
     */
    version: bigint;
    /**
     * @generated from protobuf field: string sec_user_id = 8;
     */
    secUserId: string;
}
/**
 * @generated from protobuf message data.BidPaidLinkmicDealInfo
 */
export interface BidPaidLinkmicDealInfo {
    /**
     * @generated from protobuf field: int64 win_price = 1;
     */
    winPrice: bigint;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Image user_avatar = 4;
     */
    userAvatar?: Image;
    /**
     * @generated from protobuf field: string sec_user_id = 5;
     */
    secUserId: string;
}
/**
 * @generated from protobuf message data.BidPaidLinkmicBidRecord
 */
export interface BidPaidLinkmicBidRecord {
    /**
     * @generated from protobuf field: int64 bid_price = 1;
     */
    bidPrice: bigint;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Image user_avatar = 4;
     */
    userAvatar?: Image;
    /**
     * @generated from protobuf field: bool is_start_price = 5;
     */
    isStartPrice: boolean;
    /**
     * @generated from protobuf field: string sec_user_id = 6;
     */
    secUserId: string;
}
/**
 * @generated from protobuf message data.NormalPaidLinkmicInfo
 */
export interface NormalPaidLinkmicInfo {
    /**
     * @generated from protobuf field: int64 paid_count = 1;
     */
    paidCount: bigint;
    /**
     * @generated from protobuf field: int64 limited_time = 2;
     */
    limitedTime: bigint;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: int32 add_price_strategy = 4;
     */
    addPriceStrategy: number;
    /**
     * @generated from protobuf field: int64 add_price_value = 5;
     */
    addPriceValue: bigint;
    /**
     * @generated from protobuf field: int64 add_price_multiple = 6;
     */
    addPriceMultiple: bigint;
}
/**
 * @generated from protobuf message data.PaidLinkmicTag
 */
export interface PaidLinkmicTag {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image pic = 3;
     */
    pic?: Image;
}
/**
 * @generated from protobuf message data.PaidLinkmicExplainCardInfo
 */
export interface PaidLinkmicExplainCardInfo {
    /**
     * @generated from protobuf field: int64 num_of_link = 1;
     */
    numOfLink: bigint;
    /**
     * @generated from protobuf field: float avg_grade = 2;
     */
    avgGrade: number;
    /**
     * @generated from protobuf field: data.PaidLinkmicTag tag = 3;
     */
    tag?: PaidLinkmicTag;
}
/**
 * @generated from protobuf message data.MsgBoardItemInfo
 */
export interface MsgBoardItemInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string id_str = 2;
     */
    idStr: string;
    /**
     * @generated from protobuf field: data.User sender = 3;
     */
    sender?: User;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 process_status = 5;
     */
    processStatus: number;
    /**
     * @generated from protobuf field: int64 gift_id = 6;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 msg_disappear_time = 7;
     */
    msgDisappearTime: bigint;
}
/**
 * @generated from protobuf message data.OrderSingItemV2
 */
export interface OrderSingItemV2 {
    /**
     * @generated from protobuf field: data.User order_user = 1;
     */
    orderUser?: User;
    /**
     * @generated from protobuf field: data.User gift_sender = 2;
     */
    giftSender?: User;
    /**
     * @generated from protobuf field: string item_id = 3;
     */
    itemId: string;
    /**
     * @generated from protobuf field: int32 microphone_type = 4;
     */
    microphoneType: number;
    /**
     * @generated from protobuf field: int64 gift_id = 5;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 gift_diamond_count = 6;
     */
    giftDiamondCount: bigint;
    /**
     * @generated from protobuf field: data.Image order_sing_gift_icon = 7;
     */
    orderSingGiftIcon?: Image;
}
/**
 * @generated from protobuf message data.CurrentOrderSingItemV2
 */
export interface CurrentOrderSingItemV2 {
    /**
     * @generated from protobuf field: data.OrderSingItemV2 current_sing_item = 1;
     */
    currentSingItem?: OrderSingItemV2;
    /**
     * @generated from protobuf field: data.MicrophoneTaskDataV2 microphone_task_data = 2;
     */
    microphoneTaskData?: MicrophoneTaskDataV2;
}
/**
 * @generated from protobuf message data.MicrophoneTaskDataV2
 */
export interface MicrophoneTaskDataV2 {
    /**
     * @generated from protobuf field: int64 current_score = 1;
     */
    currentScore: bigint;
    /**
     * @generated from protobuf field: int64 need_score_to_next = 2;
     */
    needScoreToNext: bigint;
    /**
     * @generated from protobuf field: int32 order_sing_stage = 3;
     */
    orderSingStage: number;
}
/**
 * @generated from protobuf message data.AdventurFont
 */
export interface AdventurFont {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: string color = 2;
     */
    color: string;
}
/**
 * @generated from protobuf message data.AdventureCardInfo
 */
export interface AdventureCardInfo {
    /**
     * @generated from protobuf field: int64 card_id = 1;
     */
    cardId: bigint;
    /**
     * @generated from protobuf field: int64 from_stage_id = 2;
     */
    fromStageId: bigint;
    /**
     * @generated from protobuf field: data.Image background = 3;
     */
    background?: Image;
    /**
     * @generated from protobuf field: int64 pair_id = 5;
     */
    pairId: bigint;
    /**
     * @generated from protobuf field: data.AdventurFont title = 7;
     */
    title?: AdventurFont;
    /**
     * @generated from protobuf field: int64 card_unique_id = 8;
     */
    cardUniqueId: bigint;
    /**
     * @generated from protobuf field: data.AdventurFont timestamp = 9;
     */
    timestamp?: AdventurFont;
    /**
     * @generated from protobuf field: string paired_user_nickname_color = 10;
     */
    pairedUserNicknameColor: string;
    /**
     * @generated from protobuf field: string card_unique_id_str = 11;
     */
    cardUniqueIdStr: string;
    /**
     * @generated from protobuf field: string pair_id_str = 12;
     */
    pairIdStr: string;
}
/**
 * @generated from protobuf message data.AdventurePairInfo
 */
export interface AdventurePairInfo {
    /**
     * @generated from protobuf field: int64 pair_id = 1;
     */
    pairId: bigint;
    /**
     * @generated from protobuf field: data.AdventureUserInfo from_user = 2;
     */
    fromUser?: AdventureUserInfo;
    /**
     * @generated from protobuf field: data.AdventureUserInfo to_user = 3;
     */
    toUser?: AdventureUserInfo;
    /**
     * @generated from protobuf field: int64 score = 4;
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 next_stage_score = 5;
     */
    nextStageScore: bigint;
    /**
     * @generated from protobuf field: int64 stage_id = 6;
     */
    stageId: bigint;
    /**
     * @generated from protobuf field: data.AdventureStageInfo stage_info = 7;
     */
    stageInfo?: AdventureStageInfo;
    /**
     * @generated from protobuf field: int32 pair_status = 8;
     */
    pairStatus: number;
    /**
     * @generated from protobuf field: int32 call_status = 9;
     */
    callStatus: number;
    /**
     * @generated from protobuf field: int64 caller_user_id = 10;
     */
    callerUserId: bigint;
    /**
     * @generated from protobuf field: string pair_id_str = 11;
     */
    pairIdStr: string;
}
/**
 * @generated from protobuf message data.AdventureStageInfo
 */
export interface AdventureStageInfo {
    /**
     * @generated from protobuf field: int64 stage_id = 1;
     */
    stageId: bigint;
    /**
     * @generated from protobuf field: string stage_name = 2;
     */
    stageName: string;
    /**
     * @generated from protobuf field: data.Image stage_background = 3;
     */
    stageBackground?: Image;
    /**
     * @generated from protobuf field: int64 stage_lower_limit_score = 5;
     */
    stageLowerLimitScore: bigint;
    /**
     * @generated from protobuf field: repeated int64 stage_lower_limit_score_list = 6;
     */
    stageLowerLimitScoreList: bigint[];
    /**
     * @generated from protobuf field: int32 button_status = 7;
     */
    buttonStatus: number;
    /**
     * @generated from protobuf field: int64 stage_call_duration = 8;
     */
    stageCallDuration: bigint;
    /**
     * @generated from protobuf field: repeated int64 stage_call_duration_list = 9;
     */
    stageCallDurationList: bigint[];
    /**
     * @generated from protobuf field: int32 stage_type = 10;
     */
    stageType: number;
    /**
     * @generated from protobuf field: data.Image process_bar_track_image = 11;
     */
    processBarTrackImage?: Image;
    /**
     * @generated from protobuf field: data.Image process_bar_image = 12;
     */
    processBarImage?: Image;
    /**
     * @generated from protobuf field: data.Image process_bar_dot_image = 13;
     */
    processBarDotImage?: Image;
    /**
     * @generated from protobuf field: data.Image process_bar_header_image = 14;
     */
    processBarHeaderImage?: Image;
    /**
     * @generated from protobuf field: data.Image process_bar_bubble_image = 15;
     */
    processBarBubbleImage?: Image;
    /**
     * @generated from protobuf field: data.Image process_bar_bubble_header_image = 16;
     */
    processBarBubbleHeaderImage?: Image;
    /**
     * @generated from protobuf field: data.Image paired_user_avatar_bg = 17;
     */
    pairedUserAvatarBg?: Image;
    /**
     * @generated from protobuf field: string paired_user_avatar_bg_border_color = 18;
     */
    pairedUserAvatarBgBorderColor: string;
    /**
     * @generated from protobuf field: int64 stage_bg_type = 19;
     */
    stageBgType: bigint;
}
/**
 * @generated from protobuf message data.AdventureUserInfo
 */
export interface AdventureUserInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 2;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: string nick_name = 3;
     */
    nickName: string;
    /**
     * @generated from protobuf field: int64 score = 4;
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 rank = 5;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: bool is_mvp = 8;
     */
    isMvp: boolean;
    /**
     * @generated from protobuf field: int32 user_status = 9;
     */
    userStatus: number;
    /**
     * @generated from protobuf field: int64 invited_count = 10;
     */
    invitedCount: bigint;
    /**
     * @generated from protobuf field: repeated int64 invite_users = 11;
     */
    inviteUsers: bigint[];
    /**
     * @generated from protobuf field: int32 call_status = 12;
     */
    callStatus: number;
    /**
     * @generated from protobuf field: data.Image new_im_icon_with_level = 13;
     */
    newImIconWithLevel?: Image;
    /**
     * @generated from protobuf field: int32 gender = 14;
     */
    gender: number;
}
/**
 * @generated from protobuf message data.AdventureSettingContent
 */
export interface AdventureSettingContent {
    /**
     * @generated from protobuf field: data.Image header_background = 1;
     */
    headerBackground?: Image;
    /**
     * @generated from protobuf field: repeated data.AdventureStageInfo stage_info_list = 2;
     */
    stageInfoList: AdventureStageInfo[];
    /**
     * @generated from protobuf field: data.AdventureStageInfo call_stage = 3;
     */
    callStage?: AdventureStageInfo;
}
/**
 * @generated from protobuf message data.AdventurePlayModeInfo
 */
export interface AdventurePlayModeInfo {
    /**
     * @generated from protobuf field: repeated data.AdventureUserInfo linked_user_list = 5;
     */
    linkedUserList: AdventureUserInfo[];
    /**
     * @generated from protobuf field: int32 play_mode_status = 7;
     */
    playModeStatus: number;
    /**
     * @generated from protobuf field: data.AdventureSettingContent setting_content = 8;
     */
    settingContent?: AdventureSettingContent;
    /**
     * @generated from protobuf field: int64 play_id = 9;
     */
    playId: bigint;
    /**
     * @generated from protobuf field: data.Image start_animation = 10;
     */
    startAnimation?: Image;
    /**
     * @generated from protobuf field: data.Image finish_animation = 11;
     */
    finishAnimation?: Image;
    /**
     * @generated from protobuf field: string play_id_str = 12;
     */
    playIdStr: string;
}
/**
 * @generated from protobuf message data.ChatMatchGroupInfo
 */
export interface ChatMatchGroupInfo {
    /**
     * @generated from protobuf field: string group_id = 1;
     */
    groupId: string;
    /**
     * @generated from protobuf field: int64 tag_id = 2;
     */
    tagId: bigint;
    /**
     * @generated from protobuf field: int64 disband_time = 3;
     */
    disbandTime: bigint;
    /**
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated data.User group_user_list = 5;
     */
    groupUserList: User[];
    /**
     * @generated from protobuf field: int64 version = 6;
     */
    version: bigint;
}
/**
 * @generated from protobuf message data.InteractiveScreenCastInfo
 */
export interface InteractiveScreenCastInfo {
    /**
     * @generated from protobuf field: string item_app_id = 1;
     */
    itemAppId: string;
    /**
     * @generated from protobuf field: int32 item_type = 2;
     */
    itemType: number;
}
/**
 * @generated from protobuf message data.LinkmicGameInfo
 */
export interface LinkmicGameInfo {
    /**
     * @generated from protobuf field: int64 play_id = 1;
     */
    playId: bigint;
    /**
     * @generated from protobuf field: string game_id = 2;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string game_category = 3;
     */
    gameCategory: string;
}
/**
 * @generated from protobuf message data.ThemedCompetitionSetting
 */
export interface ThemedCompetitionSetting {
    /**
     * @generated from protobuf field: string theme = 1;
     */
    theme: string;
    /**
     * @generated from protobuf field: int32 theme_type = 2;
     */
    themeType: number;
    /**
     * @generated from protobuf field: int32 selection_type = 3;
     */
    selectionType: number;
    /**
     * @generated from protobuf field: int64 win_count = 4;
     */
    winCount: bigint;
    /**
     * @generated from protobuf field: repeated int64 judges_user_id_list = 5;
     */
    judgesUserIdList: bigint[];
    /**
     * @generated from protobuf field: int64 max_judges_count = 6;
     */
    maxJudgesCount: bigint;
    /**
     * @generated from protobuf field: int64 max_win_count = 7;
     */
    maxWinCount: bigint;
    /**
     * @generated from protobuf field: repeated string server_theme_list = 8;
     */
    serverThemeList: string[];
    /**
     * @generated from protobuf field: string custom_theme = 9;
     */
    customTheme: string;
    /**
     * @generated from protobuf field: int64 max_score = 10;
     */
    maxScore: bigint;
    /**
     * @generated from protobuf field: bool can_edit_score = 11;
     */
    canEditScore: boolean;
    /**
     * @generated from protobuf field: repeated int64 max_score_candidates = 12;
     */
    maxScoreCandidates: bigint[];
}
/**
 * @generated from protobuf message data.ThemedCompetitionInfo
 */
export interface ThemedCompetitionInfo {
    /**
     * @generated from protobuf field: data.ThemedCompetitionSetting setting = 1;
     */
    setting?: ThemedCompetitionSetting;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 competition_id = 4;
     */
    competitionId: bigint;
    /**
     * @generated from protobuf field: int64 current_performer_user_id = 5;
     */
    currentPerformerUserId: bigint;
}
/**
 * @generated from protobuf message data.ThemedCompetitionInfo.Score
 */
export interface ThemedCompetitionInfo_Score {
    /**
     * @generated from protobuf field: int64 score = 1;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string score_fuzz = 2;
     */
    scoreFuzz: string;
    /**
     * @generated from protobuf field: int32 win_type = 3;
     */
    winType: number;
    /**
     * @generated from protobuf field: int64 rank = 4;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: bool show_effect = 5;
     */
    showEffect: boolean;
}
/**
 * @generated from protobuf message data.LotteryExpandActivityInfo
 */
export interface LotteryExpandActivityInfo {
    /**
     * @generated from protobuf field: int64 biz_id = 1;
     */
    bizId: bigint;
    /**
     * @generated from protobuf field: string expand_activity_id = 2;
     */
    expandActivityId: string;
    /**
     * @generated from protobuf field: string rule_text = 3;
     */
    ruleText: string;
    /**
     * @generated from protobuf field: string tips_text = 4;
     */
    tipsText: string;
    /**
     * @generated from protobuf field: int64 expand_lucky_count = 5;
     */
    expandLuckyCount: bigint;
    /**
     * @generated from protobuf field: int64 expand_grant_count = 6;
     */
    expandGrantCount: bigint;
    /**
     * @generated from protobuf field: string extra_gift_bag = 10;
     */
    extraGiftBag: string;
    /**
     * @generated from protobuf field: int64 bytepay_voucher_switcher = 11;
     */
    bytepayVoucherSwitcher: bigint;
}
/**
 * @generated from protobuf message data.LotteryRegularlyConfig
 */
export interface LotteryRegularlyConfig {
    /**
     * @generated from protobuf field: int32 times = 1;
     */
    times: number;
    /**
     * @generated from protobuf field: int32 interval = 2;
     */
    interval: number;
}
/**
 * @generated from protobuf message data.LotteryInfo
 */
export interface LotteryInfo {
    /**
     * @generated from protobuf field: int64 lottery_id = 1;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: int64 owner_user_id = 2;
     */
    ownerUserId: bigint;
    /**
     * @generated from protobuf field: int64 anchor_id = 3;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: int32 owner_type = 4;
     */
    ownerType: number;
    /**
     * @generated from protobuf field: int64 room_id = 5;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int32 status = 6;
     */
    status: number;
    /**
     * @generated from protobuf field: data.LotteryPrize prize_info = 7;
     */
    prizeInfo?: LotteryPrize;
    /**
     * @generated from protobuf field: repeated data.LotteryCondition conditions = 8;
     */
    conditions: LotteryCondition[];
    /**
     * @generated from protobuf field: int64 prize_count = 9;
     */
    prizeCount: bigint;
    /**
     * @generated from protobuf field: int64 lucky_count = 10;
     */
    luckyCount: bigint;
    /**
     * @generated from protobuf field: int64 count_down = 11;
     */
    countDown: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 12;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 draw_time = 13;
     */
    drawTime: bigint;
    /**
     * @generated from protobuf field: string extra = 14;
     */
    extra: string;
    /**
     * @generated from protobuf field: int64 real_lucky_count = 15;
     */
    realLuckyCount: bigint;
    /**
     * @generated from protobuf field: int64 total_grant_count = 16;
     */
    totalGrantCount: bigint;
    /**
     * @generated from protobuf field: int64 withdraw_count = 17;
     */
    withdrawCount: bigint;
    /**
     * @generated from protobuf field: int64 real_draw_time = 18;
     */
    realDrawTime: bigint;
    /**
     * @generated from protobuf field: repeated data.LotteryLuckyUser lucky_users = 19;
     */
    luckyUsers: LotteryLuckyUser[];
    /**
     * @generated from protobuf field: int64 current_time = 20;
     */
    currentTime: bigint;
    /**
     * @generated from protobuf field: int64 candidate_num = 21;
     */
    candidateNum: bigint;
    /**
     * @generated from protobuf field: string lottery_id_str = 22;
     */
    lotteryIdStr: string;
    /**
     * @generated from protobuf field: string room_id_str = 23;
     */
    roomIdStr: string;
    /**
     * @generated from protobuf field: string sec_anchor_id = 24;
     */
    secAnchorId: string;
    /**
     * @generated from protobuf field: string sec_owner_user_id = 25;
     */
    secOwnerUserId: string;
    /**
     * @generated from protobuf field: repeated data.LotteryExpandActivityInfo expand_activity_info_list = 26;
     */
    expandActivityInfoList: LotteryExpandActivityInfo[];
    /**
     * @generated from protobuf field: bool use_new_draw_interaction = 27;
     */
    useNewDrawInteraction: boolean;
    /**
     * @generated from protobuf field: string launch_task_id = 30;
     */
    launchTaskId: string;
    /**
     * @generated from protobuf field: int32 index = 31;
     */
    index: number;
    /**
     * @generated from protobuf field: data.LaunchTaskInfo launch_task_info = 32;
     */
    launchTaskInfo?: LaunchTaskInfo;
    /**
     * @generated from protobuf field: string client_biz_data = 50;
     */
    clientBizData: string;
    /**
     * @generated from protobuf field: string server_biz_data = 51;
     */
    serverBizData: string;
    /**
     * @generated from protobuf field: string ui_config = 52;
     */
    uiConfig: string;
}
/**
 * @generated from protobuf message data.LaunchTaskInfo
 */
export interface LaunchTaskInfo {
    /**
     * @generated from protobuf field: int64 launch_task_id = 1;
     */
    launchTaskId: bigint;
    /**
     * @generated from protobuf field: string launch_task_id_str = 2;
     */
    launchTaskIdStr: string;
    /**
     * @generated from protobuf field: int64 launch_task_status = 3;
     */
    launchTaskStatus: bigint;
    /**
     * @generated from protobuf field: int64 had_launch_count = 5;
     */
    hadLaunchCount: bigint;
    /**
     * @generated from protobuf field: int64 last_lottery_id = 6;
     */
    lastLotteryId: bigint;
    /**
     * @generated from protobuf field: data.LotteryRegularlyConfig regularly_config = 4;
     */
    regularlyConfig?: LotteryRegularlyConfig;
}
/**
 * @generated from protobuf message data.LotteryPrize
 */
export interface LotteryPrize {
    /**
     * @generated from protobuf field: int64 prize_id = 1;
     */
    prizeId: bigint;
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string image = 4;
     */
    image: string;
    /**
     * @generated from protobuf field: string prize_description = 5;
     */
    prizeDescription: string;
}
/**
 * @generated from protobuf message data.LotteryCondition
 */
export interface LotteryCondition {
    /**
     * @generated from protobuf field: int64 condition_id = 1;
     */
    conditionId: bigint;
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: int64 gift_id = 6;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 gift_count = 7;
     */
    giftCount: bigint;
    /**
     * @generated from protobuf field: string gift_name = 8;
     */
    giftName: string;
    /**
     * @generated from protobuf field: int64 need_diamond_count = 9;
     */
    needDiamondCount: bigint;
    /**
     * @generated from protobuf field: int64 min_fans_level = 10;
     */
    minFansLevel: bigint;
    /**
     * @generated from protobuf field: string remarks = 30;
     */
    remarks: string;
    /**
     * @generated from protobuf field: string biz_info = 31;
     */
    bizInfo: string;
}
/**
 * @generated from protobuf message data.LotteryLuckyUser
 */
export interface LotteryLuckyUser {
    /**
     * @generated from protobuf field: int64 lucky_id = 1;
     */
    luckyId: bigint;
    /**
     * @generated from protobuf field: int64 lottery_id = 2;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 3;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 4;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string user_name = 5;
     */
    userName: string;
    /**
     * @generated from protobuf field: string avatar_url = 6;
     */
    avatarUrl: string;
    /**
     * @generated from protobuf field: int64 grant_count = 7;
     */
    grantCount: bigint;
    /**
     * @generated from protobuf field: string user_extra_info = 8;
     */
    userExtraInfo: string;
    /**
     * @generated from protobuf field: string order_info = 9;
     */
    orderInfo: string;
    /**
     * @generated from protobuf field: string sec_user_id = 10;
     */
    secUserId: string;
    /**
     * @generated from protobuf field: int64 prize_type = 11;
     */
    prizeType: bigint;
    /**
     * @generated from protobuf field: string prize_name = 12;
     */
    prizeName: string;
    /**
     * @generated from protobuf field: int64 expire_time = 13;
     */
    expireTime: bigint;
    /**
     * @generated from protobuf field: repeated data.VoucherPrizeInfo voucher_prize_list = 14;
     */
    voucherPrizeList: VoucherPrizeInfo[];
    /**
     * @generated from protobuf field: bool use_new_award = 15;
     */
    useNewAward: boolean;
    /**
     * @generated from protobuf field: data.LotteryLuckyUser.Award award = 16;
     */
    award?: LotteryLuckyUser_Award;
}
/**
 * @generated from protobuf message data.LotteryLuckyUser.Award
 */
export interface LotteryLuckyUser_Award {
    /**
     * @generated from protobuf field: string summary_description = 15;
     */
    summaryDescription: string;
    /**
     * @generated from protobuf field: repeated data.LotteryLuckyUser.Award.PrizeDetail prize_details = 16;
     */
    prizeDetails: LotteryLuckyUser_Award_PrizeDetail[];
}
/**
 * @generated from protobuf message data.LotteryLuckyUser.Award.PrizeDetail
 */
export interface LotteryLuckyUser_Award_PrizeDetail {
    /**
     * @generated from protobuf field: int32 interest_show_type = 1;
     */
    interestShowType: number;
    /**
     * @generated from protobuf field: string interest_show_unit = 2;
     */
    interestShowUnit: string;
    /**
     * @generated from protobuf field: string interest_value = 3;
     */
    interestValue: string;
    /**
     * @generated from protobuf field: string prize_name = 4;
     */
    prizeName: string;
    /**
     * @generated from protobuf field: string prize_description = 5;
     */
    prizeDescription: string;
}
/**
 * @generated from protobuf message data.VoucherPrizeInfo
 */
export interface VoucherPrizeInfo {
    /**
     * @generated from protobuf field: string prize_amount = 1;
     */
    prizeAmount: string;
    /**
     * @generated from protobuf field: string prize_batch_name = 2;
     */
    prizeBatchName: string;
    /**
     * @generated from protobuf field: int64 expire_time = 3;
     */
    expireTime: bigint;
    /**
     * @generated from protobuf field: string prize_unit = 4;
     */
    prizeUnit: string;
    /**
     * @generated from protobuf field: string desc = 5;
     */
    desc: string;
}
/**
 * @generated from protobuf message data.Portal
 */
export interface Portal {
    /**
     * @generated from protobuf field: int64 start_time = 1;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 enter_count = 2;
     */
    enterCount: bigint;
    /**
     * @generated from protobuf field: data.User sugar_daddy = 3;
     */
    sugarDaddy?: User;
    /**
     * @generated from protobuf field: int64 room_id = 4;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: data.User anchor = 5;
     */
    anchor?: User;
    /**
     * @generated from protobuf field: int64 portal_id = 6;
     */
    portalId: bigint;
    /**
     * @generated from protobuf field: int32 user_type = 7;
     */
    userType: number;
    /**
     * @generated from protobuf field: int64 invitee_count = 8;
     */
    inviteeCount: bigint;
    /**
     * @generated from protobuf field: int32 status = 9;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 wait_duration = 10;
     */
    waitDuration: bigint;
    /**
     * @generated from protobuf field: int64 reward_duration = 11;
     */
    rewardDuration: bigint;
    /**
     * @generated from protobuf field: int64 total_amount = 12;
     */
    totalAmount: bigint;
    /**
     * @generated from protobuf field: data.Image cover = 13;
     */
    cover?: Image;
    /**
     * @generated from protobuf field: int64 room_lucky_money_amount = 14;
     */
    roomLuckyMoneyAmount: bigint;
    /**
     * @generated from protobuf field: repeated data.User audiences = 15;
     */
    audiences: User[];
    /**
     * @generated from protobuf field: int64 distribute_strategy = 16;
     */
    distributeStrategy: bigint;
}
/**
 * @generated from protobuf message data.BetOption
 */
export interface BetOption {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string option_name = 2;
     */
    optionName: string;
    /**
     * @generated from protobuf field: int64 money = 3;
     */
    money: bigint;
    /**
     * @generated from protobuf field: int64 rate = 4;
     */
    rate: bigint;
    /**
     * @generated from protobuf field: bool win = 5;
     */
    win: boolean;
    /**
     * @generated from protobuf field: bool can_bet = 6;
     */
    canBet: boolean;
    /**
     * @generated from protobuf field: int64 can_bet_money = 7;
     */
    canBetMoney: bigint;
}
/**
 * @generated from protobuf message data.AnchorHistoryItem
 */
export interface AnchorHistoryItem {
    /**
     * @generated from protobuf field: string quiz_id = 1;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string quiz_title = 2;
     */
    quizTitle: string;
    /**
     * @generated from protobuf field: string options = 3;
     */
    options: string;
    /**
     * @generated from protobuf field: int32 quiz_status = 4;
     */
    quizStatus: number;
    /**
     * @generated from protobuf field: int64 countdown_time = 5;
     */
    countdownTime: bigint;
    /**
     * @generated from protobuf field: int64 win_option = 6;
     */
    winOption: bigint;
    /**
     * @generated from protobuf field: string template_id = 7;
     */
    templateId: string;
    /**
     * @generated from protobuf field: string fail_reason = 8;
     */
    failReason: string;
    /**
     * @generated from protobuf field: int64 create_time = 9;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int64 settle_again = 10;
     */
    settleAgain: bigint;
    /**
     * @generated from protobuf field: int64 absolute_end_time = 11;
     */
    absoluteEndTime: bigint;
}
/**
 * @generated from protobuf message data.Quiz
 */
export interface Quiz {
    /**
     * @generated from protobuf field: string quiz_id = 1;
     */
    quizId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string options = 3;
     */
    options: string;
    /**
     * @generated from protobuf field: int32 quiz_status = 4;
     */
    quizStatus: number;
    /**
     * @generated from protobuf field: int64 countdown_time = 5;
     */
    countdownTime: bigint;
    /**
     * @generated from protobuf field: int64 win_option = 6;
     */
    winOption: bigint;
    /**
     * @generated from protobuf field: int64 bet_option = 7;
     */
    betOption: bigint;
    /**
     * @generated from protobuf field: string gain = 8;
     */
    gain: string;
    /**
     * @generated from protobuf field: string template_id = 9;
     */
    templateId: string;
    /**
     * @generated from protobuf field: int64 absolute_end_time = 10;
     */
    absoluteEndTime: bigint;
}
/**
 * @generated from protobuf message data.ChatIdentity
 */
export interface ChatIdentity {
    /**
     * @generated from protobuf field: int32 show_identity = 1;
     */
    showIdentity: number;
    /**
     * @generated from protobuf field: data.Image identity_label = 2;
     */
    identityLabel?: Image;
}
/**
 * @generated from protobuf message data.StampInfo
 */
export interface StampInfo {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string open_url = 4;
     */
    openUrl: string;
    /**
     * @generated from protobuf field: string web_url = 5;
     */
    webUrl: string;
    /**
     * @generated from protobuf field: data.Image icon = 6;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int32 status = 7;
     */
    status: number;
    /**
     * @generated from protobuf field: string description = 8;
     */
    description: string;
    /**
     * @generated from protobuf field: data.Image thumbnail = 9;
     */
    thumbnail?: Image;
    /**
     * @generated from protobuf field: string extra = 98;
     */
    extra: string;
    /**
     * @generated from protobuf field: string log_extra = 99;
     */
    logExtra: string;
}
/**
 * @generated from protobuf message data.AudienceEntranceInfo
 */
export interface AudienceEntranceInfo {
    /**
     * @generated from protobuf field: int64 interact_type = 1;
     */
    interactType: bigint;
    /**
     * @generated from protobuf field: string elem_id = 2;
     */
    elemId: string;
    /**
     * @generated from protobuf field: int64 start_id = 3;
     */
    startId: bigint;
    /**
     * @generated from protobuf field: int64 status = 4;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image icon = 6;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: bool check_entrance_visitable = 7;
     */
    checkEntranceVisitable: boolean;
    /**
     * @generated from protobuf field: bool need_metrics_report = 8;
     */
    needMetricsReport: boolean;
    /**
     * @generated from protobuf field: string schema_url = 9;
     */
    schemaUrl: string;
    /**
     * @generated from protobuf field: int32 source = 10;
     */
    source: number;
    /**
     * @generated from protobuf field: int32 punish_status = 11;
     */
    punishStatus: number;
    /**
     * @generated from protobuf field: string im_extra = 97;
     */
    imExtra: string;
    /**
     * @generated from protobuf field: string log_extra = 98;
     */
    logExtra: string;
    /**
     * @generated from protobuf field: string entrance_extra = 99;
     */
    entranceExtra: string;
}
/**
 * @generated from protobuf message data.CustomizedCardInfo
 */
export interface CustomizedCardInfo {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: string open_url = 2;
     */
    openUrl: string;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int32 card_type = 4;
     */
    cardType: number;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 source = 6;
     */
    source: bigint;
    /**
     * @generated from protobuf field: int32 punish_status = 7;
     */
    punishStatus: number;
    /**
     * @generated from protobuf field: string im_extra = 97;
     */
    imExtra: string;
    /**
     * @generated from protobuf field: string log_extra = 98;
     */
    logExtra: string;
    /**
     * @generated from protobuf field: string cover_extra = 99;
     */
    coverExtra: string;
    /**
     * @generated from protobuf field: string app_id = 100;
     */
    appId: string;
    /**
     * @generated from protobuf field: string server_timestamp = 101;
     */
    serverTimestamp: string;
}
/**
 * @generated from protobuf message data.GameCardInfo
 */
export interface GameCardInfo {
    /**
     * @generated from protobuf field: int32 display_status = 1;
     */
    displayStatus: number;
    /**
     * @generated from protobuf field: int64 status = 2;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string open_url = 3;
     */
    openUrl: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: string app_id = 5;
     */
    appId: string;
    /**
     * @generated from protobuf field: int64 save_time = 6;
     */
    saveTime: bigint;
    /**
     * @generated from protobuf field: int64 duration = 7;
     */
    duration: bigint;
}
/**
 * @generated from protobuf message data.ShelfCardInfo
 */
export interface ShelfCardInfo {
    /**
     * @generated from protobuf field: int64 card_id = 1;
     */
    cardId: bigint;
    /**
     * @generated from protobuf field: string schema = 2;
     */
    schema: string;
    /**
     * @generated from protobuf field: string default_title = 3;
     */
    defaultTitle: string;
    /**
     * @generated from protobuf field: string default_cover_url = 4;
     */
    defaultCoverUrl: string;
    /**
     * @generated from protobuf field: string customized_title = 5;
     */
    customizedTitle: string;
    /**
     * @generated from protobuf field: string customized_cover_url = 6;
     */
    customizedCoverUrl: string;
    /**
     * @generated from protobuf field: repeated data.Image image = 7;
     */
    image: Image[];
    /**
     * @generated from protobuf field: string source_page = 8;
     */
    sourcePage: string;
    /**
     * @generated from protobuf field: int32 review_status = 9;
     */
    reviewStatus: number;
    /**
     * @generated from protobuf field: bool from_review = 10;
     */
    fromReview: boolean;
    /**
     * @generated from protobuf field: bool can_modify_cover = 11;
     */
    canModifyCover: boolean;
    /**
     * @generated from protobuf field: int64 status = 12;
     */
    status: bigint;
    /**
     * @generated from protobuf field: int32 card_source = 13;
     */
    cardSource: number;
    /**
     * @generated from protobuf field: string create_info = 14;
     */
    createInfo: string;
    /**
     * @generated from protobuf field: string review_result_reason = 15;
     */
    reviewResultReason: string;
    /**
     * @generated from protobuf field: int32 review_title_status = 16;
     */
    reviewTitleStatus: number;
    /**
     * @generated from protobuf field: string reviewing_title = 17;
     */
    reviewingTitle: string;
    /**
     * @generated from protobuf field: string last_pass_title = 18;
     */
    lastPassTitle: string;
    /**
     * @generated from protobuf field: string last_pass_img = 19;
     */
    lastPassImg: string;
    /**
     * @generated from protobuf field: data.ProductInfo product_info = 20;
     */
    productInfo?: ProductInfo;
    /**
     * @generated from protobuf field: string log_extra = 96;
     */
    logExtra: string;
}
/**
 * @generated from protobuf message data.ShelfMicroAppInfo
 */
export interface ShelfMicroAppInfo {
    /**
     * @generated from protobuf field: string app_id = 1;
     */
    appId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string schema = 4;
     */
    schema: string;
    /**
     * @generated from protobuf field: repeated data.MicroAppLabel label = 5;
     */
    label: MicroAppLabel[];
}
/**
 * @generated from protobuf message data.MicroAppLabel
 */
export interface MicroAppLabel {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 font_size = 2;
     */
    fontSize: number;
    /**
     * @generated from protobuf field: string font_color = 3;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: string background_begin_color = 4;
     */
    backgroundBeginColor: string;
    /**
     * @generated from protobuf field: string background_end_color = 5;
     */
    backgroundEndColor: string;
    /**
     * @generated from protobuf field: string url = 6;
     */
    url: string;
}
/**
 * @generated from protobuf message data.ShelfInfo
 */
export interface ShelfInfo {
    /**
     * @generated from protobuf field: data.ShelfMicroAppInfo app_info = 1;
     */
    appInfo?: ShelfMicroAppInfo;
    /**
     * @generated from protobuf field: repeated data.ShelfCardInfo card_info_list = 2;
     */
    cardInfoList: ShelfCardInfo[];
    /**
     * @generated from protobuf field: int64 start_id = 3;
     */
    startId: bigint;
    /**
     * @generated from protobuf field: int32 source = 4;
     */
    source: number;
    /**
     * @generated from protobuf field: int32 status = 5;
     */
    status: number;
    /**
     * @generated from protobuf field: int32 punish_status = 6;
     */
    punishStatus: number;
    /**
     * @generated from protobuf field: int32 mount_type = 7;
     */
    mountType: number;
    /**
     * @generated from protobuf field: string client_extra = 9;
     */
    clientExtra: string;
    /**
     * @generated from protobuf field: string im_extra = 97;
     */
    imExtra: string;
    /**
     * @generated from protobuf field: string log_extra = 98;
     */
    logExtra: string;
}
/**
 * @generated from protobuf message data.ProductInfo
 */
export interface ProductInfo {
    /**
     * @generated from protobuf field: string product_id = 1;
     */
    productId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string img_url = 3;
     */
    imgUrl: string;
    /**
     * @generated from protobuf field: repeated data.ProductIntroductionInfo introduction_list = 4;
     */
    introductionList: ProductIntroductionInfo[];
    /**
     * @generated from protobuf field: repeated data.ProductLabelInfo label_list = 5;
     */
    labelList: ProductLabelInfo[];
    /**
     * @generated from protobuf field: data.ProductPriceInfo price = 6;
     */
    price?: ProductPriceInfo;
    /**
     * @generated from protobuf field: string action_text = 7;
     */
    actionText: string;
    /**
     * @generated from protobuf field: bool isShow = 8;
     */
    isShow: boolean;
}
/**
 * @generated from protobuf message data.ProductPriceInfo
 */
export interface ProductPriceInfo {
    /**
     * @generated from protobuf field: string original_price = 1;
     */
    originalPrice: string;
    /**
     * @generated from protobuf field: string current_price = 2;
     */
    currentPrice: string;
    /**
     * @generated from protobuf field: string current_prefix = 3;
     */
    currentPrefix: string;
    /**
     * @generated from protobuf field: string current_suffix = 4;
     */
    currentSuffix: string;
}
/**
 * @generated from protobuf message data.ProductIntroductionInfo
 */
export interface ProductIntroductionInfo {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 font_size = 2;
     */
    fontSize: number;
    /**
     * @generated from protobuf field: string font_color = 3;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: int32 introduction_type = 4;
     */
    introductionType: number;
}
/**
 * @generated from protobuf message data.ProductLabelInfo
 */
export interface ProductLabelInfo {
    /**
     * @generated from protobuf field: string left_text = 1;
     */
    leftText: string;
    /**
     * @generated from protobuf field: string right_text = 2;
     */
    rightText: string;
    /**
     * @generated from protobuf field: int32 font_size = 3;
     */
    fontSize: number;
    /**
     * @generated from protobuf field: string font_color = 4;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: string border_color = 5;
     */
    borderColor: string;
    /**
     * @generated from protobuf field: bool dividing_line = 6;
     */
    dividingLine: boolean;
    /**
     * @generated from protobuf field: int32 label_type = 7;
     */
    labelType: number;
}
/**
 * @generated from protobuf message data.PropSummary
 */
export interface PropSummary {
    /**
     * @generated from protobuf field: int64 primary_effect_id = 1;
     */
    primaryEffectId: bigint;
    /**
     * @generated from protobuf field: int64 next_expire = 2;
     */
    nextExpire: bigint;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: int64 prop_def_id = 4;
     */
    propDefId: bigint;
    /**
     * @generated from protobuf field: string manual = 5;
     */
    manual: string;
    /**
     * @generated from protobuf field: int64 diamond = 6;
     */
    diamond: bigint;
    /**
     * @generated from protobuf field: bool reddot_tip = 7;
     */
    reddotTip: boolean;
    /**
     * @generated from protobuf field: data.Image icon = 8;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int32 count = 9;
     */
    count: number;
    /**
     * @generated from protobuf field: string name = 10;
     */
    name: string;
    /**
     * @generated from protobuf field: data.GiftStruct gift = 11;
     */
    gift?: GiftStruct;
    /**
     * @generated from protobuf field: data.Image label_icon = 12;
     */
    labelIcon?: Image;
    /**
     * @generated from protobuf field: bool is_fragment = 13;
     */
    isFragment: boolean;
    /**
     * @generated from protobuf field: int64 fragments_compound_count = 14;
     */
    fragmentsCompoundCount: bigint;
    /**
     * @generated from protobuf field: int64 is_aweme_free_gift = 15;
     */
    isAwemeFreeGift: bigint;
    /**
     * @generated from protobuf field: data.Image diamond_icon = 16;
     */
    diamondIcon?: Image;
    /**
     * @generated from protobuf field: data.Banner banner = 17;
     */
    banner?: Banner;
    /**
     * @generated from protobuf field: int64 prop_def_type = 18;
     */
    propDefType: bigint;
    /**
     * @generated from protobuf field: repeated data.HotfixGiftDataForProp gifts = 19;
     */
    gifts: HotfixGiftDataForProp[];
    /**
     * @generated from protobuf field: string scheme_url = 20;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: bool is_displayed_on_panel = 21;
     */
    isDisplayedOnPanel: boolean;
    /**
     * @generated from protobuf field: int64 prop_def_sub_type = 22;
     */
    propDefSubType: bigint;
}
/**
 * @generated from protobuf message data.HotfixGiftDataForProp
 */
export interface HotfixGiftDataForProp {
    /**
     * @generated from protobuf field: data.Text display_text = 1;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: string describe = 2;
     */
    describe: string;
    /**
     * @generated from protobuf field: int64 gift_id = 3;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 group_count = 4;
     */
    groupCount: bigint;
    /**
     * @generated from protobuf field: int64 repeat_count = 5;
     */
    repeatCount: bigint;
    /**
     * @generated from protobuf field: int64 combo_count = 6;
     */
    comboCount: bigint;
    /**
     * @generated from protobuf field: int64 msg_id = 7;
     */
    msgId: bigint;
}
/**
 * @generated from protobuf message data.EpisodeHighLight
 */
export interface EpisodeHighLight {
    /**
     * @generated from protobuf field: int64 location = 1;
     */
    location: bigint;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: data.Image image = 3;
     */
    image?: Image;
    /**
     * @generated from protobuf field: data.Image small_image = 4;
     */
    smallImage?: Image;
    /**
     * @generated from protobuf field: int64 location_end = 5;
     */
    locationEnd: bigint;
    /**
     * @generated from protobuf field: bool hot = 6;
     */
    hot: boolean;
    /**
     * @generated from protobuf field: int64 collection_id = 7;
     */
    collectionId: bigint;
    /**
     * @generated from protobuf field: string pid = 8;
     */
    pid: string;
    /**
     * @generated from protobuf field: string location_str = 9;
     */
    locationStr: string;
}
/**
 * @generated from protobuf message data.MysteryRankUserItem
 */
export interface MysteryRankUserItem {
    /**
     * @generated from protobuf field: data.MysteryUserInfo User = 1 [json_name = "User"];
     */
    user?: MysteryUserInfo;
    /**
     * @generated from protobuf field: int64 Score = 2 [json_name = "Score"];
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 Rank = 3 [json_name = "Rank"];
     */
    rank: bigint;
}
/**
 * @generated from protobuf message data.MysteryUserImage
 */
export interface MysteryUserImage {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: int64 height = 2;
     */
    height: bigint;
    /**
     * @generated from protobuf field: int64 width = 3;
     */
    width: bigint;
}
/**
 * @generated from protobuf message data.MysteryUserInfo
 */
export interface MysteryUserInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string id_str = 2;
     */
    idStr: string;
    /**
     * @generated from protobuf field: string live_room_id_str = 3;
     */
    liveRoomIdStr: string;
    /**
     * @generated from protobuf field: string nick_name = 4;
     */
    nickName: string;
    /**
     * @generated from protobuf field: data.MysteryUserImage avatar_thumb = 5;
     */
    avatarThumb?: MysteryUserImage;
    /**
     * @generated from protobuf field: bool mystery = 6;
     */
    mystery: boolean;
}
/**
 * @generated from protobuf message data.ProfitInteractionSetting
 */
export interface ProfitInteractionSetting {
    /**
     * @generated from protobuf field: bool show_interaction_score_close = 1;
     */
    showInteractionScoreClose: boolean;
}
/**
 * @generated from protobuf message data.RankEnterInfo
 */
export interface RankEnterInfo {
    /**
     * @generated from protobuf field: repeated data.RankEnterInfo.RankInfo rank_infos = 1;
     */
    rankInfos: RankEnterInfo_RankInfo[];
    /**
     * @generated from protobuf field: bool hidden_enter = 2;
     */
    hiddenEnter: boolean;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: repeated data.RankEnterInfo.Page default_page = 4;
     */
    defaultPage: RankEnterInfo_Page[];
    /**
     * @generated from protobuf field: int64 period_remaining_second = 5;
     */
    periodRemainingSecond: bigint;
    /**
     * @generated from protobuf field: repeated data.RankEnterInfo.RankInfo rank_infos_without_shop = 6;
     */
    rankInfosWithoutShop: RankEnterInfo_RankInfo[];
    /**
     * @generated from protobuf field: bool display_ktv_rank = 7;
     */
    displayKtvRank: boolean;
    /**
     * @generated from protobuf field: repeated data.RankEnterInfo.RankInfo default_rank_infos = 8;
     */
    defaultRankInfos: RankEnterInfo_RankInfo[];
    /**
     * @generated from protobuf field: repeated data.RankEnterInfo.RankInfo customized_default_rank_infos = 9;
     */
    customizedDefaultRankInfos: RankEnterInfo_RankInfo[];
}
/**
 * @generated from protobuf message data.RankEnterInfo.Page
 */
export interface RankEnterInfo_Page {
    /**
     * @generated from protobuf field: int32 jump_rank_type = 1;
     */
    jumpRankType: number;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 content_type = 3;
     */
    contentType: number;
    /**
     * @generated from protobuf field: string background_color = 4;
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message data.RankEnterInfo.RankInfo
 */
export interface RankEnterInfo_RankInfo {
    /**
     * @generated from protobuf field: repeated data.RankEnterInfo.Page pages = 1;
     */
    pages: RankEnterInfo_Page[];
    /**
     * @generated from protobuf field: data.Image icon = 2;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int32 position = 3;
     */
    position: number;
    /**
     * @generated from protobuf field: int32 rank_type = 4;
     */
    rankType: number;
    /**
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @generated from protobuf field: string rank_extra = 6;
     */
    rankExtra: string;
    /**
     * @generated from protobuf field: string entrance_extra = 7;
     */
    entranceExtra: string;
}
/**
 * @generated from protobuf message data.RanklistHourEntrance
 */
export interface RanklistHourEntrance {
    /**
     * @generated from protobuf field: repeated data.RanklistHourEntrance.Info global_infos = 1;
     */
    globalInfos: RanklistHourEntrance_Info[];
    /**
     * @generated from protobuf field: repeated data.RanklistHourEntrance.Info default_global_infos = 2;
     */
    defaultGlobalInfos: RanklistHourEntrance_Info[];
    /**
     * @generated from protobuf field: repeated data.RanklistHourEntrance.Info vertical_infos = 3;
     */
    verticalInfos: RanklistHourEntrance_Info[];
    /**
     * @generated from protobuf field: repeated data.RanklistHourEntrance.Info default_vertical_infos = 4;
     */
    defaultVerticalInfos: RanklistHourEntrance_Info[];
}
/**
 * @generated from protobuf message data.RanklistHourEntrance.Page
 */
export interface RanklistHourEntrance_Page {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: string background_color = 2;
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: int64 show_times = 3;
     */
    showTimes: bigint;
    /**
     * @generated from protobuf field: int32 content_type = 4;
     */
    contentType: number;
}
/**
 * @generated from protobuf message data.RanklistHourEntrance.Detail
 */
export interface RanklistHourEntrance_Detail {
    /**
     * @generated from protobuf field: repeated data.RanklistHourEntrance.Page pages = 1;
     */
    pages: RanklistHourEntrance_Page[];
    /**
     * @generated from protobuf field: int32 ranklist_type = 2;
     */
    ranklistType: number;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string ranklist_extra = 4;
     */
    ranklistExtra: string;
    /**
     * @generated from protobuf field: string entrance_extra = 5;
     */
    entranceExtra: string;
    /**
     * @generated from protobuf field: string schema = 6;
     */
    schema: string;
}
/**
 * @generated from protobuf message data.RanklistHourEntrance.Info
 */
export interface RanklistHourEntrance_Info {
    /**
     * @generated from protobuf field: repeated data.RanklistHourEntrance.Detail details = 1;
     */
    details: RanklistHourEntrance_Detail[];
}
/**
 * @generated from protobuf message data.RoomIntroLabel
 */
export interface RoomIntroLabel {
    /**
     * @generated from protobuf field: int32 label_tag = 1;
     */
    labelTag: number;
    /**
     * @generated from protobuf field: string label_name = 2;
     */
    labelName: string;
    /**
     * @generated from protobuf field: string label_text = 3;
     */
    labelText: string;
    /**
     * @generated from protobuf field: string label_icon = 4;
     */
    labelIcon: string;
    /**
     * @generated from protobuf field: string type_name = 5;
     */
    typeName: string;
}
/**
 * @generated from protobuf message data.TreasureDetail
 */
export interface TreasureDetail {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 count_down = 3;
     */
    countDown: bigint;
    /**
     * @generated from protobuf field: int32 trigger_timing = 4;
     */
    triggerTiming: number;
    /**
     * @generated from protobuf field: string count_down_key = 5;
     */
    countDownKey: string;
}
/**
 * @generated from protobuf message data.FreqCtrlParams
 */
export interface FreqCtrlParams {
    /**
     * @generated from protobuf field: int32 strategy = 1;
     */
    strategy: number;
    /**
     * @generated from protobuf field: int64 limit = 2;
     */
    limit: bigint;
    /**
     * @generated from protobuf field: string key = 3;
     */
    key: string;
    /**
     * @generated from protobuf field: int64 cur = 4;
     */
    cur: bigint;
    /**
     * @generated from protobuf field: int64 duration = 5;
     */
    duration: bigint;
}
/**
 * @generated from protobuf message data.RefreshParams
 */
export interface RefreshParams {
    /**
     * @generated from protobuf field: int32 refresh_mechanism = 1;
     */
    refreshMechanism: number;
    /**
     * @generated from protobuf field: int64 polling_interval = 2;
     */
    pollingInterval: bigint;
}
/**
 * @generated from protobuf message data.TouchPositionMeta
 */
export interface TouchPositionMeta {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 meta_id = 2;
     */
    metaId: bigint;
    /**
     * @generated from protobuf field: int32 position = 3;
     */
    position: number;
    /**
     * @generated from protobuf field: int64 template = 4;
     */
    template: bigint;
    /**
     * @generated from protobuf field: repeated data.FreqCtrlParams freq_ctrl_params_list = 5;
     */
    freqCtrlParamsList: FreqCtrlParams[];
    /**
     * @generated from protobuf field: int64 duration = 6;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: repeated data.RefreshParams refresh_params_list = 7;
     */
    refreshParamsList: RefreshParams[];
    /**
     * @generated from protobuf field: int64 priority = 8;
     */
    priority: bigint;
}
/**
 * @generated from protobuf message data.TaskCurrentInfo
 */
export interface TaskCurrentInfo {
    /**
     * @generated from protobuf field: int64 pk_win_count = 1;
     */
    pkWinCount: bigint;
    /**
     * @generated from protobuf field: int64 room_like_count = 2;
     */
    roomLikeCount: bigint;
    /**
     * @generated from protobuf field: int64 subscribe_count = 4;
     */
    subscribeCount: bigint;
}
/**
 * @generated from protobuf message data.TaskConditionExtra
 */
export interface TaskConditionExtra {
    /**
     * @generated from protobuf field: int64 customized_gift_id = 1;
     */
    customizedGiftId: bigint;
    /**
     * @generated from protobuf field: data.Image gift_icon = 2;
     */
    giftIcon?: Image;
}
/**
 * @generated from protobuf message data.TaskCondition
 */
export interface TaskCondition {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: int64 value = 2;
     */
    value: bigint;
    /**
     * @generated from protobuf field: string operator = 3;
     */
    operator: string;
    /**
     * @generated from protobuf field: data.TaskConditionExtra extra = 4;
     */
    extra?: TaskConditionExtra;
}
/**
 * @generated from protobuf message data.TaskTodoStep
 */
export interface TaskTodoStep {
    /**
     * @generated from protobuf field: repeated data.TaskCondition conditions = 1;
     */
    conditions: TaskCondition[];
}
/**
 * @generated from protobuf message data.TaskTodo
 */
export interface TaskTodo {
    /**
     * @generated from protobuf field: repeated data.TaskTodoStep steps = 1;
     */
    steps: TaskTodoStep[];
}
/**
 * @generated from protobuf message data.TaskRecord
 */
export interface TaskRecord {
    /**
     * @generated from protobuf field: int32 task_status = 1;
     */
    taskStatus: number;
    /**
     * @generated from protobuf field: int64 task_class_id = 2;
     */
    taskClassId: bigint;
    /**
     * @generated from protobuf field: repeated data.TaskTodo todos = 3;
     */
    todos: TaskTodo[];
    /**
     * @generated from protobuf field: data.TaskCurrentInfo current_info = 4;
     */
    currentInfo?: TaskCurrentInfo;
    /**
     * @generated from protobuf field: int32 wish_type = 5;
     */
    wishType: number;
    /**
     * @generated from protobuf field: data.WishContributor wish_contributor = 6;
     */
    wishContributor?: WishContributor;
}
/**
 * @generated from protobuf message data.WishContributor
 */
export interface WishContributor {
    /**
     * @generated from protobuf field: repeated data.WishContributor.Contributor contributors = 1;
     */
    contributors: WishContributor_Contributor[];
    /**
     * @generated from protobuf field: int64 total_count = 2;
     */
    totalCount: bigint;
    /**
     * @generated from protobuf field: bool show_score = 3;
     */
    showScore: boolean;
}
/**
 * @generated from protobuf message data.WishContributor.Contributor
 */
export interface WishContributor_Contributor {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string sec_user_id = 2;
     */
    secUserId: string;
    /**
     * @generated from protobuf field: data.Image avatar = 3;
     */
    avatar?: Image;
    /**
     * @generated from protobuf field: string nick_name = 4;
     */
    nickName: string;
    /**
     * @generated from protobuf field: string score_desc = 5;
     */
    scoreDesc: string;
}
/**
 * @generated from protobuf message data.AppUserInfo
 */
export interface AppUserInfo {
    /**
     * @generated from protobuf field: string app_id = 1;
     */
    appId: string;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: string open_uid = 3;
     */
    openUid: string;
}
/**
 * @generated from protobuf message data.GiftAudienceReceiverItem
 */
export interface GiftAudienceReceiverItem {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: bool gift_auth = 3;
     */
    giftAuth: boolean;
    /**
     * @generated from protobuf field: string off_reason_toast = 4;
     */
    offReasonToast: string;
}
/**
 * @generated from protobuf message data.StartSingMultiChorusContent
 */
export interface StartSingMultiChorusContent {
    /**
     * @generated from protobuf field: data.MultiChorusCommonContent common = 1;
     */
    common?: MultiChorusCommonContent;
}
/**
 * @generated from protobuf message data.JoinMultiChorusContent
 */
export interface JoinMultiChorusContent {
    /**
     * @generated from protobuf field: data.MultiChorusCommonContent common = 1;
     */
    common?: MultiChorusCommonContent;
}
/**
 * @generated from protobuf message data.LeaveMultiChorusContent
 */
export interface LeaveMultiChorusContent {
    /**
     * @generated from protobuf field: data.MultiChorusCommonContent common = 1;
     */
    common?: MultiChorusCommonContent;
}
/**
 * @generated from protobuf message data.FinishMultiChorusContent
 */
export interface FinishMultiChorusContent {
    /**
     * @generated from protobuf field: data.MultiChorusCommonContent common = 1;
     */
    common?: MultiChorusCommonContent;
    /**
     * @generated from protobuf field: int32 finish_reason = 2;
     */
    finishReason: number;
    /**
     * @generated from protobuf field: string toast = 3;
     */
    toast: string;
}
/**
 * @generated from protobuf message data.MultiChorusCommonContent
 */
export interface MultiChorusCommonContent {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.MultiChorusInfo multi_chorus_info = 2;
     */
    multiChorusInfo?: MultiChorusInfo;
}
/**
 * @generated from protobuf message data.MultiChorusUpdateMessage
 */
export interface MultiChorusUpdateMessage {
    /**
     * @generated from protobuf field: int32 msg_type = 1;
     */
    msgType: number;
    /**
     * @generated from protobuf field: data.StartSingMultiChorusContent start_sing_multi_chorus_content = 2;
     */
    startSingMultiChorusContent?: StartSingMultiChorusContent;
    /**
     * @generated from protobuf field: data.JoinMultiChorusContent join_multi_chorus_content = 3;
     */
    joinMultiChorusContent?: JoinMultiChorusContent;
    /**
     * @generated from protobuf field: data.LeaveMultiChorusContent leave_multi_chorus_content = 4;
     */
    leaveMultiChorusContent?: LeaveMultiChorusContent;
    /**
     * @generated from protobuf field: data.FinishMultiChorusContent finish_multi_chorus_content = 5;
     */
    finishMultiChorusContent?: FinishMultiChorusContent;
}
/**
 * @generated from protobuf message data.MultiChorusInfo
 */
export interface MultiChorusInfo {
    /**
     * @generated from protobuf field: repeated int64 user_ids = 1;
     */
    userIds: bigint[];
    /**
     * @generated from protobuf field: int64 leader_user_id = 2;
     */
    leaderUserId: bigint;
    /**
     * @generated from protobuf field: int64 song_id = 3;
     */
    songId: bigint;
    /**
     * @generated from protobuf field: int32 song_type = 4;
     */
    songType: number;
    /**
     * @generated from protobuf field: string chorus_id = 6;
     */
    chorusId: string;
}
/**
 * @generated from protobuf message data.MultiChorusUserBase
 */
export interface MultiChorusUserBase {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 2;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: int32 secret = 3;
     */
    secret: number;
    /**
     * @generated from protobuf field: string sec_uid = 4;
     */
    secUid: string;
    /**
     * @generated from protobuf field: int32 mystery_man = 5;
     */
    mysteryMan: number;
}
/**
 * @generated from protobuf message data.MoreLiveEntrance
 */
export interface MoreLiveEntrance {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 tab_type = 2;
     */
    tabType: bigint;
    /**
     * @generated from protobuf field: int64 valid_time = 3;
     */
    validTime: bigint;
    /**
     * @generated from protobuf field: int64 priority = 4;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
    /**
     * @generated from protobuf field: string event_extra = 6;
     */
    eventExtra: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PatternRef$Type extends MessageType<PatternRef> {
    constructor() {
        super("data.PatternRef", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "default_pattern", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PatternRef>): PatternRef {
        const message = { key: "", defaultPattern: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PatternRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PatternRef): PatternRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string default_pattern */ 2:
                    message.defaultPattern = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PatternRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string default_pattern = 2; */
        if (message.defaultPattern !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultPattern);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PatternRef
 */
export const PatternRef = new PatternRef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextFormat$Type extends MessageType<TextFormat> {
    constructor() {
        super("data.TextFormat", [
            { no: 1, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bold", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "italic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "weight", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "italic_angle", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "font_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "use_heigh_light_color", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "use_remote_clor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TextFormat>): TextFormat {
        const message = { color: "", bold: false, italic: false, weight: 0, italicAngle: 0, fontSize: 0, useHeighLightColor: false, useRemoteClor: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextFormat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextFormat): TextFormat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string color */ 1:
                    message.color = reader.string();
                    break;
                case /* bool bold */ 2:
                    message.bold = reader.bool();
                    break;
                case /* bool italic */ 3:
                    message.italic = reader.bool();
                    break;
                case /* int32 weight */ 4:
                    message.weight = reader.int32();
                    break;
                case /* int32 italic_angle */ 5:
                    message.italicAngle = reader.int32();
                    break;
                case /* int32 font_size */ 6:
                    message.fontSize = reader.int32();
                    break;
                case /* bool use_heigh_light_color */ 7:
                    message.useHeighLightColor = reader.bool();
                    break;
                case /* bool use_remote_clor */ 8:
                    message.useRemoteClor = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextFormat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string color = 1; */
        if (message.color !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.color);
        /* bool bold = 2; */
        if (message.bold !== false)
            writer.tag(2, WireType.Varint).bool(message.bold);
        /* bool italic = 3; */
        if (message.italic !== false)
            writer.tag(3, WireType.Varint).bool(message.italic);
        /* int32 weight = 4; */
        if (message.weight !== 0)
            writer.tag(4, WireType.Varint).int32(message.weight);
        /* int32 italic_angle = 5; */
        if (message.italicAngle !== 0)
            writer.tag(5, WireType.Varint).int32(message.italicAngle);
        /* int32 font_size = 6; */
        if (message.fontSize !== 0)
            writer.tag(6, WireType.Varint).int32(message.fontSize);
        /* bool use_heigh_light_color = 7; */
        if (message.useHeighLightColor !== false)
            writer.tag(7, WireType.Varint).bool(message.useHeighLightColor);
        /* bool use_remote_clor = 8; */
        if (message.useRemoteClor !== false)
            writer.tag(8, WireType.Varint).bool(message.useRemoteClor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextFormat
 */
export const TextFormat = new TextFormat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextPieceUser$Type extends MessageType<TextPieceUser> {
    constructor() {
        super("data.TextPieceUser", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "with_colon", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "self_show_real_name", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "left_show_extension", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "left_additional_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "right_additional_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextPieceUser>): TextPieceUser {
        const message = { withColon: false, selfShowRealName: false, leftShowExtension: 0, leftAdditionalContent: "", rightAdditionalContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextPieceUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextPieceUser): TextPieceUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* bool with_colon */ 2:
                    message.withColon = reader.bool();
                    break;
                case /* bool self_show_real_name */ 3:
                    message.selfShowRealName = reader.bool();
                    break;
                case /* int32 left_show_extension */ 4:
                    message.leftShowExtension = reader.int32();
                    break;
                case /* string left_additional_content */ 5:
                    message.leftAdditionalContent = reader.string();
                    break;
                case /* string right_additional_content */ 6:
                    message.rightAdditionalContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextPieceUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool with_colon = 2; */
        if (message.withColon !== false)
            writer.tag(2, WireType.Varint).bool(message.withColon);
        /* bool self_show_real_name = 3; */
        if (message.selfShowRealName !== false)
            writer.tag(3, WireType.Varint).bool(message.selfShowRealName);
        /* int32 left_show_extension = 4; */
        if (message.leftShowExtension !== 0)
            writer.tag(4, WireType.Varint).int32(message.leftShowExtension);
        /* string left_additional_content = 5; */
        if (message.leftAdditionalContent !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.leftAdditionalContent);
        /* string right_additional_content = 6; */
        if (message.rightAdditionalContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rightAdditionalContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextPieceUser
 */
export const TextPieceUser = new TextPieceUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextPieceGift$Type extends MessageType<TextPieceGift> {
    constructor() {
        super("data.TextPieceGift", [
            { no: 1, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name_ref", kind: "message", T: () => PatternRef }
        ]);
    }
    create(value?: PartialMessage<TextPieceGift>): TextPieceGift {
        const message = { giftId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextPieceGift>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextPieceGift): TextPieceGift {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 gift_id */ 1:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* data.PatternRef name_ref */ 2:
                    message.nameRef = PatternRef.internalBinaryRead(reader, reader.uint32(), options, message.nameRef);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextPieceGift, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 gift_id = 1; */
        if (message.giftId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.giftId);
        /* data.PatternRef name_ref = 2; */
        if (message.nameRef)
            PatternRef.internalBinaryWrite(message.nameRef, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextPieceGift
 */
export const TextPieceGift = new TextPieceGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextPieceHeart$Type extends MessageType<TextPieceHeart> {
    constructor() {
        super("data.TextPieceHeart", [
            { no: 1, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextPieceHeart>): TextPieceHeart {
        const message = { color: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextPieceHeart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextPieceHeart): TextPieceHeart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string color */ 1:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextPieceHeart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string color = 1; */
        if (message.color !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextPieceHeart
 */
export const TextPieceHeart = new TextPieceHeart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextPiecePatternRef$Type extends MessageType<TextPiecePatternRef> {
    constructor() {
        super("data.TextPiecePatternRef", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "default_pattern", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextPiecePatternRef>): TextPiecePatternRef {
        const message = { key: "", defaultPattern: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextPiecePatternRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextPiecePatternRef): TextPiecePatternRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string default_pattern */ 2:
                    message.defaultPattern = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextPiecePatternRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string default_pattern = 2; */
        if (message.defaultPattern !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultPattern);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextPiecePatternRef
 */
export const TextPiecePatternRef = new TextPiecePatternRef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextPieceImage$Type extends MessageType<TextPieceImage> {
    constructor() {
        super("data.TextPieceImage", [
            { no: 1, name: "image", kind: "message", T: () => Image },
            { no: 2, name: "scaling_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<TextPieceImage>): TextPieceImage {
        const message = { scalingRate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextPieceImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextPieceImage): TextPieceImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image image */ 1:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* float scaling_rate */ 2:
                    message.scalingRate = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextPieceImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image image = 1; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float scaling_rate = 2; */
        if (message.scalingRate !== 0)
            writer.tag(2, WireType.Bit32).float(message.scalingRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextPieceImage
 */
export const TextPieceImage = new TextPieceImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextPiece$Type extends MessageType<TextPiece> {
    constructor() {
        super("data.TextPiece", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "format", kind: "message", T: () => TextFormat },
            { no: 3, name: "value_ref", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "string_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "user_value", kind: "message", T: () => TextPieceUser },
            { no: 22, name: "gift_value", kind: "message", T: () => TextPieceGift },
            { no: 23, name: "heart_value", kind: "message", T: () => TextPieceHeart },
            { no: 24, name: "pattern_ref_value", kind: "message", T: () => TextPiecePatternRef },
            { no: 25, name: "image_value", kind: "message", T: () => TextPieceImage },
            { no: 100, name: "schema_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextPiece>): TextPiece {
        const message = { type: 0, valueRef: "", stringValue: "", schemaKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextPiece>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextPiece): TextPiece {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* data.TextFormat format */ 2:
                    message.format = TextFormat.internalBinaryRead(reader, reader.uint32(), options, message.format);
                    break;
                case /* string value_ref */ 3:
                    message.valueRef = reader.string();
                    break;
                case /* string string_value */ 11:
                    message.stringValue = reader.string();
                    break;
                case /* data.TextPieceUser user_value */ 21:
                    message.userValue = TextPieceUser.internalBinaryRead(reader, reader.uint32(), options, message.userValue);
                    break;
                case /* data.TextPieceGift gift_value */ 22:
                    message.giftValue = TextPieceGift.internalBinaryRead(reader, reader.uint32(), options, message.giftValue);
                    break;
                case /* data.TextPieceHeart heart_value */ 23:
                    message.heartValue = TextPieceHeart.internalBinaryRead(reader, reader.uint32(), options, message.heartValue);
                    break;
                case /* data.TextPiecePatternRef pattern_ref_value */ 24:
                    message.patternRefValue = TextPiecePatternRef.internalBinaryRead(reader, reader.uint32(), options, message.patternRefValue);
                    break;
                case /* data.TextPieceImage image_value */ 25:
                    message.imageValue = TextPieceImage.internalBinaryRead(reader, reader.uint32(), options, message.imageValue);
                    break;
                case /* string schema_key */ 100:
                    message.schemaKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextPiece, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* data.TextFormat format = 2; */
        if (message.format)
            TextFormat.internalBinaryWrite(message.format, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string value_ref = 3; */
        if (message.valueRef !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.valueRef);
        /* string string_value = 11; */
        if (message.stringValue !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.stringValue);
        /* data.TextPieceUser user_value = 21; */
        if (message.userValue)
            TextPieceUser.internalBinaryWrite(message.userValue, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* data.TextPieceGift gift_value = 22; */
        if (message.giftValue)
            TextPieceGift.internalBinaryWrite(message.giftValue, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* data.TextPieceHeart heart_value = 23; */
        if (message.heartValue)
            TextPieceHeart.internalBinaryWrite(message.heartValue, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* data.TextPiecePatternRef pattern_ref_value = 24; */
        if (message.patternRefValue)
            TextPiecePatternRef.internalBinaryWrite(message.patternRefValue, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* data.TextPieceImage image_value = 25; */
        if (message.imageValue)
            TextPieceImage.internalBinaryWrite(message.imageValue, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* string schema_key = 100; */
        if (message.schemaKey !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.schemaKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextPiece
 */
export const TextPiece = new TextPiece$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Text$Type extends MessageType<Text> {
    constructor() {
        super("data.Text", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "default_pattern", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "default_format", kind: "message", T: () => TextFormat },
            { no: 4, name: "pieces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TextPiece }
        ]);
    }
    create(value?: PartialMessage<Text>): Text {
        const message = { key: "", defaultPattern: "", pieces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Text>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Text): Text {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string default_pattern */ 2:
                    message.defaultPattern = reader.string();
                    break;
                case /* data.TextFormat default_format */ 3:
                    message.defaultFormat = TextFormat.internalBinaryRead(reader, reader.uint32(), options, message.defaultFormat);
                    break;
                case /* repeated data.TextPiece pieces */ 4:
                    message.pieces.push(TextPiece.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Text, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string default_pattern = 2; */
        if (message.defaultPattern !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultPattern);
        /* data.TextFormat default_format = 3; */
        if (message.defaultFormat)
            TextFormat.internalBinaryWrite(message.defaultFormat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.TextPiece pieces = 4; */
        for (let i = 0; i < message.pieces.length; i++)
            TextPiece.internalBinaryWrite(message.pieces[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Text
 */
export const Text = new Text$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CombinedText$Type extends MessageType<CombinedText> {
    constructor() {
        super("data.CombinedText", [
            { no: 1, name: "display_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DisplayItem },
            { no: 10, name: "schema_info", kind: "message", T: () => SchemaInfo },
            { no: 11, name: "combo_info", kind: "message", T: () => ComboInfo }
        ]);
    }
    create(value?: PartialMessage<CombinedText>): CombinedText {
        const message = { displayItems: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CombinedText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombinedText): CombinedText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.DisplayItem display_items */ 1:
                    message.displayItems.push(DisplayItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.SchemaInfo schema_info */ 10:
                    message.schemaInfo = SchemaInfo.internalBinaryRead(reader, reader.uint32(), options, message.schemaInfo);
                    break;
                case /* data.ComboInfo combo_info */ 11:
                    message.comboInfo = ComboInfo.internalBinaryRead(reader, reader.uint32(), options, message.comboInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CombinedText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.DisplayItem display_items = 1; */
        for (let i = 0; i < message.displayItems.length; i++)
            DisplayItem.internalBinaryWrite(message.displayItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.SchemaInfo schema_info = 10; */
        if (message.schemaInfo)
            SchemaInfo.internalBinaryWrite(message.schemaInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.ComboInfo combo_info = 11; */
        if (message.comboInfo)
            ComboInfo.internalBinaryWrite(message.comboInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CombinedText
 */
export const CombinedText = new CombinedText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisplayItem$Type extends MessageType<DisplayItem> {
    constructor() {
        super("data.DisplayItem", [
            { no: 1, name: "display_item_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "combo_fresh", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "schema_info", kind: "message", T: () => SchemaInfo },
            { no: 50, name: "images_item", kind: "message", T: () => ImagesItem },
            { no: 51, name: "text_item", kind: "message", T: () => TextItem }
        ]);
    }
    create(value?: PartialMessage<DisplayItem>): DisplayItem {
        const message = { displayItemType: 0, comboFresh: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisplayItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisplayItem): DisplayItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 display_item_type */ 1:
                    message.displayItemType = reader.int32();
                    break;
                case /* bool combo_fresh */ 20:
                    message.comboFresh = reader.bool();
                    break;
                case /* data.SchemaInfo schema_info */ 21:
                    message.schemaInfo = SchemaInfo.internalBinaryRead(reader, reader.uint32(), options, message.schemaInfo);
                    break;
                case /* data.ImagesItem images_item */ 50:
                    message.imagesItem = ImagesItem.internalBinaryRead(reader, reader.uint32(), options, message.imagesItem);
                    break;
                case /* data.TextItem text_item */ 51:
                    message.textItem = TextItem.internalBinaryRead(reader, reader.uint32(), options, message.textItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisplayItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 display_item_type = 1; */
        if (message.displayItemType !== 0)
            writer.tag(1, WireType.Varint).int32(message.displayItemType);
        /* bool combo_fresh = 20; */
        if (message.comboFresh !== false)
            writer.tag(20, WireType.Varint).bool(message.comboFresh);
        /* data.SchemaInfo schema_info = 21; */
        if (message.schemaInfo)
            SchemaInfo.internalBinaryWrite(message.schemaInfo, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* data.ImagesItem images_item = 50; */
        if (message.imagesItem)
            ImagesItem.internalBinaryWrite(message.imagesItem, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* data.TextItem text_item = 51; */
        if (message.textItem)
            TextItem.internalBinaryWrite(message.textItem, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DisplayItem
 */
export const DisplayItem = new DisplayItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImagesItem$Type extends MessageType<ImagesItem> {
    constructor() {
        super("data.ImagesItem", [
            { no: 1, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 20, name: "display_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ImagesItem>): ImagesItem {
        const message = { images: [], displayStyle: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImagesItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImagesItem): ImagesItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.Image images */ 1:
                    message.images.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 display_style */ 20:
                    message.displayStyle = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImagesItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.Image images = 1; */
        for (let i = 0; i < message.images.length; i++)
            Image.internalBinaryWrite(message.images[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 display_style = 20; */
        if (message.displayStyle !== 0)
            writer.tag(20, WireType.Varint).int32(message.displayStyle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ImagesItem
 */
export const ImagesItem = new ImagesItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextItem$Type extends MessageType<TextItem> {
    constructor() {
        super("data.TextItem", [
            { no: 1, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<TextItem>): TextItem {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextItem): TextItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text text */ 1:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text text = 1; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextItem
 */
export const TextItem = new TextItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemaInfo$Type extends MessageType<SchemaInfo> {
    constructor() {
        super("data.SchemaInfo", [
            { no: 1, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SchemaInfo>): SchemaInfo {
        const message = { schemaUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SchemaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaInfo): SchemaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema_url */ 1:
                    message.schemaUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema_url = 1; */
        if (message.schemaUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schemaUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SchemaInfo
 */
export const SchemaInfo = new SchemaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComboInfo$Type extends MessageType<ComboInfo> {
    constructor() {
        super("data.ComboInfo", [
            { no: 1, name: "combo_seq", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "combo_order", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ComboInfo>): ComboInfo {
        const message = { comboSeq: 0n, comboOrder: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ComboInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComboInfo): ComboInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 combo_seq */ 1:
                    message.comboSeq = reader.int64().toBigInt();
                    break;
                case /* int64 combo_order */ 2:
                    message.comboOrder = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComboInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 combo_seq = 1; */
        if (message.comboSeq !== 0n)
            writer.tag(1, WireType.Varint).int64(message.comboSeq);
        /* int64 combo_order = 2; */
        if (message.comboOrder !== 0n)
            writer.tag(2, WireType.Varint).int64(message.comboOrder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ComboInfo
 */
export const ComboInfo = new ComboInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("data.User", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "short_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gender", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "birthday", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "telephone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 10, name: "avatar_medium", kind: "message", T: () => Image },
            { no: 11, name: "avatar_large", kind: "message", T: () => Image },
            { no: 12, name: "verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "experience", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "modify_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "secret", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "share_qrcode_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "income_share_percent", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "badge_image_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 22, name: "follow_info", kind: "message", T: () => User_FollowInfo },
            { no: 23, name: "pay_grade", kind: "message", T: () => User_PayGrade },
            { no: 24, name: "fans_club", kind: "message", T: () => User_FansClub },
            { no: 25, name: "border", kind: "message", T: () => User_Border },
            { no: 26, name: "special_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "avatar_border", kind: "message", T: () => Image },
            { no: 28, name: "medal", kind: "message", T: () => Image },
            { no: 29, name: "real_time_icons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 30, name: "new_real_time_icons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 31, name: "top_vip_no", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 32, name: "user_attr", kind: "message", T: () => User_UserAttr },
            { no: 33, name: "own_room", kind: "message", T: () => User_OwnRoom },
            { no: 34, name: "pay_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 35, name: "ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 36, name: "anchor_info", kind: "message", T: () => User_AnchorInfo },
            { no: 37, name: "link_mic_stats", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 38, name: "display_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 39, name: "with_commerce_permission", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 40, name: "with_fusion_shop_entry", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 41, name: "total_recharge_diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 42, name: "webcast_anchor_level", kind: "message", T: () => User_AnchorLevel },
            { no: 43, name: "verified_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 44, name: "author_stats", kind: "message", T: () => User_AuthorStats },
            { no: 45, name: "top_fans", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 46, name: "sec_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 47, name: "user_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 48, name: "xigua_info", kind: "message", T: () => User_XiguaParams },
            { no: 49, name: "activity_reward", kind: "message", T: () => User_ActivityInfo },
            { no: 50, name: "noble_info", kind: "message", T: () => User_NobleLevelInfo },
            { no: 51, name: "brotherhood_info", kind: "message", T: () => User_BrotherhoodInfo },
            { no: 52, name: "personal_card", kind: "message", T: () => Image },
            { no: 53, name: "authentication_info", kind: "message", T: () => User_AuthenticationInfo },
            { no: 54, name: "authorization_info", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 55, name: "adversary_authorization_info", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 56, name: "poi_info", kind: "message", T: () => User_PoiInfo },
            { no: 57, name: "media_badge_image_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 58, name: "adversary_user_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 59, name: "user_vip_info", kind: "message", T: () => UserVIPInfo },
            { no: 60, name: "commerce_webcast_config_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 61, name: "badge_image_list_v2", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 62, name: "industry_certification", kind: "message", T: () => IndustryCertification },
            { no: 63, name: "location_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 64, name: "fans_group_info", kind: "message", T: () => User_FansGroupInfo },
            { no: 65, name: "remark_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 66, name: "mystery_man", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 67, name: "web_rid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 68, name: "desensitized_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 69, name: "j_accredit_info", kind: "message", T: () => User_JAccreditInfo },
            { no: 70, name: "subscribe", kind: "message", T: () => User_Subscribe },
            { no: 71, name: "is_anonymous", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 72, name: "consume_diamond_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 73, name: "webcast_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 74, name: "profile_style_params", kind: "message", T: () => User_ProfileStyleParams },
            { no: 75, name: "user_dress_info", kind: "message", T: () => User_UserDressInfo },
            { no: 76, name: "biz_relation", kind: "message", T: () => User_BizRelation },
            { no: 1001, name: "allow_be_located", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1002, name: "allow_find_by_contacts", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1003, name: "allow_others_download_video", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1004, name: "allow_others_download_when_sharing_video", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1005, name: "allow_share_show_profile", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1006, name: "allow_show_in_gossip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1007, name: "allow_show_my_action", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1008, name: "allow_strange_comment", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1009, name: "allow_unfollower_comment", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1010, name: "allow_use_linkmic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1011, name: "anchor_level", kind: "message", T: () => User_AnchorLevel },
            { no: 1012, name: "avatar_jpg", kind: "message", T: () => Image },
            { no: 1013, name: "bg_img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1014, name: "birthday_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1015, name: "birthday_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1016, name: "block_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1017, name: "comment_restrict", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1018, name: "constellation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1019, name: "disable_ichat", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1020, name: "enable_ichat_img", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1021, name: "exp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1022, name: "fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1023, name: "fold_stranger_chat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1024, name: "follow_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1025, name: "hotsoon_verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1026, name: "hotsoon_verified_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1027, name: "ichat_restrict_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1028, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1029, name: "is_follower", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1030, name: "is_following", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1031, name: "need_profile_guide", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1032, name: "pay_scores", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1033, name: "push_comment_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1034, name: "push_digg", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1035, name: "push_follow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1036, name: "push_friend_action", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1037, name: "push_ichat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1038, name: "push_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1039, name: "push_video_post", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1040, name: "push_video_recommend", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1041, name: "stats", kind: "message", T: () => User_UserStats },
            { no: 1042, name: "verified_mobile", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1043, name: "verified_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1044, name: "with_car_management_permission", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1045, name: "age_range", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1046, name: "watch_duration_month", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = { id: 0n, shortId: 0n, nickname: "", gender: 0, signature: "", level: 0, birthday: 0n, telephone: "", verified: false, experience: 0, city: "", status: 0, createTime: 0n, modifyTime: 0n, secret: 0, shareQrcodeUri: "", incomeSharePercent: 0, badgeImageList: [], specialId: "", realTimeIcons: [], newRealTimeIcons: [], topVipNo: 0n, payScore: 0n, ticketCount: 0n, linkMicStats: 0, displayId: "", withCommercePermission: false, withFusionShopEntry: false, totalRechargeDiamondCount: 0n, verifiedContent: "", topFans: [], secUid: "", userRole: 0, authorizationInfo: 0, adversaryAuthorizationInfo: 0, mediaBadgeImageList: [], adversaryUserStatus: 0, commerceWebcastConfigIds: [], badgeImageListV2: [], locationCity: "", remarkName: "", mysteryMan: 0, webRid: "", desensitizedNickname: "", isAnonymous: false, consumeDiamondLevel: 0, webcastUid: "", allowBeLocated: false, allowFindByContacts: false, allowOthersDownloadVideo: false, allowOthersDownloadWhenSharingVideo: false, allowShareShowProfile: false, allowShowInGossip: false, allowShowMyAction: false, allowStrangeComment: false, allowUnfollowerComment: false, allowUseLinkmic: false, bgImgUrl: "", birthdayDescription: "", birthdayValid: false, blockStatus: 0, commentRestrict: 0, constellation: "", disableIchat: 0, enableIchatImg: 0n, exp: 0, fanTicketCount: 0n, foldStrangerChat: false, followStatus: 0n, hotsoonVerified: false, hotsoonVerifiedReason: "", ichatRestrictType: 0, idStr: "", isFollower: false, isFollowing: false, needProfileGuide: false, payScores: 0n, pushCommentStatus: false, pushDigg: false, pushFollow: false, pushFriendAction: false, pushIchat: false, pushStatus: false, pushVideoPost: false, pushVideoRecommend: false, verifiedMobile: false, verifiedReason: "", withCarManagementPermission: false, ageRange: 0, watchDurationMonth: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 short_id */ 2:
                    message.shortId = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* int32 gender */ 4:
                    message.gender = reader.int32();
                    break;
                case /* string signature */ 5:
                    message.signature = reader.string();
                    break;
                case /* int32 level */ 6:
                    message.level = reader.int32();
                    break;
                case /* int64 birthday */ 7:
                    message.birthday = reader.int64().toBigInt();
                    break;
                case /* string telephone */ 8:
                    message.telephone = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 9:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* data.Image avatar_medium */ 10:
                    message.avatarMedium = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarMedium);
                    break;
                case /* data.Image avatar_large */ 11:
                    message.avatarLarge = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarLarge);
                    break;
                case /* bool verified */ 12:
                    message.verified = reader.bool();
                    break;
                case /* int32 experience */ 13:
                    message.experience = reader.int32();
                    break;
                case /* string city */ 14:
                    message.city = reader.string();
                    break;
                case /* int32 status */ 15:
                    message.status = reader.int32();
                    break;
                case /* int64 create_time */ 16:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int64 modify_time */ 17:
                    message.modifyTime = reader.int64().toBigInt();
                    break;
                case /* int32 secret */ 18:
                    message.secret = reader.int32();
                    break;
                case /* string share_qrcode_uri */ 19:
                    message.shareQrcodeUri = reader.string();
                    break;
                case /* int32 income_share_percent */ 20:
                    message.incomeSharePercent = reader.int32();
                    break;
                case /* repeated data.Image badge_image_list */ 21:
                    message.badgeImageList.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.User.FollowInfo follow_info */ 22:
                    message.followInfo = User_FollowInfo.internalBinaryRead(reader, reader.uint32(), options, message.followInfo);
                    break;
                case /* data.User.PayGrade pay_grade */ 23:
                    message.payGrade = User_PayGrade.internalBinaryRead(reader, reader.uint32(), options, message.payGrade);
                    break;
                case /* data.User.FansClub fans_club */ 24:
                    message.fansClub = User_FansClub.internalBinaryRead(reader, reader.uint32(), options, message.fansClub);
                    break;
                case /* data.User.Border border */ 25:
                    message.border = User_Border.internalBinaryRead(reader, reader.uint32(), options, message.border);
                    break;
                case /* string special_id */ 26:
                    message.specialId = reader.string();
                    break;
                case /* data.Image avatar_border */ 27:
                    message.avatarBorder = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarBorder);
                    break;
                case /* data.Image medal */ 28:
                    message.medal = Image.internalBinaryRead(reader, reader.uint32(), options, message.medal);
                    break;
                case /* repeated data.Image real_time_icons */ 29:
                    message.realTimeIcons.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.Image new_real_time_icons */ 30:
                    message.newRealTimeIcons.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 top_vip_no */ 31:
                    message.topVipNo = reader.int64().toBigInt();
                    break;
                case /* data.User.UserAttr user_attr */ 32:
                    message.userAttr = User_UserAttr.internalBinaryRead(reader, reader.uint32(), options, message.userAttr);
                    break;
                case /* data.User.OwnRoom own_room */ 33:
                    message.ownRoom = User_OwnRoom.internalBinaryRead(reader, reader.uint32(), options, message.ownRoom);
                    break;
                case /* int64 pay_score */ 34:
                    message.payScore = reader.int64().toBigInt();
                    break;
                case /* int64 ticket_count */ 35:
                    message.ticketCount = reader.int64().toBigInt();
                    break;
                case /* data.User.AnchorInfo anchor_info */ 36:
                    message.anchorInfo = User_AnchorInfo.internalBinaryRead(reader, reader.uint32(), options, message.anchorInfo);
                    break;
                case /* int32 link_mic_stats */ 37:
                    message.linkMicStats = reader.int32();
                    break;
                case /* string display_id */ 38:
                    message.displayId = reader.string();
                    break;
                case /* bool with_commerce_permission */ 39:
                    message.withCommercePermission = reader.bool();
                    break;
                case /* bool with_fusion_shop_entry */ 40:
                    message.withFusionShopEntry = reader.bool();
                    break;
                case /* int64 total_recharge_diamond_count */ 41:
                    message.totalRechargeDiamondCount = reader.int64().toBigInt();
                    break;
                case /* data.User.AnchorLevel webcast_anchor_level */ 42:
                    message.webcastAnchorLevel = User_AnchorLevel.internalBinaryRead(reader, reader.uint32(), options, message.webcastAnchorLevel);
                    break;
                case /* string verified_content */ 43:
                    message.verifiedContent = reader.string();
                    break;
                case /* data.User.AuthorStats author_stats */ 44:
                    message.authorStats = User_AuthorStats.internalBinaryRead(reader, reader.uint32(), options, message.authorStats);
                    break;
                case /* repeated data.User top_fans */ 45:
                    message.topFans.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string sec_uid */ 46:
                    message.secUid = reader.string();
                    break;
                case /* int32 user_role */ 47:
                    message.userRole = reader.int32();
                    break;
                case /* data.User.XiguaParams xigua_info */ 48:
                    message.xiguaInfo = User_XiguaParams.internalBinaryRead(reader, reader.uint32(), options, message.xiguaInfo);
                    break;
                case /* data.User.ActivityInfo activity_reward */ 49:
                    message.activityReward = User_ActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.activityReward);
                    break;
                case /* data.User.NobleLevelInfo noble_info */ 50:
                    message.nobleInfo = User_NobleLevelInfo.internalBinaryRead(reader, reader.uint32(), options, message.nobleInfo);
                    break;
                case /* data.User.BrotherhoodInfo brotherhood_info */ 51:
                    message.brotherhoodInfo = User_BrotherhoodInfo.internalBinaryRead(reader, reader.uint32(), options, message.brotherhoodInfo);
                    break;
                case /* data.Image personal_card */ 52:
                    message.personalCard = Image.internalBinaryRead(reader, reader.uint32(), options, message.personalCard);
                    break;
                case /* data.User.AuthenticationInfo authentication_info */ 53:
                    message.authenticationInfo = User_AuthenticationInfo.internalBinaryRead(reader, reader.uint32(), options, message.authenticationInfo);
                    break;
                case /* int32 authorization_info */ 54:
                    message.authorizationInfo = reader.int32();
                    break;
                case /* int32 adversary_authorization_info */ 55:
                    message.adversaryAuthorizationInfo = reader.int32();
                    break;
                case /* data.User.PoiInfo poi_info */ 56:
                    message.poiInfo = User_PoiInfo.internalBinaryRead(reader, reader.uint32(), options, message.poiInfo);
                    break;
                case /* repeated data.Image media_badge_image_list */ 57:
                    message.mediaBadgeImageList.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 adversary_user_status */ 58:
                    message.adversaryUserStatus = reader.int32();
                    break;
                case /* data.UserVIPInfo user_vip_info */ 59:
                    message.userVipInfo = UserVIPInfo.internalBinaryRead(reader, reader.uint32(), options, message.userVipInfo);
                    break;
                case /* repeated int64 commerce_webcast_config_ids */ 60:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.commerceWebcastConfigIds.push(reader.int64().toBigInt());
                    else
                        message.commerceWebcastConfigIds.push(reader.int64().toBigInt());
                    break;
                case /* repeated data.Image badge_image_list_v2 */ 61:
                    message.badgeImageListV2.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.IndustryCertification industry_certification */ 62:
                    message.industryCertification = IndustryCertification.internalBinaryRead(reader, reader.uint32(), options, message.industryCertification);
                    break;
                case /* string location_city */ 63:
                    message.locationCity = reader.string();
                    break;
                case /* data.User.FansGroupInfo fans_group_info */ 64:
                    message.fansGroupInfo = User_FansGroupInfo.internalBinaryRead(reader, reader.uint32(), options, message.fansGroupInfo);
                    break;
                case /* string remark_name */ 65:
                    message.remarkName = reader.string();
                    break;
                case /* int32 mystery_man */ 66:
                    message.mysteryMan = reader.int32();
                    break;
                case /* string web_rid */ 67:
                    message.webRid = reader.string();
                    break;
                case /* string desensitized_nickname */ 68:
                    message.desensitizedNickname = reader.string();
                    break;
                case /* data.User.JAccreditInfo j_accredit_info */ 69:
                    message.jAccreditInfo = User_JAccreditInfo.internalBinaryRead(reader, reader.uint32(), options, message.jAccreditInfo);
                    break;
                case /* data.User.Subscribe subscribe */ 70:
                    message.subscribe = User_Subscribe.internalBinaryRead(reader, reader.uint32(), options, message.subscribe);
                    break;
                case /* bool is_anonymous */ 71:
                    message.isAnonymous = reader.bool();
                    break;
                case /* int32 consume_diamond_level */ 72:
                    message.consumeDiamondLevel = reader.int32();
                    break;
                case /* string webcast_uid */ 73:
                    message.webcastUid = reader.string();
                    break;
                case /* data.User.ProfileStyleParams profile_style_params */ 74:
                    message.profileStyleParams = User_ProfileStyleParams.internalBinaryRead(reader, reader.uint32(), options, message.profileStyleParams);
                    break;
                case /* data.User.UserDressInfo user_dress_info */ 75:
                    message.userDressInfo = User_UserDressInfo.internalBinaryRead(reader, reader.uint32(), options, message.userDressInfo);
                    break;
                case /* data.User.BizRelation biz_relation */ 76:
                    message.bizRelation = User_BizRelation.internalBinaryRead(reader, reader.uint32(), options, message.bizRelation);
                    break;
                case /* bool allow_be_located */ 1001:
                    message.allowBeLocated = reader.bool();
                    break;
                case /* bool allow_find_by_contacts */ 1002:
                    message.allowFindByContacts = reader.bool();
                    break;
                case /* bool allow_others_download_video */ 1003:
                    message.allowOthersDownloadVideo = reader.bool();
                    break;
                case /* bool allow_others_download_when_sharing_video */ 1004:
                    message.allowOthersDownloadWhenSharingVideo = reader.bool();
                    break;
                case /* bool allow_share_show_profile */ 1005:
                    message.allowShareShowProfile = reader.bool();
                    break;
                case /* bool allow_show_in_gossip */ 1006:
                    message.allowShowInGossip = reader.bool();
                    break;
                case /* bool allow_show_my_action */ 1007:
                    message.allowShowMyAction = reader.bool();
                    break;
                case /* bool allow_strange_comment */ 1008:
                    message.allowStrangeComment = reader.bool();
                    break;
                case /* bool allow_unfollower_comment */ 1009:
                    message.allowUnfollowerComment = reader.bool();
                    break;
                case /* bool allow_use_linkmic */ 1010:
                    message.allowUseLinkmic = reader.bool();
                    break;
                case /* data.User.AnchorLevel anchor_level */ 1011:
                    message.anchorLevel = User_AnchorLevel.internalBinaryRead(reader, reader.uint32(), options, message.anchorLevel);
                    break;
                case /* data.Image avatar_jpg */ 1012:
                    message.avatarJpg = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarJpg);
                    break;
                case /* string bg_img_url */ 1013:
                    message.bgImgUrl = reader.string();
                    break;
                case /* string birthday_description */ 1014:
                    message.birthdayDescription = reader.string();
                    break;
                case /* bool birthday_valid */ 1015:
                    message.birthdayValid = reader.bool();
                    break;
                case /* int32 block_status */ 1016:
                    message.blockStatus = reader.int32();
                    break;
                case /* int32 comment_restrict */ 1017:
                    message.commentRestrict = reader.int32();
                    break;
                case /* string constellation */ 1018:
                    message.constellation = reader.string();
                    break;
                case /* int32 disable_ichat */ 1019:
                    message.disableIchat = reader.int32();
                    break;
                case /* int64 enable_ichat_img */ 1020:
                    message.enableIchatImg = reader.int64().toBigInt();
                    break;
                case /* int32 exp */ 1021:
                    message.exp = reader.int32();
                    break;
                case /* int64 fan_ticket_count */ 1022:
                    message.fanTicketCount = reader.int64().toBigInt();
                    break;
                case /* bool fold_stranger_chat */ 1023:
                    message.foldStrangerChat = reader.bool();
                    break;
                case /* int64 follow_status */ 1024:
                    message.followStatus = reader.int64().toBigInt();
                    break;
                case /* bool hotsoon_verified */ 1025:
                    message.hotsoonVerified = reader.bool();
                    break;
                case /* string hotsoon_verified_reason */ 1026:
                    message.hotsoonVerifiedReason = reader.string();
                    break;
                case /* int32 ichat_restrict_type */ 1027:
                    message.ichatRestrictType = reader.int32();
                    break;
                case /* string id_str */ 1028:
                    message.idStr = reader.string();
                    break;
                case /* bool is_follower */ 1029:
                    message.isFollower = reader.bool();
                    break;
                case /* bool is_following */ 1030:
                    message.isFollowing = reader.bool();
                    break;
                case /* bool need_profile_guide */ 1031:
                    message.needProfileGuide = reader.bool();
                    break;
                case /* int64 pay_scores */ 1032:
                    message.payScores = reader.int64().toBigInt();
                    break;
                case /* bool push_comment_status */ 1033:
                    message.pushCommentStatus = reader.bool();
                    break;
                case /* bool push_digg */ 1034:
                    message.pushDigg = reader.bool();
                    break;
                case /* bool push_follow */ 1035:
                    message.pushFollow = reader.bool();
                    break;
                case /* bool push_friend_action */ 1036:
                    message.pushFriendAction = reader.bool();
                    break;
                case /* bool push_ichat */ 1037:
                    message.pushIchat = reader.bool();
                    break;
                case /* bool push_status */ 1038:
                    message.pushStatus = reader.bool();
                    break;
                case /* bool push_video_post */ 1039:
                    message.pushVideoPost = reader.bool();
                    break;
                case /* bool push_video_recommend */ 1040:
                    message.pushVideoRecommend = reader.bool();
                    break;
                case /* data.User.UserStats stats */ 1041:
                    message.stats = User_UserStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* bool verified_mobile */ 1042:
                    message.verifiedMobile = reader.bool();
                    break;
                case /* string verified_reason */ 1043:
                    message.verifiedReason = reader.string();
                    break;
                case /* bool with_car_management_permission */ 1044:
                    message.withCarManagementPermission = reader.bool();
                    break;
                case /* int32 age_range */ 1045:
                    message.ageRange = reader.int32();
                    break;
                case /* int64 watch_duration_month */ 1046:
                    message.watchDurationMonth = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 short_id = 2; */
        if (message.shortId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.shortId);
        /* string nickname = 3; */
        if (message.nickname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickname);
        /* int32 gender = 4; */
        if (message.gender !== 0)
            writer.tag(4, WireType.Varint).int32(message.gender);
        /* string signature = 5; */
        if (message.signature !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signature);
        /* int32 level = 6; */
        if (message.level !== 0)
            writer.tag(6, WireType.Varint).int32(message.level);
        /* int64 birthday = 7; */
        if (message.birthday !== 0n)
            writer.tag(7, WireType.Varint).int64(message.birthday);
        /* string telephone = 8; */
        if (message.telephone !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.telephone);
        /* data.Image avatar_thumb = 9; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_medium = 10; */
        if (message.avatarMedium)
            Image.internalBinaryWrite(message.avatarMedium, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_large = 11; */
        if (message.avatarLarge)
            Image.internalBinaryWrite(message.avatarLarge, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool verified = 12; */
        if (message.verified !== false)
            writer.tag(12, WireType.Varint).bool(message.verified);
        /* int32 experience = 13; */
        if (message.experience !== 0)
            writer.tag(13, WireType.Varint).int32(message.experience);
        /* string city = 14; */
        if (message.city !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.city);
        /* int32 status = 15; */
        if (message.status !== 0)
            writer.tag(15, WireType.Varint).int32(message.status);
        /* int64 create_time = 16; */
        if (message.createTime !== 0n)
            writer.tag(16, WireType.Varint).int64(message.createTime);
        /* int64 modify_time = 17; */
        if (message.modifyTime !== 0n)
            writer.tag(17, WireType.Varint).int64(message.modifyTime);
        /* int32 secret = 18; */
        if (message.secret !== 0)
            writer.tag(18, WireType.Varint).int32(message.secret);
        /* string share_qrcode_uri = 19; */
        if (message.shareQrcodeUri !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.shareQrcodeUri);
        /* int32 income_share_percent = 20; */
        if (message.incomeSharePercent !== 0)
            writer.tag(20, WireType.Varint).int32(message.incomeSharePercent);
        /* repeated data.Image badge_image_list = 21; */
        for (let i = 0; i < message.badgeImageList.length; i++)
            Image.internalBinaryWrite(message.badgeImageList[i], writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* data.User.FollowInfo follow_info = 22; */
        if (message.followInfo)
            User_FollowInfo.internalBinaryWrite(message.followInfo, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* data.User.PayGrade pay_grade = 23; */
        if (message.payGrade)
            User_PayGrade.internalBinaryWrite(message.payGrade, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* data.User.FansClub fans_club = 24; */
        if (message.fansClub)
            User_FansClub.internalBinaryWrite(message.fansClub, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* data.User.Border border = 25; */
        if (message.border)
            User_Border.internalBinaryWrite(message.border, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* string special_id = 26; */
        if (message.specialId !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.specialId);
        /* data.Image avatar_border = 27; */
        if (message.avatarBorder)
            Image.internalBinaryWrite(message.avatarBorder, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* data.Image medal = 28; */
        if (message.medal)
            Image.internalBinaryWrite(message.medal, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image real_time_icons = 29; */
        for (let i = 0; i < message.realTimeIcons.length; i++)
            Image.internalBinaryWrite(message.realTimeIcons[i], writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image new_real_time_icons = 30; */
        for (let i = 0; i < message.newRealTimeIcons.length; i++)
            Image.internalBinaryWrite(message.newRealTimeIcons[i], writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* int64 top_vip_no = 31; */
        if (message.topVipNo !== 0n)
            writer.tag(31, WireType.Varint).int64(message.topVipNo);
        /* data.User.UserAttr user_attr = 32; */
        if (message.userAttr)
            User_UserAttr.internalBinaryWrite(message.userAttr, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* data.User.OwnRoom own_room = 33; */
        if (message.ownRoom)
            User_OwnRoom.internalBinaryWrite(message.ownRoom, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* int64 pay_score = 34; */
        if (message.payScore !== 0n)
            writer.tag(34, WireType.Varint).int64(message.payScore);
        /* int64 ticket_count = 35; */
        if (message.ticketCount !== 0n)
            writer.tag(35, WireType.Varint).int64(message.ticketCount);
        /* data.User.AnchorInfo anchor_info = 36; */
        if (message.anchorInfo)
            User_AnchorInfo.internalBinaryWrite(message.anchorInfo, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* int32 link_mic_stats = 37; */
        if (message.linkMicStats !== 0)
            writer.tag(37, WireType.Varint).int32(message.linkMicStats);
        /* string display_id = 38; */
        if (message.displayId !== "")
            writer.tag(38, WireType.LengthDelimited).string(message.displayId);
        /* bool with_commerce_permission = 39; */
        if (message.withCommercePermission !== false)
            writer.tag(39, WireType.Varint).bool(message.withCommercePermission);
        /* bool with_fusion_shop_entry = 40; */
        if (message.withFusionShopEntry !== false)
            writer.tag(40, WireType.Varint).bool(message.withFusionShopEntry);
        /* int64 total_recharge_diamond_count = 41; */
        if (message.totalRechargeDiamondCount !== 0n)
            writer.tag(41, WireType.Varint).int64(message.totalRechargeDiamondCount);
        /* data.User.AnchorLevel webcast_anchor_level = 42; */
        if (message.webcastAnchorLevel)
            User_AnchorLevel.internalBinaryWrite(message.webcastAnchorLevel, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* string verified_content = 43; */
        if (message.verifiedContent !== "")
            writer.tag(43, WireType.LengthDelimited).string(message.verifiedContent);
        /* data.User.AuthorStats author_stats = 44; */
        if (message.authorStats)
            User_AuthorStats.internalBinaryWrite(message.authorStats, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.User top_fans = 45; */
        for (let i = 0; i < message.topFans.length; i++)
            User.internalBinaryWrite(message.topFans[i], writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* string sec_uid = 46; */
        if (message.secUid !== "")
            writer.tag(46, WireType.LengthDelimited).string(message.secUid);
        /* int32 user_role = 47; */
        if (message.userRole !== 0)
            writer.tag(47, WireType.Varint).int32(message.userRole);
        /* data.User.XiguaParams xigua_info = 48; */
        if (message.xiguaInfo)
            User_XiguaParams.internalBinaryWrite(message.xiguaInfo, writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* data.User.ActivityInfo activity_reward = 49; */
        if (message.activityReward)
            User_ActivityInfo.internalBinaryWrite(message.activityReward, writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* data.User.NobleLevelInfo noble_info = 50; */
        if (message.nobleInfo)
            User_NobleLevelInfo.internalBinaryWrite(message.nobleInfo, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* data.User.BrotherhoodInfo brotherhood_info = 51; */
        if (message.brotherhoodInfo)
            User_BrotherhoodInfo.internalBinaryWrite(message.brotherhoodInfo, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* data.Image personal_card = 52; */
        if (message.personalCard)
            Image.internalBinaryWrite(message.personalCard, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* data.User.AuthenticationInfo authentication_info = 53; */
        if (message.authenticationInfo)
            User_AuthenticationInfo.internalBinaryWrite(message.authenticationInfo, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* int32 authorization_info = 54; */
        if (message.authorizationInfo !== 0)
            writer.tag(54, WireType.Varint).int32(message.authorizationInfo);
        /* int32 adversary_authorization_info = 55; */
        if (message.adversaryAuthorizationInfo !== 0)
            writer.tag(55, WireType.Varint).int32(message.adversaryAuthorizationInfo);
        /* data.User.PoiInfo poi_info = 56; */
        if (message.poiInfo)
            User_PoiInfo.internalBinaryWrite(message.poiInfo, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image media_badge_image_list = 57; */
        for (let i = 0; i < message.mediaBadgeImageList.length; i++)
            Image.internalBinaryWrite(message.mediaBadgeImageList[i], writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* int32 adversary_user_status = 58; */
        if (message.adversaryUserStatus !== 0)
            writer.tag(58, WireType.Varint).int32(message.adversaryUserStatus);
        /* data.UserVIPInfo user_vip_info = 59; */
        if (message.userVipInfo)
            UserVIPInfo.internalBinaryWrite(message.userVipInfo, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 commerce_webcast_config_ids = 60; */
        if (message.commerceWebcastConfigIds.length) {
            writer.tag(60, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.commerceWebcastConfigIds.length; i++)
                writer.int64(message.commerceWebcastConfigIds[i]);
            writer.join();
        }
        /* repeated data.Image badge_image_list_v2 = 61; */
        for (let i = 0; i < message.badgeImageListV2.length; i++)
            Image.internalBinaryWrite(message.badgeImageListV2[i], writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* data.IndustryCertification industry_certification = 62; */
        if (message.industryCertification)
            IndustryCertification.internalBinaryWrite(message.industryCertification, writer.tag(62, WireType.LengthDelimited).fork(), options).join();
        /* string location_city = 63; */
        if (message.locationCity !== "")
            writer.tag(63, WireType.LengthDelimited).string(message.locationCity);
        /* data.User.FansGroupInfo fans_group_info = 64; */
        if (message.fansGroupInfo)
            User_FansGroupInfo.internalBinaryWrite(message.fansGroupInfo, writer.tag(64, WireType.LengthDelimited).fork(), options).join();
        /* string remark_name = 65; */
        if (message.remarkName !== "")
            writer.tag(65, WireType.LengthDelimited).string(message.remarkName);
        /* int32 mystery_man = 66; */
        if (message.mysteryMan !== 0)
            writer.tag(66, WireType.Varint).int32(message.mysteryMan);
        /* string web_rid = 67; */
        if (message.webRid !== "")
            writer.tag(67, WireType.LengthDelimited).string(message.webRid);
        /* string desensitized_nickname = 68; */
        if (message.desensitizedNickname !== "")
            writer.tag(68, WireType.LengthDelimited).string(message.desensitizedNickname);
        /* data.User.JAccreditInfo j_accredit_info = 69; */
        if (message.jAccreditInfo)
            User_JAccreditInfo.internalBinaryWrite(message.jAccreditInfo, writer.tag(69, WireType.LengthDelimited).fork(), options).join();
        /* data.User.Subscribe subscribe = 70; */
        if (message.subscribe)
            User_Subscribe.internalBinaryWrite(message.subscribe, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        /* bool is_anonymous = 71; */
        if (message.isAnonymous !== false)
            writer.tag(71, WireType.Varint).bool(message.isAnonymous);
        /* int32 consume_diamond_level = 72; */
        if (message.consumeDiamondLevel !== 0)
            writer.tag(72, WireType.Varint).int32(message.consumeDiamondLevel);
        /* string webcast_uid = 73; */
        if (message.webcastUid !== "")
            writer.tag(73, WireType.LengthDelimited).string(message.webcastUid);
        /* data.User.ProfileStyleParams profile_style_params = 74; */
        if (message.profileStyleParams)
            User_ProfileStyleParams.internalBinaryWrite(message.profileStyleParams, writer.tag(74, WireType.LengthDelimited).fork(), options).join();
        /* data.User.UserDressInfo user_dress_info = 75; */
        if (message.userDressInfo)
            User_UserDressInfo.internalBinaryWrite(message.userDressInfo, writer.tag(75, WireType.LengthDelimited).fork(), options).join();
        /* data.User.BizRelation biz_relation = 76; */
        if (message.bizRelation)
            User_BizRelation.internalBinaryWrite(message.bizRelation, writer.tag(76, WireType.LengthDelimited).fork(), options).join();
        /* bool allow_be_located = 1001; */
        if (message.allowBeLocated !== false)
            writer.tag(1001, WireType.Varint).bool(message.allowBeLocated);
        /* bool allow_find_by_contacts = 1002; */
        if (message.allowFindByContacts !== false)
            writer.tag(1002, WireType.Varint).bool(message.allowFindByContacts);
        /* bool allow_others_download_video = 1003; */
        if (message.allowOthersDownloadVideo !== false)
            writer.tag(1003, WireType.Varint).bool(message.allowOthersDownloadVideo);
        /* bool allow_others_download_when_sharing_video = 1004; */
        if (message.allowOthersDownloadWhenSharingVideo !== false)
            writer.tag(1004, WireType.Varint).bool(message.allowOthersDownloadWhenSharingVideo);
        /* bool allow_share_show_profile = 1005; */
        if (message.allowShareShowProfile !== false)
            writer.tag(1005, WireType.Varint).bool(message.allowShareShowProfile);
        /* bool allow_show_in_gossip = 1006; */
        if (message.allowShowInGossip !== false)
            writer.tag(1006, WireType.Varint).bool(message.allowShowInGossip);
        /* bool allow_show_my_action = 1007; */
        if (message.allowShowMyAction !== false)
            writer.tag(1007, WireType.Varint).bool(message.allowShowMyAction);
        /* bool allow_strange_comment = 1008; */
        if (message.allowStrangeComment !== false)
            writer.tag(1008, WireType.Varint).bool(message.allowStrangeComment);
        /* bool allow_unfollower_comment = 1009; */
        if (message.allowUnfollowerComment !== false)
            writer.tag(1009, WireType.Varint).bool(message.allowUnfollowerComment);
        /* bool allow_use_linkmic = 1010; */
        if (message.allowUseLinkmic !== false)
            writer.tag(1010, WireType.Varint).bool(message.allowUseLinkmic);
        /* data.User.AnchorLevel anchor_level = 1011; */
        if (message.anchorLevel)
            User_AnchorLevel.internalBinaryWrite(message.anchorLevel, writer.tag(1011, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_jpg = 1012; */
        if (message.avatarJpg)
            Image.internalBinaryWrite(message.avatarJpg, writer.tag(1012, WireType.LengthDelimited).fork(), options).join();
        /* string bg_img_url = 1013; */
        if (message.bgImgUrl !== "")
            writer.tag(1013, WireType.LengthDelimited).string(message.bgImgUrl);
        /* string birthday_description = 1014; */
        if (message.birthdayDescription !== "")
            writer.tag(1014, WireType.LengthDelimited).string(message.birthdayDescription);
        /* bool birthday_valid = 1015; */
        if (message.birthdayValid !== false)
            writer.tag(1015, WireType.Varint).bool(message.birthdayValid);
        /* int32 block_status = 1016; */
        if (message.blockStatus !== 0)
            writer.tag(1016, WireType.Varint).int32(message.blockStatus);
        /* int32 comment_restrict = 1017; */
        if (message.commentRestrict !== 0)
            writer.tag(1017, WireType.Varint).int32(message.commentRestrict);
        /* string constellation = 1018; */
        if (message.constellation !== "")
            writer.tag(1018, WireType.LengthDelimited).string(message.constellation);
        /* int32 disable_ichat = 1019; */
        if (message.disableIchat !== 0)
            writer.tag(1019, WireType.Varint).int32(message.disableIchat);
        /* int64 enable_ichat_img = 1020; */
        if (message.enableIchatImg !== 0n)
            writer.tag(1020, WireType.Varint).int64(message.enableIchatImg);
        /* int32 exp = 1021; */
        if (message.exp !== 0)
            writer.tag(1021, WireType.Varint).int32(message.exp);
        /* int64 fan_ticket_count = 1022; */
        if (message.fanTicketCount !== 0n)
            writer.tag(1022, WireType.Varint).int64(message.fanTicketCount);
        /* bool fold_stranger_chat = 1023; */
        if (message.foldStrangerChat !== false)
            writer.tag(1023, WireType.Varint).bool(message.foldStrangerChat);
        /* int64 follow_status = 1024; */
        if (message.followStatus !== 0n)
            writer.tag(1024, WireType.Varint).int64(message.followStatus);
        /* bool hotsoon_verified = 1025; */
        if (message.hotsoonVerified !== false)
            writer.tag(1025, WireType.Varint).bool(message.hotsoonVerified);
        /* string hotsoon_verified_reason = 1026; */
        if (message.hotsoonVerifiedReason !== "")
            writer.tag(1026, WireType.LengthDelimited).string(message.hotsoonVerifiedReason);
        /* int32 ichat_restrict_type = 1027; */
        if (message.ichatRestrictType !== 0)
            writer.tag(1027, WireType.Varint).int32(message.ichatRestrictType);
        /* string id_str = 1028; */
        if (message.idStr !== "")
            writer.tag(1028, WireType.LengthDelimited).string(message.idStr);
        /* bool is_follower = 1029; */
        if (message.isFollower !== false)
            writer.tag(1029, WireType.Varint).bool(message.isFollower);
        /* bool is_following = 1030; */
        if (message.isFollowing !== false)
            writer.tag(1030, WireType.Varint).bool(message.isFollowing);
        /* bool need_profile_guide = 1031; */
        if (message.needProfileGuide !== false)
            writer.tag(1031, WireType.Varint).bool(message.needProfileGuide);
        /* int64 pay_scores = 1032; */
        if (message.payScores !== 0n)
            writer.tag(1032, WireType.Varint).int64(message.payScores);
        /* bool push_comment_status = 1033; */
        if (message.pushCommentStatus !== false)
            writer.tag(1033, WireType.Varint).bool(message.pushCommentStatus);
        /* bool push_digg = 1034; */
        if (message.pushDigg !== false)
            writer.tag(1034, WireType.Varint).bool(message.pushDigg);
        /* bool push_follow = 1035; */
        if (message.pushFollow !== false)
            writer.tag(1035, WireType.Varint).bool(message.pushFollow);
        /* bool push_friend_action = 1036; */
        if (message.pushFriendAction !== false)
            writer.tag(1036, WireType.Varint).bool(message.pushFriendAction);
        /* bool push_ichat = 1037; */
        if (message.pushIchat !== false)
            writer.tag(1037, WireType.Varint).bool(message.pushIchat);
        /* bool push_status = 1038; */
        if (message.pushStatus !== false)
            writer.tag(1038, WireType.Varint).bool(message.pushStatus);
        /* bool push_video_post = 1039; */
        if (message.pushVideoPost !== false)
            writer.tag(1039, WireType.Varint).bool(message.pushVideoPost);
        /* bool push_video_recommend = 1040; */
        if (message.pushVideoRecommend !== false)
            writer.tag(1040, WireType.Varint).bool(message.pushVideoRecommend);
        /* data.User.UserStats stats = 1041; */
        if (message.stats)
            User_UserStats.internalBinaryWrite(message.stats, writer.tag(1041, WireType.LengthDelimited).fork(), options).join();
        /* bool verified_mobile = 1042; */
        if (message.verifiedMobile !== false)
            writer.tag(1042, WireType.Varint).bool(message.verifiedMobile);
        /* string verified_reason = 1043; */
        if (message.verifiedReason !== "")
            writer.tag(1043, WireType.LengthDelimited).string(message.verifiedReason);
        /* bool with_car_management_permission = 1044; */
        if (message.withCarManagementPermission !== false)
            writer.tag(1044, WireType.Varint).bool(message.withCarManagementPermission);
        /* int32 age_range = 1045; */
        if (message.ageRange !== 0)
            writer.tag(1045, WireType.Varint).int32(message.ageRange);
        /* int64 watch_duration_month = 1046; */
        if (message.watchDurationMonth !== 0n)
            writer.tag(1046, WireType.Varint).int64(message.watchDurationMonth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_FollowInfo$Type extends MessageType<User_FollowInfo> {
    constructor() {
        super("data.User.FollowInfo", [
            { no: 1, name: "following_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "follower_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "follow_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "push_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "remark_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "follower_count_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "following_count_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "invalid_follow_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<User_FollowInfo>): User_FollowInfo {
        const message = { followingCount: 0n, followerCount: 0n, followStatus: 0n, pushStatus: 0n, remarkName: "", followerCountStr: "", followingCountStr: "", invalidFollowStatus: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_FollowInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_FollowInfo): User_FollowInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 following_count */ 1:
                    message.followingCount = reader.int64().toBigInt();
                    break;
                case /* int64 follower_count */ 2:
                    message.followerCount = reader.int64().toBigInt();
                    break;
                case /* int64 follow_status */ 3:
                    message.followStatus = reader.int64().toBigInt();
                    break;
                case /* int64 push_status */ 4:
                    message.pushStatus = reader.int64().toBigInt();
                    break;
                case /* string remark_name */ 5:
                    message.remarkName = reader.string();
                    break;
                case /* string follower_count_str */ 6:
                    message.followerCountStr = reader.string();
                    break;
                case /* string following_count_str */ 7:
                    message.followingCountStr = reader.string();
                    break;
                case /* bool invalid_follow_status */ 8:
                    message.invalidFollowStatus = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_FollowInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 following_count = 1; */
        if (message.followingCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.followingCount);
        /* int64 follower_count = 2; */
        if (message.followerCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.followerCount);
        /* int64 follow_status = 3; */
        if (message.followStatus !== 0n)
            writer.tag(3, WireType.Varint).int64(message.followStatus);
        /* int64 push_status = 4; */
        if (message.pushStatus !== 0n)
            writer.tag(4, WireType.Varint).int64(message.pushStatus);
        /* string remark_name = 5; */
        if (message.remarkName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.remarkName);
        /* string follower_count_str = 6; */
        if (message.followerCountStr !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.followerCountStr);
        /* string following_count_str = 7; */
        if (message.followingCountStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.followingCountStr);
        /* bool invalid_follow_status = 8; */
        if (message.invalidFollowStatus !== false)
            writer.tag(8, WireType.Varint).bool(message.invalidFollowStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.FollowInfo
 */
export const User_FollowInfo = new User_FollowInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_PayGrade$Type extends MessageType<User_PayGrade> {
    constructor() {
        super("data.User.PayGrade", [
            { no: 1, name: "total_diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "diamond_icon", kind: "message", T: () => Image },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "message", T: () => Image },
            { no: 5, name: "next_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "next_icon", kind: "message", T: () => Image },
            { no: 8, name: "next_diamond", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "now_diamond", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "this_grade_min_diamond", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "this_grade_max_diamond", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "pay_diamond_bak", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "grade_describe", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "grade_icon_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User_PayGrade_GradeIcon },
            { no: 15, name: "screen_chat_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "im_icon", kind: "message", T: () => Image },
            { no: 17, name: "im_icon_with_level", kind: "message", T: () => Image },
            { no: 18, name: "live_icon", kind: "message", T: () => Image },
            { no: 19, name: "new_im_icon_with_level", kind: "message", T: () => Image },
            { no: 20, name: "new_live_icon", kind: "message", T: () => Image },
            { no: 21, name: "upgrade_need_consume", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "next_privileges", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "background", kind: "message", T: () => Image },
            { no: 24, name: "background_back", kind: "message", T: () => Image },
            { no: 25, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "buff_info", kind: "message", T: () => GradeBuffInfo },
            { no: 27, name: "grade_describe_shining", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1001, name: "grade_banner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1002, name: "profile_dialog_bg", kind: "message", T: () => Image },
            { no: 1003, name: "profile_dialog_bg_back", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<User_PayGrade>): User_PayGrade {
        const message = { totalDiamondCount: 0n, name: "", nextName: "", level: 0n, nextDiamond: 0n, nowDiamond: 0n, thisGradeMinDiamond: 0n, thisGradeMaxDiamond: 0n, payDiamondBak: 0n, gradeDescribe: "", gradeIconList: [], screenChatType: 0n, upgradeNeedConsume: 0n, nextPrivileges: "", score: 0n, gradeDescribeShining: false, gradeBanner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_PayGrade>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_PayGrade): User_PayGrade {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_diamond_count */ 1:
                    message.totalDiamondCount = reader.int64().toBigInt();
                    break;
                case /* data.Image diamond_icon */ 2:
                    message.diamondIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.diamondIcon);
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* data.Image icon */ 4:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string next_name */ 5:
                    message.nextName = reader.string();
                    break;
                case /* int64 level */ 6:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* data.Image next_icon */ 7:
                    message.nextIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.nextIcon);
                    break;
                case /* int64 next_diamond */ 8:
                    message.nextDiamond = reader.int64().toBigInt();
                    break;
                case /* int64 now_diamond */ 9:
                    message.nowDiamond = reader.int64().toBigInt();
                    break;
                case /* int64 this_grade_min_diamond */ 10:
                    message.thisGradeMinDiamond = reader.int64().toBigInt();
                    break;
                case /* int64 this_grade_max_diamond */ 11:
                    message.thisGradeMaxDiamond = reader.int64().toBigInt();
                    break;
                case /* int64 pay_diamond_bak */ 12:
                    message.payDiamondBak = reader.int64().toBigInt();
                    break;
                case /* string grade_describe */ 13:
                    message.gradeDescribe = reader.string();
                    break;
                case /* repeated data.User.PayGrade.GradeIcon grade_icon_list */ 14:
                    message.gradeIconList.push(User_PayGrade_GradeIcon.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 screen_chat_type */ 15:
                    message.screenChatType = reader.int64().toBigInt();
                    break;
                case /* data.Image im_icon */ 16:
                    message.imIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.imIcon);
                    break;
                case /* data.Image im_icon_with_level */ 17:
                    message.imIconWithLevel = Image.internalBinaryRead(reader, reader.uint32(), options, message.imIconWithLevel);
                    break;
                case /* data.Image live_icon */ 18:
                    message.liveIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.liveIcon);
                    break;
                case /* data.Image new_im_icon_with_level */ 19:
                    message.newImIconWithLevel = Image.internalBinaryRead(reader, reader.uint32(), options, message.newImIconWithLevel);
                    break;
                case /* data.Image new_live_icon */ 20:
                    message.newLiveIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.newLiveIcon);
                    break;
                case /* int64 upgrade_need_consume */ 21:
                    message.upgradeNeedConsume = reader.int64().toBigInt();
                    break;
                case /* string next_privileges */ 22:
                    message.nextPrivileges = reader.string();
                    break;
                case /* data.Image background */ 23:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* data.Image background_back */ 24:
                    message.backgroundBack = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundBack);
                    break;
                case /* int64 score */ 25:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* data.GradeBuffInfo buff_info */ 26:
                    message.buffInfo = GradeBuffInfo.internalBinaryRead(reader, reader.uint32(), options, message.buffInfo);
                    break;
                case /* bool grade_describe_shining */ 27:
                    message.gradeDescribeShining = reader.bool();
                    break;
                case /* string grade_banner */ 1001:
                    message.gradeBanner = reader.string();
                    break;
                case /* data.Image profile_dialog_bg */ 1002:
                    message.profileDialogBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.profileDialogBg);
                    break;
                case /* data.Image profile_dialog_bg_back */ 1003:
                    message.profileDialogBgBack = Image.internalBinaryRead(reader, reader.uint32(), options, message.profileDialogBgBack);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_PayGrade, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_diamond_count = 1; */
        if (message.totalDiamondCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.totalDiamondCount);
        /* data.Image diamond_icon = 2; */
        if (message.diamondIcon)
            Image.internalBinaryWrite(message.diamondIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* data.Image icon = 4; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string next_name = 5; */
        if (message.nextName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.nextName);
        /* int64 level = 6; */
        if (message.level !== 0n)
            writer.tag(6, WireType.Varint).int64(message.level);
        /* data.Image next_icon = 7; */
        if (message.nextIcon)
            Image.internalBinaryWrite(message.nextIcon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 next_diamond = 8; */
        if (message.nextDiamond !== 0n)
            writer.tag(8, WireType.Varint).int64(message.nextDiamond);
        /* int64 now_diamond = 9; */
        if (message.nowDiamond !== 0n)
            writer.tag(9, WireType.Varint).int64(message.nowDiamond);
        /* int64 this_grade_min_diamond = 10; */
        if (message.thisGradeMinDiamond !== 0n)
            writer.tag(10, WireType.Varint).int64(message.thisGradeMinDiamond);
        /* int64 this_grade_max_diamond = 11; */
        if (message.thisGradeMaxDiamond !== 0n)
            writer.tag(11, WireType.Varint).int64(message.thisGradeMaxDiamond);
        /* int64 pay_diamond_bak = 12; */
        if (message.payDiamondBak !== 0n)
            writer.tag(12, WireType.Varint).int64(message.payDiamondBak);
        /* string grade_describe = 13; */
        if (message.gradeDescribe !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.gradeDescribe);
        /* repeated data.User.PayGrade.GradeIcon grade_icon_list = 14; */
        for (let i = 0; i < message.gradeIconList.length; i++)
            User_PayGrade_GradeIcon.internalBinaryWrite(message.gradeIconList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int64 screen_chat_type = 15; */
        if (message.screenChatType !== 0n)
            writer.tag(15, WireType.Varint).int64(message.screenChatType);
        /* data.Image im_icon = 16; */
        if (message.imIcon)
            Image.internalBinaryWrite(message.imIcon, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* data.Image im_icon_with_level = 17; */
        if (message.imIconWithLevel)
            Image.internalBinaryWrite(message.imIconWithLevel, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* data.Image live_icon = 18; */
        if (message.liveIcon)
            Image.internalBinaryWrite(message.liveIcon, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* data.Image new_im_icon_with_level = 19; */
        if (message.newImIconWithLevel)
            Image.internalBinaryWrite(message.newImIconWithLevel, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* data.Image new_live_icon = 20; */
        if (message.newLiveIcon)
            Image.internalBinaryWrite(message.newLiveIcon, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* int64 upgrade_need_consume = 21; */
        if (message.upgradeNeedConsume !== 0n)
            writer.tag(21, WireType.Varint).int64(message.upgradeNeedConsume);
        /* string next_privileges = 22; */
        if (message.nextPrivileges !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.nextPrivileges);
        /* data.Image background = 23; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_back = 24; */
        if (message.backgroundBack)
            Image.internalBinaryWrite(message.backgroundBack, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 25; */
        if (message.score !== 0n)
            writer.tag(25, WireType.Varint).int64(message.score);
        /* data.GradeBuffInfo buff_info = 26; */
        if (message.buffInfo)
            GradeBuffInfo.internalBinaryWrite(message.buffInfo, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* bool grade_describe_shining = 27; */
        if (message.gradeDescribeShining !== false)
            writer.tag(27, WireType.Varint).bool(message.gradeDescribeShining);
        /* string grade_banner = 1001; */
        if (message.gradeBanner !== "")
            writer.tag(1001, WireType.LengthDelimited).string(message.gradeBanner);
        /* data.Image profile_dialog_bg = 1002; */
        if (message.profileDialogBg)
            Image.internalBinaryWrite(message.profileDialogBg, writer.tag(1002, WireType.LengthDelimited).fork(), options).join();
        /* data.Image profile_dialog_bg_back = 1003; */
        if (message.profileDialogBgBack)
            Image.internalBinaryWrite(message.profileDialogBgBack, writer.tag(1003, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.PayGrade
 */
export const User_PayGrade = new User_PayGrade$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_PayGrade_GradeIcon$Type extends MessageType<User_PayGrade_GradeIcon> {
    constructor() {
        super("data.User.PayGrade.GradeIcon", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "icon_diamond", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "level_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_PayGrade_GradeIcon>): User_PayGrade_GradeIcon {
        const message = { iconDiamond: 0n, level: 0n, levelStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_PayGrade_GradeIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_PayGrade_GradeIcon): User_PayGrade_GradeIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 icon_diamond */ 2:
                    message.iconDiamond = reader.int64().toBigInt();
                    break;
                case /* int64 level */ 3:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* string level_str */ 4:
                    message.levelStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_PayGrade_GradeIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 icon_diamond = 2; */
        if (message.iconDiamond !== 0n)
            writer.tag(2, WireType.Varint).int64(message.iconDiamond);
        /* int64 level = 3; */
        if (message.level !== 0n)
            writer.tag(3, WireType.Varint).int64(message.level);
        /* string level_str = 4; */
        if (message.levelStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.levelStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.PayGrade.GradeIcon
 */
export const User_PayGrade_GradeIcon = new User_PayGrade_GradeIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_FansClub$Type extends MessageType<User_FansClub> {
    constructor() {
        super("data.User.FansClub", [
            { no: 1, name: "data", kind: "message", T: () => User_FansClub_FansClubData }
        ]);
    }
    create(value?: PartialMessage<User_FansClub>): User_FansClub {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_FansClub>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_FansClub): User_FansClub {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User.FansClub.FansClubData data */ 1:
                    message.data = User_FansClub_FansClubData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_FansClub, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User.FansClub.FansClubData data = 1; */
        if (message.data)
            User_FansClub_FansClubData.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.FansClub
 */
export const User_FansClub = new User_FansClub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_FansClub_FansClubData$Type extends MessageType<User_FansClub_FansClubData> {
    constructor() {
        super("data.User.FansClub.FansClubData", [
            { no: 1, name: "club_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "user_fans_club_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "badge", kind: "message", T: () => User_FansClub_FansClubData_UserBadge },
            { no: 5, name: "available_gift_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "badge_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<User_FansClub_FansClubData>): User_FansClub_FansClubData {
        const message = { clubName: "", level: 0, userFansClubStatus: 0, availableGiftIds: [], anchorId: 0n, badgeType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_FansClub_FansClubData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_FansClub_FansClubData): User_FansClub_FansClubData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string club_name */ 1:
                    message.clubName = reader.string();
                    break;
                case /* int32 level */ 2:
                    message.level = reader.int32();
                    break;
                case /* int32 user_fans_club_status */ 3:
                    message.userFansClubStatus = reader.int32();
                    break;
                case /* data.User.FansClub.FansClubData.UserBadge badge */ 4:
                    message.badge = User_FansClub_FansClubData_UserBadge.internalBinaryRead(reader, reader.uint32(), options, message.badge);
                    break;
                case /* repeated int64 available_gift_ids */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.availableGiftIds.push(reader.int64().toBigInt());
                    else
                        message.availableGiftIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 anchor_id */ 6:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* int32 badge_type */ 7:
                    message.badgeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_FansClub_FansClubData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string club_name = 1; */
        if (message.clubName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clubName);
        /* int32 level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).int32(message.level);
        /* int32 user_fans_club_status = 3; */
        if (message.userFansClubStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.userFansClubStatus);
        /* data.User.FansClub.FansClubData.UserBadge badge = 4; */
        if (message.badge)
            User_FansClub_FansClubData_UserBadge.internalBinaryWrite(message.badge, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 available_gift_ids = 5; */
        if (message.availableGiftIds.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.availableGiftIds.length; i++)
                writer.int64(message.availableGiftIds[i]);
            writer.join();
        }
        /* int64 anchor_id = 6; */
        if (message.anchorId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.anchorId);
        /* int32 badge_type = 7; */
        if (message.badgeType !== 0)
            writer.tag(7, WireType.Varint).int32(message.badgeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.FansClub.FansClubData
 */
export const User_FansClub_FansClubData = new User_FansClub_FansClubData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_FansClub_FansClubData_UserBadge$Type extends MessageType<User_FansClub_FansClubData_UserBadge> {
    constructor() {
        super("data.User.FansClub.FansClubData.UserBadge", [
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_FansClub_FansClubData_UserBadge>): User_FansClub_FansClubData_UserBadge {
        const message = { title: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_FansClub_FansClubData_UserBadge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_FansClub_FansClubData_UserBadge): User_FansClub_FansClubData_UserBadge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_FansClub_FansClubData_UserBadge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.FansClub.FansClubData.UserBadge
 */
export const User_FansClub_FansClubData_UserBadge = new User_FansClub_FansClubData_UserBadge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_Border$Type extends MessageType<User_Border> {
    constructor() {
        super("data.User.Border", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "thumb_icon", kind: "message", T: () => Image },
            { no: 4, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_Border>): User_Border {
        const message = { level: 0n, dressId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_Border>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_Border): User_Border {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 level */ 2:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* data.Image thumb_icon */ 3:
                    message.thumbIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.thumbIcon);
                    break;
                case /* string dress_id */ 4:
                    message.dressId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_Border, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 level = 2; */
        if (message.level !== 0n)
            writer.tag(2, WireType.Varint).int64(message.level);
        /* data.Image thumb_icon = 3; */
        if (message.thumbIcon)
            Image.internalBinaryWrite(message.thumbIcon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string dress_id = 4; */
        if (message.dressId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.dressId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.Border
 */
export const User_Border = new User_Border$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_UserAttr$Type extends MessageType<User_UserAttr> {
    constructor() {
        super("data.User.UserAttr", [
            { no: 1, name: "is_muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_admin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_super_admin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "admin_privileges", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<User_UserAttr>): User_UserAttr {
        const message = { isMuted: false, isAdmin: false, isSuperAdmin: false, adminPrivileges: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_UserAttr>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_UserAttr): User_UserAttr {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_muted */ 1:
                    message.isMuted = reader.bool();
                    break;
                case /* bool is_admin */ 2:
                    message.isAdmin = reader.bool();
                    break;
                case /* bool is_super_admin */ 3:
                    message.isSuperAdmin = reader.bool();
                    break;
                case /* repeated int32 admin_privileges */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.adminPrivileges.push(reader.int32());
                    else
                        message.adminPrivileges.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_UserAttr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_muted = 1; */
        if (message.isMuted !== false)
            writer.tag(1, WireType.Varint).bool(message.isMuted);
        /* bool is_admin = 2; */
        if (message.isAdmin !== false)
            writer.tag(2, WireType.Varint).bool(message.isAdmin);
        /* bool is_super_admin = 3; */
        if (message.isSuperAdmin !== false)
            writer.tag(3, WireType.Varint).bool(message.isSuperAdmin);
        /* repeated int32 admin_privileges = 4; */
        if (message.adminPrivileges.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.adminPrivileges.length; i++)
                writer.int32(message.adminPrivileges[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.UserAttr
 */
export const User_UserAttr = new User_UserAttr$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_OwnRoom$Type extends MessageType<User_OwnRoom> {
    constructor() {
        super("data.User.OwnRoom", [
            { no: 1, name: "room_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room_ids_str", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "room_ids_display", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<User_OwnRoom>): User_OwnRoom {
        const message = { roomIds: [], roomIdsStr: [], roomIdsDisplay: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_OwnRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_OwnRoom): User_OwnRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 room_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roomIds.push(reader.int64().toBigInt());
                    else
                        message.roomIds.push(reader.int64().toBigInt());
                    break;
                case /* repeated string room_ids_str */ 2:
                    message.roomIdsStr.push(reader.string());
                    break;
                case /* repeated int32 room_ids_display */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roomIdsDisplay.push(reader.int32());
                    else
                        message.roomIdsDisplay.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_OwnRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 room_ids = 1; */
        if (message.roomIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.roomIds.length; i++)
                writer.int64(message.roomIds[i]);
            writer.join();
        }
        /* repeated string room_ids_str = 2; */
        for (let i = 0; i < message.roomIdsStr.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.roomIdsStr[i]);
        /* repeated int32 room_ids_display = 3; */
        if (message.roomIdsDisplay.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.roomIdsDisplay.length; i++)
                writer.int32(message.roomIdsDisplay[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.OwnRoom
 */
export const User_OwnRoom = new User_OwnRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_AnchorInfo$Type extends MessageType<User_AnchorInfo> {
    constructor() {
        super("data.User.AnchorInfo", [
            { no: 1, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User_AnchorInfo>): User_AnchorInfo {
        const message = { level: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_AnchorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_AnchorInfo): User_AnchorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 level */ 1:
                    message.level = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_AnchorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 level = 1; */
        if (message.level !== 0n)
            writer.tag(1, WireType.Varint).int64(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.AnchorInfo
 */
export const User_AnchorInfo = new User_AnchorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_AnchorLevel$Type extends MessageType<User_AnchorLevel> {
    constructor() {
        super("data.User.AnchorLevel", [
            { no: 1, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "experience", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "lowest_experience_this_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "highest_experience_this_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "task_start_experience", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "task_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "task_decrease_experience", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "task_target_experience", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "task_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "profile_dialog_bg", kind: "message", T: () => Image },
            { no: 11, name: "profile_dialog_bg_back", kind: "message", T: () => Image },
            { no: 12, name: "stage_level", kind: "message", T: () => Image },
            { no: 13, name: "small_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<User_AnchorLevel>): User_AnchorLevel {
        const message = { level: 0n, experience: 0n, lowestExperienceThisLevel: 0n, highestExperienceThisLevel: 0n, taskStartExperience: 0n, taskStartTime: 0n, taskDecreaseExperience: 0n, taskTargetExperience: 0n, taskEndTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_AnchorLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_AnchorLevel): User_AnchorLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 level */ 1:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* int64 experience */ 2:
                    message.experience = reader.int64().toBigInt();
                    break;
                case /* int64 lowest_experience_this_level */ 3:
                    message.lowestExperienceThisLevel = reader.int64().toBigInt();
                    break;
                case /* int64 highest_experience_this_level */ 4:
                    message.highestExperienceThisLevel = reader.int64().toBigInt();
                    break;
                case /* int64 task_start_experience */ 5:
                    message.taskStartExperience = reader.int64().toBigInt();
                    break;
                case /* int64 task_start_time */ 6:
                    message.taskStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 task_decrease_experience */ 7:
                    message.taskDecreaseExperience = reader.int64().toBigInt();
                    break;
                case /* int64 task_target_experience */ 8:
                    message.taskTargetExperience = reader.int64().toBigInt();
                    break;
                case /* int64 task_end_time */ 9:
                    message.taskEndTime = reader.int64().toBigInt();
                    break;
                case /* data.Image profile_dialog_bg */ 10:
                    message.profileDialogBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.profileDialogBg);
                    break;
                case /* data.Image profile_dialog_bg_back */ 11:
                    message.profileDialogBgBack = Image.internalBinaryRead(reader, reader.uint32(), options, message.profileDialogBgBack);
                    break;
                case /* data.Image stage_level */ 12:
                    message.stageLevel = Image.internalBinaryRead(reader, reader.uint32(), options, message.stageLevel);
                    break;
                case /* data.Image small_icon */ 13:
                    message.smallIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.smallIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_AnchorLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 level = 1; */
        if (message.level !== 0n)
            writer.tag(1, WireType.Varint).int64(message.level);
        /* int64 experience = 2; */
        if (message.experience !== 0n)
            writer.tag(2, WireType.Varint).int64(message.experience);
        /* int64 lowest_experience_this_level = 3; */
        if (message.lowestExperienceThisLevel !== 0n)
            writer.tag(3, WireType.Varint).int64(message.lowestExperienceThisLevel);
        /* int64 highest_experience_this_level = 4; */
        if (message.highestExperienceThisLevel !== 0n)
            writer.tag(4, WireType.Varint).int64(message.highestExperienceThisLevel);
        /* int64 task_start_experience = 5; */
        if (message.taskStartExperience !== 0n)
            writer.tag(5, WireType.Varint).int64(message.taskStartExperience);
        /* int64 task_start_time = 6; */
        if (message.taskStartTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.taskStartTime);
        /* int64 task_decrease_experience = 7; */
        if (message.taskDecreaseExperience !== 0n)
            writer.tag(7, WireType.Varint).int64(message.taskDecreaseExperience);
        /* int64 task_target_experience = 8; */
        if (message.taskTargetExperience !== 0n)
            writer.tag(8, WireType.Varint).int64(message.taskTargetExperience);
        /* int64 task_end_time = 9; */
        if (message.taskEndTime !== 0n)
            writer.tag(9, WireType.Varint).int64(message.taskEndTime);
        /* data.Image profile_dialog_bg = 10; */
        if (message.profileDialogBg)
            Image.internalBinaryWrite(message.profileDialogBg, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Image profile_dialog_bg_back = 11; */
        if (message.profileDialogBgBack)
            Image.internalBinaryWrite(message.profileDialogBgBack, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.Image stage_level = 12; */
        if (message.stageLevel)
            Image.internalBinaryWrite(message.stageLevel, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* data.Image small_icon = 13; */
        if (message.smallIcon)
            Image.internalBinaryWrite(message.smallIcon, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.AnchorLevel
 */
export const User_AnchorLevel = new User_AnchorLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_AuthorStats$Type extends MessageType<User_AuthorStats> {
    constructor() {
        super("data.User.AuthorStats", [
            { no: 1, name: "video_total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "video_total_play_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "video_total_share_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "video_total_series_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "variety_show_play_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "video_total_favorite_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User_AuthorStats>): User_AuthorStats {
        const message = { videoTotalCount: 0n, videoTotalPlayCount: 0n, videoTotalShareCount: 0n, videoTotalSeriesCount: 0n, varietyShowPlayCount: 0n, videoTotalFavoriteCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_AuthorStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_AuthorStats): User_AuthorStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 video_total_count */ 1:
                    message.videoTotalCount = reader.int64().toBigInt();
                    break;
                case /* int64 video_total_play_count */ 2:
                    message.videoTotalPlayCount = reader.int64().toBigInt();
                    break;
                case /* int64 video_total_share_count */ 3:
                    message.videoTotalShareCount = reader.int64().toBigInt();
                    break;
                case /* int64 video_total_series_count */ 4:
                    message.videoTotalSeriesCount = reader.int64().toBigInt();
                    break;
                case /* int64 variety_show_play_count */ 5:
                    message.varietyShowPlayCount = reader.int64().toBigInt();
                    break;
                case /* int64 video_total_favorite_count */ 6:
                    message.videoTotalFavoriteCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_AuthorStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 video_total_count = 1; */
        if (message.videoTotalCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.videoTotalCount);
        /* int64 video_total_play_count = 2; */
        if (message.videoTotalPlayCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.videoTotalPlayCount);
        /* int64 video_total_share_count = 3; */
        if (message.videoTotalShareCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.videoTotalShareCount);
        /* int64 video_total_series_count = 4; */
        if (message.videoTotalSeriesCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.videoTotalSeriesCount);
        /* int64 variety_show_play_count = 5; */
        if (message.varietyShowPlayCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.varietyShowPlayCount);
        /* int64 video_total_favorite_count = 6; */
        if (message.videoTotalFavoriteCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.videoTotalFavoriteCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.AuthorStats
 */
export const User_AuthorStats = new User_AuthorStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_XiguaParams$Type extends MessageType<User_XiguaParams> {
    constructor() {
        super("data.User.XiguaParams", [
            { no: 1, name: "user_auth_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ugc_publish_media_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "media_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "author_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "user_verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "user_extend_info", kind: "message", T: () => User_XiguaParams_UserExtendInfo },
            { no: 8, name: "xigua_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 11, name: "avatar_medium", kind: "message", T: () => Image },
            { no: 12, name: "avatar_large", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<User_XiguaParams>): User_XiguaParams {
        const message = { userAuthInfo: "", ugcPublishMediaId: 0n, mediaId: 0n, authorDesc: "", description: "", userVerified: false, xiguaUid: 0n, nickName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_XiguaParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_XiguaParams): User_XiguaParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_auth_info */ 1:
                    message.userAuthInfo = reader.string();
                    break;
                case /* int64 ugc_publish_media_id */ 2:
                    message.ugcPublishMediaId = reader.int64().toBigInt();
                    break;
                case /* int64 media_id */ 3:
                    message.mediaId = reader.int64().toBigInt();
                    break;
                case /* string author_desc */ 4:
                    message.authorDesc = reader.string();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* bool user_verified */ 6:
                    message.userVerified = reader.bool();
                    break;
                case /* data.User.XiguaParams.UserExtendInfo user_extend_info */ 7:
                    message.userExtendInfo = User_XiguaParams_UserExtendInfo.internalBinaryRead(reader, reader.uint32(), options, message.userExtendInfo);
                    break;
                case /* int64 xigua_uid */ 8:
                    message.xiguaUid = reader.int64().toBigInt();
                    break;
                case /* string nick_name */ 9:
                    message.nickName = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 10:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* data.Image avatar_medium */ 11:
                    message.avatarMedium = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarMedium);
                    break;
                case /* data.Image avatar_large */ 12:
                    message.avatarLarge = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarLarge);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_XiguaParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_auth_info = 1; */
        if (message.userAuthInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userAuthInfo);
        /* int64 ugc_publish_media_id = 2; */
        if (message.ugcPublishMediaId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.ugcPublishMediaId);
        /* int64 media_id = 3; */
        if (message.mediaId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.mediaId);
        /* string author_desc = 4; */
        if (message.authorDesc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.authorDesc);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* bool user_verified = 6; */
        if (message.userVerified !== false)
            writer.tag(6, WireType.Varint).bool(message.userVerified);
        /* data.User.XiguaParams.UserExtendInfo user_extend_info = 7; */
        if (message.userExtendInfo)
            User_XiguaParams_UserExtendInfo.internalBinaryWrite(message.userExtendInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 xigua_uid = 8; */
        if (message.xiguaUid !== 0n)
            writer.tag(8, WireType.Varint).int64(message.xiguaUid);
        /* string nick_name = 9; */
        if (message.nickName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.nickName);
        /* data.Image avatar_thumb = 10; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_medium = 11; */
        if (message.avatarMedium)
            Image.internalBinaryWrite(message.avatarMedium, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_large = 12; */
        if (message.avatarLarge)
            Image.internalBinaryWrite(message.avatarLarge, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.XiguaParams
 */
export const User_XiguaParams = new User_XiguaParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_XiguaParams_UserExtendInfo$Type extends MessageType<User_XiguaParams_UserExtendInfo> {
    constructor() {
        super("data.User.XiguaParams.UserExtendInfo", [
            { no: 1, name: "share_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "r_schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rocket_schema_info", kind: "message", T: () => User_XiguaParams_UserExtendInfo_RocketSchema }
        ]);
    }
    create(value?: PartialMessage<User_XiguaParams_UserExtendInfo>): User_XiguaParams_UserExtendInfo {
        const message = { shareUrl: "", rSchemaUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_XiguaParams_UserExtendInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_XiguaParams_UserExtendInfo): User_XiguaParams_UserExtendInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string share_url */ 1:
                    message.shareUrl = reader.string();
                    break;
                case /* string r_schema_url */ 2:
                    message.rSchemaUrl = reader.string();
                    break;
                case /* data.User.XiguaParams.UserExtendInfo.RocketSchema rocket_schema_info */ 3:
                    message.rocketSchemaInfo = User_XiguaParams_UserExtendInfo_RocketSchema.internalBinaryRead(reader, reader.uint32(), options, message.rocketSchemaInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_XiguaParams_UserExtendInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string share_url = 1; */
        if (message.shareUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.shareUrl);
        /* string r_schema_url = 2; */
        if (message.rSchemaUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rSchemaUrl);
        /* data.User.XiguaParams.UserExtendInfo.RocketSchema rocket_schema_info = 3; */
        if (message.rocketSchemaInfo)
            User_XiguaParams_UserExtendInfo_RocketSchema.internalBinaryWrite(message.rocketSchemaInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.XiguaParams.UserExtendInfo
 */
export const User_XiguaParams_UserExtendInfo = new User_XiguaParams_UserExtendInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_XiguaParams_UserExtendInfo_RocketSchema$Type extends MessageType<User_XiguaParams_UserExtendInfo_RocketSchema> {
    constructor() {
        super("data.User.XiguaParams.UserExtendInfo.RocketSchema", [
            { no: 1, name: "r_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "r_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "download_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_XiguaParams_UserExtendInfo_RocketSchema>): User_XiguaParams_UserExtendInfo_RocketSchema {
        const message = { rSchema: "", rToken: "", downloadUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_XiguaParams_UserExtendInfo_RocketSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_XiguaParams_UserExtendInfo_RocketSchema): User_XiguaParams_UserExtendInfo_RocketSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string r_schema */ 1:
                    message.rSchema = reader.string();
                    break;
                case /* string r_token */ 2:
                    message.rToken = reader.string();
                    break;
                case /* string download_url */ 3:
                    message.downloadUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_XiguaParams_UserExtendInfo_RocketSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string r_schema = 1; */
        if (message.rSchema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rSchema);
        /* string r_token = 2; */
        if (message.rToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rToken);
        /* string download_url = 3; */
        if (message.downloadUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.downloadUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.XiguaParams.UserExtendInfo.RocketSchema
 */
export const User_XiguaParams_UserExtendInfo_RocketSchema = new User_XiguaParams_UserExtendInfo_RocketSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_ActivityInfo$Type extends MessageType<User_ActivityInfo> {
    constructor() {
        super("data.User.ActivityInfo", [
            { no: 1, name: "Badge", kind: "message", jsonName: "Badge", T: () => Image },
            { no: 2, name: "StoryTag", kind: "message", jsonName: "StoryTag", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<User_ActivityInfo>): User_ActivityInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_ActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_ActivityInfo): User_ActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image Badge = 1 [json_name = "Badge"];*/ 1:
                    message.badge = Image.internalBinaryRead(reader, reader.uint32(), options, message.badge);
                    break;
                case /* data.Image StoryTag = 2 [json_name = "StoryTag"];*/ 2:
                    message.storyTag = Image.internalBinaryRead(reader, reader.uint32(), options, message.storyTag);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_ActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image Badge = 1 [json_name = "Badge"]; */
        if (message.badge)
            Image.internalBinaryWrite(message.badge, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image StoryTag = 2 [json_name = "StoryTag"]; */
        if (message.storyTag)
            Image.internalBinaryWrite(message.storyTag, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.ActivityInfo
 */
export const User_ActivityInfo = new User_ActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_NobleLevelInfo$Type extends MessageType<User_NobleLevelInfo> {
    constructor() {
        super("data.User.NobleLevelInfo", [
            { no: 1, name: "noble_background", kind: "message", T: () => Image },
            { no: 2, name: "noble_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "noble_icon", kind: "message", T: () => Image },
            { no: 4, name: "noble_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "expire_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "noble_big_icon", kind: "message", T: () => Image },
            { no: 7, name: "noble_icon_with_back", kind: "message", T: () => Image },
            { no: 8, name: "noble_boarder", kind: "message", T: () => Image },
            { no: 9, name: "noble_background_color", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_NobleLevelInfo>): User_NobleLevelInfo {
        const message = { nobleLevel: 0n, nobleName: "", expireTime: 0n, nobleBackgroundColor: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_NobleLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_NobleLevelInfo): User_NobleLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image noble_background */ 1:
                    message.nobleBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.nobleBackground);
                    break;
                case /* int64 noble_level */ 2:
                    message.nobleLevel = reader.int64().toBigInt();
                    break;
                case /* data.Image noble_icon */ 3:
                    message.nobleIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.nobleIcon);
                    break;
                case /* string noble_name */ 4:
                    message.nobleName = reader.string();
                    break;
                case /* int64 expire_time */ 5:
                    message.expireTime = reader.int64().toBigInt();
                    break;
                case /* data.Image noble_big_icon */ 6:
                    message.nobleBigIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.nobleBigIcon);
                    break;
                case /* data.Image noble_icon_with_back */ 7:
                    message.nobleIconWithBack = Image.internalBinaryRead(reader, reader.uint32(), options, message.nobleIconWithBack);
                    break;
                case /* data.Image noble_boarder */ 8:
                    message.nobleBoarder = Image.internalBinaryRead(reader, reader.uint32(), options, message.nobleBoarder);
                    break;
                case /* repeated string noble_background_color */ 9:
                    message.nobleBackgroundColor.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_NobleLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image noble_background = 1; */
        if (message.nobleBackground)
            Image.internalBinaryWrite(message.nobleBackground, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 noble_level = 2; */
        if (message.nobleLevel !== 0n)
            writer.tag(2, WireType.Varint).int64(message.nobleLevel);
        /* data.Image noble_icon = 3; */
        if (message.nobleIcon)
            Image.internalBinaryWrite(message.nobleIcon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string noble_name = 4; */
        if (message.nobleName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nobleName);
        /* int64 expire_time = 5; */
        if (message.expireTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.expireTime);
        /* data.Image noble_big_icon = 6; */
        if (message.nobleBigIcon)
            Image.internalBinaryWrite(message.nobleBigIcon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image noble_icon_with_back = 7; */
        if (message.nobleIconWithBack)
            Image.internalBinaryWrite(message.nobleIconWithBack, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Image noble_boarder = 8; */
        if (message.nobleBoarder)
            Image.internalBinaryWrite(message.nobleBoarder, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated string noble_background_color = 9; */
        for (let i = 0; i < message.nobleBackgroundColor.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.nobleBackgroundColor[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.NobleLevelInfo
 */
export const User_NobleLevelInfo = new User_NobleLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_BrotherhoodInfo$Type extends MessageType<User_BrotherhoodInfo> {
    constructor() {
        super("data.User.BrotherhoodInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "background", kind: "message", T: () => Image },
            { no: 4, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_BrotherhoodInfo>): User_BrotherhoodInfo {
        const message = { name: "", level: 0n, fontColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_BrotherhoodInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_BrotherhoodInfo): User_BrotherhoodInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 level */ 2:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* data.Image background */ 3:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* string font_color */ 4:
                    message.fontColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_BrotherhoodInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 level = 2; */
        if (message.level !== 0n)
            writer.tag(2, WireType.Varint).int64(message.level);
        /* data.Image background = 3; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string font_color = 4; */
        if (message.fontColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fontColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.BrotherhoodInfo
 */
export const User_BrotherhoodInfo = new User_BrotherhoodInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_AuthenticationInfo$Type extends MessageType<User_AuthenticationInfo> {
    constructor() {
        super("data.User.AuthenticationInfo", [
            { no: 1, name: "custom_verify", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "enterprise_verify_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "authentication_badge", kind: "message", T: () => Image },
            { no: 4, name: "level_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<User_AuthenticationInfo>): User_AuthenticationInfo {
        const message = { customVerify: "", enterpriseVerifyReason: "", levelList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_AuthenticationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_AuthenticationInfo): User_AuthenticationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string custom_verify */ 1:
                    message.customVerify = reader.string();
                    break;
                case /* string enterprise_verify_reason */ 2:
                    message.enterpriseVerifyReason = reader.string();
                    break;
                case /* data.Image authentication_badge */ 3:
                    message.authenticationBadge = Image.internalBinaryRead(reader, reader.uint32(), options, message.authenticationBadge);
                    break;
                case /* repeated int32 level_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.levelList.push(reader.int32());
                    else
                        message.levelList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_AuthenticationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string custom_verify = 1; */
        if (message.customVerify !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customVerify);
        /* string enterprise_verify_reason = 2; */
        if (message.enterpriseVerifyReason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.enterpriseVerifyReason);
        /* data.Image authentication_badge = 3; */
        if (message.authenticationBadge)
            Image.internalBinaryWrite(message.authenticationBadge, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 level_list = 4; */
        if (message.levelList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.levelList.length; i++)
                writer.int32(message.levelList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.AuthenticationInfo
 */
export const User_AuthenticationInfo = new User_AuthenticationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_PoiInfo$Type extends MessageType<User_PoiInfo> {
    constructor() {
        super("data.User.PoiInfo", [
            { no: 1, name: "is_poi_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "poi_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "poi_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "poi_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "follower_count_permission", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "white_user_permission", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User_PoiInfo>): User_PoiInfo {
        const message = { isPoiEnabled: false, poiId: 0n, poiName: "", poiIdStr: "", followerCountPermission: 0n, whiteUserPermission: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_PoiInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_PoiInfo): User_PoiInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_poi_enabled */ 1:
                    message.isPoiEnabled = reader.bool();
                    break;
                case /* int64 poi_id */ 2:
                    message.poiId = reader.int64().toBigInt();
                    break;
                case /* string poi_name */ 3:
                    message.poiName = reader.string();
                    break;
                case /* string poi_id_str */ 4:
                    message.poiIdStr = reader.string();
                    break;
                case /* int64 follower_count_permission */ 5:
                    message.followerCountPermission = reader.int64().toBigInt();
                    break;
                case /* int64 white_user_permission */ 6:
                    message.whiteUserPermission = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_PoiInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_poi_enabled = 1; */
        if (message.isPoiEnabled !== false)
            writer.tag(1, WireType.Varint).bool(message.isPoiEnabled);
        /* int64 poi_id = 2; */
        if (message.poiId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.poiId);
        /* string poi_name = 3; */
        if (message.poiName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.poiName);
        /* string poi_id_str = 4; */
        if (message.poiIdStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.poiIdStr);
        /* int64 follower_count_permission = 5; */
        if (message.followerCountPermission !== 0n)
            writer.tag(5, WireType.Varint).int64(message.followerCountPermission);
        /* int64 white_user_permission = 6; */
        if (message.whiteUserPermission !== 0n)
            writer.tag(6, WireType.Varint).int64(message.whiteUserPermission);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.PoiInfo
 */
export const User_PoiInfo = new User_PoiInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_FansGroupInfo$Type extends MessageType<User_FansGroupInfo> {
    constructor() {
        super("data.User.FansGroupInfo", [
            { no: 1, name: "list_fans_group_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_FansGroupInfo>): User_FansGroupInfo {
        const message = { listFansGroupUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_FansGroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_FansGroupInfo): User_FansGroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string list_fans_group_url */ 1:
                    message.listFansGroupUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_FansGroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string list_fans_group_url = 1; */
        if (message.listFansGroupUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.listFansGroupUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.FansGroupInfo
 */
export const User_FansGroupInfo = new User_FansGroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_JAccreditInfo$Type extends MessageType<User_JAccreditInfo> {
    constructor() {
        super("data.User.JAccreditInfo", [
            { no: 1, name: "JAccreditBasic", kind: "scalar", jsonName: "JAccreditBasic", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "JAccreditAdvance", kind: "scalar", jsonName: "JAccreditAdvance", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "JAccreditContent", kind: "scalar", jsonName: "JAccreditContent", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "JAccreditLive", kind: "scalar", jsonName: "JAccreditLive", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<User_JAccreditInfo>): User_JAccreditInfo {
        const message = { jAccreditBasic: 0, jAccreditAdvance: 0, jAccreditContent: 0, jAccreditLive: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_JAccreditInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_JAccreditInfo): User_JAccreditInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 JAccreditBasic = 1 [json_name = "JAccreditBasic"];*/ 1:
                    message.jAccreditBasic = reader.int32();
                    break;
                case /* int32 JAccreditAdvance = 2 [json_name = "JAccreditAdvance"];*/ 2:
                    message.jAccreditAdvance = reader.int32();
                    break;
                case /* int32 JAccreditContent = 3 [json_name = "JAccreditContent"];*/ 3:
                    message.jAccreditContent = reader.int32();
                    break;
                case /* int32 JAccreditLive = 4 [json_name = "JAccreditLive"];*/ 4:
                    message.jAccreditLive = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_JAccreditInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 JAccreditBasic = 1 [json_name = "JAccreditBasic"]; */
        if (message.jAccreditBasic !== 0)
            writer.tag(1, WireType.Varint).int32(message.jAccreditBasic);
        /* int32 JAccreditAdvance = 2 [json_name = "JAccreditAdvance"]; */
        if (message.jAccreditAdvance !== 0)
            writer.tag(2, WireType.Varint).int32(message.jAccreditAdvance);
        /* int32 JAccreditContent = 3 [json_name = "JAccreditContent"]; */
        if (message.jAccreditContent !== 0)
            writer.tag(3, WireType.Varint).int32(message.jAccreditContent);
        /* int32 JAccreditLive = 4 [json_name = "JAccreditLive"]; */
        if (message.jAccreditLive !== 0)
            writer.tag(4, WireType.Varint).int32(message.jAccreditLive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.JAccreditInfo
 */
export const User_JAccreditInfo = new User_JAccreditInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_Subscribe$Type extends MessageType<User_Subscribe> {
    constructor() {
        super("data.User.Subscribe", [
            { no: 1, name: "is_member", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "identity_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "buy_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "open", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User_Subscribe>): User_Subscribe {
        const message = { isMember: false, level: 0n, identityType: 0n, buyType: 0n, open: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_Subscribe>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_Subscribe): User_Subscribe {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_member */ 1:
                    message.isMember = reader.bool();
                    break;
                case /* int64 level */ 2:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* int64 identity_type */ 3:
                    message.identityType = reader.int64().toBigInt();
                    break;
                case /* int64 buy_type */ 4:
                    message.buyType = reader.int64().toBigInt();
                    break;
                case /* int64 open */ 5:
                    message.open = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_Subscribe, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_member = 1; */
        if (message.isMember !== false)
            writer.tag(1, WireType.Varint).bool(message.isMember);
        /* int64 level = 2; */
        if (message.level !== 0n)
            writer.tag(2, WireType.Varint).int64(message.level);
        /* int64 identity_type = 3; */
        if (message.identityType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.identityType);
        /* int64 buy_type = 4; */
        if (message.buyType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.buyType);
        /* int64 open = 5; */
        if (message.open !== 0n)
            writer.tag(5, WireType.Varint).int64(message.open);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.Subscribe
 */
export const User_Subscribe = new User_Subscribe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_ProfileStyleParams$Type extends MessageType<User_ProfileStyleParams> {
    constructor() {
        super("data.User.ProfileStyleParams", [
            { no: 1, name: "profile_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "smart_switch", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User_ProfileStyleParams>): User_ProfileStyleParams {
        const message = { profileStyle: 0n, smartSwitch: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_ProfileStyleParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_ProfileStyleParams): User_ProfileStyleParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 profile_style */ 1:
                    message.profileStyle = reader.int64().toBigInt();
                    break;
                case /* int64 smart_switch */ 2:
                    message.smartSwitch = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_ProfileStyleParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 profile_style = 1; */
        if (message.profileStyle !== 0n)
            writer.tag(1, WireType.Varint).int64(message.profileStyle);
        /* int64 smart_switch = 2; */
        if (message.smartSwitch !== 0n)
            writer.tag(2, WireType.Varint).int64(message.smartSwitch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.ProfileStyleParams
 */
export const User_ProfileStyleParams = new User_ProfileStyleParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_UserDressInfo$Type extends MessageType<User_UserDressInfo> {
    constructor() {
        super("data.User.UserDressInfo", [
            { no: 1, name: "dress_wear_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dress_own_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User_UserDressInfo>): User_UserDressInfo {
        const message = { dressWearIds: [], dressOwnIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_UserDressInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_UserDressInfo): User_UserDressInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string dress_wear_ids */ 1:
                    message.dressWearIds.push(reader.string());
                    break;
                case /* repeated string dress_own_ids */ 2:
                    message.dressOwnIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_UserDressInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string dress_wear_ids = 1; */
        for (let i = 0; i < message.dressWearIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.dressWearIds[i]);
        /* repeated string dress_own_ids = 2; */
        for (let i = 0; i < message.dressOwnIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.dressOwnIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.UserDressInfo
 */
export const User_UserDressInfo = new User_UserDressInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_BizRelation$Type extends MessageType<User_BizRelation> {
    constructor() {
        super("data.User.BizRelation", [
            { no: 1, name: "shop_fans_club_reverse", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<User_BizRelation>): User_BizRelation {
        const message = { shopFansClubReverse: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_BizRelation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_BizRelation): User_BizRelation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool shop_fans_club_reverse */ 1:
                    message.shopFansClubReverse = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_BizRelation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool shop_fans_club_reverse = 1; */
        if (message.shopFansClubReverse !== false)
            writer.tag(1, WireType.Varint).bool(message.shopFansClubReverse);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.BizRelation
 */
export const User_BizRelation = new User_BizRelation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User_UserStats$Type extends MessageType<User_UserStats> {
    constructor() {
        super("data.User.UserStats", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "following_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "follower_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "record_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "total_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "daily_fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "daily_income", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "item_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "favorite_item_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "diamond_consumed_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "tuwen_item_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User_UserStats>): User_UserStats {
        const message = { id: 0n, idStr: "", followingCount: 0n, followerCount: 0n, recordCount: 0n, totalDuration: 0n, dailyFanTicketCount: 0n, dailyIncome: 0n, itemCount: 0n, favoriteItemCount: 0n, diamondCount: 0n, diamondConsumedCount: 0n, tuwenItemCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User_UserStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_UserStats): User_UserStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 2:
                    message.idStr = reader.string();
                    break;
                case /* int64 following_count */ 3:
                    message.followingCount = reader.int64().toBigInt();
                    break;
                case /* int64 follower_count */ 4:
                    message.followerCount = reader.int64().toBigInt();
                    break;
                case /* int64 record_count */ 5:
                    message.recordCount = reader.int64().toBigInt();
                    break;
                case /* int64 total_duration */ 6:
                    message.totalDuration = reader.int64().toBigInt();
                    break;
                case /* int64 daily_fan_ticket_count */ 7:
                    message.dailyFanTicketCount = reader.int64().toBigInt();
                    break;
                case /* int64 daily_income */ 8:
                    message.dailyIncome = reader.int64().toBigInt();
                    break;
                case /* int64 item_count */ 9:
                    message.itemCount = reader.int64().toBigInt();
                    break;
                case /* int64 favorite_item_count */ 10:
                    message.favoriteItemCount = reader.int64().toBigInt();
                    break;
                case /* int64 diamond_count */ 11:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                case /* int64 diamond_consumed_count */ 12:
                    message.diamondConsumedCount = reader.int64().toBigInt();
                    break;
                case /* int64 tuwen_item_count */ 13:
                    message.tuwenItemCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User_UserStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string id_str = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* int64 following_count = 3; */
        if (message.followingCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.followingCount);
        /* int64 follower_count = 4; */
        if (message.followerCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.followerCount);
        /* int64 record_count = 5; */
        if (message.recordCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.recordCount);
        /* int64 total_duration = 6; */
        if (message.totalDuration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.totalDuration);
        /* int64 daily_fan_ticket_count = 7; */
        if (message.dailyFanTicketCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.dailyFanTicketCount);
        /* int64 daily_income = 8; */
        if (message.dailyIncome !== 0n)
            writer.tag(8, WireType.Varint).int64(message.dailyIncome);
        /* int64 item_count = 9; */
        if (message.itemCount !== 0n)
            writer.tag(9, WireType.Varint).int64(message.itemCount);
        /* int64 favorite_item_count = 10; */
        if (message.favoriteItemCount !== 0n)
            writer.tag(10, WireType.Varint).int64(message.favoriteItemCount);
        /* int64 diamond_count = 11; */
        if (message.diamondCount !== 0n)
            writer.tag(11, WireType.Varint).int64(message.diamondCount);
        /* int64 diamond_consumed_count = 12; */
        if (message.diamondConsumedCount !== 0n)
            writer.tag(12, WireType.Varint).int64(message.diamondConsumedCount);
        /* int64 tuwen_item_count = 13; */
        if (message.tuwenItemCount !== 0n)
            writer.tag(13, WireType.Varint).int64(message.tuwenItemCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.User.UserStats
 */
export const User_UserStats = new User_UserStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndustryCertification$Type extends MessageType<IndustryCertification> {
    constructor() {
        super("data.IndustryCertification", [
            { no: 1, name: "profile", kind: "message", T: () => IndustryCertificationProfile },
            { no: 2, name: "room", kind: "message", T: () => IndustryCertificationRoom }
        ]);
    }
    create(value?: PartialMessage<IndustryCertification>): IndustryCertification {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndustryCertification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndustryCertification): IndustryCertification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.IndustryCertificationProfile profile */ 1:
                    message.profile = IndustryCertificationProfile.internalBinaryRead(reader, reader.uint32(), options, message.profile);
                    break;
                case /* data.IndustryCertificationRoom room */ 2:
                    message.room = IndustryCertificationRoom.internalBinaryRead(reader, reader.uint32(), options, message.room);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndustryCertification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.IndustryCertificationProfile profile = 1; */
        if (message.profile)
            IndustryCertificationProfile.internalBinaryWrite(message.profile, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.IndustryCertificationRoom room = 2; */
        if (message.room)
            IndustryCertificationRoom.internalBinaryWrite(message.room, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.IndustryCertification
 */
export const IndustryCertification = new IndustryCertification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndustryCertificationProfile$Type extends MessageType<IndustryCertificationProfile> {
    constructor() {
        super("data.IndustryCertificationProfile", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cert_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<IndustryCertificationProfile>): IndustryCertificationProfile {
        const message = { content: "", schema: "", contentColor: "", bgColor: "", certType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndustryCertificationProfile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndustryCertificationProfile): IndustryCertificationProfile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string schema */ 3:
                    message.schema = reader.string();
                    break;
                case /* string content_color */ 4:
                    message.contentColor = reader.string();
                    break;
                case /* string bg_color */ 5:
                    message.bgColor = reader.string();
                    break;
                case /* int64 cert_type */ 6:
                    message.certType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndustryCertificationProfile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string schema = 3; */
        if (message.schema !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schema);
        /* string content_color = 4; */
        if (message.contentColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contentColor);
        /* string bg_color = 5; */
        if (message.bgColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColor);
        /* int64 cert_type = 6; */
        if (message.certType !== 0n)
            writer.tag(6, WireType.Varint).int64(message.certType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.IndustryCertificationProfile
 */
export const IndustryCertificationProfile = new IndustryCertificationProfile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndustryCertificationRoom$Type extends MessageType<IndustryCertificationRoom> {
    constructor() {
        super("data.IndustryCertificationRoom", [
            { no: 1, name: "room_owner", kind: "message", T: () => IndustryCertificationRoom_RoomOwner }
        ]);
    }
    create(value?: PartialMessage<IndustryCertificationRoom>): IndustryCertificationRoom {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndustryCertificationRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndustryCertificationRoom): IndustryCertificationRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.IndustryCertificationRoom.RoomOwner room_owner */ 1:
                    message.roomOwner = IndustryCertificationRoom_RoomOwner.internalBinaryRead(reader, reader.uint32(), options, message.roomOwner);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndustryCertificationRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.IndustryCertificationRoom.RoomOwner room_owner = 1; */
        if (message.roomOwner)
            IndustryCertificationRoom_RoomOwner.internalBinaryWrite(message.roomOwner, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.IndustryCertificationRoom
 */
export const IndustryCertificationRoom = new IndustryCertificationRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndustryCertificationRoom_RoomOwner$Type extends MessageType<IndustryCertificationRoom_RoomOwner> {
    constructor() {
        super("data.IndustryCertificationRoom.RoomOwner", [
            { no: 1, name: "title", kind: "message", T: () => Image },
            { no: 2, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "left_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "right_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "anchor_industry_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "brand_store_title", kind: "message", T: () => Image },
            { no: 7, name: "brand_store_background", kind: "message", T: () => Image },
            { no: 8, name: "anchor_reds_icon", kind: "message", T: () => Image },
            { no: 9, name: "anchor_reds_small_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<IndustryCertificationRoom_RoomOwner>): IndustryCertificationRoom_RoomOwner {
        const message = { subTitle: "", leftColor: "", rightColor: "", anchorIndustryType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndustryCertificationRoom_RoomOwner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndustryCertificationRoom_RoomOwner): IndustryCertificationRoom_RoomOwner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image title */ 1:
                    message.title = Image.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* string sub_title */ 2:
                    message.subTitle = reader.string();
                    break;
                case /* string left_color */ 3:
                    message.leftColor = reader.string();
                    break;
                case /* string right_color */ 4:
                    message.rightColor = reader.string();
                    break;
                case /* int32 anchor_industry_type */ 5:
                    message.anchorIndustryType = reader.int32();
                    break;
                case /* data.Image brand_store_title */ 6:
                    message.brandStoreTitle = Image.internalBinaryRead(reader, reader.uint32(), options, message.brandStoreTitle);
                    break;
                case /* data.Image brand_store_background */ 7:
                    message.brandStoreBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.brandStoreBackground);
                    break;
                case /* data.Image anchor_reds_icon */ 8:
                    message.anchorRedsIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.anchorRedsIcon);
                    break;
                case /* data.Image anchor_reds_small_icon */ 9:
                    message.anchorRedsSmallIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.anchorRedsSmallIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndustryCertificationRoom_RoomOwner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image title = 1; */
        if (message.title)
            Image.internalBinaryWrite(message.title, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string sub_title = 2; */
        if (message.subTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subTitle);
        /* string left_color = 3; */
        if (message.leftColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.leftColor);
        /* string right_color = 4; */
        if (message.rightColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.rightColor);
        /* int32 anchor_industry_type = 5; */
        if (message.anchorIndustryType !== 0)
            writer.tag(5, WireType.Varint).int32(message.anchorIndustryType);
        /* data.Image brand_store_title = 6; */
        if (message.brandStoreTitle)
            Image.internalBinaryWrite(message.brandStoreTitle, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image brand_store_background = 7; */
        if (message.brandStoreBackground)
            Image.internalBinaryWrite(message.brandStoreBackground, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Image anchor_reds_icon = 8; */
        if (message.anchorRedsIcon)
            Image.internalBinaryWrite(message.anchorRedsIcon, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image anchor_reds_small_icon = 9; */
        if (message.anchorRedsSmallIcon)
            Image.internalBinaryWrite(message.anchorRedsSmallIcon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.IndustryCertificationRoom.RoomOwner
 */
export const IndustryCertificationRoom_RoomOwner = new IndustryCertificationRoom_RoomOwner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Image$Type extends MessageType<Image> {
    constructor() {
        super("data.Image", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "avg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "open_web_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "content", kind: "message", T: () => Image_Content },
            { no: 9, name: "is_animated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "flex_setting_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image_NinePatchSetting },
            { no: 11, name: "text_setting_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image_NinePatchSetting }
        ]);
    }
    create(value?: PartialMessage<Image>): Image {
        const message = { urlList: [], uri: "", height: 0n, width: 0n, avgColor: "", imageType: 0, openWebUrl: "", isAnimated: false, flexSettingList: [], textSettingList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Image>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Image): Image {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* int64 height */ 3:
                    message.height = reader.int64().toBigInt();
                    break;
                case /* int64 width */ 4:
                    message.width = reader.int64().toBigInt();
                    break;
                case /* string avg_color */ 5:
                    message.avgColor = reader.string();
                    break;
                case /* int32 image_type */ 6:
                    message.imageType = reader.int32();
                    break;
                case /* string open_web_url */ 7:
                    message.openWebUrl = reader.string();
                    break;
                case /* data.Image.Content content */ 8:
                    message.content = Image_Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* bool is_animated */ 9:
                    message.isAnimated = reader.bool();
                    break;
                case /* repeated data.Image.NinePatchSetting flex_setting_list */ 10:
                    message.flexSettingList.push(Image_NinePatchSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.Image.NinePatchSetting text_setting_list */ 11:
                    message.textSettingList.push(Image_NinePatchSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Image, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* int64 height = 3; */
        if (message.height !== 0n)
            writer.tag(3, WireType.Varint).int64(message.height);
        /* int64 width = 4; */
        if (message.width !== 0n)
            writer.tag(4, WireType.Varint).int64(message.width);
        /* string avg_color = 5; */
        if (message.avgColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.avgColor);
        /* int32 image_type = 6; */
        if (message.imageType !== 0)
            writer.tag(6, WireType.Varint).int32(message.imageType);
        /* string open_web_url = 7; */
        if (message.openWebUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.openWebUrl);
        /* data.Image.Content content = 8; */
        if (message.content)
            Image_Content.internalBinaryWrite(message.content, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool is_animated = 9; */
        if (message.isAnimated !== false)
            writer.tag(9, WireType.Varint).bool(message.isAnimated);
        /* repeated data.Image.NinePatchSetting flex_setting_list = 10; */
        for (let i = 0; i < message.flexSettingList.length; i++)
            Image_NinePatchSetting.internalBinaryWrite(message.flexSettingList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image.NinePatchSetting text_setting_list = 11; */
        for (let i = 0; i < message.textSettingList.length; i++)
            Image_NinePatchSetting.internalBinaryWrite(message.textSettingList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Image
 */
export const Image = new Image$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Image_Content$Type extends MessageType<Image_Content> {
    constructor() {
        super("data.Image.Content", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "alternative_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Image_Content>): Image_Content {
        const message = { name: "", fontColor: "", level: 0n, alternativeText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Image_Content>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Image_Content): Image_Content {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string font_color */ 2:
                    message.fontColor = reader.string();
                    break;
                case /* int64 level */ 3:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* string alternative_text */ 4:
                    message.alternativeText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Image_Content, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string font_color = 2; */
        if (message.fontColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fontColor);
        /* int64 level = 3; */
        if (message.level !== 0n)
            writer.tag(3, WireType.Varint).int64(message.level);
        /* string alternative_text = 4; */
        if (message.alternativeText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.alternativeText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Image.Content
 */
export const Image_Content = new Image_Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Image_NinePatchSetting$Type extends MessageType<Image_NinePatchSetting> {
    constructor() {
        super("data.Image.NinePatchSetting", [
            { no: 1, name: "setting_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Image_NinePatchSetting>): Image_NinePatchSetting {
        const message = { settingList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Image_NinePatchSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Image_NinePatchSetting): Image_NinePatchSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 setting_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.settingList.push(reader.int64().toBigInt());
                    else
                        message.settingList.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Image_NinePatchSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 setting_list = 1; */
        if (message.settingList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.settingList.length; i++)
                writer.int64(message.settingList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Image.NinePatchSetting
 */
export const Image_NinePatchSetting = new Image_NinePatchSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorLinkmicUserSettings$Type extends MessageType<AnchorLinkmicUserSettings> {
    constructor() {
        super("data.AnchorLinkmicUserSettings", [
            { no: 1, name: "is_turn_on", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "accept_multi_linkmic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "accept_not_follower_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "allow_gift_to_other_anchors", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "accept_friend_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "accept_hourly_rank_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "accept_popularity_rank_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "accept_recommend_search_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorLinkmicUserSettings>): AnchorLinkmicUserSettings {
        const message = { isTurnOn: false, acceptMultiLinkmic: false, acceptNotFollowerInvite: false, allowGiftToOtherAnchors: false, acceptFriendInvite: false, acceptHourlyRankInvite: false, acceptPopularityRankInvite: false, acceptRecommendSearchInvite: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorLinkmicUserSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorLinkmicUserSettings): AnchorLinkmicUserSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_turn_on */ 1:
                    message.isTurnOn = reader.bool();
                    break;
                case /* bool accept_multi_linkmic */ 2:
                    message.acceptMultiLinkmic = reader.bool();
                    break;
                case /* bool accept_not_follower_invite */ 3:
                    message.acceptNotFollowerInvite = reader.bool();
                    break;
                case /* bool allow_gift_to_other_anchors */ 4:
                    message.allowGiftToOtherAnchors = reader.bool();
                    break;
                case /* bool accept_friend_invite */ 5:
                    message.acceptFriendInvite = reader.bool();
                    break;
                case /* bool accept_hourly_rank_invite */ 6:
                    message.acceptHourlyRankInvite = reader.bool();
                    break;
                case /* bool accept_popularity_rank_invite */ 7:
                    message.acceptPopularityRankInvite = reader.bool();
                    break;
                case /* bool accept_recommend_search_invite */ 8:
                    message.acceptRecommendSearchInvite = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorLinkmicUserSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_turn_on = 1; */
        if (message.isTurnOn !== false)
            writer.tag(1, WireType.Varint).bool(message.isTurnOn);
        /* bool accept_multi_linkmic = 2; */
        if (message.acceptMultiLinkmic !== false)
            writer.tag(2, WireType.Varint).bool(message.acceptMultiLinkmic);
        /* bool accept_not_follower_invite = 3; */
        if (message.acceptNotFollowerInvite !== false)
            writer.tag(3, WireType.Varint).bool(message.acceptNotFollowerInvite);
        /* bool allow_gift_to_other_anchors = 4; */
        if (message.allowGiftToOtherAnchors !== false)
            writer.tag(4, WireType.Varint).bool(message.allowGiftToOtherAnchors);
        /* bool accept_friend_invite = 5; */
        if (message.acceptFriendInvite !== false)
            writer.tag(5, WireType.Varint).bool(message.acceptFriendInvite);
        /* bool accept_hourly_rank_invite = 6; */
        if (message.acceptHourlyRankInvite !== false)
            writer.tag(6, WireType.Varint).bool(message.acceptHourlyRankInvite);
        /* bool accept_popularity_rank_invite = 7; */
        if (message.acceptPopularityRankInvite !== false)
            writer.tag(7, WireType.Varint).bool(message.acceptPopularityRankInvite);
        /* bool accept_recommend_search_invite = 8; */
        if (message.acceptRecommendSearchInvite !== false)
            writer.tag(8, WireType.Varint).bool(message.acceptRecommendSearchInvite);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnchorLinkmicUserSettings
 */
export const AnchorLinkmicUserSettings = new AnchorLinkmicUserSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleUserSettings$Type extends MessageType<BattleUserSettings> {
    constructor() {
        super("data.BattleUserSettings", [
            { no: 1, name: "is_turn_on", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "accept_not_follower_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "allow_gift_to_other_anchors", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "accept_friend_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "accept_hourly_rank_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "accept_popularity_rank_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "invite_reject_permanent_total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "invite_reject_temporary_total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "invite_reject_temporary_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "pk_accept_volume_up", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "pk_auto_confirm", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "accept_union_recommend_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BattleUserSettings>): BattleUserSettings {
        const message = { isTurnOn: false, acceptNotFollowerInvite: false, allowGiftToOtherAnchors: false, acceptFriendInvite: false, acceptHourlyRankInvite: false, acceptPopularityRankInvite: false, inviteRejectPermanentTotal: 0n, inviteRejectTemporaryTotal: 0n, inviteRejectTemporaryText: "", pkAcceptVolumeUp: false, pkAutoConfirm: false, acceptUnionRecommendInvite: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleUserSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleUserSettings): BattleUserSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_turn_on */ 1:
                    message.isTurnOn = reader.bool();
                    break;
                case /* bool accept_not_follower_invite */ 2:
                    message.acceptNotFollowerInvite = reader.bool();
                    break;
                case /* bool allow_gift_to_other_anchors */ 3:
                    message.allowGiftToOtherAnchors = reader.bool();
                    break;
                case /* bool accept_friend_invite */ 4:
                    message.acceptFriendInvite = reader.bool();
                    break;
                case /* bool accept_hourly_rank_invite */ 5:
                    message.acceptHourlyRankInvite = reader.bool();
                    break;
                case /* bool accept_popularity_rank_invite */ 6:
                    message.acceptPopularityRankInvite = reader.bool();
                    break;
                case /* int64 invite_reject_permanent_total */ 7:
                    message.inviteRejectPermanentTotal = reader.int64().toBigInt();
                    break;
                case /* int64 invite_reject_temporary_total */ 8:
                    message.inviteRejectTemporaryTotal = reader.int64().toBigInt();
                    break;
                case /* string invite_reject_temporary_text */ 9:
                    message.inviteRejectTemporaryText = reader.string();
                    break;
                case /* bool pk_accept_volume_up */ 10:
                    message.pkAcceptVolumeUp = reader.bool();
                    break;
                case /* bool pk_auto_confirm */ 11:
                    message.pkAutoConfirm = reader.bool();
                    break;
                case /* bool accept_union_recommend_invite */ 12:
                    message.acceptUnionRecommendInvite = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleUserSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_turn_on = 1; */
        if (message.isTurnOn !== false)
            writer.tag(1, WireType.Varint).bool(message.isTurnOn);
        /* bool accept_not_follower_invite = 2; */
        if (message.acceptNotFollowerInvite !== false)
            writer.tag(2, WireType.Varint).bool(message.acceptNotFollowerInvite);
        /* bool allow_gift_to_other_anchors = 3; */
        if (message.allowGiftToOtherAnchors !== false)
            writer.tag(3, WireType.Varint).bool(message.allowGiftToOtherAnchors);
        /* bool accept_friend_invite = 4; */
        if (message.acceptFriendInvite !== false)
            writer.tag(4, WireType.Varint).bool(message.acceptFriendInvite);
        /* bool accept_hourly_rank_invite = 5; */
        if (message.acceptHourlyRankInvite !== false)
            writer.tag(5, WireType.Varint).bool(message.acceptHourlyRankInvite);
        /* bool accept_popularity_rank_invite = 6; */
        if (message.acceptPopularityRankInvite !== false)
            writer.tag(6, WireType.Varint).bool(message.acceptPopularityRankInvite);
        /* int64 invite_reject_permanent_total = 7; */
        if (message.inviteRejectPermanentTotal !== 0n)
            writer.tag(7, WireType.Varint).int64(message.inviteRejectPermanentTotal);
        /* int64 invite_reject_temporary_total = 8; */
        if (message.inviteRejectTemporaryTotal !== 0n)
            writer.tag(8, WireType.Varint).int64(message.inviteRejectTemporaryTotal);
        /* string invite_reject_temporary_text = 9; */
        if (message.inviteRejectTemporaryText !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.inviteRejectTemporaryText);
        /* bool pk_accept_volume_up = 10; */
        if (message.pkAcceptVolumeUp !== false)
            writer.tag(10, WireType.Varint).bool(message.pkAcceptVolumeUp);
        /* bool pk_auto_confirm = 11; */
        if (message.pkAutoConfirm !== false)
            writer.tag(11, WireType.Varint).bool(message.pkAutoConfirm);
        /* bool accept_union_recommend_invite = 12; */
        if (message.acceptUnionRecommendInvite !== false)
            writer.tag(12, WireType.Varint).bool(message.acceptUnionRecommendInvite);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleUserSettings
 */
export const BattleUserSettings = new BattleUserSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RivalExtraInfo$Type extends MessageType<RivalExtraInfo> {
    constructor() {
        super("data.RivalExtraInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "anchor_layer", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "linker_info", kind: "message", T: () => RivalExtraInfo_LinkerInfo },
            { no: 6, name: "linkmic_user_settings", kind: "message", T: () => AnchorLinkmicUserSettings },
            { no: 7, name: "battle_user_settings", kind: "message", T: () => BattleUserSettings },
            { no: 8, name: "video_show_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "game_info", kind: "message", T: () => RivalExtraInfo_GameInfo },
            { no: 10, name: "sign_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "recommend_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "from_server_invite_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RivalExtraInfo>): RivalExtraInfo {
        const message = { text: "", textType: 0, label: "", anchorLayer: 0, videoShowScore: 0n, signExtra: "", recommendInfo: "", fromServerInviteType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RivalExtraInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RivalExtraInfo): RivalExtraInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 text_type */ 2:
                    message.textType = reader.int32();
                    break;
                case /* string label */ 3:
                    message.label = reader.string();
                    break;
                case /* int32 anchor_layer */ 4:
                    message.anchorLayer = reader.int32();
                    break;
                case /* data.RivalExtraInfo.LinkerInfo linker_info */ 5:
                    message.linkerInfo = RivalExtraInfo_LinkerInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkerInfo);
                    break;
                case /* data.AnchorLinkmicUserSettings linkmic_user_settings */ 6:
                    message.linkmicUserSettings = AnchorLinkmicUserSettings.internalBinaryRead(reader, reader.uint32(), options, message.linkmicUserSettings);
                    break;
                case /* data.BattleUserSettings battle_user_settings */ 7:
                    message.battleUserSettings = BattleUserSettings.internalBinaryRead(reader, reader.uint32(), options, message.battleUserSettings);
                    break;
                case /* int64 video_show_score */ 8:
                    message.videoShowScore = reader.int64().toBigInt();
                    break;
                case /* data.RivalExtraInfo.GameInfo game_info */ 9:
                    message.gameInfo = RivalExtraInfo_GameInfo.internalBinaryRead(reader, reader.uint32(), options, message.gameInfo);
                    break;
                case /* string sign_extra */ 10:
                    message.signExtra = reader.string();
                    break;
                case /* string recommend_info */ 11:
                    message.recommendInfo = reader.string();
                    break;
                case /* int32 from_server_invite_type */ 12:
                    message.fromServerInviteType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RivalExtraInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 text_type = 2; */
        if (message.textType !== 0)
            writer.tag(2, WireType.Varint).int32(message.textType);
        /* string label = 3; */
        if (message.label !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.label);
        /* int32 anchor_layer = 4; */
        if (message.anchorLayer !== 0)
            writer.tag(4, WireType.Varint).int32(message.anchorLayer);
        /* data.RivalExtraInfo.LinkerInfo linker_info = 5; */
        if (message.linkerInfo)
            RivalExtraInfo_LinkerInfo.internalBinaryWrite(message.linkerInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.AnchorLinkmicUserSettings linkmic_user_settings = 6; */
        if (message.linkmicUserSettings)
            AnchorLinkmicUserSettings.internalBinaryWrite(message.linkmicUserSettings, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleUserSettings battle_user_settings = 7; */
        if (message.battleUserSettings)
            BattleUserSettings.internalBinaryWrite(message.battleUserSettings, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 video_show_score = 8; */
        if (message.videoShowScore !== 0n)
            writer.tag(8, WireType.Varint).int64(message.videoShowScore);
        /* data.RivalExtraInfo.GameInfo game_info = 9; */
        if (message.gameInfo)
            RivalExtraInfo_GameInfo.internalBinaryWrite(message.gameInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string sign_extra = 10; */
        if (message.signExtra !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.signExtra);
        /* string recommend_info = 11; */
        if (message.recommendInfo !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.recommendInfo);
        /* int32 from_server_invite_type = 12; */
        if (message.fromServerInviteType !== 0)
            writer.tag(12, WireType.Varint).int32(message.fromServerInviteType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RivalExtraInfo
 */
export const RivalExtraInfo = new RivalExtraInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RivalExtraInfo_LinkerInfo$Type extends MessageType<RivalExtraInfo_LinkerInfo> {
    constructor() {
        super("data.RivalExtraInfo.LinkerInfo", [
            { no: 1, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RivalExtraInfo_LinkerInfo_UserInfo }
        ]);
    }
    create(value?: PartialMessage<RivalExtraInfo_LinkerInfo>): RivalExtraInfo_LinkerInfo {
        const message = { linkedUsers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RivalExtraInfo_LinkerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RivalExtraInfo_LinkerInfo): RivalExtraInfo_LinkerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.RivalExtraInfo.LinkerInfo.UserInfo linked_users */ 1:
                    message.linkedUsers.push(RivalExtraInfo_LinkerInfo_UserInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RivalExtraInfo_LinkerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.RivalExtraInfo.LinkerInfo.UserInfo linked_users = 1; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            RivalExtraInfo_LinkerInfo_UserInfo.internalBinaryWrite(message.linkedUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RivalExtraInfo.LinkerInfo
 */
export const RivalExtraInfo_LinkerInfo = new RivalExtraInfo_LinkerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RivalExtraInfo_LinkerInfo_UserInfo$Type extends MessageType<RivalExtraInfo_LinkerInfo_UserInfo> {
    constructor() {
        super("data.RivalExtraInfo.LinkerInfo.UserInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar_thumb", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<RivalExtraInfo_LinkerInfo_UserInfo>): RivalExtraInfo_LinkerInfo_UserInfo {
        const message = { userId: 0n, nickName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RivalExtraInfo_LinkerInfo_UserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RivalExtraInfo_LinkerInfo_UserInfo): RivalExtraInfo_LinkerInfo_UserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string nick_name */ 2:
                    message.nickName = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 3:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RivalExtraInfo_LinkerInfo_UserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string nick_name = 2; */
        if (message.nickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickName);
        /* data.Image avatar_thumb = 3; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RivalExtraInfo.LinkerInfo.UserInfo
 */
export const RivalExtraInfo_LinkerInfo_UserInfo = new RivalExtraInfo_LinkerInfo_UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RivalExtraInfo_GameInfo$Type extends MessageType<RivalExtraInfo_GameInfo> {
    constructor() {
        super("data.RivalExtraInfo.GameInfo", [
            { no: 1, name: "game_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RivalExtraInfo_GameInfo>): RivalExtraInfo_GameInfo {
        const message = { gameText: "", gameName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RivalExtraInfo_GameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RivalExtraInfo_GameInfo): RivalExtraInfo_GameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_text */ 1:
                    message.gameText = reader.string();
                    break;
                case /* string game_name */ 2:
                    message.gameName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RivalExtraInfo_GameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_text = 1; */
        if (message.gameText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameText);
        /* string game_name = 2; */
        if (message.gameName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RivalExtraInfo.GameInfo
 */
export const RivalExtraInfo_GameInfo = new RivalExtraInfo_GameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiPKModeInfo$Type extends MessageType<MultiPKModeInfo> {
    constructor() {
        super("data.MultiPKModeInfo", [
            { no: 1, name: "mode_tab", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "switch_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "version_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "battle_config_setting", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MultiPKModeInfo>): MultiPKModeInfo {
        const message = { modeTab: 0, version: 0n, switchSource: 0, versionStr: "", battleConfigSetting: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiPKModeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiPKModeInfo): MultiPKModeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 mode_tab */ 1:
                    message.modeTab = reader.int32();
                    break;
                case /* int64 version */ 3:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* int32 switch_source */ 4:
                    message.switchSource = reader.int32();
                    break;
                case /* string version_str */ 5:
                    message.versionStr = reader.string();
                    break;
                case /* string battle_config_setting */ 6:
                    message.battleConfigSetting = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiPKModeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 mode_tab = 1; */
        if (message.modeTab !== 0)
            writer.tag(1, WireType.Varint).int32(message.modeTab);
        /* int64 version = 3; */
        if (message.version !== 0n)
            writer.tag(3, WireType.Varint).int64(message.version);
        /* int32 switch_source = 4; */
        if (message.switchSource !== 0)
            writer.tag(4, WireType.Varint).int32(message.switchSource);
        /* string version_str = 5; */
        if (message.versionStr !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.versionStr);
        /* string battle_config_setting = 6; */
        if (message.battleConfigSetting !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.battleConfigSetting);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiPKModeInfo
 */
export const MultiPKModeInfo = new MultiPKModeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInviteInfo$Type extends MessageType<GameInviteInfo> {
    constructor() {
        super("data.GameInviteInfo", [
            { no: 1, name: "invite_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameInviteInfo>): GameInviteInfo {
        const message = { inviteSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameInviteInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInviteInfo): GameInviteInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 invite_source */ 1:
                    message.inviteSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInviteInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 invite_source = 1; */
        if (message.inviteSource !== 0)
            writer.tag(1, WireType.Varint).int32(message.inviteSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameInviteInfo
 */
export const GameInviteInfo = new GameInviteInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicInfo$Type extends MessageType<LinkmicInfo> {
    constructor() {
        super("data.LinkmicInfo", [
            { no: 1, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "live_core_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicInfo>): LinkmicInfo {
        const message = { rtcExtInfo: "", liveCoreInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicInfo): LinkmicInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rtc_ext_info */ 1:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_info */ 2:
                    message.liveCoreInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rtc_ext_info = 1; */
        if (message.rtcExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_info = 2; */
        if (message.liveCoreInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.liveCoreInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicInfo
 */
export const LinkmicInfo = new LinkmicInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiChannelInfo$Type extends MessageType<MultiChannelInfo> {
    constructor() {
        super("data.MultiChannelInfo", [
            { no: 1, name: "use_multi_channel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MultiChannelInfo>): MultiChannelInfo {
        const message = { useMultiChannel: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiChannelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiChannelInfo): MultiChannelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool use_multi_channel */ 1:
                    message.useMultiChannel = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiChannelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool use_multi_channel = 1; */
        if (message.useMultiChannel !== false)
            writer.tag(1, WireType.Varint).bool(message.useMultiChannel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiChannelInfo
 */
export const MultiChannelInfo = new MultiChannelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkIconConfig$Type extends MessageType<LinkIconConfig> {
    constructor() {
        super("data.LinkIconConfig", [
            { no: 1, name: "yellow_dots", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkIconConfig>): LinkIconConfig {
        const message = { yellowDots: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkIconConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkIconConfig): LinkIconConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string yellow_dots */ 1:
                    message.yellowDots.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkIconConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string yellow_dots = 1; */
        for (let i = 0; i < message.yellowDots.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.yellowDots[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkIconConfig
 */
export const LinkIconConfig = new LinkIconConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserVIPInfo$Type extends MessageType<UserVIPInfo> {
    constructor() {
        super("data.UserVIPInfo", [
            { no: 1, name: "vip_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "vip_level_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "remaining_days", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "total_consume", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "target_consume", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UserVIPInfo>): UserVIPInfo {
        const message = { vipLevel: 0n, vipLevelName: "", status: 0, startTime: 0n, endTime: 0n, remainingDays: 0n, totalConsume: 0n, targetConsume: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserVIPInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserVIPInfo): UserVIPInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 vip_level */ 1:
                    message.vipLevel = reader.int64().toBigInt();
                    break;
                case /* string vip_level_name */ 2:
                    message.vipLevelName = reader.string();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* int64 start_time */ 4:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 5:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int64 remaining_days */ 6:
                    message.remainingDays = reader.int64().toBigInt();
                    break;
                case /* int64 total_consume */ 7:
                    message.totalConsume = reader.int64().toBigInt();
                    break;
                case /* int64 target_consume */ 8:
                    message.targetConsume = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserVIPInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 vip_level = 1; */
        if (message.vipLevel !== 0n)
            writer.tag(1, WireType.Varint).int64(message.vipLevel);
        /* string vip_level_name = 2; */
        if (message.vipLevelName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vipLevelName);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* int64 start_time = 4; */
        if (message.startTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 5; */
        if (message.endTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.endTime);
        /* int64 remaining_days = 6; */
        if (message.remainingDays !== 0n)
            writer.tag(6, WireType.Varint).int64(message.remainingDays);
        /* int64 total_consume = 7; */
        if (message.totalConsume !== 0n)
            writer.tag(7, WireType.Varint).int64(message.totalConsume);
        /* int64 target_consume = 8; */
        if (message.targetConsume !== 0n)
            writer.tag(8, WireType.Varint).int64(message.targetConsume);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.UserVIPInfo
 */
export const UserVIPInfo = new UserVIPInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GradeBuffInfo$Type extends MessageType<GradeBuffInfo> {
    constructor() {
        super("data.GradeBuffInfo", [
            { no: 1, name: "buff_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "buff_badge", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<GradeBuffInfo>): GradeBuffInfo {
        const message = { buffLevel: 0n, status: 0, endTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GradeBuffInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GradeBuffInfo): GradeBuffInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 buff_level */ 1:
                    message.buffLevel = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int64 end_time */ 3:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* data.Image buff_badge */ 5:
                    message.buffBadge = Image.internalBinaryRead(reader, reader.uint32(), options, message.buffBadge);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GradeBuffInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 buff_level = 1; */
        if (message.buffLevel !== 0n)
            writer.tag(1, WireType.Varint).int64(message.buffLevel);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int64 end_time = 3; */
        if (message.endTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTime);
        /* data.Image buff_badge = 5; */
        if (message.buffBadge)
            Image.internalBinaryWrite(message.buffBadge, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GradeBuffInfo
 */
export const GradeBuffInfo = new GradeBuffInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameExtra$Type extends MessageType<GameExtra> {
    constructor() {
        super("data.GameExtra", [
            { no: 1, name: "kind", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "gift_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "round_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "game_kind", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "chat", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "loader", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "reload", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GameExtra>): GameExtra {
        const message = { kind: 0, status: 0, gameId: 0n, giftLimit: 0, roundId: 0n, gameKind: 0, chat: 0n, loader: 0n, reload: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameExtra): GameExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 kind */ 1:
                    message.kind = reader.int32();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int64 game_id */ 3:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int32 gift_limit */ 4:
                    message.giftLimit = reader.int32();
                    break;
                case /* int64 round_id */ 5:
                    message.roundId = reader.int64().toBigInt();
                    break;
                case /* int32 game_kind */ 6:
                    message.gameKind = reader.int32();
                    break;
                case /* int64 chat */ 7:
                    message.chat = reader.int64().toBigInt();
                    break;
                case /* int64 loader */ 8:
                    message.loader = reader.int64().toBigInt();
                    break;
                case /* int64 reload */ 9:
                    message.reload = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 kind = 1; */
        if (message.kind !== 0)
            writer.tag(1, WireType.Varint).int32(message.kind);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int64 game_id = 3; */
        if (message.gameId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.gameId);
        /* int32 gift_limit = 4; */
        if (message.giftLimit !== 0)
            writer.tag(4, WireType.Varint).int32(message.giftLimit);
        /* int64 round_id = 5; */
        if (message.roundId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.roundId);
        /* int32 game_kind = 6; */
        if (message.gameKind !== 0)
            writer.tag(6, WireType.Varint).int32(message.gameKind);
        /* int64 chat = 7; */
        if (message.chat !== 0n)
            writer.tag(7, WireType.Varint).int64(message.chat);
        /* int64 loader = 8; */
        if (message.loader !== 0n)
            writer.tag(8, WireType.Varint).int64(message.loader);
        /* int64 reload = 9; */
        if (message.reload !== 0n)
            writer.tag(9, WireType.Varint).int64(message.reload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameExtra
 */
export const GameExtra = new GameExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchRoomInfo$Type extends MessageType<MatchRoomInfo> {
    constructor() {
        super("data.MatchRoomInfo", [
            { no: 1, name: "match_tab_frame", kind: "message", T: () => MatchTabFrame },
            { no: 2, name: "match_title", kind: "message", T: () => MatchTitle },
            { no: 3, name: "match_data", kind: "message", T: () => ToutiaoMatchData },
            { no: 5, name: "match_hash_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "background_image_url_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 7, name: "share_icon", kind: "message", T: () => Image },
            { no: 8, name: "im_info", kind: "message", T: () => MatchRoomImInfo },
            { no: 9, name: "match_share_background", kind: "message", T: () => MatchShareBackground },
            { no: 10, name: "theme_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "match_live_share_background", kind: "message", T: () => MatchShareBackground },
            { no: 12, name: "match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MatchRoomInfo>): MatchRoomInfo {
        const message = { matchHashTag: "", backgroundImageUrlList: [], themeId: "", matchId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchRoomInfo): MatchRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MatchTabFrame match_tab_frame */ 1:
                    message.matchTabFrame = MatchTabFrame.internalBinaryRead(reader, reader.uint32(), options, message.matchTabFrame);
                    break;
                case /* data.MatchTitle match_title */ 2:
                    message.matchTitle = MatchTitle.internalBinaryRead(reader, reader.uint32(), options, message.matchTitle);
                    break;
                case /* data.ToutiaoMatchData match_data */ 3:
                    message.matchData = ToutiaoMatchData.internalBinaryRead(reader, reader.uint32(), options, message.matchData);
                    break;
                case /* string match_hash_tag */ 5:
                    message.matchHashTag = reader.string();
                    break;
                case /* repeated data.Image background_image_url_list */ 6:
                    message.backgroundImageUrlList.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image share_icon */ 7:
                    message.shareIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.shareIcon);
                    break;
                case /* data.MatchRoomImInfo im_info */ 8:
                    message.imInfo = MatchRoomImInfo.internalBinaryRead(reader, reader.uint32(), options, message.imInfo);
                    break;
                case /* data.MatchShareBackground match_share_background */ 9:
                    message.matchShareBackground = MatchShareBackground.internalBinaryRead(reader, reader.uint32(), options, message.matchShareBackground);
                    break;
                case /* string theme_id */ 10:
                    message.themeId = reader.string();
                    break;
                case /* data.MatchShareBackground match_live_share_background */ 11:
                    message.matchLiveShareBackground = MatchShareBackground.internalBinaryRead(reader, reader.uint32(), options, message.matchLiveShareBackground);
                    break;
                case /* int64 match_id */ 12:
                    message.matchId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MatchTabFrame match_tab_frame = 1; */
        if (message.matchTabFrame)
            MatchTabFrame.internalBinaryWrite(message.matchTabFrame, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.MatchTitle match_title = 2; */
        if (message.matchTitle)
            MatchTitle.internalBinaryWrite(message.matchTitle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.ToutiaoMatchData match_data = 3; */
        if (message.matchData)
            ToutiaoMatchData.internalBinaryWrite(message.matchData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string match_hash_tag = 5; */
        if (message.matchHashTag !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.matchHashTag);
        /* repeated data.Image background_image_url_list = 6; */
        for (let i = 0; i < message.backgroundImageUrlList.length; i++)
            Image.internalBinaryWrite(message.backgroundImageUrlList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image share_icon = 7; */
        if (message.shareIcon)
            Image.internalBinaryWrite(message.shareIcon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.MatchRoomImInfo im_info = 8; */
        if (message.imInfo)
            MatchRoomImInfo.internalBinaryWrite(message.imInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.MatchShareBackground match_share_background = 9; */
        if (message.matchShareBackground)
            MatchShareBackground.internalBinaryWrite(message.matchShareBackground, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string theme_id = 10; */
        if (message.themeId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.themeId);
        /* data.MatchShareBackground match_live_share_background = 11; */
        if (message.matchLiveShareBackground)
            MatchShareBackground.internalBinaryWrite(message.matchLiveShareBackground, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 match_id = 12; */
        if (message.matchId !== 0n)
            writer.tag(12, WireType.Varint).int64(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchRoomInfo
 */
export const MatchRoomInfo = new MatchRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MainCameraMatchInfo$Type extends MessageType<MainCameraMatchInfo> {
    constructor() {
        super("data.MainCameraMatchInfo", [
            { no: 1, name: "match_data", kind: "message", T: () => ToutiaoMatchData },
            { no: 2, name: "match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "event_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "content_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "league_info", kind: "message", T: () => LeagueInfo },
            { no: 6, name: "is_display_score_type", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "hide_tab_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "match_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "content_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MainCameraMatchInfo>): MainCameraMatchInfo {
        const message = { matchId: 0n, eventIds: [], contentId: 0n, isDisplayScoreType: false, hideTabIds: [], matchIdStr: "", contentIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MainCameraMatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MainCameraMatchInfo): MainCameraMatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ToutiaoMatchData match_data */ 1:
                    message.matchData = ToutiaoMatchData.internalBinaryRead(reader, reader.uint32(), options, message.matchData);
                    break;
                case /* int64 match_id */ 2:
                    message.matchId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 event_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.eventIds.push(reader.int64().toBigInt());
                    else
                        message.eventIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 content_id */ 4:
                    message.contentId = reader.int64().toBigInt();
                    break;
                case /* data.LeagueInfo league_info */ 5:
                    message.leagueInfo = LeagueInfo.internalBinaryRead(reader, reader.uint32(), options, message.leagueInfo);
                    break;
                case /* bool is_display_score_type */ 6:
                    message.isDisplayScoreType = reader.bool();
                    break;
                case /* repeated int64 hide_tab_ids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hideTabIds.push(reader.int64().toBigInt());
                    else
                        message.hideTabIds.push(reader.int64().toBigInt());
                    break;
                case /* string match_id_str */ 8:
                    message.matchIdStr = reader.string();
                    break;
                case /* string content_id_str */ 9:
                    message.contentIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MainCameraMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ToutiaoMatchData match_data = 1; */
        if (message.matchData)
            ToutiaoMatchData.internalBinaryWrite(message.matchData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 match_id = 2; */
        if (message.matchId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.matchId);
        /* repeated int64 event_ids = 3; */
        if (message.eventIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.eventIds.length; i++)
                writer.int64(message.eventIds[i]);
            writer.join();
        }
        /* int64 content_id = 4; */
        if (message.contentId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.contentId);
        /* data.LeagueInfo league_info = 5; */
        if (message.leagueInfo)
            LeagueInfo.internalBinaryWrite(message.leagueInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool is_display_score_type = 6; */
        if (message.isDisplayScoreType !== false)
            writer.tag(6, WireType.Varint).bool(message.isDisplayScoreType);
        /* repeated int64 hide_tab_ids = 7; */
        if (message.hideTabIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hideTabIds.length; i++)
                writer.int64(message.hideTabIds[i]);
            writer.join();
        }
        /* string match_id_str = 8; */
        if (message.matchIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.matchIdStr);
        /* string content_id_str = 9; */
        if (message.contentIdStr !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.contentIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MainCameraMatchInfo
 */
export const MainCameraMatchInfo = new MainCameraMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeagueInfo$Type extends MessageType<LeagueInfo> {
    constructor() {
        super("data.LeagueInfo", [
            { no: 1, name: "league_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cnn_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "enn_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "season", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LeagueInfo>): LeagueInfo {
        const message = { leagueId: 0n, cnnName: "", ennName: "", season: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeagueInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeagueInfo): LeagueInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 league_id */ 1:
                    message.leagueId = reader.int64().toBigInt();
                    break;
                case /* string cnn_name */ 2:
                    message.cnnName = reader.string();
                    break;
                case /* string enn_name */ 3:
                    message.ennName = reader.string();
                    break;
                case /* string season */ 4:
                    message.season = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeagueInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 league_id = 1; */
        if (message.leagueId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.leagueId);
        /* string cnn_name = 2; */
        if (message.cnnName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cnnName);
        /* string enn_name = 3; */
        if (message.ennName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ennName);
        /* string season = 4; */
        if (message.season !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.season);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LeagueInfo
 */
export const LeagueInfo = new LeagueInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchRoomImInfo$Type extends MessageType<MatchRoomImInfo> {
    constructor() {
        super("data.MatchRoomImInfo", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchRoomImInfo>): MatchRoomImInfo {
        const message = { title: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchRoomImInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchRoomImInfo): MatchRoomImInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchRoomImInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchRoomImInfo
 */
export const MatchRoomImInfo = new MatchRoomImInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchTabFrame$Type extends MessageType<MatchTabFrame> {
    constructor() {
        super("data.MatchTabFrame", [
            { no: 1, name: "tabs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchTab },
            { no: 2, name: "replay_tabs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchTab },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchTabFrame>): MatchTabFrame {
        const message = { tabs: [], replayTabs: [], color: "", backgroundColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTabFrame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTabFrame): MatchTabFrame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.MatchTab tabs */ 1:
                    message.tabs.push(MatchTab.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.MatchTab replay_tabs */ 2:
                    message.replayTabs.push(MatchTab.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* string background_color */ 4:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTabFrame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.MatchTab tabs = 1; */
        for (let i = 0; i < message.tabs.length; i++)
            MatchTab.internalBinaryWrite(message.tabs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.MatchTab replay_tabs = 2; */
        for (let i = 0; i < message.replayTabs.length; i++)
            MatchTab.internalBinaryWrite(message.replayTabs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* string background_color = 4; */
        if (message.backgroundColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchTabFrame
 */
export const MatchTabFrame = new MatchTabFrame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientComponent$Type extends MessageType<ClientComponent> {
    constructor() {
        super("data.ClientComponent", [
            { no: 3, name: "is_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "template_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ClientComponent>): ClientComponent {
        const message = { isOpen: false, templateId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientComponent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientComponent): ClientComponent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                case /* int64 template_id */ 4:
                    message.templateId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientComponent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_open = 3; */
        if (message.isOpen !== false)
            writer.tag(3, WireType.Varint).bool(message.isOpen);
        /* int64 template_id = 4; */
        if (message.templateId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.templateId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ClientComponent
 */
export const ClientComponent = new ClientComponent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientComponentInfo$Type extends MessageType<ClientComponentInfo> {
    constructor() {
        super("data.ClientComponentInfo", [
            { no: 1, name: "container_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "function_detail", kind: "message", T: () => ClientComponentFunctionInfo }
        ]);
    }
    create(value?: PartialMessage<ClientComponentInfo>): ClientComponentInfo {
        const message = { containerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientComponentInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientComponentInfo): ClientComponentInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string container_id */ 1:
                    message.containerId = reader.string();
                    break;
                case /* data.ClientComponentFunctionInfo function_detail */ 2:
                    message.functionDetail = ClientComponentFunctionInfo.internalBinaryRead(reader, reader.uint32(), options, message.functionDetail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientComponentInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string container_id = 1; */
        if (message.containerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.containerId);
        /* data.ClientComponentFunctionInfo function_detail = 2; */
        if (message.functionDetail)
            ClientComponentFunctionInfo.internalBinaryWrite(message.functionDetail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ClientComponentInfo
 */
export const ClientComponentInfo = new ClientComponentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientComponentFunctionInfo$Type extends MessageType<ClientComponentFunctionInfo> {
    constructor() {
        super("data.ClientComponentFunctionInfo", [
            { no: 1, name: "function_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientComponentFunctionInfo>): ClientComponentFunctionInfo {
        const message = { functionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientComponentFunctionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientComponentFunctionInfo): ClientComponentFunctionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string function_id */ 1:
                    message.functionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientComponentFunctionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string function_id = 1; */
        if (message.functionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.functionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ClientComponentFunctionInfo
 */
export const ClientComponentFunctionInfo = new ClientComponentFunctionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Room$Type extends MessageType<Room> {
    constructor() {
        super("data.Room", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "owner_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "user_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "linkmic_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "finish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "extra", kind: "message", T: () => RoomExtra },
            { no: 11, name: "dynamic_cover_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "last_ping_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "live_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "stream_provider", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "os_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "client_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "with_linkmic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "enable_room_perspective", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "cover", kind: "message", T: () => Image },
            { no: 21, name: "dynamic_cover", kind: "message", T: () => Image },
            { no: 22, name: "dynamic_cover_low", kind: "message", T: () => Image },
            { no: 23, name: "share_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "anchor_share_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "user_share_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "stream_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 27, name: "stream_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "stream_url", kind: "message", T: () => StreamUrl },
            { no: 29, name: "mosaic_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "mosaic_tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "cell_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 32, name: "link_mic", kind: "message", T: () => LinkMic },
            { no: 33, name: "luckymoney_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 34, name: "deco_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Decoration },
            { no: 35, name: "top_fans", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TopFan },
            { no: 36, name: "stats", kind: "message", T: () => RoomStats },
            { no: 37, name: "sun_daily_icon_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 38, name: "distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 39, name: "distance_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 40, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "real_distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 42, name: "feed_room_label", kind: "message", T: () => Image },
            { no: 43, name: "common_label_list", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 44, name: "living_room_attrs", kind: "message", T: () => RoomUserAttr },
            { no: 45, name: "admin_user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 46, name: "owner", kind: "message", T: () => User },
            { no: 47, name: "private_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 48, name: "has_commerce_goods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 49, name: "live_type_normal", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 50, name: "live_type_linkmic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 51, name: "live_type_audio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 52, name: "live_type_third_party", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 53, name: "live_type_screenshot", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 54, name: "live_type_sandbox", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 55, name: "live_type_official", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 59, name: "group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 60, name: "orientation", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 61, name: "category", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 62, name: "tags", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 63, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 64, name: "popularity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 65, name: "popularity_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 66, name: "fcdn_appid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 68, name: "sell_goods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 69, name: "web_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 70, name: "vertical_cover_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 71, name: "base_category", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 72, name: "room_auth", kind: "message", T: () => RoomAuthStatus },
            { no: 73, name: "room_tabs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomTab },
            { no: 74, name: "introduction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 75, name: "burst", kind: "message", T: () => BurstInfo },
            { no: 76, name: "health_score", kind: "message", T: () => RoomHealthScoreInfo },
            { no: 77, name: "is_replay", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 78, name: "vid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 79, name: "group_source", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 80, name: "lottery_finish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 81, name: "activity_tag", kind: "message", T: () => RoomActivityTag },
            { no: 82, name: "portrait_cover", kind: "message", T: () => Image },
            { no: 83, name: "background", kind: "message", T: () => Image },
            { no: 84, name: "layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 85, name: "wait_copy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 86, name: "guide_button", kind: "message", T: () => Image },
            { no: 87, name: "preview_copy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 88, name: "is_show_inquiry_ball", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 89, name: "match_info", kind: "message", T: () => MatchInfo },
            { no: 90, name: "use_filter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 91, name: "gift_msg_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 92, name: "distance_km", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 93, name: "finish_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 94, name: "official_room_info", kind: "message", T: () => OfficialRoomInfo },
            { no: 95, name: "is_show_user_card_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 96, name: "video_feed_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 97, name: "forum_extra_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 98, name: "fansclub_msg_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 99, name: "follow_msg_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 100, name: "share_msg_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 101, name: "room_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 102, name: "short_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 104, name: "book_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 105, name: "book_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 106, name: "room_audit_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 107, name: "live_distribution", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 108, name: "tv", kind: "message", T: () => TVStation },
            { no: 109, name: "replay", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 110, name: "challenge_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 111, name: "like_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 112, name: "search_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 113, name: "anchor_scheduled_time_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 114, name: "hot_sentence_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 115, name: "replay_location", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 116, name: "stream_close_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 117, name: "content_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 118, name: "content_label", kind: "message", T: () => Image },
            { no: 119, name: "operation_label", kind: "message", T: () => Image },
            { no: 120, name: "anchor_tab_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 121, name: "game_extra", kind: "message", T: () => GameExtra },
            { no: 122, name: "official_channel", kind: "message", T: () => OfficialChannelInfo },
            { no: 123, name: "stamps", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 124, name: "comment_box", kind: "message", T: () => CommentBox },
            { no: 125, name: "business_live", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 126, name: "with_ktv", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 127, name: "with_draw_something", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 128, name: "webcast_comment_tcs", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 129, name: "room_tag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 131, name: "finish_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 132, name: "room_cart", kind: "message", T: () => RoomCart },
            { no: 133, name: "scroll_config", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 134, name: "relation_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 135, name: "owner_device_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 136, name: "auto_cover", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 137, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 138, name: "webcast_sdk_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 139, name: "comment_name_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 140, name: "room_create_ab_param", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 141, name: "pre_enter_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 142, name: "ranklist_audience_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 143, name: "preview_flow_tag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 144, name: "preview_tag_url", kind: "message", T: () => Image },
            { no: 145, name: "quiz_extra", kind: "message", T: () => QuizExtra },
            { no: 147, name: "linker_users", kind: "message", T: () => LinkerUsers },
            { no: 148, name: "linkmic_display_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 149, name: "AudioRoomBGImage", kind: "message", jsonName: "AudioRoomBGImage", T: () => AudioBGData },
            { no: 150, name: "city_top_linker_users", kind: "message", T: () => LinkerUsers },
            { no: 151, name: "border_info", kind: "message", T: () => BorderInfo },
            { no: 152, name: "city_top_background", kind: "message", T: () => Image },
            { no: 153, name: "city_top_distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 154, name: "live_room_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 155, name: "bonus", kind: "message", T: () => Bonus },
            { no: 156, name: "highlight", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 157, name: "is_official_channel_room", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 159, name: "fans_group_admin_user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 160, name: "replay_info", kind: "message", T: () => RoomReplayInfo },
            { no: 161, name: "official_channel_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 162, name: "live_platform_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 163, name: "acquaintance_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 164, name: "comment_wall_info", kind: "message", T: () => CommentWallInfo },
            { no: 165, name: "comment_wall_position", kind: "message", T: () => CommentWallPosition },
            { no: 166, name: "live_type_vs_live", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 167, name: "live_type_vs_premiere", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 168, name: "episode_extra", kind: "message", T: () => EpisodeExtraInfo },
            { no: 169, name: "vs_roles", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 170, name: "item_explicit_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 171, name: "short_touch_auth", kind: "message", T: () => ShortTouchAuth },
            { no: 172, name: "sofa_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 173, name: "announcement_info", kind: "message", T: () => AnnouncementInfo },
            { no: 174, name: "is_need_check_list", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 175, name: "live_status_info", kind: "message", T: () => LiveStatusInfo },
            { no: 176, name: "im_info", kind: "message", T: () => RoomIMInfo },
            { no: 177, name: "assist_label", kind: "message", T: () => LabelInfo },
            { no: 179, name: "vertical_type_info", kind: "message", T: () => VerticalTypeInfo },
            { no: 180, name: "filter_words", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilterWord },
            { no: 181, name: "dynamic_label", kind: "message", T: () => LabelInfo },
            { no: 182, name: "linker_detail", kind: "message", T: () => LinkerDetail },
            { no: 183, name: "visibility_range", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 184, name: "corner_mark_reach", kind: "message", T: () => CornerMarkReach },
            { no: 185, name: "preview_expose", kind: "message", T: () => PreviewExposeData },
            { no: 186, name: "welfare_project_info", kind: "message", T: () => WelfareProjectInfo },
            { no: 187, name: "game_room_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 188, name: "paid_live_data", kind: "message", T: () => PaidLiveData },
            { no: 189, name: "easter_egg_data", kind: "message", T: () => EasterEggData },
            { no: 190, name: "title_recommend", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 191, name: "danmaku_detail", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 192, name: "avatar_live_info", kind: "message", T: () => AvatarLiveInfo },
            { no: 193, name: "circle_info", kind: "message", T: () => CircleInfo },
            { no: 194, name: "has_promotion_games", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 195, name: "screenshot_sover", kind: "message", T: () => Image },
            { no: 196, name: "appearance", kind: "message", T: () => Appearance },
            { no: 197, name: "ecom_data", kind: "message", T: () => EcomData },
            { no: 198, name: "industry_service_info", kind: "message", T: () => IndustryServiceInfo },
            { no: 199, name: "relevant_recommendation", kind: "message", T: () => RelevantRecommendation },
            { no: 200, name: "scene_type_info", kind: "message", T: () => RoomSpecificSceneTypeInfo },
            { no: 201, name: "game_cp", kind: "message", T: () => GameCPData },
            { no: 202, name: "game_play", kind: "message", T: () => GamePlayData },
            { no: 203, name: "union_live_info", kind: "message", T: () => UnionLiveInfo },
            { no: 204, name: "beautify_info", kind: "message", T: () => BeautifyInfo },
            { no: 205, name: "toolbar_data", kind: "message", T: () => ToolBarData },
            { no: 206, name: "anchor_tab_label", kind: "message", T: () => AnchorTabLabel },
            { no: 207, name: "life_groupon_info", kind: "message", T: () => LifeGrouponInfo },
            { no: 208, name: "vip_data", kind: "message", T: () => VipData },
            { no: 209, name: "toutiao_cover_recommend_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 210, name: "toutiao_title_recommend_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 211, name: "upper_right_widget_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpperRightWidgetData },
            { no: 212, name: "live_feedback_card", kind: "message", T: () => FeedbackCard },
            { no: 213, name: "assist_label_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LabelInfo },
            { no: 214, name: "desire_info", kind: "message", T: () => DesireInfo },
            { no: 215, name: "hot_room_info", kind: "message", T: () => HotRoomInfo },
            { no: 216, name: "with_aggregate_column", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 217, name: "cast_screen_data", kind: "message", T: () => CastScreenData },
            { no: 218, name: "official_channel_extra", kind: "message", T: () => OfficialChannelExtraInfo },
            { no: 219, name: "auth_city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 220, name: "activity_live_recommend_config", kind: "message", T: () => ActivityLiveRecommendConfig },
            { no: 221, name: "room_channel", kind: "message", T: () => RoomChannelData },
            { no: 222, name: "pack_meta", kind: "message", T: () => PackMetaInfo },
            { no: 223, name: "activity_data", kind: "message", T: () => ActivityData },
            { no: 224, name: "like_display_config", kind: "message", T: () => LikeDisplayConfig },
            { no: 225, name: "room_view_stats", kind: "message", T: () => RoomViewStats },
            { no: 226, name: "match", kind: "message", T: () => MatchRoomData },
            { no: 227, name: "commentary_room_info", kind: "message", T: () => CommentaryRoomInfo },
            { no: 228, name: "redpacket_audience_auth", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 229, name: "match_chat_config", kind: "message", T: () => MatchChatConfig },
            { no: 230, name: "vs_main_replay_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 231, name: "screen_capture_sharing_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 232, name: "share_resource", kind: "message", T: () => ShareResource },
            { no: 233, name: "sharing_music_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 234, name: "public_screen_bottom_info", kind: "message", T: () => PublicScreenBottomInfo },
            { no: 235, name: "push_stream_hkt", kind: "message", T: () => StreamUrl },
            { no: 300, name: "basis", kind: "message", T: () => RoomBasisData },
            { no: 301, name: "interact", kind: "message", T: () => RoomInteractData },
            { no: 303, name: "req_user", kind: "message", T: () => RoomReqUserData },
            { no: 304, name: "anchor_data", kind: "message", T: () => RoomAnchorData },
            { no: 305, name: "others", kind: "message", T: () => RoomOthersData },
            { no: 306, name: "pico_info", kind: "message", T: () => PicoInfo },
            { no: 307, name: "game_data", kind: "message", T: () => RoomGameData },
            { no: 308, name: "feed_data", kind: "message", T: () => RoomFeedData },
            { no: 309, name: "open_content_data", kind: "message", T: () => OpenContentData },
            { no: 310, name: "client_component_data", kind: "message", T: () => ClientComponent },
            { no: 311, name: "platform_components_data", kind: "message", T: () => RoomPlatformComponentsData }
        ]);
    }
    create(value?: PartialMessage<Room>): Room {
        const message = { id: 0n, idStr: "", status: 0n, ownerUserId: 0n, title: "", userCount: 0n, createTime: 0n, linkmicLayout: 0n, finishTime: 0n, dynamicCoverUri: "", lastPingTime: 0n, liveId: 0n, streamProvider: 0n, osType: 0n, clientVersion: 0n, withLinkmic: false, enableRoomPerspective: false, shareUrl: "", anchorShareText: "", userShareText: "", streamId: 0n, streamIdStr: "", mosaicStatus: 0n, mosaicTip: "", cellStyle: 0n, luckymoneyNum: 0n, decoList: [], topFans: [], sunDailyIconContent: "", distance: "", distanceCity: "", location: "", realDistance: "", commonLabelList: "", adminUserIds: [], privateInfo: "", hasCommerceGoods: false, liveTypeNormal: false, liveTypeLinkmic: false, liveTypeAudio: false, liveTypeThirdParty: false, liveTypeScreenshot: false, liveTypeSandbox: false, liveTypeOfficial: false, groupId: 0n, orientation: 0n, category: 0n, tags: [], startTime: 0n, popularity: 0n, popularityStr: "", fcdnAppid: 0n, sellGoods: false, webCount: 0n, verticalCoverUri: "", baseCategory: 0n, roomTabs: [], introduction: "", isReplay: false, vid: "", groupSource: 0n, lotteryFinishTime: 0n, layout: 0n, waitCopy: "", previewCopy: "", isShowInquiryBall: false, useFilter: false, giftMsgStyle: 0n, distanceKm: "", finishUrl: "", isShowUserCardSwitch: false, videoFeedTag: "", forumExtraData: "", fansclubMsgStyle: 0n, followMsgStyle: 0n, shareMsgStyle: 0n, roomLayout: 0n, shortTitle: "", bookTime: 0n, bookEndTime: 0n, roomAuditStatus: 0n, liveDistribution: [], replay: false, challengeInfo: "", likeCount: 0n, searchId: 0n, anchorScheduledTimeText: "", hotSentenceInfo: "", replayLocation: 0n, streamCloseTime: 0n, contentTag: "", anchorTabType: 0, stamps: "", businessLive: 0, withKtv: false, withDrawSomething: false, webcastCommentTcs: 0n, roomTag: 0n, finishReason: 0, scrollConfig: "", relationTag: "", ownerDeviceId: 0n, autoCover: 0n, appId: 0n, webcastSdkVersion: 0n, commentNameMode: 0n, roomCreateAbParam: "", preEnterTime: 0n, ranklistAudienceType: 0n, previewFlowTag: 0n, linkmicDisplayType: 0n, cityTopDistance: "", liveRoomMode: 0n, highlight: false, isOfficialChannelRoom: false, fansGroupAdminUserIds: [], officialChannelUid: 0n, livePlatformSource: "", acquaintanceStatus: 0n, liveTypeVsLive: false, liveTypeVsPremiere: false, vsRoles: [], itemExplicitInfo: "", sofaLayout: 0n, isNeedCheckList: false, filterWords: [], visibilityRange: 0, gameRoomType: 0, titleRecommend: false, danmakuDetail: 0n, hasPromotionGames: 0n, toutiaoCoverRecommendLevel: 0n, toutiaoTitleRecommendLevel: 0n, upperRightWidgetDataList: [], assistLabelList: [], withAggregateColumn: false, authCity: "", redpacketAudienceAuth: 0n, vsMainReplayId: 0n, screenCaptureSharingTitle: "", sharingMusicIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Room>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Room): Room {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 2:
                    message.idStr = reader.string();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* int64 owner_user_id */ 4:
                    message.ownerUserId = reader.int64().toBigInt();
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* int64 user_count */ 6:
                    message.userCount = reader.int64().toBigInt();
                    break;
                case /* int64 create_time */ 7:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int64 linkmic_layout */ 8:
                    message.linkmicLayout = reader.int64().toBigInt();
                    break;
                case /* int64 finish_time */ 9:
                    message.finishTime = reader.int64().toBigInt();
                    break;
                case /* data.RoomExtra extra */ 10:
                    message.extra = RoomExtra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                case /* string dynamic_cover_uri */ 11:
                    message.dynamicCoverUri = reader.string();
                    break;
                case /* int64 last_ping_time */ 13:
                    message.lastPingTime = reader.int64().toBigInt();
                    break;
                case /* int64 live_id */ 14:
                    message.liveId = reader.int64().toBigInt();
                    break;
                case /* int64 stream_provider */ 15:
                    message.streamProvider = reader.int64().toBigInt();
                    break;
                case /* int64 os_type */ 16:
                    message.osType = reader.int64().toBigInt();
                    break;
                case /* int64 client_version */ 17:
                    message.clientVersion = reader.int64().toBigInt();
                    break;
                case /* bool with_linkmic */ 18:
                    message.withLinkmic = reader.bool();
                    break;
                case /* bool enable_room_perspective */ 19:
                    message.enableRoomPerspective = reader.bool();
                    break;
                case /* data.Image cover */ 20:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                case /* data.Image dynamic_cover */ 21:
                    message.dynamicCover = Image.internalBinaryRead(reader, reader.uint32(), options, message.dynamicCover);
                    break;
                case /* data.Image dynamic_cover_low */ 22:
                    message.dynamicCoverLow = Image.internalBinaryRead(reader, reader.uint32(), options, message.dynamicCoverLow);
                    break;
                case /* string share_url */ 23:
                    message.shareUrl = reader.string();
                    break;
                case /* string anchor_share_text */ 24:
                    message.anchorShareText = reader.string();
                    break;
                case /* string user_share_text */ 25:
                    message.userShareText = reader.string();
                    break;
                case /* int64 stream_id */ 26:
                    message.streamId = reader.int64().toBigInt();
                    break;
                case /* string stream_id_str */ 27:
                    message.streamIdStr = reader.string();
                    break;
                case /* data.StreamUrl stream_url */ 28:
                    message.streamUrl = StreamUrl.internalBinaryRead(reader, reader.uint32(), options, message.streamUrl);
                    break;
                case /* int64 mosaic_status */ 29:
                    message.mosaicStatus = reader.int64().toBigInt();
                    break;
                case /* string mosaic_tip */ 30:
                    message.mosaicTip = reader.string();
                    break;
                case /* int64 cell_style */ 31:
                    message.cellStyle = reader.int64().toBigInt();
                    break;
                case /* data.LinkMic link_mic */ 32:
                    message.linkMic = LinkMic.internalBinaryRead(reader, reader.uint32(), options, message.linkMic);
                    break;
                case /* int64 luckymoney_num */ 33:
                    message.luckymoneyNum = reader.int64().toBigInt();
                    break;
                case /* repeated data.Decoration deco_list */ 34:
                    message.decoList.push(Decoration.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.TopFan top_fans */ 35:
                    message.topFans.push(TopFan.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.RoomStats stats */ 36:
                    message.stats = RoomStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* string sun_daily_icon_content */ 37:
                    message.sunDailyIconContent = reader.string();
                    break;
                case /* string distance */ 38:
                    message.distance = reader.string();
                    break;
                case /* string distance_city */ 39:
                    message.distanceCity = reader.string();
                    break;
                case /* string location */ 40:
                    message.location = reader.string();
                    break;
                case /* string real_distance */ 41:
                    message.realDistance = reader.string();
                    break;
                case /* data.Image feed_room_label */ 42:
                    message.feedRoomLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.feedRoomLabel);
                    break;
                case /* string common_label_list */ 43:
                    message.commonLabelList = reader.string();
                    break;
                case /* data.RoomUserAttr living_room_attrs */ 44:
                    message.livingRoomAttrs = RoomUserAttr.internalBinaryRead(reader, reader.uint32(), options, message.livingRoomAttrs);
                    break;
                case /* repeated int64 admin_user_ids */ 45:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.adminUserIds.push(reader.int64().toBigInt());
                    else
                        message.adminUserIds.push(reader.int64().toBigInt());
                    break;
                case /* data.User owner */ 46:
                    message.owner = User.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                case /* string private_info */ 47:
                    message.privateInfo = reader.string();
                    break;
                case /* bool has_commerce_goods */ 48:
                    message.hasCommerceGoods = reader.bool();
                    break;
                case /* bool live_type_normal */ 49:
                    message.liveTypeNormal = reader.bool();
                    break;
                case /* bool live_type_linkmic */ 50:
                    message.liveTypeLinkmic = reader.bool();
                    break;
                case /* bool live_type_audio */ 51:
                    message.liveTypeAudio = reader.bool();
                    break;
                case /* bool live_type_third_party */ 52:
                    message.liveTypeThirdParty = reader.bool();
                    break;
                case /* bool live_type_screenshot */ 53:
                    message.liveTypeScreenshot = reader.bool();
                    break;
                case /* bool live_type_sandbox */ 54:
                    message.liveTypeSandbox = reader.bool();
                    break;
                case /* bool live_type_official */ 55:
                    message.liveTypeOfficial = reader.bool();
                    break;
                case /* int64 group_id */ 59:
                    message.groupId = reader.int64().toBigInt();
                    break;
                case /* int64 orientation */ 60:
                    message.orientation = reader.int64().toBigInt();
                    break;
                case /* int64 category */ 61:
                    message.category = reader.int64().toBigInt();
                    break;
                case /* repeated int64 tags */ 62:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tags.push(reader.int64().toBigInt());
                    else
                        message.tags.push(reader.int64().toBigInt());
                    break;
                case /* int64 start_time */ 63:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 popularity */ 64:
                    message.popularity = reader.int64().toBigInt();
                    break;
                case /* string popularity_str */ 65:
                    message.popularityStr = reader.string();
                    break;
                case /* int64 fcdn_appid */ 66:
                    message.fcdnAppid = reader.int64().toBigInt();
                    break;
                case /* bool sell_goods */ 68:
                    message.sellGoods = reader.bool();
                    break;
                case /* int64 web_count */ 69:
                    message.webCount = reader.int64().toBigInt();
                    break;
                case /* string vertical_cover_uri */ 70:
                    message.verticalCoverUri = reader.string();
                    break;
                case /* int64 base_category */ 71:
                    message.baseCategory = reader.int64().toBigInt();
                    break;
                case /* data.RoomAuthStatus room_auth */ 72:
                    message.roomAuth = RoomAuthStatus.internalBinaryRead(reader, reader.uint32(), options, message.roomAuth);
                    break;
                case /* repeated data.RoomTab room_tabs */ 73:
                    message.roomTabs.push(RoomTab.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string introduction */ 74:
                    message.introduction = reader.string();
                    break;
                case /* data.BurstInfo burst */ 75:
                    message.burst = BurstInfo.internalBinaryRead(reader, reader.uint32(), options, message.burst);
                    break;
                case /* data.RoomHealthScoreInfo health_score */ 76:
                    message.healthScore = RoomHealthScoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.healthScore);
                    break;
                case /* bool is_replay */ 77:
                    message.isReplay = reader.bool();
                    break;
                case /* string vid */ 78:
                    message.vid = reader.string();
                    break;
                case /* int64 group_source */ 79:
                    message.groupSource = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_finish_time */ 80:
                    message.lotteryFinishTime = reader.int64().toBigInt();
                    break;
                case /* data.RoomActivityTag activity_tag */ 81:
                    message.activityTag = RoomActivityTag.internalBinaryRead(reader, reader.uint32(), options, message.activityTag);
                    break;
                case /* data.Image portrait_cover */ 82:
                    message.portraitCover = Image.internalBinaryRead(reader, reader.uint32(), options, message.portraitCover);
                    break;
                case /* data.Image background */ 83:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int64 layout */ 84:
                    message.layout = reader.int64().toBigInt();
                    break;
                case /* string wait_copy */ 85:
                    message.waitCopy = reader.string();
                    break;
                case /* data.Image guide_button */ 86:
                    message.guideButton = Image.internalBinaryRead(reader, reader.uint32(), options, message.guideButton);
                    break;
                case /* string preview_copy */ 87:
                    message.previewCopy = reader.string();
                    break;
                case /* bool is_show_inquiry_ball */ 88:
                    message.isShowInquiryBall = reader.bool();
                    break;
                case /* data.MatchInfo match_info */ 89:
                    message.matchInfo = MatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.matchInfo);
                    break;
                case /* bool use_filter */ 90:
                    message.useFilter = reader.bool();
                    break;
                case /* int64 gift_msg_style */ 91:
                    message.giftMsgStyle = reader.int64().toBigInt();
                    break;
                case /* string distance_km */ 92:
                    message.distanceKm = reader.string();
                    break;
                case /* string finish_url */ 93:
                    message.finishUrl = reader.string();
                    break;
                case /* data.OfficialRoomInfo official_room_info */ 94:
                    message.officialRoomInfo = OfficialRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.officialRoomInfo);
                    break;
                case /* bool is_show_user_card_switch */ 95:
                    message.isShowUserCardSwitch = reader.bool();
                    break;
                case /* string video_feed_tag */ 96:
                    message.videoFeedTag = reader.string();
                    break;
                case /* string forum_extra_data */ 97:
                    message.forumExtraData = reader.string();
                    break;
                case /* int64 fansclub_msg_style */ 98:
                    message.fansclubMsgStyle = reader.int64().toBigInt();
                    break;
                case /* int64 follow_msg_style */ 99:
                    message.followMsgStyle = reader.int64().toBigInt();
                    break;
                case /* int64 share_msg_style */ 100:
                    message.shareMsgStyle = reader.int64().toBigInt();
                    break;
                case /* int64 room_layout */ 101:
                    message.roomLayout = reader.int64().toBigInt();
                    break;
                case /* string short_title */ 102:
                    message.shortTitle = reader.string();
                    break;
                case /* int64 book_time */ 104:
                    message.bookTime = reader.int64().toBigInt();
                    break;
                case /* int64 book_end_time */ 105:
                    message.bookEndTime = reader.int64().toBigInt();
                    break;
                case /* int64 room_audit_status */ 106:
                    message.roomAuditStatus = reader.int64().toBigInt();
                    break;
                case /* repeated int64 live_distribution */ 107:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.liveDistribution.push(reader.int64().toBigInt());
                    else
                        message.liveDistribution.push(reader.int64().toBigInt());
                    break;
                case /* data.TVStation tv */ 108:
                    message.tv = TVStation.internalBinaryRead(reader, reader.uint32(), options, message.tv);
                    break;
                case /* bool replay */ 109:
                    message.replay = reader.bool();
                    break;
                case /* string challenge_info */ 110:
                    message.challengeInfo = reader.string();
                    break;
                case /* int64 like_count */ 111:
                    message.likeCount = reader.int64().toBigInt();
                    break;
                case /* int64 search_id */ 112:
                    message.searchId = reader.int64().toBigInt();
                    break;
                case /* string anchor_scheduled_time_text */ 113:
                    message.anchorScheduledTimeText = reader.string();
                    break;
                case /* string hot_sentence_info */ 114:
                    message.hotSentenceInfo = reader.string();
                    break;
                case /* int64 replay_location */ 115:
                    message.replayLocation = reader.int64().toBigInt();
                    break;
                case /* int64 stream_close_time */ 116:
                    message.streamCloseTime = reader.int64().toBigInt();
                    break;
                case /* string content_tag */ 117:
                    message.contentTag = reader.string();
                    break;
                case /* data.Image content_label */ 118:
                    message.contentLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.contentLabel);
                    break;
                case /* data.Image operation_label */ 119:
                    message.operationLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.operationLabel);
                    break;
                case /* int32 anchor_tab_type */ 120:
                    message.anchorTabType = reader.int32();
                    break;
                case /* data.GameExtra game_extra */ 121:
                    message.gameExtra = GameExtra.internalBinaryRead(reader, reader.uint32(), options, message.gameExtra);
                    break;
                case /* data.OfficialChannelInfo official_channel */ 122:
                    message.officialChannel = OfficialChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.officialChannel);
                    break;
                case /* string stamps */ 123:
                    message.stamps = reader.string();
                    break;
                case /* data.CommentBox comment_box */ 124:
                    message.commentBox = CommentBox.internalBinaryRead(reader, reader.uint32(), options, message.commentBox);
                    break;
                case /* int32 business_live */ 125:
                    message.businessLive = reader.int32();
                    break;
                case /* bool with_ktv */ 126:
                    message.withKtv = reader.bool();
                    break;
                case /* bool with_draw_something */ 127:
                    message.withDrawSomething = reader.bool();
                    break;
                case /* int64 webcast_comment_tcs */ 128:
                    message.webcastCommentTcs = reader.int64().toBigInt();
                    break;
                case /* int64 room_tag */ 129:
                    message.roomTag = reader.int64().toBigInt();
                    break;
                case /* int32 finish_reason */ 131:
                    message.finishReason = reader.int32();
                    break;
                case /* data.RoomCart room_cart */ 132:
                    message.roomCart = RoomCart.internalBinaryRead(reader, reader.uint32(), options, message.roomCart);
                    break;
                case /* string scroll_config */ 133:
                    message.scrollConfig = reader.string();
                    break;
                case /* string relation_tag */ 134:
                    message.relationTag = reader.string();
                    break;
                case /* int64 owner_device_id */ 135:
                    message.ownerDeviceId = reader.int64().toBigInt();
                    break;
                case /* int64 auto_cover */ 136:
                    message.autoCover = reader.int64().toBigInt();
                    break;
                case /* int64 app_id */ 137:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* int64 webcast_sdk_version */ 138:
                    message.webcastSdkVersion = reader.int64().toBigInt();
                    break;
                case /* int64 comment_name_mode */ 139:
                    message.commentNameMode = reader.int64().toBigInt();
                    break;
                case /* string room_create_ab_param */ 140:
                    message.roomCreateAbParam = reader.string();
                    break;
                case /* int64 pre_enter_time */ 141:
                    message.preEnterTime = reader.int64().toBigInt();
                    break;
                case /* int64 ranklist_audience_type */ 142:
                    message.ranklistAudienceType = reader.int64().toBigInt();
                    break;
                case /* int64 preview_flow_tag */ 143:
                    message.previewFlowTag = reader.int64().toBigInt();
                    break;
                case /* data.Image preview_tag_url */ 144:
                    message.previewTagUrl = Image.internalBinaryRead(reader, reader.uint32(), options, message.previewTagUrl);
                    break;
                case /* data.QuizExtra quiz_extra */ 145:
                    message.quizExtra = QuizExtra.internalBinaryRead(reader, reader.uint32(), options, message.quizExtra);
                    break;
                case /* data.LinkerUsers linker_users */ 147:
                    message.linkerUsers = LinkerUsers.internalBinaryRead(reader, reader.uint32(), options, message.linkerUsers);
                    break;
                case /* int64 linkmic_display_type */ 148:
                    message.linkmicDisplayType = reader.int64().toBigInt();
                    break;
                case /* data.AudioBGData AudioRoomBGImage = 149 [json_name = "AudioRoomBGImage"];*/ 149:
                    message.audioRoomBGImage = AudioBGData.internalBinaryRead(reader, reader.uint32(), options, message.audioRoomBGImage);
                    break;
                case /* data.LinkerUsers city_top_linker_users */ 150:
                    message.cityTopLinkerUsers = LinkerUsers.internalBinaryRead(reader, reader.uint32(), options, message.cityTopLinkerUsers);
                    break;
                case /* data.BorderInfo border_info */ 151:
                    message.borderInfo = BorderInfo.internalBinaryRead(reader, reader.uint32(), options, message.borderInfo);
                    break;
                case /* data.Image city_top_background */ 152:
                    message.cityTopBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.cityTopBackground);
                    break;
                case /* string city_top_distance */ 153:
                    message.cityTopDistance = reader.string();
                    break;
                case /* int64 live_room_mode */ 154:
                    message.liveRoomMode = reader.int64().toBigInt();
                    break;
                case /* data.Bonus bonus */ 155:
                    message.bonus = Bonus.internalBinaryRead(reader, reader.uint32(), options, message.bonus);
                    break;
                case /* bool highlight */ 156:
                    message.highlight = reader.bool();
                    break;
                case /* bool is_official_channel_room */ 157:
                    message.isOfficialChannelRoom = reader.bool();
                    break;
                case /* repeated int64 fans_group_admin_user_ids */ 159:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fansGroupAdminUserIds.push(reader.int64().toBigInt());
                    else
                        message.fansGroupAdminUserIds.push(reader.int64().toBigInt());
                    break;
                case /* data.RoomReplayInfo replay_info */ 160:
                    message.replayInfo = RoomReplayInfo.internalBinaryRead(reader, reader.uint32(), options, message.replayInfo);
                    break;
                case /* int64 official_channel_uid */ 161:
                    message.officialChannelUid = reader.int64().toBigInt();
                    break;
                case /* string live_platform_source */ 162:
                    message.livePlatformSource = reader.string();
                    break;
                case /* int64 acquaintance_status */ 163:
                    message.acquaintanceStatus = reader.int64().toBigInt();
                    break;
                case /* data.CommentWallInfo comment_wall_info */ 164:
                    message.commentWallInfo = CommentWallInfo.internalBinaryRead(reader, reader.uint32(), options, message.commentWallInfo);
                    break;
                case /* data.CommentWallPosition comment_wall_position */ 165:
                    message.commentWallPosition = CommentWallPosition.internalBinaryRead(reader, reader.uint32(), options, message.commentWallPosition);
                    break;
                case /* bool live_type_vs_live */ 166:
                    message.liveTypeVsLive = reader.bool();
                    break;
                case /* bool live_type_vs_premiere */ 167:
                    message.liveTypeVsPremiere = reader.bool();
                    break;
                case /* data.EpisodeExtraInfo episode_extra */ 168:
                    message.episodeExtra = EpisodeExtraInfo.internalBinaryRead(reader, reader.uint32(), options, message.episodeExtra);
                    break;
                case /* repeated int32 vs_roles */ 169:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vsRoles.push(reader.int32());
                    else
                        message.vsRoles.push(reader.int32());
                    break;
                case /* string item_explicit_info */ 170:
                    message.itemExplicitInfo = reader.string();
                    break;
                case /* data.ShortTouchAuth short_touch_auth */ 171:
                    message.shortTouchAuth = ShortTouchAuth.internalBinaryRead(reader, reader.uint32(), options, message.shortTouchAuth);
                    break;
                case /* int64 sofa_layout */ 172:
                    message.sofaLayout = reader.int64().toBigInt();
                    break;
                case /* data.AnnouncementInfo announcement_info */ 173:
                    message.announcementInfo = AnnouncementInfo.internalBinaryRead(reader, reader.uint32(), options, message.announcementInfo);
                    break;
                case /* bool is_need_check_list */ 174:
                    message.isNeedCheckList = reader.bool();
                    break;
                case /* data.LiveStatusInfo live_status_info */ 175:
                    message.liveStatusInfo = LiveStatusInfo.internalBinaryRead(reader, reader.uint32(), options, message.liveStatusInfo);
                    break;
                case /* data.RoomIMInfo im_info */ 176:
                    message.imInfo = RoomIMInfo.internalBinaryRead(reader, reader.uint32(), options, message.imInfo);
                    break;
                case /* data.LabelInfo assist_label */ 177:
                    message.assistLabel = LabelInfo.internalBinaryRead(reader, reader.uint32(), options, message.assistLabel);
                    break;
                case /* data.VerticalTypeInfo vertical_type_info */ 179:
                    message.verticalTypeInfo = VerticalTypeInfo.internalBinaryRead(reader, reader.uint32(), options, message.verticalTypeInfo);
                    break;
                case /* repeated data.FilterWord filter_words */ 180:
                    message.filterWords.push(FilterWord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.LabelInfo dynamic_label */ 181:
                    message.dynamicLabel = LabelInfo.internalBinaryRead(reader, reader.uint32(), options, message.dynamicLabel);
                    break;
                case /* data.LinkerDetail linker_detail */ 182:
                    message.linkerDetail = LinkerDetail.internalBinaryRead(reader, reader.uint32(), options, message.linkerDetail);
                    break;
                case /* int32 visibility_range */ 183:
                    message.visibilityRange = reader.int32();
                    break;
                case /* data.CornerMarkReach corner_mark_reach */ 184:
                    message.cornerMarkReach = CornerMarkReach.internalBinaryRead(reader, reader.uint32(), options, message.cornerMarkReach);
                    break;
                case /* data.PreviewExposeData preview_expose */ 185:
                    message.previewExpose = PreviewExposeData.internalBinaryRead(reader, reader.uint32(), options, message.previewExpose);
                    break;
                case /* data.WelfareProjectInfo welfare_project_info */ 186:
                    message.welfareProjectInfo = WelfareProjectInfo.internalBinaryRead(reader, reader.uint32(), options, message.welfareProjectInfo);
                    break;
                case /* int32 game_room_type */ 187:
                    message.gameRoomType = reader.int32();
                    break;
                case /* data.PaidLiveData paid_live_data */ 188:
                    message.paidLiveData = PaidLiveData.internalBinaryRead(reader, reader.uint32(), options, message.paidLiveData);
                    break;
                case /* data.EasterEggData easter_egg_data */ 189:
                    message.easterEggData = EasterEggData.internalBinaryRead(reader, reader.uint32(), options, message.easterEggData);
                    break;
                case /* bool title_recommend */ 190:
                    message.titleRecommend = reader.bool();
                    break;
                case /* int64 danmaku_detail */ 191:
                    message.danmakuDetail = reader.int64().toBigInt();
                    break;
                case /* data.AvatarLiveInfo avatar_live_info */ 192:
                    message.avatarLiveInfo = AvatarLiveInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarLiveInfo);
                    break;
                case /* data.CircleInfo circle_info */ 193:
                    message.circleInfo = CircleInfo.internalBinaryRead(reader, reader.uint32(), options, message.circleInfo);
                    break;
                case /* int64 has_promotion_games */ 194:
                    message.hasPromotionGames = reader.int64().toBigInt();
                    break;
                case /* data.Image screenshot_sover */ 195:
                    message.screenshotSover = Image.internalBinaryRead(reader, reader.uint32(), options, message.screenshotSover);
                    break;
                case /* data.Appearance appearance */ 196:
                    message.appearance = Appearance.internalBinaryRead(reader, reader.uint32(), options, message.appearance);
                    break;
                case /* data.EcomData ecom_data */ 197:
                    message.ecomData = EcomData.internalBinaryRead(reader, reader.uint32(), options, message.ecomData);
                    break;
                case /* data.IndustryServiceInfo industry_service_info */ 198:
                    message.industryServiceInfo = IndustryServiceInfo.internalBinaryRead(reader, reader.uint32(), options, message.industryServiceInfo);
                    break;
                case /* data.RelevantRecommendation relevant_recommendation */ 199:
                    message.relevantRecommendation = RelevantRecommendation.internalBinaryRead(reader, reader.uint32(), options, message.relevantRecommendation);
                    break;
                case /* data.RoomSpecificSceneTypeInfo scene_type_info */ 200:
                    message.sceneTypeInfo = RoomSpecificSceneTypeInfo.internalBinaryRead(reader, reader.uint32(), options, message.sceneTypeInfo);
                    break;
                case /* data.GameCPData game_cp */ 201:
                    message.gameCp = GameCPData.internalBinaryRead(reader, reader.uint32(), options, message.gameCp);
                    break;
                case /* data.GamePlayData game_play */ 202:
                    message.gamePlay = GamePlayData.internalBinaryRead(reader, reader.uint32(), options, message.gamePlay);
                    break;
                case /* data.UnionLiveInfo union_live_info */ 203:
                    message.unionLiveInfo = UnionLiveInfo.internalBinaryRead(reader, reader.uint32(), options, message.unionLiveInfo);
                    break;
                case /* data.BeautifyInfo beautify_info */ 204:
                    message.beautifyInfo = BeautifyInfo.internalBinaryRead(reader, reader.uint32(), options, message.beautifyInfo);
                    break;
                case /* data.ToolBarData toolbar_data */ 205:
                    message.toolbarData = ToolBarData.internalBinaryRead(reader, reader.uint32(), options, message.toolbarData);
                    break;
                case /* data.AnchorTabLabel anchor_tab_label */ 206:
                    message.anchorTabLabel = AnchorTabLabel.internalBinaryRead(reader, reader.uint32(), options, message.anchorTabLabel);
                    break;
                case /* data.LifeGrouponInfo life_groupon_info */ 207:
                    message.lifeGrouponInfo = LifeGrouponInfo.internalBinaryRead(reader, reader.uint32(), options, message.lifeGrouponInfo);
                    break;
                case /* data.VipData vip_data */ 208:
                    message.vipData = VipData.internalBinaryRead(reader, reader.uint32(), options, message.vipData);
                    break;
                case /* int64 toutiao_cover_recommend_level */ 209:
                    message.toutiaoCoverRecommendLevel = reader.int64().toBigInt();
                    break;
                case /* int64 toutiao_title_recommend_level */ 210:
                    message.toutiaoTitleRecommendLevel = reader.int64().toBigInt();
                    break;
                case /* repeated data.UpperRightWidgetData upper_right_widget_data_list */ 211:
                    message.upperRightWidgetDataList.push(UpperRightWidgetData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.FeedbackCard live_feedback_card */ 212:
                    message.liveFeedbackCard = FeedbackCard.internalBinaryRead(reader, reader.uint32(), options, message.liveFeedbackCard);
                    break;
                case /* repeated data.LabelInfo assist_label_list */ 213:
                    message.assistLabelList.push(LabelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.DesireInfo desire_info */ 214:
                    message.desireInfo = DesireInfo.internalBinaryRead(reader, reader.uint32(), options, message.desireInfo);
                    break;
                case /* data.HotRoomInfo hot_room_info */ 215:
                    message.hotRoomInfo = HotRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.hotRoomInfo);
                    break;
                case /* bool with_aggregate_column */ 216:
                    message.withAggregateColumn = reader.bool();
                    break;
                case /* data.CastScreenData cast_screen_data */ 217:
                    message.castScreenData = CastScreenData.internalBinaryRead(reader, reader.uint32(), options, message.castScreenData);
                    break;
                case /* data.OfficialChannelExtraInfo official_channel_extra */ 218:
                    message.officialChannelExtra = OfficialChannelExtraInfo.internalBinaryRead(reader, reader.uint32(), options, message.officialChannelExtra);
                    break;
                case /* string auth_city */ 219:
                    message.authCity = reader.string();
                    break;
                case /* data.ActivityLiveRecommendConfig activity_live_recommend_config */ 220:
                    message.activityLiveRecommendConfig = ActivityLiveRecommendConfig.internalBinaryRead(reader, reader.uint32(), options, message.activityLiveRecommendConfig);
                    break;
                case /* data.RoomChannelData room_channel */ 221:
                    message.roomChannel = RoomChannelData.internalBinaryRead(reader, reader.uint32(), options, message.roomChannel);
                    break;
                case /* data.PackMetaInfo pack_meta */ 222:
                    message.packMeta = PackMetaInfo.internalBinaryRead(reader, reader.uint32(), options, message.packMeta);
                    break;
                case /* data.ActivityData activity_data */ 223:
                    message.activityData = ActivityData.internalBinaryRead(reader, reader.uint32(), options, message.activityData);
                    break;
                case /* data.LikeDisplayConfig like_display_config */ 224:
                    message.likeDisplayConfig = LikeDisplayConfig.internalBinaryRead(reader, reader.uint32(), options, message.likeDisplayConfig);
                    break;
                case /* data.RoomViewStats room_view_stats */ 225:
                    message.roomViewStats = RoomViewStats.internalBinaryRead(reader, reader.uint32(), options, message.roomViewStats);
                    break;
                case /* data.MatchRoomData match */ 226:
                    message.match = MatchRoomData.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                case /* data.CommentaryRoomInfo commentary_room_info */ 227:
                    message.commentaryRoomInfo = CommentaryRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.commentaryRoomInfo);
                    break;
                case /* int64 redpacket_audience_auth */ 228:
                    message.redpacketAudienceAuth = reader.int64().toBigInt();
                    break;
                case /* data.MatchChatConfig match_chat_config */ 229:
                    message.matchChatConfig = MatchChatConfig.internalBinaryRead(reader, reader.uint32(), options, message.matchChatConfig);
                    break;
                case /* int64 vs_main_replay_id */ 230:
                    message.vsMainReplayId = reader.int64().toBigInt();
                    break;
                case /* string screen_capture_sharing_title */ 231:
                    message.screenCaptureSharingTitle = reader.string();
                    break;
                case /* data.ShareResource share_resource */ 232:
                    message.shareResource = ShareResource.internalBinaryRead(reader, reader.uint32(), options, message.shareResource);
                    break;
                case /* repeated string sharing_music_id_list */ 233:
                    message.sharingMusicIdList.push(reader.string());
                    break;
                case /* data.PublicScreenBottomInfo public_screen_bottom_info */ 234:
                    message.publicScreenBottomInfo = PublicScreenBottomInfo.internalBinaryRead(reader, reader.uint32(), options, message.publicScreenBottomInfo);
                    break;
                case /* data.StreamUrl push_stream_hkt */ 235:
                    message.pushStreamHkt = StreamUrl.internalBinaryRead(reader, reader.uint32(), options, message.pushStreamHkt);
                    break;
                case /* data.RoomBasisData basis */ 300:
                    message.basis = RoomBasisData.internalBinaryRead(reader, reader.uint32(), options, message.basis);
                    break;
                case /* data.RoomInteractData interact */ 301:
                    message.interact = RoomInteractData.internalBinaryRead(reader, reader.uint32(), options, message.interact);
                    break;
                case /* data.RoomReqUserData req_user */ 303:
                    message.reqUser = RoomReqUserData.internalBinaryRead(reader, reader.uint32(), options, message.reqUser);
                    break;
                case /* data.RoomAnchorData anchor_data */ 304:
                    message.anchorData = RoomAnchorData.internalBinaryRead(reader, reader.uint32(), options, message.anchorData);
                    break;
                case /* data.RoomOthersData others */ 305:
                    message.others = RoomOthersData.internalBinaryRead(reader, reader.uint32(), options, message.others);
                    break;
                case /* data.PicoInfo pico_info */ 306:
                    message.picoInfo = PicoInfo.internalBinaryRead(reader, reader.uint32(), options, message.picoInfo);
                    break;
                case /* data.RoomGameData game_data */ 307:
                    message.gameData = RoomGameData.internalBinaryRead(reader, reader.uint32(), options, message.gameData);
                    break;
                case /* data.RoomFeedData feed_data */ 308:
                    message.feedData = RoomFeedData.internalBinaryRead(reader, reader.uint32(), options, message.feedData);
                    break;
                case /* data.OpenContentData open_content_data */ 309:
                    message.openContentData = OpenContentData.internalBinaryRead(reader, reader.uint32(), options, message.openContentData);
                    break;
                case /* data.ClientComponent client_component_data */ 310:
                    message.clientComponentData = ClientComponent.internalBinaryRead(reader, reader.uint32(), options, message.clientComponentData);
                    break;
                case /* data.RoomPlatformComponentsData platform_components_data */ 311:
                    message.platformComponentsData = RoomPlatformComponentsData.internalBinaryRead(reader, reader.uint32(), options, message.platformComponentsData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Room, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string id_str = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* int64 owner_user_id = 4; */
        if (message.ownerUserId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.ownerUserId);
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* int64 user_count = 6; */
        if (message.userCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.userCount);
        /* int64 create_time = 7; */
        if (message.createTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.createTime);
        /* int64 linkmic_layout = 8; */
        if (message.linkmicLayout !== 0n)
            writer.tag(8, WireType.Varint).int64(message.linkmicLayout);
        /* int64 finish_time = 9; */
        if (message.finishTime !== 0n)
            writer.tag(9, WireType.Varint).int64(message.finishTime);
        /* data.RoomExtra extra = 10; */
        if (message.extra)
            RoomExtra.internalBinaryWrite(message.extra, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string dynamic_cover_uri = 11; */
        if (message.dynamicCoverUri !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.dynamicCoverUri);
        /* int64 last_ping_time = 13; */
        if (message.lastPingTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.lastPingTime);
        /* int64 live_id = 14; */
        if (message.liveId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.liveId);
        /* int64 stream_provider = 15; */
        if (message.streamProvider !== 0n)
            writer.tag(15, WireType.Varint).int64(message.streamProvider);
        /* int64 os_type = 16; */
        if (message.osType !== 0n)
            writer.tag(16, WireType.Varint).int64(message.osType);
        /* int64 client_version = 17; */
        if (message.clientVersion !== 0n)
            writer.tag(17, WireType.Varint).int64(message.clientVersion);
        /* bool with_linkmic = 18; */
        if (message.withLinkmic !== false)
            writer.tag(18, WireType.Varint).bool(message.withLinkmic);
        /* bool enable_room_perspective = 19; */
        if (message.enableRoomPerspective !== false)
            writer.tag(19, WireType.Varint).bool(message.enableRoomPerspective);
        /* data.Image cover = 20; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* data.Image dynamic_cover = 21; */
        if (message.dynamicCover)
            Image.internalBinaryWrite(message.dynamicCover, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* data.Image dynamic_cover_low = 22; */
        if (message.dynamicCoverLow)
            Image.internalBinaryWrite(message.dynamicCoverLow, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* string share_url = 23; */
        if (message.shareUrl !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.shareUrl);
        /* string anchor_share_text = 24; */
        if (message.anchorShareText !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.anchorShareText);
        /* string user_share_text = 25; */
        if (message.userShareText !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.userShareText);
        /* int64 stream_id = 26; */
        if (message.streamId !== 0n)
            writer.tag(26, WireType.Varint).int64(message.streamId);
        /* string stream_id_str = 27; */
        if (message.streamIdStr !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.streamIdStr);
        /* data.StreamUrl stream_url = 28; */
        if (message.streamUrl)
            StreamUrl.internalBinaryWrite(message.streamUrl, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* int64 mosaic_status = 29; */
        if (message.mosaicStatus !== 0n)
            writer.tag(29, WireType.Varint).int64(message.mosaicStatus);
        /* string mosaic_tip = 30; */
        if (message.mosaicTip !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.mosaicTip);
        /* int64 cell_style = 31; */
        if (message.cellStyle !== 0n)
            writer.tag(31, WireType.Varint).int64(message.cellStyle);
        /* data.LinkMic link_mic = 32; */
        if (message.linkMic)
            LinkMic.internalBinaryWrite(message.linkMic, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* int64 luckymoney_num = 33; */
        if (message.luckymoneyNum !== 0n)
            writer.tag(33, WireType.Varint).int64(message.luckymoneyNum);
        /* repeated data.Decoration deco_list = 34; */
        for (let i = 0; i < message.decoList.length; i++)
            Decoration.internalBinaryWrite(message.decoList[i], writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.TopFan top_fans = 35; */
        for (let i = 0; i < message.topFans.length; i++)
            TopFan.internalBinaryWrite(message.topFans[i], writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomStats stats = 36; */
        if (message.stats)
            RoomStats.internalBinaryWrite(message.stats, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* string sun_daily_icon_content = 37; */
        if (message.sunDailyIconContent !== "")
            writer.tag(37, WireType.LengthDelimited).string(message.sunDailyIconContent);
        /* string distance = 38; */
        if (message.distance !== "")
            writer.tag(38, WireType.LengthDelimited).string(message.distance);
        /* string distance_city = 39; */
        if (message.distanceCity !== "")
            writer.tag(39, WireType.LengthDelimited).string(message.distanceCity);
        /* string location = 40; */
        if (message.location !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.location);
        /* string real_distance = 41; */
        if (message.realDistance !== "")
            writer.tag(41, WireType.LengthDelimited).string(message.realDistance);
        /* data.Image feed_room_label = 42; */
        if (message.feedRoomLabel)
            Image.internalBinaryWrite(message.feedRoomLabel, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* string common_label_list = 43; */
        if (message.commonLabelList !== "")
            writer.tag(43, WireType.LengthDelimited).string(message.commonLabelList);
        /* data.RoomUserAttr living_room_attrs = 44; */
        if (message.livingRoomAttrs)
            RoomUserAttr.internalBinaryWrite(message.livingRoomAttrs, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 admin_user_ids = 45; */
        if (message.adminUserIds.length) {
            writer.tag(45, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.adminUserIds.length; i++)
                writer.int64(message.adminUserIds[i]);
            writer.join();
        }
        /* data.User owner = 46; */
        if (message.owner)
            User.internalBinaryWrite(message.owner, writer.tag(46, WireType.LengthDelimited).fork(), options).join();
        /* string private_info = 47; */
        if (message.privateInfo !== "")
            writer.tag(47, WireType.LengthDelimited).string(message.privateInfo);
        /* bool has_commerce_goods = 48; */
        if (message.hasCommerceGoods !== false)
            writer.tag(48, WireType.Varint).bool(message.hasCommerceGoods);
        /* bool live_type_normal = 49; */
        if (message.liveTypeNormal !== false)
            writer.tag(49, WireType.Varint).bool(message.liveTypeNormal);
        /* bool live_type_linkmic = 50; */
        if (message.liveTypeLinkmic !== false)
            writer.tag(50, WireType.Varint).bool(message.liveTypeLinkmic);
        /* bool live_type_audio = 51; */
        if (message.liveTypeAudio !== false)
            writer.tag(51, WireType.Varint).bool(message.liveTypeAudio);
        /* bool live_type_third_party = 52; */
        if (message.liveTypeThirdParty !== false)
            writer.tag(52, WireType.Varint).bool(message.liveTypeThirdParty);
        /* bool live_type_screenshot = 53; */
        if (message.liveTypeScreenshot !== false)
            writer.tag(53, WireType.Varint).bool(message.liveTypeScreenshot);
        /* bool live_type_sandbox = 54; */
        if (message.liveTypeSandbox !== false)
            writer.tag(54, WireType.Varint).bool(message.liveTypeSandbox);
        /* bool live_type_official = 55; */
        if (message.liveTypeOfficial !== false)
            writer.tag(55, WireType.Varint).bool(message.liveTypeOfficial);
        /* int64 group_id = 59; */
        if (message.groupId !== 0n)
            writer.tag(59, WireType.Varint).int64(message.groupId);
        /* int64 orientation = 60; */
        if (message.orientation !== 0n)
            writer.tag(60, WireType.Varint).int64(message.orientation);
        /* int64 category = 61; */
        if (message.category !== 0n)
            writer.tag(61, WireType.Varint).int64(message.category);
        /* repeated int64 tags = 62; */
        if (message.tags.length) {
            writer.tag(62, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tags.length; i++)
                writer.int64(message.tags[i]);
            writer.join();
        }
        /* int64 start_time = 63; */
        if (message.startTime !== 0n)
            writer.tag(63, WireType.Varint).int64(message.startTime);
        /* int64 popularity = 64; */
        if (message.popularity !== 0n)
            writer.tag(64, WireType.Varint).int64(message.popularity);
        /* string popularity_str = 65; */
        if (message.popularityStr !== "")
            writer.tag(65, WireType.LengthDelimited).string(message.popularityStr);
        /* int64 fcdn_appid = 66; */
        if (message.fcdnAppid !== 0n)
            writer.tag(66, WireType.Varint).int64(message.fcdnAppid);
        /* bool sell_goods = 68; */
        if (message.sellGoods !== false)
            writer.tag(68, WireType.Varint).bool(message.sellGoods);
        /* int64 web_count = 69; */
        if (message.webCount !== 0n)
            writer.tag(69, WireType.Varint).int64(message.webCount);
        /* string vertical_cover_uri = 70; */
        if (message.verticalCoverUri !== "")
            writer.tag(70, WireType.LengthDelimited).string(message.verticalCoverUri);
        /* int64 base_category = 71; */
        if (message.baseCategory !== 0n)
            writer.tag(71, WireType.Varint).int64(message.baseCategory);
        /* data.RoomAuthStatus room_auth = 72; */
        if (message.roomAuth)
            RoomAuthStatus.internalBinaryWrite(message.roomAuth, writer.tag(72, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RoomTab room_tabs = 73; */
        for (let i = 0; i < message.roomTabs.length; i++)
            RoomTab.internalBinaryWrite(message.roomTabs[i], writer.tag(73, WireType.LengthDelimited).fork(), options).join();
        /* string introduction = 74; */
        if (message.introduction !== "")
            writer.tag(74, WireType.LengthDelimited).string(message.introduction);
        /* data.BurstInfo burst = 75; */
        if (message.burst)
            BurstInfo.internalBinaryWrite(message.burst, writer.tag(75, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomHealthScoreInfo health_score = 76; */
        if (message.healthScore)
            RoomHealthScoreInfo.internalBinaryWrite(message.healthScore, writer.tag(76, WireType.LengthDelimited).fork(), options).join();
        /* bool is_replay = 77; */
        if (message.isReplay !== false)
            writer.tag(77, WireType.Varint).bool(message.isReplay);
        /* string vid = 78; */
        if (message.vid !== "")
            writer.tag(78, WireType.LengthDelimited).string(message.vid);
        /* int64 group_source = 79; */
        if (message.groupSource !== 0n)
            writer.tag(79, WireType.Varint).int64(message.groupSource);
        /* int64 lottery_finish_time = 80; */
        if (message.lotteryFinishTime !== 0n)
            writer.tag(80, WireType.Varint).int64(message.lotteryFinishTime);
        /* data.RoomActivityTag activity_tag = 81; */
        if (message.activityTag)
            RoomActivityTag.internalBinaryWrite(message.activityTag, writer.tag(81, WireType.LengthDelimited).fork(), options).join();
        /* data.Image portrait_cover = 82; */
        if (message.portraitCover)
            Image.internalBinaryWrite(message.portraitCover, writer.tag(82, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background = 83; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(83, WireType.LengthDelimited).fork(), options).join();
        /* int64 layout = 84; */
        if (message.layout !== 0n)
            writer.tag(84, WireType.Varint).int64(message.layout);
        /* string wait_copy = 85; */
        if (message.waitCopy !== "")
            writer.tag(85, WireType.LengthDelimited).string(message.waitCopy);
        /* data.Image guide_button = 86; */
        if (message.guideButton)
            Image.internalBinaryWrite(message.guideButton, writer.tag(86, WireType.LengthDelimited).fork(), options).join();
        /* string preview_copy = 87; */
        if (message.previewCopy !== "")
            writer.tag(87, WireType.LengthDelimited).string(message.previewCopy);
        /* bool is_show_inquiry_ball = 88; */
        if (message.isShowInquiryBall !== false)
            writer.tag(88, WireType.Varint).bool(message.isShowInquiryBall);
        /* data.MatchInfo match_info = 89; */
        if (message.matchInfo)
            MatchInfo.internalBinaryWrite(message.matchInfo, writer.tag(89, WireType.LengthDelimited).fork(), options).join();
        /* bool use_filter = 90; */
        if (message.useFilter !== false)
            writer.tag(90, WireType.Varint).bool(message.useFilter);
        /* int64 gift_msg_style = 91; */
        if (message.giftMsgStyle !== 0n)
            writer.tag(91, WireType.Varint).int64(message.giftMsgStyle);
        /* string distance_km = 92; */
        if (message.distanceKm !== "")
            writer.tag(92, WireType.LengthDelimited).string(message.distanceKm);
        /* string finish_url = 93; */
        if (message.finishUrl !== "")
            writer.tag(93, WireType.LengthDelimited).string(message.finishUrl);
        /* data.OfficialRoomInfo official_room_info = 94; */
        if (message.officialRoomInfo)
            OfficialRoomInfo.internalBinaryWrite(message.officialRoomInfo, writer.tag(94, WireType.LengthDelimited).fork(), options).join();
        /* bool is_show_user_card_switch = 95; */
        if (message.isShowUserCardSwitch !== false)
            writer.tag(95, WireType.Varint).bool(message.isShowUserCardSwitch);
        /* string video_feed_tag = 96; */
        if (message.videoFeedTag !== "")
            writer.tag(96, WireType.LengthDelimited).string(message.videoFeedTag);
        /* string forum_extra_data = 97; */
        if (message.forumExtraData !== "")
            writer.tag(97, WireType.LengthDelimited).string(message.forumExtraData);
        /* int64 fansclub_msg_style = 98; */
        if (message.fansclubMsgStyle !== 0n)
            writer.tag(98, WireType.Varint).int64(message.fansclubMsgStyle);
        /* int64 follow_msg_style = 99; */
        if (message.followMsgStyle !== 0n)
            writer.tag(99, WireType.Varint).int64(message.followMsgStyle);
        /* int64 share_msg_style = 100; */
        if (message.shareMsgStyle !== 0n)
            writer.tag(100, WireType.Varint).int64(message.shareMsgStyle);
        /* int64 room_layout = 101; */
        if (message.roomLayout !== 0n)
            writer.tag(101, WireType.Varint).int64(message.roomLayout);
        /* string short_title = 102; */
        if (message.shortTitle !== "")
            writer.tag(102, WireType.LengthDelimited).string(message.shortTitle);
        /* int64 book_time = 104; */
        if (message.bookTime !== 0n)
            writer.tag(104, WireType.Varint).int64(message.bookTime);
        /* int64 book_end_time = 105; */
        if (message.bookEndTime !== 0n)
            writer.tag(105, WireType.Varint).int64(message.bookEndTime);
        /* int64 room_audit_status = 106; */
        if (message.roomAuditStatus !== 0n)
            writer.tag(106, WireType.Varint).int64(message.roomAuditStatus);
        /* repeated int64 live_distribution = 107; */
        if (message.liveDistribution.length) {
            writer.tag(107, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.liveDistribution.length; i++)
                writer.int64(message.liveDistribution[i]);
            writer.join();
        }
        /* data.TVStation tv = 108; */
        if (message.tv)
            TVStation.internalBinaryWrite(message.tv, writer.tag(108, WireType.LengthDelimited).fork(), options).join();
        /* bool replay = 109; */
        if (message.replay !== false)
            writer.tag(109, WireType.Varint).bool(message.replay);
        /* string challenge_info = 110; */
        if (message.challengeInfo !== "")
            writer.tag(110, WireType.LengthDelimited).string(message.challengeInfo);
        /* int64 like_count = 111; */
        if (message.likeCount !== 0n)
            writer.tag(111, WireType.Varint).int64(message.likeCount);
        /* int64 search_id = 112; */
        if (message.searchId !== 0n)
            writer.tag(112, WireType.Varint).int64(message.searchId);
        /* string anchor_scheduled_time_text = 113; */
        if (message.anchorScheduledTimeText !== "")
            writer.tag(113, WireType.LengthDelimited).string(message.anchorScheduledTimeText);
        /* string hot_sentence_info = 114; */
        if (message.hotSentenceInfo !== "")
            writer.tag(114, WireType.LengthDelimited).string(message.hotSentenceInfo);
        /* int64 replay_location = 115; */
        if (message.replayLocation !== 0n)
            writer.tag(115, WireType.Varint).int64(message.replayLocation);
        /* int64 stream_close_time = 116; */
        if (message.streamCloseTime !== 0n)
            writer.tag(116, WireType.Varint).int64(message.streamCloseTime);
        /* string content_tag = 117; */
        if (message.contentTag !== "")
            writer.tag(117, WireType.LengthDelimited).string(message.contentTag);
        /* data.Image content_label = 118; */
        if (message.contentLabel)
            Image.internalBinaryWrite(message.contentLabel, writer.tag(118, WireType.LengthDelimited).fork(), options).join();
        /* data.Image operation_label = 119; */
        if (message.operationLabel)
            Image.internalBinaryWrite(message.operationLabel, writer.tag(119, WireType.LengthDelimited).fork(), options).join();
        /* int32 anchor_tab_type = 120; */
        if (message.anchorTabType !== 0)
            writer.tag(120, WireType.Varint).int32(message.anchorTabType);
        /* data.GameExtra game_extra = 121; */
        if (message.gameExtra)
            GameExtra.internalBinaryWrite(message.gameExtra, writer.tag(121, WireType.LengthDelimited).fork(), options).join();
        /* data.OfficialChannelInfo official_channel = 122; */
        if (message.officialChannel)
            OfficialChannelInfo.internalBinaryWrite(message.officialChannel, writer.tag(122, WireType.LengthDelimited).fork(), options).join();
        /* string stamps = 123; */
        if (message.stamps !== "")
            writer.tag(123, WireType.LengthDelimited).string(message.stamps);
        /* data.CommentBox comment_box = 124; */
        if (message.commentBox)
            CommentBox.internalBinaryWrite(message.commentBox, writer.tag(124, WireType.LengthDelimited).fork(), options).join();
        /* int32 business_live = 125; */
        if (message.businessLive !== 0)
            writer.tag(125, WireType.Varint).int32(message.businessLive);
        /* bool with_ktv = 126; */
        if (message.withKtv !== false)
            writer.tag(126, WireType.Varint).bool(message.withKtv);
        /* bool with_draw_something = 127; */
        if (message.withDrawSomething !== false)
            writer.tag(127, WireType.Varint).bool(message.withDrawSomething);
        /* int64 webcast_comment_tcs = 128; */
        if (message.webcastCommentTcs !== 0n)
            writer.tag(128, WireType.Varint).int64(message.webcastCommentTcs);
        /* int64 room_tag = 129; */
        if (message.roomTag !== 0n)
            writer.tag(129, WireType.Varint).int64(message.roomTag);
        /* int32 finish_reason = 131; */
        if (message.finishReason !== 0)
            writer.tag(131, WireType.Varint).int32(message.finishReason);
        /* data.RoomCart room_cart = 132; */
        if (message.roomCart)
            RoomCart.internalBinaryWrite(message.roomCart, writer.tag(132, WireType.LengthDelimited).fork(), options).join();
        /* string scroll_config = 133; */
        if (message.scrollConfig !== "")
            writer.tag(133, WireType.LengthDelimited).string(message.scrollConfig);
        /* string relation_tag = 134; */
        if (message.relationTag !== "")
            writer.tag(134, WireType.LengthDelimited).string(message.relationTag);
        /* int64 owner_device_id = 135; */
        if (message.ownerDeviceId !== 0n)
            writer.tag(135, WireType.Varint).int64(message.ownerDeviceId);
        /* int64 auto_cover = 136; */
        if (message.autoCover !== 0n)
            writer.tag(136, WireType.Varint).int64(message.autoCover);
        /* int64 app_id = 137; */
        if (message.appId !== 0n)
            writer.tag(137, WireType.Varint).int64(message.appId);
        /* int64 webcast_sdk_version = 138; */
        if (message.webcastSdkVersion !== 0n)
            writer.tag(138, WireType.Varint).int64(message.webcastSdkVersion);
        /* int64 comment_name_mode = 139; */
        if (message.commentNameMode !== 0n)
            writer.tag(139, WireType.Varint).int64(message.commentNameMode);
        /* string room_create_ab_param = 140; */
        if (message.roomCreateAbParam !== "")
            writer.tag(140, WireType.LengthDelimited).string(message.roomCreateAbParam);
        /* int64 pre_enter_time = 141; */
        if (message.preEnterTime !== 0n)
            writer.tag(141, WireType.Varint).int64(message.preEnterTime);
        /* int64 ranklist_audience_type = 142; */
        if (message.ranklistAudienceType !== 0n)
            writer.tag(142, WireType.Varint).int64(message.ranklistAudienceType);
        /* int64 preview_flow_tag = 143; */
        if (message.previewFlowTag !== 0n)
            writer.tag(143, WireType.Varint).int64(message.previewFlowTag);
        /* data.Image preview_tag_url = 144; */
        if (message.previewTagUrl)
            Image.internalBinaryWrite(message.previewTagUrl, writer.tag(144, WireType.LengthDelimited).fork(), options).join();
        /* data.QuizExtra quiz_extra = 145; */
        if (message.quizExtra)
            QuizExtra.internalBinaryWrite(message.quizExtra, writer.tag(145, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkerUsers linker_users = 147; */
        if (message.linkerUsers)
            LinkerUsers.internalBinaryWrite(message.linkerUsers, writer.tag(147, WireType.LengthDelimited).fork(), options).join();
        /* int64 linkmic_display_type = 148; */
        if (message.linkmicDisplayType !== 0n)
            writer.tag(148, WireType.Varint).int64(message.linkmicDisplayType);
        /* data.AudioBGData AudioRoomBGImage = 149 [json_name = "AudioRoomBGImage"]; */
        if (message.audioRoomBGImage)
            AudioBGData.internalBinaryWrite(message.audioRoomBGImage, writer.tag(149, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkerUsers city_top_linker_users = 150; */
        if (message.cityTopLinkerUsers)
            LinkerUsers.internalBinaryWrite(message.cityTopLinkerUsers, writer.tag(150, WireType.LengthDelimited).fork(), options).join();
        /* data.BorderInfo border_info = 151; */
        if (message.borderInfo)
            BorderInfo.internalBinaryWrite(message.borderInfo, writer.tag(151, WireType.LengthDelimited).fork(), options).join();
        /* data.Image city_top_background = 152; */
        if (message.cityTopBackground)
            Image.internalBinaryWrite(message.cityTopBackground, writer.tag(152, WireType.LengthDelimited).fork(), options).join();
        /* string city_top_distance = 153; */
        if (message.cityTopDistance !== "")
            writer.tag(153, WireType.LengthDelimited).string(message.cityTopDistance);
        /* int64 live_room_mode = 154; */
        if (message.liveRoomMode !== 0n)
            writer.tag(154, WireType.Varint).int64(message.liveRoomMode);
        /* data.Bonus bonus = 155; */
        if (message.bonus)
            Bonus.internalBinaryWrite(message.bonus, writer.tag(155, WireType.LengthDelimited).fork(), options).join();
        /* bool highlight = 156; */
        if (message.highlight !== false)
            writer.tag(156, WireType.Varint).bool(message.highlight);
        /* bool is_official_channel_room = 157; */
        if (message.isOfficialChannelRoom !== false)
            writer.tag(157, WireType.Varint).bool(message.isOfficialChannelRoom);
        /* repeated int64 fans_group_admin_user_ids = 159; */
        if (message.fansGroupAdminUserIds.length) {
            writer.tag(159, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.fansGroupAdminUserIds.length; i++)
                writer.int64(message.fansGroupAdminUserIds[i]);
            writer.join();
        }
        /* data.RoomReplayInfo replay_info = 160; */
        if (message.replayInfo)
            RoomReplayInfo.internalBinaryWrite(message.replayInfo, writer.tag(160, WireType.LengthDelimited).fork(), options).join();
        /* int64 official_channel_uid = 161; */
        if (message.officialChannelUid !== 0n)
            writer.tag(161, WireType.Varint).int64(message.officialChannelUid);
        /* string live_platform_source = 162; */
        if (message.livePlatformSource !== "")
            writer.tag(162, WireType.LengthDelimited).string(message.livePlatformSource);
        /* int64 acquaintance_status = 163; */
        if (message.acquaintanceStatus !== 0n)
            writer.tag(163, WireType.Varint).int64(message.acquaintanceStatus);
        /* data.CommentWallInfo comment_wall_info = 164; */
        if (message.commentWallInfo)
            CommentWallInfo.internalBinaryWrite(message.commentWallInfo, writer.tag(164, WireType.LengthDelimited).fork(), options).join();
        /* data.CommentWallPosition comment_wall_position = 165; */
        if (message.commentWallPosition)
            CommentWallPosition.internalBinaryWrite(message.commentWallPosition, writer.tag(165, WireType.LengthDelimited).fork(), options).join();
        /* bool live_type_vs_live = 166; */
        if (message.liveTypeVsLive !== false)
            writer.tag(166, WireType.Varint).bool(message.liveTypeVsLive);
        /* bool live_type_vs_premiere = 167; */
        if (message.liveTypeVsPremiere !== false)
            writer.tag(167, WireType.Varint).bool(message.liveTypeVsPremiere);
        /* data.EpisodeExtraInfo episode_extra = 168; */
        if (message.episodeExtra)
            EpisodeExtraInfo.internalBinaryWrite(message.episodeExtra, writer.tag(168, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 vs_roles = 169; */
        if (message.vsRoles.length) {
            writer.tag(169, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.vsRoles.length; i++)
                writer.int32(message.vsRoles[i]);
            writer.join();
        }
        /* string item_explicit_info = 170; */
        if (message.itemExplicitInfo !== "")
            writer.tag(170, WireType.LengthDelimited).string(message.itemExplicitInfo);
        /* data.ShortTouchAuth short_touch_auth = 171; */
        if (message.shortTouchAuth)
            ShortTouchAuth.internalBinaryWrite(message.shortTouchAuth, writer.tag(171, WireType.LengthDelimited).fork(), options).join();
        /* int64 sofa_layout = 172; */
        if (message.sofaLayout !== 0n)
            writer.tag(172, WireType.Varint).int64(message.sofaLayout);
        /* data.AnnouncementInfo announcement_info = 173; */
        if (message.announcementInfo)
            AnnouncementInfo.internalBinaryWrite(message.announcementInfo, writer.tag(173, WireType.LengthDelimited).fork(), options).join();
        /* bool is_need_check_list = 174; */
        if (message.isNeedCheckList !== false)
            writer.tag(174, WireType.Varint).bool(message.isNeedCheckList);
        /* data.LiveStatusInfo live_status_info = 175; */
        if (message.liveStatusInfo)
            LiveStatusInfo.internalBinaryWrite(message.liveStatusInfo, writer.tag(175, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomIMInfo im_info = 176; */
        if (message.imInfo)
            RoomIMInfo.internalBinaryWrite(message.imInfo, writer.tag(176, WireType.LengthDelimited).fork(), options).join();
        /* data.LabelInfo assist_label = 177; */
        if (message.assistLabel)
            LabelInfo.internalBinaryWrite(message.assistLabel, writer.tag(177, WireType.LengthDelimited).fork(), options).join();
        /* data.VerticalTypeInfo vertical_type_info = 179; */
        if (message.verticalTypeInfo)
            VerticalTypeInfo.internalBinaryWrite(message.verticalTypeInfo, writer.tag(179, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.FilterWord filter_words = 180; */
        for (let i = 0; i < message.filterWords.length; i++)
            FilterWord.internalBinaryWrite(message.filterWords[i], writer.tag(180, WireType.LengthDelimited).fork(), options).join();
        /* data.LabelInfo dynamic_label = 181; */
        if (message.dynamicLabel)
            LabelInfo.internalBinaryWrite(message.dynamicLabel, writer.tag(181, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkerDetail linker_detail = 182; */
        if (message.linkerDetail)
            LinkerDetail.internalBinaryWrite(message.linkerDetail, writer.tag(182, WireType.LengthDelimited).fork(), options).join();
        /* int32 visibility_range = 183; */
        if (message.visibilityRange !== 0)
            writer.tag(183, WireType.Varint).int32(message.visibilityRange);
        /* data.CornerMarkReach corner_mark_reach = 184; */
        if (message.cornerMarkReach)
            CornerMarkReach.internalBinaryWrite(message.cornerMarkReach, writer.tag(184, WireType.LengthDelimited).fork(), options).join();
        /* data.PreviewExposeData preview_expose = 185; */
        if (message.previewExpose)
            PreviewExposeData.internalBinaryWrite(message.previewExpose, writer.tag(185, WireType.LengthDelimited).fork(), options).join();
        /* data.WelfareProjectInfo welfare_project_info = 186; */
        if (message.welfareProjectInfo)
            WelfareProjectInfo.internalBinaryWrite(message.welfareProjectInfo, writer.tag(186, WireType.LengthDelimited).fork(), options).join();
        /* int32 game_room_type = 187; */
        if (message.gameRoomType !== 0)
            writer.tag(187, WireType.Varint).int32(message.gameRoomType);
        /* data.PaidLiveData paid_live_data = 188; */
        if (message.paidLiveData)
            PaidLiveData.internalBinaryWrite(message.paidLiveData, writer.tag(188, WireType.LengthDelimited).fork(), options).join();
        /* data.EasterEggData easter_egg_data = 189; */
        if (message.easterEggData)
            EasterEggData.internalBinaryWrite(message.easterEggData, writer.tag(189, WireType.LengthDelimited).fork(), options).join();
        /* bool title_recommend = 190; */
        if (message.titleRecommend !== false)
            writer.tag(190, WireType.Varint).bool(message.titleRecommend);
        /* int64 danmaku_detail = 191; */
        if (message.danmakuDetail !== 0n)
            writer.tag(191, WireType.Varint).int64(message.danmakuDetail);
        /* data.AvatarLiveInfo avatar_live_info = 192; */
        if (message.avatarLiveInfo)
            AvatarLiveInfo.internalBinaryWrite(message.avatarLiveInfo, writer.tag(192, WireType.LengthDelimited).fork(), options).join();
        /* data.CircleInfo circle_info = 193; */
        if (message.circleInfo)
            CircleInfo.internalBinaryWrite(message.circleInfo, writer.tag(193, WireType.LengthDelimited).fork(), options).join();
        /* int64 has_promotion_games = 194; */
        if (message.hasPromotionGames !== 0n)
            writer.tag(194, WireType.Varint).int64(message.hasPromotionGames);
        /* data.Image screenshot_sover = 195; */
        if (message.screenshotSover)
            Image.internalBinaryWrite(message.screenshotSover, writer.tag(195, WireType.LengthDelimited).fork(), options).join();
        /* data.Appearance appearance = 196; */
        if (message.appearance)
            Appearance.internalBinaryWrite(message.appearance, writer.tag(196, WireType.LengthDelimited).fork(), options).join();
        /* data.EcomData ecom_data = 197; */
        if (message.ecomData)
            EcomData.internalBinaryWrite(message.ecomData, writer.tag(197, WireType.LengthDelimited).fork(), options).join();
        /* data.IndustryServiceInfo industry_service_info = 198; */
        if (message.industryServiceInfo)
            IndustryServiceInfo.internalBinaryWrite(message.industryServiceInfo, writer.tag(198, WireType.LengthDelimited).fork(), options).join();
        /* data.RelevantRecommendation relevant_recommendation = 199; */
        if (message.relevantRecommendation)
            RelevantRecommendation.internalBinaryWrite(message.relevantRecommendation, writer.tag(199, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomSpecificSceneTypeInfo scene_type_info = 200; */
        if (message.sceneTypeInfo)
            RoomSpecificSceneTypeInfo.internalBinaryWrite(message.sceneTypeInfo, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        /* data.GameCPData game_cp = 201; */
        if (message.gameCp)
            GameCPData.internalBinaryWrite(message.gameCp, writer.tag(201, WireType.LengthDelimited).fork(), options).join();
        /* data.GamePlayData game_play = 202; */
        if (message.gamePlay)
            GamePlayData.internalBinaryWrite(message.gamePlay, writer.tag(202, WireType.LengthDelimited).fork(), options).join();
        /* data.UnionLiveInfo union_live_info = 203; */
        if (message.unionLiveInfo)
            UnionLiveInfo.internalBinaryWrite(message.unionLiveInfo, writer.tag(203, WireType.LengthDelimited).fork(), options).join();
        /* data.BeautifyInfo beautify_info = 204; */
        if (message.beautifyInfo)
            BeautifyInfo.internalBinaryWrite(message.beautifyInfo, writer.tag(204, WireType.LengthDelimited).fork(), options).join();
        /* data.ToolBarData toolbar_data = 205; */
        if (message.toolbarData)
            ToolBarData.internalBinaryWrite(message.toolbarData, writer.tag(205, WireType.LengthDelimited).fork(), options).join();
        /* data.AnchorTabLabel anchor_tab_label = 206; */
        if (message.anchorTabLabel)
            AnchorTabLabel.internalBinaryWrite(message.anchorTabLabel, writer.tag(206, WireType.LengthDelimited).fork(), options).join();
        /* data.LifeGrouponInfo life_groupon_info = 207; */
        if (message.lifeGrouponInfo)
            LifeGrouponInfo.internalBinaryWrite(message.lifeGrouponInfo, writer.tag(207, WireType.LengthDelimited).fork(), options).join();
        /* data.VipData vip_data = 208; */
        if (message.vipData)
            VipData.internalBinaryWrite(message.vipData, writer.tag(208, WireType.LengthDelimited).fork(), options).join();
        /* int64 toutiao_cover_recommend_level = 209; */
        if (message.toutiaoCoverRecommendLevel !== 0n)
            writer.tag(209, WireType.Varint).int64(message.toutiaoCoverRecommendLevel);
        /* int64 toutiao_title_recommend_level = 210; */
        if (message.toutiaoTitleRecommendLevel !== 0n)
            writer.tag(210, WireType.Varint).int64(message.toutiaoTitleRecommendLevel);
        /* repeated data.UpperRightWidgetData upper_right_widget_data_list = 211; */
        for (let i = 0; i < message.upperRightWidgetDataList.length; i++)
            UpperRightWidgetData.internalBinaryWrite(message.upperRightWidgetDataList[i], writer.tag(211, WireType.LengthDelimited).fork(), options).join();
        /* data.FeedbackCard live_feedback_card = 212; */
        if (message.liveFeedbackCard)
            FeedbackCard.internalBinaryWrite(message.liveFeedbackCard, writer.tag(212, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LabelInfo assist_label_list = 213; */
        for (let i = 0; i < message.assistLabelList.length; i++)
            LabelInfo.internalBinaryWrite(message.assistLabelList[i], writer.tag(213, WireType.LengthDelimited).fork(), options).join();
        /* data.DesireInfo desire_info = 214; */
        if (message.desireInfo)
            DesireInfo.internalBinaryWrite(message.desireInfo, writer.tag(214, WireType.LengthDelimited).fork(), options).join();
        /* data.HotRoomInfo hot_room_info = 215; */
        if (message.hotRoomInfo)
            HotRoomInfo.internalBinaryWrite(message.hotRoomInfo, writer.tag(215, WireType.LengthDelimited).fork(), options).join();
        /* bool with_aggregate_column = 216; */
        if (message.withAggregateColumn !== false)
            writer.tag(216, WireType.Varint).bool(message.withAggregateColumn);
        /* data.CastScreenData cast_screen_data = 217; */
        if (message.castScreenData)
            CastScreenData.internalBinaryWrite(message.castScreenData, writer.tag(217, WireType.LengthDelimited).fork(), options).join();
        /* data.OfficialChannelExtraInfo official_channel_extra = 218; */
        if (message.officialChannelExtra)
            OfficialChannelExtraInfo.internalBinaryWrite(message.officialChannelExtra, writer.tag(218, WireType.LengthDelimited).fork(), options).join();
        /* string auth_city = 219; */
        if (message.authCity !== "")
            writer.tag(219, WireType.LengthDelimited).string(message.authCity);
        /* data.ActivityLiveRecommendConfig activity_live_recommend_config = 220; */
        if (message.activityLiveRecommendConfig)
            ActivityLiveRecommendConfig.internalBinaryWrite(message.activityLiveRecommendConfig, writer.tag(220, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomChannelData room_channel = 221; */
        if (message.roomChannel)
            RoomChannelData.internalBinaryWrite(message.roomChannel, writer.tag(221, WireType.LengthDelimited).fork(), options).join();
        /* data.PackMetaInfo pack_meta = 222; */
        if (message.packMeta)
            PackMetaInfo.internalBinaryWrite(message.packMeta, writer.tag(222, WireType.LengthDelimited).fork(), options).join();
        /* data.ActivityData activity_data = 223; */
        if (message.activityData)
            ActivityData.internalBinaryWrite(message.activityData, writer.tag(223, WireType.LengthDelimited).fork(), options).join();
        /* data.LikeDisplayConfig like_display_config = 224; */
        if (message.likeDisplayConfig)
            LikeDisplayConfig.internalBinaryWrite(message.likeDisplayConfig, writer.tag(224, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomViewStats room_view_stats = 225; */
        if (message.roomViewStats)
            RoomViewStats.internalBinaryWrite(message.roomViewStats, writer.tag(225, WireType.LengthDelimited).fork(), options).join();
        /* data.MatchRoomData match = 226; */
        if (message.match)
            MatchRoomData.internalBinaryWrite(message.match, writer.tag(226, WireType.LengthDelimited).fork(), options).join();
        /* data.CommentaryRoomInfo commentary_room_info = 227; */
        if (message.commentaryRoomInfo)
            CommentaryRoomInfo.internalBinaryWrite(message.commentaryRoomInfo, writer.tag(227, WireType.LengthDelimited).fork(), options).join();
        /* int64 redpacket_audience_auth = 228; */
        if (message.redpacketAudienceAuth !== 0n)
            writer.tag(228, WireType.Varint).int64(message.redpacketAudienceAuth);
        /* data.MatchChatConfig match_chat_config = 229; */
        if (message.matchChatConfig)
            MatchChatConfig.internalBinaryWrite(message.matchChatConfig, writer.tag(229, WireType.LengthDelimited).fork(), options).join();
        /* int64 vs_main_replay_id = 230; */
        if (message.vsMainReplayId !== 0n)
            writer.tag(230, WireType.Varint).int64(message.vsMainReplayId);
        /* string screen_capture_sharing_title = 231; */
        if (message.screenCaptureSharingTitle !== "")
            writer.tag(231, WireType.LengthDelimited).string(message.screenCaptureSharingTitle);
        /* data.ShareResource share_resource = 232; */
        if (message.shareResource)
            ShareResource.internalBinaryWrite(message.shareResource, writer.tag(232, WireType.LengthDelimited).fork(), options).join();
        /* repeated string sharing_music_id_list = 233; */
        for (let i = 0; i < message.sharingMusicIdList.length; i++)
            writer.tag(233, WireType.LengthDelimited).string(message.sharingMusicIdList[i]);
        /* data.PublicScreenBottomInfo public_screen_bottom_info = 234; */
        if (message.publicScreenBottomInfo)
            PublicScreenBottomInfo.internalBinaryWrite(message.publicScreenBottomInfo, writer.tag(234, WireType.LengthDelimited).fork(), options).join();
        /* data.StreamUrl push_stream_hkt = 235; */
        if (message.pushStreamHkt)
            StreamUrl.internalBinaryWrite(message.pushStreamHkt, writer.tag(235, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomBasisData basis = 300; */
        if (message.basis)
            RoomBasisData.internalBinaryWrite(message.basis, writer.tag(300, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomInteractData interact = 301; */
        if (message.interact)
            RoomInteractData.internalBinaryWrite(message.interact, writer.tag(301, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomReqUserData req_user = 303; */
        if (message.reqUser)
            RoomReqUserData.internalBinaryWrite(message.reqUser, writer.tag(303, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAnchorData anchor_data = 304; */
        if (message.anchorData)
            RoomAnchorData.internalBinaryWrite(message.anchorData, writer.tag(304, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomOthersData others = 305; */
        if (message.others)
            RoomOthersData.internalBinaryWrite(message.others, writer.tag(305, WireType.LengthDelimited).fork(), options).join();
        /* data.PicoInfo pico_info = 306; */
        if (message.picoInfo)
            PicoInfo.internalBinaryWrite(message.picoInfo, writer.tag(306, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomGameData game_data = 307; */
        if (message.gameData)
            RoomGameData.internalBinaryWrite(message.gameData, writer.tag(307, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomFeedData feed_data = 308; */
        if (message.feedData)
            RoomFeedData.internalBinaryWrite(message.feedData, writer.tag(308, WireType.LengthDelimited).fork(), options).join();
        /* data.OpenContentData open_content_data = 309; */
        if (message.openContentData)
            OpenContentData.internalBinaryWrite(message.openContentData, writer.tag(309, WireType.LengthDelimited).fork(), options).join();
        /* data.ClientComponent client_component_data = 310; */
        if (message.clientComponentData)
            ClientComponent.internalBinaryWrite(message.clientComponentData, writer.tag(310, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomPlatformComponentsData platform_components_data = 311; */
        if (message.platformComponentsData)
            RoomPlatformComponentsData.internalBinaryWrite(message.platformComponentsData, writer.tag(311, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Room
 */
export const Room = new Room$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomPlatformComponentsData$Type extends MessageType<RoomPlatformComponentsData> {
    constructor() {
        super("data.RoomPlatformComponentsData", [
            { no: 1, name: "room_title", kind: "message", T: () => RoomTitle },
            { no: 2, name: "room_count", kind: "message", T: () => RoomViewStats },
            { no: 3, name: "room_avator", kind: "message", T: () => RoomAvator }
        ]);
    }
    create(value?: PartialMessage<RoomPlatformComponentsData>): RoomPlatformComponentsData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomPlatformComponentsData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomPlatformComponentsData): RoomPlatformComponentsData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.RoomTitle room_title */ 1:
                    message.roomTitle = RoomTitle.internalBinaryRead(reader, reader.uint32(), options, message.roomTitle);
                    break;
                case /* data.RoomViewStats room_count */ 2:
                    message.roomCount = RoomViewStats.internalBinaryRead(reader, reader.uint32(), options, message.roomCount);
                    break;
                case /* data.RoomAvator room_avator */ 3:
                    message.roomAvator = RoomAvator.internalBinaryRead(reader, reader.uint32(), options, message.roomAvator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomPlatformComponentsData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.RoomTitle room_title = 1; */
        if (message.roomTitle)
            RoomTitle.internalBinaryWrite(message.roomTitle, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomViewStats room_count = 2; */
        if (message.roomCount)
            RoomViewStats.internalBinaryWrite(message.roomCount, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAvator room_avator = 3; */
        if (message.roomAvator)
            RoomAvator.internalBinaryWrite(message.roomAvator, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomPlatformComponentsData
 */
export const RoomPlatformComponentsData = new RoomPlatformComponentsData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomTitle$Type extends MessageType<RoomTitle> {
    constructor() {
        super("data.RoomTitle", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "introduction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "left_tag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "left_period", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "left_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomTitle>): RoomTitle {
        const message = { title: "", introduction: "", leftTag: 0n, leftPeriod: "", leftToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomTitle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomTitle): RoomTitle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string introduction */ 2:
                    message.introduction = reader.string();
                    break;
                case /* int64 left_tag */ 3:
                    message.leftTag = reader.int64().toBigInt();
                    break;
                case /* string left_period */ 4:
                    message.leftPeriod = reader.string();
                    break;
                case /* string left_toast */ 5:
                    message.leftToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomTitle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string introduction = 2; */
        if (message.introduction !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.introduction);
        /* int64 left_tag = 3; */
        if (message.leftTag !== 0n)
            writer.tag(3, WireType.Varint).int64(message.leftTag);
        /* string left_period = 4; */
        if (message.leftPeriod !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.leftPeriod);
        /* string left_toast = 5; */
        if (message.leftToast !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.leftToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomTitle
 */
export const RoomTitle = new RoomTitle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAvator$Type extends MessageType<RoomAvator> {
    constructor() {
        super("data.RoomAvator", [
            { no: 1, name: "avatar", kind: "message", T: () => Image },
            { no: 2, name: "authentication_info", kind: "message", T: () => Image },
            { no: 3, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "has_fans_club", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "follow_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "invalid_follow_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "follow_report_scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomAvator>): RoomAvator {
        const message = { nickName: "", hasFansClub: false, followStatus: 0n, invalidFollowStatus: false, followReportScene: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAvator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAvator): RoomAvator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image avatar */ 1:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                case /* data.Image authentication_info */ 2:
                    message.authenticationInfo = Image.internalBinaryRead(reader, reader.uint32(), options, message.authenticationInfo);
                    break;
                case /* string nick_name */ 3:
                    message.nickName = reader.string();
                    break;
                case /* bool has_fans_club */ 4:
                    message.hasFansClub = reader.bool();
                    break;
                case /* int64 follow_status */ 5:
                    message.followStatus = reader.int64().toBigInt();
                    break;
                case /* bool invalid_follow_status */ 6:
                    message.invalidFollowStatus = reader.bool();
                    break;
                case /* int64 follow_report_scene */ 7:
                    message.followReportScene = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAvator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image avatar = 1; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image authentication_info = 2; */
        if (message.authenticationInfo)
            Image.internalBinaryWrite(message.authenticationInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string nick_name = 3; */
        if (message.nickName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickName);
        /* bool has_fans_club = 4; */
        if (message.hasFansClub !== false)
            writer.tag(4, WireType.Varint).bool(message.hasFansClub);
        /* int64 follow_status = 5; */
        if (message.followStatus !== 0n)
            writer.tag(5, WireType.Varint).int64(message.followStatus);
        /* bool invalid_follow_status = 6; */
        if (message.invalidFollowStatus !== false)
            writer.tag(6, WireType.Varint).bool(message.invalidFollowStatus);
        /* int64 follow_report_scene = 7; */
        if (message.followReportScene !== 0n)
            writer.tag(7, WireType.Varint).int64(message.followReportScene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomAvator
 */
export const RoomAvator = new RoomAvator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomFeedData$Type extends MessageType<RoomFeedData> {
    constructor() {
        super("data.RoomFeedData", [
            { no: 1, name: "relation_label", kind: "message", T: () => LabelInfo },
            { no: 2, name: "follow_top_appearance", kind: "message", T: () => RoomFeedData_FollowTopAppearance },
            { no: 3, name: "cut_position", kind: "message", T: () => RoomFeedData_StreamCutPosition }
        ]);
    }
    create(value?: PartialMessage<RoomFeedData>): RoomFeedData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomFeedData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomFeedData): RoomFeedData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.LabelInfo relation_label */ 1:
                    message.relationLabel = LabelInfo.internalBinaryRead(reader, reader.uint32(), options, message.relationLabel);
                    break;
                case /* data.RoomFeedData.FollowTopAppearance follow_top_appearance */ 2:
                    message.followTopAppearance = RoomFeedData_FollowTopAppearance.internalBinaryRead(reader, reader.uint32(), options, message.followTopAppearance);
                    break;
                case /* data.RoomFeedData.StreamCutPosition cut_position */ 3:
                    message.cutPosition = RoomFeedData_StreamCutPosition.internalBinaryRead(reader, reader.uint32(), options, message.cutPosition);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomFeedData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.LabelInfo relation_label = 1; */
        if (message.relationLabel)
            LabelInfo.internalBinaryWrite(message.relationLabel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomFeedData.FollowTopAppearance follow_top_appearance = 2; */
        if (message.followTopAppearance)
            RoomFeedData_FollowTopAppearance.internalBinaryWrite(message.followTopAppearance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomFeedData.StreamCutPosition cut_position = 3; */
        if (message.cutPosition)
            RoomFeedData_StreamCutPosition.internalBinaryWrite(message.cutPosition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomFeedData
 */
export const RoomFeedData = new RoomFeedData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomFeedData_StreamCutPosition$Type extends MessageType<RoomFeedData_StreamCutPosition> {
    constructor() {
        super("data.RoomFeedData.StreamCutPosition", [
            { no: 1, name: "x1", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "y1", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "x2", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "y2", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "source_width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "source_height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomFeedData_StreamCutPosition>): RoomFeedData_StreamCutPosition {
        const message = { x1: 0, y1: 0, x2: 0, y2: 0, sourceWidth: 0, sourceHeight: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomFeedData_StreamCutPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomFeedData_StreamCutPosition): RoomFeedData_StreamCutPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double x1 */ 1:
                    message.x1 = reader.double();
                    break;
                case /* double y1 */ 2:
                    message.y1 = reader.double();
                    break;
                case /* double x2 */ 3:
                    message.x2 = reader.double();
                    break;
                case /* double y2 */ 4:
                    message.y2 = reader.double();
                    break;
                case /* int32 source_width */ 5:
                    message.sourceWidth = reader.int32();
                    break;
                case /* int32 source_height */ 6:
                    message.sourceHeight = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomFeedData_StreamCutPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double x1 = 1; */
        if (message.x1 !== 0)
            writer.tag(1, WireType.Bit64).double(message.x1);
        /* double y1 = 2; */
        if (message.y1 !== 0)
            writer.tag(2, WireType.Bit64).double(message.y1);
        /* double x2 = 3; */
        if (message.x2 !== 0)
            writer.tag(3, WireType.Bit64).double(message.x2);
        /* double y2 = 4; */
        if (message.y2 !== 0)
            writer.tag(4, WireType.Bit64).double(message.y2);
        /* int32 source_width = 5; */
        if (message.sourceWidth !== 0)
            writer.tag(5, WireType.Varint).int32(message.sourceWidth);
        /* int32 source_height = 6; */
        if (message.sourceHeight !== 0)
            writer.tag(6, WireType.Varint).int32(message.sourceHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomFeedData.StreamCutPosition
 */
export const RoomFeedData_StreamCutPosition = new RoomFeedData_StreamCutPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomFeedData_FollowTopAppearance$Type extends MessageType<RoomFeedData_FollowTopAppearance> {
    constructor() {
        super("data.RoomFeedData.FollowTopAppearance", [
            { no: 1, name: "style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cut_position", kind: "message", T: () => RoomFeedData_StreamCutPosition },
            { no: 3, name: "image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<RoomFeedData_FollowTopAppearance>): RoomFeedData_FollowTopAppearance {
        const message = { style: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomFeedData_FollowTopAppearance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomFeedData_FollowTopAppearance): RoomFeedData_FollowTopAppearance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 style */ 1:
                    message.style = reader.int32();
                    break;
                case /* data.RoomFeedData.StreamCutPosition cut_position */ 2:
                    message.cutPosition = RoomFeedData_StreamCutPosition.internalBinaryRead(reader, reader.uint32(), options, message.cutPosition);
                    break;
                case /* data.Image image */ 3:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomFeedData_FollowTopAppearance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 style = 1; */
        if (message.style !== 0)
            writer.tag(1, WireType.Varint).int32(message.style);
        /* data.RoomFeedData.StreamCutPosition cut_position = 2; */
        if (message.cutPosition)
            RoomFeedData_StreamCutPosition.internalBinaryWrite(message.cutPosition, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image image = 3; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomFeedData.FollowTopAppearance
 */
export const RoomFeedData_FollowTopAppearance = new RoomFeedData_FollowTopAppearance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PicoInfo$Type extends MessageType<PicoInfo> {
    constructor() {
        super("data.PicoInfo", [
            { no: 1, name: "pico_live_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pico_virtual_live_bg_image_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pico_create_scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "custom_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pico_virtual_live_bg_image_digest", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "virtual_live_bg_images", kind: "message", T: () => PicoInfo_VirtualLiveBgImages },
            { no: 7, name: "pitch", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "client_live_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "pico_vr_transfer", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "pico_live_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PicoInfo>): PicoInfo {
        const message = { picoLiveType: 0n, picoVirtualLiveBgImageUri: "", picoCreateScene: "", customInfo: "", picoVirtualLiveBgImageDigest: "", pitch: 0, clientLiveType: 0n, picoVrTransfer: 0, picoLiveMode: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PicoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PicoInfo): PicoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pico_live_type */ 1:
                    message.picoLiveType = reader.int64().toBigInt();
                    break;
                case /* string pico_virtual_live_bg_image_uri */ 2:
                    message.picoVirtualLiveBgImageUri = reader.string();
                    break;
                case /* string pico_create_scene */ 3:
                    message.picoCreateScene = reader.string();
                    break;
                case /* string custom_info */ 4:
                    message.customInfo = reader.string();
                    break;
                case /* string pico_virtual_live_bg_image_digest */ 5:
                    message.picoVirtualLiveBgImageDigest = reader.string();
                    break;
                case /* data.PicoInfo.VirtualLiveBgImages virtual_live_bg_images */ 6:
                    message.virtualLiveBgImages = PicoInfo_VirtualLiveBgImages.internalBinaryRead(reader, reader.uint32(), options, message.virtualLiveBgImages);
                    break;
                case /* float pitch */ 7:
                    message.pitch = reader.float();
                    break;
                case /* int64 client_live_type */ 8:
                    message.clientLiveType = reader.int64().toBigInt();
                    break;
                case /* int32 pico_vr_transfer */ 9:
                    message.picoVrTransfer = reader.int32();
                    break;
                case /* int64 pico_live_mode */ 11:
                    message.picoLiveMode = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PicoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pico_live_type = 1; */
        if (message.picoLiveType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.picoLiveType);
        /* string pico_virtual_live_bg_image_uri = 2; */
        if (message.picoVirtualLiveBgImageUri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.picoVirtualLiveBgImageUri);
        /* string pico_create_scene = 3; */
        if (message.picoCreateScene !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.picoCreateScene);
        /* string custom_info = 4; */
        if (message.customInfo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.customInfo);
        /* string pico_virtual_live_bg_image_digest = 5; */
        if (message.picoVirtualLiveBgImageDigest !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.picoVirtualLiveBgImageDigest);
        /* data.PicoInfo.VirtualLiveBgImages virtual_live_bg_images = 6; */
        if (message.virtualLiveBgImages)
            PicoInfo_VirtualLiveBgImages.internalBinaryWrite(message.virtualLiveBgImages, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* float pitch = 7; */
        if (message.pitch !== 0)
            writer.tag(7, WireType.Bit32).float(message.pitch);
        /* int64 client_live_type = 8; */
        if (message.clientLiveType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.clientLiveType);
        /* int32 pico_vr_transfer = 9; */
        if (message.picoVrTransfer !== 0)
            writer.tag(9, WireType.Varint).int32(message.picoVrTransfer);
        /* int64 pico_live_mode = 11; */
        if (message.picoLiveMode !== 0n)
            writer.tag(11, WireType.Varint).int64(message.picoLiveMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PicoInfo
 */
export const PicoInfo = new PicoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PicoInfo_VirtualLiveBgImages$Type extends MessageType<PicoInfo_VirtualLiveBgImages> {
    constructor() {
        super("data.PicoInfo.VirtualLiveBgImages", [
            { no: 1, name: "original_image", kind: "message", T: () => Image },
            { no: 2, name: "original_digest", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_upright", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "converted_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 5, name: "converted_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PicoInfo_VirtualLiveBgImages_ConvertedImage }
        ]);
    }
    create(value?: PartialMessage<PicoInfo_VirtualLiveBgImages>): PicoInfo_VirtualLiveBgImages {
        const message = { originalDigest: "", isUpright: false, convertedImages: [], convertedList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PicoInfo_VirtualLiveBgImages>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PicoInfo_VirtualLiveBgImages): PicoInfo_VirtualLiveBgImages {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image original_image */ 1:
                    message.originalImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.originalImage);
                    break;
                case /* string original_digest */ 2:
                    message.originalDigest = reader.string();
                    break;
                case /* bool is_upright */ 3:
                    message.isUpright = reader.bool();
                    break;
                case /* repeated data.Image converted_images */ 4:
                    message.convertedImages.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.PicoInfo.VirtualLiveBgImages.ConvertedImage converted_list */ 5:
                    message.convertedList.push(PicoInfo_VirtualLiveBgImages_ConvertedImage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PicoInfo_VirtualLiveBgImages, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image original_image = 1; */
        if (message.originalImage)
            Image.internalBinaryWrite(message.originalImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string original_digest = 2; */
        if (message.originalDigest !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.originalDigest);
        /* bool is_upright = 3; */
        if (message.isUpright !== false)
            writer.tag(3, WireType.Varint).bool(message.isUpright);
        /* repeated data.Image converted_images = 4; */
        for (let i = 0; i < message.convertedImages.length; i++)
            Image.internalBinaryWrite(message.convertedImages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PicoInfo.VirtualLiveBgImages.ConvertedImage converted_list = 5; */
        for (let i = 0; i < message.convertedList.length; i++)
            PicoInfo_VirtualLiveBgImages_ConvertedImage.internalBinaryWrite(message.convertedList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PicoInfo.VirtualLiveBgImages
 */
export const PicoInfo_VirtualLiveBgImages = new PicoInfo_VirtualLiveBgImages$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PicoInfo_VirtualLiveBgImages_ConvertedImage$Type extends MessageType<PicoInfo_VirtualLiveBgImages_ConvertedImage> {
    constructor() {
        super("data.PicoInfo.VirtualLiveBgImages.ConvertedImage", [
            { no: 1, name: "quality", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "image", kind: "message", T: () => Image },
            { no: 3, name: "digest", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PicoInfo_VirtualLiveBgImages_ConvertedImage>): PicoInfo_VirtualLiveBgImages_ConvertedImage {
        const message = { quality: 0n, digest: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PicoInfo_VirtualLiveBgImages_ConvertedImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PicoInfo_VirtualLiveBgImages_ConvertedImage): PicoInfo_VirtualLiveBgImages_ConvertedImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 quality */ 1:
                    message.quality = reader.int64().toBigInt();
                    break;
                case /* data.Image image */ 2:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string digest */ 3:
                    message.digest = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PicoInfo_VirtualLiveBgImages_ConvertedImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 quality = 1; */
        if (message.quality !== 0n)
            writer.tag(1, WireType.Varint).int64(message.quality);
        /* data.Image image = 2; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string digest = 3; */
        if (message.digest !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.digest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PicoInfo.VirtualLiveBgImages.ConvertedImage
 */
export const PicoInfo_VirtualLiveBgImages_ConvertedImage = new PicoInfo_VirtualLiveBgImages_ConvertedImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenContentData$Type extends MessageType<OpenContentData> {
    constructor() {
        super("data.OpenContentData", [
            { no: 1, name: "open_activity_data", kind: "message", T: () => OpenActivityData }
        ]);
    }
    create(value?: PartialMessage<OpenContentData>): OpenContentData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenContentData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenContentData): OpenContentData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.OpenActivityData open_activity_data */ 1:
                    message.openActivityData = OpenActivityData.internalBinaryRead(reader, reader.uint32(), options, message.openActivityData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenContentData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.OpenActivityData open_activity_data = 1; */
        if (message.openActivityData)
            OpenActivityData.internalBinaryWrite(message.openActivityData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OpenContentData
 */
export const OpenContentData = new OpenContentData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenActivityData$Type extends MessageType<OpenActivityData> {
    constructor() {
        super("data.OpenActivityData", [
            { no: 1, name: "cover_label", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<OpenActivityData>): OpenActivityData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenActivityData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenActivityData): OpenActivityData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image cover_label */ 1:
                    message.coverLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.coverLabel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenActivityData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image cover_label = 1; */
        if (message.coverLabel)
            Image.internalBinaryWrite(message.coverLabel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OpenActivityData
 */
export const OpenActivityData = new OpenActivityData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublicScreenBottomInfo$Type extends MessageType<PublicScreenBottomInfo> {
    constructor() {
        super("data.PublicScreenBottomInfo", [
            { no: 1, name: "bottom_cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PublicScreenBottomInfo_BottomCard }
        ]);
    }
    create(value?: PartialMessage<PublicScreenBottomInfo>): PublicScreenBottomInfo {
        const message = { bottomCards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublicScreenBottomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublicScreenBottomInfo): PublicScreenBottomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.PublicScreenBottomInfo.BottomCard bottom_cards */ 1:
                    message.bottomCards.push(PublicScreenBottomInfo_BottomCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublicScreenBottomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.PublicScreenBottomInfo.BottomCard bottom_cards = 1; */
        for (let i = 0; i < message.bottomCards.length; i++)
            PublicScreenBottomInfo_BottomCard.internalBinaryWrite(message.bottomCards[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PublicScreenBottomInfo
 */
export const PublicScreenBottomInfo = new PublicScreenBottomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublicScreenBottomInfo_BottomCard$Type extends MessageType<PublicScreenBottomInfo_BottomCard> {
    constructor() {
        super("data.PublicScreenBottomInfo.BottomCard", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "biz_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PublicScreenBottomInfo_BottomCard>): PublicScreenBottomInfo_BottomCard {
        const message = { name: "", priority: 0n, duration: 0n, bizParams: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublicScreenBottomInfo_BottomCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublicScreenBottomInfo_BottomCard): PublicScreenBottomInfo_BottomCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 priority */ 2:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string biz_params */ 4:
                    message.bizParams = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublicScreenBottomInfo_BottomCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 priority = 2; */
        if (message.priority !== 0n)
            writer.tag(2, WireType.Varint).int64(message.priority);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* string biz_params = 4; */
        if (message.bizParams !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bizParams);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PublicScreenBottomInfo.BottomCard
 */
export const PublicScreenBottomInfo_BottomCard = new PublicScreenBottomInfo_BottomCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareResource$Type extends MessageType<ShareResource> {
    constructor() {
        super("data.ShareResource", [
            { no: 1, name: "toast_background", kind: "message", T: () => Image },
            { no: 3, name: "ug_share_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShareResource>): ShareResource {
        const message = { ugShareInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShareResource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShareResource): ShareResource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image toast_background */ 1:
                    message.toastBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.toastBackground);
                    break;
                case /* string ug_share_info */ 3:
                    message.ugShareInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShareResource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image toast_background = 1; */
        if (message.toastBackground)
            Image.internalBinaryWrite(message.toastBackground, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string ug_share_info = 3; */
        if (message.ugShareInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ugShareInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShareResource
 */
export const ShareResource = new ShareResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchChatConfig$Type extends MessageType<MatchChatConfig> {
    constructor() {
        super("data.MatchChatConfig", [
            { no: 1, name: "main_group_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "main_group_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "guest_group_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "guest_group_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "aggregate_icon_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchChatConfig>): MatchChatConfig {
        const message = { mainGroupIconUrl: "", mainGroupBackgroundUrl: "", guestGroupIconUrl: "", guestGroupBackgroundUrl: "", aggregateIconUrl: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchChatConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchChatConfig): MatchChatConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string main_group_icon_url */ 1:
                    message.mainGroupIconUrl = reader.string();
                    break;
                case /* string main_group_background_url */ 2:
                    message.mainGroupBackgroundUrl = reader.string();
                    break;
                case /* string guest_group_icon_url */ 3:
                    message.guestGroupIconUrl = reader.string();
                    break;
                case /* string guest_group_background_url */ 4:
                    message.guestGroupBackgroundUrl = reader.string();
                    break;
                case /* repeated string aggregate_icon_url */ 5:
                    message.aggregateIconUrl.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchChatConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string main_group_icon_url = 1; */
        if (message.mainGroupIconUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mainGroupIconUrl);
        /* string main_group_background_url = 2; */
        if (message.mainGroupBackgroundUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mainGroupBackgroundUrl);
        /* string guest_group_icon_url = 3; */
        if (message.guestGroupIconUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.guestGroupIconUrl);
        /* string guest_group_background_url = 4; */
        if (message.guestGroupBackgroundUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.guestGroupBackgroundUrl);
        /* repeated string aggregate_icon_url = 5; */
        for (let i = 0; i < message.aggregateIconUrl.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.aggregateIconUrl[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchChatConfig
 */
export const MatchChatConfig = new MatchChatConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentaryRoomInfo$Type extends MessageType<CommentaryRoomInfo> {
    constructor() {
        super("data.CommentaryRoomInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "avatar", kind: "message", T: () => Image },
            { no: 3, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CommentaryRoomInfo>): CommentaryRoomInfo {
        const message = { userId: 0n, nickname: "", title: "", roomId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentaryRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentaryRoomInfo): CommentaryRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Image avatar */ 2:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                case /* string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* int64 room_id */ 5:
                    message.roomId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentaryRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* data.Image avatar = 2; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string nickname = 3; */
        if (message.nickname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickname);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* int64 room_id = 5; */
        if (message.roomId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentaryRoomInfo
 */
export const CommentaryRoomInfo = new CommentaryRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBasisData$Type extends MessageType<RoomBasisData> {
    constructor() {
        super("data.RoomBasisData", [
            { no: 1, name: "next_ping", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomBasisData>): RoomBasisData {
        const message = { nextPing: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBasisData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBasisData): RoomBasisData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 next_ping */ 1:
                    message.nextPing = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBasisData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 next_ping = 1; */
        if (message.nextPing !== 0n)
            writer.tag(1, WireType.Varint).int64(message.nextPing);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBasisData
 */
export const RoomBasisData = new RoomBasisData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomInteractData$Type extends MessageType<RoomInteractData> {
    constructor() {
        super("data.RoomInteractData", [
            { no: 1, name: "landscape_comment_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "vs_component_extra", kind: "message", T: () => EpisodeExtraInfo }
        ]);
    }
    create(value?: PartialMessage<RoomInteractData>): RoomInteractData {
        const message = { landscapeCommentStyle: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomInteractData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomInteractData): RoomInteractData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 landscape_comment_style */ 1:
                    message.landscapeCommentStyle = reader.int64().toBigInt();
                    break;
                case /* data.EpisodeExtraInfo vs_component_extra */ 2:
                    message.vsComponentExtra = EpisodeExtraInfo.internalBinaryRead(reader, reader.uint32(), options, message.vsComponentExtra);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomInteractData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 landscape_comment_style = 1; */
        if (message.landscapeCommentStyle !== 0n)
            writer.tag(1, WireType.Varint).int64(message.landscapeCommentStyle);
        /* data.EpisodeExtraInfo vs_component_extra = 2; */
        if (message.vsComponentExtra)
            EpisodeExtraInfo.internalBinaryWrite(message.vsComponentExtra, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomInteractData
 */
export const RoomInteractData = new RoomInteractData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomReqUserData$Type extends MessageType<RoomReqUserData> {
    constructor() {
        super("data.RoomReqUserData", [
            { no: 1, name: "user_share_room_score", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "enter_user_device_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomReqUserData>): RoomReqUserData {
        const message = { userShareRoomScore: 0, enterUserDeviceType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomReqUserData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomReqUserData): RoomReqUserData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float user_share_room_score */ 1:
                    message.userShareRoomScore = reader.float();
                    break;
                case /* int32 enter_user_device_type */ 2:
                    message.enterUserDeviceType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomReqUserData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float user_share_room_score = 1; */
        if (message.userShareRoomScore !== 0)
            writer.tag(1, WireType.Bit32).float(message.userShareRoomScore);
        /* int32 enter_user_device_type = 2; */
        if (message.enterUserDeviceType !== 0)
            writer.tag(2, WireType.Varint).int32(message.enterUserDeviceType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomReqUserData
 */
export const RoomReqUserData = new RoomReqUserData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAnchorData$Type extends MessageType<RoomAnchorData> {
    constructor() {
        super("data.RoomAnchorData", [
            { no: 1, name: "finish_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_anchor_info", kind: "message", T: () => GameAnchorInfo }
        ]);
    }
    create(value?: PartialMessage<RoomAnchorData>): RoomAnchorData {
        const message = { finishSchema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAnchorData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAnchorData): RoomAnchorData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string finish_schema */ 1:
                    message.finishSchema = reader.string();
                    break;
                case /* data.GameAnchorInfo game_anchor_info */ 2:
                    message.gameAnchorInfo = GameAnchorInfo.internalBinaryRead(reader, reader.uint32(), options, message.gameAnchorInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAnchorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string finish_schema = 1; */
        if (message.finishSchema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.finishSchema);
        /* data.GameAnchorInfo game_anchor_info = 2; */
        if (message.gameAnchorInfo)
            GameAnchorInfo.internalBinaryWrite(message.gameAnchorInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomAnchorData
 */
export const RoomAnchorData = new RoomAnchorData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameAnchorInfo$Type extends MessageType<GameAnchorInfo> {
    constructor() {
        super("data.GameAnchorInfo", [
            { no: 1, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_key_anchor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GameAnchorInfo>): GameAnchorInfo {
        const message = { categoryId: "", isKeyAnchor: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameAnchorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameAnchorInfo): GameAnchorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string category_id */ 1:
                    message.categoryId = reader.string();
                    break;
                case /* bool is_key_anchor */ 2:
                    message.isKeyAnchor = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameAnchorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string category_id = 1; */
        if (message.categoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.categoryId);
        /* bool is_key_anchor = 2; */
        if (message.isKeyAnchor !== false)
            writer.tag(2, WireType.Varint).bool(message.isKeyAnchor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameAnchorInfo
 */
export const GameAnchorInfo = new GameAnchorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomOthersData$Type extends MessageType<RoomOthersData> {
    constructor() {
        super("data.RoomOthersData", [
            { no: 1, name: "deco_detail", kind: "message", T: () => DecotationDetail },
            { no: 2, name: "more_panel_info", kind: "message", T: () => MorePanelData },
            { no: 3, name: "appointment_info", kind: "message", T: () => AppointmentData },
            { no: 4, name: "web_skin", kind: "message", T: () => WebSkinData },
            { no: 5, name: "programme", kind: "message", T: () => WebProgramme },
            { no: 6, name: "live_matrix_info", kind: "message", T: () => LiveMatrixInfo },
            { no: 8, name: "gift_panel_topper_tray", kind: "message", T: () => GiftPanelTopperTray },
            { no: 9, name: "enter_gift_animation", kind: "message", T: () => EnterGiftAnimation }
        ]);
    }
    create(value?: PartialMessage<RoomOthersData>): RoomOthersData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomOthersData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomOthersData): RoomOthersData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.DecotationDetail deco_detail */ 1:
                    message.decoDetail = DecotationDetail.internalBinaryRead(reader, reader.uint32(), options, message.decoDetail);
                    break;
                case /* data.MorePanelData more_panel_info */ 2:
                    message.morePanelInfo = MorePanelData.internalBinaryRead(reader, reader.uint32(), options, message.morePanelInfo);
                    break;
                case /* data.AppointmentData appointment_info */ 3:
                    message.appointmentInfo = AppointmentData.internalBinaryRead(reader, reader.uint32(), options, message.appointmentInfo);
                    break;
                case /* data.WebSkinData web_skin */ 4:
                    message.webSkin = WebSkinData.internalBinaryRead(reader, reader.uint32(), options, message.webSkin);
                    break;
                case /* data.WebProgramme programme */ 5:
                    message.programme = WebProgramme.internalBinaryRead(reader, reader.uint32(), options, message.programme);
                    break;
                case /* data.LiveMatrixInfo live_matrix_info */ 6:
                    message.liveMatrixInfo = LiveMatrixInfo.internalBinaryRead(reader, reader.uint32(), options, message.liveMatrixInfo);
                    break;
                case /* data.GiftPanelTopperTray gift_panel_topper_tray */ 8:
                    message.giftPanelTopperTray = GiftPanelTopperTray.internalBinaryRead(reader, reader.uint32(), options, message.giftPanelTopperTray);
                    break;
                case /* data.EnterGiftAnimation enter_gift_animation */ 9:
                    message.enterGiftAnimation = EnterGiftAnimation.internalBinaryRead(reader, reader.uint32(), options, message.enterGiftAnimation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomOthersData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.DecotationDetail deco_detail = 1; */
        if (message.decoDetail)
            DecotationDetail.internalBinaryWrite(message.decoDetail, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.MorePanelData more_panel_info = 2; */
        if (message.morePanelInfo)
            MorePanelData.internalBinaryWrite(message.morePanelInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.AppointmentData appointment_info = 3; */
        if (message.appointmentInfo)
            AppointmentData.internalBinaryWrite(message.appointmentInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.WebSkinData web_skin = 4; */
        if (message.webSkin)
            WebSkinData.internalBinaryWrite(message.webSkin, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.WebProgramme programme = 5; */
        if (message.programme)
            WebProgramme.internalBinaryWrite(message.programme, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.LiveMatrixInfo live_matrix_info = 6; */
        if (message.liveMatrixInfo)
            LiveMatrixInfo.internalBinaryWrite(message.liveMatrixInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.GiftPanelTopperTray gift_panel_topper_tray = 8; */
        if (message.giftPanelTopperTray)
            GiftPanelTopperTray.internalBinaryWrite(message.giftPanelTopperTray, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.EnterGiftAnimation enter_gift_animation = 9; */
        if (message.enterGiftAnimation)
            EnterGiftAnimation.internalBinaryWrite(message.enterGiftAnimation, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomOthersData
 */
export const RoomOthersData = new RoomOthersData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebLivePortConfig$Type extends MessageType<WebLivePortConfig> {
    constructor() {
        super("data.WebLivePortConfig", [
            { no: 1, name: "strategy_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "use_config_duration", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "pause_monitor_duration", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebLivePortConfig>): WebLivePortConfig {
        const message = { strategyType: 0, useConfigDuration: false, pauseMonitorDuration: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebLivePortConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebLivePortConfig): WebLivePortConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 strategy_type */ 1:
                    message.strategyType = reader.int32();
                    break;
                case /* bool use_config_duration */ 2:
                    message.useConfigDuration = reader.bool();
                    break;
                case /* string pause_monitor_duration */ 3:
                    message.pauseMonitorDuration = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebLivePortConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 strategy_type = 1; */
        if (message.strategyType !== 0)
            writer.tag(1, WireType.Varint).int32(message.strategyType);
        /* bool use_config_duration = 2; */
        if (message.useConfigDuration !== false)
            writer.tag(2, WireType.Varint).bool(message.useConfigDuration);
        /* string pause_monitor_duration = 3; */
        if (message.pauseMonitorDuration !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pauseMonitorDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.WebLivePortConfig
 */
export const WebLivePortConfig = new WebLivePortConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebSkinData$Type extends MessageType<WebSkinData> {
    constructor() {
        super("data.WebSkinData", [
            { no: 1, name: "enable_skin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WebSkinData>): WebSkinData {
        const message = { enableSkin: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebSkinData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebSkinData): WebSkinData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable_skin */ 1:
                    message.enableSkin = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebSkinData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable_skin = 1; */
        if (message.enableSkin !== false)
            writer.tag(1, WireType.Varint).bool(message.enableSkin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.WebSkinData
 */
export const WebSkinData = new WebSkinData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebProgramme$Type extends MessageType<WebProgramme> {
    constructor() {
        super("data.WebProgramme", [
            { no: 1, name: "enable_programme", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WebProgramme>): WebProgramme {
        const message = { enableProgramme: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebProgramme>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebProgramme): WebProgramme {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable_programme */ 1:
                    message.enableProgramme = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebProgramme, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable_programme = 1; */
        if (message.enableProgramme !== false)
            writer.tag(1, WireType.Varint).bool(message.enableProgramme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.WebProgramme
 */
export const WebProgramme = new WebProgramme$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveMatrixInfo$Type extends MessageType<LiveMatrixInfo> {
    constructor() {
        super("data.LiveMatrixInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LiveMatrixInfo>): LiveMatrixInfo {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveMatrixInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveMatrixInfo): LiveMatrixInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveMatrixInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LiveMatrixInfo
 */
export const LiveMatrixInfo = new LiveMatrixInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomGameData$Type extends MessageType<RoomGameData> {
    constructor() {
        super("data.RoomGameData", [
            { no: 1, name: "room_game_data_channel_config", kind: "message", T: () => RoomGameDataChannelConfig }
        ]);
    }
    create(value?: PartialMessage<RoomGameData>): RoomGameData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomGameData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomGameData): RoomGameData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.RoomGameDataChannelConfig room_game_data_channel_config */ 1:
                    message.roomGameDataChannelConfig = RoomGameDataChannelConfig.internalBinaryRead(reader, reader.uint32(), options, message.roomGameDataChannelConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomGameData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.RoomGameDataChannelConfig room_game_data_channel_config = 1; */
        if (message.roomGameDataChannelConfig)
            RoomGameDataChannelConfig.internalBinaryWrite(message.roomGameDataChannelConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomGameData
 */
export const RoomGameData = new RoomGameData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppointmentData$Type extends MessageType<AppointmentData> {
    constructor() {
        super("data.AppointmentData", [
            { no: 1, name: "appointment_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_subscribe", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AppointmentData>): AppointmentData {
        const message = { appointmentId: 0n, isSubscribe: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppointmentData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppointmentData): AppointmentData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 appointment_id */ 1:
                    message.appointmentId = reader.int64().toBigInt();
                    break;
                case /* bool is_subscribe */ 2:
                    message.isSubscribe = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppointmentData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 appointment_id = 1; */
        if (message.appointmentId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.appointmentId);
        /* bool is_subscribe = 2; */
        if (message.isSubscribe !== false)
            writer.tag(2, WireType.Varint).bool(message.isSubscribe);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AppointmentData
 */
export const AppointmentData = new AppointmentData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MorePanelData$Type extends MessageType<MorePanelData> {
    constructor() {
        super("data.MorePanelData", [
            { no: 1, name: "load_strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MorePanelData>): MorePanelData {
        const message = { loadStrategy: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MorePanelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MorePanelData): MorePanelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 load_strategy */ 1:
                    message.loadStrategy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MorePanelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 load_strategy = 1; */
        if (message.loadStrategy !== 0)
            writer.tag(1, WireType.Varint).int32(message.loadStrategy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MorePanelData
 */
export const MorePanelData = new MorePanelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityData$Type extends MessageType<ActivityData> {
    constructor() {
        super("data.ActivityData", [
            { no: 1, name: "xg_play", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "match", kind: "message", T: () => MatchRoomData }
        ]);
    }
    create(value?: PartialMessage<ActivityData>): ActivityData {
        const message = { xgPlay: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityData): ActivityData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool xg_play */ 1:
                    message.xgPlay = reader.bool();
                    break;
                case /* data.MatchRoomData match */ 2:
                    message.match = MatchRoomData.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool xg_play = 1; */
        if (message.xgPlay !== false)
            writer.tag(1, WireType.Varint).bool(message.xgPlay);
        /* data.MatchRoomData match = 2; */
        if (message.match)
            MatchRoomData.internalBinaryWrite(message.match, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ActivityData
 */
export const ActivityData = new ActivityData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CastScreenData$Type extends MessageType<CastScreenData> {
    constructor() {
        super("data.CastScreenData", [
            { no: 1, name: "show_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "allow_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "sdk_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "permission", kind: "message", T: () => CastOttPermission },
            { no: 5, name: "force_cast_only", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CastScreenData>): CastScreenData {
        const message = { showText: "", allowList: [], sdkVersion: 0, forceCastOnly: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CastScreenData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CastScreenData): CastScreenData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string show_text */ 1:
                    message.showText = reader.string();
                    break;
                case /* repeated int64 allow_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.allowList.push(reader.int64().toBigInt());
                    else
                        message.allowList.push(reader.int64().toBigInt());
                    break;
                case /* int32 sdk_version */ 3:
                    message.sdkVersion = reader.int32();
                    break;
                case /* data.CastOttPermission permission */ 4:
                    message.permission = CastOttPermission.internalBinaryRead(reader, reader.uint32(), options, message.permission);
                    break;
                case /* int32 force_cast_only */ 5:
                    message.forceCastOnly = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CastScreenData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string show_text = 1; */
        if (message.showText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.showText);
        /* repeated int64 allow_list = 2; */
        if (message.allowList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.allowList.length; i++)
                writer.int64(message.allowList[i]);
            writer.join();
        }
        /* int32 sdk_version = 3; */
        if (message.sdkVersion !== 0)
            writer.tag(3, WireType.Varint).int32(message.sdkVersion);
        /* data.CastOttPermission permission = 4; */
        if (message.permission)
            CastOttPermission.internalBinaryWrite(message.permission, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 force_cast_only = 5; */
        if (message.forceCastOnly !== 0)
            writer.tag(5, WireType.Varint).int32(message.forceCastOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CastScreenData
 */
export const CastScreenData = new CastScreenData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CastOttPermission$Type extends MessageType<CastOttPermission> {
    constructor() {
        super("data.CastOttPermission", [
            { no: 1, name: "enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "failure_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CastOttPermission>): CastOttPermission {
        const message = { enable: false, failureToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CastOttPermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CastOttPermission): CastOttPermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable */ 1:
                    message.enable = reader.bool();
                    break;
                case /* string failure_toast */ 2:
                    message.failureToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CastOttPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable = 1; */
        if (message.enable !== false)
            writer.tag(1, WireType.Varint).bool(message.enable);
        /* string failure_toast = 2; */
        if (message.failureToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.failureToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CastOttPermission
 */
export const CastOttPermission = new CastOttPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DesireInfo$Type extends MessageType<DesireInfo> {
    constructor() {
        super("data.DesireInfo", [
            { no: 1, name: "desire_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "desire_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DesireInfo>): DesireInfo {
        const message = { desireId: 0n, desireIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DesireInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DesireInfo): DesireInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 desire_id */ 1:
                    message.desireId = reader.int64().toBigInt();
                    break;
                case /* string desire_id_str */ 2:
                    message.desireIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DesireInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 desire_id = 1; */
        if (message.desireId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.desireId);
        /* string desire_id_str = 2; */
        if (message.desireIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desireIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DesireInfo
 */
export const DesireInfo = new DesireInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackCard$Type extends MessageType<FeedbackCard> {
    constructor() {
        super("data.FeedbackCard", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "feedback_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "question", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeedbackCard_Question },
            { no: 4, name: "condition", kind: "message", T: () => FeedbackCard_Condition },
            { no: 5, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "room_data", kind: "message", T: () => Room },
            { no: 7, name: "negative_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bgm", kind: "message", T: () => Image },
            { no: 9, name: "feedback_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "inflow_feedback_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FeedbackCard>): FeedbackCard {
        const message = { title: "", feedbackId: 0n, question: [], roomId: 0n, negativeText: "", feedbackType: 0, inflowFeedbackType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackCard): FeedbackCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* int64 feedback_id */ 2:
                    message.feedbackId = reader.int64().toBigInt();
                    break;
                case /* repeated data.FeedbackCard.Question question */ 3:
                    message.question.push(FeedbackCard_Question.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.FeedbackCard.Condition condition */ 4:
                    message.condition = FeedbackCard_Condition.internalBinaryRead(reader, reader.uint32(), options, message.condition);
                    break;
                case /* int64 room_id */ 5:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* data.Room room_data */ 6:
                    message.roomData = Room.internalBinaryRead(reader, reader.uint32(), options, message.roomData);
                    break;
                case /* string negative_text */ 7:
                    message.negativeText = reader.string();
                    break;
                case /* data.Image bgm */ 8:
                    message.bgm = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgm);
                    break;
                case /* int32 feedback_type */ 9:
                    message.feedbackType = reader.int32();
                    break;
                case /* int32 inflow_feedback_type */ 10:
                    message.inflowFeedbackType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int64 feedback_id = 2; */
        if (message.feedbackId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.feedbackId);
        /* repeated data.FeedbackCard.Question question = 3; */
        for (let i = 0; i < message.question.length; i++)
            FeedbackCard_Question.internalBinaryWrite(message.question[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.FeedbackCard.Condition condition = 4; */
        if (message.condition)
            FeedbackCard_Condition.internalBinaryWrite(message.condition, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 room_id = 5; */
        if (message.roomId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.roomId);
        /* data.Room room_data = 6; */
        if (message.roomData)
            Room.internalBinaryWrite(message.roomData, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string negative_text = 7; */
        if (message.negativeText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.negativeText);
        /* data.Image bgm = 8; */
        if (message.bgm)
            Image.internalBinaryWrite(message.bgm, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 feedback_type = 9; */
        if (message.feedbackType !== 0)
            writer.tag(9, WireType.Varint).int32(message.feedbackType);
        /* int32 inflow_feedback_type = 10; */
        if (message.inflowFeedbackType !== 0)
            writer.tag(10, WireType.Varint).int32(message.inflowFeedbackType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FeedbackCard
 */
export const FeedbackCard = new FeedbackCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackCard_Option$Type extends MessageType<FeedbackCard_Option> {
    constructor() {
        super("data.FeedbackCard.Option", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sub_question_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "negative", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "toast_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "tendency", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FeedbackCard_Option>): FeedbackCard_Option {
        const message = { key: "", text: "", subQuestionId: 0n, negative: false, toastText: "", tendency: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackCard_Option>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackCard_Option): FeedbackCard_Option {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int64 sub_question_id */ 3:
                    message.subQuestionId = reader.int64().toBigInt();
                    break;
                case /* bool negative */ 4:
                    message.negative = reader.bool();
                    break;
                case /* string toast_text */ 5:
                    message.toastText = reader.string();
                    break;
                case /* int32 tendency */ 6:
                    message.tendency = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackCard_Option, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int64 sub_question_id = 3; */
        if (message.subQuestionId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.subQuestionId);
        /* bool negative = 4; */
        if (message.negative !== false)
            writer.tag(4, WireType.Varint).bool(message.negative);
        /* string toast_text = 5; */
        if (message.toastText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toastText);
        /* int32 tendency = 6; */
        if (message.tendency !== 0)
            writer.tag(6, WireType.Varint).int32(message.tendency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FeedbackCard.Option
 */
export const FeedbackCard_Option = new FeedbackCard_Option$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackCard_RoomCardStruct$Type extends MessageType<FeedbackCard_RoomCardStruct> {
    constructor() {
        super("data.FeedbackCard.RoomCardStruct", [
            { no: 1, name: "data", kind: "message", T: () => Room },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FeedbackCard_RoomCardStruct>): FeedbackCard_RoomCardStruct {
        const message = { title: "", subTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackCard_RoomCardStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackCard_RoomCardStruct): FeedbackCard_RoomCardStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Room data */ 1:
                    message.data = Room.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 3:
                    message.subTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackCard_RoomCardStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Room data = 1; */
        if (message.data)
            Room.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 3; */
        if (message.subTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FeedbackCard.RoomCardStruct
 */
export const FeedbackCard_RoomCardStruct = new FeedbackCard_RoomCardStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackCard_Question$Type extends MessageType<FeedbackCard_Question> {
    constructor() {
        super("data.FeedbackCard.Question", [
            { no: 1, name: "question_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "question_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeedbackCard_Option },
            { no: 5, name: "question_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "room_cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeedbackCard_RoomCardStruct }
        ]);
    }
    create(value?: PartialMessage<FeedbackCard_Question>): FeedbackCard_Question {
        const message = { questionKey: "", questionText: "", type: 0n, options: [], questionId: 0n, roomCards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackCard_Question>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackCard_Question): FeedbackCard_Question {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string question_key */ 1:
                    message.questionKey = reader.string();
                    break;
                case /* string question_text */ 2:
                    message.questionText = reader.string();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* repeated data.FeedbackCard.Option options */ 4:
                    message.options.push(FeedbackCard_Option.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 question_id */ 5:
                    message.questionId = reader.int64().toBigInt();
                    break;
                case /* repeated data.FeedbackCard.RoomCardStruct room_cards */ 6:
                    message.roomCards.push(FeedbackCard_RoomCardStruct.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackCard_Question, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string question_key = 1; */
        if (message.questionKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.questionKey);
        /* string question_text = 2; */
        if (message.questionText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.questionText);
        /* int64 type = 3; */
        if (message.type !== 0n)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* repeated data.FeedbackCard.Option options = 4; */
        for (let i = 0; i < message.options.length; i++)
            FeedbackCard_Option.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 question_id = 5; */
        if (message.questionId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.questionId);
        /* repeated data.FeedbackCard.RoomCardStruct room_cards = 6; */
        for (let i = 0; i < message.roomCards.length; i++)
            FeedbackCard_RoomCardStruct.internalBinaryWrite(message.roomCards[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FeedbackCard.Question
 */
export const FeedbackCard_Question = new FeedbackCard_Question$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackCard_Condition$Type extends MessageType<FeedbackCard_Condition> {
    constructor() {
        super("data.FeedbackCard.Condition", [
            { no: 1, name: "from_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "action_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "preview_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FeedbackCard_Condition>): FeedbackCard_Condition {
        const message = { fromTime: 0n, toTime: 0n, actionIds: [], actionType: 0n, previewTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackCard_Condition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackCard_Condition): FeedbackCard_Condition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_time */ 1:
                    message.fromTime = reader.int64().toBigInt();
                    break;
                case /* int64 to_time */ 2:
                    message.toTime = reader.int64().toBigInt();
                    break;
                case /* repeated int64 action_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.actionIds.push(reader.int64().toBigInt());
                    else
                        message.actionIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 action_type */ 4:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* int64 preview_time */ 5:
                    message.previewTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackCard_Condition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_time = 1; */
        if (message.fromTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromTime);
        /* int64 to_time = 2; */
        if (message.toTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toTime);
        /* repeated int64 action_ids = 3; */
        if (message.actionIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.actionIds.length; i++)
                writer.int64(message.actionIds[i]);
            writer.join();
        }
        /* int64 action_type = 4; */
        if (message.actionType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.actionType);
        /* int64 preview_time = 5; */
        if (message.previewTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.previewTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FeedbackCard.Condition
 */
export const FeedbackCard_Condition = new FeedbackCard_Condition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpperRightWidgetData$Type extends MessageType<UpperRightWidgetData> {
    constructor() {
        super("data.UpperRightWidgetData", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "widget_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpperRightWidgetData>): UpperRightWidgetData {
        const message = { name: "", widgetType: 0, extra: "", priority: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpperRightWidgetData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpperRightWidgetData): UpperRightWidgetData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 widget_type */ 2:
                    message.widgetType = reader.int32();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                case /* int32 priority */ 4:
                    message.priority = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpperRightWidgetData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 widget_type = 2; */
        if (message.widgetType !== 0)
            writer.tag(2, WireType.Varint).int32(message.widgetType);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        /* int32 priority = 4; */
        if (message.priority !== 0)
            writer.tag(4, WireType.Varint).int32(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.UpperRightWidgetData
 */
export const UpperRightWidgetData = new UpperRightWidgetData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VipData$Type extends MessageType<VipData> {
    constructor() {
        super("data.VipData", [
            { no: 1, name: "vip_room", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VipData>): VipData {
        const message = { vipRoom: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VipData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VipData): VipData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 vip_room */ 1:
                    message.vipRoom = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VipData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 vip_room = 1; */
        if (message.vipRoom !== 0)
            writer.tag(1, WireType.Varint).int32(message.vipRoom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VipData
 */
export const VipData = new VipData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorTabLabel$Type extends MessageType<AnchorTabLabel> {
    constructor() {
        super("data.AnchorTabLabel", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "message", T: () => Image },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "accessible_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorTabLabel>): AnchorTabLabel {
        const message = { content: "", style: 0, type: 0, key: "", accessibleContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorTabLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorTabLabel): AnchorTabLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* data.Image label */ 2:
                    message.label = Image.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int32 style */ 4:
                    message.style = reader.int32();
                    break;
                case /* int32 type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string key */ 6:
                    message.key = reader.string();
                    break;
                case /* string accessible_content */ 7:
                    message.accessibleContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorTabLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* data.Image label = 2; */
        if (message.label)
            Image.internalBinaryWrite(message.label, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 style = 4; */
        if (message.style !== 0)
            writer.tag(4, WireType.Varint).int32(message.style);
        /* int32 type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string key = 6; */
        if (message.key !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.key);
        /* string accessible_content = 7; */
        if (message.accessibleContent !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.accessibleContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnchorTabLabel
 */
export const AnchorTabLabel = new AnchorTabLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BeautifyInfo$Type extends MessageType<BeautifyInfo> {
    constructor() {
        super("data.BeautifyInfo", [
            { no: 1, name: "use_filter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "commerce_use_filter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BeautifyInfo>): BeautifyInfo {
        const message = { useFilter: false, commerceUseFilter: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BeautifyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeautifyInfo): BeautifyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool use_filter */ 1:
                    message.useFilter = reader.bool();
                    break;
                case /* bool commerce_use_filter */ 2:
                    message.commerceUseFilter = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BeautifyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool use_filter = 1; */
        if (message.useFilter !== false)
            writer.tag(1, WireType.Varint).bool(message.useFilter);
        /* bool commerce_use_filter = 2; */
        if (message.commerceUseFilter !== false)
            writer.tag(2, WireType.Varint).bool(message.commerceUseFilter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BeautifyInfo
 */
export const BeautifyInfo = new BeautifyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnionLiveInfo$Type extends MessageType<UnionLiveInfo> {
    constructor() {
        super("data.UnionLiveInfo", [
            { no: 1, name: "guest_anchors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnionLiveInfo_GuestAnchor },
            { no: 2, name: "avatar_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fixed_sort", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnionLiveInfo>): UnionLiveInfo {
        const message = { guestAnchors: [], avatarDescription: "", fixedSort: false, tag: "", type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnionLiveInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnionLiveInfo): UnionLiveInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.UnionLiveInfo.GuestAnchor guest_anchors */ 1:
                    message.guestAnchors.push(UnionLiveInfo_GuestAnchor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string avatar_description */ 2:
                    message.avatarDescription = reader.string();
                    break;
                case /* bool fixed_sort */ 3:
                    message.fixedSort = reader.bool();
                    break;
                case /* string tag */ 4:
                    message.tag = reader.string();
                    break;
                case /* int32 type */ 5:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnionLiveInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.UnionLiveInfo.GuestAnchor guest_anchors = 1; */
        for (let i = 0; i < message.guestAnchors.length; i++)
            UnionLiveInfo_GuestAnchor.internalBinaryWrite(message.guestAnchors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string avatar_description = 2; */
        if (message.avatarDescription !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.avatarDescription);
        /* bool fixed_sort = 3; */
        if (message.fixedSort !== false)
            writer.tag(3, WireType.Varint).bool(message.fixedSort);
        /* string tag = 4; */
        if (message.tag !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tag);
        /* int32 type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.UnionLiveInfo
 */
export const UnionLiveInfo = new UnionLiveInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnionLiveInfo_GuestAnchor$Type extends MessageType<UnionLiveInfo_GuestAnchor> {
    constructor() {
        super("data.UnionLiveInfo.GuestAnchor", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnionLiveInfo_GuestAnchor>): UnionLiveInfo_GuestAnchor {
        const message = { tag: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnionLiveInfo_GuestAnchor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnionLiveInfo_GuestAnchor): UnionLiveInfo_GuestAnchor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string tag */ 2:
                    message.tag = reader.string();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnionLiveInfo_GuestAnchor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string tag = 2; */
        if (message.tag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tag);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.UnionLiveInfo.GuestAnchor
 */
export const UnionLiveInfo_GuestAnchor = new UnionLiveInfo_GuestAnchor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomSpecificSceneTypeInfo$Type extends MessageType<RoomSpecificSceneTypeInfo> {
    constructor() {
        super("data.RoomSpecificSceneTypeInfo", [
            { no: 1, name: "is_union_live_room", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_life", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_protected_room", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "is_lasted_goods_room", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "is_desire_room", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "commentary_type", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RoomSpecificSceneTypeInfo>): RoomSpecificSceneTypeInfo {
        const message = { isUnionLiveRoom: false, isLife: false, isProtectedRoom: 0, isLastedGoodsRoom: 0, isDesireRoom: 0, commentaryType: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomSpecificSceneTypeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomSpecificSceneTypeInfo): RoomSpecificSceneTypeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_union_live_room */ 1:
                    message.isUnionLiveRoom = reader.bool();
                    break;
                case /* bool is_life */ 2:
                    message.isLife = reader.bool();
                    break;
                case /* int32 is_protected_room */ 3:
                    message.isProtectedRoom = reader.int32();
                    break;
                case /* int32 is_lasted_goods_room */ 4:
                    message.isLastedGoodsRoom = reader.int32();
                    break;
                case /* int32 is_desire_room */ 5:
                    message.isDesireRoom = reader.int32();
                    break;
                case /* bool commentary_type */ 6:
                    message.commentaryType = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomSpecificSceneTypeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_union_live_room = 1; */
        if (message.isUnionLiveRoom !== false)
            writer.tag(1, WireType.Varint).bool(message.isUnionLiveRoom);
        /* bool is_life = 2; */
        if (message.isLife !== false)
            writer.tag(2, WireType.Varint).bool(message.isLife);
        /* int32 is_protected_room = 3; */
        if (message.isProtectedRoom !== 0)
            writer.tag(3, WireType.Varint).int32(message.isProtectedRoom);
        /* int32 is_lasted_goods_room = 4; */
        if (message.isLastedGoodsRoom !== 0)
            writer.tag(4, WireType.Varint).int32(message.isLastedGoodsRoom);
        /* int32 is_desire_room = 5; */
        if (message.isDesireRoom !== 0)
            writer.tag(5, WireType.Varint).int32(message.isDesireRoom);
        /* bool commentary_type = 6; */
        if (message.commentaryType !== false)
            writer.tag(6, WireType.Varint).bool(message.commentaryType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomSpecificSceneTypeInfo
 */
export const RoomSpecificSceneTypeInfo = new RoomSpecificSceneTypeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelevantRecommendation$Type extends MessageType<RelevantRecommendation> {
    constructor() {
        super("data.RelevantRecommendation", [
            { no: 1, name: "relevant_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "bottom_bar_category", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "bar_text_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bar_text_postfix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "high_light_info", kind: "message", T: () => RelevantRecommendation_HighLightInfo },
            { no: 7, name: "ecom_info", kind: "message", T: () => RelevantRecommendation_EcomInfo },
            { no: 8, name: "vs_info", kind: "message", T: () => RelevantRecommendation_VsInfo },
            { no: 9, name: "white_category_info", kind: "message", T: () => RelevantRecommendation_WhiteCategoryInfo }
        ]);
    }
    create(value?: PartialMessage<RelevantRecommendation>): RelevantRecommendation {
        const message = { relevantType: 0, bottomBarCategory: 0, barTextPrefix: "", barTextPostfix: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RelevantRecommendation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelevantRecommendation): RelevantRecommendation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 relevant_type */ 1:
                    message.relevantType = reader.int32();
                    break;
                case /* int32 bottom_bar_category */ 2:
                    message.bottomBarCategory = reader.int32();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string bar_text_prefix */ 4:
                    message.barTextPrefix = reader.string();
                    break;
                case /* string bar_text_postfix */ 5:
                    message.barTextPostfix = reader.string();
                    break;
                case /* data.RelevantRecommendation.HighLightInfo high_light_info */ 6:
                    message.highLightInfo = RelevantRecommendation_HighLightInfo.internalBinaryRead(reader, reader.uint32(), options, message.highLightInfo);
                    break;
                case /* data.RelevantRecommendation.EcomInfo ecom_info */ 7:
                    message.ecomInfo = RelevantRecommendation_EcomInfo.internalBinaryRead(reader, reader.uint32(), options, message.ecomInfo);
                    break;
                case /* data.RelevantRecommendation.VsInfo vs_info */ 8:
                    message.vsInfo = RelevantRecommendation_VsInfo.internalBinaryRead(reader, reader.uint32(), options, message.vsInfo);
                    break;
                case /* data.RelevantRecommendation.WhiteCategoryInfo white_category_info */ 9:
                    message.whiteCategoryInfo = RelevantRecommendation_WhiteCategoryInfo.internalBinaryRead(reader, reader.uint32(), options, message.whiteCategoryInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RelevantRecommendation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 relevant_type = 1; */
        if (message.relevantType !== 0)
            writer.tag(1, WireType.Varint).int32(message.relevantType);
        /* int32 bottom_bar_category = 2; */
        if (message.bottomBarCategory !== 0)
            writer.tag(2, WireType.Varint).int32(message.bottomBarCategory);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string bar_text_prefix = 4; */
        if (message.barTextPrefix !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.barTextPrefix);
        /* string bar_text_postfix = 5; */
        if (message.barTextPostfix !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.barTextPostfix);
        /* data.RelevantRecommendation.HighLightInfo high_light_info = 6; */
        if (message.highLightInfo)
            RelevantRecommendation_HighLightInfo.internalBinaryWrite(message.highLightInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.RelevantRecommendation.EcomInfo ecom_info = 7; */
        if (message.ecomInfo)
            RelevantRecommendation_EcomInfo.internalBinaryWrite(message.ecomInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.RelevantRecommendation.VsInfo vs_info = 8; */
        if (message.vsInfo)
            RelevantRecommendation_VsInfo.internalBinaryWrite(message.vsInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.RelevantRecommendation.WhiteCategoryInfo white_category_info = 9; */
        if (message.whiteCategoryInfo)
            RelevantRecommendation_WhiteCategoryInfo.internalBinaryWrite(message.whiteCategoryInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RelevantRecommendation
 */
export const RelevantRecommendation = new RelevantRecommendation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelevantRecommendation_HighLightInfo$Type extends MessageType<RelevantRecommendation_HighLightInfo> {
    constructor() {
        super("data.RelevantRecommendation.HighLightInfo", [
            { no: 1, name: "main_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bak_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RelevantRecommendation_HighLightInfo>): RelevantRecommendation_HighLightInfo {
        const message = { mainUrl: "", bakUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RelevantRecommendation_HighLightInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelevantRecommendation_HighLightInfo): RelevantRecommendation_HighLightInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string main_url */ 1:
                    message.mainUrl = reader.string();
                    break;
                case /* string bak_url */ 2:
                    message.bakUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RelevantRecommendation_HighLightInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string main_url = 1; */
        if (message.mainUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mainUrl);
        /* string bak_url = 2; */
        if (message.bakUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bakUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RelevantRecommendation.HighLightInfo
 */
export const RelevantRecommendation_HighLightInfo = new RelevantRecommendation_HighLightInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelevantRecommendation_EcomInfo$Type extends MessageType<RelevantRecommendation_EcomInfo> {
    constructor() {
        super("data.RelevantRecommendation.EcomInfo", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "product_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RelevantRecommendation_EcomInfo>): RelevantRecommendation_EcomInfo {
        const message = { productId: 0n, productName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RelevantRecommendation_EcomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelevantRecommendation_EcomInfo): RelevantRecommendation_EcomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* string product_name */ 2:
                    message.productName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RelevantRecommendation_EcomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        /* string product_name = 2; */
        if (message.productName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.productName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RelevantRecommendation.EcomInfo
 */
export const RelevantRecommendation_EcomInfo = new RelevantRecommendation_EcomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelevantRecommendation_Episode$Type extends MessageType<RelevantRecommendation_Episode> {
    constructor() {
        super("data.RelevantRecommendation.Episode", [
            { no: 1, name: "episode_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "episode_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "episode_cover", kind: "message", T: () => Image },
            { no: 4, name: "current_period", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RelevantRecommendation_Episode>): RelevantRecommendation_Episode {
        const message = { episodeId: 0n, episodeName: "", currentPeriod: "", seasonId: 0n, itemId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RelevantRecommendation_Episode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelevantRecommendation_Episode): RelevantRecommendation_Episode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 episode_id */ 1:
                    message.episodeId = reader.int64().toBigInt();
                    break;
                case /* string episode_name */ 2:
                    message.episodeName = reader.string();
                    break;
                case /* data.Image episode_cover */ 3:
                    message.episodeCover = Image.internalBinaryRead(reader, reader.uint32(), options, message.episodeCover);
                    break;
                case /* string current_period */ 4:
                    message.currentPeriod = reader.string();
                    break;
                case /* int64 season_id */ 5:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* string item_id */ 6:
                    message.itemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RelevantRecommendation_Episode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 episode_id = 1; */
        if (message.episodeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.episodeId);
        /* string episode_name = 2; */
        if (message.episodeName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.episodeName);
        /* data.Image episode_cover = 3; */
        if (message.episodeCover)
            Image.internalBinaryWrite(message.episodeCover, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string current_period = 4; */
        if (message.currentPeriod !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.currentPeriod);
        /* int64 season_id = 5; */
        if (message.seasonId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.seasonId);
        /* string item_id = 6; */
        if (message.itemId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RelevantRecommendation.Episode
 */
export const RelevantRecommendation_Episode = new RelevantRecommendation_Episode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelevantRecommendation_VsInfo$Type extends MessageType<RelevantRecommendation_VsInfo> {
    constructor() {
        super("data.RelevantRecommendation.VsInfo", [
            { no: 1, name: "episodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelevantRecommendation_Episode }
        ]);
    }
    create(value?: PartialMessage<RelevantRecommendation_VsInfo>): RelevantRecommendation_VsInfo {
        const message = { episodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RelevantRecommendation_VsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelevantRecommendation_VsInfo): RelevantRecommendation_VsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.RelevantRecommendation.Episode episodes */ 1:
                    message.episodes.push(RelevantRecommendation_Episode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RelevantRecommendation_VsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.RelevantRecommendation.Episode episodes = 1; */
        for (let i = 0; i < message.episodes.length; i++)
            RelevantRecommendation_Episode.internalBinaryWrite(message.episodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RelevantRecommendation.VsInfo
 */
export const RelevantRecommendation_VsInfo = new RelevantRecommendation_VsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelevantRecommendation_WhiteCategoryInfo$Type extends MessageType<RelevantRecommendation_WhiteCategoryInfo> {
    constructor() {
        super("data.RelevantRecommendation.WhiteCategoryInfo", [
            { no: 1, name: "first_level_tag_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RelevantRecommendation_WhiteCategoryInfo>): RelevantRecommendation_WhiteCategoryInfo {
        const message = { firstLevelTagId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RelevantRecommendation_WhiteCategoryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelevantRecommendation_WhiteCategoryInfo): RelevantRecommendation_WhiteCategoryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 first_level_tag_id */ 1:
                    message.firstLevelTagId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RelevantRecommendation_WhiteCategoryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 first_level_tag_id = 1; */
        if (message.firstLevelTagId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.firstLevelTagId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RelevantRecommendation.WhiteCategoryInfo
 */
export const RelevantRecommendation_WhiteCategoryInfo = new RelevantRecommendation_WhiteCategoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndustryServiceInfo$Type extends MessageType<IndustryServiceInfo> {
    constructor() {
        super("data.IndustryServiceInfo", [
            { no: 1, name: "entrance_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "icon_image", kind: "message", T: () => Image },
            { no: 3, name: "consult_info", kind: "message", T: () => IndustryServiceInfo_ConsultInfo }
        ]);
    }
    create(value?: PartialMessage<IndustryServiceInfo>): IndustryServiceInfo {
        const message = { entranceOpen: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndustryServiceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndustryServiceInfo): IndustryServiceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool entrance_open */ 1:
                    message.entranceOpen = reader.bool();
                    break;
                case /* data.Image icon_image */ 2:
                    message.iconImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconImage);
                    break;
                case /* data.IndustryServiceInfo.ConsultInfo consult_info */ 3:
                    message.consultInfo = IndustryServiceInfo_ConsultInfo.internalBinaryRead(reader, reader.uint32(), options, message.consultInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndustryServiceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool entrance_open = 1; */
        if (message.entranceOpen !== false)
            writer.tag(1, WireType.Varint).bool(message.entranceOpen);
        /* data.Image icon_image = 2; */
        if (message.iconImage)
            Image.internalBinaryWrite(message.iconImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.IndustryServiceInfo.ConsultInfo consult_info = 3; */
        if (message.consultInfo)
            IndustryServiceInfo_ConsultInfo.internalBinaryWrite(message.consultInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.IndustryServiceInfo
 */
export const IndustryServiceInfo = new IndustryServiceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndustryServiceInfo_ConsultInfo$Type extends MessageType<IndustryServiceInfo_ConsultInfo> {
    constructor() {
        super("data.IndustryServiceInfo.ConsultInfo", [
            { no: 1, name: "biz_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "consult_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IndustryServiceInfo_ConsultInfo>): IndustryServiceInfo_ConsultInfo {
        const message = { bizInfo: "", consultRole: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndustryServiceInfo_ConsultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndustryServiceInfo_ConsultInfo): IndustryServiceInfo_ConsultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string biz_info */ 1:
                    message.bizInfo = reader.string();
                    break;
                case /* int32 consult_role */ 2:
                    message.consultRole = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndustryServiceInfo_ConsultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string biz_info = 1; */
        if (message.bizInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bizInfo);
        /* int32 consult_role = 2; */
        if (message.consultRole !== 0)
            writer.tag(2, WireType.Varint).int32(message.consultRole);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.IndustryServiceInfo.ConsultInfo
 */
export const IndustryServiceInfo_ConsultInfo = new IndustryServiceInfo_ConsultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomData$Type extends MessageType<EcomData> {
    constructor() {
        super("data.EcomData", [
            { no: 1, name: "live_card", kind: "message", T: () => EcomLiveCard },
            { no: 2, name: "pop", kind: "message", T: () => EcomPop },
            { no: 3, name: "goods_card", kind: "message", T: () => EcomGoodsCard },
            { no: 4, name: "reds_show_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedsShowInfo },
            { no: 5, name: "room_cart_v2", kind: "message", T: () => RoomCartV2 }
        ]);
    }
    create(value?: PartialMessage<EcomData>): EcomData {
        const message = { redsShowInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomData): EcomData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.EcomLiveCard live_card */ 1:
                    message.liveCard = EcomLiveCard.internalBinaryRead(reader, reader.uint32(), options, message.liveCard);
                    break;
                case /* data.EcomPop pop */ 2:
                    message.pop = EcomPop.internalBinaryRead(reader, reader.uint32(), options, message.pop);
                    break;
                case /* data.EcomGoodsCard goods_card */ 3:
                    message.goodsCard = EcomGoodsCard.internalBinaryRead(reader, reader.uint32(), options, message.goodsCard);
                    break;
                case /* repeated data.RedsShowInfo reds_show_infos */ 4:
                    message.redsShowInfos.push(RedsShowInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.RoomCartV2 room_cart_v2 */ 5:
                    message.roomCartV2 = RoomCartV2.internalBinaryRead(reader, reader.uint32(), options, message.roomCartV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.EcomLiveCard live_card = 1; */
        if (message.liveCard)
            EcomLiveCard.internalBinaryWrite(message.liveCard, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.EcomPop pop = 2; */
        if (message.pop)
            EcomPop.internalBinaryWrite(message.pop, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.EcomGoodsCard goods_card = 3; */
        if (message.goodsCard)
            EcomGoodsCard.internalBinaryWrite(message.goodsCard, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RedsShowInfo reds_show_infos = 4; */
        for (let i = 0; i < message.redsShowInfos.length; i++)
            RedsShowInfo.internalBinaryWrite(message.redsShowInfos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomCartV2 room_cart_v2 = 5; */
        if (message.roomCartV2)
            RoomCartV2.internalBinaryWrite(message.roomCartV2, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomData
 */
export const EcomData = new EcomData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AvatarLiveInfo$Type extends MessageType<AvatarLiveInfo> {
    constructor() {
        super("data.AvatarLiveInfo", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<AvatarLiveInfo>): AvatarLiveInfo {
        const message = { type: "", text: "", textSize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarLiveInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarLiveInfo): AvatarLiveInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int32 text_size */ 3:
                    message.textSize = reader.int32();
                    break;
                case /* data.Image image */ 4:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AvatarLiveInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int32 text_size = 3; */
        if (message.textSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.textSize);
        /* data.Image image = 4; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AvatarLiveInfo
 */
export const AvatarLiveInfo = new AvatarLiveInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WelfareProjectInfo$Type extends MessageType<WelfareProjectInfo> {
    constructor() {
        super("data.WelfareProjectInfo", [
            { no: 1, name: "project_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "show_frequency", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "container_card_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "welfare_detail_page_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "project_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WelfareProjectInfo>): WelfareProjectInfo {
        const message = { projectId: 0n, showFrequency: 0n, containerCardUrl: "", welfareDetailPageUrl: "", projectIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WelfareProjectInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WelfareProjectInfo): WelfareProjectInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project_id */ 1:
                    message.projectId = reader.int64().toBigInt();
                    break;
                case /* int64 show_frequency */ 2:
                    message.showFrequency = reader.int64().toBigInt();
                    break;
                case /* string container_card_url */ 3:
                    message.containerCardUrl = reader.string();
                    break;
                case /* string welfare_detail_page_url */ 4:
                    message.welfareDetailPageUrl = reader.string();
                    break;
                case /* string project_id_str */ 5:
                    message.projectIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WelfareProjectInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 project_id = 1; */
        if (message.projectId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.projectId);
        /* int64 show_frequency = 2; */
        if (message.showFrequency !== 0n)
            writer.tag(2, WireType.Varint).int64(message.showFrequency);
        /* string container_card_url = 3; */
        if (message.containerCardUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.containerCardUrl);
        /* string welfare_detail_page_url = 4; */
        if (message.welfareDetailPageUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.welfareDetailPageUrl);
        /* string project_id_str = 5; */
        if (message.projectIdStr !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.projectIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.WelfareProjectInfo
 */
export const WelfareProjectInfo = new WelfareProjectInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CornerMarkReach$Type extends MessageType<CornerMarkReach> {
    constructor() {
        super("data.CornerMarkReach", [
            { no: 1, name: "need_reach", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "elem_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CornerMarkReach>): CornerMarkReach {
        const message = { needReach: false, duration: 0n, elemType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CornerMarkReach>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CornerMarkReach): CornerMarkReach {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool need_reach */ 1:
                    message.needReach = reader.bool();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 elem_type */ 3:
                    message.elemType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CornerMarkReach, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool need_reach = 1; */
        if (message.needReach !== false)
            writer.tag(1, WireType.Varint).bool(message.needReach);
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* int64 elem_type = 3; */
        if (message.elemType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.elemType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CornerMarkReach
 */
export const CornerMarkReach = new CornerMarkReach$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerticalTypeInfo$Type extends MessageType<VerticalTypeInfo> {
    constructor() {
        super("data.VerticalTypeInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tab_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "tag_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "is_sub_tag", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "icon", kind: "message", T: () => Image },
            { no: 6, name: "valid_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "event_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerticalTypeInfo>): VerticalTypeInfo {
        const message = { name: "", tabType: 0n, tagId: 0n, isSubTag: false, validTime: 0n, priority: 0n, extra: "", eventExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerticalTypeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerticalTypeInfo): VerticalTypeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 tab_type */ 2:
                    message.tabType = reader.int64().toBigInt();
                    break;
                case /* int64 tag_id */ 3:
                    message.tagId = reader.int64().toBigInt();
                    break;
                case /* bool is_sub_tag */ 4:
                    message.isSubTag = reader.bool();
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 valid_time */ 6:
                    message.validTime = reader.int64().toBigInt();
                    break;
                case /* int64 priority */ 7:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* string extra */ 8:
                    message.extra = reader.string();
                    break;
                case /* string event_extra */ 9:
                    message.eventExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerticalTypeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 tab_type = 2; */
        if (message.tabType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.tabType);
        /* int64 tag_id = 3; */
        if (message.tagId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.tagId);
        /* bool is_sub_tag = 4; */
        if (message.isSubTag !== false)
            writer.tag(4, WireType.Varint).bool(message.isSubTag);
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 valid_time = 6; */
        if (message.validTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.validTime);
        /* int64 priority = 7; */
        if (message.priority !== 0n)
            writer.tag(7, WireType.Varint).int64(message.priority);
        /* string extra = 8; */
        if (message.extra !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.extra);
        /* string event_extra = 9; */
        if (message.eventExtra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.eventExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VerticalTypeInfo
 */
export const VerticalTypeInfo = new VerticalTypeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterWord$Type extends MessageType<FilterWord> {
    constructor() {
        super("data.FilterWord", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_selected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FilterWord>): FilterWord {
        const message = { id: "", isSelected: false, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FilterWord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterWord): FilterWord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool is_selected */ 2:
                    message.isSelected = reader.bool();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterWord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool is_selected = 2; */
        if (message.isSelected !== false)
            writer.tag(2, WireType.Varint).bool(message.isSelected);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FilterWord
 */
export const FilterWord = new FilterWord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelInfo$Type extends MessageType<LabelInfo> {
    constructor() {
        super("data.LabelInfo", [
            { no: 1, name: "label_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "display_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "splice_label", kind: "message", T: () => SpliceLabel },
            { no: 4, name: "whole_label", kind: "message", T: () => Image },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "profile_pic_splice_label", kind: "message", T: () => ProfilePicSpliceLabel }
        ]);
    }
    create(value?: PartialMessage<LabelInfo>): LabelInfo {
        const message = { labelType: 0n, displayType: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelInfo): LabelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 label_type */ 1:
                    message.labelType = reader.int64().toBigInt();
                    break;
                case /* int64 display_type */ 2:
                    message.displayType = reader.int64().toBigInt();
                    break;
                case /* data.SpliceLabel splice_label */ 3:
                    message.spliceLabel = SpliceLabel.internalBinaryRead(reader, reader.uint32(), options, message.spliceLabel);
                    break;
                case /* data.Image whole_label */ 4:
                    message.wholeLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.wholeLabel);
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                case /* data.ProfilePicSpliceLabel profile_pic_splice_label */ 6:
                    message.profilePicSpliceLabel = ProfilePicSpliceLabel.internalBinaryRead(reader, reader.uint32(), options, message.profilePicSpliceLabel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 label_type = 1; */
        if (message.labelType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.labelType);
        /* int64 display_type = 2; */
        if (message.displayType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.displayType);
        /* data.SpliceLabel splice_label = 3; */
        if (message.spliceLabel)
            SpliceLabel.internalBinaryWrite(message.spliceLabel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image whole_label = 4; */
        if (message.wholeLabel)
            Image.internalBinaryWrite(message.wholeLabel, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        /* data.ProfilePicSpliceLabel profile_pic_splice_label = 6; */
        if (message.profilePicSpliceLabel)
            ProfilePicSpliceLabel.internalBinaryWrite(message.profilePicSpliceLabel, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LabelInfo
 */
export const LabelInfo = new LabelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSLinkInfo$Type extends MessageType<VSLinkInfo> {
    constructor() {
        super("data.VSLinkInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tab_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rooms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VSLinkNode },
            { no: 4, name: "pattern", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VSLinkInfo>): VSLinkInfo {
        const message = { title: "", tabTitle: "", rooms: [], pattern: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSLinkInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSLinkInfo): VSLinkInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string tab_title */ 2:
                    message.tabTitle = reader.string();
                    break;
                case /* repeated data.VSLinkNode rooms */ 3:
                    message.rooms.push(VSLinkNode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 pattern */ 4:
                    message.pattern = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSLinkInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string tab_title = 2; */
        if (message.tabTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tabTitle);
        /* repeated data.VSLinkNode rooms = 3; */
        for (let i = 0; i < message.rooms.length; i++)
            VSLinkNode.internalBinaryWrite(message.rooms[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 pattern = 4; */
        if (message.pattern !== 0)
            writer.tag(4, WireType.Varint).int32(message.pattern);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSLinkInfo
 */
export const VSLinkInfo = new VSLinkInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSLinkNode$Type extends MessageType<VSLinkNode> {
    constructor() {
        super("data.VSLinkNode", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "live_room_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "owner", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<VSLinkNode>): VSLinkNode {
        const message = { roomId: 0n, roomIdStr: "", title: "", liveRoomMode: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSLinkNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSLinkNode): VSLinkNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* string room_id_str */ 2:
                    message.roomIdStr = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* int64 live_room_mode */ 4:
                    message.liveRoomMode = reader.int64().toBigInt();
                    break;
                case /* data.User owner */ 5:
                    message.owner = User.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSLinkNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        /* string room_id_str = 2; */
        if (message.roomIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomIdStr);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* int64 live_room_mode = 4; */
        if (message.liveRoomMode !== 0n)
            writer.tag(4, WireType.Varint).int64(message.liveRoomMode);
        /* data.User owner = 5; */
        if (message.owner)
            User.internalBinaryWrite(message.owner, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSLinkNode
 */
export const VSLinkNode = new VSLinkNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpliceLabel$Type extends MessageType<SpliceLabel> {
    constructor() {
        super("data.SpliceLabel", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "background_image", kind: "message", T: () => Image },
            { no: 4, name: "icon_image", kind: "message", T: () => Image },
            { no: 5, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SpliceLabel>): SpliceLabel {
        const message = { text: "", textColor: "", backgroundColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpliceLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpliceLabel): SpliceLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* data.Image background_image */ 3:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* data.Image icon_image */ 4:
                    message.iconImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconImage);
                    break;
                case /* string background_color */ 5:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpliceLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* data.Image background_image = 3; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon_image = 4; */
        if (message.iconImage)
            Image.internalBinaryWrite(message.iconImage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string background_color = 5; */
        if (message.backgroundColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SpliceLabel
 */
export const SpliceLabel = new SpliceLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfilePicSpliceLabel$Type extends MessageType<ProfilePicSpliceLabel> {
    constructor() {
        super("data.ProfilePicSpliceLabel", [
            { no: 1, name: "profile_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LabelProfileItem }
        ]);
    }
    create(value?: PartialMessage<ProfilePicSpliceLabel>): ProfilePicSpliceLabel {
        const message = { profileList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfilePicSpliceLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfilePicSpliceLabel): ProfilePicSpliceLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.LabelProfileItem profile_list */ 1:
                    message.profileList.push(LabelProfileItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfilePicSpliceLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.LabelProfileItem profile_list = 1; */
        for (let i = 0; i < message.profileList.length; i++)
            LabelProfileItem.internalBinaryWrite(message.profileList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ProfilePicSpliceLabel
 */
export const ProfilePicSpliceLabel = new ProfilePicSpliceLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelProfileItem$Type extends MessageType<LabelProfileItem> {
    constructor() {
        super("data.LabelProfileItem", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "profile_pic", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LabelProfileItem>): LabelProfileItem {
        const message = { userId: 0n, nickName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelProfileItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelProfileItem): LabelProfileItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string nick_name */ 2:
                    message.nickName = reader.string();
                    break;
                case /* data.Image profile_pic */ 3:
                    message.profilePic = Image.internalBinaryRead(reader, reader.uint32(), options, message.profilePic);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelProfileItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string nick_name = 2; */
        if (message.nickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickName);
        /* data.Image profile_pic = 3; */
        if (message.profilePic)
            Image.internalBinaryWrite(message.profilePic, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LabelProfileItem
 */
export const LabelProfileItem = new LabelProfileItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveStatusInfo$Type extends MessageType<LiveStatusInfo> {
    constructor() {
        super("data.LiveStatusInfo", [
            { no: 1, name: "live_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "live_user", kind: "message", T: () => User },
            { no: 4, name: "preview_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LiveStatusInfo>): LiveStatusInfo {
        const message = { liveStatus: 0, previewText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveStatusInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveStatusInfo): LiveStatusInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 live_status */ 1:
                    message.liveStatus = reader.int32();
                    break;
                case /* data.User live_user */ 2:
                    message.liveUser = User.internalBinaryRead(reader, reader.uint32(), options, message.liveUser);
                    break;
                case /* string preview_text */ 4:
                    message.previewText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveStatusInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 live_status = 1; */
        if (message.liveStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.liveStatus);
        /* data.User live_user = 2; */
        if (message.liveUser)
            User.internalBinaryWrite(message.liveUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string preview_text = 4; */
        if (message.previewText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.previewText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LiveStatusInfo
 */
export const LiveStatusInfo = new LiveStatusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchAuth$Type extends MessageType<ShortTouchAuth> {
    constructor() {
        super("data.ShortTouchAuth", [
            { no: 1, name: "commerce_lottery", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShortTouchAuth>): ShortTouchAuth {
        const message = { commerceLottery: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchAuth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchAuth): ShortTouchAuth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 commerce_lottery */ 1:
                    message.commerceLottery = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchAuth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 commerce_lottery = 1; */
        if (message.commerceLottery !== 0)
            writer.tag(1, WireType.Varint).int32(message.commerceLottery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShortTouchAuth
 */
export const ShortTouchAuth = new ShortTouchAuth$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpisodeMod$Type extends MessageType<EpisodeMod> {
    constructor() {
        super("data.EpisodeMod", [
            { no: 1, name: "episode_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "episode_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "episode_sub_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "episode_record_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EpisodeMod>): EpisodeMod {
        const message = { episodeStage: 0, episodeType: 0, episodeSubType: 0, episodeRecordType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpisodeMod>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpisodeMod): EpisodeMod {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 episode_stage */ 1:
                    message.episodeStage = reader.int32();
                    break;
                case /* int32 episode_type */ 2:
                    message.episodeType = reader.int32();
                    break;
                case /* int32 episode_sub_type */ 3:
                    message.episodeSubType = reader.int32();
                    break;
                case /* int32 episode_record_type */ 4:
                    message.episodeRecordType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpisodeMod, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 episode_stage = 1; */
        if (message.episodeStage !== 0)
            writer.tag(1, WireType.Varint).int32(message.episodeStage);
        /* int32 episode_type = 2; */
        if (message.episodeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.episodeType);
        /* int32 episode_sub_type = 3; */
        if (message.episodeSubType !== 0)
            writer.tag(3, WireType.Varint).int32(message.episodeSubType);
        /* int32 episode_record_type = 4; */
        if (message.episodeRecordType !== 0)
            writer.tag(4, WireType.Varint).int32(message.episodeRecordType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EpisodeMod
 */
export const EpisodeMod = new EpisodeMod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolbarItemConfig$Type extends MessageType<ToolbarItemConfig> {
    constructor() {
        super("data.ToolbarItemConfig", [
            { no: 1, name: "toolbar_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "icon", kind: "message", T: () => Image },
            { no: 3, name: "jump_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "display_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "dynamic_icon", kind: "message", T: () => Image },
            { no: 6, name: "icon_vertical", kind: "message", T: () => Image },
            { no: 7, name: "dynamic_bottom_icon", kind: "message", T: () => Image },
            { no: 8, name: "bottom_icon", kind: "message", T: () => Image },
            { no: 9, name: "toast_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Toast },
            { no: 10, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToolbarItemConfig>): ToolbarItemConfig {
        const message = { toolbarType: 0, jumpSchema: "", displayType: 0, toastList: [], extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolbarItemConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolbarItemConfig): ToolbarItemConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 toolbar_type */ 1:
                    message.toolbarType = reader.int32();
                    break;
                case /* data.Image icon */ 2:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string jump_schema */ 3:
                    message.jumpSchema = reader.string();
                    break;
                case /* int32 display_type */ 4:
                    message.displayType = reader.int32();
                    break;
                case /* data.Image dynamic_icon */ 5:
                    message.dynamicIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.dynamicIcon);
                    break;
                case /* data.Image icon_vertical */ 6:
                    message.iconVertical = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconVertical);
                    break;
                case /* data.Image dynamic_bottom_icon */ 7:
                    message.dynamicBottomIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.dynamicBottomIcon);
                    break;
                case /* data.Image bottom_icon */ 8:
                    message.bottomIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.bottomIcon);
                    break;
                case /* repeated data.Toast toast_list */ 9:
                    message.toastList.push(Toast.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string extra */ 10:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolbarItemConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 toolbar_type = 1; */
        if (message.toolbarType !== 0)
            writer.tag(1, WireType.Varint).int32(message.toolbarType);
        /* data.Image icon = 2; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string jump_schema = 3; */
        if (message.jumpSchema !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.jumpSchema);
        /* int32 display_type = 4; */
        if (message.displayType !== 0)
            writer.tag(4, WireType.Varint).int32(message.displayType);
        /* data.Image dynamic_icon = 5; */
        if (message.dynamicIcon)
            Image.internalBinaryWrite(message.dynamicIcon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon_vertical = 6; */
        if (message.iconVertical)
            Image.internalBinaryWrite(message.iconVertical, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image dynamic_bottom_icon = 7; */
        if (message.dynamicBottomIcon)
            Image.internalBinaryWrite(message.dynamicBottomIcon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Image bottom_icon = 8; */
        if (message.bottomIcon)
            Image.internalBinaryWrite(message.bottomIcon, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Toast toast_list = 9; */
        for (let i = 0; i < message.toastList.length; i++)
            Toast.internalBinaryWrite(message.toastList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 10; */
        if (message.extra !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ToolbarItemConfig
 */
export const ToolbarItemConfig = new ToolbarItemConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Toast$Type extends MessageType<Toast> {
    constructor() {
        super("data.Toast", [
            { no: 1, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "toast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Toast>): Toast {
        const message = { startTime: 0n, endTime: 0n, content: "", schema: "", toastId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Toast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Toast): Toast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_time */ 1:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 2:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string schema */ 4:
                    message.schema = reader.string();
                    break;
                case /* string toast_id */ 5:
                    message.toastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Toast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_time = 1; */
        if (message.startTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 2; */
        if (message.endTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.endTime);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string schema = 4; */
        if (message.schema !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.schema);
        /* string toast_id = 5; */
        if (message.toastId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Toast
 */
export const Toast = new Toast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WatchInfo$Type extends MessageType<WatchInfo> {
    constructor() {
        super("data.WatchInfo", [
            { no: 1, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count_with_backup", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "real_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "real_count_int64", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "live_count_display_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "display_type_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "format_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WatchInfo>): WatchInfo {
        const message = { desc: "", count: "", countWithBackup: "", realCount: 0, realCountInt64: 0n, liveCountDisplayType: 0, displayTypeStartTime: 0n, formatCount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WatchInfo): WatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string desc */ 1:
                    message.desc = reader.string();
                    break;
                case /* string count */ 2:
                    message.count = reader.string();
                    break;
                case /* string count_with_backup */ 3:
                    message.countWithBackup = reader.string();
                    break;
                case /* int32 real_count */ 4:
                    message.realCount = reader.int32();
                    break;
                case /* int64 real_count_int64 */ 5:
                    message.realCountInt64 = reader.int64().toBigInt();
                    break;
                case /* int32 live_count_display_type */ 6:
                    message.liveCountDisplayType = reader.int32();
                    break;
                case /* int64 display_type_start_time */ 7:
                    message.displayTypeStartTime = reader.int64().toBigInt();
                    break;
                case /* string format_count */ 8:
                    message.formatCount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string desc = 1; */
        if (message.desc !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.desc);
        /* string count = 2; */
        if (message.count !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.count);
        /* string count_with_backup = 3; */
        if (message.countWithBackup !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.countWithBackup);
        /* int32 real_count = 4; */
        if (message.realCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.realCount);
        /* int64 real_count_int64 = 5; */
        if (message.realCountInt64 !== 0n)
            writer.tag(5, WireType.Varint).int64(message.realCountInt64);
        /* int32 live_count_display_type = 6; */
        if (message.liveCountDisplayType !== 0)
            writer.tag(6, WireType.Varint).int32(message.liveCountDisplayType);
        /* int64 display_type_start_time = 7; */
        if (message.displayTypeStartTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.displayTypeStartTime);
        /* string format_count = 8; */
        if (message.formatCount !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.formatCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.WatchInfo
 */
export const WatchInfo = new WatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpisodeExtraInfo$Type extends MessageType<EpisodeExtraInfo> {
    constructor() {
        super("data.EpisodeExtraInfo", [
            { no: 1, name: "episode_mod", kind: "message", T: () => EpisodeMod },
            { no: 2, name: "current_period", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "episode_list_h5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "watch_info", kind: "message", T: () => WatchInfo },
            { no: 6, name: "episode_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "episode_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "selection_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "relation_place_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "operation_place_text_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "toolbar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolbarItemConfig },
            { no: 13, name: "collected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "finish_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "release_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "watch_period", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "latest_period", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "show_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "current_period_raw", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "video_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "season_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "watch_pv_raw", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "next_special_episode_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "cover", kind: "message", T: () => Image },
            { no: 26, name: "cover_vertical", kind: "message", T: () => Image },
            { no: 27, name: "style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 28, name: "play_control", kind: "message", T: () => EpisodePremierePlay },
            { no: 29, name: "preview_image", kind: "message", T: () => EpisodePreviewImage },
            { no: 30, name: "gift_pannel", kind: "message", T: () => VSGiftPannel },
            { no: 31, name: "pannel_icon", kind: "message", T: () => VSPannelIcon },
            { no: 32, name: "pannel_toolbar", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolbarItemConfig },
            { no: 33, name: "preview_bottom", kind: "message", T: () => EpisodePreviewBottom },
            { no: 34, name: "draw_sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 35, name: "season_cover_vertical", kind: "message", T: () => Image },
            { no: 36, name: "camera_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VSCameraInfo },
            { no: 37, name: "default_camera_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 38, name: "default_camera_id_str", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 39, name: "default_camera_id_str_v2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 40, name: "priority_camera", kind: "message", T: () => VSCameraInfo },
            { no: 41, name: "multi_season_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 42, name: "preview_background", kind: "message", T: () => Image },
            { no: 43, name: "background", kind: "message", T: () => Image },
            { no: 44, name: "mod", kind: "message", T: () => EpisodeMod },
            { no: 45, name: "item_comment_icon", kind: "message", T: () => Image },
            { no: 46, name: "vs_watermark", kind: "message", T: () => VSWatermark },
            { no: 47, name: "item_comment", kind: "message", T: () => VSItemComment },
            { no: 48, name: "season_type_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 49, name: "vs_bar", kind: "message", T: () => VSBar },
            { no: 50, name: "season_watch_info", kind: "message", T: () => WatchInfo },
            { no: 51, name: "link_room_info", kind: "message", T: () => VSLinkInfo },
            { no: 52, name: "comment_config", kind: "message", T: () => CommentConfig },
            { no: 53, name: "camera_infos_table_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 54, name: "episode_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 55, name: "match_room_info", kind: "message", T: () => MatchRoomInfo },
            { no: 56, name: "multi_camera_basic_info", kind: "message", T: () => MultiCameraBasicInfo },
            { no: 57, name: "share_poster_info", kind: "message", T: () => SharePosterInfo },
            { no: 58, name: "premiere_toast", kind: "message", T: () => VSPremiereToast },
            { no: 59, name: "preview_bottom_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 60, name: "business_configure", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BusinessConfigure },
            { no: 61, name: "public_screen_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 62, name: "chat_tray_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 63, name: "multi_tab", kind: "message", T: () => MultiTab },
            { no: 64, name: "main_camera_cover", kind: "message", T: () => Image },
            { no: 65, name: "main_camera_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 67, name: "is_interact_config_exist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 68, name: "main_camera_match_info", kind: "message", T: () => MainCameraMatchInfo },
            { no: 69, name: "group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 70, name: "vs_config_drawer", kind: "message", T: () => VSConfigDrawer },
            { no: 71, name: "title_icon", kind: "message", T: () => TitleIcon },
            { no: 72, name: "group_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EpisodeExtraInfo>): EpisodeExtraInfo {
        const message = { currentPeriod: "", title: "", episodeListH5: "", episodeId: 0n, episodeIdStr: "", itemId: "", selectionUrl: "", relationPlaceText: "", operationPlaceTextList: [], toolbarList: [], collected: false, seasonId: 0n, finishUrl: "", releaseTime: "", watchPeriod: 0n, latestPeriod: 0n, showName: "", currentPeriodRaw: 0, videoCode: 0, seasonIdStr: "", watchPvRaw: "", nextSpecialEpisodeId: 0n, style: 0, pannelToolbar: [], drawSubTitle: "", cameraInfos: [], defaultCameraId: 0n, defaultCameraIdStr: 0n, defaultCameraIdStrV2: "", multiSeasonTag: "", seasonTypeName: "", cameraInfosTableTitle: "", episodeStatus: 0, previewBottomText: "", businessConfigure: [], publicScreenColor: "", chatTrayColor: "", mainCameraTitle: "", isInteractConfigExist: false, groupId: 0n, groupIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpisodeExtraInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpisodeExtraInfo): EpisodeExtraInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.EpisodeMod episode_mod */ 1:
                    message.episodeMod = EpisodeMod.internalBinaryRead(reader, reader.uint32(), options, message.episodeMod);
                    break;
                case /* string current_period */ 2:
                    message.currentPeriod = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string episode_list_h5 */ 4:
                    message.episodeListH5 = reader.string();
                    break;
                case /* data.WatchInfo watch_info */ 5:
                    message.watchInfo = WatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.watchInfo);
                    break;
                case /* int64 episode_id */ 6:
                    message.episodeId = reader.int64().toBigInt();
                    break;
                case /* string episode_id_str */ 7:
                    message.episodeIdStr = reader.string();
                    break;
                case /* string item_id */ 8:
                    message.itemId = reader.string();
                    break;
                case /* string selection_url */ 9:
                    message.selectionUrl = reader.string();
                    break;
                case /* string relation_place_text */ 10:
                    message.relationPlaceText = reader.string();
                    break;
                case /* repeated string operation_place_text_list */ 11:
                    message.operationPlaceTextList.push(reader.string());
                    break;
                case /* repeated data.ToolbarItemConfig toolbar_list */ 12:
                    message.toolbarList.push(ToolbarItemConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool collected */ 13:
                    message.collected = reader.bool();
                    break;
                case /* int64 season_id */ 14:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* string finish_url */ 15:
                    message.finishUrl = reader.string();
                    break;
                case /* string release_time */ 16:
                    message.releaseTime = reader.string();
                    break;
                case /* int64 watch_period */ 17:
                    message.watchPeriod = reader.int64().toBigInt();
                    break;
                case /* int64 latest_period */ 18:
                    message.latestPeriod = reader.int64().toBigInt();
                    break;
                case /* string show_name */ 19:
                    message.showName = reader.string();
                    break;
                case /* int32 current_period_raw */ 20:
                    message.currentPeriodRaw = reader.int32();
                    break;
                case /* int32 video_code */ 21:
                    message.videoCode = reader.int32();
                    break;
                case /* string season_id_str */ 22:
                    message.seasonIdStr = reader.string();
                    break;
                case /* string watch_pv_raw */ 23:
                    message.watchPvRaw = reader.string();
                    break;
                case /* int64 next_special_episode_id */ 24:
                    message.nextSpecialEpisodeId = reader.int64().toBigInt();
                    break;
                case /* data.Image cover */ 25:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                case /* data.Image cover_vertical */ 26:
                    message.coverVertical = Image.internalBinaryRead(reader, reader.uint32(), options, message.coverVertical);
                    break;
                case /* int32 style */ 27:
                    message.style = reader.int32();
                    break;
                case /* data.EpisodePremierePlay play_control */ 28:
                    message.playControl = EpisodePremierePlay.internalBinaryRead(reader, reader.uint32(), options, message.playControl);
                    break;
                case /* data.EpisodePreviewImage preview_image */ 29:
                    message.previewImage = EpisodePreviewImage.internalBinaryRead(reader, reader.uint32(), options, message.previewImage);
                    break;
                case /* data.VSGiftPannel gift_pannel */ 30:
                    message.giftPannel = VSGiftPannel.internalBinaryRead(reader, reader.uint32(), options, message.giftPannel);
                    break;
                case /* data.VSPannelIcon pannel_icon */ 31:
                    message.pannelIcon = VSPannelIcon.internalBinaryRead(reader, reader.uint32(), options, message.pannelIcon);
                    break;
                case /* repeated data.ToolbarItemConfig pannel_toolbar */ 32:
                    message.pannelToolbar.push(ToolbarItemConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.EpisodePreviewBottom preview_bottom */ 33:
                    message.previewBottom = EpisodePreviewBottom.internalBinaryRead(reader, reader.uint32(), options, message.previewBottom);
                    break;
                case /* string draw_sub_title */ 34:
                    message.drawSubTitle = reader.string();
                    break;
                case /* data.Image season_cover_vertical */ 35:
                    message.seasonCoverVertical = Image.internalBinaryRead(reader, reader.uint32(), options, message.seasonCoverVertical);
                    break;
                case /* repeated data.VSCameraInfo camera_infos */ 36:
                    message.cameraInfos.push(VSCameraInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 default_camera_id */ 37:
                    message.defaultCameraId = reader.int64().toBigInt();
                    break;
                case /* int64 default_camera_id_str */ 38:
                    message.defaultCameraIdStr = reader.int64().toBigInt();
                    break;
                case /* string default_camera_id_str_v2 */ 39:
                    message.defaultCameraIdStrV2 = reader.string();
                    break;
                case /* data.VSCameraInfo priority_camera */ 40:
                    message.priorityCamera = VSCameraInfo.internalBinaryRead(reader, reader.uint32(), options, message.priorityCamera);
                    break;
                case /* string multi_season_tag */ 41:
                    message.multiSeasonTag = reader.string();
                    break;
                case /* data.Image preview_background */ 42:
                    message.previewBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.previewBackground);
                    break;
                case /* data.Image background */ 43:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* data.EpisodeMod mod */ 44:
                    message.mod = EpisodeMod.internalBinaryRead(reader, reader.uint32(), options, message.mod);
                    break;
                case /* data.Image item_comment_icon */ 45:
                    message.itemCommentIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.itemCommentIcon);
                    break;
                case /* data.VSWatermark vs_watermark */ 46:
                    message.vsWatermark = VSWatermark.internalBinaryRead(reader, reader.uint32(), options, message.vsWatermark);
                    break;
                case /* data.VSItemComment item_comment */ 47:
                    message.itemComment = VSItemComment.internalBinaryRead(reader, reader.uint32(), options, message.itemComment);
                    break;
                case /* string season_type_name */ 48:
                    message.seasonTypeName = reader.string();
                    break;
                case /* data.VSBar vs_bar */ 49:
                    message.vsBar = VSBar.internalBinaryRead(reader, reader.uint32(), options, message.vsBar);
                    break;
                case /* data.WatchInfo season_watch_info */ 50:
                    message.seasonWatchInfo = WatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.seasonWatchInfo);
                    break;
                case /* data.VSLinkInfo link_room_info */ 51:
                    message.linkRoomInfo = VSLinkInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkRoomInfo);
                    break;
                case /* data.CommentConfig comment_config */ 52:
                    message.commentConfig = CommentConfig.internalBinaryRead(reader, reader.uint32(), options, message.commentConfig);
                    break;
                case /* string camera_infos_table_title */ 53:
                    message.cameraInfosTableTitle = reader.string();
                    break;
                case /* int32 episode_status */ 54:
                    message.episodeStatus = reader.int32();
                    break;
                case /* data.MatchRoomInfo match_room_info */ 55:
                    message.matchRoomInfo = MatchRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.matchRoomInfo);
                    break;
                case /* data.MultiCameraBasicInfo multi_camera_basic_info */ 56:
                    message.multiCameraBasicInfo = MultiCameraBasicInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiCameraBasicInfo);
                    break;
                case /* data.SharePosterInfo share_poster_info */ 57:
                    message.sharePosterInfo = SharePosterInfo.internalBinaryRead(reader, reader.uint32(), options, message.sharePosterInfo);
                    break;
                case /* data.VSPremiereToast premiere_toast */ 58:
                    message.premiereToast = VSPremiereToast.internalBinaryRead(reader, reader.uint32(), options, message.premiereToast);
                    break;
                case /* string preview_bottom_text */ 59:
                    message.previewBottomText = reader.string();
                    break;
                case /* repeated data.BusinessConfigure business_configure */ 60:
                    message.businessConfigure.push(BusinessConfigure.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string public_screen_color */ 61:
                    message.publicScreenColor = reader.string();
                    break;
                case /* string chat_tray_color */ 62:
                    message.chatTrayColor = reader.string();
                    break;
                case /* data.MultiTab multi_tab */ 63:
                    message.multiTab = MultiTab.internalBinaryRead(reader, reader.uint32(), options, message.multiTab);
                    break;
                case /* data.Image main_camera_cover */ 64:
                    message.mainCameraCover = Image.internalBinaryRead(reader, reader.uint32(), options, message.mainCameraCover);
                    break;
                case /* string main_camera_title */ 65:
                    message.mainCameraTitle = reader.string();
                    break;
                case /* bool is_interact_config_exist */ 67:
                    message.isInteractConfigExist = reader.bool();
                    break;
                case /* data.MainCameraMatchInfo main_camera_match_info */ 68:
                    message.mainCameraMatchInfo = MainCameraMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.mainCameraMatchInfo);
                    break;
                case /* int64 group_id */ 69:
                    message.groupId = reader.int64().toBigInt();
                    break;
                case /* data.VSConfigDrawer vs_config_drawer */ 70:
                    message.vsConfigDrawer = VSConfigDrawer.internalBinaryRead(reader, reader.uint32(), options, message.vsConfigDrawer);
                    break;
                case /* data.TitleIcon title_icon */ 71:
                    message.titleIcon = TitleIcon.internalBinaryRead(reader, reader.uint32(), options, message.titleIcon);
                    break;
                case /* string group_id_str */ 72:
                    message.groupIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpisodeExtraInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.EpisodeMod episode_mod = 1; */
        if (message.episodeMod)
            EpisodeMod.internalBinaryWrite(message.episodeMod, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string current_period = 2; */
        if (message.currentPeriod !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentPeriod);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string episode_list_h5 = 4; */
        if (message.episodeListH5 !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.episodeListH5);
        /* data.WatchInfo watch_info = 5; */
        if (message.watchInfo)
            WatchInfo.internalBinaryWrite(message.watchInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 episode_id = 6; */
        if (message.episodeId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.episodeId);
        /* string episode_id_str = 7; */
        if (message.episodeIdStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.episodeIdStr);
        /* string item_id = 8; */
        if (message.itemId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.itemId);
        /* string selection_url = 9; */
        if (message.selectionUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.selectionUrl);
        /* string relation_place_text = 10; */
        if (message.relationPlaceText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.relationPlaceText);
        /* repeated string operation_place_text_list = 11; */
        for (let i = 0; i < message.operationPlaceTextList.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.operationPlaceTextList[i]);
        /* repeated data.ToolbarItemConfig toolbar_list = 12; */
        for (let i = 0; i < message.toolbarList.length; i++)
            ToolbarItemConfig.internalBinaryWrite(message.toolbarList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bool collected = 13; */
        if (message.collected !== false)
            writer.tag(13, WireType.Varint).bool(message.collected);
        /* int64 season_id = 14; */
        if (message.seasonId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.seasonId);
        /* string finish_url = 15; */
        if (message.finishUrl !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.finishUrl);
        /* string release_time = 16; */
        if (message.releaseTime !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.releaseTime);
        /* int64 watch_period = 17; */
        if (message.watchPeriod !== 0n)
            writer.tag(17, WireType.Varint).int64(message.watchPeriod);
        /* int64 latest_period = 18; */
        if (message.latestPeriod !== 0n)
            writer.tag(18, WireType.Varint).int64(message.latestPeriod);
        /* string show_name = 19; */
        if (message.showName !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.showName);
        /* int32 current_period_raw = 20; */
        if (message.currentPeriodRaw !== 0)
            writer.tag(20, WireType.Varint).int32(message.currentPeriodRaw);
        /* int32 video_code = 21; */
        if (message.videoCode !== 0)
            writer.tag(21, WireType.Varint).int32(message.videoCode);
        /* string season_id_str = 22; */
        if (message.seasonIdStr !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.seasonIdStr);
        /* string watch_pv_raw = 23; */
        if (message.watchPvRaw !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.watchPvRaw);
        /* int64 next_special_episode_id = 24; */
        if (message.nextSpecialEpisodeId !== 0n)
            writer.tag(24, WireType.Varint).int64(message.nextSpecialEpisodeId);
        /* data.Image cover = 25; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* data.Image cover_vertical = 26; */
        if (message.coverVertical)
            Image.internalBinaryWrite(message.coverVertical, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* int32 style = 27; */
        if (message.style !== 0)
            writer.tag(27, WireType.Varint).int32(message.style);
        /* data.EpisodePremierePlay play_control = 28; */
        if (message.playControl)
            EpisodePremierePlay.internalBinaryWrite(message.playControl, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* data.EpisodePreviewImage preview_image = 29; */
        if (message.previewImage)
            EpisodePreviewImage.internalBinaryWrite(message.previewImage, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* data.VSGiftPannel gift_pannel = 30; */
        if (message.giftPannel)
            VSGiftPannel.internalBinaryWrite(message.giftPannel, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* data.VSPannelIcon pannel_icon = 31; */
        if (message.pannelIcon)
            VSPannelIcon.internalBinaryWrite(message.pannelIcon, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ToolbarItemConfig pannel_toolbar = 32; */
        for (let i = 0; i < message.pannelToolbar.length; i++)
            ToolbarItemConfig.internalBinaryWrite(message.pannelToolbar[i], writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* data.EpisodePreviewBottom preview_bottom = 33; */
        if (message.previewBottom)
            EpisodePreviewBottom.internalBinaryWrite(message.previewBottom, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* string draw_sub_title = 34; */
        if (message.drawSubTitle !== "")
            writer.tag(34, WireType.LengthDelimited).string(message.drawSubTitle);
        /* data.Image season_cover_vertical = 35; */
        if (message.seasonCoverVertical)
            Image.internalBinaryWrite(message.seasonCoverVertical, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.VSCameraInfo camera_infos = 36; */
        for (let i = 0; i < message.cameraInfos.length; i++)
            VSCameraInfo.internalBinaryWrite(message.cameraInfos[i], writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* int64 default_camera_id = 37; */
        if (message.defaultCameraId !== 0n)
            writer.tag(37, WireType.Varint).int64(message.defaultCameraId);
        /* int64 default_camera_id_str = 38; */
        if (message.defaultCameraIdStr !== 0n)
            writer.tag(38, WireType.Varint).int64(message.defaultCameraIdStr);
        /* string default_camera_id_str_v2 = 39; */
        if (message.defaultCameraIdStrV2 !== "")
            writer.tag(39, WireType.LengthDelimited).string(message.defaultCameraIdStrV2);
        /* data.VSCameraInfo priority_camera = 40; */
        if (message.priorityCamera)
            VSCameraInfo.internalBinaryWrite(message.priorityCamera, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* string multi_season_tag = 41; */
        if (message.multiSeasonTag !== "")
            writer.tag(41, WireType.LengthDelimited).string(message.multiSeasonTag);
        /* data.Image preview_background = 42; */
        if (message.previewBackground)
            Image.internalBinaryWrite(message.previewBackground, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background = 43; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* data.EpisodeMod mod = 44; */
        if (message.mod)
            EpisodeMod.internalBinaryWrite(message.mod, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* data.Image item_comment_icon = 45; */
        if (message.itemCommentIcon)
            Image.internalBinaryWrite(message.itemCommentIcon, writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* data.VSWatermark vs_watermark = 46; */
        if (message.vsWatermark)
            VSWatermark.internalBinaryWrite(message.vsWatermark, writer.tag(46, WireType.LengthDelimited).fork(), options).join();
        /* data.VSItemComment item_comment = 47; */
        if (message.itemComment)
            VSItemComment.internalBinaryWrite(message.itemComment, writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* string season_type_name = 48; */
        if (message.seasonTypeName !== "")
            writer.tag(48, WireType.LengthDelimited).string(message.seasonTypeName);
        /* data.VSBar vs_bar = 49; */
        if (message.vsBar)
            VSBar.internalBinaryWrite(message.vsBar, writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* data.WatchInfo season_watch_info = 50; */
        if (message.seasonWatchInfo)
            WatchInfo.internalBinaryWrite(message.seasonWatchInfo, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* data.VSLinkInfo link_room_info = 51; */
        if (message.linkRoomInfo)
            VSLinkInfo.internalBinaryWrite(message.linkRoomInfo, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* data.CommentConfig comment_config = 52; */
        if (message.commentConfig)
            CommentConfig.internalBinaryWrite(message.commentConfig, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* string camera_infos_table_title = 53; */
        if (message.cameraInfosTableTitle !== "")
            writer.tag(53, WireType.LengthDelimited).string(message.cameraInfosTableTitle);
        /* int32 episode_status = 54; */
        if (message.episodeStatus !== 0)
            writer.tag(54, WireType.Varint).int32(message.episodeStatus);
        /* data.MatchRoomInfo match_room_info = 55; */
        if (message.matchRoomInfo)
            MatchRoomInfo.internalBinaryWrite(message.matchRoomInfo, writer.tag(55, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiCameraBasicInfo multi_camera_basic_info = 56; */
        if (message.multiCameraBasicInfo)
            MultiCameraBasicInfo.internalBinaryWrite(message.multiCameraBasicInfo, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* data.SharePosterInfo share_poster_info = 57; */
        if (message.sharePosterInfo)
            SharePosterInfo.internalBinaryWrite(message.sharePosterInfo, writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* data.VSPremiereToast premiere_toast = 58; */
        if (message.premiereToast)
            VSPremiereToast.internalBinaryWrite(message.premiereToast, writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* string preview_bottom_text = 59; */
        if (message.previewBottomText !== "")
            writer.tag(59, WireType.LengthDelimited).string(message.previewBottomText);
        /* repeated data.BusinessConfigure business_configure = 60; */
        for (let i = 0; i < message.businessConfigure.length; i++)
            BusinessConfigure.internalBinaryWrite(message.businessConfigure[i], writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* string public_screen_color = 61; */
        if (message.publicScreenColor !== "")
            writer.tag(61, WireType.LengthDelimited).string(message.publicScreenColor);
        /* string chat_tray_color = 62; */
        if (message.chatTrayColor !== "")
            writer.tag(62, WireType.LengthDelimited).string(message.chatTrayColor);
        /* data.MultiTab multi_tab = 63; */
        if (message.multiTab)
            MultiTab.internalBinaryWrite(message.multiTab, writer.tag(63, WireType.LengthDelimited).fork(), options).join();
        /* data.Image main_camera_cover = 64; */
        if (message.mainCameraCover)
            Image.internalBinaryWrite(message.mainCameraCover, writer.tag(64, WireType.LengthDelimited).fork(), options).join();
        /* string main_camera_title = 65; */
        if (message.mainCameraTitle !== "")
            writer.tag(65, WireType.LengthDelimited).string(message.mainCameraTitle);
        /* bool is_interact_config_exist = 67; */
        if (message.isInteractConfigExist !== false)
            writer.tag(67, WireType.Varint).bool(message.isInteractConfigExist);
        /* data.MainCameraMatchInfo main_camera_match_info = 68; */
        if (message.mainCameraMatchInfo)
            MainCameraMatchInfo.internalBinaryWrite(message.mainCameraMatchInfo, writer.tag(68, WireType.LengthDelimited).fork(), options).join();
        /* int64 group_id = 69; */
        if (message.groupId !== 0n)
            writer.tag(69, WireType.Varint).int64(message.groupId);
        /* data.VSConfigDrawer vs_config_drawer = 70; */
        if (message.vsConfigDrawer)
            VSConfigDrawer.internalBinaryWrite(message.vsConfigDrawer, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        /* data.TitleIcon title_icon = 71; */
        if (message.titleIcon)
            TitleIcon.internalBinaryWrite(message.titleIcon, writer.tag(71, WireType.LengthDelimited).fork(), options).join();
        /* string group_id_str = 72; */
        if (message.groupIdStr !== "")
            writer.tag(72, WireType.LengthDelimited).string(message.groupIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EpisodeExtraInfo
 */
export const EpisodeExtraInfo = new EpisodeExtraInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TitleIcon$Type extends MessageType<TitleIcon> {
    constructor() {
        super("data.TitleIcon", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "size_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TitleIcon>): TitleIcon {
        const message = { sizeType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TitleIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TitleIcon): TitleIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int32 size_type */ 2:
                    message.sizeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TitleIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 size_type = 2; */
        if (message.sizeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.sizeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TitleIcon
 */
export const TitleIcon = new TitleIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSConfigDrawer$Type extends MessageType<VSConfigDrawer> {
    constructor() {
        super("data.VSConfigDrawer", [
            { no: 1, name: "drawer", kind: "message", T: () => MatchDrawer },
            { no: 2, name: "drawer_label", kind: "message", T: () => Image },
            { no: 3, name: "drawer_background", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<VSConfigDrawer>): VSConfigDrawer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSConfigDrawer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSConfigDrawer): VSConfigDrawer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MatchDrawer drawer */ 1:
                    message.drawer = MatchDrawer.internalBinaryRead(reader, reader.uint32(), options, message.drawer);
                    break;
                case /* data.Image drawer_label */ 2:
                    message.drawerLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.drawerLabel);
                    break;
                case /* data.Image drawer_background */ 3:
                    message.drawerBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.drawerBackground);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSConfigDrawer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MatchDrawer drawer = 1; */
        if (message.drawer)
            MatchDrawer.internalBinaryWrite(message.drawer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image drawer_label = 2; */
        if (message.drawerLabel)
            Image.internalBinaryWrite(message.drawerLabel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image drawer_background = 3; */
        if (message.drawerBackground)
            Image.internalBinaryWrite(message.drawerBackground, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSConfigDrawer
 */
export const VSConfigDrawer = new VSConfigDrawer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSPremiereToast$Type extends MessageType<VSPremiereToast> {
    constructor() {
        super("data.VSPremiereToast", [
            { no: 1, name: "left_top_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_top_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<VSPremiereToast>): VSPremiereToast {
        const message = { leftTopToast: "", playerToast: "", playerTopToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSPremiereToast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSPremiereToast): VSPremiereToast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string left_top_toast */ 1:
                    message.leftTopToast = reader.string();
                    break;
                case /* string player_toast */ 2:
                    message.playerToast = reader.string();
                    break;
                case /* string player_top_toast */ 3:
                    message.playerTopToast = reader.string();
                    break;
                case /* data.Image icon */ 4:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSPremiereToast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string left_top_toast = 1; */
        if (message.leftTopToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leftTopToast);
        /* string player_toast = 2; */
        if (message.playerToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playerToast);
        /* string player_top_toast = 3; */
        if (message.playerTopToast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.playerTopToast);
        /* data.Image icon = 4; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSPremiereToast
 */
export const VSPremiereToast = new VSPremiereToast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentConfig$Type extends MessageType<CommentConfig> {
    constructor() {
        super("data.CommentConfig", [
            { no: 1, name: "comment_colors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommentColor },
            { no: 2, name: "comment_roles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommentRole },
            { no: 3, name: "role_suffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "role_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "unlock_role_tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "comment_medals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommentMedal },
            { no: 7, name: "medal_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommentConfig>): CommentConfig {
        const message = { commentColors: [], commentRoles: [], roleSuffix: "", roleTitle: "", unlockRoleTip: "", commentMedals: [], medalTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentConfig): CommentConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.CommentColor comment_colors */ 1:
                    message.commentColors.push(CommentColor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.CommentRole comment_roles */ 2:
                    message.commentRoles.push(CommentRole.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string role_suffix */ 3:
                    message.roleSuffix = reader.string();
                    break;
                case /* string role_title */ 4:
                    message.roleTitle = reader.string();
                    break;
                case /* string unlock_role_tip */ 5:
                    message.unlockRoleTip = reader.string();
                    break;
                case /* repeated data.CommentMedal comment_medals */ 6:
                    message.commentMedals.push(CommentMedal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string medal_title */ 7:
                    message.medalTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.CommentColor comment_colors = 1; */
        for (let i = 0; i < message.commentColors.length; i++)
            CommentColor.internalBinaryWrite(message.commentColors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.CommentRole comment_roles = 2; */
        for (let i = 0; i < message.commentRoles.length; i++)
            CommentRole.internalBinaryWrite(message.commentRoles[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string role_suffix = 3; */
        if (message.roleSuffix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.roleSuffix);
        /* string role_title = 4; */
        if (message.roleTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.roleTitle);
        /* string unlock_role_tip = 5; */
        if (message.unlockRoleTip !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.unlockRoleTip);
        /* repeated data.CommentMedal comment_medals = 6; */
        for (let i = 0; i < message.commentMedals.length; i++)
            CommentMedal.internalBinaryWrite(message.commentMedals[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string medal_title = 7; */
        if (message.medalTitle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.medalTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentConfig
 */
export const CommentConfig = new CommentConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentMedal$Type extends MessageType<CommentMedal> {
    constructor() {
        super("data.CommentMedal", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image", kind: "message", T: () => Image },
            { no: 4, name: "keyboard_image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<CommentMedal>): CommentMedal {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentMedal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentMedal): CommentMedal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* data.Image image */ 2:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* data.Image keyboard_image */ 4:
                    message.keyboardImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.keyboardImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentMedal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* data.Image image = 2; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image keyboard_image = 4; */
        if (message.keyboardImage)
            Image.internalBinaryWrite(message.keyboardImage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentMedal
 */
export const CommentMedal = new CommentMedal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentColor$Type extends MessageType<CommentColor> {
    constructor() {
        super("data.CommentColor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommentColor>): CommentColor {
        const message = { name: "", color: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentColor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentColor): CommentColor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string color */ 2:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentColor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string color = 2; */
        if (message.color !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentColor
 */
export const CommentColor = new CommentColor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentRole$Type extends MessageType<CommentRole> {
    constructor() {
        super("data.CommentRole", [
            { no: 1, name: "role_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<CommentRole>): CommentRole {
        const message = { roleId: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentRole>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentRole): CommentRole {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 role_id */ 1:
                    message.roleId = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* data.Image avatar */ 3:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentRole, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 role_id = 1; */
        if (message.roleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roleId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* data.Image avatar = 3; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentRole
 */
export const CommentRole = new CommentRole$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bonus$Type extends MessageType<Bonus> {
    constructor() {
        super("data.Bonus", [
            { no: 1, name: "bonus_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "author", kind: "message", T: () => BonusAuthor },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "style", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "commerce_info", kind: "message", T: () => BonusCommerce },
            { no: 8, name: "open_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "source", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "label", kind: "message", T: () => Image },
            { no: 12, name: "scene_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "maybe_carp", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "countdown_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Bonus>): Bonus {
        const message = { bonusType: 0n, title: "", subTitle: "", text: "", style: "", openUrl: "", token: "", source: 0n, sceneId: 0n, maybeCarp: false, countdownSecond: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Bonus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bonus): Bonus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 bonus_type */ 1:
                    message.bonusType = reader.int64().toBigInt();
                    break;
                case /* data.BonusAuthor author */ 2:
                    message.author = BonusAuthor.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 4:
                    message.subTitle = reader.string();
                    break;
                case /* string text */ 5:
                    message.text = reader.string();
                    break;
                case /* string style */ 6:
                    message.style = reader.string();
                    break;
                case /* data.BonusCommerce commerce_info */ 7:
                    message.commerceInfo = BonusCommerce.internalBinaryRead(reader, reader.uint32(), options, message.commerceInfo);
                    break;
                case /* string open_url */ 8:
                    message.openUrl = reader.string();
                    break;
                case /* string token */ 9:
                    message.token = reader.string();
                    break;
                case /* int64 source */ 10:
                    message.source = reader.int64().toBigInt();
                    break;
                case /* data.Image label */ 11:
                    message.label = Image.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* int64 scene_id */ 12:
                    message.sceneId = reader.int64().toBigInt();
                    break;
                case /* bool maybe_carp */ 13:
                    message.maybeCarp = reader.bool();
                    break;
                case /* int64 countdown_second */ 14:
                    message.countdownSecond = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bonus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 bonus_type = 1; */
        if (message.bonusType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.bonusType);
        /* data.BonusAuthor author = 2; */
        if (message.author)
            BonusAuthor.internalBinaryWrite(message.author, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 4; */
        if (message.subTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subTitle);
        /* string text = 5; */
        if (message.text !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.text);
        /* string style = 6; */
        if (message.style !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.style);
        /* data.BonusCommerce commerce_info = 7; */
        if (message.commerceInfo)
            BonusCommerce.internalBinaryWrite(message.commerceInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string open_url = 8; */
        if (message.openUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.openUrl);
        /* string token = 9; */
        if (message.token !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.token);
        /* int64 source = 10; */
        if (message.source !== 0n)
            writer.tag(10, WireType.Varint).int64(message.source);
        /* data.Image label = 11; */
        if (message.label)
            Image.internalBinaryWrite(message.label, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 scene_id = 12; */
        if (message.sceneId !== 0n)
            writer.tag(12, WireType.Varint).int64(message.sceneId);
        /* bool maybe_carp = 13; */
        if (message.maybeCarp !== false)
            writer.tag(13, WireType.Varint).bool(message.maybeCarp);
        /* int64 countdown_second = 14; */
        if (message.countdownSecond !== 0n)
            writer.tag(14, WireType.Varint).int64(message.countdownSecond);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Bonus
 */
export const Bonus = new Bonus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BonusCommerce$Type extends MessageType<BonusCommerce> {
    constructor() {
        super("data.BonusCommerce", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BonusCommerce>): BonusCommerce {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BonusCommerce>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BonusCommerce): BonusCommerce {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BonusCommerce, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BonusCommerce
 */
export const BonusCommerce = new BonusCommerce$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BonusAuthor$Type extends MessageType<BonusAuthor> {
    constructor() {
        super("data.BonusAuthor", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar_larger", kind: "message", T: () => Image },
            { no: 4, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 5, name: "avatar_medium", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BonusAuthor>): BonusAuthor {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BonusAuthor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BonusAuthor): BonusAuthor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* data.Image avatar_larger */ 3:
                    message.avatarLarger = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarLarger);
                    break;
                case /* data.Image avatar_thumb */ 4:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* data.Image avatar_medium */ 5:
                    message.avatarMedium = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarMedium);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BonusAuthor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* data.Image avatar_larger = 3; */
        if (message.avatarLarger)
            Image.internalBinaryWrite(message.avatarLarger, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_thumb = 4; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_medium = 5; */
        if (message.avatarMedium)
            Image.internalBinaryWrite(message.avatarMedium, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BonusAuthor
 */
export const BonusAuthor = new BonusAuthor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BorderInfo$Type extends MessageType<BorderInfo> {
    constructor() {
        super("data.BorderInfo", [
            { no: 1, name: "border_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "static_border", kind: "message", T: () => StaticBorderInfo },
            { no: 3, name: "dynamic_border", kind: "message", T: () => DynamicBorderInfo },
            { no: 4, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BorderInfo>): BorderInfo {
        const message = { borderType: 0n, duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BorderInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BorderInfo): BorderInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 border_type */ 1:
                    message.borderType = reader.int64().toBigInt();
                    break;
                case /* data.StaticBorderInfo static_border */ 2:
                    message.staticBorder = StaticBorderInfo.internalBinaryRead(reader, reader.uint32(), options, message.staticBorder);
                    break;
                case /* data.DynamicBorderInfo dynamic_border */ 3:
                    message.dynamicBorder = DynamicBorderInfo.internalBinaryRead(reader, reader.uint32(), options, message.dynamicBorder);
                    break;
                case /* int64 duration */ 4:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BorderInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 border_type = 1; */
        if (message.borderType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.borderType);
        /* data.StaticBorderInfo static_border = 2; */
        if (message.staticBorder)
            StaticBorderInfo.internalBinaryWrite(message.staticBorder, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.DynamicBorderInfo dynamic_border = 3; */
        if (message.dynamicBorder)
            DynamicBorderInfo.internalBinaryWrite(message.dynamicBorder, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 4; */
        if (message.duration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BorderInfo
 */
export const BorderInfo = new BorderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StaticBorderInfo$Type extends MessageType<StaticBorderInfo> {
    constructor() {
        super("data.StaticBorderInfo", [
            { no: 1, name: "top", kind: "message", T: () => Image },
            { no: 2, name: "bottom", kind: "message", T: () => Image },
            { no: 3, name: "left", kind: "message", T: () => Image },
            { no: 4, name: "right", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<StaticBorderInfo>): StaticBorderInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StaticBorderInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StaticBorderInfo): StaticBorderInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image top */ 1:
                    message.top = Image.internalBinaryRead(reader, reader.uint32(), options, message.top);
                    break;
                case /* data.Image bottom */ 2:
                    message.bottom = Image.internalBinaryRead(reader, reader.uint32(), options, message.bottom);
                    break;
                case /* data.Image left */ 3:
                    message.left = Image.internalBinaryRead(reader, reader.uint32(), options, message.left);
                    break;
                case /* data.Image right */ 4:
                    message.right = Image.internalBinaryRead(reader, reader.uint32(), options, message.right);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StaticBorderInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image top = 1; */
        if (message.top)
            Image.internalBinaryWrite(message.top, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image bottom = 2; */
        if (message.bottom)
            Image.internalBinaryWrite(message.bottom, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image left = 3; */
        if (message.left)
            Image.internalBinaryWrite(message.left, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image right = 4; */
        if (message.right)
            Image.internalBinaryWrite(message.right, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StaticBorderInfo
 */
export const StaticBorderInfo = new StaticBorderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DynamicBorderInfo$Type extends MessageType<DynamicBorderInfo> {
    constructor() {
        super("data.DynamicBorderInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DynamicBorderInfo>): DynamicBorderInfo {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DynamicBorderInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DynamicBorderInfo): DynamicBorderInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DynamicBorderInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DynamicBorderInfo
 */
export const DynamicBorderInfo = new DynamicBorderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerUsers$Type extends MessageType<LinkerUsers> {
    constructor() {
        super("data.LinkerUsers", [
            { no: 1, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "users_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<LinkerUsers>): LinkerUsers {
        const message = { count: 0n, usersInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerUsers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerUsers): LinkerUsers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 count */ 1:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* repeated data.User users_info */ 2:
                    message.usersInfo.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerUsers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 count = 1; */
        if (message.count !== 0n)
            writer.tag(1, WireType.Varint).int64(message.count);
        /* repeated data.User users_info = 2; */
        for (let i = 0; i < message.usersInfo.length; i++)
            User.internalBinaryWrite(message.usersInfo[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkerUsers
 */
export const LinkerUsers = new LinkerUsers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialChannelInfo$Type extends MessageType<OfficialChannelInfo> {
    constructor() {
        super("data.OfficialChannelInfo", [
            { no: 1, name: "channel_user", kind: "message", T: () => User },
            { no: 2, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "channel_intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "end_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "forbidden_before_end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "current_show_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "max_enter_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "max_next_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "host_permission", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "backup_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "living_user", kind: "message", T: () => User },
            { no: 13, name: "host_can_accept_gift", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "host_uids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "backup_room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "enable_host", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OfficialChannelInfo>): OfficialChannelInfo {
        const message = { channelName: "", channelIntro: "", endTimestamp: 0n, forbiddenBeforeEnd: 0n, currentShowId: 0, maxEnterTime: 0n, maxNextTime: 0n, hostPermission: false, backupRoomId: 0n, hostCanAcceptGift: false, hostUids: [], backupRoomIdStr: "", enableHost: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfficialChannelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfficialChannelInfo): OfficialChannelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User channel_user */ 1:
                    message.channelUser = User.internalBinaryRead(reader, reader.uint32(), options, message.channelUser);
                    break;
                case /* string channel_name */ 2:
                    message.channelName = reader.string();
                    break;
                case /* string channel_intro */ 3:
                    message.channelIntro = reader.string();
                    break;
                case /* int64 end_timestamp */ 4:
                    message.endTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 forbidden_before_end */ 5:
                    message.forbiddenBeforeEnd = reader.int64().toBigInt();
                    break;
                case /* int32 current_show_id */ 6:
                    message.currentShowId = reader.int32();
                    break;
                case /* int64 max_enter_time */ 7:
                    message.maxEnterTime = reader.int64().toBigInt();
                    break;
                case /* int64 max_next_time */ 8:
                    message.maxNextTime = reader.int64().toBigInt();
                    break;
                case /* bool host_permission */ 10:
                    message.hostPermission = reader.bool();
                    break;
                case /* int64 backup_room_id */ 11:
                    message.backupRoomId = reader.int64().toBigInt();
                    break;
                case /* data.User living_user */ 12:
                    message.livingUser = User.internalBinaryRead(reader, reader.uint32(), options, message.livingUser);
                    break;
                case /* bool host_can_accept_gift */ 13:
                    message.hostCanAcceptGift = reader.bool();
                    break;
                case /* repeated int64 host_uids */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hostUids.push(reader.int64().toBigInt());
                    else
                        message.hostUids.push(reader.int64().toBigInt());
                    break;
                case /* string backup_room_id_str */ 15:
                    message.backupRoomIdStr = reader.string();
                    break;
                case /* bool enable_host */ 16:
                    message.enableHost = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfficialChannelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User channel_user = 1; */
        if (message.channelUser)
            User.internalBinaryWrite(message.channelUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string channel_name = 2; */
        if (message.channelName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelName);
        /* string channel_intro = 3; */
        if (message.channelIntro !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.channelIntro);
        /* int64 end_timestamp = 4; */
        if (message.endTimestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.endTimestamp);
        /* int64 forbidden_before_end = 5; */
        if (message.forbiddenBeforeEnd !== 0n)
            writer.tag(5, WireType.Varint).int64(message.forbiddenBeforeEnd);
        /* int32 current_show_id = 6; */
        if (message.currentShowId !== 0)
            writer.tag(6, WireType.Varint).int32(message.currentShowId);
        /* int64 max_enter_time = 7; */
        if (message.maxEnterTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.maxEnterTime);
        /* int64 max_next_time = 8; */
        if (message.maxNextTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.maxNextTime);
        /* bool host_permission = 10; */
        if (message.hostPermission !== false)
            writer.tag(10, WireType.Varint).bool(message.hostPermission);
        /* int64 backup_room_id = 11; */
        if (message.backupRoomId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.backupRoomId);
        /* data.User living_user = 12; */
        if (message.livingUser)
            User.internalBinaryWrite(message.livingUser, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bool host_can_accept_gift = 13; */
        if (message.hostCanAcceptGift !== false)
            writer.tag(13, WireType.Varint).bool(message.hostCanAcceptGift);
        /* repeated int64 host_uids = 14; */
        if (message.hostUids.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hostUids.length; i++)
                writer.int64(message.hostUids[i]);
            writer.join();
        }
        /* string backup_room_id_str = 15; */
        if (message.backupRoomIdStr !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.backupRoomIdStr);
        /* bool enable_host = 16; */
        if (message.enableHost !== false)
            writer.tag(16, WireType.Varint).bool(message.enableHost);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OfficialChannelInfo
 */
export const OfficialChannelInfo = new OfficialChannelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialChannelExtraInfo$Type extends MessageType<OfficialChannelExtraInfo> {
    constructor() {
        super("data.OfficialChannelExtraInfo", [
            { no: 1, name: "show_start_ts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "showlist_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "showlist_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "showlist_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OfficialChannelExtraInfo>): OfficialChannelExtraInfo {
        const message = { showStartTs: 0n, showlistSchema: "", showlistId: 0n, showlistName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfficialChannelExtraInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfficialChannelExtraInfo): OfficialChannelExtraInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 show_start_ts */ 1:
                    message.showStartTs = reader.int64().toBigInt();
                    break;
                case /* string showlist_schema */ 2:
                    message.showlistSchema = reader.string();
                    break;
                case /* int64 showlist_id */ 3:
                    message.showlistId = reader.int64().toBigInt();
                    break;
                case /* string showlist_name */ 4:
                    message.showlistName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfficialChannelExtraInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 show_start_ts = 1; */
        if (message.showStartTs !== 0n)
            writer.tag(1, WireType.Varint).int64(message.showStartTs);
        /* string showlist_schema = 2; */
        if (message.showlistSchema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.showlistSchema);
        /* int64 showlist_id = 3; */
        if (message.showlistId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.showlistId);
        /* string showlist_name = 4; */
        if (message.showlistName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.showlistName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OfficialChannelExtraInfo
 */
export const OfficialChannelExtraInfo = new OfficialChannelExtraInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchInfo$Type extends MessageType<MatchInfo> {
    constructor() {
        super("data.MatchInfo", [
            { no: 1, name: "skin", kind: "message", T: () => MatchSkinInfo }
        ]);
    }
    create(value?: PartialMessage<MatchInfo>): MatchInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchInfo): MatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MatchSkinInfo skin */ 1:
                    message.skin = MatchSkinInfo.internalBinaryRead(reader, reader.uint32(), options, message.skin);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MatchSkinInfo skin = 1; */
        if (message.skin)
            MatchSkinInfo.internalBinaryWrite(message.skin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchInfo
 */
export const MatchInfo = new MatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchSkinInfo$Type extends MessageType<MatchSkinInfo> {
    constructor() {
        super("data.MatchSkinInfo", [
            { no: 1, name: "unfollow_skin", kind: "message", T: () => MatchSkinInfo_FollowBtnSkin },
            { no: 2, name: "followed_skin", kind: "message", T: () => MatchSkinInfo_FollowBtnSkin },
            { no: 3, name: "tab_selected_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tab_unselected_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "comment_place_holder_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "anchor_name_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "anchor_info_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "user_banner_image", kind: "message", T: () => Image },
            { no: 9, name: "tool_bar_image", kind: "message", T: () => Image },
            { no: 10, name: "comment_place_holder_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "share_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<MatchSkinInfo>): MatchSkinInfo {
        const message = { tabSelectedColor: "", tabUnselectedColor: "", commentPlaceHolderColor: "", anchorNameColor: "", anchorInfoColor: "", commentPlaceHolderBgColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchSkinInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchSkinInfo): MatchSkinInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MatchSkinInfo.FollowBtnSkin unfollow_skin */ 1:
                    message.unfollowSkin = MatchSkinInfo_FollowBtnSkin.internalBinaryRead(reader, reader.uint32(), options, message.unfollowSkin);
                    break;
                case /* data.MatchSkinInfo.FollowBtnSkin followed_skin */ 2:
                    message.followedSkin = MatchSkinInfo_FollowBtnSkin.internalBinaryRead(reader, reader.uint32(), options, message.followedSkin);
                    break;
                case /* string tab_selected_color */ 3:
                    message.tabSelectedColor = reader.string();
                    break;
                case /* string tab_unselected_color */ 4:
                    message.tabUnselectedColor = reader.string();
                    break;
                case /* string comment_place_holder_color */ 5:
                    message.commentPlaceHolderColor = reader.string();
                    break;
                case /* string anchor_name_color */ 6:
                    message.anchorNameColor = reader.string();
                    break;
                case /* string anchor_info_color */ 7:
                    message.anchorInfoColor = reader.string();
                    break;
                case /* data.Image user_banner_image */ 8:
                    message.userBannerImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.userBannerImage);
                    break;
                case /* data.Image tool_bar_image */ 9:
                    message.toolBarImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.toolBarImage);
                    break;
                case /* string comment_place_holder_bg_color */ 10:
                    message.commentPlaceHolderBgColor = reader.string();
                    break;
                case /* data.Image share_icon */ 11:
                    message.shareIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.shareIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchSkinInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MatchSkinInfo.FollowBtnSkin unfollow_skin = 1; */
        if (message.unfollowSkin)
            MatchSkinInfo_FollowBtnSkin.internalBinaryWrite(message.unfollowSkin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.MatchSkinInfo.FollowBtnSkin followed_skin = 2; */
        if (message.followedSkin)
            MatchSkinInfo_FollowBtnSkin.internalBinaryWrite(message.followedSkin, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string tab_selected_color = 3; */
        if (message.tabSelectedColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tabSelectedColor);
        /* string tab_unselected_color = 4; */
        if (message.tabUnselectedColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tabUnselectedColor);
        /* string comment_place_holder_color = 5; */
        if (message.commentPlaceHolderColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.commentPlaceHolderColor);
        /* string anchor_name_color = 6; */
        if (message.anchorNameColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.anchorNameColor);
        /* string anchor_info_color = 7; */
        if (message.anchorInfoColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.anchorInfoColor);
        /* data.Image user_banner_image = 8; */
        if (message.userBannerImage)
            Image.internalBinaryWrite(message.userBannerImage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image tool_bar_image = 9; */
        if (message.toolBarImage)
            Image.internalBinaryWrite(message.toolBarImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string comment_place_holder_bg_color = 10; */
        if (message.commentPlaceHolderBgColor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.commentPlaceHolderBgColor);
        /* data.Image share_icon = 11; */
        if (message.shareIcon)
            Image.internalBinaryWrite(message.shareIcon, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchSkinInfo
 */
export const MatchSkinInfo = new MatchSkinInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchSkinInfo_FollowBtnSkin$Type extends MessageType<MatchSkinInfo_FollowBtnSkin> {
    constructor() {
        super("data.MatchSkinInfo.FollowBtnSkin", [
            { no: 1, name: "left_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "right_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchSkinInfo_FollowBtnSkin>): MatchSkinInfo_FollowBtnSkin {
        const message = { leftColor: "", rightColor: "", fontColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchSkinInfo_FollowBtnSkin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchSkinInfo_FollowBtnSkin): MatchSkinInfo_FollowBtnSkin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string left_color */ 1:
                    message.leftColor = reader.string();
                    break;
                case /* string right_color */ 2:
                    message.rightColor = reader.string();
                    break;
                case /* string font_color */ 3:
                    message.fontColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchSkinInfo_FollowBtnSkin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string left_color = 1; */
        if (message.leftColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leftColor);
        /* string right_color = 2; */
        if (message.rightColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightColor);
        /* string font_color = 3; */
        if (message.fontColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fontColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchSkinInfo.FollowBtnSkin
 */
export const MatchSkinInfo_FollowBtnSkin = new MatchSkinInfo_FollowBtnSkin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomActivityTag$Type extends MessageType<RoomActivityTag> {
    constructor() {
        super("data.RoomActivityTag", [
            { no: 1, name: "activity_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<RoomActivityTag>): RoomActivityTag {
        const message = { activityType: 0, name: "", url: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomActivityTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomActivityTag): RoomActivityTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 activity_type */ 1:
                    message.activityType = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomActivityTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 activity_type = 1; */
        if (message.activityType !== 0)
            writer.tag(1, WireType.Varint).int32(message.activityType);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomActivityTag
 */
export const RoomActivityTag = new RoomActivityTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAuthStatus$Type extends MessageType<RoomAuthStatus> {
    constructor() {
        super("data.RoomAuthStatus", [
            { no: 1, name: "Chat", kind: "scalar", jsonName: "Chat", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "Danmaku", kind: "scalar", jsonName: "Danmaku", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "Gift", kind: "scalar", jsonName: "Gift", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "LuckMoney", kind: "scalar", jsonName: "LuckMoney", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "Digg", kind: "scalar", jsonName: "Digg", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "RoomContributor", kind: "scalar", jsonName: "RoomContributor", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "Props", kind: "scalar", jsonName: "Props", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "UserCard", kind: "scalar", jsonName: "UserCard", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "POI", kind: "scalar", jsonName: "POI", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "MoreAnchor", kind: "scalar", jsonName: "MoreAnchor", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "Banner", kind: "scalar", jsonName: "Banner", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "Share", kind: "scalar", jsonName: "Share", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "UserCorner", kind: "scalar", jsonName: "UserCorner", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "Landscape", kind: "scalar", jsonName: "Landscape", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "LandscapeChat", kind: "scalar", jsonName: "LandscapeChat", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "PublicScreen", kind: "scalar", jsonName: "PublicScreen", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "GiftAnchorMt", kind: "scalar", jsonName: "GiftAnchorMt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "RecordScreen", kind: "scalar", jsonName: "RecordScreen", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "DonationSticker", kind: "scalar", jsonName: "DonationSticker", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "HourRank", kind: "scalar", jsonName: "HourRank", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "CommerceCard", kind: "scalar", jsonName: "CommerceCard", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "AudioChat", kind: "scalar", jsonName: "AudioChat", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "DanmakuDefault", kind: "scalar", jsonName: "DanmakuDefault", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "KtvOrderSong", kind: "scalar", jsonName: "KtvOrderSong", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "SelectionAlbum", kind: "scalar", jsonName: "SelectionAlbum", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 27, name: "Like", kind: "scalar", jsonName: "Like", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 28, name: "MultiplierPlayback", kind: "scalar", jsonName: "MultiplierPlayback", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 29, name: "DownloadVideo", kind: "scalar", jsonName: "DownloadVideo", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "Collect", kind: "scalar", jsonName: "Collect", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 31, name: "TimedShutdown", kind: "scalar", jsonName: "TimedShutdown", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 32, name: "Seek", kind: "scalar", jsonName: "Seek", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "Denounce", kind: "scalar", jsonName: "Denounce", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 34, name: "Dislike", kind: "scalar", jsonName: "Dislike", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 35, name: "OnlyTa", kind: "scalar", jsonName: "OnlyTa", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 36, name: "CastScreen", kind: "scalar", jsonName: "CastScreen", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 37, name: "CommentWall", kind: "scalar", jsonName: "CommentWall", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 38, name: "BulletStyle", kind: "scalar", jsonName: "BulletStyle", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 39, name: "ShowGamePlugin", kind: "scalar", jsonName: "ShowGamePlugin", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 40, name: "VSGift", kind: "scalar", jsonName: "VSGift", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 41, name: "VSTopic", kind: "scalar", jsonName: "VSTopic", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 42, name: "VSRank", kind: "scalar", jsonName: "VSRank", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 43, name: "AdminCommentWall", kind: "scalar", jsonName: "AdminCommentWall", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 44, name: "CommerceComponent", kind: "scalar", jsonName: "CommerceComponent", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 45, name: "DouPlus", kind: "scalar", jsonName: "DouPlus", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 46, name: "GamePointsPlaying", kind: "scalar", jsonName: "GamePointsPlaying", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 47, name: "Poster", kind: "scalar", jsonName: "Poster", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 48, name: "Highlights", kind: "scalar", jsonName: "Highlights", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 49, name: "TypingCommentState", kind: "scalar", jsonName: "TypingCommentState", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 50, name: "StrokeUpDownGuide", kind: "scalar", jsonName: "StrokeUpDownGuide", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 51, name: "UpRightStatsFloatingLayer", kind: "scalar", jsonName: "UpRightStatsFloatingLayer", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 52, name: "CastScreenExplicit", kind: "scalar", jsonName: "CastScreenExplicit", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 53, name: "Selection", kind: "scalar", jsonName: "Selection", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 54, name: "IndustryService", kind: "scalar", jsonName: "IndustryService", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 55, name: "VerticalRank", kind: "scalar", jsonName: "VerticalRank", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 56, name: "EnterEffects", kind: "scalar", jsonName: "EnterEffects", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 57, name: "FansClub", kind: "scalar", jsonName: "FansClub", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 58, name: "EmojiOutside", kind: "scalar", jsonName: "EmojiOutside", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 59, name: "CanSellTicket", kind: "scalar", jsonName: "CanSellTicket", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 60, name: "DouPlusPopularityGem", kind: "scalar", jsonName: "DouPlusPopularityGem", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 61, name: "MissionCenter", kind: "scalar", jsonName: "MissionCenter", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 62, name: "ExpandScreen", kind: "scalar", jsonName: "ExpandScreen", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 63, name: "FansGroup", kind: "scalar", jsonName: "FansGroup", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 64, name: "Topic", kind: "scalar", jsonName: "Topic", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 65, name: "AnchorMission", kind: "scalar", jsonName: "AnchorMission", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 66, name: "Teleprompter", kind: "scalar", jsonName: "Teleprompter", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 67, name: "ChatDynamicSlideSpeed", kind: "scalar", jsonName: "ChatDynamicSlideSpeed", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 68, name: "SmallWindowDisplay", kind: "scalar", jsonName: "SmallWindowDisplay", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 69, name: "MessageDispatch", kind: "scalar", jsonName: "MessageDispatch", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 70, name: "RoomChannel", kind: "scalar", jsonName: "RoomChannel", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 71, name: "ChatDispatch", kind: "scalar", jsonName: "ChatDispatch", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 72, name: "LinkmicGuestLike", kind: "scalar", jsonName: "LinkmicGuestLike", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 73, name: "MediaLinkmic", kind: "scalar", jsonName: "MediaLinkmic", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 74, name: "VideoShare", kind: "scalar", jsonName: "VideoShare", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 75, name: "ChatGuideEmoji", kind: "scalar", jsonName: "ChatGuideEmoji", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 76, name: "ChatGuideImage", kind: "scalar", jsonName: "ChatGuideImage", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 77, name: "PCPlay", kind: "scalar", jsonName: "PCPlay", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 78, name: "PadPlay", kind: "scalar", jsonName: "PadPlay", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 79, name: "LongTouch", kind: "scalar", jsonName: "LongTouch", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 80, name: "FirstFeedHistChat", kind: "scalar", jsonName: "FirstFeedHistChat", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 81, name: "MoreHistChat", kind: "scalar", jsonName: "MoreHistChat", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 82, name: "WordAssociation", kind: "scalar", jsonName: "WordAssociation", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 83, name: "LandscapeScreenCapture", kind: "scalar", jsonName: "LandscapeScreenCapture", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 84, name: "LandscapeScreenRecording", kind: "scalar", jsonName: "LandscapeScreenRecording", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 85, name: "ScreenProjectionBarrage", kind: "scalar", jsonName: "ScreenProjectionBarrage", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 86, name: "SmallWindowPlayer", kind: "scalar", jsonName: "SmallWindowPlayer", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 87, name: "ChatOperate", kind: "scalar", jsonName: "ChatOperate", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 88, name: "EcomFansClub", kind: "scalar", jsonName: "EcomFansClub", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 89, name: "AudioChatTotext", kind: "scalar", jsonName: "AudioChatTotext", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 90, name: "CommonCard", kind: "scalar", jsonName: "CommonCard", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 91, name: "ShortTouch", kind: "scalar", jsonName: "ShortTouch", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 92, name: "HostTeamChannel", kind: "scalar", jsonName: "HostTeamChannel", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 93, name: "LandscapeChatDynamicSlideSpeed", kind: "scalar", jsonName: "LandscapeChatDynamicSlideSpeed", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 94, name: "HostTeam", kind: "scalar", jsonName: "HostTeam", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 95, name: "AnchorHotMessageAggregated", kind: "scalar", jsonName: "AnchorHotMessageAggregated", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 96, name: "AnchorColdMessageTiled", kind: "scalar", jsonName: "AnchorColdMessageTiled", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 97, name: "ScreenBottomInfo", kind: "scalar", jsonName: "ScreenBottomInfo", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 98, name: "PreviewHotCommentSwitch", kind: "scalar", jsonName: "PreviewHotCommentSwitch", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 99, name: "RoomWidget", kind: "scalar", jsonName: "RoomWidget", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 100, name: "OffReason", kind: "message", jsonName: "OffReason", T: () => RoomAuthStatus_RoomAuthOffReasons },
            { no: 101, name: "SpecialStyle", kind: "message", jsonName: "SpecialStyle", T: () => RoomAuthStatus_RoomAuthSpecialStyle },
            { no: 102, name: "PanelECService", kind: "scalar", jsonName: "PanelECService", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 103, name: "FixedChat", kind: "scalar", jsonName: "FixedChat", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 104, name: "LandscapeGift", kind: "scalar", jsonName: "LandscapeGift", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 105, name: "HotChatTray", kind: "scalar", jsonName: "HotChatTray", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 106, name: "ItemShare", kind: "scalar", jsonName: "ItemShare", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 107, name: "ShortTouchTempState", kind: "scalar", jsonName: "ShortTouchTempState", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 108, name: "StickyMessage", kind: "scalar", jsonName: "StickyMessage", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 109, name: "ProjectionBtn", kind: "scalar", jsonName: "ProjectionBtn", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 110, name: "ChatDynamicSlideSpeedAnchor", kind: "scalar", jsonName: "ChatDynamicSlideSpeedAnchor", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 111, name: "PosterCache", kind: "scalar", jsonName: "PosterCache", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 112, name: "MediaHistoryMessage", kind: "scalar", jsonName: "MediaHistoryMessage", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 113, name: "ToolbarBubble", kind: "scalar", jsonName: "ToolbarBubble", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 114, name: "ImHeatValue", kind: "scalar", jsonName: "ImHeatValue", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 115, name: "InteractiveComponent", kind: "scalar", jsonName: "InteractiveComponent", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 116, name: "ChatReply", kind: "scalar", jsonName: "ChatReply", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 117, name: "ChatMention", kind: "scalar", jsonName: "ChatMention", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 118, name: "FrequentlyChat", kind: "scalar", jsonName: "FrequentlyChat", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 119, name: "StreamAdaptation", kind: "scalar", jsonName: "StreamAdaptation", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 120, name: "VideoAmplificationType", kind: "scalar", jsonName: "VideoAmplificationType", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 200, name: "VsCommentBar", kind: "scalar", jsonName: "VsCommentBar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 201, name: "VsWelcomeDanmaku", kind: "scalar", jsonName: "VsWelcomeDanmaku", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 202, name: "VsFansClub", kind: "scalar", jsonName: "VsFansClub", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 203, name: "VsExtensionEnableFollow", kind: "scalar", jsonName: "VsExtensionEnableFollow", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 204, name: "VsDouPlus", kind: "scalar", jsonName: "VsDouPlus", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 205, name: "QuizGamePointsPlaying", kind: "scalar", jsonName: "QuizGamePointsPlaying", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 206, name: "UgcVSReplayDelete", kind: "scalar", jsonName: "UgcVSReplayDelete", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 207, name: "UgcVsReplayVisibility", kind: "scalar", jsonName: "UgcVsReplayVisibility", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomAuthStatus>): RoomAuthStatus {
        const message = { chat: false, danmaku: false, gift: false, luckMoney: false, digg: false, roomContributor: false, props: false, userCard: false, pOI: false, moreAnchor: 0n, banner: 0n, share: 0n, userCorner: 0n, landscape: 0n, landscapeChat: 0n, publicScreen: 0n, giftAnchorMt: 0n, recordScreen: 0n, donationSticker: 0n, hourRank: 0n, commerceCard: 0n, audioChat: 0n, danmakuDefault: 0n, ktvOrderSong: 0n, selectionAlbum: 0n, like: 0n, multiplierPlayback: 0n, downloadVideo: 0n, collect: 0n, timedShutdown: 0n, seek: 0n, denounce: 0n, dislike: 0n, onlyTa: 0n, castScreen: 0n, commentWall: 0n, bulletStyle: 0n, showGamePlugin: 0n, vSGift: 0n, vSTopic: 0n, vSRank: 0n, adminCommentWall: 0n, commerceComponent: 0n, douPlus: 0n, gamePointsPlaying: 0n, poster: 0n, highlights: 0n, typingCommentState: 0n, strokeUpDownGuide: 0n, upRightStatsFloatingLayer: 0n, castScreenExplicit: 0n, selection: 0n, industryService: 0n, verticalRank: 0n, enterEffects: 0n, fansClub: 0n, emojiOutside: 0n, canSellTicket: 0n, douPlusPopularityGem: 0n, missionCenter: 0n, expandScreen: 0n, fansGroup: 0n, topic: 0n, anchorMission: 0n, teleprompter: 0n, chatDynamicSlideSpeed: 0n, smallWindowDisplay: 0n, messageDispatch: 0n, roomChannel: 0n, chatDispatch: 0n, linkmicGuestLike: 0n, mediaLinkmic: 0n, videoShare: 0n, chatGuideEmoji: 0n, chatGuideImage: 0n, pCPlay: 0n, padPlay: 0n, longTouch: 0n, firstFeedHistChat: 0n, moreHistChat: 0n, wordAssociation: 0n, landscapeScreenCapture: 0n, landscapeScreenRecording: 0n, screenProjectionBarrage: 0n, smallWindowPlayer: 0n, chatOperate: 0n, ecomFansClub: 0n, audioChatTotext: 0n, commonCard: 0n, shortTouch: 0n, hostTeamChannel: 0n, landscapeChatDynamicSlideSpeed: 0n, hostTeam: 0n, anchorHotMessageAggregated: 0n, anchorColdMessageTiled: 0n, screenBottomInfo: 0n, previewHotCommentSwitch: 0n, roomWidget: 0n, panelECService: 0n, fixedChat: 0n, landscapeGift: 0n, hotChatTray: 0n, itemShare: 0n, shortTouchTempState: 0n, stickyMessage: 0n, projectionBtn: 0n, chatDynamicSlideSpeedAnchor: 0n, posterCache: 0n, mediaHistoryMessage: 0n, toolbarBubble: 0n, imHeatValue: 0n, interactiveComponent: 0n, chatReply: 0n, chatMention: 0n, frequentlyChat: 0n, streamAdaptation: 0n, videoAmplificationType: 0n, vsCommentBar: 0n, vsWelcomeDanmaku: 0n, vsFansClub: 0n, vsExtensionEnableFollow: 0n, vsDouPlus: 0n, quizGamePointsPlaying: 0n, ugcVSReplayDelete: 0n, ugcVsReplayVisibility: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAuthStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAuthStatus): RoomAuthStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool Chat = 1 [json_name = "Chat"];*/ 1:
                    message.chat = reader.bool();
                    break;
                case /* bool Danmaku = 2 [json_name = "Danmaku"];*/ 2:
                    message.danmaku = reader.bool();
                    break;
                case /* bool Gift = 3 [json_name = "Gift"];*/ 3:
                    message.gift = reader.bool();
                    break;
                case /* bool LuckMoney = 4 [json_name = "LuckMoney"];*/ 4:
                    message.luckMoney = reader.bool();
                    break;
                case /* bool Digg = 5 [json_name = "Digg"];*/ 5:
                    message.digg = reader.bool();
                    break;
                case /* bool RoomContributor = 7 [json_name = "RoomContributor"];*/ 7:
                    message.roomContributor = reader.bool();
                    break;
                case /* bool Props = 8 [json_name = "Props"];*/ 8:
                    message.props = reader.bool();
                    break;
                case /* bool UserCard = 9 [json_name = "UserCard"];*/ 9:
                    message.userCard = reader.bool();
                    break;
                case /* bool POI = 10 [json_name = "POI"];*/ 10:
                    message.pOI = reader.bool();
                    break;
                case /* int64 MoreAnchor = 11 [json_name = "MoreAnchor"];*/ 11:
                    message.moreAnchor = reader.int64().toBigInt();
                    break;
                case /* int64 Banner = 12 [json_name = "Banner"];*/ 12:
                    message.banner = reader.int64().toBigInt();
                    break;
                case /* int64 Share = 13 [json_name = "Share"];*/ 13:
                    message.share = reader.int64().toBigInt();
                    break;
                case /* int64 UserCorner = 14 [json_name = "UserCorner"];*/ 14:
                    message.userCorner = reader.int64().toBigInt();
                    break;
                case /* int64 Landscape = 15 [json_name = "Landscape"];*/ 15:
                    message.landscape = reader.int64().toBigInt();
                    break;
                case /* int64 LandscapeChat = 16 [json_name = "LandscapeChat"];*/ 16:
                    message.landscapeChat = reader.int64().toBigInt();
                    break;
                case /* int64 PublicScreen = 17 [json_name = "PublicScreen"];*/ 17:
                    message.publicScreen = reader.int64().toBigInt();
                    break;
                case /* int64 GiftAnchorMt = 18 [json_name = "GiftAnchorMt"];*/ 18:
                    message.giftAnchorMt = reader.int64().toBigInt();
                    break;
                case /* int64 RecordScreen = 19 [json_name = "RecordScreen"];*/ 19:
                    message.recordScreen = reader.int64().toBigInt();
                    break;
                case /* int64 DonationSticker = 20 [json_name = "DonationSticker"];*/ 20:
                    message.donationSticker = reader.int64().toBigInt();
                    break;
                case /* int64 HourRank = 21 [json_name = "HourRank"];*/ 21:
                    message.hourRank = reader.int64().toBigInt();
                    break;
                case /* int64 CommerceCard = 22 [json_name = "CommerceCard"];*/ 22:
                    message.commerceCard = reader.int64().toBigInt();
                    break;
                case /* int64 AudioChat = 23 [json_name = "AudioChat"];*/ 23:
                    message.audioChat = reader.int64().toBigInt();
                    break;
                case /* int64 DanmakuDefault = 24 [json_name = "DanmakuDefault"];*/ 24:
                    message.danmakuDefault = reader.int64().toBigInt();
                    break;
                case /* int64 KtvOrderSong = 25 [json_name = "KtvOrderSong"];*/ 25:
                    message.ktvOrderSong = reader.int64().toBigInt();
                    break;
                case /* int64 SelectionAlbum = 26 [json_name = "SelectionAlbum"];*/ 26:
                    message.selectionAlbum = reader.int64().toBigInt();
                    break;
                case /* int64 Like = 27 [json_name = "Like"];*/ 27:
                    message.like = reader.int64().toBigInt();
                    break;
                case /* int64 MultiplierPlayback = 28 [json_name = "MultiplierPlayback"];*/ 28:
                    message.multiplierPlayback = reader.int64().toBigInt();
                    break;
                case /* int64 DownloadVideo = 29 [json_name = "DownloadVideo"];*/ 29:
                    message.downloadVideo = reader.int64().toBigInt();
                    break;
                case /* int64 Collect = 30 [json_name = "Collect"];*/ 30:
                    message.collect = reader.int64().toBigInt();
                    break;
                case /* int64 TimedShutdown = 31 [json_name = "TimedShutdown"];*/ 31:
                    message.timedShutdown = reader.int64().toBigInt();
                    break;
                case /* int64 Seek = 32 [json_name = "Seek"];*/ 32:
                    message.seek = reader.int64().toBigInt();
                    break;
                case /* int64 Denounce = 33 [json_name = "Denounce"];*/ 33:
                    message.denounce = reader.int64().toBigInt();
                    break;
                case /* int64 Dislike = 34 [json_name = "Dislike"];*/ 34:
                    message.dislike = reader.int64().toBigInt();
                    break;
                case /* int64 OnlyTa = 35 [json_name = "OnlyTa"];*/ 35:
                    message.onlyTa = reader.int64().toBigInt();
                    break;
                case /* int64 CastScreen = 36 [json_name = "CastScreen"];*/ 36:
                    message.castScreen = reader.int64().toBigInt();
                    break;
                case /* int64 CommentWall = 37 [json_name = "CommentWall"];*/ 37:
                    message.commentWall = reader.int64().toBigInt();
                    break;
                case /* int64 BulletStyle = 38 [json_name = "BulletStyle"];*/ 38:
                    message.bulletStyle = reader.int64().toBigInt();
                    break;
                case /* int64 ShowGamePlugin = 39 [json_name = "ShowGamePlugin"];*/ 39:
                    message.showGamePlugin = reader.int64().toBigInt();
                    break;
                case /* int64 VSGift = 40 [json_name = "VSGift"];*/ 40:
                    message.vSGift = reader.int64().toBigInt();
                    break;
                case /* int64 VSTopic = 41 [json_name = "VSTopic"];*/ 41:
                    message.vSTopic = reader.int64().toBigInt();
                    break;
                case /* int64 VSRank = 42 [json_name = "VSRank"];*/ 42:
                    message.vSRank = reader.int64().toBigInt();
                    break;
                case /* int64 AdminCommentWall = 43 [json_name = "AdminCommentWall"];*/ 43:
                    message.adminCommentWall = reader.int64().toBigInt();
                    break;
                case /* int64 CommerceComponent = 44 [json_name = "CommerceComponent"];*/ 44:
                    message.commerceComponent = reader.int64().toBigInt();
                    break;
                case /* int64 DouPlus = 45 [json_name = "DouPlus"];*/ 45:
                    message.douPlus = reader.int64().toBigInt();
                    break;
                case /* int64 GamePointsPlaying = 46 [json_name = "GamePointsPlaying"];*/ 46:
                    message.gamePointsPlaying = reader.int64().toBigInt();
                    break;
                case /* int64 Poster = 47 [json_name = "Poster"];*/ 47:
                    message.poster = reader.int64().toBigInt();
                    break;
                case /* int64 Highlights = 48 [json_name = "Highlights"];*/ 48:
                    message.highlights = reader.int64().toBigInt();
                    break;
                case /* int64 TypingCommentState = 49 [json_name = "TypingCommentState"];*/ 49:
                    message.typingCommentState = reader.int64().toBigInt();
                    break;
                case /* int64 StrokeUpDownGuide = 50 [json_name = "StrokeUpDownGuide"];*/ 50:
                    message.strokeUpDownGuide = reader.int64().toBigInt();
                    break;
                case /* int64 UpRightStatsFloatingLayer = 51 [json_name = "UpRightStatsFloatingLayer"];*/ 51:
                    message.upRightStatsFloatingLayer = reader.int64().toBigInt();
                    break;
                case /* int64 CastScreenExplicit = 52 [json_name = "CastScreenExplicit"];*/ 52:
                    message.castScreenExplicit = reader.int64().toBigInt();
                    break;
                case /* int64 Selection = 53 [json_name = "Selection"];*/ 53:
                    message.selection = reader.int64().toBigInt();
                    break;
                case /* int64 IndustryService = 54 [json_name = "IndustryService"];*/ 54:
                    message.industryService = reader.int64().toBigInt();
                    break;
                case /* int64 VerticalRank = 55 [json_name = "VerticalRank"];*/ 55:
                    message.verticalRank = reader.int64().toBigInt();
                    break;
                case /* int64 EnterEffects = 56 [json_name = "EnterEffects"];*/ 56:
                    message.enterEffects = reader.int64().toBigInt();
                    break;
                case /* int64 FansClub = 57 [json_name = "FansClub"];*/ 57:
                    message.fansClub = reader.int64().toBigInt();
                    break;
                case /* int64 EmojiOutside = 58 [json_name = "EmojiOutside"];*/ 58:
                    message.emojiOutside = reader.int64().toBigInt();
                    break;
                case /* int64 CanSellTicket = 59 [json_name = "CanSellTicket"];*/ 59:
                    message.canSellTicket = reader.int64().toBigInt();
                    break;
                case /* int64 DouPlusPopularityGem = 60 [json_name = "DouPlusPopularityGem"];*/ 60:
                    message.douPlusPopularityGem = reader.int64().toBigInt();
                    break;
                case /* int64 MissionCenter = 61 [json_name = "MissionCenter"];*/ 61:
                    message.missionCenter = reader.int64().toBigInt();
                    break;
                case /* int64 ExpandScreen = 62 [json_name = "ExpandScreen"];*/ 62:
                    message.expandScreen = reader.int64().toBigInt();
                    break;
                case /* int64 FansGroup = 63 [json_name = "FansGroup"];*/ 63:
                    message.fansGroup = reader.int64().toBigInt();
                    break;
                case /* int64 Topic = 64 [json_name = "Topic"];*/ 64:
                    message.topic = reader.int64().toBigInt();
                    break;
                case /* int64 AnchorMission = 65 [json_name = "AnchorMission"];*/ 65:
                    message.anchorMission = reader.int64().toBigInt();
                    break;
                case /* int64 Teleprompter = 66 [json_name = "Teleprompter"];*/ 66:
                    message.teleprompter = reader.int64().toBigInt();
                    break;
                case /* int64 ChatDynamicSlideSpeed = 67 [json_name = "ChatDynamicSlideSpeed"];*/ 67:
                    message.chatDynamicSlideSpeed = reader.int64().toBigInt();
                    break;
                case /* int64 SmallWindowDisplay = 68 [json_name = "SmallWindowDisplay"];*/ 68:
                    message.smallWindowDisplay = reader.int64().toBigInt();
                    break;
                case /* int64 MessageDispatch = 69 [json_name = "MessageDispatch"];*/ 69:
                    message.messageDispatch = reader.int64().toBigInt();
                    break;
                case /* int64 RoomChannel = 70 [json_name = "RoomChannel"];*/ 70:
                    message.roomChannel = reader.int64().toBigInt();
                    break;
                case /* int64 ChatDispatch = 71 [json_name = "ChatDispatch"];*/ 71:
                    message.chatDispatch = reader.int64().toBigInt();
                    break;
                case /* int64 LinkmicGuestLike = 72 [json_name = "LinkmicGuestLike"];*/ 72:
                    message.linkmicGuestLike = reader.int64().toBigInt();
                    break;
                case /* int64 MediaLinkmic = 73 [json_name = "MediaLinkmic"];*/ 73:
                    message.mediaLinkmic = reader.int64().toBigInt();
                    break;
                case /* int64 VideoShare = 74 [json_name = "VideoShare"];*/ 74:
                    message.videoShare = reader.int64().toBigInt();
                    break;
                case /* int64 ChatGuideEmoji = 75 [json_name = "ChatGuideEmoji"];*/ 75:
                    message.chatGuideEmoji = reader.int64().toBigInt();
                    break;
                case /* int64 ChatGuideImage = 76 [json_name = "ChatGuideImage"];*/ 76:
                    message.chatGuideImage = reader.int64().toBigInt();
                    break;
                case /* int64 PCPlay = 77 [json_name = "PCPlay"];*/ 77:
                    message.pCPlay = reader.int64().toBigInt();
                    break;
                case /* int64 PadPlay = 78 [json_name = "PadPlay"];*/ 78:
                    message.padPlay = reader.int64().toBigInt();
                    break;
                case /* int64 LongTouch = 79 [json_name = "LongTouch"];*/ 79:
                    message.longTouch = reader.int64().toBigInt();
                    break;
                case /* int64 FirstFeedHistChat = 80 [json_name = "FirstFeedHistChat"];*/ 80:
                    message.firstFeedHistChat = reader.int64().toBigInt();
                    break;
                case /* int64 MoreHistChat = 81 [json_name = "MoreHistChat"];*/ 81:
                    message.moreHistChat = reader.int64().toBigInt();
                    break;
                case /* int64 WordAssociation = 82 [json_name = "WordAssociation"];*/ 82:
                    message.wordAssociation = reader.int64().toBigInt();
                    break;
                case /* int64 LandscapeScreenCapture = 83 [json_name = "LandscapeScreenCapture"];*/ 83:
                    message.landscapeScreenCapture = reader.int64().toBigInt();
                    break;
                case /* int64 LandscapeScreenRecording = 84 [json_name = "LandscapeScreenRecording"];*/ 84:
                    message.landscapeScreenRecording = reader.int64().toBigInt();
                    break;
                case /* int64 ScreenProjectionBarrage = 85 [json_name = "ScreenProjectionBarrage"];*/ 85:
                    message.screenProjectionBarrage = reader.int64().toBigInt();
                    break;
                case /* int64 SmallWindowPlayer = 86 [json_name = "SmallWindowPlayer"];*/ 86:
                    message.smallWindowPlayer = reader.int64().toBigInt();
                    break;
                case /* int64 ChatOperate = 87 [json_name = "ChatOperate"];*/ 87:
                    message.chatOperate = reader.int64().toBigInt();
                    break;
                case /* int64 EcomFansClub = 88 [json_name = "EcomFansClub"];*/ 88:
                    message.ecomFansClub = reader.int64().toBigInt();
                    break;
                case /* int64 AudioChatTotext = 89 [json_name = "AudioChatTotext"];*/ 89:
                    message.audioChatTotext = reader.int64().toBigInt();
                    break;
                case /* int64 CommonCard = 90 [json_name = "CommonCard"];*/ 90:
                    message.commonCard = reader.int64().toBigInt();
                    break;
                case /* int64 ShortTouch = 91 [json_name = "ShortTouch"];*/ 91:
                    message.shortTouch = reader.int64().toBigInt();
                    break;
                case /* int64 HostTeamChannel = 92 [json_name = "HostTeamChannel"];*/ 92:
                    message.hostTeamChannel = reader.int64().toBigInt();
                    break;
                case /* int64 LandscapeChatDynamicSlideSpeed = 93 [json_name = "LandscapeChatDynamicSlideSpeed"];*/ 93:
                    message.landscapeChatDynamicSlideSpeed = reader.int64().toBigInt();
                    break;
                case /* int64 HostTeam = 94 [json_name = "HostTeam"];*/ 94:
                    message.hostTeam = reader.int64().toBigInt();
                    break;
                case /* int64 AnchorHotMessageAggregated = 95 [json_name = "AnchorHotMessageAggregated"];*/ 95:
                    message.anchorHotMessageAggregated = reader.int64().toBigInt();
                    break;
                case /* int64 AnchorColdMessageTiled = 96 [json_name = "AnchorColdMessageTiled"];*/ 96:
                    message.anchorColdMessageTiled = reader.int64().toBigInt();
                    break;
                case /* int64 ScreenBottomInfo = 97 [json_name = "ScreenBottomInfo"];*/ 97:
                    message.screenBottomInfo = reader.int64().toBigInt();
                    break;
                case /* int64 PreviewHotCommentSwitch = 98 [json_name = "PreviewHotCommentSwitch"];*/ 98:
                    message.previewHotCommentSwitch = reader.int64().toBigInt();
                    break;
                case /* int64 RoomWidget = 99 [json_name = "RoomWidget"];*/ 99:
                    message.roomWidget = reader.int64().toBigInt();
                    break;
                case /* data.RoomAuthStatus.RoomAuthOffReasons OffReason = 100 [json_name = "OffReason"];*/ 100:
                    message.offReason = RoomAuthStatus_RoomAuthOffReasons.internalBinaryRead(reader, reader.uint32(), options, message.offReason);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle SpecialStyle = 101 [json_name = "SpecialStyle"];*/ 101:
                    message.specialStyle = RoomAuthStatus_RoomAuthSpecialStyle.internalBinaryRead(reader, reader.uint32(), options, message.specialStyle);
                    break;
                case /* int64 PanelECService = 102 [json_name = "PanelECService"];*/ 102:
                    message.panelECService = reader.int64().toBigInt();
                    break;
                case /* int64 FixedChat = 103 [json_name = "FixedChat"];*/ 103:
                    message.fixedChat = reader.int64().toBigInt();
                    break;
                case /* int64 LandscapeGift = 104 [json_name = "LandscapeGift"];*/ 104:
                    message.landscapeGift = reader.int64().toBigInt();
                    break;
                case /* int64 HotChatTray = 105 [json_name = "HotChatTray"];*/ 105:
                    message.hotChatTray = reader.int64().toBigInt();
                    break;
                case /* int64 ItemShare = 106 [json_name = "ItemShare"];*/ 106:
                    message.itemShare = reader.int64().toBigInt();
                    break;
                case /* int64 ShortTouchTempState = 107 [json_name = "ShortTouchTempState"];*/ 107:
                    message.shortTouchTempState = reader.int64().toBigInt();
                    break;
                case /* int64 StickyMessage = 108 [json_name = "StickyMessage"];*/ 108:
                    message.stickyMessage = reader.int64().toBigInt();
                    break;
                case /* int64 ProjectionBtn = 109 [json_name = "ProjectionBtn"];*/ 109:
                    message.projectionBtn = reader.int64().toBigInt();
                    break;
                case /* int64 ChatDynamicSlideSpeedAnchor = 110 [json_name = "ChatDynamicSlideSpeedAnchor"];*/ 110:
                    message.chatDynamicSlideSpeedAnchor = reader.int64().toBigInt();
                    break;
                case /* int64 PosterCache = 111 [json_name = "PosterCache"];*/ 111:
                    message.posterCache = reader.int64().toBigInt();
                    break;
                case /* int64 MediaHistoryMessage = 112 [json_name = "MediaHistoryMessage"];*/ 112:
                    message.mediaHistoryMessage = reader.int64().toBigInt();
                    break;
                case /* int64 ToolbarBubble = 113 [json_name = "ToolbarBubble"];*/ 113:
                    message.toolbarBubble = reader.int64().toBigInt();
                    break;
                case /* int64 ImHeatValue = 114 [json_name = "ImHeatValue"];*/ 114:
                    message.imHeatValue = reader.int64().toBigInt();
                    break;
                case /* int64 InteractiveComponent = 115 [json_name = "InteractiveComponent"];*/ 115:
                    message.interactiveComponent = reader.int64().toBigInt();
                    break;
                case /* int64 ChatReply = 116 [json_name = "ChatReply"];*/ 116:
                    message.chatReply = reader.int64().toBigInt();
                    break;
                case /* int64 ChatMention = 117 [json_name = "ChatMention"];*/ 117:
                    message.chatMention = reader.int64().toBigInt();
                    break;
                case /* int64 FrequentlyChat = 118 [json_name = "FrequentlyChat"];*/ 118:
                    message.frequentlyChat = reader.int64().toBigInt();
                    break;
                case /* int64 StreamAdaptation = 119 [json_name = "StreamAdaptation"];*/ 119:
                    message.streamAdaptation = reader.int64().toBigInt();
                    break;
                case /* int64 VideoAmplificationType = 120 [json_name = "VideoAmplificationType"];*/ 120:
                    message.videoAmplificationType = reader.int64().toBigInt();
                    break;
                case /* int64 VsCommentBar = 200 [json_name = "VsCommentBar"];*/ 200:
                    message.vsCommentBar = reader.int64().toBigInt();
                    break;
                case /* int64 VsWelcomeDanmaku = 201 [json_name = "VsWelcomeDanmaku"];*/ 201:
                    message.vsWelcomeDanmaku = reader.int64().toBigInt();
                    break;
                case /* int64 VsFansClub = 202 [json_name = "VsFansClub"];*/ 202:
                    message.vsFansClub = reader.int64().toBigInt();
                    break;
                case /* int64 VsExtensionEnableFollow = 203 [json_name = "VsExtensionEnableFollow"];*/ 203:
                    message.vsExtensionEnableFollow = reader.int64().toBigInt();
                    break;
                case /* int64 VsDouPlus = 204 [json_name = "VsDouPlus"];*/ 204:
                    message.vsDouPlus = reader.int64().toBigInt();
                    break;
                case /* int64 QuizGamePointsPlaying = 205 [json_name = "QuizGamePointsPlaying"];*/ 205:
                    message.quizGamePointsPlaying = reader.int64().toBigInt();
                    break;
                case /* int64 UgcVSReplayDelete = 206 [json_name = "UgcVSReplayDelete"];*/ 206:
                    message.ugcVSReplayDelete = reader.int64().toBigInt();
                    break;
                case /* int64 UgcVsReplayVisibility = 207 [json_name = "UgcVsReplayVisibility"];*/ 207:
                    message.ugcVsReplayVisibility = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAuthStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool Chat = 1 [json_name = "Chat"]; */
        if (message.chat !== false)
            writer.tag(1, WireType.Varint).bool(message.chat);
        /* bool Danmaku = 2 [json_name = "Danmaku"]; */
        if (message.danmaku !== false)
            writer.tag(2, WireType.Varint).bool(message.danmaku);
        /* bool Gift = 3 [json_name = "Gift"]; */
        if (message.gift !== false)
            writer.tag(3, WireType.Varint).bool(message.gift);
        /* bool LuckMoney = 4 [json_name = "LuckMoney"]; */
        if (message.luckMoney !== false)
            writer.tag(4, WireType.Varint).bool(message.luckMoney);
        /* bool Digg = 5 [json_name = "Digg"]; */
        if (message.digg !== false)
            writer.tag(5, WireType.Varint).bool(message.digg);
        /* bool RoomContributor = 7 [json_name = "RoomContributor"]; */
        if (message.roomContributor !== false)
            writer.tag(7, WireType.Varint).bool(message.roomContributor);
        /* bool Props = 8 [json_name = "Props"]; */
        if (message.props !== false)
            writer.tag(8, WireType.Varint).bool(message.props);
        /* bool UserCard = 9 [json_name = "UserCard"]; */
        if (message.userCard !== false)
            writer.tag(9, WireType.Varint).bool(message.userCard);
        /* bool POI = 10 [json_name = "POI"]; */
        if (message.pOI !== false)
            writer.tag(10, WireType.Varint).bool(message.pOI);
        /* int64 MoreAnchor = 11 [json_name = "MoreAnchor"]; */
        if (message.moreAnchor !== 0n)
            writer.tag(11, WireType.Varint).int64(message.moreAnchor);
        /* int64 Banner = 12 [json_name = "Banner"]; */
        if (message.banner !== 0n)
            writer.tag(12, WireType.Varint).int64(message.banner);
        /* int64 Share = 13 [json_name = "Share"]; */
        if (message.share !== 0n)
            writer.tag(13, WireType.Varint).int64(message.share);
        /* int64 UserCorner = 14 [json_name = "UserCorner"]; */
        if (message.userCorner !== 0n)
            writer.tag(14, WireType.Varint).int64(message.userCorner);
        /* int64 Landscape = 15 [json_name = "Landscape"]; */
        if (message.landscape !== 0n)
            writer.tag(15, WireType.Varint).int64(message.landscape);
        /* int64 LandscapeChat = 16 [json_name = "LandscapeChat"]; */
        if (message.landscapeChat !== 0n)
            writer.tag(16, WireType.Varint).int64(message.landscapeChat);
        /* int64 PublicScreen = 17 [json_name = "PublicScreen"]; */
        if (message.publicScreen !== 0n)
            writer.tag(17, WireType.Varint).int64(message.publicScreen);
        /* int64 GiftAnchorMt = 18 [json_name = "GiftAnchorMt"]; */
        if (message.giftAnchorMt !== 0n)
            writer.tag(18, WireType.Varint).int64(message.giftAnchorMt);
        /* int64 RecordScreen = 19 [json_name = "RecordScreen"]; */
        if (message.recordScreen !== 0n)
            writer.tag(19, WireType.Varint).int64(message.recordScreen);
        /* int64 DonationSticker = 20 [json_name = "DonationSticker"]; */
        if (message.donationSticker !== 0n)
            writer.tag(20, WireType.Varint).int64(message.donationSticker);
        /* int64 HourRank = 21 [json_name = "HourRank"]; */
        if (message.hourRank !== 0n)
            writer.tag(21, WireType.Varint).int64(message.hourRank);
        /* int64 CommerceCard = 22 [json_name = "CommerceCard"]; */
        if (message.commerceCard !== 0n)
            writer.tag(22, WireType.Varint).int64(message.commerceCard);
        /* int64 AudioChat = 23 [json_name = "AudioChat"]; */
        if (message.audioChat !== 0n)
            writer.tag(23, WireType.Varint).int64(message.audioChat);
        /* int64 DanmakuDefault = 24 [json_name = "DanmakuDefault"]; */
        if (message.danmakuDefault !== 0n)
            writer.tag(24, WireType.Varint).int64(message.danmakuDefault);
        /* int64 KtvOrderSong = 25 [json_name = "KtvOrderSong"]; */
        if (message.ktvOrderSong !== 0n)
            writer.tag(25, WireType.Varint).int64(message.ktvOrderSong);
        /* int64 SelectionAlbum = 26 [json_name = "SelectionAlbum"]; */
        if (message.selectionAlbum !== 0n)
            writer.tag(26, WireType.Varint).int64(message.selectionAlbum);
        /* int64 Like = 27 [json_name = "Like"]; */
        if (message.like !== 0n)
            writer.tag(27, WireType.Varint).int64(message.like);
        /* int64 MultiplierPlayback = 28 [json_name = "MultiplierPlayback"]; */
        if (message.multiplierPlayback !== 0n)
            writer.tag(28, WireType.Varint).int64(message.multiplierPlayback);
        /* int64 DownloadVideo = 29 [json_name = "DownloadVideo"]; */
        if (message.downloadVideo !== 0n)
            writer.tag(29, WireType.Varint).int64(message.downloadVideo);
        /* int64 Collect = 30 [json_name = "Collect"]; */
        if (message.collect !== 0n)
            writer.tag(30, WireType.Varint).int64(message.collect);
        /* int64 TimedShutdown = 31 [json_name = "TimedShutdown"]; */
        if (message.timedShutdown !== 0n)
            writer.tag(31, WireType.Varint).int64(message.timedShutdown);
        /* int64 Seek = 32 [json_name = "Seek"]; */
        if (message.seek !== 0n)
            writer.tag(32, WireType.Varint).int64(message.seek);
        /* int64 Denounce = 33 [json_name = "Denounce"]; */
        if (message.denounce !== 0n)
            writer.tag(33, WireType.Varint).int64(message.denounce);
        /* int64 Dislike = 34 [json_name = "Dislike"]; */
        if (message.dislike !== 0n)
            writer.tag(34, WireType.Varint).int64(message.dislike);
        /* int64 OnlyTa = 35 [json_name = "OnlyTa"]; */
        if (message.onlyTa !== 0n)
            writer.tag(35, WireType.Varint).int64(message.onlyTa);
        /* int64 CastScreen = 36 [json_name = "CastScreen"]; */
        if (message.castScreen !== 0n)
            writer.tag(36, WireType.Varint).int64(message.castScreen);
        /* int64 CommentWall = 37 [json_name = "CommentWall"]; */
        if (message.commentWall !== 0n)
            writer.tag(37, WireType.Varint).int64(message.commentWall);
        /* int64 BulletStyle = 38 [json_name = "BulletStyle"]; */
        if (message.bulletStyle !== 0n)
            writer.tag(38, WireType.Varint).int64(message.bulletStyle);
        /* int64 ShowGamePlugin = 39 [json_name = "ShowGamePlugin"]; */
        if (message.showGamePlugin !== 0n)
            writer.tag(39, WireType.Varint).int64(message.showGamePlugin);
        /* int64 VSGift = 40 [json_name = "VSGift"]; */
        if (message.vSGift !== 0n)
            writer.tag(40, WireType.Varint).int64(message.vSGift);
        /* int64 VSTopic = 41 [json_name = "VSTopic"]; */
        if (message.vSTopic !== 0n)
            writer.tag(41, WireType.Varint).int64(message.vSTopic);
        /* int64 VSRank = 42 [json_name = "VSRank"]; */
        if (message.vSRank !== 0n)
            writer.tag(42, WireType.Varint).int64(message.vSRank);
        /* int64 AdminCommentWall = 43 [json_name = "AdminCommentWall"]; */
        if (message.adminCommentWall !== 0n)
            writer.tag(43, WireType.Varint).int64(message.adminCommentWall);
        /* int64 CommerceComponent = 44 [json_name = "CommerceComponent"]; */
        if (message.commerceComponent !== 0n)
            writer.tag(44, WireType.Varint).int64(message.commerceComponent);
        /* int64 DouPlus = 45 [json_name = "DouPlus"]; */
        if (message.douPlus !== 0n)
            writer.tag(45, WireType.Varint).int64(message.douPlus);
        /* int64 GamePointsPlaying = 46 [json_name = "GamePointsPlaying"]; */
        if (message.gamePointsPlaying !== 0n)
            writer.tag(46, WireType.Varint).int64(message.gamePointsPlaying);
        /* int64 Poster = 47 [json_name = "Poster"]; */
        if (message.poster !== 0n)
            writer.tag(47, WireType.Varint).int64(message.poster);
        /* int64 Highlights = 48 [json_name = "Highlights"]; */
        if (message.highlights !== 0n)
            writer.tag(48, WireType.Varint).int64(message.highlights);
        /* int64 TypingCommentState = 49 [json_name = "TypingCommentState"]; */
        if (message.typingCommentState !== 0n)
            writer.tag(49, WireType.Varint).int64(message.typingCommentState);
        /* int64 StrokeUpDownGuide = 50 [json_name = "StrokeUpDownGuide"]; */
        if (message.strokeUpDownGuide !== 0n)
            writer.tag(50, WireType.Varint).int64(message.strokeUpDownGuide);
        /* int64 UpRightStatsFloatingLayer = 51 [json_name = "UpRightStatsFloatingLayer"]; */
        if (message.upRightStatsFloatingLayer !== 0n)
            writer.tag(51, WireType.Varint).int64(message.upRightStatsFloatingLayer);
        /* int64 CastScreenExplicit = 52 [json_name = "CastScreenExplicit"]; */
        if (message.castScreenExplicit !== 0n)
            writer.tag(52, WireType.Varint).int64(message.castScreenExplicit);
        /* int64 Selection = 53 [json_name = "Selection"]; */
        if (message.selection !== 0n)
            writer.tag(53, WireType.Varint).int64(message.selection);
        /* int64 IndustryService = 54 [json_name = "IndustryService"]; */
        if (message.industryService !== 0n)
            writer.tag(54, WireType.Varint).int64(message.industryService);
        /* int64 VerticalRank = 55 [json_name = "VerticalRank"]; */
        if (message.verticalRank !== 0n)
            writer.tag(55, WireType.Varint).int64(message.verticalRank);
        /* int64 EnterEffects = 56 [json_name = "EnterEffects"]; */
        if (message.enterEffects !== 0n)
            writer.tag(56, WireType.Varint).int64(message.enterEffects);
        /* int64 FansClub = 57 [json_name = "FansClub"]; */
        if (message.fansClub !== 0n)
            writer.tag(57, WireType.Varint).int64(message.fansClub);
        /* int64 EmojiOutside = 58 [json_name = "EmojiOutside"]; */
        if (message.emojiOutside !== 0n)
            writer.tag(58, WireType.Varint).int64(message.emojiOutside);
        /* int64 CanSellTicket = 59 [json_name = "CanSellTicket"]; */
        if (message.canSellTicket !== 0n)
            writer.tag(59, WireType.Varint).int64(message.canSellTicket);
        /* int64 DouPlusPopularityGem = 60 [json_name = "DouPlusPopularityGem"]; */
        if (message.douPlusPopularityGem !== 0n)
            writer.tag(60, WireType.Varint).int64(message.douPlusPopularityGem);
        /* int64 MissionCenter = 61 [json_name = "MissionCenter"]; */
        if (message.missionCenter !== 0n)
            writer.tag(61, WireType.Varint).int64(message.missionCenter);
        /* int64 ExpandScreen = 62 [json_name = "ExpandScreen"]; */
        if (message.expandScreen !== 0n)
            writer.tag(62, WireType.Varint).int64(message.expandScreen);
        /* int64 FansGroup = 63 [json_name = "FansGroup"]; */
        if (message.fansGroup !== 0n)
            writer.tag(63, WireType.Varint).int64(message.fansGroup);
        /* int64 Topic = 64 [json_name = "Topic"]; */
        if (message.topic !== 0n)
            writer.tag(64, WireType.Varint).int64(message.topic);
        /* int64 AnchorMission = 65 [json_name = "AnchorMission"]; */
        if (message.anchorMission !== 0n)
            writer.tag(65, WireType.Varint).int64(message.anchorMission);
        /* int64 Teleprompter = 66 [json_name = "Teleprompter"]; */
        if (message.teleprompter !== 0n)
            writer.tag(66, WireType.Varint).int64(message.teleprompter);
        /* int64 ChatDynamicSlideSpeed = 67 [json_name = "ChatDynamicSlideSpeed"]; */
        if (message.chatDynamicSlideSpeed !== 0n)
            writer.tag(67, WireType.Varint).int64(message.chatDynamicSlideSpeed);
        /* int64 SmallWindowDisplay = 68 [json_name = "SmallWindowDisplay"]; */
        if (message.smallWindowDisplay !== 0n)
            writer.tag(68, WireType.Varint).int64(message.smallWindowDisplay);
        /* int64 MessageDispatch = 69 [json_name = "MessageDispatch"]; */
        if (message.messageDispatch !== 0n)
            writer.tag(69, WireType.Varint).int64(message.messageDispatch);
        /* int64 RoomChannel = 70 [json_name = "RoomChannel"]; */
        if (message.roomChannel !== 0n)
            writer.tag(70, WireType.Varint).int64(message.roomChannel);
        /* int64 ChatDispatch = 71 [json_name = "ChatDispatch"]; */
        if (message.chatDispatch !== 0n)
            writer.tag(71, WireType.Varint).int64(message.chatDispatch);
        /* int64 LinkmicGuestLike = 72 [json_name = "LinkmicGuestLike"]; */
        if (message.linkmicGuestLike !== 0n)
            writer.tag(72, WireType.Varint).int64(message.linkmicGuestLike);
        /* int64 MediaLinkmic = 73 [json_name = "MediaLinkmic"]; */
        if (message.mediaLinkmic !== 0n)
            writer.tag(73, WireType.Varint).int64(message.mediaLinkmic);
        /* int64 VideoShare = 74 [json_name = "VideoShare"]; */
        if (message.videoShare !== 0n)
            writer.tag(74, WireType.Varint).int64(message.videoShare);
        /* int64 ChatGuideEmoji = 75 [json_name = "ChatGuideEmoji"]; */
        if (message.chatGuideEmoji !== 0n)
            writer.tag(75, WireType.Varint).int64(message.chatGuideEmoji);
        /* int64 ChatGuideImage = 76 [json_name = "ChatGuideImage"]; */
        if (message.chatGuideImage !== 0n)
            writer.tag(76, WireType.Varint).int64(message.chatGuideImage);
        /* int64 PCPlay = 77 [json_name = "PCPlay"]; */
        if (message.pCPlay !== 0n)
            writer.tag(77, WireType.Varint).int64(message.pCPlay);
        /* int64 PadPlay = 78 [json_name = "PadPlay"]; */
        if (message.padPlay !== 0n)
            writer.tag(78, WireType.Varint).int64(message.padPlay);
        /* int64 LongTouch = 79 [json_name = "LongTouch"]; */
        if (message.longTouch !== 0n)
            writer.tag(79, WireType.Varint).int64(message.longTouch);
        /* int64 FirstFeedHistChat = 80 [json_name = "FirstFeedHistChat"]; */
        if (message.firstFeedHistChat !== 0n)
            writer.tag(80, WireType.Varint).int64(message.firstFeedHistChat);
        /* int64 MoreHistChat = 81 [json_name = "MoreHistChat"]; */
        if (message.moreHistChat !== 0n)
            writer.tag(81, WireType.Varint).int64(message.moreHistChat);
        /* int64 WordAssociation = 82 [json_name = "WordAssociation"]; */
        if (message.wordAssociation !== 0n)
            writer.tag(82, WireType.Varint).int64(message.wordAssociation);
        /* int64 LandscapeScreenCapture = 83 [json_name = "LandscapeScreenCapture"]; */
        if (message.landscapeScreenCapture !== 0n)
            writer.tag(83, WireType.Varint).int64(message.landscapeScreenCapture);
        /* int64 LandscapeScreenRecording = 84 [json_name = "LandscapeScreenRecording"]; */
        if (message.landscapeScreenRecording !== 0n)
            writer.tag(84, WireType.Varint).int64(message.landscapeScreenRecording);
        /* int64 ScreenProjectionBarrage = 85 [json_name = "ScreenProjectionBarrage"]; */
        if (message.screenProjectionBarrage !== 0n)
            writer.tag(85, WireType.Varint).int64(message.screenProjectionBarrage);
        /* int64 SmallWindowPlayer = 86 [json_name = "SmallWindowPlayer"]; */
        if (message.smallWindowPlayer !== 0n)
            writer.tag(86, WireType.Varint).int64(message.smallWindowPlayer);
        /* int64 ChatOperate = 87 [json_name = "ChatOperate"]; */
        if (message.chatOperate !== 0n)
            writer.tag(87, WireType.Varint).int64(message.chatOperate);
        /* int64 EcomFansClub = 88 [json_name = "EcomFansClub"]; */
        if (message.ecomFansClub !== 0n)
            writer.tag(88, WireType.Varint).int64(message.ecomFansClub);
        /* int64 AudioChatTotext = 89 [json_name = "AudioChatTotext"]; */
        if (message.audioChatTotext !== 0n)
            writer.tag(89, WireType.Varint).int64(message.audioChatTotext);
        /* int64 CommonCard = 90 [json_name = "CommonCard"]; */
        if (message.commonCard !== 0n)
            writer.tag(90, WireType.Varint).int64(message.commonCard);
        /* int64 ShortTouch = 91 [json_name = "ShortTouch"]; */
        if (message.shortTouch !== 0n)
            writer.tag(91, WireType.Varint).int64(message.shortTouch);
        /* int64 HostTeamChannel = 92 [json_name = "HostTeamChannel"]; */
        if (message.hostTeamChannel !== 0n)
            writer.tag(92, WireType.Varint).int64(message.hostTeamChannel);
        /* int64 LandscapeChatDynamicSlideSpeed = 93 [json_name = "LandscapeChatDynamicSlideSpeed"]; */
        if (message.landscapeChatDynamicSlideSpeed !== 0n)
            writer.tag(93, WireType.Varint).int64(message.landscapeChatDynamicSlideSpeed);
        /* int64 HostTeam = 94 [json_name = "HostTeam"]; */
        if (message.hostTeam !== 0n)
            writer.tag(94, WireType.Varint).int64(message.hostTeam);
        /* int64 AnchorHotMessageAggregated = 95 [json_name = "AnchorHotMessageAggregated"]; */
        if (message.anchorHotMessageAggregated !== 0n)
            writer.tag(95, WireType.Varint).int64(message.anchorHotMessageAggregated);
        /* int64 AnchorColdMessageTiled = 96 [json_name = "AnchorColdMessageTiled"]; */
        if (message.anchorColdMessageTiled !== 0n)
            writer.tag(96, WireType.Varint).int64(message.anchorColdMessageTiled);
        /* int64 ScreenBottomInfo = 97 [json_name = "ScreenBottomInfo"]; */
        if (message.screenBottomInfo !== 0n)
            writer.tag(97, WireType.Varint).int64(message.screenBottomInfo);
        /* int64 PreviewHotCommentSwitch = 98 [json_name = "PreviewHotCommentSwitch"]; */
        if (message.previewHotCommentSwitch !== 0n)
            writer.tag(98, WireType.Varint).int64(message.previewHotCommentSwitch);
        /* int64 RoomWidget = 99 [json_name = "RoomWidget"]; */
        if (message.roomWidget !== 0n)
            writer.tag(99, WireType.Varint).int64(message.roomWidget);
        /* data.RoomAuthStatus.RoomAuthOffReasons OffReason = 100 [json_name = "OffReason"]; */
        if (message.offReason)
            RoomAuthStatus_RoomAuthOffReasons.internalBinaryWrite(message.offReason, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle SpecialStyle = 101 [json_name = "SpecialStyle"]; */
        if (message.specialStyle)
            RoomAuthStatus_RoomAuthSpecialStyle.internalBinaryWrite(message.specialStyle, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* int64 PanelECService = 102 [json_name = "PanelECService"]; */
        if (message.panelECService !== 0n)
            writer.tag(102, WireType.Varint).int64(message.panelECService);
        /* int64 FixedChat = 103 [json_name = "FixedChat"]; */
        if (message.fixedChat !== 0n)
            writer.tag(103, WireType.Varint).int64(message.fixedChat);
        /* int64 LandscapeGift = 104 [json_name = "LandscapeGift"]; */
        if (message.landscapeGift !== 0n)
            writer.tag(104, WireType.Varint).int64(message.landscapeGift);
        /* int64 HotChatTray = 105 [json_name = "HotChatTray"]; */
        if (message.hotChatTray !== 0n)
            writer.tag(105, WireType.Varint).int64(message.hotChatTray);
        /* int64 ItemShare = 106 [json_name = "ItemShare"]; */
        if (message.itemShare !== 0n)
            writer.tag(106, WireType.Varint).int64(message.itemShare);
        /* int64 ShortTouchTempState = 107 [json_name = "ShortTouchTempState"]; */
        if (message.shortTouchTempState !== 0n)
            writer.tag(107, WireType.Varint).int64(message.shortTouchTempState);
        /* int64 StickyMessage = 108 [json_name = "StickyMessage"]; */
        if (message.stickyMessage !== 0n)
            writer.tag(108, WireType.Varint).int64(message.stickyMessage);
        /* int64 ProjectionBtn = 109 [json_name = "ProjectionBtn"]; */
        if (message.projectionBtn !== 0n)
            writer.tag(109, WireType.Varint).int64(message.projectionBtn);
        /* int64 ChatDynamicSlideSpeedAnchor = 110 [json_name = "ChatDynamicSlideSpeedAnchor"]; */
        if (message.chatDynamicSlideSpeedAnchor !== 0n)
            writer.tag(110, WireType.Varint).int64(message.chatDynamicSlideSpeedAnchor);
        /* int64 PosterCache = 111 [json_name = "PosterCache"]; */
        if (message.posterCache !== 0n)
            writer.tag(111, WireType.Varint).int64(message.posterCache);
        /* int64 MediaHistoryMessage = 112 [json_name = "MediaHistoryMessage"]; */
        if (message.mediaHistoryMessage !== 0n)
            writer.tag(112, WireType.Varint).int64(message.mediaHistoryMessage);
        /* int64 ToolbarBubble = 113 [json_name = "ToolbarBubble"]; */
        if (message.toolbarBubble !== 0n)
            writer.tag(113, WireType.Varint).int64(message.toolbarBubble);
        /* int64 ImHeatValue = 114 [json_name = "ImHeatValue"]; */
        if (message.imHeatValue !== 0n)
            writer.tag(114, WireType.Varint).int64(message.imHeatValue);
        /* int64 InteractiveComponent = 115 [json_name = "InteractiveComponent"]; */
        if (message.interactiveComponent !== 0n)
            writer.tag(115, WireType.Varint).int64(message.interactiveComponent);
        /* int64 ChatReply = 116 [json_name = "ChatReply"]; */
        if (message.chatReply !== 0n)
            writer.tag(116, WireType.Varint).int64(message.chatReply);
        /* int64 ChatMention = 117 [json_name = "ChatMention"]; */
        if (message.chatMention !== 0n)
            writer.tag(117, WireType.Varint).int64(message.chatMention);
        /* int64 FrequentlyChat = 118 [json_name = "FrequentlyChat"]; */
        if (message.frequentlyChat !== 0n)
            writer.tag(118, WireType.Varint).int64(message.frequentlyChat);
        /* int64 StreamAdaptation = 119 [json_name = "StreamAdaptation"]; */
        if (message.streamAdaptation !== 0n)
            writer.tag(119, WireType.Varint).int64(message.streamAdaptation);
        /* int64 VideoAmplificationType = 120 [json_name = "VideoAmplificationType"]; */
        if (message.videoAmplificationType !== 0n)
            writer.tag(120, WireType.Varint).int64(message.videoAmplificationType);
        /* int64 VsCommentBar = 200 [json_name = "VsCommentBar"]; */
        if (message.vsCommentBar !== 0n)
            writer.tag(200, WireType.Varint).int64(message.vsCommentBar);
        /* int64 VsWelcomeDanmaku = 201 [json_name = "VsWelcomeDanmaku"]; */
        if (message.vsWelcomeDanmaku !== 0n)
            writer.tag(201, WireType.Varint).int64(message.vsWelcomeDanmaku);
        /* int64 VsFansClub = 202 [json_name = "VsFansClub"]; */
        if (message.vsFansClub !== 0n)
            writer.tag(202, WireType.Varint).int64(message.vsFansClub);
        /* int64 VsExtensionEnableFollow = 203 [json_name = "VsExtensionEnableFollow"]; */
        if (message.vsExtensionEnableFollow !== 0n)
            writer.tag(203, WireType.Varint).int64(message.vsExtensionEnableFollow);
        /* int64 VsDouPlus = 204 [json_name = "VsDouPlus"]; */
        if (message.vsDouPlus !== 0n)
            writer.tag(204, WireType.Varint).int64(message.vsDouPlus);
        /* int64 QuizGamePointsPlaying = 205 [json_name = "QuizGamePointsPlaying"]; */
        if (message.quizGamePointsPlaying !== 0n)
            writer.tag(205, WireType.Varint).int64(message.quizGamePointsPlaying);
        /* int64 UgcVSReplayDelete = 206 [json_name = "UgcVSReplayDelete"]; */
        if (message.ugcVSReplayDelete !== 0n)
            writer.tag(206, WireType.Varint).int64(message.ugcVSReplayDelete);
        /* int64 UgcVsReplayVisibility = 207 [json_name = "UgcVsReplayVisibility"]; */
        if (message.ugcVsReplayVisibility !== 0n)
            writer.tag(207, WireType.Varint).int64(message.ugcVsReplayVisibility);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomAuthStatus
 */
export const RoomAuthStatus = new RoomAuthStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAuthStatus_RoomAuthOffReasons$Type extends MessageType<RoomAuthStatus_RoomAuthOffReasons> {
    constructor() {
        super("data.RoomAuthStatus.RoomAuthOffReasons", [
            { no: 1, name: "gift", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomAuthStatus_RoomAuthOffReasons>): RoomAuthStatus_RoomAuthOffReasons {
        const message = { gift: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAuthStatus_RoomAuthOffReasons>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAuthStatus_RoomAuthOffReasons): RoomAuthStatus_RoomAuthOffReasons {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string gift */ 1:
                    message.gift = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAuthStatus_RoomAuthOffReasons, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string gift = 1; */
        if (message.gift !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gift);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomAuthStatus.RoomAuthOffReasons
 */
export const RoomAuthStatus_RoomAuthOffReasons = new RoomAuthStatus_RoomAuthOffReasons$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAuthStatus_RoomAuthSpecialStyle$Type extends MessageType<RoomAuthStatus_RoomAuthSpecialStyle> {
    constructor() {
        super("data.RoomAuthStatus.RoomAuthSpecialStyle", [
            { no: 1, name: "Chat", kind: "message", jsonName: "Chat", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style },
            { no: 2, name: "Gift", kind: "message", jsonName: "Gift", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style },
            { no: 3, name: "RoomContributor", kind: "message", jsonName: "RoomContributor", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style },
            { no: 4, name: "Like", kind: "message", jsonName: "Like", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style },
            { no: 5, name: "RoomChannel", kind: "message", jsonName: "RoomChannel", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style },
            { no: 6, name: "Share", kind: "message", jsonName: "Share", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style },
            { no: 7, name: "CastScreenAuth", kind: "message", jsonName: "CastScreenAuth", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style },
            { no: 8, name: "Landscape", kind: "message", jsonName: "Landscape", T: () => RoomAuthStatus_RoomAuthSpecialStyle_Style }
        ]);
    }
    create(value?: PartialMessage<RoomAuthStatus_RoomAuthSpecialStyle>): RoomAuthStatus_RoomAuthSpecialStyle {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAuthStatus_RoomAuthSpecialStyle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAuthStatus_RoomAuthSpecialStyle): RoomAuthStatus_RoomAuthSpecialStyle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Chat = 1 [json_name = "Chat"];*/ 1:
                    message.chat = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Gift = 2 [json_name = "Gift"];*/ 2:
                    message.gift = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.gift);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style RoomContributor = 3 [json_name = "RoomContributor"];*/ 3:
                    message.roomContributor = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.roomContributor);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Like = 4 [json_name = "Like"];*/ 4:
                    message.like = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.like);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style RoomChannel = 5 [json_name = "RoomChannel"];*/ 5:
                    message.roomChannel = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.roomChannel);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Share = 6 [json_name = "Share"];*/ 6:
                    message.share = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.share);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style CastScreenAuth = 7 [json_name = "CastScreenAuth"];*/ 7:
                    message.castScreenAuth = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.castScreenAuth);
                    break;
                case /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Landscape = 8 [json_name = "Landscape"];*/ 8:
                    message.landscape = RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryRead(reader, reader.uint32(), options, message.landscape);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAuthStatus_RoomAuthSpecialStyle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Chat = 1 [json_name = "Chat"]; */
        if (message.chat)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.chat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Gift = 2 [json_name = "Gift"]; */
        if (message.gift)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.gift, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style RoomContributor = 3 [json_name = "RoomContributor"]; */
        if (message.roomContributor)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.roomContributor, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Like = 4 [json_name = "Like"]; */
        if (message.like)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.like, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style RoomChannel = 5 [json_name = "RoomChannel"]; */
        if (message.roomChannel)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.roomChannel, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Share = 6 [json_name = "Share"]; */
        if (message.share)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.share, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style CastScreenAuth = 7 [json_name = "CastScreenAuth"]; */
        if (message.castScreenAuth)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.castScreenAuth, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomAuthStatus.RoomAuthSpecialStyle.Style Landscape = 8 [json_name = "Landscape"]; */
        if (message.landscape)
            RoomAuthStatus_RoomAuthSpecialStyle_Style.internalBinaryWrite(message.landscape, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomAuthStatus.RoomAuthSpecialStyle
 */
export const RoomAuthStatus_RoomAuthSpecialStyle = new RoomAuthStatus_RoomAuthSpecialStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAuthStatus_RoomAuthSpecialStyle_Style$Type extends MessageType<RoomAuthStatus_RoomAuthSpecialStyle_Style> {
    constructor() {
        super("data.RoomAuthStatus.RoomAuthSpecialStyle.Style", [
            { no: 1, name: "UnableStyle", kind: "scalar", jsonName: "UnableStyle", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "Content", kind: "scalar", jsonName: "Content", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "OffType", kind: "scalar", jsonName: "OffType", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "AnchorSwitch", kind: "scalar", jsonName: "AnchorSwitch", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "SwitchStatusTipMsg", kind: "scalar", jsonName: "SwitchStatusTipMsg", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "SwitchStatusAnchorTipMsg", kind: "scalar", jsonName: "SwitchStatusAnchorTipMsg", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "AnchorSwitchForPaidLive", kind: "scalar", jsonName: "AnchorSwitchForPaidLive", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "ContentForPaidLive", kind: "scalar", jsonName: "ContentForPaidLive", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomAuthStatus_RoomAuthSpecialStyle_Style>): RoomAuthStatus_RoomAuthSpecialStyle_Style {
        const message = { unableStyle: 0, content: "", offType: 0, anchorSwitch: 0, switchStatusTipMsg: "", switchStatusAnchorTipMsg: "", anchorSwitchForPaidLive: 0, contentForPaidLive: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAuthStatus_RoomAuthSpecialStyle_Style>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAuthStatus_RoomAuthSpecialStyle_Style): RoomAuthStatus_RoomAuthSpecialStyle_Style {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 UnableStyle = 1 [json_name = "UnableStyle"];*/ 1:
                    message.unableStyle = reader.int32();
                    break;
                case /* string Content = 2 [json_name = "Content"];*/ 2:
                    message.content = reader.string();
                    break;
                case /* int32 OffType = 3 [json_name = "OffType"];*/ 3:
                    message.offType = reader.int32();
                    break;
                case /* int32 AnchorSwitch = 4 [json_name = "AnchorSwitch"];*/ 4:
                    message.anchorSwitch = reader.int32();
                    break;
                case /* string SwitchStatusTipMsg = 5 [json_name = "SwitchStatusTipMsg"];*/ 5:
                    message.switchStatusTipMsg = reader.string();
                    break;
                case /* string SwitchStatusAnchorTipMsg = 6 [json_name = "SwitchStatusAnchorTipMsg"];*/ 6:
                    message.switchStatusAnchorTipMsg = reader.string();
                    break;
                case /* int32 AnchorSwitchForPaidLive = 7 [json_name = "AnchorSwitchForPaidLive"];*/ 7:
                    message.anchorSwitchForPaidLive = reader.int32();
                    break;
                case /* string ContentForPaidLive = 8 [json_name = "ContentForPaidLive"];*/ 8:
                    message.contentForPaidLive = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAuthStatus_RoomAuthSpecialStyle_Style, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 UnableStyle = 1 [json_name = "UnableStyle"]; */
        if (message.unableStyle !== 0)
            writer.tag(1, WireType.Varint).int32(message.unableStyle);
        /* string Content = 2 [json_name = "Content"]; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int32 OffType = 3 [json_name = "OffType"]; */
        if (message.offType !== 0)
            writer.tag(3, WireType.Varint).int32(message.offType);
        /* int32 AnchorSwitch = 4 [json_name = "AnchorSwitch"]; */
        if (message.anchorSwitch !== 0)
            writer.tag(4, WireType.Varint).int32(message.anchorSwitch);
        /* string SwitchStatusTipMsg = 5 [json_name = "SwitchStatusTipMsg"]; */
        if (message.switchStatusTipMsg !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.switchStatusTipMsg);
        /* string SwitchStatusAnchorTipMsg = 6 [json_name = "SwitchStatusAnchorTipMsg"]; */
        if (message.switchStatusAnchorTipMsg !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.switchStatusAnchorTipMsg);
        /* int32 AnchorSwitchForPaidLive = 7 [json_name = "AnchorSwitchForPaidLive"]; */
        if (message.anchorSwitchForPaidLive !== 0)
            writer.tag(7, WireType.Varint).int32(message.anchorSwitchForPaidLive);
        /* string ContentForPaidLive = 8 [json_name = "ContentForPaidLive"]; */
        if (message.contentForPaidLive !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.contentForPaidLive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomAuthStatus.RoomAuthSpecialStyle.Style
 */
export const RoomAuthStatus_RoomAuthSpecialStyle_Style = new RoomAuthStatus_RoomAuthSpecialStyle_Style$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoreEntrance$Type extends MessageType<MoreEntrance> {
    constructor() {
        super("data.MoreEntrance", [
            { no: 1, name: "Title", kind: "scalar", jsonName: "Title", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Type", kind: "scalar", jsonName: "Type", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MoreEntrance>): MoreEntrance {
        const message = { title: "", type: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MoreEntrance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoreEntrance): MoreEntrance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Title = 1 [json_name = "Title"];*/ 1:
                    message.title = reader.string();
                    break;
                case /* int64 Type = 2 [json_name = "Type"];*/ 2:
                    message.type = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoreEntrance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Title = 1 [json_name = "Title"]; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int64 Type = 2 [json_name = "Type"]; */
        if (message.type !== 0n)
            writer.tag(2, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MoreEntrance
 */
export const MoreEntrance = new MoreEntrance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomTab$Type extends MessageType<RoomTab> {
    constructor() {
        super("data.RoomTab", [
            { no: 1, name: "tab_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "tab_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tab_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomTab>): RoomTab {
        const message = { tabType: 0, tabName: "", tabUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomTab>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomTab): RoomTab {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tab_type */ 1:
                    message.tabType = reader.int32();
                    break;
                case /* string tab_name */ 2:
                    message.tabName = reader.string();
                    break;
                case /* string tab_url */ 3:
                    message.tabUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomTab, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tab_type = 1; */
        if (message.tabType !== 0)
            writer.tag(1, WireType.Varint).int32(message.tabType);
        /* string tab_name = 2; */
        if (message.tabName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tabName);
        /* string tab_url = 3; */
        if (message.tabUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tabUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomTab
 */
export const RoomTab = new RoomTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomExtra$Type extends MessageType<RoomExtra> {
    constructor() {
        super("data.RoomExtra", [
            { no: 1, name: "is_sandbox", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "enter_region_restriction", kind: "message", T: () => RegionRestriction },
            { no: 3, name: "enter_region_match", kind: "message", T: () => RegionMatch },
            { no: 4, name: "filter_with_no_context", kind: "message", T: () => SafeReason },
            { no: 5, name: "xigua_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "limit_strategy", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "limit_appid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "geo_block", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "vr_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "is_virtual_anchor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "create_scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "realtime_replay_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "realtime_playback_shift", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "realtime_playback_start_shift", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "realtime_playback_qualities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamUrl_LiveCoreSDKData_PullData_Options_Quality }
        ]);
    }
    create(value?: PartialMessage<RoomExtra>): RoomExtra {
        const message = { isSandbox: false, xiguaUid: 0n, limitStrategy: 0n, limitAppid: "", geoBlock: 0, vrType: 0, isVirtualAnchor: false, createScene: "", realtimeReplayEnabled: false, realtimePlaybackShift: 0n, realtimePlaybackStartShift: 0n, realtimePlaybackQualities: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomExtra): RoomExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_sandbox */ 1:
                    message.isSandbox = reader.bool();
                    break;
                case /* data.RegionRestriction enter_region_restriction */ 2:
                    message.enterRegionRestriction = RegionRestriction.internalBinaryRead(reader, reader.uint32(), options, message.enterRegionRestriction);
                    break;
                case /* data.RegionMatch enter_region_match */ 3:
                    message.enterRegionMatch = RegionMatch.internalBinaryRead(reader, reader.uint32(), options, message.enterRegionMatch);
                    break;
                case /* data.SafeReason filter_with_no_context */ 4:
                    message.filterWithNoContext = SafeReason.internalBinaryRead(reader, reader.uint32(), options, message.filterWithNoContext);
                    break;
                case /* int64 xigua_uid */ 5:
                    message.xiguaUid = reader.int64().toBigInt();
                    break;
                case /* int64 limit_strategy */ 6:
                    message.limitStrategy = reader.int64().toBigInt();
                    break;
                case /* string limit_appid */ 7:
                    message.limitAppid = reader.string();
                    break;
                case /* int32 geo_block */ 8:
                    message.geoBlock = reader.int32();
                    break;
                case /* int32 vr_type */ 9:
                    message.vrType = reader.int32();
                    break;
                case /* bool is_virtual_anchor */ 10:
                    message.isVirtualAnchor = reader.bool();
                    break;
                case /* string create_scene */ 11:
                    message.createScene = reader.string();
                    break;
                case /* bool realtime_replay_enabled */ 12:
                    message.realtimeReplayEnabled = reader.bool();
                    break;
                case /* int64 realtime_playback_shift */ 13:
                    message.realtimePlaybackShift = reader.int64().toBigInt();
                    break;
                case /* int64 realtime_playback_start_shift */ 14:
                    message.realtimePlaybackStartShift = reader.int64().toBigInt();
                    break;
                case /* repeated data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality realtime_playback_qualities */ 15:
                    message.realtimePlaybackQualities.push(StreamUrl_LiveCoreSDKData_PullData_Options_Quality.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_sandbox = 1; */
        if (message.isSandbox !== false)
            writer.tag(1, WireType.Varint).bool(message.isSandbox);
        /* data.RegionRestriction enter_region_restriction = 2; */
        if (message.enterRegionRestriction)
            RegionRestriction.internalBinaryWrite(message.enterRegionRestriction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.RegionMatch enter_region_match = 3; */
        if (message.enterRegionMatch)
            RegionMatch.internalBinaryWrite(message.enterRegionMatch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.SafeReason filter_with_no_context = 4; */
        if (message.filterWithNoContext)
            SafeReason.internalBinaryWrite(message.filterWithNoContext, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 xigua_uid = 5; */
        if (message.xiguaUid !== 0n)
            writer.tag(5, WireType.Varint).int64(message.xiguaUid);
        /* int64 limit_strategy = 6; */
        if (message.limitStrategy !== 0n)
            writer.tag(6, WireType.Varint).int64(message.limitStrategy);
        /* string limit_appid = 7; */
        if (message.limitAppid !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.limitAppid);
        /* int32 geo_block = 8; */
        if (message.geoBlock !== 0)
            writer.tag(8, WireType.Varint).int32(message.geoBlock);
        /* int32 vr_type = 9; */
        if (message.vrType !== 0)
            writer.tag(9, WireType.Varint).int32(message.vrType);
        /* bool is_virtual_anchor = 10; */
        if (message.isVirtualAnchor !== false)
            writer.tag(10, WireType.Varint).bool(message.isVirtualAnchor);
        /* string create_scene = 11; */
        if (message.createScene !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.createScene);
        /* bool realtime_replay_enabled = 12; */
        if (message.realtimeReplayEnabled !== false)
            writer.tag(12, WireType.Varint).bool(message.realtimeReplayEnabled);
        /* int64 realtime_playback_shift = 13; */
        if (message.realtimePlaybackShift !== 0n)
            writer.tag(13, WireType.Varint).int64(message.realtimePlaybackShift);
        /* int64 realtime_playback_start_shift = 14; */
        if (message.realtimePlaybackStartShift !== 0n)
            writer.tag(14, WireType.Varint).int64(message.realtimePlaybackStartShift);
        /* repeated data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality realtime_playback_qualities = 15; */
        for (let i = 0; i < message.realtimePlaybackQualities.length; i++)
            StreamUrl_LiveCoreSDKData_PullData_Options_Quality.internalBinaryWrite(message.realtimePlaybackQualities[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomExtra
 */
export const RoomExtra = new RoomExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SafeReason$Type extends MessageType<SafeReason> {
    constructor() {
        super("data.SafeReason", [
            { no: 1, name: "safe_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SafeReason>): SafeReason {
        const message = { safeType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SafeReason>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SafeReason): SafeReason {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 safe_type */ 1:
                    message.safeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SafeReason, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 safe_type = 1; */
        if (message.safeType !== 0)
            writer.tag(1, WireType.Varint).int32(message.safeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SafeReason
 */
export const SafeReason = new SafeReason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegionRestriction$Type extends MessageType<RegionRestriction> {
    constructor() {
        super("data.RegionRestriction", [
            { no: 1, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "white_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "black_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegionRestriction>): RegionRestriction {
        const message = { type: 0n, whiteList: [], blackList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegionRestriction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegionRestriction): RegionRestriction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 type */ 1:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* repeated string white_list */ 2:
                    message.whiteList.push(reader.string());
                    break;
                case /* repeated string black_list */ 3:
                    message.blackList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegionRestriction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 type = 1; */
        if (message.type !== 0n)
            writer.tag(1, WireType.Varint).int64(message.type);
        /* repeated string white_list = 2; */
        for (let i = 0; i < message.whiteList.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.whiteList[i]);
        /* repeated string black_list = 3; */
        for (let i = 0; i < message.blackList.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.blackList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RegionRestriction
 */
export const RegionRestriction = new RegionRestriction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegionMatch$Type extends MessageType<RegionMatch> {
    constructor() {
        super("data.RegionMatch", [
            { no: 1, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "allow_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deny_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegionMatch>): RegionMatch {
        const message = { type: 0n, allowList: [], denyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegionMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegionMatch): RegionMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 type */ 1:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* repeated string allow_list */ 2:
                    message.allowList.push(reader.string());
                    break;
                case /* repeated string deny_list */ 3:
                    message.denyList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegionMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 type = 1; */
        if (message.type !== 0n)
            writer.tag(1, WireType.Varint).int64(message.type);
        /* repeated string allow_list = 2; */
        for (let i = 0; i < message.allowList.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.allowList[i]);
        /* repeated string deny_list = 3; */
        for (let i = 0; i < message.denyList.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.denyList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RegionMatch
 */
export const RegionMatch = new RegionMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl$Type extends MessageType<StreamUrl> {
    constructor() {
        super("data.StreamUrl", [
            { no: 1, name: "provider", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "default_resolution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "extra", kind: "message", T: () => StreamUrl_StreamUrlExtra },
            { no: 7, name: "rtmp_push_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "rtmp_pull_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "candidate_resolution", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "hls_pull_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "hls_pull_url_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "rtmp_pull_url_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "rtmp_push_url_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "push_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "live_core_sdk_data", kind: "message", T: () => StreamUrl_LiveCoreSDKData },
            { no: 19, name: "complete_push_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "stream_control_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "stream_orientation", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "push_stream_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "play", kind: "message", T: () => StreamUrl_PlaySetting },
            { no: 26, name: "vr_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl>): StreamUrl {
        const message = { provider: 0n, id: 0n, idStr: "", defaultResolution: "", rtmpPushUrl: "", rtmpPullUrl: "", candidateResolution: [], hlsPullUrl: "", hlsPullUrlParams: "", rtmpPullUrlParams: "", rtmpPushUrlParams: "", pushUrls: [], completePushUrls: [], streamControlType: 0, streamOrientation: 0, pushStreamType: 0, vrType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl): StreamUrl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 provider */ 1:
                    message.provider = reader.int64().toBigInt();
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 3:
                    message.idStr = reader.string();
                    break;
                case /* string default_resolution */ 5:
                    message.defaultResolution = reader.string();
                    break;
                case /* data.StreamUrl.StreamUrlExtra extra */ 6:
                    message.extra = StreamUrl_StreamUrlExtra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                case /* string rtmp_push_url */ 7:
                    message.rtmpPushUrl = reader.string();
                    break;
                case /* string rtmp_pull_url */ 8:
                    message.rtmpPullUrl = reader.string();
                    break;
                case /* repeated string candidate_resolution */ 10:
                    message.candidateResolution.push(reader.string());
                    break;
                case /* string hls_pull_url */ 11:
                    message.hlsPullUrl = reader.string();
                    break;
                case /* string hls_pull_url_params */ 12:
                    message.hlsPullUrlParams = reader.string();
                    break;
                case /* string rtmp_pull_url_params */ 13:
                    message.rtmpPullUrlParams = reader.string();
                    break;
                case /* string rtmp_push_url_params */ 15:
                    message.rtmpPushUrlParams = reader.string();
                    break;
                case /* repeated string push_urls */ 16:
                    message.pushUrls.push(reader.string());
                    break;
                case /* data.StreamUrl.LiveCoreSDKData live_core_sdk_data */ 17:
                    message.liveCoreSdkData = StreamUrl_LiveCoreSDKData.internalBinaryRead(reader, reader.uint32(), options, message.liveCoreSdkData);
                    break;
                case /* repeated string complete_push_urls */ 19:
                    message.completePushUrls.push(reader.string());
                    break;
                case /* int32 stream_control_type */ 20:
                    message.streamControlType = reader.int32();
                    break;
                case /* int32 stream_orientation */ 21:
                    message.streamOrientation = reader.int32();
                    break;
                case /* int32 push_stream_type */ 22:
                    message.pushStreamType = reader.int32();
                    break;
                case /* data.StreamUrl.PlaySetting play */ 24:
                    message.play = StreamUrl_PlaySetting.internalBinaryRead(reader, reader.uint32(), options, message.play);
                    break;
                case /* int32 vr_type */ 26:
                    message.vrType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 provider = 1; */
        if (message.provider !== 0n)
            writer.tag(1, WireType.Varint).int64(message.provider);
        /* int64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* string id_str = 3; */
        if (message.idStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.idStr);
        /* string default_resolution = 5; */
        if (message.defaultResolution !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.defaultResolution);
        /* data.StreamUrl.StreamUrlExtra extra = 6; */
        if (message.extra)
            StreamUrl_StreamUrlExtra.internalBinaryWrite(message.extra, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string rtmp_push_url = 7; */
        if (message.rtmpPushUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rtmpPushUrl);
        /* string rtmp_pull_url = 8; */
        if (message.rtmpPullUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.rtmpPullUrl);
        /* repeated string candidate_resolution = 10; */
        for (let i = 0; i < message.candidateResolution.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.candidateResolution[i]);
        /* string hls_pull_url = 11; */
        if (message.hlsPullUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.hlsPullUrl);
        /* string hls_pull_url_params = 12; */
        if (message.hlsPullUrlParams !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.hlsPullUrlParams);
        /* string rtmp_pull_url_params = 13; */
        if (message.rtmpPullUrlParams !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.rtmpPullUrlParams);
        /* string rtmp_push_url_params = 15; */
        if (message.rtmpPushUrlParams !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.rtmpPushUrlParams);
        /* repeated string push_urls = 16; */
        for (let i = 0; i < message.pushUrls.length; i++)
            writer.tag(16, WireType.LengthDelimited).string(message.pushUrls[i]);
        /* data.StreamUrl.LiveCoreSDKData live_core_sdk_data = 17; */
        if (message.liveCoreSdkData)
            StreamUrl_LiveCoreSDKData.internalBinaryWrite(message.liveCoreSdkData, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* repeated string complete_push_urls = 19; */
        for (let i = 0; i < message.completePushUrls.length; i++)
            writer.tag(19, WireType.LengthDelimited).string(message.completePushUrls[i]);
        /* int32 stream_control_type = 20; */
        if (message.streamControlType !== 0)
            writer.tag(20, WireType.Varint).int32(message.streamControlType);
        /* int32 stream_orientation = 21; */
        if (message.streamOrientation !== 0)
            writer.tag(21, WireType.Varint).int32(message.streamOrientation);
        /* int32 push_stream_type = 22; */
        if (message.pushStreamType !== 0)
            writer.tag(22, WireType.Varint).int32(message.pushStreamType);
        /* data.StreamUrl.PlaySetting play = 24; */
        if (message.play)
            StreamUrl_PlaySetting.internalBinaryWrite(message.play, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* int32 vr_type = 26; */
        if (message.vrType !== 0)
            writer.tag(26, WireType.Varint).int32(message.vrType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl
 */
export const StreamUrl = new StreamUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_StreamUrlExtra$Type extends MessageType<StreamUrl_StreamUrlExtra> {
    constructor() {
        super("data.StreamUrl.StreamUrlExtra", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "fps", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "max_bitrate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "min_bitrate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "default_bitrate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "bitrate_adapt_strategy", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "anchor_interact_profile", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "audience_interact_profile", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "hardware_encode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "video_profile", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "super_resolution", kind: "message", T: () => StreamUrl_StreamUrlExtra_SuperResolution },
            { no: 15, name: "h265_enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "gop_sec", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "bframe_enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "roi", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "sw_roi", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "bytevc1_enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "anchor_client_info", kind: "message", T: () => StreamUrl_StreamUrlExtra_AnchorClientInfo }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_StreamUrlExtra>): StreamUrl_StreamUrlExtra {
        const message = { height: 0n, width: 0n, fps: 0n, maxBitrate: 0n, minBitrate: 0n, defaultBitrate: 0n, bitrateAdaptStrategy: 0n, anchorInteractProfile: 0n, audienceInteractProfile: 0n, hardwareEncode: false, videoProfile: 0n, h265Enable: false, gopSec: 0n, bframeEnable: false, roi: false, swRoi: false, bytevc1Enable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_StreamUrlExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_StreamUrlExtra): StreamUrl_StreamUrlExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toBigInt();
                    break;
                case /* int64 width */ 2:
                    message.width = reader.int64().toBigInt();
                    break;
                case /* int64 fps */ 3:
                    message.fps = reader.int64().toBigInt();
                    break;
                case /* int64 max_bitrate */ 4:
                    message.maxBitrate = reader.int64().toBigInt();
                    break;
                case /* int64 min_bitrate */ 5:
                    message.minBitrate = reader.int64().toBigInt();
                    break;
                case /* int64 default_bitrate */ 6:
                    message.defaultBitrate = reader.int64().toBigInt();
                    break;
                case /* int64 bitrate_adapt_strategy */ 7:
                    message.bitrateAdaptStrategy = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_interact_profile */ 8:
                    message.anchorInteractProfile = reader.int64().toBigInt();
                    break;
                case /* int64 audience_interact_profile */ 9:
                    message.audienceInteractProfile = reader.int64().toBigInt();
                    break;
                case /* bool hardware_encode */ 10:
                    message.hardwareEncode = reader.bool();
                    break;
                case /* int64 video_profile */ 12:
                    message.videoProfile = reader.int64().toBigInt();
                    break;
                case /* data.StreamUrl.StreamUrlExtra.SuperResolution super_resolution */ 14:
                    message.superResolution = StreamUrl_StreamUrlExtra_SuperResolution.internalBinaryRead(reader, reader.uint32(), options, message.superResolution);
                    break;
                case /* bool h265_enable */ 15:
                    message.h265Enable = reader.bool();
                    break;
                case /* int64 gop_sec */ 16:
                    message.gopSec = reader.int64().toBigInt();
                    break;
                case /* bool bframe_enable */ 17:
                    message.bframeEnable = reader.bool();
                    break;
                case /* bool roi */ 18:
                    message.roi = reader.bool();
                    break;
                case /* bool sw_roi */ 19:
                    message.swRoi = reader.bool();
                    break;
                case /* bool bytevc1_enable */ 20:
                    message.bytevc1Enable = reader.bool();
                    break;
                case /* data.StreamUrl.StreamUrlExtra.AnchorClientInfo anchor_client_info */ 21:
                    message.anchorClientInfo = StreamUrl_StreamUrlExtra_AnchorClientInfo.internalBinaryRead(reader, reader.uint32(), options, message.anchorClientInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_StreamUrlExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 height = 1; */
        if (message.height !== 0n)
            writer.tag(1, WireType.Varint).int64(message.height);
        /* int64 width = 2; */
        if (message.width !== 0n)
            writer.tag(2, WireType.Varint).int64(message.width);
        /* int64 fps = 3; */
        if (message.fps !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fps);
        /* int64 max_bitrate = 4; */
        if (message.maxBitrate !== 0n)
            writer.tag(4, WireType.Varint).int64(message.maxBitrate);
        /* int64 min_bitrate = 5; */
        if (message.minBitrate !== 0n)
            writer.tag(5, WireType.Varint).int64(message.minBitrate);
        /* int64 default_bitrate = 6; */
        if (message.defaultBitrate !== 0n)
            writer.tag(6, WireType.Varint).int64(message.defaultBitrate);
        /* int64 bitrate_adapt_strategy = 7; */
        if (message.bitrateAdaptStrategy !== 0n)
            writer.tag(7, WireType.Varint).int64(message.bitrateAdaptStrategy);
        /* int64 anchor_interact_profile = 8; */
        if (message.anchorInteractProfile !== 0n)
            writer.tag(8, WireType.Varint).int64(message.anchorInteractProfile);
        /* int64 audience_interact_profile = 9; */
        if (message.audienceInteractProfile !== 0n)
            writer.tag(9, WireType.Varint).int64(message.audienceInteractProfile);
        /* bool hardware_encode = 10; */
        if (message.hardwareEncode !== false)
            writer.tag(10, WireType.Varint).bool(message.hardwareEncode);
        /* int64 video_profile = 12; */
        if (message.videoProfile !== 0n)
            writer.tag(12, WireType.Varint).int64(message.videoProfile);
        /* data.StreamUrl.StreamUrlExtra.SuperResolution super_resolution = 14; */
        if (message.superResolution)
            StreamUrl_StreamUrlExtra_SuperResolution.internalBinaryWrite(message.superResolution, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool h265_enable = 15; */
        if (message.h265Enable !== false)
            writer.tag(15, WireType.Varint).bool(message.h265Enable);
        /* int64 gop_sec = 16; */
        if (message.gopSec !== 0n)
            writer.tag(16, WireType.Varint).int64(message.gopSec);
        /* bool bframe_enable = 17; */
        if (message.bframeEnable !== false)
            writer.tag(17, WireType.Varint).bool(message.bframeEnable);
        /* bool roi = 18; */
        if (message.roi !== false)
            writer.tag(18, WireType.Varint).bool(message.roi);
        /* bool sw_roi = 19; */
        if (message.swRoi !== false)
            writer.tag(19, WireType.Varint).bool(message.swRoi);
        /* bool bytevc1_enable = 20; */
        if (message.bytevc1Enable !== false)
            writer.tag(20, WireType.Varint).bool(message.bytevc1Enable);
        /* data.StreamUrl.StreamUrlExtra.AnchorClientInfo anchor_client_info = 21; */
        if (message.anchorClientInfo)
            StreamUrl_StreamUrlExtra_AnchorClientInfo.internalBinaryWrite(message.anchorClientInfo, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.StreamUrlExtra
 */
export const StreamUrl_StreamUrlExtra = new StreamUrl_StreamUrlExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_StreamUrlExtra_SuperResolution$Type extends MessageType<StreamUrl_StreamUrlExtra_SuperResolution> {
    constructor() {
        super("data.StreamUrl.StreamUrlExtra.SuperResolution", [
            { no: 1, name: "enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "strength", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "antialiasing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_StreamUrlExtra_SuperResolution>): StreamUrl_StreamUrlExtra_SuperResolution {
        const message = { enable: false, strength: 0n, antialiasing: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_StreamUrlExtra_SuperResolution>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_StreamUrlExtra_SuperResolution): StreamUrl_StreamUrlExtra_SuperResolution {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable */ 1:
                    message.enable = reader.bool();
                    break;
                case /* int64 strength */ 2:
                    message.strength = reader.int64().toBigInt();
                    break;
                case /* bool antialiasing */ 3:
                    message.antialiasing = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_StreamUrlExtra_SuperResolution, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable = 1; */
        if (message.enable !== false)
            writer.tag(1, WireType.Varint).bool(message.enable);
        /* int64 strength = 2; */
        if (message.strength !== 0n)
            writer.tag(2, WireType.Varint).int64(message.strength);
        /* bool antialiasing = 3; */
        if (message.antialiasing !== false)
            writer.tag(3, WireType.Varint).bool(message.antialiasing);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.StreamUrlExtra.SuperResolution
 */
export const StreamUrl_StreamUrlExtra_SuperResolution = new StreamUrl_StreamUrlExtra_SuperResolution$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_StreamUrlExtra_AnchorClientInfo$Type extends MessageType<StreamUrl_StreamUrlExtra_AnchorClientInfo> {
    constructor() {
        super("data.StreamUrl.StreamUrlExtra.AnchorClientInfo", [
            { no: 1, name: "custom_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_StreamUrlExtra_AnchorClientInfo>): StreamUrl_StreamUrlExtra_AnchorClientInfo {
        const message = { customInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_StreamUrlExtra_AnchorClientInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_StreamUrlExtra_AnchorClientInfo): StreamUrl_StreamUrlExtra_AnchorClientInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string custom_info */ 1:
                    message.customInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_StreamUrlExtra_AnchorClientInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string custom_info = 1; */
        if (message.customInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.StreamUrlExtra.AnchorClientInfo
 */
export const StreamUrl_StreamUrlExtra_AnchorClientInfo = new StreamUrl_StreamUrlExtra_AnchorClientInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData$Type extends MessageType<StreamUrl_LiveCoreSDKData> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData", [
            { no: 1, name: "pull_data", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData },
            { no: 2, name: "push_data", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PushData },
            { no: 3, name: "size", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData>): StreamUrl_LiveCoreSDKData {
        const message = { size: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData): StreamUrl_LiveCoreSDKData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.StreamUrl.LiveCoreSDKData.PullData pull_data */ 1:
                    message.pullData = StreamUrl_LiveCoreSDKData_PullData.internalBinaryRead(reader, reader.uint32(), options, message.pullData);
                    break;
                case /* data.StreamUrl.LiveCoreSDKData.PushData push_data */ 2:
                    message.pushData = StreamUrl_LiveCoreSDKData_PushData.internalBinaryRead(reader, reader.uint32(), options, message.pushData);
                    break;
                case /* string size */ 3:
                    message.size = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.StreamUrl.LiveCoreSDKData.PullData pull_data = 1; */
        if (message.pullData)
            StreamUrl_LiveCoreSDKData_PullData.internalBinaryWrite(message.pullData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.StreamUrl.LiveCoreSDKData.PushData push_data = 2; */
        if (message.pushData)
            StreamUrl_LiveCoreSDKData_PushData.internalBinaryWrite(message.pushData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string size = 3; */
        if (message.size !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData
 */
export const StreamUrl_LiveCoreSDKData = new StreamUrl_LiveCoreSDKData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData", [
            { no: 1, name: "stream_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "options", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_Options },
            { no: 3, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "kind", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "extension", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_Extension },
            { no: 7, name: "Hls", kind: "message", jsonName: "Hls", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamUrl_LiveCoreSDKData_PullData_PlayInfo },
            { no: 8, name: "Flv", kind: "message", jsonName: "Flv", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamUrl_LiveCoreSDKData_PullData_PlayInfo },
            { no: 9, name: "codec", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "display", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_Display },
            { no: 11, name: "compensatory_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData>): StreamUrl_LiveCoreSDKData_PullData {
        const message = { streamData: "", version: 0n, kind: 0, hls: [], flv: [], codec: "", compensatoryData: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData): StreamUrl_LiveCoreSDKData_PullData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_data */ 1:
                    message.streamData = reader.string();
                    break;
                case /* data.StreamUrl.LiveCoreSDKData.PullData.Options options */ 2:
                    message.options = StreamUrl_LiveCoreSDKData_PullData_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                case /* int64 version */ 3:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* int32 kind */ 5:
                    message.kind = reader.int32();
                    break;
                case /* data.StreamUrl.LiveCoreSDKData.PullData.Extension extension */ 6:
                    message.extension = StreamUrl_LiveCoreSDKData_PullData_Extension.internalBinaryRead(reader, reader.uint32(), options, message.extension);
                    break;
                case /* repeated data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo Hls = 7 [json_name = "Hls"];*/ 7:
                    message.hls.push(StreamUrl_LiveCoreSDKData_PullData_PlayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo Flv = 8 [json_name = "Flv"];*/ 8:
                    message.flv.push(StreamUrl_LiveCoreSDKData_PullData_PlayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string codec */ 9:
                    message.codec = reader.string();
                    break;
                case /* data.StreamUrl.LiveCoreSDKData.PullData.Display display */ 10:
                    message.display = StreamUrl_LiveCoreSDKData_PullData_Display.internalBinaryRead(reader, reader.uint32(), options, message.display);
                    break;
                case /* string compensatory_data */ 11:
                    message.compensatoryData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_data = 1; */
        if (message.streamData !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamData);
        /* data.StreamUrl.LiveCoreSDKData.PullData.Options options = 2; */
        if (message.options)
            StreamUrl_LiveCoreSDKData_PullData_Options.internalBinaryWrite(message.options, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 version = 3; */
        if (message.version !== 0n)
            writer.tag(3, WireType.Varint).int64(message.version);
        /* int32 kind = 5; */
        if (message.kind !== 0)
            writer.tag(5, WireType.Varint).int32(message.kind);
        /* data.StreamUrl.LiveCoreSDKData.PullData.Extension extension = 6; */
        if (message.extension)
            StreamUrl_LiveCoreSDKData_PullData_Extension.internalBinaryWrite(message.extension, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo Hls = 7 [json_name = "Hls"]; */
        for (let i = 0; i < message.hls.length; i++)
            StreamUrl_LiveCoreSDKData_PullData_PlayInfo.internalBinaryWrite(message.hls[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo Flv = 8 [json_name = "Flv"]; */
        for (let i = 0; i < message.flv.length; i++)
            StreamUrl_LiveCoreSDKData_PullData_PlayInfo.internalBinaryWrite(message.flv[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string codec = 9; */
        if (message.codec !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.codec);
        /* data.StreamUrl.LiveCoreSDKData.PullData.Display display = 10; */
        if (message.display)
            StreamUrl_LiveCoreSDKData_PullData_Display.internalBinaryWrite(message.display, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string compensatory_data = 11; */
        if (message.compensatoryData !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.compensatoryData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData
 */
export const StreamUrl_LiveCoreSDKData_PullData = new StreamUrl_LiveCoreSDKData_PullData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData_Options$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData_Options> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData.Options", [
            { no: 1, name: "default_quality", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_Options_Quality },
            { no: 2, name: "qualities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamUrl_LiveCoreSDKData_PullData_Options_Quality },
            { no: 3, name: "vpass_default", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData_Options>): StreamUrl_LiveCoreSDKData_PullData_Options {
        const message = { qualities: [], vpassDefault: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData_Options>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData_Options): StreamUrl_LiveCoreSDKData_PullData_Options {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality default_quality */ 1:
                    message.defaultQuality = StreamUrl_LiveCoreSDKData_PullData_Options_Quality.internalBinaryRead(reader, reader.uint32(), options, message.defaultQuality);
                    break;
                case /* repeated data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality qualities */ 2:
                    message.qualities.push(StreamUrl_LiveCoreSDKData_PullData_Options_Quality.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool vpass_default */ 3:
                    message.vpassDefault = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality default_quality = 1; */
        if (message.defaultQuality)
            StreamUrl_LiveCoreSDKData_PullData_Options_Quality.internalBinaryWrite(message.defaultQuality, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality qualities = 2; */
        for (let i = 0; i < message.qualities.length; i++)
            StreamUrl_LiveCoreSDKData_PullData_Options_Quality.internalBinaryWrite(message.qualities[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool vpass_default = 3; */
        if (message.vpassDefault !== false)
            writer.tag(3, WireType.Varint).bool(message.vpassDefault);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Options
 */
export const StreamUrl_LiveCoreSDKData_PullData_Options = new StreamUrl_LiveCoreSDKData_PullData_Options$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData_Options_Quality$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData_Options_Quality> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sdk_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "v_codec", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "resolution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "v_bit_rate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "additional_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "fps", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "disable", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData_Options_Quality>): StreamUrl_LiveCoreSDKData_PullData_Options_Quality {
        const message = { name: "", sdkKey: "", vCodec: "", resolution: "", level: 0, vBitRate: 0, additionalContent: "", fps: 0, disable: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData_Options_Quality>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData_Options_Quality): StreamUrl_LiveCoreSDKData_PullData_Options_Quality {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string sdk_key */ 2:
                    message.sdkKey = reader.string();
                    break;
                case /* string v_codec */ 3:
                    message.vCodec = reader.string();
                    break;
                case /* string resolution */ 4:
                    message.resolution = reader.string();
                    break;
                case /* int32 level */ 5:
                    message.level = reader.int32();
                    break;
                case /* int32 v_bit_rate */ 6:
                    message.vBitRate = reader.int32();
                    break;
                case /* string additional_content */ 7:
                    message.additionalContent = reader.string();
                    break;
                case /* int32 fps */ 8:
                    message.fps = reader.int32();
                    break;
                case /* int32 disable */ 9:
                    message.disable = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData_Options_Quality, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string sdk_key = 2; */
        if (message.sdkKey !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sdkKey);
        /* string v_codec = 3; */
        if (message.vCodec !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.vCodec);
        /* string resolution = 4; */
        if (message.resolution !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.resolution);
        /* int32 level = 5; */
        if (message.level !== 0)
            writer.tag(5, WireType.Varint).int32(message.level);
        /* int32 v_bit_rate = 6; */
        if (message.vBitRate !== 0)
            writer.tag(6, WireType.Varint).int32(message.vBitRate);
        /* string additional_content = 7; */
        if (message.additionalContent !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.additionalContent);
        /* int32 fps = 8; */
        if (message.fps !== 0)
            writer.tag(8, WireType.Varint).int32(message.fps);
        /* int32 disable = 9; */
        if (message.disable !== 0)
            writer.tag(9, WireType.Varint).int32(message.disable);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Options.Quality
 */
export const StreamUrl_LiveCoreSDKData_PullData_Options_Quality = new StreamUrl_LiveCoreSDKData_PullData_Options_Quality$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData_Clip$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData_Clip> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData.Clip", [
            { no: 1, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "w", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "h", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData_Clip>): StreamUrl_LiveCoreSDKData_PullData_Clip {
        const message = { x: 0, y: 0, w: 0, h: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData_Clip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData_Clip): StreamUrl_LiveCoreSDKData_PullData_Clip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float x */ 1:
                    message.x = reader.float();
                    break;
                case /* float y */ 2:
                    message.y = reader.float();
                    break;
                case /* float w */ 3:
                    message.w = reader.float();
                    break;
                case /* float h */ 4:
                    message.h = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData_Clip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit32).float(message.x);
        /* float y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit32).float(message.y);
        /* float w = 3; */
        if (message.w !== 0)
            writer.tag(3, WireType.Bit32).float(message.w);
        /* float h = 4; */
        if (message.h !== 0)
            writer.tag(4, WireType.Bit32).float(message.h);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Clip
 */
export const StreamUrl_LiveCoreSDKData_PullData_Clip = new StreamUrl_LiveCoreSDKData_PullData_Clip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData.CameraHorizontalPosition", [
            { no: 1, name: "anchor", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition>): StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition {
        const message = { anchor: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition): StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 anchor */ 1:
                    message.anchor = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 anchor = 1; */
        if (message.anchor !== 0)
            writer.tag(1, WireType.Varint).int32(message.anchor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData.CameraHorizontalPosition
 */
export const StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition = new StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData_Extension$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData_Extension> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData.Extension", [
            { no: 1, name: "game_clip", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_Clip },
            { no: 2, name: "camera_clip", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_Clip },
            { no: 3, name: "camera_hidden", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "ts", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "refresh", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "display_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "game_hidden", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "game_room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "layout", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "camera_clip_custom", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_Clip },
            { no: 11, name: "camera_vertical_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "camera_horizontal_position", kind: "message", T: () => StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition },
            { no: 13, name: "camera_horizontal_hidden", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData_Extension>): StreamUrl_LiveCoreSDKData_PullData_Extension {
        const message = { cameraHidden: 0, ts: "", refresh: 0n, displayMode: 0, gameHidden: 0, gameRoomId: "", layout: 0, cameraVerticalType: 0, cameraHorizontalHidden: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData_Extension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData_Extension): StreamUrl_LiveCoreSDKData_PullData_Extension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.StreamUrl.LiveCoreSDKData.PullData.Clip game_clip */ 1:
                    message.gameClip = StreamUrl_LiveCoreSDKData_PullData_Clip.internalBinaryRead(reader, reader.uint32(), options, message.gameClip);
                    break;
                case /* data.StreamUrl.LiveCoreSDKData.PullData.Clip camera_clip */ 2:
                    message.cameraClip = StreamUrl_LiveCoreSDKData_PullData_Clip.internalBinaryRead(reader, reader.uint32(), options, message.cameraClip);
                    break;
                case /* int32 camera_hidden */ 3:
                    message.cameraHidden = reader.int32();
                    break;
                case /* string ts */ 4:
                    message.ts = reader.string();
                    break;
                case /* int64 refresh */ 5:
                    message.refresh = reader.int64().toBigInt();
                    break;
                case /* int32 display_mode */ 6:
                    message.displayMode = reader.int32();
                    break;
                case /* int32 game_hidden */ 7:
                    message.gameHidden = reader.int32();
                    break;
                case /* string game_room_id */ 8:
                    message.gameRoomId = reader.string();
                    break;
                case /* int32 layout */ 9:
                    message.layout = reader.int32();
                    break;
                case /* data.StreamUrl.LiveCoreSDKData.PullData.Clip camera_clip_custom */ 10:
                    message.cameraClipCustom = StreamUrl_LiveCoreSDKData_PullData_Clip.internalBinaryRead(reader, reader.uint32(), options, message.cameraClipCustom);
                    break;
                case /* int32 camera_vertical_type */ 11:
                    message.cameraVerticalType = reader.int32();
                    break;
                case /* data.StreamUrl.LiveCoreSDKData.PullData.CameraHorizontalPosition camera_horizontal_position */ 12:
                    message.cameraHorizontalPosition = StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition.internalBinaryRead(reader, reader.uint32(), options, message.cameraHorizontalPosition);
                    break;
                case /* int32 camera_horizontal_hidden */ 13:
                    message.cameraHorizontalHidden = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData_Extension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.StreamUrl.LiveCoreSDKData.PullData.Clip game_clip = 1; */
        if (message.gameClip)
            StreamUrl_LiveCoreSDKData_PullData_Clip.internalBinaryWrite(message.gameClip, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.StreamUrl.LiveCoreSDKData.PullData.Clip camera_clip = 2; */
        if (message.cameraClip)
            StreamUrl_LiveCoreSDKData_PullData_Clip.internalBinaryWrite(message.cameraClip, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 camera_hidden = 3; */
        if (message.cameraHidden !== 0)
            writer.tag(3, WireType.Varint).int32(message.cameraHidden);
        /* string ts = 4; */
        if (message.ts !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.ts);
        /* int64 refresh = 5; */
        if (message.refresh !== 0n)
            writer.tag(5, WireType.Varint).int64(message.refresh);
        /* int32 display_mode = 6; */
        if (message.displayMode !== 0)
            writer.tag(6, WireType.Varint).int32(message.displayMode);
        /* int32 game_hidden = 7; */
        if (message.gameHidden !== 0)
            writer.tag(7, WireType.Varint).int32(message.gameHidden);
        /* string game_room_id = 8; */
        if (message.gameRoomId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.gameRoomId);
        /* int32 layout = 9; */
        if (message.layout !== 0)
            writer.tag(9, WireType.Varint).int32(message.layout);
        /* data.StreamUrl.LiveCoreSDKData.PullData.Clip camera_clip_custom = 10; */
        if (message.cameraClipCustom)
            StreamUrl_LiveCoreSDKData_PullData_Clip.internalBinaryWrite(message.cameraClipCustom, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int32 camera_vertical_type = 11; */
        if (message.cameraVerticalType !== 0)
            writer.tag(11, WireType.Varint).int32(message.cameraVerticalType);
        /* data.StreamUrl.LiveCoreSDKData.PullData.CameraHorizontalPosition camera_horizontal_position = 12; */
        if (message.cameraHorizontalPosition)
            StreamUrl_LiveCoreSDKData_PullData_CameraHorizontalPosition.internalBinaryWrite(message.cameraHorizontalPosition, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 camera_horizontal_hidden = 13; */
        if (message.cameraHorizontalHidden !== 0)
            writer.tag(13, WireType.Varint).int32(message.cameraHorizontalHidden);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Extension
 */
export const StreamUrl_LiveCoreSDKData_PullData_Extension = new StreamUrl_LiveCoreSDKData_PullData_Extension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData_PlayInfo$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData_PlayInfo> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quality_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "params", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData_PlayInfo>): StreamUrl_LiveCoreSDKData_PullData_PlayInfo {
        const message = { url: "", qualityName: "", params: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData_PlayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData_PlayInfo): StreamUrl_LiveCoreSDKData_PullData_PlayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string quality_name */ 2:
                    message.qualityName = reader.string();
                    break;
                case /* string params */ 3:
                    message.params = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData_PlayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string quality_name = 2; */
        if (message.qualityName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.qualityName);
        /* string params = 3; */
        if (message.params !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.params);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData.PlayInfo
 */
export const StreamUrl_LiveCoreSDKData_PullData_PlayInfo = new StreamUrl_LiveCoreSDKData_PullData_PlayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PullData_Display$Type extends MessageType<StreamUrl_LiveCoreSDKData_PullData_Display> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PullData.Display", [
            { no: 1, name: "scale_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "scale_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PullData_Display>): StreamUrl_LiveCoreSDKData_PullData_Display {
        const message = { scaleWidth: 0n, scaleHeight: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PullData_Display>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PullData_Display): StreamUrl_LiveCoreSDKData_PullData_Display {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 scale_width */ 1:
                    message.scaleWidth = reader.int64().toBigInt();
                    break;
                case /* int64 scale_height */ 2:
                    message.scaleHeight = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PullData_Display, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 scale_width = 1; */
        if (message.scaleWidth !== 0n)
            writer.tag(1, WireType.Varint).int64(message.scaleWidth);
        /* int64 scale_height = 2; */
        if (message.scaleHeight !== 0n)
            writer.tag(2, WireType.Varint).int64(message.scaleHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PullData.Display
 */
export const StreamUrl_LiveCoreSDKData_PullData_Display = new StreamUrl_LiveCoreSDKData_PullData_Display$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PushData$Type extends MessageType<StreamUrl_LiveCoreSDKData_PushData> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PushData", [
            { no: 2, name: "push_stream_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pre_schedule", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "rtmp_push_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "push_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "kind", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "stream_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "stream_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PushData>): StreamUrl_LiveCoreSDKData_PushData {
        const message = { pushStreamLevel: 0, preSchedule: false, rtmpPushUrl: "", pushParams: "", kind: 0, streamId: 0n, streamIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PushData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PushData): StreamUrl_LiveCoreSDKData_PushData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 push_stream_level */ 2:
                    message.pushStreamLevel = reader.int32();
                    break;
                case /* bool pre_schedule */ 3:
                    message.preSchedule = reader.bool();
                    break;
                case /* string rtmp_push_url */ 4:
                    message.rtmpPushUrl = reader.string();
                    break;
                case /* string push_params */ 5:
                    message.pushParams = reader.string();
                    break;
                case /* int32 kind */ 6:
                    message.kind = reader.int32();
                    break;
                case /* int64 stream_id */ 7:
                    message.streamId = reader.int64().toBigInt();
                    break;
                case /* string stream_id_str */ 8:
                    message.streamIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PushData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 push_stream_level = 2; */
        if (message.pushStreamLevel !== 0)
            writer.tag(2, WireType.Varint).int32(message.pushStreamLevel);
        /* bool pre_schedule = 3; */
        if (message.preSchedule !== false)
            writer.tag(3, WireType.Varint).bool(message.preSchedule);
        /* string rtmp_push_url = 4; */
        if (message.rtmpPushUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.rtmpPushUrl);
        /* string push_params = 5; */
        if (message.pushParams !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.pushParams);
        /* int32 kind = 6; */
        if (message.kind !== 0)
            writer.tag(6, WireType.Varint).int32(message.kind);
        /* int64 stream_id = 7; */
        if (message.streamId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.streamId);
        /* string stream_id_str = 8; */
        if (message.streamIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.streamIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PushData
 */
export const StreamUrl_LiveCoreSDKData_PushData = new StreamUrl_LiveCoreSDKData_PushData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_LiveCoreSDKData_PushData_ResolutionParams$Type extends MessageType<StreamUrl_LiveCoreSDKData_PushData_ResolutionParams> {
    constructor() {
        super("data.StreamUrl.LiveCoreSDKData.PushData.ResolutionParams", [
            { no: 1, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "default_bitrate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "min_bitrate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "max_bitrate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "fps", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_LiveCoreSDKData_PushData_ResolutionParams>): StreamUrl_LiveCoreSDKData_PushData_ResolutionParams {
        const message = { width: 0n, height: 0n, defaultBitrate: 0n, minBitrate: 0n, maxBitrate: 0n, fps: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_LiveCoreSDKData_PushData_ResolutionParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_LiveCoreSDKData_PushData_ResolutionParams): StreamUrl_LiveCoreSDKData_PushData_ResolutionParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 width */ 1:
                    message.width = reader.int64().toBigInt();
                    break;
                case /* int64 height */ 2:
                    message.height = reader.int64().toBigInt();
                    break;
                case /* int64 default_bitrate */ 3:
                    message.defaultBitrate = reader.int64().toBigInt();
                    break;
                case /* int64 min_bitrate */ 4:
                    message.minBitrate = reader.int64().toBigInt();
                    break;
                case /* int64 max_bitrate */ 5:
                    message.maxBitrate = reader.int64().toBigInt();
                    break;
                case /* int64 fps */ 6:
                    message.fps = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_LiveCoreSDKData_PushData_ResolutionParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 width = 1; */
        if (message.width !== 0n)
            writer.tag(1, WireType.Varint).int64(message.width);
        /* int64 height = 2; */
        if (message.height !== 0n)
            writer.tag(2, WireType.Varint).int64(message.height);
        /* int64 default_bitrate = 3; */
        if (message.defaultBitrate !== 0n)
            writer.tag(3, WireType.Varint).int64(message.defaultBitrate);
        /* int64 min_bitrate = 4; */
        if (message.minBitrate !== 0n)
            writer.tag(4, WireType.Varint).int64(message.minBitrate);
        /* int64 max_bitrate = 5; */
        if (message.maxBitrate !== 0n)
            writer.tag(5, WireType.Varint).int64(message.maxBitrate);
        /* int64 fps = 6; */
        if (message.fps !== 0n)
            writer.tag(6, WireType.Varint).int64(message.fps);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.LiveCoreSDKData.PushData.ResolutionParams
 */
export const StreamUrl_LiveCoreSDKData_PushData_ResolutionParams = new StreamUrl_LiveCoreSDKData_PushData_ResolutionParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamUrl_PlaySetting$Type extends MessageType<StreamUrl_PlaySetting> {
    constructor() {
        super("data.StreamUrl.PlaySetting", [
            { no: 1, name: "horizontal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vertical", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamUrl_PlaySetting>): StreamUrl_PlaySetting {
        const message = { horizontal: "", vertical: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamUrl_PlaySetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamUrl_PlaySetting): StreamUrl_PlaySetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string horizontal */ 1:
                    message.horizontal = reader.string();
                    break;
                case /* string vertical */ 2:
                    message.vertical = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamUrl_PlaySetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string horizontal = 1; */
        if (message.horizontal !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.horizontal);
        /* string vertical = 2; */
        if (message.vertical !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vertical);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StreamUrl.PlaySetting
 */
export const StreamUrl_PlaySetting = new StreamUrl_PlaySetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSCameraInfo$Type extends MessageType<VSCameraInfo> {
    constructor() {
        super("data.VSCameraInfo", [
            { no: 1, name: "camera_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "camera_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cover", kind: "message", T: () => Image },
            { no: 5, name: "cover_vertical", kind: "message", T: () => Image },
            { no: 6, name: "stream_info", kind: "message", T: () => StreamUrl },
            { no: 7, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "camera_room_auth", kind: "message", T: () => RoomAuthStatus },
            { no: 11, name: "vr_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "camera_paid_info", kind: "message", T: () => CameraPaidInfo },
            { no: 13, name: "camera_match_info", kind: "message", T: () => CameraMatchInfo },
            { no: 14, name: "group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "camera_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "label", kind: "message", T: () => Image },
            { no: 17, name: "pcu", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "is_subscribed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "group_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VSCameraInfo>): VSCameraInfo {
        const message = { cameraId: 0n, cameraIdStr: "", title: "", startTime: 0n, endTime: 0n, style: 0, vrType: 0, groupId: 0n, cameraType: 0, pcu: 0n, isSubscribed: false, groupIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSCameraInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSCameraInfo): VSCameraInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 camera_id */ 1:
                    message.cameraId = reader.int64().toBigInt();
                    break;
                case /* string camera_id_str */ 2:
                    message.cameraIdStr = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* data.Image cover */ 4:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                case /* data.Image cover_vertical */ 5:
                    message.coverVertical = Image.internalBinaryRead(reader, reader.uint32(), options, message.coverVertical);
                    break;
                case /* data.StreamUrl stream_info */ 6:
                    message.streamInfo = StreamUrl.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* int64 start_time */ 7:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 8:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 style */ 9:
                    message.style = reader.int32();
                    break;
                case /* data.RoomAuthStatus camera_room_auth */ 10:
                    message.cameraRoomAuth = RoomAuthStatus.internalBinaryRead(reader, reader.uint32(), options, message.cameraRoomAuth);
                    break;
                case /* int32 vr_type */ 11:
                    message.vrType = reader.int32();
                    break;
                case /* data.CameraPaidInfo camera_paid_info */ 12:
                    message.cameraPaidInfo = CameraPaidInfo.internalBinaryRead(reader, reader.uint32(), options, message.cameraPaidInfo);
                    break;
                case /* data.CameraMatchInfo camera_match_info */ 13:
                    message.cameraMatchInfo = CameraMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.cameraMatchInfo);
                    break;
                case /* int64 group_id */ 14:
                    message.groupId = reader.int64().toBigInt();
                    break;
                case /* int32 camera_type */ 15:
                    message.cameraType = reader.int32();
                    break;
                case /* data.Image label */ 16:
                    message.label = Image.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* int64 pcu */ 17:
                    message.pcu = reader.int64().toBigInt();
                    break;
                case /* bool is_subscribed */ 18:
                    message.isSubscribed = reader.bool();
                    break;
                case /* string group_id_str */ 19:
                    message.groupIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSCameraInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 camera_id = 1; */
        if (message.cameraId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.cameraId);
        /* string camera_id_str = 2; */
        if (message.cameraIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cameraIdStr);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* data.Image cover = 4; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image cover_vertical = 5; */
        if (message.coverVertical)
            Image.internalBinaryWrite(message.coverVertical, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.StreamUrl stream_info = 6; */
        if (message.streamInfo)
            StreamUrl.internalBinaryWrite(message.streamInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_time = 7; */
        if (message.startTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 8; */
        if (message.endTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.endTime);
        /* int32 style = 9; */
        if (message.style !== 0)
            writer.tag(9, WireType.Varint).int32(message.style);
        /* data.RoomAuthStatus camera_room_auth = 10; */
        if (message.cameraRoomAuth)
            RoomAuthStatus.internalBinaryWrite(message.cameraRoomAuth, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int32 vr_type = 11; */
        if (message.vrType !== 0)
            writer.tag(11, WireType.Varint).int32(message.vrType);
        /* data.CameraPaidInfo camera_paid_info = 12; */
        if (message.cameraPaidInfo)
            CameraPaidInfo.internalBinaryWrite(message.cameraPaidInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* data.CameraMatchInfo camera_match_info = 13; */
        if (message.cameraMatchInfo)
            CameraMatchInfo.internalBinaryWrite(message.cameraMatchInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* int64 group_id = 14; */
        if (message.groupId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.groupId);
        /* int32 camera_type = 15; */
        if (message.cameraType !== 0)
            writer.tag(15, WireType.Varint).int32(message.cameraType);
        /* data.Image label = 16; */
        if (message.label)
            Image.internalBinaryWrite(message.label, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* int64 pcu = 17; */
        if (message.pcu !== 0n)
            writer.tag(17, WireType.Varint).int64(message.pcu);
        /* bool is_subscribed = 18; */
        if (message.isSubscribed !== false)
            writer.tag(18, WireType.Varint).bool(message.isSubscribed);
        /* string group_id_str = 19; */
        if (message.groupIdStr !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.groupIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSCameraInfo
 */
export const VSCameraInfo = new VSCameraInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CameraPaidInfo$Type extends MessageType<CameraPaidInfo> {
    constructor() {
        super("data.CameraPaidInfo", [
            { no: 1, name: "max_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "price_info", kind: "message", T: () => CameraPaidInfo_PriceInfo },
            { no: 4, name: "paid_live_base_info", kind: "message", T: () => PaidLiveBaseInfo },
            { no: 5, name: "paid_live_biz_extra", kind: "message", T: () => CameraPaidInfo_PaidLiveBizExtra },
            { no: 6, name: "async_auth_data", kind: "message", T: () => AsyncAuthData }
        ]);
    }
    create(value?: PartialMessage<CameraPaidInfo>): CameraPaidInfo {
        const message = { maxDuration: 0, duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CameraPaidInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CameraPaidInfo): CameraPaidInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 max_duration */ 1:
                    message.maxDuration = reader.int32();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* data.CameraPaidInfo.PriceInfo price_info */ 3:
                    message.priceInfo = CameraPaidInfo_PriceInfo.internalBinaryRead(reader, reader.uint32(), options, message.priceInfo);
                    break;
                case /* data.PaidLiveBaseInfo paid_live_base_info */ 4:
                    message.paidLiveBaseInfo = PaidLiveBaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.paidLiveBaseInfo);
                    break;
                case /* data.CameraPaidInfo.PaidLiveBizExtra paid_live_biz_extra */ 5:
                    message.paidLiveBizExtra = CameraPaidInfo_PaidLiveBizExtra.internalBinaryRead(reader, reader.uint32(), options, message.paidLiveBizExtra);
                    break;
                case /* data.AsyncAuthData async_auth_data */ 6:
                    message.asyncAuthData = AsyncAuthData.internalBinaryRead(reader, reader.uint32(), options, message.asyncAuthData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CameraPaidInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 max_duration = 1; */
        if (message.maxDuration !== 0)
            writer.tag(1, WireType.Varint).int32(message.maxDuration);
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* data.CameraPaidInfo.PriceInfo price_info = 3; */
        if (message.priceInfo)
            CameraPaidInfo_PriceInfo.internalBinaryWrite(message.priceInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.PaidLiveBaseInfo paid_live_base_info = 4; */
        if (message.paidLiveBaseInfo)
            PaidLiveBaseInfo.internalBinaryWrite(message.paidLiveBaseInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.CameraPaidInfo.PaidLiveBizExtra paid_live_biz_extra = 5; */
        if (message.paidLiveBizExtra)
            CameraPaidInfo_PaidLiveBizExtra.internalBinaryWrite(message.paidLiveBizExtra, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.AsyncAuthData async_auth_data = 6; */
        if (message.asyncAuthData)
            AsyncAuthData.internalBinaryWrite(message.asyncAuthData, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CameraPaidInfo
 */
export const CameraPaidInfo = new CameraPaidInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CameraPaidInfo_PriceInfo$Type extends MessageType<CameraPaidInfo_PriceInfo> {
    constructor() {
        super("data.CameraPaidInfo.PriceInfo", [
            { no: 1, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CameraPaidInfo_PriceInfo>): CameraPaidInfo_PriceInfo {
        const message = { amount: "", currency: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CameraPaidInfo_PriceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CameraPaidInfo_PriceInfo): CameraPaidInfo_PriceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string amount */ 1:
                    message.amount = reader.string();
                    break;
                case /* string currency */ 2:
                    message.currency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CameraPaidInfo_PriceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string amount = 1; */
        if (message.amount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.amount);
        /* string currency = 2; */
        if (message.currency !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CameraPaidInfo.PriceInfo
 */
export const CameraPaidInfo_PriceInfo = new CameraPaidInfo_PriceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CameraPaidInfo_PaidLiveBizExtra$Type extends MessageType<CameraPaidInfo_PaidLiveBizExtra> {
    constructor() {
        super("data.CameraPaidInfo.PaidLiveBizExtra", [
            { no: 1, name: "ticket_panel_six_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_replay", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "paid_conversion_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CameraPaidInfo_PaidLiveBizExtra>): CameraPaidInfo_PaidLiveBizExtra {
        const message = { ticketPanelSixJumpUrl: "", isReplay: false, paidConversionJumpUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CameraPaidInfo_PaidLiveBizExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CameraPaidInfo_PaidLiveBizExtra): CameraPaidInfo_PaidLiveBizExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ticket_panel_six_jump_url */ 1:
                    message.ticketPanelSixJumpUrl = reader.string();
                    break;
                case /* bool is_replay */ 2:
                    message.isReplay = reader.bool();
                    break;
                case /* string paid_conversion_jump_url */ 3:
                    message.paidConversionJumpUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CameraPaidInfo_PaidLiveBizExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ticket_panel_six_jump_url = 1; */
        if (message.ticketPanelSixJumpUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ticketPanelSixJumpUrl);
        /* bool is_replay = 2; */
        if (message.isReplay !== false)
            writer.tag(2, WireType.Varint).bool(message.isReplay);
        /* string paid_conversion_jump_url = 3; */
        if (message.paidConversionJumpUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.paidConversionJumpUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CameraPaidInfo.PaidLiveBizExtra
 */
export const CameraPaidInfo_PaidLiveBizExtra = new CameraPaidInfo_PaidLiveBizExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CameraMatchInfo$Type extends MessageType<CameraMatchInfo> {
    constructor() {
        super("data.CameraMatchInfo", [
            { no: 1, name: "match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "content_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "event_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "hide_tab_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "match_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CameraMatchInfo>): CameraMatchInfo {
        const message = { matchId: 0n, contentId: 0n, eventIds: [], hideTabIds: [], matchIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CameraMatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CameraMatchInfo): CameraMatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 match_id */ 1:
                    message.matchId = reader.int64().toBigInt();
                    break;
                case /* int64 content_id */ 2:
                    message.contentId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 event_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.eventIds.push(reader.int64().toBigInt());
                    else
                        message.eventIds.push(reader.int64().toBigInt());
                    break;
                case /* repeated int64 hide_tab_ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hideTabIds.push(reader.int64().toBigInt());
                    else
                        message.hideTabIds.push(reader.int64().toBigInt());
                    break;
                case /* string match_id_str */ 5:
                    message.matchIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CameraMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 match_id = 1; */
        if (message.matchId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.matchId);
        /* int64 content_id = 2; */
        if (message.contentId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.contentId);
        /* repeated int64 event_ids = 3; */
        if (message.eventIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.eventIds.length; i++)
                writer.int64(message.eventIds[i]);
            writer.join();
        }
        /* repeated int64 hide_tab_ids = 4; */
        if (message.hideTabIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hideTabIds.length; i++)
                writer.int64(message.hideTabIds[i]);
            writer.join();
        }
        /* string match_id_str = 5; */
        if (message.matchIdStr !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.matchIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CameraMatchInfo
 */
export const CameraMatchInfo = new CameraMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveBaseInfo$Type extends MessageType<PaidLiveBaseInfo> {
    constructor() {
        super("data.PaidLiveBaseInfo", [
            { no: 1, name: "paid_live_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ticket_session_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "ticket_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "view_right", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "delivery", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaidLiveBaseInfo>): PaidLiveBaseInfo {
        const message = { paidLiveType: 0, ticketSessionId: 0n, ticketPrice: 0n, viewRight: 0, delivery: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveBaseInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveBaseInfo): PaidLiveBaseInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 paid_live_type */ 1:
                    message.paidLiveType = reader.int32();
                    break;
                case /* int64 ticket_session_id */ 2:
                    message.ticketSessionId = reader.int64().toBigInt();
                    break;
                case /* int64 ticket_price */ 3:
                    message.ticketPrice = reader.int64().toBigInt();
                    break;
                case /* int32 view_right */ 4:
                    message.viewRight = reader.int32();
                    break;
                case /* int32 delivery */ 5:
                    message.delivery = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveBaseInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 paid_live_type = 1; */
        if (message.paidLiveType !== 0)
            writer.tag(1, WireType.Varint).int32(message.paidLiveType);
        /* int64 ticket_session_id = 2; */
        if (message.ticketSessionId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.ticketSessionId);
        /* int64 ticket_price = 3; */
        if (message.ticketPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.ticketPrice);
        /* int32 view_right = 4; */
        if (message.viewRight !== 0)
            writer.tag(4, WireType.Varint).int32(message.viewRight);
        /* int32 delivery = 5; */
        if (message.delivery !== 0)
            writer.tag(5, WireType.Varint).int32(message.delivery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLiveBaseInfo
 */
export const PaidLiveBaseInfo = new PaidLiveBaseInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMic$Type extends MessageType<LinkMic> {
    constructor() {
        super("data.LinkMic", [
            { no: 1, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "channel_info", kind: "message", T: () => LinkMic_LinkMicChannelInfo },
            { no: 3, name: "battle_scores", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMic_LinkMicBattleScore },
            { no: 4, name: "battle_settings", kind: "message", T: () => LinkMic_LinkMicBattleSetting },
            { no: 5, name: "rival_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "linkmic_anchor_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMic>): LinkMic {
        const message = { channelId: 0n, battleScores: [], rivalAnchorId: 0n, linkmicAnchorCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMic): LinkMic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 channel_id */ 1:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* data.LinkMic.LinkMicChannelInfo channel_info */ 2:
                    message.channelInfo = LinkMic_LinkMicChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.channelInfo);
                    break;
                case /* repeated data.LinkMic.LinkMicBattleScore battle_scores */ 3:
                    message.battleScores.push(LinkMic_LinkMicBattleScore.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.LinkMic.LinkMicBattleSetting battle_settings */ 4:
                    message.battleSettings = LinkMic_LinkMicBattleSetting.internalBinaryRead(reader, reader.uint32(), options, message.battleSettings);
                    break;
                case /* int64 rival_anchor_id */ 5:
                    message.rivalAnchorId = reader.int64().toBigInt();
                    break;
                case /* int64 linkmic_anchor_count */ 6:
                    message.linkmicAnchorCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 channel_id = 1; */
        if (message.channelId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.channelId);
        /* data.LinkMic.LinkMicChannelInfo channel_info = 2; */
        if (message.channelInfo)
            LinkMic_LinkMicChannelInfo.internalBinaryWrite(message.channelInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkMic.LinkMicBattleScore battle_scores = 3; */
        for (let i = 0; i < message.battleScores.length; i++)
            LinkMic_LinkMicBattleScore.internalBinaryWrite(message.battleScores[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkMic.LinkMicBattleSetting battle_settings = 4; */
        if (message.battleSettings)
            LinkMic_LinkMicBattleSetting.internalBinaryWrite(message.battleSettings, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 rival_anchor_id = 5; */
        if (message.rivalAnchorId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rivalAnchorId);
        /* int64 linkmic_anchor_count = 6; */
        if (message.linkmicAnchorCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.linkmicAnchorCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkMic
 */
export const LinkMic = new LinkMic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMic_LinkMicChannelInfo$Type extends MessageType<LinkMic_LinkMicChannelInfo> {
    constructor() {
        super("data.LinkMic.LinkMicChannelInfo", [
            { no: 1, name: "layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "vendor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "dimension", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMic_LinkMicChannelInfo>): LinkMic_LinkMicChannelInfo {
        const message = { layout: 0n, vendor: 0n, dimension: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMic_LinkMicChannelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMic_LinkMicChannelInfo): LinkMic_LinkMicChannelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 layout */ 1:
                    message.layout = reader.int64().toBigInt();
                    break;
                case /* int64 vendor */ 2:
                    message.vendor = reader.int64().toBigInt();
                    break;
                case /* int64 dimension */ 3:
                    message.dimension = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMic_LinkMicChannelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 layout = 1; */
        if (message.layout !== 0n)
            writer.tag(1, WireType.Varint).int64(message.layout);
        /* int64 vendor = 2; */
        if (message.vendor !== 0n)
            writer.tag(2, WireType.Varint).int64(message.vendor);
        /* int64 dimension = 3; */
        if (message.dimension !== 0n)
            writer.tag(3, WireType.Varint).int64(message.dimension);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkMic.LinkMicChannelInfo
 */
export const LinkMic_LinkMicChannelInfo = new LinkMic_LinkMicChannelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMic_LinkMicBattleScore$Type extends MessageType<LinkMic_LinkMicBattleScore> {
    constructor() {
        super("data.LinkMic.LinkMicBattleScore", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMic_LinkMicBattleScore>): LinkMic_LinkMicBattleScore {
        const message = { userId: 0n, score: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMic_LinkMicBattleScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMic_LinkMicBattleScore): LinkMic_LinkMicBattleScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMic_LinkMicBattleScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkMic.LinkMicBattleScore
 */
export const LinkMic_LinkMicBattleScore = new LinkMic_LinkMicBattleScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMic_LinkMicBattleSetting$Type extends MessageType<LinkMic_LinkMicBattleSetting> {
    constructor() {
        super("data.LinkMic.LinkMicBattleSetting", [
            { no: 1, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "finished", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "play_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "team_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "activity_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMic_LinkMicBattleSetting>): LinkMic_LinkMicBattleSetting {
        const message = { channelId: 0n, duration: 0n, startTime: 0n, startTimeMs: 0n, theme: "", finished: 0n, battleId: 0n, matchType: 0n, playMode: 0n, teamMode: 0n, activityMode: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMic_LinkMicBattleSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMic_LinkMicBattleSetting): LinkMic_LinkMicBattleSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 channel_id */ 1:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 3:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 start_time_ms */ 4:
                    message.startTimeMs = reader.int64().toBigInt();
                    break;
                case /* string theme */ 5:
                    message.theme = reader.string();
                    break;
                case /* int64 finished */ 6:
                    message.finished = reader.int64().toBigInt();
                    break;
                case /* int64 battle_id */ 7:
                    message.battleId = reader.int64().toBigInt();
                    break;
                case /* int64 match_type */ 8:
                    message.matchType = reader.int64().toBigInt();
                    break;
                case /* int64 play_mode */ 9:
                    message.playMode = reader.int64().toBigInt();
                    break;
                case /* int64 team_mode */ 10:
                    message.teamMode = reader.int64().toBigInt();
                    break;
                case /* int64 activity_mode */ 11:
                    message.activityMode = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMic_LinkMicBattleSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 channel_id = 1; */
        if (message.channelId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.channelId);
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* int64 start_time = 3; */
        if (message.startTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startTime);
        /* int64 start_time_ms = 4; */
        if (message.startTimeMs !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startTimeMs);
        /* string theme = 5; */
        if (message.theme !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.theme);
        /* int64 finished = 6; */
        if (message.finished !== 0n)
            writer.tag(6, WireType.Varint).int64(message.finished);
        /* int64 battle_id = 7; */
        if (message.battleId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.battleId);
        /* int64 match_type = 8; */
        if (message.matchType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.matchType);
        /* int64 play_mode = 9; */
        if (message.playMode !== 0n)
            writer.tag(9, WireType.Varint).int64(message.playMode);
        /* int64 team_mode = 10; */
        if (message.teamMode !== 0n)
            writer.tag(10, WireType.Varint).int64(message.teamMode);
        /* int64 activity_mode = 11; */
        if (message.activityMode !== 0n)
            writer.tag(11, WireType.Varint).int64(message.activityMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkMic.LinkMicBattleSetting
 */
export const LinkMic_LinkMicBattleSetting = new LinkMic_LinkMicBattleSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reservation$Type extends MessageType<Reservation> {
    constructor() {
        super("data.Reservation", [
            { no: 1, name: "appointment_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "btn_rect", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "btn_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "is_reserved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Reservation>): Reservation {
        const message = { appointmentId: 0n, anchorId: 0n, roomId: 0n, startTime: 0n, endTime: 0n, btnRect: [], btnColor: "", isReserved: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Reservation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reservation): Reservation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 appointment_id */ 1:
                    message.appointmentId = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_id */ 2:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 3:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 4:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 5:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* repeated int64 btn_rect */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.btnRect.push(reader.int64().toBigInt());
                    else
                        message.btnRect.push(reader.int64().toBigInt());
                    break;
                case /* string btn_color */ 7:
                    message.btnColor = reader.string();
                    break;
                case /* bool is_reserved */ 8:
                    message.isReserved = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reservation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 appointment_id = 1; */
        if (message.appointmentId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.appointmentId);
        /* int64 anchor_id = 2; */
        if (message.anchorId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.anchorId);
        /* int64 room_id = 3; */
        if (message.roomId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.roomId);
        /* int64 start_time = 4; */
        if (message.startTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 5; */
        if (message.endTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.endTime);
        /* repeated int64 btn_rect = 6; */
        if (message.btnRect.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.btnRect.length; i++)
                writer.int64(message.btnRect[i]);
            writer.join();
        }
        /* string btn_color = 7; */
        if (message.btnColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.btnColor);
        /* bool is_reserved = 8; */
        if (message.isReserved !== false)
            writer.tag(8, WireType.Varint).bool(message.isReserved);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Reservation
 */
export const Reservation = new Reservation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecotationDetail$Type extends MessageType<DecotationDetail> {
    constructor() {
        super("data.DecotationDetail", [
            { no: 1, name: "text_decoration", kind: "message", T: () => Decoration },
            { no: 2, name: "image_decoration", kind: "message", T: () => Decoration }
        ]);
    }
    create(value?: PartialMessage<DecotationDetail>): DecotationDetail {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DecotationDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecotationDetail): DecotationDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Decoration text_decoration */ 1:
                    message.textDecoration = Decoration.internalBinaryRead(reader, reader.uint32(), options, message.textDecoration);
                    break;
                case /* data.Decoration image_decoration */ 2:
                    message.imageDecoration = Decoration.internalBinaryRead(reader, reader.uint32(), options, message.imageDecoration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecotationDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Decoration text_decoration = 1; */
        if (message.textDecoration)
            Decoration.internalBinaryWrite(message.textDecoration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Decoration image_decoration = 2; */
        if (message.imageDecoration)
            Decoration.internalBinaryWrite(message.imageDecoration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DecotationDetail
 */
export const DecotationDetail = new DecotationDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Decoration$Type extends MessageType<Decoration> {
    constructor() {
        super("data.Decoration", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "image", kind: "message", T: () => Image },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "input_rect", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "text_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "max_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "h", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "x", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "w", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "y", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "kind", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "sub_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "reservation", kind: "message", T: () => Reservation },
            { no: 17, name: "nine_patch_image", kind: "message", T: () => Image },
            { no: 18, name: "text_special_effects", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "text_image_adjustable_start_position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "text_image_adjustable_end_position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "text_font_config", kind: "message", T: () => DecorationFontConfig },
            { no: 22, name: "audit_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Decoration>): Decoration {
        const message = { id: 0n, type: 0n, inputRect: [], textSize: 0n, textColor: "", content: "", maxLength: 0n, status: 0n, h: 0n, x: 0n, w: 0n, y: 0n, kind: 0n, subType: 0n, textSpecialEffects: [], textImageAdjustableStartPosition: 0n, textImageAdjustableEndPosition: 0n, auditTextColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Decoration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Decoration): Decoration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* data.Image image */ 2:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* repeated int64 input_rect */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.inputRect.push(reader.int64().toBigInt());
                    else
                        message.inputRect.push(reader.int64().toBigInt());
                    break;
                case /* int64 text_size */ 5:
                    message.textSize = reader.int64().toBigInt();
                    break;
                case /* string text_color */ 6:
                    message.textColor = reader.string();
                    break;
                case /* string content */ 7:
                    message.content = reader.string();
                    break;
                case /* int64 max_length */ 8:
                    message.maxLength = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 9:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* int64 h */ 10:
                    message.h = reader.int64().toBigInt();
                    break;
                case /* int64 x */ 11:
                    message.x = reader.int64().toBigInt();
                    break;
                case /* int64 w */ 12:
                    message.w = reader.int64().toBigInt();
                    break;
                case /* int64 y */ 13:
                    message.y = reader.int64().toBigInt();
                    break;
                case /* int64 kind */ 14:
                    message.kind = reader.int64().toBigInt();
                    break;
                case /* int64 sub_type */ 15:
                    message.subType = reader.int64().toBigInt();
                    break;
                case /* data.Reservation reservation */ 16:
                    message.reservation = Reservation.internalBinaryRead(reader, reader.uint32(), options, message.reservation);
                    break;
                case /* data.Image nine_patch_image */ 17:
                    message.ninePatchImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.ninePatchImage);
                    break;
                case /* repeated int64 text_special_effects */ 18:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.textSpecialEffects.push(reader.int64().toBigInt());
                    else
                        message.textSpecialEffects.push(reader.int64().toBigInt());
                    break;
                case /* int64 text_image_adjustable_start_position */ 19:
                    message.textImageAdjustableStartPosition = reader.int64().toBigInt();
                    break;
                case /* int64 text_image_adjustable_end_position */ 20:
                    message.textImageAdjustableEndPosition = reader.int64().toBigInt();
                    break;
                case /* data.DecorationFontConfig text_font_config */ 21:
                    message.textFontConfig = DecorationFontConfig.internalBinaryRead(reader, reader.uint32(), options, message.textFontConfig);
                    break;
                case /* string audit_text_color */ 22:
                    message.auditTextColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Decoration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* data.Image image = 2; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 type = 3; */
        if (message.type !== 0n)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* repeated int64 input_rect = 4; */
        if (message.inputRect.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.inputRect.length; i++)
                writer.int64(message.inputRect[i]);
            writer.join();
        }
        /* int64 text_size = 5; */
        if (message.textSize !== 0n)
            writer.tag(5, WireType.Varint).int64(message.textSize);
        /* string text_color = 6; */
        if (message.textColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.textColor);
        /* string content = 7; */
        if (message.content !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.content);
        /* int64 max_length = 8; */
        if (message.maxLength !== 0n)
            writer.tag(8, WireType.Varint).int64(message.maxLength);
        /* int64 status = 9; */
        if (message.status !== 0n)
            writer.tag(9, WireType.Varint).int64(message.status);
        /* int64 h = 10; */
        if (message.h !== 0n)
            writer.tag(10, WireType.Varint).int64(message.h);
        /* int64 x = 11; */
        if (message.x !== 0n)
            writer.tag(11, WireType.Varint).int64(message.x);
        /* int64 w = 12; */
        if (message.w !== 0n)
            writer.tag(12, WireType.Varint).int64(message.w);
        /* int64 y = 13; */
        if (message.y !== 0n)
            writer.tag(13, WireType.Varint).int64(message.y);
        /* int64 kind = 14; */
        if (message.kind !== 0n)
            writer.tag(14, WireType.Varint).int64(message.kind);
        /* int64 sub_type = 15; */
        if (message.subType !== 0n)
            writer.tag(15, WireType.Varint).int64(message.subType);
        /* data.Reservation reservation = 16; */
        if (message.reservation)
            Reservation.internalBinaryWrite(message.reservation, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* data.Image nine_patch_image = 17; */
        if (message.ninePatchImage)
            Image.internalBinaryWrite(message.ninePatchImage, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 text_special_effects = 18; */
        if (message.textSpecialEffects.length) {
            writer.tag(18, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.textSpecialEffects.length; i++)
                writer.int64(message.textSpecialEffects[i]);
            writer.join();
        }
        /* int64 text_image_adjustable_start_position = 19; */
        if (message.textImageAdjustableStartPosition !== 0n)
            writer.tag(19, WireType.Varint).int64(message.textImageAdjustableStartPosition);
        /* int64 text_image_adjustable_end_position = 20; */
        if (message.textImageAdjustableEndPosition !== 0n)
            writer.tag(20, WireType.Varint).int64(message.textImageAdjustableEndPosition);
        /* data.DecorationFontConfig text_font_config = 21; */
        if (message.textFontConfig)
            DecorationFontConfig.internalBinaryWrite(message.textFontConfig, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* string audit_text_color = 22; */
        if (message.auditTextColor !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.auditTextColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Decoration
 */
export const Decoration = new Decoration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecorationFontConfig$Type extends MessageType<DecorationFontConfig> {
    constructor() {
        super("data.DecorationFontConfig", [
            { no: 1, name: "FontID", kind: "scalar", jsonName: "FontID", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "DownloadUrl", kind: "scalar", jsonName: "DownloadUrl", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Status", kind: "scalar", jsonName: "Status", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "font_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DecorationFontConfig>): DecorationFontConfig {
        const message = { fontID: 0n, downloadUrl: "", status: 0n, fontName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DecorationFontConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecorationFontConfig): DecorationFontConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 FontID = 1 [json_name = "FontID"];*/ 1:
                    message.fontID = reader.int64().toBigInt();
                    break;
                case /* string DownloadUrl = 2 [json_name = "DownloadUrl"];*/ 2:
                    message.downloadUrl = reader.string();
                    break;
                case /* int64 Status = 3 [json_name = "Status"];*/ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string font_name */ 4:
                    message.fontName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecorationFontConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 FontID = 1 [json_name = "FontID"]; */
        if (message.fontID !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fontID);
        /* string DownloadUrl = 2 [json_name = "DownloadUrl"]; */
        if (message.downloadUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.downloadUrl);
        /* int64 Status = 3 [json_name = "Status"]; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* string font_name = 4; */
        if (message.fontName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fontName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DecorationFontConfig
 */
export const DecorationFontConfig = new DecorationFontConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomStats$Type extends MessageType<RoomStats> {
    constructor() {
        super("data.RoomStats", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fan_ticket", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "money", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "total_user", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "gift_uv_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "follow_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "user_count_composition", kind: "message", T: () => RoomStats_UserCountComposition },
            { no: 9, name: "watermelon", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "digg_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "enter_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "dou_plus_promotion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "total_user_desp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "like_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "total_user_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "user_count_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "comment_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "welfare_donation_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "up_right_stats_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "up_right_stats_str_complete", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomStats>): RoomStats {
        const message = { id: 0n, idStr: "", fanTicket: 0n, money: 0n, totalUser: 0n, giftUvCount: 0n, followCount: 0n, watermelon: 0n, diggCount: 0n, enterCount: 0n, douPlusPromotion: "", totalUserDesp: "", likeCount: 0n, totalUserStr: "", userCountStr: "", commentCount: 0n, welfareDonationAmount: 0n, upRightStatsStr: "", upRightStatsStrComplete: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomStats): RoomStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 2:
                    message.idStr = reader.string();
                    break;
                case /* int64 fan_ticket */ 3:
                    message.fanTicket = reader.int64().toBigInt();
                    break;
                case /* int64 money */ 4:
                    message.money = reader.int64().toBigInt();
                    break;
                case /* int64 total_user */ 5:
                    message.totalUser = reader.int64().toBigInt();
                    break;
                case /* int64 gift_uv_count */ 6:
                    message.giftUvCount = reader.int64().toBigInt();
                    break;
                case /* int64 follow_count */ 7:
                    message.followCount = reader.int64().toBigInt();
                    break;
                case /* data.RoomStats.UserCountComposition user_count_composition */ 8:
                    message.userCountComposition = RoomStats_UserCountComposition.internalBinaryRead(reader, reader.uint32(), options, message.userCountComposition);
                    break;
                case /* int64 watermelon */ 9:
                    message.watermelon = reader.int64().toBigInt();
                    break;
                case /* int64 digg_count */ 10:
                    message.diggCount = reader.int64().toBigInt();
                    break;
                case /* int64 enter_count */ 11:
                    message.enterCount = reader.int64().toBigInt();
                    break;
                case /* string dou_plus_promotion */ 12:
                    message.douPlusPromotion = reader.string();
                    break;
                case /* string total_user_desp */ 13:
                    message.totalUserDesp = reader.string();
                    break;
                case /* int64 like_count */ 14:
                    message.likeCount = reader.int64().toBigInt();
                    break;
                case /* string total_user_str */ 15:
                    message.totalUserStr = reader.string();
                    break;
                case /* string user_count_str */ 16:
                    message.userCountStr = reader.string();
                    break;
                case /* int64 comment_count */ 17:
                    message.commentCount = reader.int64().toBigInt();
                    break;
                case /* int64 welfare_donation_amount */ 18:
                    message.welfareDonationAmount = reader.int64().toBigInt();
                    break;
                case /* string up_right_stats_str */ 19:
                    message.upRightStatsStr = reader.string();
                    break;
                case /* string up_right_stats_str_complete */ 20:
                    message.upRightStatsStrComplete = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string id_str = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* int64 fan_ticket = 3; */
        if (message.fanTicket !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fanTicket);
        /* int64 money = 4; */
        if (message.money !== 0n)
            writer.tag(4, WireType.Varint).int64(message.money);
        /* int64 total_user = 5; */
        if (message.totalUser !== 0n)
            writer.tag(5, WireType.Varint).int64(message.totalUser);
        /* int64 gift_uv_count = 6; */
        if (message.giftUvCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.giftUvCount);
        /* int64 follow_count = 7; */
        if (message.followCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.followCount);
        /* data.RoomStats.UserCountComposition user_count_composition = 8; */
        if (message.userCountComposition)
            RoomStats_UserCountComposition.internalBinaryWrite(message.userCountComposition, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 watermelon = 9; */
        if (message.watermelon !== 0n)
            writer.tag(9, WireType.Varint).int64(message.watermelon);
        /* int64 digg_count = 10; */
        if (message.diggCount !== 0n)
            writer.tag(10, WireType.Varint).int64(message.diggCount);
        /* int64 enter_count = 11; */
        if (message.enterCount !== 0n)
            writer.tag(11, WireType.Varint).int64(message.enterCount);
        /* string dou_plus_promotion = 12; */
        if (message.douPlusPromotion !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.douPlusPromotion);
        /* string total_user_desp = 13; */
        if (message.totalUserDesp !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.totalUserDesp);
        /* int64 like_count = 14; */
        if (message.likeCount !== 0n)
            writer.tag(14, WireType.Varint).int64(message.likeCount);
        /* string total_user_str = 15; */
        if (message.totalUserStr !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.totalUserStr);
        /* string user_count_str = 16; */
        if (message.userCountStr !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.userCountStr);
        /* int64 comment_count = 17; */
        if (message.commentCount !== 0n)
            writer.tag(17, WireType.Varint).int64(message.commentCount);
        /* int64 welfare_donation_amount = 18; */
        if (message.welfareDonationAmount !== 0n)
            writer.tag(18, WireType.Varint).int64(message.welfareDonationAmount);
        /* string up_right_stats_str = 19; */
        if (message.upRightStatsStr !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.upRightStatsStr);
        /* string up_right_stats_str_complete = 20; */
        if (message.upRightStatsStrComplete !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.upRightStatsStrComplete);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomStats
 */
export const RoomStats = new RoomStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomStats_UserCountComposition$Type extends MessageType<RoomStats_UserCountComposition> {
    constructor() {
        super("data.RoomStats.UserCountComposition", [
            { no: 1, name: "city", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "video_detail", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "my_follow", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "other", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<RoomStats_UserCountComposition>): RoomStats_UserCountComposition {
        const message = { city: 0, videoDetail: 0, myFollow: 0, other: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomStats_UserCountComposition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomStats_UserCountComposition): RoomStats_UserCountComposition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double city */ 1:
                    message.city = reader.double();
                    break;
                case /* double video_detail */ 2:
                    message.videoDetail = reader.double();
                    break;
                case /* double my_follow */ 3:
                    message.myFollow = reader.double();
                    break;
                case /* double other */ 4:
                    message.other = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomStats_UserCountComposition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double city = 1; */
        if (message.city !== 0)
            writer.tag(1, WireType.Bit64).double(message.city);
        /* double video_detail = 2; */
        if (message.videoDetail !== 0)
            writer.tag(2, WireType.Bit64).double(message.videoDetail);
        /* double my_follow = 3; */
        if (message.myFollow !== 0)
            writer.tag(3, WireType.Bit64).double(message.myFollow);
        /* double other = 4; */
        if (message.other !== 0)
            writer.tag(4, WireType.Bit64).double(message.other);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomStats.UserCountComposition
 */
export const RoomStats_UserCountComposition = new RoomStats_UserCountComposition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomViewStats$Type extends MessageType<RoomViewStats> {
    constructor() {
        super("data.RoomViewStats", [
            { no: 1, name: "is_hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "display_short", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "display_middle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "display_long", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "display_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "display_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "incremental", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "display_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "display_short_anchor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "display_middle_anchor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "display_long_anchor", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomViewStats>): RoomViewStats {
        const message = { isHidden: false, displayShort: "", displayMiddle: "", displayLong: "", displayValue: 0n, displayVersion: 0n, incremental: false, displayType: 0, displayShortAnchor: "", displayMiddleAnchor: "", displayLongAnchor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomViewStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomViewStats): RoomViewStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_hidden */ 1:
                    message.isHidden = reader.bool();
                    break;
                case /* string display_short */ 2:
                    message.displayShort = reader.string();
                    break;
                case /* string display_middle */ 3:
                    message.displayMiddle = reader.string();
                    break;
                case /* string display_long */ 4:
                    message.displayLong = reader.string();
                    break;
                case /* int64 display_value */ 5:
                    message.displayValue = reader.int64().toBigInt();
                    break;
                case /* int64 display_version */ 6:
                    message.displayVersion = reader.int64().toBigInt();
                    break;
                case /* bool incremental */ 7:
                    message.incremental = reader.bool();
                    break;
                case /* int32 display_type */ 8:
                    message.displayType = reader.int32();
                    break;
                case /* string display_short_anchor */ 9:
                    message.displayShortAnchor = reader.string();
                    break;
                case /* string display_middle_anchor */ 10:
                    message.displayMiddleAnchor = reader.string();
                    break;
                case /* string display_long_anchor */ 11:
                    message.displayLongAnchor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomViewStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_hidden = 1; */
        if (message.isHidden !== false)
            writer.tag(1, WireType.Varint).bool(message.isHidden);
        /* string display_short = 2; */
        if (message.displayShort !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayShort);
        /* string display_middle = 3; */
        if (message.displayMiddle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.displayMiddle);
        /* string display_long = 4; */
        if (message.displayLong !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.displayLong);
        /* int64 display_value = 5; */
        if (message.displayValue !== 0n)
            writer.tag(5, WireType.Varint).int64(message.displayValue);
        /* int64 display_version = 6; */
        if (message.displayVersion !== 0n)
            writer.tag(6, WireType.Varint).int64(message.displayVersion);
        /* bool incremental = 7; */
        if (message.incremental !== false)
            writer.tag(7, WireType.Varint).bool(message.incremental);
        /* int32 display_type = 8; */
        if (message.displayType !== 0)
            writer.tag(8, WireType.Varint).int32(message.displayType);
        /* string display_short_anchor = 9; */
        if (message.displayShortAnchor !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.displayShortAnchor);
        /* string display_middle_anchor = 10; */
        if (message.displayMiddleAnchor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.displayMiddleAnchor);
        /* string display_long_anchor = 11; */
        if (message.displayLongAnchor !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.displayLongAnchor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomViewStats
 */
export const RoomViewStats = new RoomViewStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TopFan$Type extends MessageType<TopFan> {
    constructor() {
        super("data.TopFan", [
            { no: 1, name: "fan_ticket", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<TopFan>): TopFan {
        const message = { fanTicket: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TopFan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TopFan): TopFan {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 fan_ticket */ 1:
                    message.fanTicket = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TopFan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 fan_ticket = 1; */
        if (message.fanTicket !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fanTicket);
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TopFan
 */
export const TopFan = new TopFan$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomUserAttr$Type extends MessageType<RoomUserAttr> {
    constructor() {
        super("data.RoomUserAttr", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "silence_flag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "admin_flag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomUserAttr>): RoomUserAttr {
        const message = { roomId: 0n, roomIdStr: "", silenceFlag: 0n, adminFlag: 0n, rank: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomUserAttr>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomUserAttr): RoomUserAttr {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* string room_id_str */ 2:
                    message.roomIdStr = reader.string();
                    break;
                case /* int64 silence_flag */ 3:
                    message.silenceFlag = reader.int64().toBigInt();
                    break;
                case /* int64 admin_flag */ 4:
                    message.adminFlag = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 5:
                    message.rank = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomUserAttr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        /* string room_id_str = 2; */
        if (message.roomIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomIdStr);
        /* int64 silence_flag = 3; */
        if (message.silenceFlag !== 0n)
            writer.tag(3, WireType.Varint).int64(message.silenceFlag);
        /* int64 admin_flag = 4; */
        if (message.adminFlag !== 0n)
            writer.tag(4, WireType.Varint).int64(message.adminFlag);
        /* int64 rank = 5; */
        if (message.rank !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomUserAttr
 */
export const RoomUserAttr = new RoomUserAttr$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BurstInfo$Type extends MessageType<BurstInfo> {
    constructor() {
        super("data.BurstInfo", [
            { no: 1, name: "burst_time_remain_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "multiple", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "property_definition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "property_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BurstInfo>): BurstInfo {
        const message = { burstTimeRemainSeconds: 0n, multiple: 0n, propertyDefinitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BurstInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BurstInfo): BurstInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 burst_time_remain_seconds */ 1:
                    message.burstTimeRemainSeconds = reader.int64().toBigInt();
                    break;
                case /* int64 multiple */ 2:
                    message.multiple = reader.int64().toBigInt();
                    break;
                case /* int64 property_definition_id */ 3:
                    message.propertyDefinitionId = reader.int64().toBigInt();
                    break;
                case /* data.Image property_icon */ 4:
                    message.propertyIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.propertyIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BurstInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 burst_time_remain_seconds = 1; */
        if (message.burstTimeRemainSeconds !== 0n)
            writer.tag(1, WireType.Varint).int64(message.burstTimeRemainSeconds);
        /* int64 multiple = 2; */
        if (message.multiple !== 0n)
            writer.tag(2, WireType.Varint).int64(message.multiple);
        /* int64 property_definition_id = 3; */
        if (message.propertyDefinitionId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.propertyDefinitionId);
        /* data.Image property_icon = 4; */
        if (message.propertyIcon)
            Image.internalBinaryWrite(message.propertyIcon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BurstInfo
 */
export const BurstInfo = new BurstInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomHealthScoreInfo$Type extends MessageType<RoomHealthScoreInfo> {
    constructor() {
        super("data.RoomHealthScoreInfo", [
            { no: 1, name: "score", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "bubble_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomHealthScoreInfo>): RoomHealthScoreInfo {
        const message = { score: 0, bubbleMessage: "", jumpUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomHealthScoreInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomHealthScoreInfo): RoomHealthScoreInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double score */ 1:
                    message.score = reader.double();
                    break;
                case /* string bubble_message */ 2:
                    message.bubbleMessage = reader.string();
                    break;
                case /* string jump_url */ 3:
                    message.jumpUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomHealthScoreInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double score = 1; */
        if (message.score !== 0)
            writer.tag(1, WireType.Bit64).double(message.score);
        /* string bubble_message = 2; */
        if (message.bubbleMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bubbleMessage);
        /* string jump_url = 3; */
        if (message.jumpUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.jumpUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomHealthScoreInfo
 */
export const RoomHealthScoreInfo = new RoomHealthScoreInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TVStation$Type extends MessageType<TVStation> {
    constructor() {
        super("data.TVStation", [
            { no: 1, name: "is_idle", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "state_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TVStation>): TVStation {
        const message = { isIdle: false, stateDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TVStation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TVStation): TVStation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_idle */ 1:
                    message.isIdle = reader.bool();
                    break;
                case /* string state_desc */ 2:
                    message.stateDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TVStation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_idle = 1; */
        if (message.isIdle !== false)
            writer.tag(1, WireType.Varint).bool(message.isIdle);
        /* string state_desc = 2; */
        if (message.stateDesc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stateDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TVStation
 */
export const TVStation = new TVStation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentBox$Type extends MessageType<CommentBox> {
    constructor() {
        super("data.CommentBox", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "placeholder", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommentBox>): CommentBox {
        const message = { placeholder: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentBox>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentBox): CommentBox {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string placeholder */ 2:
                    message.placeholder = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentBox, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string placeholder = 2; */
        if (message.placeholder !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.placeholder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentBox
 */
export const CommentBox = new CommentBox$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomCartV2$Type extends MessageType<RoomCartV2> {
    constructor() {
        super("data.RoomCartV2", [
            { no: 1, name: "show_cart", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomCartV2>): RoomCartV2 {
        const message = { showCart: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomCartV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomCartV2): RoomCartV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 show_cart */ 1:
                    message.showCart = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomCartV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 show_cart = 1; */
        if (message.showCart !== 0)
            writer.tag(1, WireType.Varint).int32(message.showCart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomCartV2
 */
export const RoomCartV2 = new RoomCartV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomCart$Type extends MessageType<RoomCart> {
    constructor() {
        super("data.RoomCart", [
            { no: 1, name: "contain_cart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "flash_total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "cart_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "show_cart", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "vertical", kind: "message", T: () => CartVertical },
            { no: 7, name: "horizontal", kind: "message", T: () => CartHorizontal },
            { no: 8, name: "global_custom_icons", kind: "message", T: () => GlobalCustomIcons }
        ]);
    }
    create(value?: PartialMessage<RoomCart>): RoomCart {
        const message = { containCart: false, total: 0n, flashTotal: 0n, cartIcon: "", showCart: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomCart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomCart): RoomCart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool contain_cart */ 1:
                    message.containCart = reader.bool();
                    break;
                case /* int64 total */ 2:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* int64 flash_total */ 3:
                    message.flashTotal = reader.int64().toBigInt();
                    break;
                case /* string cart_icon */ 4:
                    message.cartIcon = reader.string();
                    break;
                case /* int32 show_cart */ 5:
                    message.showCart = reader.int32();
                    break;
                case /* data.CartVertical vertical */ 6:
                    message.vertical = CartVertical.internalBinaryRead(reader, reader.uint32(), options, message.vertical);
                    break;
                case /* data.CartHorizontal horizontal */ 7:
                    message.horizontal = CartHorizontal.internalBinaryRead(reader, reader.uint32(), options, message.horizontal);
                    break;
                case /* data.GlobalCustomIcons global_custom_icons */ 8:
                    message.globalCustomIcons = GlobalCustomIcons.internalBinaryRead(reader, reader.uint32(), options, message.globalCustomIcons);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomCart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool contain_cart = 1; */
        if (message.containCart !== false)
            writer.tag(1, WireType.Varint).bool(message.containCart);
        /* int64 total = 2; */
        if (message.total !== 0n)
            writer.tag(2, WireType.Varint).int64(message.total);
        /* int64 flash_total = 3; */
        if (message.flashTotal !== 0n)
            writer.tag(3, WireType.Varint).int64(message.flashTotal);
        /* string cart_icon = 4; */
        if (message.cartIcon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cartIcon);
        /* int32 show_cart = 5; */
        if (message.showCart !== 0)
            writer.tag(5, WireType.Varint).int32(message.showCart);
        /* data.CartVertical vertical = 6; */
        if (message.vertical)
            CartVertical.internalBinaryWrite(message.vertical, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.CartHorizontal horizontal = 7; */
        if (message.horizontal)
            CartHorizontal.internalBinaryWrite(message.horizontal, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.GlobalCustomIcons global_custom_icons = 8; */
        if (message.globalCustomIcons)
            GlobalCustomIcons.internalBinaryWrite(message.globalCustomIcons, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomCart
 */
export const RoomCart = new RoomCart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CartVertical$Type extends MessageType<CartVertical> {
    constructor() {
        super("data.CartVertical", [
            { no: 1, name: "allow_show_cart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CartVertical>): CartVertical {
        const message = { allowShowCart: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CartVertical>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CartVertical): CartVertical {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool allow_show_cart */ 1:
                    message.allowShowCart = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CartVertical, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool allow_show_cart = 1; */
        if (message.allowShowCart !== false)
            writer.tag(1, WireType.Varint).bool(message.allowShowCart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CartVertical
 */
export const CartVertical = new CartVertical$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CartHorizontal$Type extends MessageType<CartHorizontal> {
    constructor() {
        super("data.CartHorizontal", [
            { no: 1, name: "allow_show_cart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CartHorizontal>): CartHorizontal {
        const message = { allowShowCart: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CartHorizontal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CartHorizontal): CartHorizontal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool allow_show_cart */ 1:
                    message.allowShowCart = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CartHorizontal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool allow_show_cart = 1; */
        if (message.allowShowCart !== false)
            writer.tag(1, WireType.Varint).bool(message.allowShowCart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CartHorizontal
 */
export const CartHorizontal = new CartHorizontal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GlobalCustomIcons$Type extends MessageType<GlobalCustomIcons> {
    constructor() {
        super("data.GlobalCustomIcons", [
            { no: 1, name: "static_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "animated_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "animated_common_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GlobalCustomIcons>): GlobalCustomIcons {
        const message = { staticIconUrl: "", animatedIconUrl: "", animatedCommonIconUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GlobalCustomIcons>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalCustomIcons): GlobalCustomIcons {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string static_icon_url */ 1:
                    message.staticIconUrl = reader.string();
                    break;
                case /* string animated_icon_url */ 2:
                    message.animatedIconUrl = reader.string();
                    break;
                case /* string animated_common_icon_url */ 3:
                    message.animatedCommonIconUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GlobalCustomIcons, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string static_icon_url = 1; */
        if (message.staticIconUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.staticIconUrl);
        /* string animated_icon_url = 2; */
        if (message.animatedIconUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.animatedIconUrl);
        /* string animated_common_icon_url = 3; */
        if (message.animatedCommonIconUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.animatedCommonIconUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GlobalCustomIcons
 */
export const GlobalCustomIcons = new GlobalCustomIcons$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchBigCard$Type extends MessageType<ShortTouchBigCard> {
    constructor() {
        super("data.ShortTouchBigCard", [
            { no: 1, name: "big_card_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "container_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShortTouchBigCard>): ShortTouchBigCard {
        const message = { bigCardUrl: "", containerType: 0, width: 0, height: 0, duration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchBigCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchBigCard): ShortTouchBigCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string big_card_url */ 1:
                    message.bigCardUrl = reader.string();
                    break;
                case /* int32 container_type */ 2:
                    message.containerType = reader.int32();
                    break;
                case /* int32 width */ 3:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 4:
                    message.height = reader.int32();
                    break;
                case /* int32 duration */ 5:
                    message.duration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchBigCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string big_card_url = 1; */
        if (message.bigCardUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bigCardUrl);
        /* int32 container_type = 2; */
        if (message.containerType !== 0)
            writer.tag(2, WireType.Varint).int32(message.containerType);
        /* int32 width = 3; */
        if (message.width !== 0)
            writer.tag(3, WireType.Varint).int32(message.width);
        /* int32 height = 4; */
        if (message.height !== 0)
            writer.tag(4, WireType.Varint).int32(message.height);
        /* int32 duration = 5; */
        if (message.duration !== 0)
            writer.tag(5, WireType.Varint).int32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShortTouchBigCard
 */
export const ShortTouchBigCard = new ShortTouchBigCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextViewModel$Type extends MessageType<TextViewModel> {
    constructor() {
        super("data.TextViewModel", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextViewModel>): TextViewModel {
        const message = { text: "", textColor: "", textSize: 0, bgColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextViewModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextViewModel): TextViewModel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* int32 text_size */ 3:
                    message.textSize = reader.int32();
                    break;
                case /* string bg_color */ 4:
                    message.bgColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextViewModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* int32 text_size = 3; */
        if (message.textSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.textSize);
        /* string bg_color = 4; */
        if (message.bgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TextViewModel
 */
export const TextViewModel = new TextViewModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchBubble$Type extends MessageType<ShortTouchBubble> {
    constructor() {
        super("data.ShortTouchBubble", [
            { no: 1, name: "bubble_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ui_model", kind: "message", T: () => TextViewModel },
            { no: 3, name: "strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShortTouchBubble>): ShortTouchBubble {
        const message = { bubbleId: "", strategy: 0, duration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchBubble>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchBubble): ShortTouchBubble {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bubble_id */ 1:
                    message.bubbleId = reader.string();
                    break;
                case /* data.TextViewModel ui_model */ 2:
                    message.uiModel = TextViewModel.internalBinaryRead(reader, reader.uint32(), options, message.uiModel);
                    break;
                case /* int32 strategy */ 3:
                    message.strategy = reader.int32();
                    break;
                case /* int32 duration */ 4:
                    message.duration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchBubble, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bubble_id = 1; */
        if (message.bubbleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bubbleId);
        /* data.TextViewModel ui_model = 2; */
        if (message.uiModel)
            TextViewModel.internalBinaryWrite(message.uiModel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 strategy = 3; */
        if (message.strategy !== 0)
            writer.tag(3, WireType.Varint).int32(message.strategy);
        /* int32 duration = 4; */
        if (message.duration !== 0)
            writer.tag(4, WireType.Varint).int32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShortTouchBubble
 */
export const ShortTouchBubble = new ShortTouchBubble$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchArea$Type extends MessageType<ShortTouchArea> {
    constructor() {
        super("data.ShortTouchArea", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "priority", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "min_webcast_sdk_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "short_touch_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "short_touch_info", kind: "message", T: () => ShortTouchInfo },
            { no: 6, name: "short_touch_big_card", kind: "message", T: () => ShortTouchBigCard },
            { no: 7, name: "container_payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "load_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "bubble_params", kind: "message", T: () => ShortTouchBubble },
            { no: 10, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShortTouchArea>): ShortTouchArea {
        const message = { type: 0, priority: 0, minWebcastSdkVersion: 0n, shortTouchType: 0, containerPayload: "", loadType: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchArea>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchArea): ShortTouchArea {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* uint32 priority */ 2:
                    message.priority = reader.uint32();
                    break;
                case /* int64 min_webcast_sdk_version */ 3:
                    message.minWebcastSdkVersion = reader.int64().toBigInt();
                    break;
                case /* int32 short_touch_type */ 4:
                    message.shortTouchType = reader.int32();
                    break;
                case /* data.ShortTouchInfo short_touch_info */ 5:
                    message.shortTouchInfo = ShortTouchInfo.internalBinaryRead(reader, reader.uint32(), options, message.shortTouchInfo);
                    break;
                case /* data.ShortTouchBigCard short_touch_big_card */ 6:
                    message.shortTouchBigCard = ShortTouchBigCard.internalBinaryRead(reader, reader.uint32(), options, message.shortTouchBigCard);
                    break;
                case /* string container_payload */ 7:
                    message.containerPayload = reader.string();
                    break;
                case /* int32 load_type */ 8:
                    message.loadType = reader.int32();
                    break;
                case /* data.ShortTouchBubble bubble_params */ 9:
                    message.bubbleParams = ShortTouchBubble.internalBinaryRead(reader, reader.uint32(), options, message.bubbleParams);
                    break;
                case /* string name */ 10:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchArea, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* uint32 priority = 2; */
        if (message.priority !== 0)
            writer.tag(2, WireType.Varint).uint32(message.priority);
        /* int64 min_webcast_sdk_version = 3; */
        if (message.minWebcastSdkVersion !== 0n)
            writer.tag(3, WireType.Varint).int64(message.minWebcastSdkVersion);
        /* int32 short_touch_type = 4; */
        if (message.shortTouchType !== 0)
            writer.tag(4, WireType.Varint).int32(message.shortTouchType);
        /* data.ShortTouchInfo short_touch_info = 5; */
        if (message.shortTouchInfo)
            ShortTouchInfo.internalBinaryWrite(message.shortTouchInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.ShortTouchBigCard short_touch_big_card = 6; */
        if (message.shortTouchBigCard)
            ShortTouchBigCard.internalBinaryWrite(message.shortTouchBigCard, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string container_payload = 7; */
        if (message.containerPayload !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.containerPayload);
        /* int32 load_type = 8; */
        if (message.loadType !== 0)
            writer.tag(8, WireType.Varint).int32(message.loadType);
        /* data.ShortTouchBubble bubble_params = 9; */
        if (message.bubbleParams)
            ShortTouchBubble.internalBinaryWrite(message.bubbleParams, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string name = 10; */
        if (message.name !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShortTouchArea
 */
export const ShortTouchArea = new ShortTouchArea$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchImageLayers$Type extends MessageType<ShortTouchImageLayers> {
    constructor() {
        super("data.ShortTouchImageLayers", [
            { no: 1, name: "layers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ShortTouchImageLayers_Layer },
            { no: 2, name: "base_width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "base_height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShortTouchImageLayers>): ShortTouchImageLayers {
        const message = { layers: [], baseWidth: 0, baseHeight: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchImageLayers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchImageLayers): ShortTouchImageLayers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ShortTouchImageLayers.Layer layers */ 1:
                    message.layers.push(ShortTouchImageLayers_Layer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 base_width */ 2:
                    message.baseWidth = reader.int32();
                    break;
                case /* int32 base_height */ 3:
                    message.baseHeight = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchImageLayers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ShortTouchImageLayers.Layer layers = 1; */
        for (let i = 0; i < message.layers.length; i++)
            ShortTouchImageLayers_Layer.internalBinaryWrite(message.layers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 base_width = 2; */
        if (message.baseWidth !== 0)
            writer.tag(2, WireType.Varint).int32(message.baseWidth);
        /* int32 base_height = 3; */
        if (message.baseHeight !== 0)
            writer.tag(3, WireType.Varint).int32(message.baseHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShortTouchImageLayers
 */
export const ShortTouchImageLayers = new ShortTouchImageLayers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchImageLayers_Layer$Type extends MessageType<ShortTouchImageLayers_Layer> {
    constructor() {
        super("data.ShortTouchImageLayers.Layer", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "radius", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShortTouchImageLayers_Layer>): ShortTouchImageLayers_Layer {
        const message = { url: "", x: 0, y: 0, width: 0, height: 0, radius: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchImageLayers_Layer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchImageLayers_Layer): ShortTouchImageLayers_Layer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* int32 x */ 2:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 3:
                    message.y = reader.int32();
                    break;
                case /* int32 width */ 4:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 5:
                    message.height = reader.int32();
                    break;
                case /* int32 radius */ 6:
                    message.radius = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchImageLayers_Layer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* int32 x = 2; */
        if (message.x !== 0)
            writer.tag(2, WireType.Varint).int32(message.x);
        /* int32 y = 3; */
        if (message.y !== 0)
            writer.tag(3, WireType.Varint).int32(message.y);
        /* int32 width = 4; */
        if (message.width !== 0)
            writer.tag(4, WireType.Varint).int32(message.width);
        /* int32 height = 5; */
        if (message.height !== 0)
            writer.tag(5, WireType.Varint).int32(message.height);
        /* int32 radius = 6; */
        if (message.radius !== 0)
            writer.tag(6, WireType.Varint).int32(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShortTouchImageLayers.Layer
 */
export const ShortTouchImageLayers_Layer = new ShortTouchImageLayers_Layer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchInfo$Type extends MessageType<ShortTouchInfo> {
    constructor() {
        super("data.ShortTouchInfo", [
            { no: 1, name: "short_touch_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "short_touch_fallback_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "container_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "width", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "jump_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "show_animation", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "animation_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "sub_item_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "img_layers", kind: "message", T: () => ShortTouchImageLayers },
            { no: 12, name: "animation_quota", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "accessible_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShortTouchInfo>): ShortTouchInfo {
        const message = { shortTouchUrl: "", shortTouchFallbackUrl: "", containerType: 0, width: 0, height: 0, imgUrl: "", jumpSchema: "", showAnimation: 0, animationType: 0, subItemList: [], animationQuota: 0, accessibleName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchInfo): ShortTouchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string short_touch_url */ 1:
                    message.shortTouchUrl = reader.string();
                    break;
                case /* string short_touch_fallback_url */ 2:
                    message.shortTouchFallbackUrl = reader.string();
                    break;
                case /* int32 container_type */ 3:
                    message.containerType = reader.int32();
                    break;
                case /* uint32 width */ 4:
                    message.width = reader.uint32();
                    break;
                case /* uint32 height */ 5:
                    message.height = reader.uint32();
                    break;
                case /* string img_url */ 6:
                    message.imgUrl = reader.string();
                    break;
                case /* string jump_schema */ 7:
                    message.jumpSchema = reader.string();
                    break;
                case /* int32 show_animation */ 8:
                    message.showAnimation = reader.int32();
                    break;
                case /* int32 animation_type */ 9:
                    message.animationType = reader.int32();
                    break;
                case /* repeated string sub_item_list */ 10:
                    message.subItemList.push(reader.string());
                    break;
                case /* data.ShortTouchImageLayers img_layers */ 11:
                    message.imgLayers = ShortTouchImageLayers.internalBinaryRead(reader, reader.uint32(), options, message.imgLayers);
                    break;
                case /* uint32 animation_quota */ 12:
                    message.animationQuota = reader.uint32();
                    break;
                case /* string accessible_name */ 13:
                    message.accessibleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string short_touch_url = 1; */
        if (message.shortTouchUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.shortTouchUrl);
        /* string short_touch_fallback_url = 2; */
        if (message.shortTouchFallbackUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.shortTouchFallbackUrl);
        /* int32 container_type = 3; */
        if (message.containerType !== 0)
            writer.tag(3, WireType.Varint).int32(message.containerType);
        /* uint32 width = 4; */
        if (message.width !== 0)
            writer.tag(4, WireType.Varint).uint32(message.width);
        /* uint32 height = 5; */
        if (message.height !== 0)
            writer.tag(5, WireType.Varint).uint32(message.height);
        /* string img_url = 6; */
        if (message.imgUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.imgUrl);
        /* string jump_schema = 7; */
        if (message.jumpSchema !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.jumpSchema);
        /* int32 show_animation = 8; */
        if (message.showAnimation !== 0)
            writer.tag(8, WireType.Varint).int32(message.showAnimation);
        /* int32 animation_type = 9; */
        if (message.animationType !== 0)
            writer.tag(9, WireType.Varint).int32(message.animationType);
        /* repeated string sub_item_list = 10; */
        for (let i = 0; i < message.subItemList.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.subItemList[i]);
        /* data.ShortTouchImageLayers img_layers = 11; */
        if (message.imgLayers)
            ShortTouchImageLayers.internalBinaryWrite(message.imgLayers, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* uint32 animation_quota = 12; */
        if (message.animationQuota !== 0)
            writer.tag(12, WireType.Varint).uint32(message.animationQuota);
        /* string accessible_name = 13; */
        if (message.accessibleName !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.accessibleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShortTouchInfo
 */
export const ShortTouchInfo = new ShortTouchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizExtra$Type extends MessageType<QuizExtra> {
    constructor() {
        super("data.QuizExtra", [
            { no: 1, name: "quiz_infos", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuizExtra>): QuizExtra {
        const message = { quizInfos: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizExtra): QuizExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_infos */ 1:
                    message.quizInfos = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_infos = 1; */
        if (message.quizInfos !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizInfos);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.QuizExtra
 */
export const QuizExtra = new QuizExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioSpeakingImageList$Type extends MessageType<AudioSpeakingImageList> {
    constructor() {
        super("data.AudioSpeakingImageList", [
            { no: 1, name: "male_speaking_image", kind: "message", T: () => AudioSpeakingImageList_SpeakingImage },
            { no: 2, name: "female_speaking_image", kind: "message", T: () => AudioSpeakingImageList_SpeakingImage },
            { no: 3, name: "unknown_speaking_image", kind: "message", T: () => AudioSpeakingImageList_SpeakingImage }
        ]);
    }
    create(value?: PartialMessage<AudioSpeakingImageList>): AudioSpeakingImageList {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioSpeakingImageList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioSpeakingImageList): AudioSpeakingImageList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.AudioSpeakingImageList.SpeakingImage male_speaking_image */ 1:
                    message.maleSpeakingImage = AudioSpeakingImageList_SpeakingImage.internalBinaryRead(reader, reader.uint32(), options, message.maleSpeakingImage);
                    break;
                case /* data.AudioSpeakingImageList.SpeakingImage female_speaking_image */ 2:
                    message.femaleSpeakingImage = AudioSpeakingImageList_SpeakingImage.internalBinaryRead(reader, reader.uint32(), options, message.femaleSpeakingImage);
                    break;
                case /* data.AudioSpeakingImageList.SpeakingImage unknown_speaking_image */ 3:
                    message.unknownSpeakingImage = AudioSpeakingImageList_SpeakingImage.internalBinaryRead(reader, reader.uint32(), options, message.unknownSpeakingImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioSpeakingImageList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.AudioSpeakingImageList.SpeakingImage male_speaking_image = 1; */
        if (message.maleSpeakingImage)
            AudioSpeakingImageList_SpeakingImage.internalBinaryWrite(message.maleSpeakingImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.AudioSpeakingImageList.SpeakingImage female_speaking_image = 2; */
        if (message.femaleSpeakingImage)
            AudioSpeakingImageList_SpeakingImage.internalBinaryWrite(message.femaleSpeakingImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.AudioSpeakingImageList.SpeakingImage unknown_speaking_image = 3; */
        if (message.unknownSpeakingImage)
            AudioSpeakingImageList_SpeakingImage.internalBinaryWrite(message.unknownSpeakingImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AudioSpeakingImageList
 */
export const AudioSpeakingImageList = new AudioSpeakingImageList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioSpeakingImageList_SpeakingImage$Type extends MessageType<AudioSpeakingImageList_SpeakingImage> {
    constructor() {
        super("data.AudioSpeakingImageList.SpeakingImage", [
            { no: 1, name: "speaking_low_image", kind: "message", T: () => Image },
            { no: 2, name: "speaking_default_image", kind: "message", T: () => Image },
            { no: 3, name: "speaking_high_image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<AudioSpeakingImageList_SpeakingImage>): AudioSpeakingImageList_SpeakingImage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioSpeakingImageList_SpeakingImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioSpeakingImageList_SpeakingImage): AudioSpeakingImageList_SpeakingImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image speaking_low_image */ 1:
                    message.speakingLowImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.speakingLowImage);
                    break;
                case /* data.Image speaking_default_image */ 2:
                    message.speakingDefaultImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.speakingDefaultImage);
                    break;
                case /* data.Image speaking_high_image */ 3:
                    message.speakingHighImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.speakingHighImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioSpeakingImageList_SpeakingImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image speaking_low_image = 1; */
        if (message.speakingLowImage)
            Image.internalBinaryWrite(message.speakingLowImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image speaking_default_image = 2; */
        if (message.speakingDefaultImage)
            Image.internalBinaryWrite(message.speakingDefaultImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image speaking_high_image = 3; */
        if (message.speakingHighImage)
            Image.internalBinaryWrite(message.speakingHighImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AudioSpeakingImageList.SpeakingImage
 */
export const AudioSpeakingImageList_SpeakingImage = new AudioSpeakingImageList_SpeakingImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowArea$Type extends MessageType<ShowArea> {
    constructor() {
        super("data.ShowArea", [
            { no: 1, name: "x", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "y", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "h", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "w", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ShowArea>): ShowArea {
        const message = { x: 0n, y: 0n, h: 0n, w: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowArea>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowArea): ShowArea {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 x */ 1:
                    message.x = reader.int64().toBigInt();
                    break;
                case /* int64 y */ 2:
                    message.y = reader.int64().toBigInt();
                    break;
                case /* int64 h */ 3:
                    message.h = reader.int64().toBigInt();
                    break;
                case /* int64 w */ 4:
                    message.w = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowArea, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 x = 1; */
        if (message.x !== 0n)
            writer.tag(1, WireType.Varint).int64(message.x);
        /* int64 y = 2; */
        if (message.y !== 0n)
            writer.tag(2, WireType.Varint).int64(message.y);
        /* int64 h = 3; */
        if (message.h !== 0n)
            writer.tag(3, WireType.Varint).int64(message.h);
        /* int64 w = 4; */
        if (message.w !== 0n)
            writer.tag(4, WireType.Varint).int64(message.w);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShowArea
 */
export const ShowArea = new ShowArea$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnimatedBgInfo$Type extends MessageType<AnimatedBgInfo> {
    constructor() {
        super("data.AnimatedBgInfo", [
            { no: 1, name: "showArea", kind: "message", T: () => ShowArea },
            { no: 2, name: "fileFormat", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "animatedBg", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<AnimatedBgInfo>): AnimatedBgInfo {
        const message = { fileFormat: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnimatedBgInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnimatedBgInfo): AnimatedBgInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ShowArea showArea */ 1:
                    message.showArea = ShowArea.internalBinaryRead(reader, reader.uint32(), options, message.showArea);
                    break;
                case /* string fileFormat */ 2:
                    message.fileFormat = reader.string();
                    break;
                case /* data.Image animatedBg */ 3:
                    message.animatedBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.animatedBg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnimatedBgInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ShowArea showArea = 1; */
        if (message.showArea)
            ShowArea.internalBinaryWrite(message.showArea, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string fileFormat = 2; */
        if (message.fileFormat !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileFormat);
        /* data.Image animatedBg = 3; */
        if (message.animatedBg)
            Image.internalBinaryWrite(message.animatedBg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnimatedBgInfo
 */
export const AnimatedBgInfo = new AnimatedBgInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioBGData$Type extends MessageType<AudioBGData> {
    constructor() {
        super("data.AudioBGData", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "image_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "img_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "image", kind: "message", T: () => Image },
            { no: 5, name: "imageThumbnail", kind: "message", T: () => Image },
            { no: 6, name: "imageAnimatedBG", kind: "message", T: () => Image },
            { no: 7, name: "imageNormalAvatar", kind: "message", T: () => Image },
            { no: 8, name: "imageStartupAvatar", kind: "message", T: () => Image },
            { no: 9, name: "imageChatJoinIcon", kind: "message", T: () => Image },
            { no: 10, name: "imageStaticBG", kind: "message", T: () => Image },
            { no: 11, name: "speakingImageList", kind: "message", T: () => AudioSpeakingImageList },
            { no: 12, name: "status_color_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "public_screen_color_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "time_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "bg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "empty_start_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "empty_end_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "imageColdBG", kind: "message", T: () => Image },
            { no: 19, name: "micBGColorValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "iconMicNormals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 21, name: "iconMicLock", kind: "message", T: () => Image },
            { no: 22, name: "colorMicText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "colorMicLine", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "colorMicBG", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "themeLabel", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "bgStatus", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 27, name: "animateInfo", kind: "message", T: () => AnimatedBgInfo },
            { no: 28, name: "idStr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "play_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "theme_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 32, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "format_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 34, name: "speaking_image_v2", kind: "message", T: () => AudioSpeakingImageList }
        ]);
    }
    create(value?: PartialMessage<AudioBGData>): AudioBGData {
        const message = { id: 0n, imageUri: "", imgType: 0, statusColorValue: "", publicScreenColorValue: "", timeLimit: 0, bgType: 0, emptyStartColor: "", emptyEndColor: "", micBGColorValue: "", iconMicNormals: [], colorMicText: "", colorMicLine: "", colorMicBG: "", themeLabel: "", bgStatus: 0, idStr: "", playMode: 0, themeTag: "", startTime: 0n, endTime: 0n, formatType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioBGData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioBGData): AudioBGData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string image_uri */ 2:
                    message.imageUri = reader.string();
                    break;
                case /* int32 img_type */ 3:
                    message.imgType = reader.int32();
                    break;
                case /* data.Image image */ 4:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* data.Image imageThumbnail */ 5:
                    message.imageThumbnail = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageThumbnail);
                    break;
                case /* data.Image imageAnimatedBG */ 6:
                    message.imageAnimatedBG = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageAnimatedBG);
                    break;
                case /* data.Image imageNormalAvatar */ 7:
                    message.imageNormalAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageNormalAvatar);
                    break;
                case /* data.Image imageStartupAvatar */ 8:
                    message.imageStartupAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageStartupAvatar);
                    break;
                case /* data.Image imageChatJoinIcon */ 9:
                    message.imageChatJoinIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageChatJoinIcon);
                    break;
                case /* data.Image imageStaticBG */ 10:
                    message.imageStaticBG = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageStaticBG);
                    break;
                case /* data.AudioSpeakingImageList speakingImageList */ 11:
                    message.speakingImageList = AudioSpeakingImageList.internalBinaryRead(reader, reader.uint32(), options, message.speakingImageList);
                    break;
                case /* string status_color_value */ 12:
                    message.statusColorValue = reader.string();
                    break;
                case /* string public_screen_color_value */ 13:
                    message.publicScreenColorValue = reader.string();
                    break;
                case /* int32 time_limit */ 14:
                    message.timeLimit = reader.int32();
                    break;
                case /* int32 bg_type */ 15:
                    message.bgType = reader.int32();
                    break;
                case /* string empty_start_color */ 16:
                    message.emptyStartColor = reader.string();
                    break;
                case /* string empty_end_color */ 17:
                    message.emptyEndColor = reader.string();
                    break;
                case /* data.Image imageColdBG */ 18:
                    message.imageColdBG = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageColdBG);
                    break;
                case /* string micBGColorValue */ 19:
                    message.micBGColorValue = reader.string();
                    break;
                case /* repeated data.Image iconMicNormals */ 20:
                    message.iconMicNormals.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image iconMicLock */ 21:
                    message.iconMicLock = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconMicLock);
                    break;
                case /* string colorMicText */ 22:
                    message.colorMicText = reader.string();
                    break;
                case /* string colorMicLine */ 23:
                    message.colorMicLine = reader.string();
                    break;
                case /* string colorMicBG */ 24:
                    message.colorMicBG = reader.string();
                    break;
                case /* string themeLabel */ 25:
                    message.themeLabel = reader.string();
                    break;
                case /* int32 bgStatus */ 26:
                    message.bgStatus = reader.int32();
                    break;
                case /* data.AnimatedBgInfo animateInfo */ 27:
                    message.animateInfo = AnimatedBgInfo.internalBinaryRead(reader, reader.uint32(), options, message.animateInfo);
                    break;
                case /* string idStr */ 28:
                    message.idStr = reader.string();
                    break;
                case /* int32 play_mode */ 29:
                    message.playMode = reader.int32();
                    break;
                case /* string theme_tag */ 30:
                    message.themeTag = reader.string();
                    break;
                case /* int64 start_time */ 31:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 32:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 format_type */ 33:
                    message.formatType = reader.int32();
                    break;
                case /* data.AudioSpeakingImageList speaking_image_v2 */ 34:
                    message.speakingImageV2 = AudioSpeakingImageList.internalBinaryRead(reader, reader.uint32(), options, message.speakingImageV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioBGData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string image_uri = 2; */
        if (message.imageUri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageUri);
        /* int32 img_type = 3; */
        if (message.imgType !== 0)
            writer.tag(3, WireType.Varint).int32(message.imgType);
        /* data.Image image = 4; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image imageThumbnail = 5; */
        if (message.imageThumbnail)
            Image.internalBinaryWrite(message.imageThumbnail, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image imageAnimatedBG = 6; */
        if (message.imageAnimatedBG)
            Image.internalBinaryWrite(message.imageAnimatedBG, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image imageNormalAvatar = 7; */
        if (message.imageNormalAvatar)
            Image.internalBinaryWrite(message.imageNormalAvatar, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Image imageStartupAvatar = 8; */
        if (message.imageStartupAvatar)
            Image.internalBinaryWrite(message.imageStartupAvatar, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image imageChatJoinIcon = 9; */
        if (message.imageChatJoinIcon)
            Image.internalBinaryWrite(message.imageChatJoinIcon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image imageStaticBG = 10; */
        if (message.imageStaticBG)
            Image.internalBinaryWrite(message.imageStaticBG, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.AudioSpeakingImageList speakingImageList = 11; */
        if (message.speakingImageList)
            AudioSpeakingImageList.internalBinaryWrite(message.speakingImageList, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string status_color_value = 12; */
        if (message.statusColorValue !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.statusColorValue);
        /* string public_screen_color_value = 13; */
        if (message.publicScreenColorValue !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.publicScreenColorValue);
        /* int32 time_limit = 14; */
        if (message.timeLimit !== 0)
            writer.tag(14, WireType.Varint).int32(message.timeLimit);
        /* int32 bg_type = 15; */
        if (message.bgType !== 0)
            writer.tag(15, WireType.Varint).int32(message.bgType);
        /* string empty_start_color = 16; */
        if (message.emptyStartColor !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.emptyStartColor);
        /* string empty_end_color = 17; */
        if (message.emptyEndColor !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.emptyEndColor);
        /* data.Image imageColdBG = 18; */
        if (message.imageColdBG)
            Image.internalBinaryWrite(message.imageColdBG, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* string micBGColorValue = 19; */
        if (message.micBGColorValue !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.micBGColorValue);
        /* repeated data.Image iconMicNormals = 20; */
        for (let i = 0; i < message.iconMicNormals.length; i++)
            Image.internalBinaryWrite(message.iconMicNormals[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* data.Image iconMicLock = 21; */
        if (message.iconMicLock)
            Image.internalBinaryWrite(message.iconMicLock, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* string colorMicText = 22; */
        if (message.colorMicText !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.colorMicText);
        /* string colorMicLine = 23; */
        if (message.colorMicLine !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.colorMicLine);
        /* string colorMicBG = 24; */
        if (message.colorMicBG !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.colorMicBG);
        /* string themeLabel = 25; */
        if (message.themeLabel !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.themeLabel);
        /* int32 bgStatus = 26; */
        if (message.bgStatus !== 0)
            writer.tag(26, WireType.Varint).int32(message.bgStatus);
        /* data.AnimatedBgInfo animateInfo = 27; */
        if (message.animateInfo)
            AnimatedBgInfo.internalBinaryWrite(message.animateInfo, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* string idStr = 28; */
        if (message.idStr !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.idStr);
        /* int32 play_mode = 29; */
        if (message.playMode !== 0)
            writer.tag(29, WireType.Varint).int32(message.playMode);
        /* string theme_tag = 30; */
        if (message.themeTag !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.themeTag);
        /* int64 start_time = 31; */
        if (message.startTime !== 0n)
            writer.tag(31, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 32; */
        if (message.endTime !== 0n)
            writer.tag(32, WireType.Varint).int64(message.endTime);
        /* int32 format_type = 33; */
        if (message.formatType !== 0)
            writer.tag(33, WireType.Varint).int32(message.formatType);
        /* data.AudioSpeakingImageList speaking_image_v2 = 34; */
        if (message.speakingImageV2)
            AudioSpeakingImageList.internalBinaryWrite(message.speakingImageV2, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AudioBGData
 */
export const AudioBGData = new AudioBGData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomReplayInfo$Type extends MessageType<RoomReplayInfo> {
    constructor() {
        super("data.RoomReplayInfo", [
            { no: 1, name: "replay_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "replay_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_uniq_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomReplayInfo>): RoomReplayInfo {
        const message = { replayDuration: 0n, replayUrl: "", contentUniqId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomReplayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomReplayInfo): RoomReplayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 replay_duration */ 1:
                    message.replayDuration = reader.int64().toBigInt();
                    break;
                case /* string replay_url */ 2:
                    message.replayUrl = reader.string();
                    break;
                case /* string content_uniq_id */ 3:
                    message.contentUniqId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomReplayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 replay_duration = 1; */
        if (message.replayDuration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.replayDuration);
        /* string replay_url = 2; */
        if (message.replayUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.replayUrl);
        /* string content_uniq_id = 3; */
        if (message.contentUniqId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentUniqId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomReplayInfo
 */
export const RoomReplayInfo = new RoomReplayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentWallInfo$Type extends MessageType<CommentWallInfo> {
    constructor() {
        super("data.CommentWallInfo", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "comment_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "commenter_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "commenter_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "event_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "msg_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "countdown_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "operator_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "operator_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommentWallInfo>): CommentWallInfo {
        const message = { content: "", id: 0n, commentMsgId: 0n, commenterId: 0n, commenterNickname: "", eventTime: 0n, msgTime: 0n, endTime: 0n, countdownStyle: 0, operatorId: 0n, operatorNickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentWallInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentWallInfo): CommentWallInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 comment_msg_id */ 3:
                    message.commentMsgId = reader.int64().toBigInt();
                    break;
                case /* int64 commenter_id */ 4:
                    message.commenterId = reader.int64().toBigInt();
                    break;
                case /* string commenter_nickname */ 5:
                    message.commenterNickname = reader.string();
                    break;
                case /* int64 event_time */ 6:
                    message.eventTime = reader.int64().toBigInt();
                    break;
                case /* int64 msg_time */ 7:
                    message.msgTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 8:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 countdown_style */ 9:
                    message.countdownStyle = reader.int32();
                    break;
                case /* int64 operator_id */ 10:
                    message.operatorId = reader.int64().toBigInt();
                    break;
                case /* string operator_nickname */ 11:
                    message.operatorNickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentWallInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* int64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* int64 comment_msg_id = 3; */
        if (message.commentMsgId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.commentMsgId);
        /* int64 commenter_id = 4; */
        if (message.commenterId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.commenterId);
        /* string commenter_nickname = 5; */
        if (message.commenterNickname !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.commenterNickname);
        /* int64 event_time = 6; */
        if (message.eventTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.eventTime);
        /* int64 msg_time = 7; */
        if (message.msgTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.msgTime);
        /* int64 end_time = 8; */
        if (message.endTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.endTime);
        /* int32 countdown_style = 9; */
        if (message.countdownStyle !== 0)
            writer.tag(9, WireType.Varint).int32(message.countdownStyle);
        /* int64 operator_id = 10; */
        if (message.operatorId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.operatorId);
        /* string operator_nickname = 11; */
        if (message.operatorNickname !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.operatorNickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentWallInfo
 */
export const CommentWallInfo = new CommentWallInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentWallPosition$Type extends MessageType<CommentWallPosition> {
    constructor() {
        super("data.CommentWallPosition", [
            { no: 1, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "event_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CommentWallPosition>): CommentWallPosition {
        const message = { x: 0, y: 0, eventTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentWallPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentWallPosition): CommentWallPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double x */ 1:
                    message.x = reader.double();
                    break;
                case /* double y */ 2:
                    message.y = reader.double();
                    break;
                case /* int64 event_time */ 3:
                    message.eventTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentWallPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit64).double(message.x);
        /* double y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit64).double(message.y);
        /* int64 event_time = 3; */
        if (message.eventTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.eventTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CommentWallPosition
 */
export const CommentWallPosition = new CommentWallPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnnouncementInfo$Type extends MessageType<AnnouncementInfo> {
    constructor() {
        super("data.AnnouncementInfo", [
            { no: 1, name: "scheduled_time_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "subscribed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "appointment_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "scheduled_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "scheduled_date", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "scheduled_weekdays", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AnnouncementInfo>): AnnouncementInfo {
        const message = { scheduledTimeText: "", content: "", subscribed: false, appointmentId: 0n, scheduledTime: 0, scheduledDate: 0, scheduledWeekdays: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnnouncementInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnouncementInfo): AnnouncementInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scheduled_time_text */ 1:
                    message.scheduledTimeText = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* bool subscribed */ 3:
                    message.subscribed = reader.bool();
                    break;
                case /* int64 appointment_id */ 4:
                    message.appointmentId = reader.int64().toBigInt();
                    break;
                case /* int32 scheduled_time */ 5:
                    message.scheduledTime = reader.int32();
                    break;
                case /* int32 scheduled_date */ 6:
                    message.scheduledDate = reader.int32();
                    break;
                case /* repeated int32 scheduled_weekdays */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.scheduledWeekdays.push(reader.int32());
                    else
                        message.scheduledWeekdays.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnouncementInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scheduled_time_text = 1; */
        if (message.scheduledTimeText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scheduledTimeText);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* bool subscribed = 3; */
        if (message.subscribed !== false)
            writer.tag(3, WireType.Varint).bool(message.subscribed);
        /* int64 appointment_id = 4; */
        if (message.appointmentId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.appointmentId);
        /* int32 scheduled_time = 5; */
        if (message.scheduledTime !== 0)
            writer.tag(5, WireType.Varint).int32(message.scheduledTime);
        /* int32 scheduled_date = 6; */
        if (message.scheduledDate !== 0)
            writer.tag(6, WireType.Varint).int32(message.scheduledDate);
        /* repeated int32 scheduled_weekdays = 7; */
        if (message.scheduledWeekdays.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.scheduledWeekdays.length; i++)
                writer.int32(message.scheduledWeekdays[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnnouncementInfo
 */
export const AnnouncementInfo = new AnnouncementInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomIMInfo$Type extends MessageType<RoomIMInfo> {
    constructor() {
        super("data.RoomIMInfo", [
            { no: 1, name: "welcome_messages", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "room_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hide_gift_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomIMInfo>): RoomIMInfo {
        const message = { welcomeMessages: [], roomTag: "", hideGiftMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomIMInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomIMInfo): RoomIMInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string welcome_messages */ 1:
                    message.welcomeMessages.push(reader.string());
                    break;
                case /* string room_tag */ 2:
                    message.roomTag = reader.string();
                    break;
                case /* string hide_gift_message */ 3:
                    message.hideGiftMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomIMInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string welcome_messages = 1; */
        for (let i = 0; i < message.welcomeMessages.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.welcomeMessages[i]);
        /* string room_tag = 2; */
        if (message.roomTag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomTag);
        /* string hide_gift_message = 3; */
        if (message.hideGiftMessage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.hideGiftMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomIMInfo
 */
export const RoomIMInfo = new RoomIMInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PropsBGData$Type extends MessageType<PropsBGData> {
    constructor() {
        super("data.PropsBGData", [
            { no: 1, name: "image_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "img_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "image", kind: "message", T: () => Image },
            { no: 4, name: "imageThumbnail", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<PropsBGData>): PropsBGData {
        const message = { imageUri: "", imgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropsBGData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropsBGData): PropsBGData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image_uri */ 1:
                    message.imageUri = reader.string();
                    break;
                case /* int32 img_type */ 2:
                    message.imgType = reader.int32();
                    break;
                case /* data.Image image */ 3:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* data.Image imageThumbnail */ 4:
                    message.imageThumbnail = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageThumbnail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropsBGData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image_uri = 1; */
        if (message.imageUri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imageUri);
        /* int32 img_type = 2; */
        if (message.imgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.imgType);
        /* data.Image image = 3; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image imageThumbnail = 4; */
        if (message.imageThumbnail)
            Image.internalBinaryWrite(message.imageThumbnail, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PropsBGData
 */
export const PropsBGData = new PropsBGData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerDetail$Type extends MessageType<LinkerDetail> {
    constructor() {
        super("data.LinkerDetail", [
            { no: 1, name: "linker_play_modes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "big_party_layout_config_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "accept_audience_pre_apply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "linker_ui_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "enable_audience_linkmic", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "function_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ktv_lyric_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "init_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "forbid_apply_from_other", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "ktv_exhibit_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "enlarge_guest_turn_on_source", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerDetail>): LinkerDetail {
        const message = { linkerPlayModes: [], bigPartyLayoutConfigVersion: 0, acceptAudiencePreApply: false, linkerUiLayout: 0n, enableAudienceLinkmic: 0, functionType: "", ktvLyricMode: "", initSource: "", forbidApplyFromOther: false, ktvExhibitMode: 0, enlargeGuestTurnOnSource: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerDetail): LinkerDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 linker_play_modes */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.linkerPlayModes.push(reader.int64().toBigInt());
                    else
                        message.linkerPlayModes.push(reader.int64().toBigInt());
                    break;
                case /* int32 big_party_layout_config_version */ 2:
                    message.bigPartyLayoutConfigVersion = reader.int32();
                    break;
                case /* bool accept_audience_pre_apply */ 3:
                    message.acceptAudiencePreApply = reader.bool();
                    break;
                case /* int64 linker_ui_layout */ 4:
                    message.linkerUiLayout = reader.int64().toBigInt();
                    break;
                case /* int32 enable_audience_linkmic */ 5:
                    message.enableAudienceLinkmic = reader.int32();
                    break;
                case /* string function_type */ 6:
                    message.functionType = reader.string();
                    break;
                case /* string ktv_lyric_mode */ 8:
                    message.ktvLyricMode = reader.string();
                    break;
                case /* string init_source */ 9:
                    message.initSource = reader.string();
                    break;
                case /* bool forbid_apply_from_other */ 10:
                    message.forbidApplyFromOther = reader.bool();
                    break;
                case /* int32 ktv_exhibit_mode */ 11:
                    message.ktvExhibitMode = reader.int32();
                    break;
                case /* int64 enlarge_guest_turn_on_source */ 12:
                    message.enlargeGuestTurnOnSource = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 linker_play_modes = 1; */
        if (message.linkerPlayModes.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.linkerPlayModes.length; i++)
                writer.int64(message.linkerPlayModes[i]);
            writer.join();
        }
        /* int32 big_party_layout_config_version = 2; */
        if (message.bigPartyLayoutConfigVersion !== 0)
            writer.tag(2, WireType.Varint).int32(message.bigPartyLayoutConfigVersion);
        /* bool accept_audience_pre_apply = 3; */
        if (message.acceptAudiencePreApply !== false)
            writer.tag(3, WireType.Varint).bool(message.acceptAudiencePreApply);
        /* int64 linker_ui_layout = 4; */
        if (message.linkerUiLayout !== 0n)
            writer.tag(4, WireType.Varint).int64(message.linkerUiLayout);
        /* int32 enable_audience_linkmic = 5; */
        if (message.enableAudienceLinkmic !== 0)
            writer.tag(5, WireType.Varint).int32(message.enableAudienceLinkmic);
        /* string function_type = 6; */
        if (message.functionType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.functionType);
        /* string ktv_lyric_mode = 8; */
        if (message.ktvLyricMode !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.ktvLyricMode);
        /* string init_source = 9; */
        if (message.initSource !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.initSource);
        /* bool forbid_apply_from_other = 10; */
        if (message.forbidApplyFromOther !== false)
            writer.tag(10, WireType.Varint).bool(message.forbidApplyFromOther);
        /* int32 ktv_exhibit_mode = 11; */
        if (message.ktvExhibitMode !== 0)
            writer.tag(11, WireType.Varint).int32(message.ktvExhibitMode);
        /* int64 enlarge_guest_turn_on_source = 12; */
        if (message.enlargeGuestTurnOnSource !== 0n)
            writer.tag(12, WireType.Varint).int64(message.enlargeGuestTurnOnSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkerDetail
 */
export const LinkerDetail = new LinkerDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData$Type extends MessageType<PreviewExposeData> {
    constructor() {
        super("data.PreviewExposeData", [
            { no: 1, name: "style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "preview_guide", kind: "message", T: () => PreviewExposeData_PreviewGuide },
            { no: 3, name: "metas", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExposeData_Meta },
            { no: 4, name: "chat_msgs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExposeData_ChatMessage },
            { no: 5, name: "force_insertion", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExposeData_Meta },
            { no: 6, name: "scroll_after_ms", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "need_realtime", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "message_scroll_after_ms", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "message_scroll_interval_ms", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "preview_intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "preview_extend_area", kind: "message", T: () => PreviewExposeData_PreviewExtendArea },
            { no: 12, name: "show_uv_pv", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "show_name_abbreviation", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "switch", kind: "message", T: () => PreviewExposeData_PreviewSwitch },
            { no: 15, name: "is_preview_use_websocket", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "is_aweme_video_feed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "show_preview_cards", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "preview_promotion", kind: "message", T: () => PreviewExposeData_PreviewPromotion },
            { no: 19, name: "preview_im_extend", kind: "message", T: () => PreviewExposeData_PreviewIMExtend },
            { no: 20, name: "et_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExposeData_EtData },
            { no: 21, name: "alive_checker", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "enter_public_area_animation", kind: "message", T: () => EnterPublicAreaAnimation }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData>): PreviewExposeData {
        const message = { style: 0, metas: [], chatMsgs: [], forceInsertion: [], scrollAfterMs: 0, needRealtime: false, messageScrollAfterMs: 0, messageScrollIntervalMs: 0, previewIntro: "", showUvPv: 0, showNameAbbreviation: 0, isPreviewUseWebsocket: 0, isAwemeVideoFeed: false, showPreviewCards: false, etData: [], aliveChecker: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData): PreviewExposeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 style */ 1:
                    message.style = reader.int32();
                    break;
                case /* data.PreviewExposeData.PreviewGuide preview_guide */ 2:
                    message.previewGuide = PreviewExposeData_PreviewGuide.internalBinaryRead(reader, reader.uint32(), options, message.previewGuide);
                    break;
                case /* repeated data.PreviewExposeData.Meta metas */ 3:
                    message.metas.push(PreviewExposeData_Meta.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.PreviewExposeData.ChatMessage chat_msgs */ 4:
                    message.chatMsgs.push(PreviewExposeData_ChatMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.PreviewExposeData.Meta force_insertion */ 5:
                    message.forceInsertion.push(PreviewExposeData_Meta.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 scroll_after_ms */ 6:
                    message.scrollAfterMs = reader.int32();
                    break;
                case /* bool need_realtime */ 7:
                    message.needRealtime = reader.bool();
                    break;
                case /* int32 message_scroll_after_ms */ 8:
                    message.messageScrollAfterMs = reader.int32();
                    break;
                case /* int32 message_scroll_interval_ms */ 9:
                    message.messageScrollIntervalMs = reader.int32();
                    break;
                case /* string preview_intro */ 10:
                    message.previewIntro = reader.string();
                    break;
                case /* data.PreviewExposeData.PreviewExtendArea preview_extend_area */ 11:
                    message.previewExtendArea = PreviewExposeData_PreviewExtendArea.internalBinaryRead(reader, reader.uint32(), options, message.previewExtendArea);
                    break;
                case /* int32 show_uv_pv */ 12:
                    message.showUvPv = reader.int32();
                    break;
                case /* int32 show_name_abbreviation */ 13:
                    message.showNameAbbreviation = reader.int32();
                    break;
                case /* data.PreviewExposeData.PreviewSwitch switch */ 14:
                    message.switch = PreviewExposeData_PreviewSwitch.internalBinaryRead(reader, reader.uint32(), options, message.switch);
                    break;
                case /* int32 is_preview_use_websocket */ 15:
                    message.isPreviewUseWebsocket = reader.int32();
                    break;
                case /* bool is_aweme_video_feed */ 16:
                    message.isAwemeVideoFeed = reader.bool();
                    break;
                case /* bool show_preview_cards */ 17:
                    message.showPreviewCards = reader.bool();
                    break;
                case /* data.PreviewExposeData.PreviewPromotion preview_promotion */ 18:
                    message.previewPromotion = PreviewExposeData_PreviewPromotion.internalBinaryRead(reader, reader.uint32(), options, message.previewPromotion);
                    break;
                case /* data.PreviewExposeData.PreviewIMExtend preview_im_extend */ 19:
                    message.previewImExtend = PreviewExposeData_PreviewIMExtend.internalBinaryRead(reader, reader.uint32(), options, message.previewImExtend);
                    break;
                case /* repeated data.PreviewExposeData.EtData et_data */ 20:
                    message.etData.push(PreviewExposeData_EtData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 alive_checker */ 21:
                    message.aliveChecker = reader.int32();
                    break;
                case /* data.EnterPublicAreaAnimation enter_public_area_animation */ 22:
                    message.enterPublicAreaAnimation = EnterPublicAreaAnimation.internalBinaryRead(reader, reader.uint32(), options, message.enterPublicAreaAnimation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 style = 1; */
        if (message.style !== 0)
            writer.tag(1, WireType.Varint).int32(message.style);
        /* data.PreviewExposeData.PreviewGuide preview_guide = 2; */
        if (message.previewGuide)
            PreviewExposeData_PreviewGuide.internalBinaryWrite(message.previewGuide, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PreviewExposeData.Meta metas = 3; */
        for (let i = 0; i < message.metas.length; i++)
            PreviewExposeData_Meta.internalBinaryWrite(message.metas[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PreviewExposeData.ChatMessage chat_msgs = 4; */
        for (let i = 0; i < message.chatMsgs.length; i++)
            PreviewExposeData_ChatMessage.internalBinaryWrite(message.chatMsgs[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PreviewExposeData.Meta force_insertion = 5; */
        for (let i = 0; i < message.forceInsertion.length; i++)
            PreviewExposeData_Meta.internalBinaryWrite(message.forceInsertion[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 scroll_after_ms = 6; */
        if (message.scrollAfterMs !== 0)
            writer.tag(6, WireType.Varint).int32(message.scrollAfterMs);
        /* bool need_realtime = 7; */
        if (message.needRealtime !== false)
            writer.tag(7, WireType.Varint).bool(message.needRealtime);
        /* int32 message_scroll_after_ms = 8; */
        if (message.messageScrollAfterMs !== 0)
            writer.tag(8, WireType.Varint).int32(message.messageScrollAfterMs);
        /* int32 message_scroll_interval_ms = 9; */
        if (message.messageScrollIntervalMs !== 0)
            writer.tag(9, WireType.Varint).int32(message.messageScrollIntervalMs);
        /* string preview_intro = 10; */
        if (message.previewIntro !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.previewIntro);
        /* data.PreviewExposeData.PreviewExtendArea preview_extend_area = 11; */
        if (message.previewExtendArea)
            PreviewExposeData_PreviewExtendArea.internalBinaryWrite(message.previewExtendArea, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int32 show_uv_pv = 12; */
        if (message.showUvPv !== 0)
            writer.tag(12, WireType.Varint).int32(message.showUvPv);
        /* int32 show_name_abbreviation = 13; */
        if (message.showNameAbbreviation !== 0)
            writer.tag(13, WireType.Varint).int32(message.showNameAbbreviation);
        /* data.PreviewExposeData.PreviewSwitch switch = 14; */
        if (message.switch)
            PreviewExposeData_PreviewSwitch.internalBinaryWrite(message.switch, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int32 is_preview_use_websocket = 15; */
        if (message.isPreviewUseWebsocket !== 0)
            writer.tag(15, WireType.Varint).int32(message.isPreviewUseWebsocket);
        /* bool is_aweme_video_feed = 16; */
        if (message.isAwemeVideoFeed !== false)
            writer.tag(16, WireType.Varint).bool(message.isAwemeVideoFeed);
        /* bool show_preview_cards = 17; */
        if (message.showPreviewCards !== false)
            writer.tag(17, WireType.Varint).bool(message.showPreviewCards);
        /* data.PreviewExposeData.PreviewPromotion preview_promotion = 18; */
        if (message.previewPromotion)
            PreviewExposeData_PreviewPromotion.internalBinaryWrite(message.previewPromotion, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* data.PreviewExposeData.PreviewIMExtend preview_im_extend = 19; */
        if (message.previewImExtend)
            PreviewExposeData_PreviewIMExtend.internalBinaryWrite(message.previewImExtend, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PreviewExposeData.EtData et_data = 20; */
        for (let i = 0; i < message.etData.length; i++)
            PreviewExposeData_EtData.internalBinaryWrite(message.etData[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* int32 alive_checker = 21; */
        if (message.aliveChecker !== 0)
            writer.tag(21, WireType.Varint).int32(message.aliveChecker);
        /* data.EnterPublicAreaAnimation enter_public_area_animation = 22; */
        if (message.enterPublicAreaAnimation)
            EnterPublicAreaAnimation.internalBinaryWrite(message.enterPublicAreaAnimation, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData
 */
export const PreviewExposeData = new PreviewExposeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_PreviewGuide$Type extends MessageType<PreviewExposeData_PreviewGuide> {
    constructor() {
        super("data.PreviewExposeData.PreviewGuide", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "roll_tips", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "coupon_mate_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_tag_get_coin", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "live_mession_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "et_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_PreviewGuide>): PreviewExposeData_PreviewGuide {
        const message = { tip: "", type: 0n, rollTips: [], couponMateId: 0n, userTagGetCoin: 0n, liveMessionStyle: 0n, etType: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_PreviewGuide>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_PreviewGuide): PreviewExposeData_PreviewGuide {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string tip */ 2:
                    message.tip = reader.string();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* repeated string roll_tips */ 4:
                    message.rollTips.push(reader.string());
                    break;
                case /* int64 coupon_mate_id */ 5:
                    message.couponMateId = reader.int64().toBigInt();
                    break;
                case /* int64 user_tag_get_coin */ 6:
                    message.userTagGetCoin = reader.int64().toBigInt();
                    break;
                case /* int64 live_mession_style */ 7:
                    message.liveMessionStyle = reader.int64().toBigInt();
                    break;
                case /* string et_type */ 8:
                    message.etType = reader.string();
                    break;
                case /* string extra */ 9:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_PreviewGuide, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string tip = 2; */
        if (message.tip !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tip);
        /* int64 type = 3; */
        if (message.type !== 0n)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* repeated string roll_tips = 4; */
        for (let i = 0; i < message.rollTips.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.rollTips[i]);
        /* int64 coupon_mate_id = 5; */
        if (message.couponMateId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.couponMateId);
        /* int64 user_tag_get_coin = 6; */
        if (message.userTagGetCoin !== 0n)
            writer.tag(6, WireType.Varint).int64(message.userTagGetCoin);
        /* int64 live_mession_style = 7; */
        if (message.liveMessionStyle !== 0n)
            writer.tag(7, WireType.Varint).int64(message.liveMessionStyle);
        /* string et_type = 8; */
        if (message.etType !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.etType);
        /* string extra = 9; */
        if (message.extra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.PreviewGuide
 */
export const PreviewExposeData_PreviewGuide = new PreviewExposeData_PreviewGuide$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_Meta$Type extends MessageType<PreviewExposeData_Meta> {
    constructor() {
        super("data.PreviewExposeData.Meta", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "host", kind: "message", T: () => PreviewExposeData_Meta_Host },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_Meta>): PreviewExposeData_Meta {
        const message = { type: 0, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_Meta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_Meta): PreviewExposeData_Meta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* data.PreviewExposeData.Meta.Host host */ 2:
                    message.host = PreviewExposeData_Meta_Host.internalBinaryRead(reader, reader.uint32(), options, message.host);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_Meta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* data.PreviewExposeData.Meta.Host host = 2; */
        if (message.host)
            PreviewExposeData_Meta_Host.internalBinaryWrite(message.host, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.Meta
 */
export const PreviewExposeData_Meta = new PreviewExposeData_Meta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_Meta_Host$Type extends MessageType<PreviewExposeData_Meta_Host> {
    constructor() {
        super("data.PreviewExposeData.Meta.Host", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_Meta_Host>): PreviewExposeData_Meta_Host {
        const message = { tip: "", color: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_Meta_Host>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_Meta_Host): PreviewExposeData_Meta_Host {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string tip */ 2:
                    message.tip = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_Meta_Host, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string tip = 2; */
        if (message.tip !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tip);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.Meta.Host
 */
export const PreviewExposeData_Meta_Host = new PreviewExposeData_Meta_Host$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_ChatMessage$Type extends MessageType<PreviewExposeData_ChatMessage> {
    constructor() {
        super("data.PreviewExposeData.ChatMessage", [
            { no: 1, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nick_name_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_ChatMessage>): PreviewExposeData_ChatMessage {
        const message = { nickName: "", nickNameColor: "", content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_ChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_ChatMessage): PreviewExposeData_ChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nick_name */ 1:
                    message.nickName = reader.string();
                    break;
                case /* string nick_name_color */ 2:
                    message.nickNameColor = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_ChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nick_name = 1; */
        if (message.nickName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nickName);
        /* string nick_name_color = 2; */
        if (message.nickNameColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickNameColor);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.ChatMessage
 */
export const PreviewExposeData_ChatMessage = new PreviewExposeData_ChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_PreviewExtendArea$Type extends MessageType<PreviewExposeData_PreviewExtendArea> {
    constructor() {
        super("data.PreviewExposeData.PreviewExtendArea", [
            { no: 1, name: "extend_icon", kind: "message", T: () => Image },
            { no: 2, name: "extend_pre_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extend_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extend_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "use_marquee", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "icon_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "right_part", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExposeData_PreviewExtendArea_Part },
            { no: 9, name: "button_part", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "mid_part", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExposeData_PreviewExtendArea_Part },
            { no: 11, name: "need_delimiter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "bottom_part", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExposeData_PreviewExtendArea_Part },
            { no: 13, name: "ui_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "action_cfg", kind: "message", T: () => PreviewExposeData_PreviewExtendArea_ActionConfig },
            { no: 18, name: "use_pass_through_extra_json", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "pass_through_extra_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "extra_business", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "no_need_poll", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "clickable_area", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_PreviewExtendArea>): PreviewExposeData_PreviewExtendArea {
        const message = { extendPreText: "", extendText: "", extendType: 0, extra: "", useMarquee: 0, iconType: 0, rightPart: [], buttonPart: "", midPart: [], needDelimiter: false, bottomPart: [], uiType: 0, version: 0, usePassThroughExtraJson: false, passThroughExtraJson: "", extraBusiness: "", noNeedPoll: false, clickableArea: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_PreviewExtendArea>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_PreviewExtendArea): PreviewExposeData_PreviewExtendArea {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image extend_icon */ 1:
                    message.extendIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.extendIcon);
                    break;
                case /* string extend_pre_text */ 2:
                    message.extendPreText = reader.string();
                    break;
                case /* string extend_text */ 3:
                    message.extendText = reader.string();
                    break;
                case /* int32 extend_type */ 4:
                    message.extendType = reader.int32();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                case /* int32 use_marquee */ 6:
                    message.useMarquee = reader.int32();
                    break;
                case /* int32 icon_type */ 7:
                    message.iconType = reader.int32();
                    break;
                case /* repeated data.PreviewExposeData.PreviewExtendArea.Part right_part */ 8:
                    message.rightPart.push(PreviewExposeData_PreviewExtendArea_Part.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string button_part */ 9:
                    message.buttonPart = reader.string();
                    break;
                case /* repeated data.PreviewExposeData.PreviewExtendArea.Part mid_part */ 10:
                    message.midPart.push(PreviewExposeData_PreviewExtendArea_Part.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool need_delimiter */ 11:
                    message.needDelimiter = reader.bool();
                    break;
                case /* repeated data.PreviewExposeData.PreviewExtendArea.Part bottom_part */ 12:
                    message.bottomPart.push(PreviewExposeData_PreviewExtendArea_Part.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 ui_type */ 13:
                    message.uiType = reader.int32();
                    break;
                case /* int32 version */ 14:
                    message.version = reader.int32();
                    break;
                case /* data.PreviewExposeData.PreviewExtendArea.ActionConfig action_cfg */ 17:
                    message.actionCfg = PreviewExposeData_PreviewExtendArea_ActionConfig.internalBinaryRead(reader, reader.uint32(), options, message.actionCfg);
                    break;
                case /* bool use_pass_through_extra_json */ 18:
                    message.usePassThroughExtraJson = reader.bool();
                    break;
                case /* string pass_through_extra_json */ 19:
                    message.passThroughExtraJson = reader.string();
                    break;
                case /* string extra_business */ 21:
                    message.extraBusiness = reader.string();
                    break;
                case /* bool no_need_poll */ 22:
                    message.noNeedPoll = reader.bool();
                    break;
                case /* int32 clickable_area */ 24:
                    message.clickableArea = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_PreviewExtendArea, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image extend_icon = 1; */
        if (message.extendIcon)
            Image.internalBinaryWrite(message.extendIcon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extend_pre_text = 2; */
        if (message.extendPreText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extendPreText);
        /* string extend_text = 3; */
        if (message.extendText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extendText);
        /* int32 extend_type = 4; */
        if (message.extendType !== 0)
            writer.tag(4, WireType.Varint).int32(message.extendType);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        /* int32 use_marquee = 6; */
        if (message.useMarquee !== 0)
            writer.tag(6, WireType.Varint).int32(message.useMarquee);
        /* int32 icon_type = 7; */
        if (message.iconType !== 0)
            writer.tag(7, WireType.Varint).int32(message.iconType);
        /* repeated data.PreviewExposeData.PreviewExtendArea.Part right_part = 8; */
        for (let i = 0; i < message.rightPart.length; i++)
            PreviewExposeData_PreviewExtendArea_Part.internalBinaryWrite(message.rightPart[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string button_part = 9; */
        if (message.buttonPart !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.buttonPart);
        /* repeated data.PreviewExposeData.PreviewExtendArea.Part mid_part = 10; */
        for (let i = 0; i < message.midPart.length; i++)
            PreviewExposeData_PreviewExtendArea_Part.internalBinaryWrite(message.midPart[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bool need_delimiter = 11; */
        if (message.needDelimiter !== false)
            writer.tag(11, WireType.Varint).bool(message.needDelimiter);
        /* repeated data.PreviewExposeData.PreviewExtendArea.Part bottom_part = 12; */
        for (let i = 0; i < message.bottomPart.length; i++)
            PreviewExposeData_PreviewExtendArea_Part.internalBinaryWrite(message.bottomPart[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 ui_type = 13; */
        if (message.uiType !== 0)
            writer.tag(13, WireType.Varint).int32(message.uiType);
        /* int32 version = 14; */
        if (message.version !== 0)
            writer.tag(14, WireType.Varint).int32(message.version);
        /* data.PreviewExposeData.PreviewExtendArea.ActionConfig action_cfg = 17; */
        if (message.actionCfg)
            PreviewExposeData_PreviewExtendArea_ActionConfig.internalBinaryWrite(message.actionCfg, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* bool use_pass_through_extra_json = 18; */
        if (message.usePassThroughExtraJson !== false)
            writer.tag(18, WireType.Varint).bool(message.usePassThroughExtraJson);
        /* string pass_through_extra_json = 19; */
        if (message.passThroughExtraJson !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.passThroughExtraJson);
        /* string extra_business = 21; */
        if (message.extraBusiness !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.extraBusiness);
        /* bool no_need_poll = 22; */
        if (message.noNeedPoll !== false)
            writer.tag(22, WireType.Varint).bool(message.noNeedPoll);
        /* int32 clickable_area = 24; */
        if (message.clickableArea !== 0)
            writer.tag(24, WireType.Varint).int32(message.clickableArea);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.PreviewExtendArea
 */
export const PreviewExposeData_PreviewExtendArea = new PreviewExposeData_PreviewExtendArea$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_PreviewExtendArea_Part$Type extends MessageType<PreviewExposeData_PreviewExtendArea_Part> {
    constructor() {
        super("data.PreviewExposeData.PreviewExtendArea.Part", [
            { no: 1, name: "fontSize", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "interval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cuttable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bold", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "part_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_PreviewExtendArea_Part>): PreviewExposeData_PreviewExtendArea_Part {
        const message = { fontSize: 0, interval: 0, text: "", cuttable: false, deleted: false, fontColor: "", bold: false, partType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_PreviewExtendArea_Part>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_PreviewExtendArea_Part): PreviewExposeData_PreviewExtendArea_Part {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 fontSize */ 1:
                    message.fontSize = reader.int32();
                    break;
                case /* int32 interval */ 2:
                    message.interval = reader.int32();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* bool cuttable */ 4:
                    message.cuttable = reader.bool();
                    break;
                case /* bool deleted */ 5:
                    message.deleted = reader.bool();
                    break;
                case /* string font_color */ 6:
                    message.fontColor = reader.string();
                    break;
                case /* bool bold */ 7:
                    message.bold = reader.bool();
                    break;
                case /* int32 part_type */ 8:
                    message.partType = reader.int32();
                    break;
                case /* data.Image image */ 9:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_PreviewExtendArea_Part, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 fontSize = 1; */
        if (message.fontSize !== 0)
            writer.tag(1, WireType.Varint).int32(message.fontSize);
        /* int32 interval = 2; */
        if (message.interval !== 0)
            writer.tag(2, WireType.Varint).int32(message.interval);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* bool cuttable = 4; */
        if (message.cuttable !== false)
            writer.tag(4, WireType.Varint).bool(message.cuttable);
        /* bool deleted = 5; */
        if (message.deleted !== false)
            writer.tag(5, WireType.Varint).bool(message.deleted);
        /* string font_color = 6; */
        if (message.fontColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fontColor);
        /* bool bold = 7; */
        if (message.bold !== false)
            writer.tag(7, WireType.Varint).bool(message.bold);
        /* int32 part_type = 8; */
        if (message.partType !== 0)
            writer.tag(8, WireType.Varint).int32(message.partType);
        /* data.Image image = 9; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.PreviewExtendArea.Part
 */
export const PreviewExposeData_PreviewExtendArea_Part = new PreviewExposeData_PreviewExtendArea_Part$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_PreviewExtendArea_ActionConfig$Type extends MessageType<PreviewExposeData_PreviewExtendArea_ActionConfig> {
    constructor() {
        super("data.PreviewExposeData.PreviewExtendArea.ActionConfig", [
            { no: 1, name: "areaAction", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_PreviewExtendArea_ActionConfig>): PreviewExposeData_PreviewExtendArea_ActionConfig {
        const message = { areaAction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_PreviewExtendArea_ActionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_PreviewExtendArea_ActionConfig): PreviewExposeData_PreviewExtendArea_ActionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 areaAction */ 1:
                    message.areaAction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_PreviewExtendArea_ActionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 areaAction = 1; */
        if (message.areaAction !== 0)
            writer.tag(1, WireType.Varint).int32(message.areaAction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.PreviewExtendArea.ActionConfig
 */
export const PreviewExposeData_PreviewExtendArea_ActionConfig = new PreviewExposeData_PreviewExtendArea_ActionConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_PreviewSwitch$Type extends MessageType<PreviewExposeData_PreviewSwitch> {
    constructor() {
        super("data.PreviewExposeData.PreviewSwitch", [
            { no: 1, name: "title", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "preview_guide", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "dynamic_label", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "assist_label", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "extend_area", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_PreviewSwitch>): PreviewExposeData_PreviewSwitch {
        const message = { title: 0, previewGuide: 0, dynamicLabel: 0, assistLabel: 0, extendArea: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_PreviewSwitch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_PreviewSwitch): PreviewExposeData_PreviewSwitch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 title */ 1:
                    message.title = reader.int32();
                    break;
                case /* int32 preview_guide */ 2:
                    message.previewGuide = reader.int32();
                    break;
                case /* int32 dynamic_label */ 3:
                    message.dynamicLabel = reader.int32();
                    break;
                case /* int32 assist_label */ 4:
                    message.assistLabel = reader.int32();
                    break;
                case /* int32 extend_area */ 5:
                    message.extendArea = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_PreviewSwitch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 title = 1; */
        if (message.title !== 0)
            writer.tag(1, WireType.Varint).int32(message.title);
        /* int32 preview_guide = 2; */
        if (message.previewGuide !== 0)
            writer.tag(2, WireType.Varint).int32(message.previewGuide);
        /* int32 dynamic_label = 3; */
        if (message.dynamicLabel !== 0)
            writer.tag(3, WireType.Varint).int32(message.dynamicLabel);
        /* int32 assist_label = 4; */
        if (message.assistLabel !== 0)
            writer.tag(4, WireType.Varint).int32(message.assistLabel);
        /* int32 extend_area = 5; */
        if (message.extendArea !== 0)
            writer.tag(5, WireType.Varint).int32(message.extendArea);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.PreviewSwitch
 */
export const PreviewExposeData_PreviewSwitch = new PreviewExposeData_PreviewSwitch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_PreviewPromotion$Type extends MessageType<PreviewExposeData_PreviewPromotion> {
    constructor() {
        super("data.PreviewExposeData.PreviewPromotion", [
            { no: 1, name: "avatar_icons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fast_comments", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_PreviewPromotion>): PreviewExposeData_PreviewPromotion {
        const message = { avatarIcons: [], text: "", fastComments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_PreviewPromotion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_PreviewPromotion): PreviewExposeData_PreviewPromotion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.Image avatar_icons */ 1:
                    message.avatarIcons.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* repeated string fast_comments */ 3:
                    message.fastComments.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_PreviewPromotion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.Image avatar_icons = 1; */
        for (let i = 0; i < message.avatarIcons.length; i++)
            Image.internalBinaryWrite(message.avatarIcons[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* repeated string fast_comments = 3; */
        for (let i = 0; i < message.fastComments.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.fastComments[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.PreviewPromotion
 */
export const PreviewExposeData_PreviewPromotion = new PreviewExposeData_PreviewPromotion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_PreviewIMExtend$Type extends MessageType<PreviewExposeData_PreviewIMExtend> {
    constructor() {
        super("data.PreviewExposeData.PreviewIMExtend", [
            { no: 1, name: "im_extend_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "icon", kind: "message", T: () => Image },
            { no: 3, name: "main_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_PreviewIMExtend>): PreviewExposeData_PreviewIMExtend {
        const message = { imExtendType: 0n, mainTitle: "", subTitle: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_PreviewIMExtend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_PreviewIMExtend): PreviewExposeData_PreviewIMExtend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 im_extend_type */ 1:
                    message.imExtendType = reader.int64().toBigInt();
                    break;
                case /* data.Image icon */ 2:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string main_title */ 3:
                    message.mainTitle = reader.string();
                    break;
                case /* string sub_title */ 4:
                    message.subTitle = reader.string();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_PreviewIMExtend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 im_extend_type = 1; */
        if (message.imExtendType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.imExtendType);
        /* data.Image icon = 2; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string main_title = 3; */
        if (message.mainTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mainTitle);
        /* string sub_title = 4; */
        if (message.subTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subTitle);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.PreviewIMExtend
 */
export const PreviewExposeData_PreviewIMExtend = new PreviewExposeData_PreviewIMExtend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExposeData_EtData$Type extends MessageType<PreviewExposeData_EtData> {
    constructor() {
        super("data.PreviewExposeData.EtData", [
            { no: 1, name: "type_enter_room", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type_mob_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type_first_room_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type_first_room_mob_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "type_first_show_room_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "type_first_show_mob_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExposeData_EtData>): PreviewExposeData_EtData {
        const message = { typeEnterRoom: "", typeMobParams: "", typeParams: "", typeFirstRoomParams: "", typeFirstRoomMobParams: "", typeFirstShowRoomParams: "", typeFirstShowMobParams: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExposeData_EtData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExposeData_EtData): PreviewExposeData_EtData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type_enter_room */ 1:
                    message.typeEnterRoom = reader.string();
                    break;
                case /* string type_mob_params */ 2:
                    message.typeMobParams = reader.string();
                    break;
                case /* string type_params */ 3:
                    message.typeParams = reader.string();
                    break;
                case /* string type_first_room_params */ 4:
                    message.typeFirstRoomParams = reader.string();
                    break;
                case /* string type_first_room_mob_params */ 5:
                    message.typeFirstRoomMobParams = reader.string();
                    break;
                case /* string type_first_show_room_params */ 6:
                    message.typeFirstShowRoomParams = reader.string();
                    break;
                case /* string type_first_show_mob_params */ 7:
                    message.typeFirstShowMobParams = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExposeData_EtData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type_enter_room = 1; */
        if (message.typeEnterRoom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.typeEnterRoom);
        /* string type_mob_params = 2; */
        if (message.typeMobParams !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.typeMobParams);
        /* string type_params = 3; */
        if (message.typeParams !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.typeParams);
        /* string type_first_room_params = 4; */
        if (message.typeFirstRoomParams !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.typeFirstRoomParams);
        /* string type_first_room_mob_params = 5; */
        if (message.typeFirstRoomMobParams !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.typeFirstRoomMobParams);
        /* string type_first_show_room_params = 6; */
        if (message.typeFirstShowRoomParams !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.typeFirstShowRoomParams);
        /* string type_first_show_mob_params = 7; */
        if (message.typeFirstShowMobParams !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.typeFirstShowMobParams);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewExposeData.EtData
 */
export const PreviewExposeData_EtData = new PreviewExposeData_EtData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveData$Type extends MessageType<PaidLiveData> {
    constructor() {
        super("data.PaidLiveData", [
            { no: 1, name: "paid_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "view_right", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "ticket_session", kind: "message", T: () => TicketData },
            { no: 5, name: "order_data", kind: "message", T: () => OrderData },
            { no: 6, name: "delivery", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "need_delivery_notice", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "anchor_right", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "pay_ab_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "async_auth_data", kind: "message", T: () => AsyncAuthData }
        ]);
    }
    create(value?: PartialMessage<PaidLiveData>): PaidLiveData {
        const message = { paidType: 0, viewRight: 0, duration: 0n, delivery: 0, needDeliveryNotice: false, anchorRight: 0, payAbType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveData): PaidLiveData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 paid_type */ 1:
                    message.paidType = reader.int32();
                    break;
                case /* int32 view_right */ 2:
                    message.viewRight = reader.int32();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* data.TicketData ticket_session */ 4:
                    message.ticketSession = TicketData.internalBinaryRead(reader, reader.uint32(), options, message.ticketSession);
                    break;
                case /* data.OrderData order_data */ 5:
                    message.orderData = OrderData.internalBinaryRead(reader, reader.uint32(), options, message.orderData);
                    break;
                case /* int32 delivery */ 6:
                    message.delivery = reader.int32();
                    break;
                case /* bool need_delivery_notice */ 7:
                    message.needDeliveryNotice = reader.bool();
                    break;
                case /* int32 anchor_right */ 8:
                    message.anchorRight = reader.int32();
                    break;
                case /* int32 pay_ab_type */ 9:
                    message.payAbType = reader.int32();
                    break;
                case /* data.AsyncAuthData async_auth_data */ 12:
                    message.asyncAuthData = AsyncAuthData.internalBinaryRead(reader, reader.uint32(), options, message.asyncAuthData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 paid_type = 1; */
        if (message.paidType !== 0)
            writer.tag(1, WireType.Varint).int32(message.paidType);
        /* int32 view_right = 2; */
        if (message.viewRight !== 0)
            writer.tag(2, WireType.Varint).int32(message.viewRight);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* data.TicketData ticket_session = 4; */
        if (message.ticketSession)
            TicketData.internalBinaryWrite(message.ticketSession, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.OrderData order_data = 5; */
        if (message.orderData)
            OrderData.internalBinaryWrite(message.orderData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 delivery = 6; */
        if (message.delivery !== 0)
            writer.tag(6, WireType.Varint).int32(message.delivery);
        /* bool need_delivery_notice = 7; */
        if (message.needDeliveryNotice !== false)
            writer.tag(7, WireType.Varint).bool(message.needDeliveryNotice);
        /* int32 anchor_right = 8; */
        if (message.anchorRight !== 0)
            writer.tag(8, WireType.Varint).int32(message.anchorRight);
        /* int32 pay_ab_type = 9; */
        if (message.payAbType !== 0)
            writer.tag(9, WireType.Varint).int32(message.payAbType);
        /* data.AsyncAuthData async_auth_data = 12; */
        if (message.asyncAuthData)
            AsyncAuthData.internalBinaryWrite(message.asyncAuthData, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLiveData
 */
export const PaidLiveData = new PaidLiveData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsyncAuthData$Type extends MessageType<AsyncAuthData> {
    constructor() {
        super("data.AsyncAuthData", [
            { no: 1, name: "keep_alive_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "async_authentication_operate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "async_authentication_ab_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "keep_alive_time_stamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "buffer", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AsyncAuthData>): AsyncAuthData {
        const message = { keepAliveTime: 0n, asyncAuthenticationOperate: 0n, asyncAuthenticationAbType: 0n, keepAliveTimeStamp: 0n, buffer: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsyncAuthData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncAuthData): AsyncAuthData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 keep_alive_time */ 1:
                    message.keepAliveTime = reader.int64().toBigInt();
                    break;
                case /* int64 async_authentication_operate */ 2:
                    message.asyncAuthenticationOperate = reader.int64().toBigInt();
                    break;
                case /* int64 async_authentication_ab_type */ 3:
                    message.asyncAuthenticationAbType = reader.int64().toBigInt();
                    break;
                case /* int64 keep_alive_time_stamp */ 4:
                    message.keepAliveTimeStamp = reader.int64().toBigInt();
                    break;
                case /* int64 buffer */ 5:
                    message.buffer = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsyncAuthData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 keep_alive_time = 1; */
        if (message.keepAliveTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.keepAliveTime);
        /* int64 async_authentication_operate = 2; */
        if (message.asyncAuthenticationOperate !== 0n)
            writer.tag(2, WireType.Varint).int64(message.asyncAuthenticationOperate);
        /* int64 async_authentication_ab_type = 3; */
        if (message.asyncAuthenticationAbType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.asyncAuthenticationAbType);
        /* int64 keep_alive_time_stamp = 4; */
        if (message.keepAliveTimeStamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.keepAliveTimeStamp);
        /* int64 buffer = 5; */
        if (message.buffer !== 0n)
            writer.tag(5, WireType.Varint).int64(message.buffer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AsyncAuthData
 */
export const AsyncAuthData = new AsyncAuthData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLivePriceInfo$Type extends MessageType<PaidLivePriceInfo> {
    constructor() {
        super("data.PaidLivePriceInfo", [
            { no: 1, name: "start_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "claim_ddl", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "sku_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PaidLivePriceInfo>): PaidLivePriceInfo {
        const message = { startTime: 0, endTime: 0, price: 0n, claimDdl: 0, skuId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLivePriceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLivePriceInfo): PaidLivePriceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 start_time */ 1:
                    message.startTime = reader.int32();
                    break;
                case /* int32 end_time */ 2:
                    message.endTime = reader.int32();
                    break;
                case /* int64 price */ 3:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int32 claim_ddl */ 4:
                    message.claimDdl = reader.int32();
                    break;
                case /* int64 sku_id */ 5:
                    message.skuId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLivePriceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 start_time = 1; */
        if (message.startTime !== 0)
            writer.tag(1, WireType.Varint).int32(message.startTime);
        /* int32 end_time = 2; */
        if (message.endTime !== 0)
            writer.tag(2, WireType.Varint).int32(message.endTime);
        /* int64 price = 3; */
        if (message.price !== 0n)
            writer.tag(3, WireType.Varint).int64(message.price);
        /* int32 claim_ddl = 4; */
        if (message.claimDdl !== 0)
            writer.tag(4, WireType.Varint).int32(message.claimDdl);
        /* int64 sku_id = 5; */
        if (message.skuId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.skuId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLivePriceInfo
 */
export const PaidLivePriceInfo = new PaidLivePriceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TicketData$Type extends MessageType<TicketData> {
    constructor() {
        super("data.TicketData", [
            { no: 1, name: "ticket_session_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "raw_release_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ticket_explanation_card_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ticket_panel_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "ticket_session_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "sell_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "cover_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "cover_uri_vertical", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "Introduction", kind: "scalar", jsonName: "Introduction", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "raw_show_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "raw_show_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "raw_sale_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "raw_sale_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "raw_refund_deadline", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "raw_early_bird_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "raw_early_bird_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "raw_full_price_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "raw_full_price_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "raw_activity_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "raw_activity_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "early_bird_price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "activity_price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 28, name: "show_start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "show_end_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "sale_start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "sale_end_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "early_bird_start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 33, name: "early_bird_end_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 34, name: "full_price_start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 35, name: "full_price_end_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 36, name: "activity_start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 37, name: "activity_end_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 38, name: "refund_deadline", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 39, name: "activity_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 40, name: "activity_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "release_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 42, name: "ticket_explanation_card_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 43, name: "last_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 44, name: "paid_conversion_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "ticket_panel_six_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 46, name: "ticket_panel_nine_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 47, name: "cover", kind: "message", T: () => Image },
            { no: 48, name: "ios_pay_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 49, name: "android_pay_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 50, name: "ios_pay_price", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 51, name: "android_pay_price", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 52, name: "right_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 53, name: "friend_priceInfo", kind: "message", T: () => PaidLivePriceInfo },
            { no: 54, name: "helping_priceInfo", kind: "message", T: () => PaidLivePriceInfo },
            { no: 56, name: "ticket_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 57, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 58, name: "sku_details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TicketData_TicketSkuDetail },
            { no: 59, name: "final_price_info", kind: "message", T: () => TicketData_PaidLivePriceInfoV2 },
            { no: 60, name: "parent_ticket_session_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 61, name: "parent_ticket_session_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 62, name: "ticket_category", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TicketData>): TicketData {
        const message = { ticketSessionId: 0n, title: "", subTitle: "", price: "", rawReleaseTime: 0n, tags: [], ticketExplanationCardJumpUrl: "", ticketPanelJumpUrl: "", ticketSessionIdStr: "", sellStatus: 0, coverUri: "", coverUriVertical: "", introduction: "", rawShowStartTime: 0n, rawShowEndTime: 0n, rawSaleStartTime: 0n, rawSaleEndTime: 0n, rawRefundDeadline: 0n, rawEarlyBirdStartTime: 0n, rawEarlyBirdEndTime: 0n, rawFullPriceStartTime: 0n, rawFullPriceEndTime: 0n, rawActivityStartTime: 0n, rawActivityEndTime: 0n, earlyBirdPrice: "", activityPrice: "", status: 0, showStartTime: "", showEndTime: "", saleStartTime: "", saleEndTime: "", earlyBirdStartTime: "", earlyBirdEndTime: "", fullPriceStartTime: "", fullPriceEndTime: "", activityStartTime: "", activityEndTime: "", refundDeadline: "", activityTitle: "", activityJumpUrl: "", releaseTime: "", ticketExplanationCardStatus: 0, lastDuration: 0, paidConversionJumpUrl: "", ticketPanelSixJumpUrl: "", ticketPanelNineJumpUrl: "", iosPayType: 0, androidPayType: 0, iosPayPrice: 0, androidPayPrice: 0, rightDuration: 0, ticketAnchorId: 0n, extra: "", skuDetails: [], parentTicketSessionId: 0n, parentTicketSessionIdStr: "", ticketCategory: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TicketData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TicketData): TicketData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ticket_session_id */ 1:
                    message.ticketSessionId = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 3:
                    message.subTitle = reader.string();
                    break;
                case /* string price */ 4:
                    message.price = reader.string();
                    break;
                case /* int64 raw_release_time */ 5:
                    message.rawReleaseTime = reader.int64().toBigInt();
                    break;
                case /* repeated string tags */ 6:
                    message.tags.push(reader.string());
                    break;
                case /* string ticket_explanation_card_jump_url */ 7:
                    message.ticketExplanationCardJumpUrl = reader.string();
                    break;
                case /* string ticket_panel_jump_url */ 8:
                    message.ticketPanelJumpUrl = reader.string();
                    break;
                case /* string ticket_session_id_str */ 9:
                    message.ticketSessionIdStr = reader.string();
                    break;
                case /* int32 sell_status */ 10:
                    message.sellStatus = reader.int32();
                    break;
                case /* string cover_uri */ 11:
                    message.coverUri = reader.string();
                    break;
                case /* string cover_uri_vertical */ 12:
                    message.coverUriVertical = reader.string();
                    break;
                case /* string Introduction = 13 [json_name = "Introduction"];*/ 13:
                    message.introduction = reader.string();
                    break;
                case /* int64 raw_show_start_time */ 14:
                    message.rawShowStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_show_end_time */ 15:
                    message.rawShowEndTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_sale_start_time */ 16:
                    message.rawSaleStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_sale_end_time */ 17:
                    message.rawSaleEndTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_refund_deadline */ 18:
                    message.rawRefundDeadline = reader.int64().toBigInt();
                    break;
                case /* int64 raw_early_bird_start_time */ 19:
                    message.rawEarlyBirdStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_early_bird_end_time */ 20:
                    message.rawEarlyBirdEndTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_full_price_start_time */ 21:
                    message.rawFullPriceStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_full_price_end_time */ 22:
                    message.rawFullPriceEndTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_activity_start_time */ 23:
                    message.rawActivityStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 raw_activity_end_time */ 24:
                    message.rawActivityEndTime = reader.int64().toBigInt();
                    break;
                case /* string early_bird_price */ 25:
                    message.earlyBirdPrice = reader.string();
                    break;
                case /* string activity_price */ 26:
                    message.activityPrice = reader.string();
                    break;
                case /* int32 status */ 27:
                    message.status = reader.int32();
                    break;
                case /* string show_start_time */ 28:
                    message.showStartTime = reader.string();
                    break;
                case /* string show_end_time */ 29:
                    message.showEndTime = reader.string();
                    break;
                case /* string sale_start_time */ 30:
                    message.saleStartTime = reader.string();
                    break;
                case /* string sale_end_time */ 31:
                    message.saleEndTime = reader.string();
                    break;
                case /* string early_bird_start_time */ 32:
                    message.earlyBirdStartTime = reader.string();
                    break;
                case /* string early_bird_end_time */ 33:
                    message.earlyBirdEndTime = reader.string();
                    break;
                case /* string full_price_start_time */ 34:
                    message.fullPriceStartTime = reader.string();
                    break;
                case /* string full_price_end_time */ 35:
                    message.fullPriceEndTime = reader.string();
                    break;
                case /* string activity_start_time */ 36:
                    message.activityStartTime = reader.string();
                    break;
                case /* string activity_end_time */ 37:
                    message.activityEndTime = reader.string();
                    break;
                case /* string refund_deadline */ 38:
                    message.refundDeadline = reader.string();
                    break;
                case /* string activity_title */ 39:
                    message.activityTitle = reader.string();
                    break;
                case /* string activity_jump_url */ 40:
                    message.activityJumpUrl = reader.string();
                    break;
                case /* string release_time */ 41:
                    message.releaseTime = reader.string();
                    break;
                case /* int32 ticket_explanation_card_status */ 42:
                    message.ticketExplanationCardStatus = reader.int32();
                    break;
                case /* int32 last_duration */ 43:
                    message.lastDuration = reader.int32();
                    break;
                case /* string paid_conversion_jump_url */ 44:
                    message.paidConversionJumpUrl = reader.string();
                    break;
                case /* string ticket_panel_six_jump_url */ 45:
                    message.ticketPanelSixJumpUrl = reader.string();
                    break;
                case /* string ticket_panel_nine_jump_url */ 46:
                    message.ticketPanelNineJumpUrl = reader.string();
                    break;
                case /* data.Image cover */ 47:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                case /* int32 ios_pay_type */ 48:
                    message.iosPayType = reader.int32();
                    break;
                case /* int32 android_pay_type */ 49:
                    message.androidPayType = reader.int32();
                    break;
                case /* int32 ios_pay_price */ 50:
                    message.iosPayPrice = reader.int32();
                    break;
                case /* int32 android_pay_price */ 51:
                    message.androidPayPrice = reader.int32();
                    break;
                case /* int32 right_duration */ 52:
                    message.rightDuration = reader.int32();
                    break;
                case /* data.PaidLivePriceInfo friend_priceInfo */ 53:
                    message.friendPriceInfo = PaidLivePriceInfo.internalBinaryRead(reader, reader.uint32(), options, message.friendPriceInfo);
                    break;
                case /* data.PaidLivePriceInfo helping_priceInfo */ 54:
                    message.helpingPriceInfo = PaidLivePriceInfo.internalBinaryRead(reader, reader.uint32(), options, message.helpingPriceInfo);
                    break;
                case /* int64 ticket_anchor_id */ 56:
                    message.ticketAnchorId = reader.int64().toBigInt();
                    break;
                case /* string extra */ 57:
                    message.extra = reader.string();
                    break;
                case /* repeated data.TicketData.TicketSkuDetail sku_details */ 58:
                    message.skuDetails.push(TicketData_TicketSkuDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.TicketData.PaidLivePriceInfoV2 final_price_info */ 59:
                    message.finalPriceInfo = TicketData_PaidLivePriceInfoV2.internalBinaryRead(reader, reader.uint32(), options, message.finalPriceInfo);
                    break;
                case /* int64 parent_ticket_session_id */ 60:
                    message.parentTicketSessionId = reader.int64().toBigInt();
                    break;
                case /* string parent_ticket_session_id_str */ 61:
                    message.parentTicketSessionIdStr = reader.string();
                    break;
                case /* int32 ticket_category */ 62:
                    message.ticketCategory = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TicketData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 ticket_session_id = 1; */
        if (message.ticketSessionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.ticketSessionId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 3; */
        if (message.subTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subTitle);
        /* string price = 4; */
        if (message.price !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.price);
        /* int64 raw_release_time = 5; */
        if (message.rawReleaseTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rawReleaseTime);
        /* repeated string tags = 6; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.tags[i]);
        /* string ticket_explanation_card_jump_url = 7; */
        if (message.ticketExplanationCardJumpUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ticketExplanationCardJumpUrl);
        /* string ticket_panel_jump_url = 8; */
        if (message.ticketPanelJumpUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.ticketPanelJumpUrl);
        /* string ticket_session_id_str = 9; */
        if (message.ticketSessionIdStr !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.ticketSessionIdStr);
        /* int32 sell_status = 10; */
        if (message.sellStatus !== 0)
            writer.tag(10, WireType.Varint).int32(message.sellStatus);
        /* string cover_uri = 11; */
        if (message.coverUri !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.coverUri);
        /* string cover_uri_vertical = 12; */
        if (message.coverUriVertical !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.coverUriVertical);
        /* string Introduction = 13 [json_name = "Introduction"]; */
        if (message.introduction !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.introduction);
        /* int64 raw_show_start_time = 14; */
        if (message.rawShowStartTime !== 0n)
            writer.tag(14, WireType.Varint).int64(message.rawShowStartTime);
        /* int64 raw_show_end_time = 15; */
        if (message.rawShowEndTime !== 0n)
            writer.tag(15, WireType.Varint).int64(message.rawShowEndTime);
        /* int64 raw_sale_start_time = 16; */
        if (message.rawSaleStartTime !== 0n)
            writer.tag(16, WireType.Varint).int64(message.rawSaleStartTime);
        /* int64 raw_sale_end_time = 17; */
        if (message.rawSaleEndTime !== 0n)
            writer.tag(17, WireType.Varint).int64(message.rawSaleEndTime);
        /* int64 raw_refund_deadline = 18; */
        if (message.rawRefundDeadline !== 0n)
            writer.tag(18, WireType.Varint).int64(message.rawRefundDeadline);
        /* int64 raw_early_bird_start_time = 19; */
        if (message.rawEarlyBirdStartTime !== 0n)
            writer.tag(19, WireType.Varint).int64(message.rawEarlyBirdStartTime);
        /* int64 raw_early_bird_end_time = 20; */
        if (message.rawEarlyBirdEndTime !== 0n)
            writer.tag(20, WireType.Varint).int64(message.rawEarlyBirdEndTime);
        /* int64 raw_full_price_start_time = 21; */
        if (message.rawFullPriceStartTime !== 0n)
            writer.tag(21, WireType.Varint).int64(message.rawFullPriceStartTime);
        /* int64 raw_full_price_end_time = 22; */
        if (message.rawFullPriceEndTime !== 0n)
            writer.tag(22, WireType.Varint).int64(message.rawFullPriceEndTime);
        /* int64 raw_activity_start_time = 23; */
        if (message.rawActivityStartTime !== 0n)
            writer.tag(23, WireType.Varint).int64(message.rawActivityStartTime);
        /* int64 raw_activity_end_time = 24; */
        if (message.rawActivityEndTime !== 0n)
            writer.tag(24, WireType.Varint).int64(message.rawActivityEndTime);
        /* string early_bird_price = 25; */
        if (message.earlyBirdPrice !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.earlyBirdPrice);
        /* string activity_price = 26; */
        if (message.activityPrice !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.activityPrice);
        /* int32 status = 27; */
        if (message.status !== 0)
            writer.tag(27, WireType.Varint).int32(message.status);
        /* string show_start_time = 28; */
        if (message.showStartTime !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.showStartTime);
        /* string show_end_time = 29; */
        if (message.showEndTime !== "")
            writer.tag(29, WireType.LengthDelimited).string(message.showEndTime);
        /* string sale_start_time = 30; */
        if (message.saleStartTime !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.saleStartTime);
        /* string sale_end_time = 31; */
        if (message.saleEndTime !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.saleEndTime);
        /* string early_bird_start_time = 32; */
        if (message.earlyBirdStartTime !== "")
            writer.tag(32, WireType.LengthDelimited).string(message.earlyBirdStartTime);
        /* string early_bird_end_time = 33; */
        if (message.earlyBirdEndTime !== "")
            writer.tag(33, WireType.LengthDelimited).string(message.earlyBirdEndTime);
        /* string full_price_start_time = 34; */
        if (message.fullPriceStartTime !== "")
            writer.tag(34, WireType.LengthDelimited).string(message.fullPriceStartTime);
        /* string full_price_end_time = 35; */
        if (message.fullPriceEndTime !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.fullPriceEndTime);
        /* string activity_start_time = 36; */
        if (message.activityStartTime !== "")
            writer.tag(36, WireType.LengthDelimited).string(message.activityStartTime);
        /* string activity_end_time = 37; */
        if (message.activityEndTime !== "")
            writer.tag(37, WireType.LengthDelimited).string(message.activityEndTime);
        /* string refund_deadline = 38; */
        if (message.refundDeadline !== "")
            writer.tag(38, WireType.LengthDelimited).string(message.refundDeadline);
        /* string activity_title = 39; */
        if (message.activityTitle !== "")
            writer.tag(39, WireType.LengthDelimited).string(message.activityTitle);
        /* string activity_jump_url = 40; */
        if (message.activityJumpUrl !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.activityJumpUrl);
        /* string release_time = 41; */
        if (message.releaseTime !== "")
            writer.tag(41, WireType.LengthDelimited).string(message.releaseTime);
        /* int32 ticket_explanation_card_status = 42; */
        if (message.ticketExplanationCardStatus !== 0)
            writer.tag(42, WireType.Varint).int32(message.ticketExplanationCardStatus);
        /* int32 last_duration = 43; */
        if (message.lastDuration !== 0)
            writer.tag(43, WireType.Varint).int32(message.lastDuration);
        /* string paid_conversion_jump_url = 44; */
        if (message.paidConversionJumpUrl !== "")
            writer.tag(44, WireType.LengthDelimited).string(message.paidConversionJumpUrl);
        /* string ticket_panel_six_jump_url = 45; */
        if (message.ticketPanelSixJumpUrl !== "")
            writer.tag(45, WireType.LengthDelimited).string(message.ticketPanelSixJumpUrl);
        /* string ticket_panel_nine_jump_url = 46; */
        if (message.ticketPanelNineJumpUrl !== "")
            writer.tag(46, WireType.LengthDelimited).string(message.ticketPanelNineJumpUrl);
        /* data.Image cover = 47; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* int32 ios_pay_type = 48; */
        if (message.iosPayType !== 0)
            writer.tag(48, WireType.Varint).int32(message.iosPayType);
        /* int32 android_pay_type = 49; */
        if (message.androidPayType !== 0)
            writer.tag(49, WireType.Varint).int32(message.androidPayType);
        /* int32 ios_pay_price = 50; */
        if (message.iosPayPrice !== 0)
            writer.tag(50, WireType.Varint).int32(message.iosPayPrice);
        /* int32 android_pay_price = 51; */
        if (message.androidPayPrice !== 0)
            writer.tag(51, WireType.Varint).int32(message.androidPayPrice);
        /* int32 right_duration = 52; */
        if (message.rightDuration !== 0)
            writer.tag(52, WireType.Varint).int32(message.rightDuration);
        /* data.PaidLivePriceInfo friend_priceInfo = 53; */
        if (message.friendPriceInfo)
            PaidLivePriceInfo.internalBinaryWrite(message.friendPriceInfo, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* data.PaidLivePriceInfo helping_priceInfo = 54; */
        if (message.helpingPriceInfo)
            PaidLivePriceInfo.internalBinaryWrite(message.helpingPriceInfo, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* int64 ticket_anchor_id = 56; */
        if (message.ticketAnchorId !== 0n)
            writer.tag(56, WireType.Varint).int64(message.ticketAnchorId);
        /* string extra = 57; */
        if (message.extra !== "")
            writer.tag(57, WireType.LengthDelimited).string(message.extra);
        /* repeated data.TicketData.TicketSkuDetail sku_details = 58; */
        for (let i = 0; i < message.skuDetails.length; i++)
            TicketData_TicketSkuDetail.internalBinaryWrite(message.skuDetails[i], writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* data.TicketData.PaidLivePriceInfoV2 final_price_info = 59; */
        if (message.finalPriceInfo)
            TicketData_PaidLivePriceInfoV2.internalBinaryWrite(message.finalPriceInfo, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* int64 parent_ticket_session_id = 60; */
        if (message.parentTicketSessionId !== 0n)
            writer.tag(60, WireType.Varint).int64(message.parentTicketSessionId);
        /* string parent_ticket_session_id_str = 61; */
        if (message.parentTicketSessionIdStr !== "")
            writer.tag(61, WireType.LengthDelimited).string(message.parentTicketSessionIdStr);
        /* int32 ticket_category = 62; */
        if (message.ticketCategory !== 0)
            writer.tag(62, WireType.Varint).int32(message.ticketCategory);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TicketData
 */
export const TicketData = new TicketData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TicketData_PaidLivePriceInfoV2$Type extends MessageType<TicketData_PaidLivePriceInfoV2> {
    constructor() {
        super("data.TicketData.PaidLivePriceInfoV2", [
            { no: 1, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pos", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "pay_type", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TicketData_PaidLivePriceInfoV2>): TicketData_PaidLivePriceInfoV2 {
        const message = { amount: "", currency: "", pos: 0n, payType: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TicketData_PaidLivePriceInfoV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TicketData_PaidLivePriceInfoV2): TicketData_PaidLivePriceInfoV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string amount */ 1:
                    message.amount = reader.string();
                    break;
                case /* string currency */ 2:
                    message.currency = reader.string();
                    break;
                case /* int64 pos */ 3:
                    message.pos = reader.int64().toBigInt();
                    break;
                case /* repeated int32 pay_type */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.payType.push(reader.int32());
                    else
                        message.payType.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TicketData_PaidLivePriceInfoV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string amount = 1; */
        if (message.amount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.amount);
        /* string currency = 2; */
        if (message.currency !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currency);
        /* int64 pos = 3; */
        if (message.pos !== 0n)
            writer.tag(3, WireType.Varint).int64(message.pos);
        /* repeated int32 pay_type = 4; */
        if (message.payType.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.payType.length; i++)
                writer.int32(message.payType[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TicketData.PaidLivePriceInfoV2
 */
export const TicketData_PaidLivePriceInfoV2 = new TicketData_PaidLivePriceInfoV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TicketData_TicketSkuDetail$Type extends MessageType<TicketData_TicketSkuDetail> {
    constructor() {
        super("data.TicketData.TicketSkuDetail", [
            { no: 1, name: "ticket_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ticket_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_sell_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "closing_sell_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "sell_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "price_info", kind: "message", T: () => TicketData_PaidLivePriceInfoV2 },
            { no: 7, name: "dou_price_info", kind: "message", T: () => TicketData_PaidLivePriceInfoV2 },
            { no: 8, name: "sku_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TicketData_TicketSkuDetail>): TicketData_TicketSkuDetail {
        const message = { ticketType: 0, ticketName: "", startSellTime: 0n, closingSellTime: 0n, sellStatus: 0, skuId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TicketData_TicketSkuDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TicketData_TicketSkuDetail): TicketData_TicketSkuDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 ticket_type */ 1:
                    message.ticketType = reader.int32();
                    break;
                case /* string ticket_name */ 2:
                    message.ticketName = reader.string();
                    break;
                case /* int64 start_sell_time */ 3:
                    message.startSellTime = reader.int64().toBigInt();
                    break;
                case /* int64 closing_sell_time */ 4:
                    message.closingSellTime = reader.int64().toBigInt();
                    break;
                case /* int32 sell_status */ 5:
                    message.sellStatus = reader.int32();
                    break;
                case /* data.TicketData.PaidLivePriceInfoV2 price_info */ 6:
                    message.priceInfo = TicketData_PaidLivePriceInfoV2.internalBinaryRead(reader, reader.uint32(), options, message.priceInfo);
                    break;
                case /* data.TicketData.PaidLivePriceInfoV2 dou_price_info */ 7:
                    message.douPriceInfo = TicketData_PaidLivePriceInfoV2.internalBinaryRead(reader, reader.uint32(), options, message.douPriceInfo);
                    break;
                case /* int64 sku_id */ 8:
                    message.skuId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TicketData_TicketSkuDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 ticket_type = 1; */
        if (message.ticketType !== 0)
            writer.tag(1, WireType.Varint).int32(message.ticketType);
        /* string ticket_name = 2; */
        if (message.ticketName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ticketName);
        /* int64 start_sell_time = 3; */
        if (message.startSellTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startSellTime);
        /* int64 closing_sell_time = 4; */
        if (message.closingSellTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.closingSellTime);
        /* int32 sell_status = 5; */
        if (message.sellStatus !== 0)
            writer.tag(5, WireType.Varint).int32(message.sellStatus);
        /* data.TicketData.PaidLivePriceInfoV2 price_info = 6; */
        if (message.priceInfo)
            TicketData_PaidLivePriceInfoV2.internalBinaryWrite(message.priceInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.TicketData.PaidLivePriceInfoV2 dou_price_info = 7; */
        if (message.douPriceInfo)
            TicketData_PaidLivePriceInfoV2.internalBinaryWrite(message.douPriceInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 sku_id = 8; */
        if (message.skuId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.skuId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TicketData.TicketSkuDetail
 */
export const TicketData_TicketSkuDetail = new TicketData_TicketSkuDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderData$Type extends MessageType<OrderData> {
    constructor() {
        super("data.OrderData", [
            { no: 1, name: "order_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderData>): OrderData {
        const message = { orderId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderData): OrderData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_id */ 1:
                    message.orderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_id = 1; */
        if (message.orderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OrderData
 */
export const OrderData = new OrderData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Appearance$Type extends MessageType<Appearance> {
    constructor() {
        super("data.Appearance", [
            { no: 1, name: "head_bubble", kind: "message", T: () => Appearance_Bubble },
            { no: 2, name: "up_right_stats_display_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "entrance", kind: "message", T: () => MoreEntrance },
            { no: 4, name: "toolbar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolbarItemConfig },
            { no: 5, name: "preview_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "cover_gauss", kind: "message", T: () => Image },
            { no: 7, name: "content_tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Appearance_ContentTag },
            { no: 8, name: "preview_label", kind: "message", T: () => PreviewLabel },
            { no: 9, name: "cover_dynamic_mask", kind: "message", T: () => Image },
            { no: 10, name: "horizontal_background", kind: "message", T: () => Image },
            { no: 11, name: "wide_cover_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Appearance_WideCover },
            { no: 12, name: "blur_placeholder_img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<Appearance>): Appearance {
        const message = { upRightStatsDisplayType: 0n, toolbarList: [], previewStyle: 0n, contentTags: [], wideCoverList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Appearance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Appearance): Appearance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Appearance.Bubble head_bubble */ 1:
                    message.headBubble = Appearance_Bubble.internalBinaryRead(reader, reader.uint32(), options, message.headBubble);
                    break;
                case /* int64 up_right_stats_display_type */ 2:
                    message.upRightStatsDisplayType = reader.int64().toBigInt();
                    break;
                case /* data.MoreEntrance entrance */ 3:
                    message.entrance = MoreEntrance.internalBinaryRead(reader, reader.uint32(), options, message.entrance);
                    break;
                case /* repeated data.ToolbarItemConfig toolbar_list */ 4:
                    message.toolbarList.push(ToolbarItemConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 preview_style */ 5:
                    message.previewStyle = reader.int64().toBigInt();
                    break;
                case /* data.Image cover_gauss */ 6:
                    message.coverGauss = Image.internalBinaryRead(reader, reader.uint32(), options, message.coverGauss);
                    break;
                case /* repeated data.Appearance.ContentTag content_tags */ 7:
                    message.contentTags.push(Appearance_ContentTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.PreviewLabel preview_label */ 8:
                    message.previewLabel = PreviewLabel.internalBinaryRead(reader, reader.uint32(), options, message.previewLabel);
                    break;
                case /* data.Image cover_dynamic_mask */ 9:
                    message.coverDynamicMask = Image.internalBinaryRead(reader, reader.uint32(), options, message.coverDynamicMask);
                    break;
                case /* data.Image horizontal_background */ 10:
                    message.horizontalBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.horizontalBackground);
                    break;
                case /* repeated data.Appearance.WideCover wide_cover_list */ 11:
                    message.wideCoverList.push(Appearance_WideCover.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image blur_placeholder_img */ 12:
                    message.blurPlaceholderImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.blurPlaceholderImg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Appearance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Appearance.Bubble head_bubble = 1; */
        if (message.headBubble)
            Appearance_Bubble.internalBinaryWrite(message.headBubble, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 up_right_stats_display_type = 2; */
        if (message.upRightStatsDisplayType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.upRightStatsDisplayType);
        /* data.MoreEntrance entrance = 3; */
        if (message.entrance)
            MoreEntrance.internalBinaryWrite(message.entrance, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ToolbarItemConfig toolbar_list = 4; */
        for (let i = 0; i < message.toolbarList.length; i++)
            ToolbarItemConfig.internalBinaryWrite(message.toolbarList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 preview_style = 5; */
        if (message.previewStyle !== 0n)
            writer.tag(5, WireType.Varint).int64(message.previewStyle);
        /* data.Image cover_gauss = 6; */
        if (message.coverGauss)
            Image.internalBinaryWrite(message.coverGauss, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Appearance.ContentTag content_tags = 7; */
        for (let i = 0; i < message.contentTags.length; i++)
            Appearance_ContentTag.internalBinaryWrite(message.contentTags[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.PreviewLabel preview_label = 8; */
        if (message.previewLabel)
            PreviewLabel.internalBinaryWrite(message.previewLabel, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image cover_dynamic_mask = 9; */
        if (message.coverDynamicMask)
            Image.internalBinaryWrite(message.coverDynamicMask, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image horizontal_background = 10; */
        if (message.horizontalBackground)
            Image.internalBinaryWrite(message.horizontalBackground, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Appearance.WideCover wide_cover_list = 11; */
        for (let i = 0; i < message.wideCoverList.length; i++)
            Appearance_WideCover.internalBinaryWrite(message.wideCoverList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.Image blur_placeholder_img = 12; */
        if (message.blurPlaceholderImg)
            Image.internalBinaryWrite(message.blurPlaceholderImg, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Appearance
 */
export const Appearance = new Appearance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Appearance_Bubble$Type extends MessageType<Appearance_Bubble> {
    constructor() {
        super("data.Appearance.Bubble", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roll_tips", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "roll_after_ms", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "coupon_mate_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "et_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Appearance_Bubble>): Appearance_Bubble {
        const message = { type: 0, rollTips: [], rollAfterMs: 0, couponMateId: 0n, etType: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Appearance_Bubble>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Appearance_Bubble): Appearance_Bubble {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* repeated string roll_tips */ 2:
                    message.rollTips.push(reader.string());
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int32 roll_after_ms */ 4:
                    message.rollAfterMs = reader.int32();
                    break;
                case /* int64 coupon_mate_id */ 5:
                    message.couponMateId = reader.int64().toBigInt();
                    break;
                case /* string et_type */ 6:
                    message.etType = reader.string();
                    break;
                case /* string extra */ 7:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Appearance_Bubble, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* repeated string roll_tips = 2; */
        for (let i = 0; i < message.rollTips.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.rollTips[i]);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 roll_after_ms = 4; */
        if (message.rollAfterMs !== 0)
            writer.tag(4, WireType.Varint).int32(message.rollAfterMs);
        /* int64 coupon_mate_id = 5; */
        if (message.couponMateId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.couponMateId);
        /* string et_type = 6; */
        if (message.etType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.etType);
        /* string extra = 7; */
        if (message.extra !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Appearance.Bubble
 */
export const Appearance_Bubble = new Appearance_Bubble$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Appearance_ContentTag$Type extends MessageType<Appearance_ContentTag> {
    constructor() {
        super("data.Appearance.ContentTag", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Appearance_ContentTag>): Appearance_ContentTag {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Appearance_ContentTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Appearance_ContentTag): Appearance_ContentTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Appearance_ContentTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Appearance.ContentTag
 */
export const Appearance_ContentTag = new Appearance_ContentTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Appearance_WideCover$Type extends MessageType<Appearance_WideCover> {
    constructor() {
        super("data.Appearance.WideCover", [
            { no: 1, name: "cover", kind: "message", T: () => Image },
            { no: 2, name: "cover_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Appearance_WideCover>): Appearance_WideCover {
        const message = { coverType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Appearance_WideCover>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Appearance_WideCover): Appearance_WideCover {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image cover */ 1:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                case /* int64 cover_type */ 2:
                    message.coverType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Appearance_WideCover, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image cover = 1; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 cover_type = 2; */
        if (message.coverType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.coverType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Appearance.WideCover
 */
export const Appearance_WideCover = new Appearance_WideCover$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCPData$Type extends MessageType<GameCPData> {
    constructor() {
        super("data.GameCPData", [
            { no: 1, name: "is_live_a_promoted_a", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "game_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameCPData>): GameCPData {
        const message = { isLiveAPromotedA: 0, gameId: "", gameName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCPData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCPData): GameCPData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 is_live_a_promoted_a */ 1:
                    message.isLiveAPromotedA = reader.int32();
                    break;
                case /* string game_id */ 2:
                    message.gameId = reader.string();
                    break;
                case /* string game_name */ 3:
                    message.gameName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCPData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 is_live_a_promoted_a = 1; */
        if (message.isLiveAPromotedA !== 0)
            writer.tag(1, WireType.Varint).int32(message.isLiveAPromotedA);
        /* string game_id = 2; */
        if (message.gameId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameId);
        /* string game_name = 3; */
        if (message.gameName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gameName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameCPData
 */
export const GameCPData = new GameCPData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamePlayData$Type extends MessageType<GamePlayData> {
    constructor() {
        super("data.GamePlayData", [
            { no: 1, name: "play_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "play_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GamePlayData>): GamePlayData {
        const message = { playType: 0, playId: 0n, gameId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GamePlayData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamePlayData): GamePlayData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 play_type */ 1:
                    message.playType = reader.int32();
                    break;
                case /* int64 play_id */ 2:
                    message.playId = reader.int64().toBigInt();
                    break;
                case /* int64 game_id */ 3:
                    message.gameId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamePlayData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 play_type = 1; */
        if (message.playType !== 0)
            writer.tag(1, WireType.Varint).int32(message.playType);
        /* int64 play_id = 2; */
        if (message.playId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.playId);
        /* int64 game_id = 3; */
        if (message.gameId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.gameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GamePlayData
 */
export const GamePlayData = new GamePlayData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomGameDataChannelConfig$Type extends MessageType<RoomGameDataChannelConfig> {
    constructor() {
        super("data.RoomGameDataChannelConfig", [
            { no: 1, name: "fusion_tag_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_stay_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomGameDataChannelConfig>): RoomGameDataChannelConfig {
        const message = { fusionTagId: "", gameId: "", liveStayLimit: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomGameDataChannelConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomGameDataChannelConfig): RoomGameDataChannelConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fusion_tag_id */ 1:
                    message.fusionTagId = reader.string();
                    break;
                case /* string game_id */ 2:
                    message.gameId = reader.string();
                    break;
                case /* int64 live_stay_limit */ 3:
                    message.liveStayLimit = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomGameDataChannelConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fusion_tag_id = 1; */
        if (message.fusionTagId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fusionTagId);
        /* string game_id = 2; */
        if (message.gameId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameId);
        /* int64 live_stay_limit = 3; */
        if (message.liveStayLimit !== 0n)
            writer.tag(3, WireType.Varint).int64(message.liveStayLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomGameDataChannelConfig
 */
export const RoomGameDataChannelConfig = new RoomGameDataChannelConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolBarComponentData$Type extends MessageType<ToolBarComponentData> {
    constructor() {
        super("data.ToolBarComponentData", [
            { no: 1, name: "group_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "component_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "op_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "icon", kind: "message", T: () => Image },
            { no: 7, name: "show_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "data_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 99, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToolBarComponentData>): ToolBarComponentData {
        const message = { groupId: 0, componentType: 0, opType: 0, text: "", schemaUrl: "", showType: 0n, dataStatus: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolBarComponentData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolBarComponentData): ToolBarComponentData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 group_id */ 1:
                    message.groupId = reader.int32();
                    break;
                case /* int32 component_type */ 2:
                    message.componentType = reader.int32();
                    break;
                case /* int32 op_type */ 3:
                    message.opType = reader.int32();
                    break;
                case /* string text */ 4:
                    message.text = reader.string();
                    break;
                case /* string schema_url */ 5:
                    message.schemaUrl = reader.string();
                    break;
                case /* data.Image icon */ 6:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 show_type */ 7:
                    message.showType = reader.int64().toBigInt();
                    break;
                case /* int64 data_status */ 8:
                    message.dataStatus = reader.int64().toBigInt();
                    break;
                case /* string extra */ 99:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolBarComponentData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 group_id = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).int32(message.groupId);
        /* int32 component_type = 2; */
        if (message.componentType !== 0)
            writer.tag(2, WireType.Varint).int32(message.componentType);
        /* int32 op_type = 3; */
        if (message.opType !== 0)
            writer.tag(3, WireType.Varint).int32(message.opType);
        /* string text = 4; */
        if (message.text !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.text);
        /* string schema_url = 5; */
        if (message.schemaUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.schemaUrl);
        /* data.Image icon = 6; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 show_type = 7; */
        if (message.showType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.showType);
        /* int64 data_status = 8; */
        if (message.dataStatus !== 0n)
            writer.tag(8, WireType.Varint).int64(message.dataStatus);
        /* string extra = 99; */
        if (message.extra !== "")
            writer.tag(99, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ToolBarComponentData
 */
export const ToolBarComponentData = new ToolBarComponentData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolBarData$Type extends MessageType<ToolBarData> {
    constructor() {
        super("data.ToolBarData", [
            { no: 1, name: "entrance_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolBarComponentData },
            { no: 2, name: "more_panel", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolBarComponentData },
            { no: 3, name: "max_entrance_cnt", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "landscape_up_right", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolBarComponentData },
            { no: 6, name: "max_entrance_cnt_landscape", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "permutation", kind: "message", T: () => ToolbarPermutation }
        ]);
    }
    create(value?: PartialMessage<ToolBarData>): ToolBarData {
        const message = { entranceList: [], morePanel: [], maxEntranceCnt: 0, landscapeUpRight: [], maxEntranceCntLandscape: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolBarData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolBarData): ToolBarData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ToolBarComponentData entrance_list */ 1:
                    message.entranceList.push(ToolBarComponentData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.ToolBarComponentData more_panel */ 2:
                    message.morePanel.push(ToolBarComponentData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 max_entrance_cnt */ 3:
                    message.maxEntranceCnt = reader.int32();
                    break;
                case /* repeated data.ToolBarComponentData landscape_up_right */ 4:
                    message.landscapeUpRight.push(ToolBarComponentData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 max_entrance_cnt_landscape */ 6:
                    message.maxEntranceCntLandscape = reader.int32();
                    break;
                case /* data.ToolbarPermutation permutation */ 7:
                    message.permutation = ToolbarPermutation.internalBinaryRead(reader, reader.uint32(), options, message.permutation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolBarData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ToolBarComponentData entrance_list = 1; */
        for (let i = 0; i < message.entranceList.length; i++)
            ToolBarComponentData.internalBinaryWrite(message.entranceList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ToolBarComponentData more_panel = 2; */
        for (let i = 0; i < message.morePanel.length; i++)
            ToolBarComponentData.internalBinaryWrite(message.morePanel[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 max_entrance_cnt = 3; */
        if (message.maxEntranceCnt !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxEntranceCnt);
        /* repeated data.ToolBarComponentData landscape_up_right = 4; */
        for (let i = 0; i < message.landscapeUpRight.length; i++)
            ToolBarComponentData.internalBinaryWrite(message.landscapeUpRight[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 max_entrance_cnt_landscape = 6; */
        if (message.maxEntranceCntLandscape !== 0)
            writer.tag(6, WireType.Varint).int32(message.maxEntranceCntLandscape);
        /* data.ToolbarPermutation permutation = 7; */
        if (message.permutation)
            ToolbarPermutation.internalBinaryWrite(message.permutation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ToolBarData
 */
export const ToolBarData = new ToolBarData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LifeGrouponInfo$Type extends MessageType<LifeGrouponInfo> {
    constructor() {
        super("data.LifeGrouponInfo", [
            { no: 1, name: "permission_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "agg_card_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "dynamic_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LifeGrouponInfo>): LifeGrouponInfo {
        const message = { permissionStatus: 0n, aggCardId: 0n, iconUrl: "", dynamicUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LifeGrouponInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LifeGrouponInfo): LifeGrouponInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 permission_status */ 1:
                    message.permissionStatus = reader.int64().toBigInt();
                    break;
                case /* int64 agg_card_id */ 2:
                    message.aggCardId = reader.int64().toBigInt();
                    break;
                case /* string icon_url */ 3:
                    message.iconUrl = reader.string();
                    break;
                case /* string dynamic_url */ 4:
                    message.dynamicUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LifeGrouponInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 permission_status = 1; */
        if (message.permissionStatus !== 0n)
            writer.tag(1, WireType.Varint).int64(message.permissionStatus);
        /* int64 agg_card_id = 2; */
        if (message.aggCardId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.aggCardId);
        /* string icon_url = 3; */
        if (message.iconUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.iconUrl);
        /* string dynamic_url = 4; */
        if (message.dynamicUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.dynamicUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LifeGrouponInfo
 */
export const LifeGrouponInfo = new LifeGrouponInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewLabel$Type extends MessageType<PreviewLabel> {
    constructor() {
        super("data.PreviewLabel", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "label_tips", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "label_image", kind: "message", T: () => Image },
            { no: 5, name: "hit_test", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewLabel>): PreviewLabel {
        const message = { type: 0, labelTips: [], labelType: 0, hitTest: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewLabel): PreviewLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* repeated string label_tips */ 2:
                    message.labelTips.push(reader.string());
                    break;
                case /* int32 label_type */ 3:
                    message.labelType = reader.int32();
                    break;
                case /* data.Image label_image */ 4:
                    message.labelImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.labelImage);
                    break;
                case /* bool hit_test */ 5:
                    message.hitTest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* repeated string label_tips = 2; */
        for (let i = 0; i < message.labelTips.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.labelTips[i]);
        /* int32 label_type = 3; */
        if (message.labelType !== 0)
            writer.tag(3, WireType.Varint).int32(message.labelType);
        /* data.Image label_image = 4; */
        if (message.labelImage)
            Image.internalBinaryWrite(message.labelImage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool hit_test = 5; */
        if (message.hitTest !== false)
            writer.tag(5, WireType.Varint).bool(message.hitTest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreviewLabel
 */
export const PreviewLabel = new PreviewLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotRoomInfo$Type extends MessageType<HotRoomInfo> {
    constructor() {
        super("data.HotRoomInfo", [
            { no: 1, name: "BitMap", kind: "scalar", jsonName: "BitMap", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<HotRoomInfo>): HotRoomInfo {
        const message = { bitMap: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotRoomInfo): HotRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 BitMap = 1 [json_name = "BitMap"];*/ 1:
                    message.bitMap = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 BitMap = 1 [json_name = "BitMap"]; */
        if (message.bitMap !== 0n)
            writer.tag(1, WireType.Varint).int64(message.bitMap);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.HotRoomInfo
 */
export const HotRoomInfo = new HotRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityLiveRecommendConfig$Type extends MessageType<ActivityLiveRecommendConfig> {
    constructor() {
        super("data.ActivityLiveRecommendConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "live_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "actor_uids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "episode_info", kind: "message", T: () => ActivityLiveRecommendConfig_EpisodeInfo }
        ]);
    }
    create(value?: PartialMessage<ActivityLiveRecommendConfig>): ActivityLiveRecommendConfig {
        const message = { name: "", level: "", startTime: 0n, endTime: 0n, liveType: 0, actorUids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityLiveRecommendConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityLiveRecommendConfig): ActivityLiveRecommendConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string level */ 2:
                    message.level = reader.string();
                    break;
                case /* int64 start_time */ 3:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 4:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 live_type */ 5:
                    message.liveType = reader.int32();
                    break;
                case /* repeated int64 actor_uids */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.actorUids.push(reader.int64().toBigInt());
                    else
                        message.actorUids.push(reader.int64().toBigInt());
                    break;
                case /* data.ActivityLiveRecommendConfig.EpisodeInfo episode_info */ 7:
                    message.episodeInfo = ActivityLiveRecommendConfig_EpisodeInfo.internalBinaryRead(reader, reader.uint32(), options, message.episodeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityLiveRecommendConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string level = 2; */
        if (message.level !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.level);
        /* int64 start_time = 3; */
        if (message.startTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 4; */
        if (message.endTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.endTime);
        /* int32 live_type = 5; */
        if (message.liveType !== 0)
            writer.tag(5, WireType.Varint).int32(message.liveType);
        /* repeated int64 actor_uids = 6; */
        if (message.actorUids.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.actorUids.length; i++)
                writer.int64(message.actorUids[i]);
            writer.join();
        }
        /* data.ActivityLiveRecommendConfig.EpisodeInfo episode_info = 7; */
        if (message.episodeInfo)
            ActivityLiveRecommendConfig_EpisodeInfo.internalBinaryWrite(message.episodeInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ActivityLiveRecommendConfig
 */
export const ActivityLiveRecommendConfig = new ActivityLiveRecommendConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityLiveRecommendConfig_EpisodeInfo$Type extends MessageType<ActivityLiveRecommendConfig_EpisodeInfo> {
    constructor() {
        super("data.ActivityLiveRecommendConfig.EpisodeInfo", [
            { no: 1, name: "content_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityLiveRecommendConfig_EpisodeInfo>): ActivityLiveRecommendConfig_EpisodeInfo {
        const message = { contentType: 0, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityLiveRecommendConfig_EpisodeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityLiveRecommendConfig_EpisodeInfo): ActivityLiveRecommendConfig_EpisodeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 content_type */ 1:
                    message.contentType = reader.int32();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityLiveRecommendConfig_EpisodeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 content_type = 1; */
        if (message.contentType !== 0)
            writer.tag(1, WireType.Varint).int32(message.contentType);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ActivityLiveRecommendConfig.EpisodeInfo
 */
export const ActivityLiveRecommendConfig_EpisodeInfo = new ActivityLiveRecommendConfig_EpisodeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelData$Type extends MessageType<RoomChannelData> {
    constructor() {
        super("data.RoomChannelData", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "channel_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomChannelInfo },
            { no: 3, name: "support_room_channel_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "limit_of_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "can_create", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "background", kind: "message", T: () => Image },
            { no: 7, name: "tab_landing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "can_link_mic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 101, name: "hide_landscape", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelData>): RoomChannelData {
        const message = { status: 0, channelList: [], supportRoomChannelMode: 0, limitOfNum: 0, canCreate: false, tabLanding: false, canLinkMic: false, hideLandscape: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelData): RoomChannelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* repeated data.RoomChannelInfo channel_list */ 2:
                    message.channelList.push(RoomChannelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 support_room_channel_mode */ 3:
                    message.supportRoomChannelMode = reader.int32();
                    break;
                case /* int32 limit_of_num */ 4:
                    message.limitOfNum = reader.int32();
                    break;
                case /* bool can_create */ 5:
                    message.canCreate = reader.bool();
                    break;
                case /* data.Image background */ 6:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* bool tab_landing */ 7:
                    message.tabLanding = reader.bool();
                    break;
                case /* bool can_link_mic */ 8:
                    message.canLinkMic = reader.bool();
                    break;
                case /* bool hide_landscape */ 101:
                    message.hideLandscape = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* repeated data.RoomChannelInfo channel_list = 2; */
        for (let i = 0; i < message.channelList.length; i++)
            RoomChannelInfo.internalBinaryWrite(message.channelList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 support_room_channel_mode = 3; */
        if (message.supportRoomChannelMode !== 0)
            writer.tag(3, WireType.Varint).int32(message.supportRoomChannelMode);
        /* int32 limit_of_num = 4; */
        if (message.limitOfNum !== 0)
            writer.tag(4, WireType.Varint).int32(message.limitOfNum);
        /* bool can_create = 5; */
        if (message.canCreate !== false)
            writer.tag(5, WireType.Varint).bool(message.canCreate);
        /* data.Image background = 6; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool tab_landing = 7; */
        if (message.tabLanding !== false)
            writer.tag(7, WireType.Varint).bool(message.tabLanding);
        /* bool can_link_mic = 8; */
        if (message.canLinkMic !== false)
            writer.tag(8, WireType.Varint).bool(message.canLinkMic);
        /* bool hide_landscape = 101; */
        if (message.hideLandscape !== false)
            writer.tag(101, WireType.Varint).bool(message.hideLandscape);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomChannelData
 */
export const RoomChannelData = new RoomChannelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PackMetaInfo$Type extends MessageType<PackMetaInfo> {
    constructor() {
        super("data.PackMetaInfo", [
            { no: 1, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "env", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "cluster", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PackMetaInfo>): PackMetaInfo {
        const message = { scene: "", env: "", dc: "", traceId: "", cluster: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PackMetaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PackMetaInfo): PackMetaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scene */ 1:
                    message.scene = reader.string();
                    break;
                case /* string env */ 2:
                    message.env = reader.string();
                    break;
                case /* string dc */ 3:
                    message.dc = reader.string();
                    break;
                case /* string trace_id */ 4:
                    message.traceId = reader.string();
                    break;
                case /* string cluster */ 5:
                    message.cluster = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PackMetaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scene = 1; */
        if (message.scene !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scene);
        /* string env = 2; */
        if (message.env !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.env);
        /* string dc = 3; */
        if (message.dc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dc);
        /* string trace_id = 4; */
        if (message.traceId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.traceId);
        /* string cluster = 5; */
        if (message.cluster !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cluster);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PackMetaInfo
 */
export const PackMetaInfo = new PackMetaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeDisplayConfig$Type extends MessageType<LikeDisplayConfig> {
    constructor() {
        super("data.LikeDisplayConfig", [
            { no: 1, name: "show_text", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "display_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LikeDisplayConfig>): LikeDisplayConfig {
        const message = { showText: 0, displayText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeDisplayConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeDisplayConfig): LikeDisplayConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 show_text */ 1:
                    message.showText = reader.int32();
                    break;
                case /* string display_text */ 2:
                    message.displayText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeDisplayConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 show_text = 1; */
        if (message.showText !== 0)
            writer.tag(1, WireType.Varint).int32(message.showText);
        /* string display_text = 2; */
        if (message.displayText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LikeDisplayConfig
 */
export const LikeDisplayConfig = new LikeDisplayConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchRoomData$Type extends MessageType<MatchRoomData> {
    constructor() {
        super("data.MatchRoomData", [
            { no: 1, name: "drawer", kind: "message", T: () => MatchDrawer },
            { no: 2, name: "match", kind: "message", T: () => ToutiaoMatchData },
            { no: 3, name: "drawer_label", kind: "message", T: () => Image },
            { no: 4, name: "pcu_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "drawer_official_label", kind: "message", T: () => Image },
            { no: 6, name: "match_background", kind: "message", T: () => Image },
            { no: 7, name: "match_user_info", kind: "message", T: () => MatchUserInfo }
        ]);
    }
    create(value?: PartialMessage<MatchRoomData>): MatchRoomData {
        const message = { pcuStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchRoomData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchRoomData): MatchRoomData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MatchDrawer drawer */ 1:
                    message.drawer = MatchDrawer.internalBinaryRead(reader, reader.uint32(), options, message.drawer);
                    break;
                case /* data.ToutiaoMatchData match */ 2:
                    message.match = ToutiaoMatchData.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                case /* data.Image drawer_label */ 3:
                    message.drawerLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.drawerLabel);
                    break;
                case /* string pcu_str */ 4:
                    message.pcuStr = reader.string();
                    break;
                case /* data.Image drawer_official_label */ 5:
                    message.drawerOfficialLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.drawerOfficialLabel);
                    break;
                case /* data.Image match_background */ 6:
                    message.matchBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.matchBackground);
                    break;
                case /* data.MatchUserInfo match_user_info */ 7:
                    message.matchUserInfo = MatchUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.matchUserInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchRoomData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MatchDrawer drawer = 1; */
        if (message.drawer)
            MatchDrawer.internalBinaryWrite(message.drawer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.ToutiaoMatchData match = 2; */
        if (message.match)
            ToutiaoMatchData.internalBinaryWrite(message.match, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image drawer_label = 3; */
        if (message.drawerLabel)
            Image.internalBinaryWrite(message.drawerLabel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string pcu_str = 4; */
        if (message.pcuStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pcuStr);
        /* data.Image drawer_official_label = 5; */
        if (message.drawerOfficialLabel)
            Image.internalBinaryWrite(message.drawerOfficialLabel, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image match_background = 6; */
        if (message.matchBackground)
            Image.internalBinaryWrite(message.matchBackground, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.MatchUserInfo match_user_info = 7; */
        if (message.matchUserInfo)
            MatchUserInfo.internalBinaryWrite(message.matchUserInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchRoomData
 */
export const MatchRoomData = new MatchRoomData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchUserInfo$Type extends MessageType<MatchUserInfo> {
    constructor() {
        super("data.MatchUserInfo", [
            { no: 1, name: "user_team_info", kind: "message", T: () => TeamInfo },
            { no: 3, name: "is_activity_account", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "need_retry", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MatchUserInfo>): MatchUserInfo {
        const message = { isActivityAccount: false, needRetry: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchUserInfo): MatchUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.TeamInfo user_team_info */ 1:
                    message.userTeamInfo = TeamInfo.internalBinaryRead(reader, reader.uint32(), options, message.userTeamInfo);
                    break;
                case /* bool is_activity_account */ 3:
                    message.isActivityAccount = reader.bool();
                    break;
                case /* bool need_retry */ 4:
                    message.needRetry = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.TeamInfo user_team_info = 1; */
        if (message.userTeamInfo)
            TeamInfo.internalBinaryWrite(message.userTeamInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_activity_account = 3; */
        if (message.isActivityAccount !== false)
            writer.tag(3, WireType.Varint).bool(message.isActivityAccount);
        /* bool need_retry = 4; */
        if (message.needRetry !== false)
            writer.tag(4, WireType.Varint).bool(message.needRetry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchUserInfo
 */
export const MatchUserInfo = new MatchUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamInfo$Type extends MessageType<TeamInfo> {
    constructor() {
        super("data.TeamInfo", [
            { no: 1, name: "team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "team_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "team_icon", kind: "message", T: () => Image },
            { no: 5, name: "team_badge", kind: "message", T: () => Image },
            { no: 6, name: "team_background", kind: "message", T: () => Image },
            { no: 7, name: "system_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "team_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "team_avatar_box", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<TeamInfo>): TeamInfo {
        const message = { teamId: 0n, teamName: "", schemaUrl: "", systemMsg: "", teamIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamInfo): TeamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 team_id */ 1:
                    message.teamId = reader.int64().toBigInt();
                    break;
                case /* string team_name */ 2:
                    message.teamName = reader.string();
                    break;
                case /* string schema_url */ 3:
                    message.schemaUrl = reader.string();
                    break;
                case /* data.Image team_icon */ 4:
                    message.teamIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.teamIcon);
                    break;
                case /* data.Image team_badge */ 5:
                    message.teamBadge = Image.internalBinaryRead(reader, reader.uint32(), options, message.teamBadge);
                    break;
                case /* data.Image team_background */ 6:
                    message.teamBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.teamBackground);
                    break;
                case /* string system_msg */ 7:
                    message.systemMsg = reader.string();
                    break;
                case /* string team_id_str */ 8:
                    message.teamIdStr = reader.string();
                    break;
                case /* data.Image team_avatar_box */ 9:
                    message.teamAvatarBox = Image.internalBinaryRead(reader, reader.uint32(), options, message.teamAvatarBox);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.teamId);
        /* string team_name = 2; */
        if (message.teamName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.teamName);
        /* string schema_url = 3; */
        if (message.schemaUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schemaUrl);
        /* data.Image team_icon = 4; */
        if (message.teamIcon)
            Image.internalBinaryWrite(message.teamIcon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image team_badge = 5; */
        if (message.teamBadge)
            Image.internalBinaryWrite(message.teamBadge, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image team_background = 6; */
        if (message.teamBackground)
            Image.internalBinaryWrite(message.teamBackground, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string system_msg = 7; */
        if (message.systemMsg !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.systemMsg);
        /* string team_id_str = 8; */
        if (message.teamIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.teamIdStr);
        /* data.Image team_avatar_box = 9; */
        if (message.teamAvatarBox)
            Image.internalBinaryWrite(message.teamAvatarBox, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamInfo
 */
export const TeamInfo = new TeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterPublicAreaAnimation$Type extends MessageType<EnterPublicAreaAnimation> {
    constructor() {
        super("data.EnterPublicAreaAnimation", [
            { no: 1, name: "public_area_effect_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EnterPublicAreaAnimation>): EnterPublicAreaAnimation {
        const message = { publicAreaEffectUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterPublicAreaAnimation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterPublicAreaAnimation): EnterPublicAreaAnimation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string public_area_effect_url */ 1:
                    message.publicAreaEffectUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterPublicAreaAnimation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string public_area_effect_url = 1; */
        if (message.publicAreaEffectUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicAreaEffectUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EnterPublicAreaAnimation
 */
export const EnterPublicAreaAnimation = new EnterPublicAreaAnimation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftPanelTopperTray$Type extends MessageType<GiftPanelTopperTray> {
    constructor() {
        super("data.GiftPanelTopperTray", [
            { no: 1, name: "panel_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period_texts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GiftPanelTopperTray_PeriodText },
            { no: 3, name: "display_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "jump_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "animation_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "animation_gap", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "animation_freq", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "text_round_period", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiftPanelTopperTray>): GiftPanelTopperTray {
        const message = { panelSchema: "", periodTexts: [], displayDuration: 0, jumpSchema: "", animationType: "", animationGap: 0, animationFreq: 0, textRoundPeriod: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftPanelTopperTray>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftPanelTopperTray): GiftPanelTopperTray {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string panel_schema */ 1:
                    message.panelSchema = reader.string();
                    break;
                case /* repeated data.GiftPanelTopperTray.PeriodText period_texts */ 2:
                    message.periodTexts.push(GiftPanelTopperTray_PeriodText.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 display_duration */ 3:
                    message.displayDuration = reader.int32();
                    break;
                case /* string jump_schema */ 4:
                    message.jumpSchema = reader.string();
                    break;
                case /* string animation_type */ 5:
                    message.animationType = reader.string();
                    break;
                case /* int32 animation_gap */ 6:
                    message.animationGap = reader.int32();
                    break;
                case /* int32 animation_freq */ 7:
                    message.animationFreq = reader.int32();
                    break;
                case /* int32 text_round_period */ 8:
                    message.textRoundPeriod = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftPanelTopperTray, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string panel_schema = 1; */
        if (message.panelSchema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.panelSchema);
        /* repeated data.GiftPanelTopperTray.PeriodText period_texts = 2; */
        for (let i = 0; i < message.periodTexts.length; i++)
            GiftPanelTopperTray_PeriodText.internalBinaryWrite(message.periodTexts[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 display_duration = 3; */
        if (message.displayDuration !== 0)
            writer.tag(3, WireType.Varint).int32(message.displayDuration);
        /* string jump_schema = 4; */
        if (message.jumpSchema !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jumpSchema);
        /* string animation_type = 5; */
        if (message.animationType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.animationType);
        /* int32 animation_gap = 6; */
        if (message.animationGap !== 0)
            writer.tag(6, WireType.Varint).int32(message.animationGap);
        /* int32 animation_freq = 7; */
        if (message.animationFreq !== 0)
            writer.tag(7, WireType.Varint).int32(message.animationFreq);
        /* int32 text_round_period = 8; */
        if (message.textRoundPeriod !== 0)
            writer.tag(8, WireType.Varint).int32(message.textRoundPeriod);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftPanelTopperTray
 */
export const GiftPanelTopperTray = new GiftPanelTopperTray$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftPanelTopperTray_PeriodText$Type extends MessageType<GiftPanelTopperTray_PeriodText> {
    constructor() {
        super("data.GiftPanelTopperTray.PeriodText", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "daily_show_times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "panel_enum", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "key", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiftPanelTopperTray_PeriodText>): GiftPanelTopperTray_PeriodText {
        const message = { text: "", dailyShowTimes: 0, priority: 0, panelEnum: 0, key: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftPanelTopperTray_PeriodText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftPanelTopperTray_PeriodText): GiftPanelTopperTray_PeriodText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 daily_show_times */ 2:
                    message.dailyShowTimes = reader.int32();
                    break;
                case /* int32 priority */ 3:
                    message.priority = reader.int32();
                    break;
                case /* int32 panel_enum */ 4:
                    message.panelEnum = reader.int32();
                    break;
                case /* int32 key */ 5:
                    message.key = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftPanelTopperTray_PeriodText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 daily_show_times = 2; */
        if (message.dailyShowTimes !== 0)
            writer.tag(2, WireType.Varint).int32(message.dailyShowTimes);
        /* int32 priority = 3; */
        if (message.priority !== 0)
            writer.tag(3, WireType.Varint).int32(message.priority);
        /* int32 panel_enum = 4; */
        if (message.panelEnum !== 0)
            writer.tag(4, WireType.Varint).int32(message.panelEnum);
        /* int32 key = 5; */
        if (message.key !== 0)
            writer.tag(5, WireType.Varint).int32(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftPanelTopperTray.PeriodText
 */
export const GiftPanelTopperTray_PeriodText = new GiftPanelTopperTray_PeriodText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterGiftAnimation$Type extends MessageType<EnterGiftAnimation> {
    constructor() {
        super("data.EnterGiftAnimation", [
            { no: 1, name: "gift_effect_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "display_gap", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "display_freq", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterGiftAnimation>): EnterGiftAnimation {
        const message = { giftEffectId: 0, displayGap: 0, displayFreq: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterGiftAnimation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterGiftAnimation): EnterGiftAnimation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 gift_effect_id */ 1:
                    message.giftEffectId = reader.int32();
                    break;
                case /* int32 display_gap */ 2:
                    message.displayGap = reader.int32();
                    break;
                case /* int32 display_freq */ 3:
                    message.displayFreq = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterGiftAnimation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 gift_effect_id = 1; */
        if (message.giftEffectId !== 0)
            writer.tag(1, WireType.Varint).int32(message.giftEffectId);
        /* int32 display_gap = 2; */
        if (message.displayGap !== 0)
            writer.tag(2, WireType.Varint).int32(message.displayGap);
        /* int32 display_freq = 3; */
        if (message.displayFreq !== 0)
            writer.tag(3, WireType.Varint).int32(message.displayFreq);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EnterGiftAnimation
 */
export const EnterGiftAnimation = new EnterGiftAnimation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CircleInfo$Type extends MessageType<CircleInfo> {
    constructor() {
        super("data.CircleInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover_img", kind: "message", T: () => Image },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CircleInfo>): CircleInfo {
        const message = { id: 0n, name: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CircleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CircleInfo): CircleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* data.Image cover_img */ 3:
                    message.coverImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.coverImg);
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CircleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* data.Image cover_img = 3; */
        if (message.coverImg)
            Image.internalBinaryWrite(message.coverImg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CircleInfo
 */
export const CircleInfo = new CircleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EasterEggData$Type extends MessageType<EasterEggData> {
    constructor() {
        super("data.EasterEggData", [
            { no: 1, name: "has_easter_egg", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "stage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "total_stage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "effects_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "start_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "end_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "panel_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "entrance_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<EasterEggData>): EasterEggData {
        const message = { hasEasterEgg: false, stage: 0n, totalStage: 0n, effectsNum: 0n, startCount: 0n, endCount: 0n, count: 0n, panelUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EasterEggData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EasterEggData): EasterEggData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has_easter_egg */ 1:
                    message.hasEasterEgg = reader.bool();
                    break;
                case /* int64 stage */ 2:
                    message.stage = reader.int64().toBigInt();
                    break;
                case /* int64 total_stage */ 3:
                    message.totalStage = reader.int64().toBigInt();
                    break;
                case /* int64 effects_num */ 4:
                    message.effectsNum = reader.int64().toBigInt();
                    break;
                case /* int64 start_count */ 5:
                    message.startCount = reader.int64().toBigInt();
                    break;
                case /* int64 end_count */ 6:
                    message.endCount = reader.int64().toBigInt();
                    break;
                case /* int64 count */ 7:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* string panel_url */ 8:
                    message.panelUrl = reader.string();
                    break;
                case /* data.Image entrance_icon */ 9:
                    message.entranceIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.entranceIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EasterEggData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool has_easter_egg = 1; */
        if (message.hasEasterEgg !== false)
            writer.tag(1, WireType.Varint).bool(message.hasEasterEgg);
        /* int64 stage = 2; */
        if (message.stage !== 0n)
            writer.tag(2, WireType.Varint).int64(message.stage);
        /* int64 total_stage = 3; */
        if (message.totalStage !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalStage);
        /* int64 effects_num = 4; */
        if (message.effectsNum !== 0n)
            writer.tag(4, WireType.Varint).int64(message.effectsNum);
        /* int64 start_count = 5; */
        if (message.startCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.startCount);
        /* int64 end_count = 6; */
        if (message.endCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.endCount);
        /* int64 count = 7; */
        if (message.count !== 0n)
            writer.tag(7, WireType.Varint).int64(message.count);
        /* string panel_url = 8; */
        if (message.panelUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.panelUrl);
        /* data.Image entrance_icon = 9; */
        if (message.entranceIcon)
            Image.internalBinaryWrite(message.entranceIcon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EasterEggData
 */
export const EasterEggData = new EasterEggData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomLiveCard$Type extends MessageType<EcomLiveCard> {
    constructor() {
        super("data.EcomLiveCard", [
            { no: 1, name: "product", kind: "message", T: () => EcomProduct },
            { no: 2, name: "icon", kind: "message", T: () => EcomIcon },
            { no: 3, name: "campaign", kind: "message", T: () => EcomCampaign }
        ]);
    }
    create(value?: PartialMessage<EcomLiveCard>): EcomLiveCard {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomLiveCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomLiveCard): EcomLiveCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.EcomProduct product */ 1:
                    message.product = EcomProduct.internalBinaryRead(reader, reader.uint32(), options, message.product);
                    break;
                case /* data.EcomIcon icon */ 2:
                    message.icon = EcomIcon.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* data.EcomCampaign campaign */ 3:
                    message.campaign = EcomCampaign.internalBinaryRead(reader, reader.uint32(), options, message.campaign);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomLiveCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.EcomProduct product = 1; */
        if (message.product)
            EcomProduct.internalBinaryWrite(message.product, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.EcomIcon icon = 2; */
        if (message.icon)
            EcomIcon.internalBinaryWrite(message.icon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.EcomCampaign campaign = 3; */
        if (message.campaign)
            EcomCampaign.internalBinaryWrite(message.campaign, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomLiveCard
 */
export const EcomLiveCard = new EcomLiveCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomProduct$Type extends MessageType<EcomProduct> {
    constructor() {
        super("data.EcomProduct", [
            { no: 1, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cover_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "price", kind: "message", T: () => EcomPrice },
            { no: 6, name: "regular_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "deposit_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EcomProduct>): EcomProduct {
        const message = { promotionId: 0n, productId: 0n, title: "", coverImage: "", regularPrice: 0n, depositPrice: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomProduct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomProduct): EcomProduct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 promotion_id */ 1:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* int64 product_id */ 2:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string cover_image */ 4:
                    message.coverImage = reader.string();
                    break;
                case /* data.EcomPrice price */ 5:
                    message.price = EcomPrice.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* int64 regular_price */ 6:
                    message.regularPrice = reader.int64().toBigInt();
                    break;
                case /* int64 deposit_price */ 7:
                    message.depositPrice = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomProduct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 promotion_id = 1; */
        if (message.promotionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.promotionId);
        /* int64 product_id = 2; */
        if (message.productId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.productId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string cover_image = 4; */
        if (message.coverImage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.coverImage);
        /* data.EcomPrice price = 5; */
        if (message.price)
            EcomPrice.internalBinaryWrite(message.price, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 regular_price = 6; */
        if (message.regularPrice !== 0n)
            writer.tag(6, WireType.Varint).int64(message.regularPrice);
        /* int64 deposit_price = 7; */
        if (message.depositPrice !== 0n)
            writer.tag(7, WireType.Varint).int64(message.depositPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomProduct
 */
export const EcomProduct = new EcomProduct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomPrice$Type extends MessageType<EcomPrice> {
    constructor() {
        super("data.EcomPrice", [
            { no: 1, name: "prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "suffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "by_cent", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "format_price", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EcomPrice>): EcomPrice {
        const message = { prefix: "", suffix: "", byCent: 0n, formatPrice: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomPrice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomPrice): EcomPrice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prefix */ 1:
                    message.prefix = reader.string();
                    break;
                case /* string suffix */ 2:
                    message.suffix = reader.string();
                    break;
                case /* int64 by_cent */ 3:
                    message.byCent = reader.int64().toBigInt();
                    break;
                case /* string format_price */ 4:
                    message.formatPrice = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomPrice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prefix = 1; */
        if (message.prefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prefix);
        /* string suffix = 2; */
        if (message.suffix !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.suffix);
        /* int64 by_cent = 3; */
        if (message.byCent !== 0n)
            writer.tag(3, WireType.Varint).int64(message.byCent);
        /* string format_price = 4; */
        if (message.formatPrice !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.formatPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomPrice
 */
export const EcomPrice = new EcomPrice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomIcon$Type extends MessageType<EcomIcon> {
    constructor() {
        super("data.EcomIcon", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EcomIcon>): EcomIcon {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomIcon): EcomIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomIcon
 */
export const EcomIcon = new EcomIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomCampaign$Type extends MessageType<EcomCampaign> {
    constructor() {
        super("data.EcomCampaign", [
            { no: 1, name: "remaining_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "auction", kind: "message", T: () => EcomAuction },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EcomCampaign>): EcomCampaign {
        const message = { remainingSeconds: 0n, type: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomCampaign>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomCampaign): EcomCampaign {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 remaining_seconds */ 1:
                    message.remainingSeconds = reader.int64().toBigInt();
                    break;
                case /* data.EcomAuction auction */ 2:
                    message.auction = EcomAuction.internalBinaryRead(reader, reader.uint32(), options, message.auction);
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomCampaign, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 remaining_seconds = 1; */
        if (message.remainingSeconds !== 0n)
            writer.tag(1, WireType.Varint).int64(message.remainingSeconds);
        /* data.EcomAuction auction = 2; */
        if (message.auction)
            EcomAuction.internalBinaryWrite(message.auction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 type = 3; */
        if (message.type !== 0n)
            writer.tag(3, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomCampaign
 */
export const EcomCampaign = new EcomCampaign$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomAuction$Type extends MessageType<EcomAuction> {
    constructor() {
        super("data.EcomAuction", [
            { no: 1, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "price_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user", kind: "message", T: () => EcomBidder },
            { no: 5, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EcomAuction>): EcomAuction {
        const message = { price: 0n, priceLabel: "", buttonLabel: "", status: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomAuction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomAuction): EcomAuction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 price */ 1:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* string price_label */ 2:
                    message.priceLabel = reader.string();
                    break;
                case /* string button_label */ 3:
                    message.buttonLabel = reader.string();
                    break;
                case /* data.EcomBidder user */ 4:
                    message.user = EcomBidder.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 status */ 5:
                    message.status = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomAuction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 price = 1; */
        if (message.price !== 0n)
            writer.tag(1, WireType.Varint).int64(message.price);
        /* string price_label = 2; */
        if (message.priceLabel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.priceLabel);
        /* string button_label = 3; */
        if (message.buttonLabel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.buttonLabel);
        /* data.EcomBidder user = 4; */
        if (message.user)
            EcomBidder.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 status = 5; */
        if (message.status !== 0n)
            writer.tag(5, WireType.Varint).int64(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomAuction
 */
export const EcomAuction = new EcomAuction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomBidder$Type extends MessageType<EcomBidder> {
    constructor() {
        super("data.EcomBidder", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar", kind: "message", T: () => EcomAvatar }
        ]);
    }
    create(value?: PartialMessage<EcomBidder>): EcomBidder {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomBidder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomBidder): EcomBidder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* data.EcomAvatar avatar */ 2:
                    message.avatar = EcomAvatar.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomBidder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* data.EcomAvatar avatar = 2; */
        if (message.avatar)
            EcomAvatar.internalBinaryWrite(message.avatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomBidder
 */
export const EcomBidder = new EcomBidder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomAvatar$Type extends MessageType<EcomAvatar> {
    constructor() {
        super("data.EcomAvatar", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EcomAvatar>): EcomAvatar {
        const message = { url: "", width: 0n, height: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomAvatar): EcomAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* int64 width */ 2:
                    message.width = reader.int64().toBigInt();
                    break;
                case /* int64 height */ 3:
                    message.height = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* int64 width = 2; */
        if (message.width !== 0n)
            writer.tag(2, WireType.Varint).int64(message.width);
        /* int64 height = 3; */
        if (message.height !== 0n)
            writer.tag(3, WireType.Varint).int64(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomAvatar
 */
export const EcomAvatar = new EcomAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomPop$Type extends MessageType<EcomPop> {
    constructor() {
        super("data.EcomPop", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "min_price", kind: "message", T: () => EcomPrice },
            { no: 6, name: "selling_point", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "jumanji_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EcomPop>): EcomPop {
        const message = { productId: 0n, promotionId: 0n, title: "", cover: "", sellingPoint: "", jumanjiJson: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomPop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomPop): EcomPop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int64 promotion_id */ 2:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string cover */ 4:
                    message.cover = reader.string();
                    break;
                case /* data.EcomPrice min_price */ 5:
                    message.minPrice = EcomPrice.internalBinaryRead(reader, reader.uint32(), options, message.minPrice);
                    break;
                case /* string selling_point */ 6:
                    message.sellingPoint = reader.string();
                    break;
                case /* string jumanji_json */ 7:
                    message.jumanjiJson = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomPop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        /* int64 promotion_id = 2; */
        if (message.promotionId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.promotionId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string cover = 4; */
        if (message.cover !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cover);
        /* data.EcomPrice min_price = 5; */
        if (message.minPrice)
            EcomPrice.internalBinaryWrite(message.minPrice, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string selling_point = 6; */
        if (message.sellingPoint !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.sellingPoint);
        /* string jumanji_json = 7; */
        if (message.jumanjiJson !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.jumanjiJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomPop
 */
export const EcomPop = new EcomPop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Coupon$Type extends MessageType<Coupon> {
    constructor() {
        super("data.Coupon", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expire_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "coupon_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "coupon_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "countdown", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "show_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "coupon_meta_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "coupon_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Coupon>): Coupon {
        const message = { icon: "", startTime: "", expireTime: "", couponName: "", url: "", couponString: "", countdown: 0n, showType: 0n, couponMetaId: "", couponType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Coupon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Coupon): Coupon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string start_time */ 2:
                    message.startTime = reader.string();
                    break;
                case /* string expire_time */ 3:
                    message.expireTime = reader.string();
                    break;
                case /* string coupon_name */ 4:
                    message.couponName = reader.string();
                    break;
                case /* string url */ 5:
                    message.url = reader.string();
                    break;
                case /* string coupon_string */ 6:
                    message.couponString = reader.string();
                    break;
                case /* int64 countdown */ 7:
                    message.countdown = reader.int64().toBigInt();
                    break;
                case /* int64 show_type */ 8:
                    message.showType = reader.int64().toBigInt();
                    break;
                case /* string coupon_meta_id */ 9:
                    message.couponMetaId = reader.string();
                    break;
                case /* string coupon_type */ 10:
                    message.couponType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Coupon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string start_time = 2; */
        if (message.startTime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startTime);
        /* string expire_time = 3; */
        if (message.expireTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.expireTime);
        /* string coupon_name = 4; */
        if (message.couponName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.couponName);
        /* string url = 5; */
        if (message.url !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.url);
        /* string coupon_string = 6; */
        if (message.couponString !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.couponString);
        /* int64 countdown = 7; */
        if (message.countdown !== 0n)
            writer.tag(7, WireType.Varint).int64(message.countdown);
        /* int64 show_type = 8; */
        if (message.showType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.showType);
        /* string coupon_meta_id = 9; */
        if (message.couponMetaId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.couponMetaId);
        /* string coupon_type = 10; */
        if (message.couponType !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.couponType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Coupon
 */
export const Coupon = new Coupon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Redpack$Type extends MessageType<Redpack> {
    constructor() {
        super("data.Redpack", [
            { no: 1, name: "redpack_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "redpack_activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "redpack_activity_display_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_apply_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end_apply_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "preheat_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "server_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "has_applied", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Redpack>): Redpack {
        const message = { redpackType: 0n, redpackActivityId: 0n, redpackActivityDisplayText: "", startApplyTime: 0n, endApplyTime: 0n, preheatTime: 0n, serverTime: 0n, hasApplied: 0n, iconUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Redpack>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Redpack): Redpack {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 redpack_type */ 1:
                    message.redpackType = reader.int64().toBigInt();
                    break;
                case /* int64 redpack_activity_id */ 2:
                    message.redpackActivityId = reader.int64().toBigInt();
                    break;
                case /* string redpack_activity_display_text */ 3:
                    message.redpackActivityDisplayText = reader.string();
                    break;
                case /* int64 start_apply_time */ 4:
                    message.startApplyTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_apply_time */ 5:
                    message.endApplyTime = reader.int64().toBigInt();
                    break;
                case /* int64 preheat_time */ 6:
                    message.preheatTime = reader.int64().toBigInt();
                    break;
                case /* int64 server_time */ 7:
                    message.serverTime = reader.int64().toBigInt();
                    break;
                case /* int64 has_applied */ 8:
                    message.hasApplied = reader.int64().toBigInt();
                    break;
                case /* string icon_url */ 9:
                    message.iconUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Redpack, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 redpack_type = 1; */
        if (message.redpackType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.redpackType);
        /* int64 redpack_activity_id = 2; */
        if (message.redpackActivityId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.redpackActivityId);
        /* string redpack_activity_display_text = 3; */
        if (message.redpackActivityDisplayText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.redpackActivityDisplayText);
        /* int64 start_apply_time = 4; */
        if (message.startApplyTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startApplyTime);
        /* int64 end_apply_time = 5; */
        if (message.endApplyTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.endApplyTime);
        /* int64 preheat_time = 6; */
        if (message.preheatTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.preheatTime);
        /* int64 server_time = 7; */
        if (message.serverTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.serverTime);
        /* int64 has_applied = 8; */
        if (message.hasApplied !== 0n)
            writer.tag(8, WireType.Varint).int64(message.hasApplied);
        /* string icon_url = 9; */
        if (message.iconUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.iconUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Redpack
 */
export const Redpack = new Redpack$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomGoodsCard$Type extends MessageType<EcomGoodsCard> {
    constructor() {
        super("data.EcomGoodsCard", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "min_price", kind: "message", T: () => EcomPrice },
            { no: 5, name: "coupon", kind: "message", T: () => Coupon },
            { no: 6, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "jump_destination", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "card_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "redpack", kind: "message", T: () => Redpack }
        ]);
    }
    create(value?: PartialMessage<EcomGoodsCard>): EcomGoodsCard {
        const message = { productId: 0n, title: "", cover: "", promotionId: 0n, jumpDestination: 0n, cardType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomGoodsCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomGoodsCard): EcomGoodsCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* data.EcomPrice min_price */ 4:
                    message.minPrice = EcomPrice.internalBinaryRead(reader, reader.uint32(), options, message.minPrice);
                    break;
                case /* data.Coupon coupon */ 5:
                    message.coupon = Coupon.internalBinaryRead(reader, reader.uint32(), options, message.coupon);
                    break;
                case /* int64 promotion_id */ 6:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* int64 jump_destination */ 7:
                    message.jumpDestination = reader.int64().toBigInt();
                    break;
                case /* int64 card_type */ 8:
                    message.cardType = reader.int64().toBigInt();
                    break;
                case /* data.Redpack redpack */ 9:
                    message.redpack = Redpack.internalBinaryRead(reader, reader.uint32(), options, message.redpack);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomGoodsCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* data.EcomPrice min_price = 4; */
        if (message.minPrice)
            EcomPrice.internalBinaryWrite(message.minPrice, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Coupon coupon = 5; */
        if (message.coupon)
            Coupon.internalBinaryWrite(message.coupon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 promotion_id = 6; */
        if (message.promotionId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.promotionId);
        /* int64 jump_destination = 7; */
        if (message.jumpDestination !== 0n)
            writer.tag(7, WireType.Varint).int64(message.jumpDestination);
        /* int64 card_type = 8; */
        if (message.cardType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.cardType);
        /* data.Redpack redpack = 9; */
        if (message.redpack)
            Redpack.internalBinaryWrite(message.redpack, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EcomGoodsCard
 */
export const EcomGoodsCard = new EcomGoodsCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedsShowInfo$Type extends MessageType<RedsShowInfo> {
    constructor() {
        super("data.RedsShowInfo", [
            { no: 1, name: "data_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "full_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RedsShowInfo>): RedsShowInfo {
        const message = { dataType: 0, fullText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedsShowInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedsShowInfo): RedsShowInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 data_type */ 1:
                    message.dataType = reader.int32();
                    break;
                case /* string full_text */ 2:
                    message.fullText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedsShowInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 data_type = 1; */
        if (message.dataType !== 0)
            writer.tag(1, WireType.Varint).int32(message.dataType);
        /* string full_text = 2; */
        if (message.fullText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fullText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RedsShowInfo
 */
export const RedsShowInfo = new RedsShowInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchExtraBase$Type extends MessageType<SwitchExtraBase> {
    constructor() {
        super("data.SwitchExtraBase", [
            { no: 1, name: "schema_for_check", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchExtraBase>): SwitchExtraBase {
        const message = { schemaForCheck: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchExtraBase>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchExtraBase): SwitchExtraBase {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema_for_check */ 1:
                    message.schemaForCheck = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchExtraBase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema_for_check = 1; */
        if (message.schemaForCheck !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schemaForCheck);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SwitchExtraBase
 */
export const SwitchExtraBase = new SwitchExtraBase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchExtraForOpen$Type extends MessageType<SwitchExtraForOpen> {
    constructor() {
        super("data.SwitchExtraForOpen", [
            { no: 1, name: "schema_for_open", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchExtraForOpen>): SwitchExtraForOpen {
        const message = { schemaForOpen: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchExtraForOpen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchExtraForOpen): SwitchExtraForOpen {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema_for_open */ 1:
                    message.schemaForOpen = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchExtraForOpen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema_for_open = 1; */
        if (message.schemaForOpen !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schemaForOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SwitchExtraForOpen
 */
export const SwitchExtraForOpen = new SwitchExtraForOpen$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInvite$Type extends MessageType<GameInvite> {
    constructor() {
        super("data.GameInvite", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "kind", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "now_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "expire_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameInvite>): GameInvite {
        const message = { id: 0n, kind: 0n, createTime: 0n, nowTime: 0n, expireTime: 0n, status: 0n, roomId: 0n, idStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameInvite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInvite): GameInvite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 kind */ 2:
                    message.kind = reader.int64().toBigInt();
                    break;
                case /* int64 create_time */ 3:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int64 now_time */ 4:
                    message.nowTime = reader.int64().toBigInt();
                    break;
                case /* int64 expire_time */ 5:
                    message.expireTime = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 6:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 7:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 8:
                    message.idStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInvite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 kind = 2; */
        if (message.kind !== 0n)
            writer.tag(2, WireType.Varint).int64(message.kind);
        /* int64 create_time = 3; */
        if (message.createTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.createTime);
        /* int64 now_time = 4; */
        if (message.nowTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.nowTime);
        /* int64 expire_time = 5; */
        if (message.expireTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.expireTime);
        /* int64 status = 6; */
        if (message.status !== 0n)
            writer.tag(6, WireType.Varint).int64(message.status);
        /* int64 room_id = 7; */
        if (message.roomId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.roomId);
        /* string id_str = 8; */
        if (message.idStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.idStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameInvite
 */
export const GameInvite = new GameInvite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvitationSwitch$Type extends MessageType<InvitationSwitch> {
    constructor() {
        super("data.InvitationSwitch", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "game_kind", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "play_kind", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "extra_base", kind: "message", T: () => SwitchExtraBase },
            { no: 8, name: "extra_for_open", kind: "message", T: () => SwitchExtraForOpen },
            { no: 9, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InvitationSwitch>): InvitationSwitch {
        const message = { id: 0n, gameKind: 0, gameId: 0n, playKind: 0n, status: 0n, message: "", idStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvitationSwitch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvitationSwitch): InvitationSwitch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int32 game_kind */ 2:
                    message.gameKind = reader.int32();
                    break;
                case /* int64 game_id */ 3:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 play_kind */ 4:
                    message.playKind = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 5:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string message */ 6:
                    message.message = reader.string();
                    break;
                case /* data.SwitchExtraBase extra_base */ 7:
                    message.extraBase = SwitchExtraBase.internalBinaryRead(reader, reader.uint32(), options, message.extraBase);
                    break;
                case /* data.SwitchExtraForOpen extra_for_open */ 8:
                    message.extraForOpen = SwitchExtraForOpen.internalBinaryRead(reader, reader.uint32(), options, message.extraForOpen);
                    break;
                case /* string id_str */ 9:
                    message.idStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvitationSwitch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int32 game_kind = 2; */
        if (message.gameKind !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameKind);
        /* int64 game_id = 3; */
        if (message.gameId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.gameId);
        /* int64 play_kind = 4; */
        if (message.playKind !== 0n)
            writer.tag(4, WireType.Varint).int64(message.playKind);
        /* int64 status = 5; */
        if (message.status !== 0n)
            writer.tag(5, WireType.Varint).int64(message.status);
        /* string message = 6; */
        if (message.message !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.message);
        /* data.SwitchExtraBase extra_base = 7; */
        if (message.extraBase)
            SwitchExtraBase.internalBinaryWrite(message.extraBase, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.SwitchExtraForOpen extra_for_open = 8; */
        if (message.extraForOpen)
            SwitchExtraForOpen.internalBinaryWrite(message.extraForOpen, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string id_str = 9; */
        if (message.idStr !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.idStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.InvitationSwitch
 */
export const InvitationSwitch = new InvitationSwitch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialRoomInfo$Type extends MessageType<OfficialRoomInfo> {
    constructor() {
        super("data.OfficialRoomInfo", [
            { no: 1, name: "is_show_more_anchor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_use_server_subtitle", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "server_subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OfficialRoomInfo>): OfficialRoomInfo {
        const message = { isShowMoreAnchor: false, isUseServerSubtitle: false, serverSubtitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfficialRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfficialRoomInfo): OfficialRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_show_more_anchor */ 1:
                    message.isShowMoreAnchor = reader.bool();
                    break;
                case /* bool is_use_server_subtitle */ 2:
                    message.isUseServerSubtitle = reader.bool();
                    break;
                case /* string server_subtitle */ 3:
                    message.serverSubtitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfficialRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_show_more_anchor = 1; */
        if (message.isShowMoreAnchor !== false)
            writer.tag(1, WireType.Varint).bool(message.isShowMoreAnchor);
        /* bool is_use_server_subtitle = 2; */
        if (message.isUseServerSubtitle !== false)
            writer.tag(2, WireType.Varint).bool(message.isUseServerSubtitle);
        /* string server_subtitle = 3; */
        if (message.serverSubtitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.serverSubtitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OfficialRoomInfo
 */
export const OfficialRoomInfo = new OfficialRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsEpisodeHighLight$Type extends MessageType<VsEpisodeHighLight> {
    constructor() {
        super("data.VsEpisodeHighLight", [
            { no: 1, name: "location", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<VsEpisodeHighLight>): VsEpisodeHighLight {
        const message = { location: 0n, description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsEpisodeHighLight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsEpisodeHighLight): VsEpisodeHighLight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 location */ 1:
                    message.location = reader.int64().toBigInt();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* data.Image image */ 3:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsEpisodeHighLight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 location = 1; */
        if (message.location !== 0n)
            writer.tag(1, WireType.Varint).int64(message.location);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* data.Image image = 3; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VsEpisodeHighLight
 */
export const VsEpisodeHighLight = new VsEpisodeHighLight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpisodePremierePlay$Type extends MessageType<EpisodePremierePlay> {
    constructor() {
        super("data.EpisodePremierePlay", [
            { no: 1, name: "highlights", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VsEpisodeHighLight },
            { no: 2, name: "play_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "play_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EpisodePremierePlay>): EpisodePremierePlay {
        const message = { highlights: [], playType: 0, startTime: 0n, playText: "", textDuration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpisodePremierePlay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpisodePremierePlay): EpisodePremierePlay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.VsEpisodeHighLight highlights */ 1:
                    message.highlights.push(VsEpisodeHighLight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 play_type */ 2:
                    message.playType = reader.int32();
                    break;
                case /* int64 start_time */ 3:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* string play_text */ 4:
                    message.playText = reader.string();
                    break;
                case /* int64 text_duration */ 5:
                    message.textDuration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpisodePremierePlay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.VsEpisodeHighLight highlights = 1; */
        for (let i = 0; i < message.highlights.length; i++)
            VsEpisodeHighLight.internalBinaryWrite(message.highlights[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 play_type = 2; */
        if (message.playType !== 0)
            writer.tag(2, WireType.Varint).int32(message.playType);
        /* int64 start_time = 3; */
        if (message.startTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startTime);
        /* string play_text = 4; */
        if (message.playText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.playText);
        /* int64 text_duration = 5; */
        if (message.textDuration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.textDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EpisodePremierePlay
 */
export const EpisodePremierePlay = new EpisodePremierePlay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSWatermark$Type extends MessageType<VSWatermark> {
    constructor() {
        super("data.VSWatermark", [
            { no: 1, name: "position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "landscape_dis", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "vertical_dis", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "watermark_icon", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VSWatermarkIcon }
        ]);
    }
    create(value?: PartialMessage<VSWatermark>): VSWatermark {
        const message = { position: 0n, landscapeDis: 0n, verticalDis: 0n, watermarkIcon: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSWatermark>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSWatermark): VSWatermark {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 position */ 1:
                    message.position = reader.int64().toBigInt();
                    break;
                case /* int64 landscape_dis */ 2:
                    message.landscapeDis = reader.int64().toBigInt();
                    break;
                case /* int64 vertical_dis */ 3:
                    message.verticalDis = reader.int64().toBigInt();
                    break;
                case /* repeated data.VSWatermarkIcon watermark_icon */ 4:
                    message.watermarkIcon.push(VSWatermarkIcon.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSWatermark, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 position = 1; */
        if (message.position !== 0n)
            writer.tag(1, WireType.Varint).int64(message.position);
        /* int64 landscape_dis = 2; */
        if (message.landscapeDis !== 0n)
            writer.tag(2, WireType.Varint).int64(message.landscapeDis);
        /* int64 vertical_dis = 3; */
        if (message.verticalDis !== 0n)
            writer.tag(3, WireType.Varint).int64(message.verticalDis);
        /* repeated data.VSWatermarkIcon watermark_icon = 4; */
        for (let i = 0; i < message.watermarkIcon.length; i++)
            VSWatermarkIcon.internalBinaryWrite(message.watermarkIcon[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSWatermark
 */
export const VSWatermark = new VSWatermark$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSWatermarkIcon$Type extends MessageType<VSWatermarkIcon> {
    constructor() {
        super("data.VSWatermarkIcon", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "icon_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "icon_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "landscape_dis", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "vertical_dis", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VSWatermarkIcon>): VSWatermarkIcon {
        const message = { iconWidth: 0n, iconType: 0n, landscapeDis: 0n, verticalDis: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSWatermarkIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSWatermarkIcon): VSWatermarkIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 icon_width */ 2:
                    message.iconWidth = reader.int64().toBigInt();
                    break;
                case /* int64 icon_type */ 3:
                    message.iconType = reader.int64().toBigInt();
                    break;
                case /* int64 landscape_dis */ 4:
                    message.landscapeDis = reader.int64().toBigInt();
                    break;
                case /* int64 vertical_dis */ 5:
                    message.verticalDis = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSWatermarkIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 icon_width = 2; */
        if (message.iconWidth !== 0n)
            writer.tag(2, WireType.Varint).int64(message.iconWidth);
        /* int64 icon_type = 3; */
        if (message.iconType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.iconType);
        /* int64 landscape_dis = 4; */
        if (message.landscapeDis !== 0n)
            writer.tag(4, WireType.Varint).int64(message.landscapeDis);
        /* int64 vertical_dis = 5; */
        if (message.verticalDis !== 0n)
            writer.tag(5, WireType.Varint).int64(message.verticalDis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSWatermarkIcon
 */
export const VSWatermarkIcon = new VSWatermarkIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSBar$Type extends MessageType<VSBar> {
    constructor() {
        super("data.VSBar", [
            { no: 1, name: "item_comment", kind: "message", T: () => VSItemBar },
            { no: 2, name: "item_bar", kind: "message", T: () => VSItemBar }
        ]);
    }
    create(value?: PartialMessage<VSBar>): VSBar {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSBar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSBar): VSBar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.VSItemBar item_comment */ 1:
                    message.itemComment = VSItemBar.internalBinaryRead(reader, reader.uint32(), options, message.itemComment);
                    break;
                case /* data.VSItemBar item_bar */ 2:
                    message.itemBar = VSItemBar.internalBinaryRead(reader, reader.uint32(), options, message.itemBar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSBar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.VSItemBar item_comment = 1; */
        if (message.itemComment)
            VSItemBar.internalBinaryWrite(message.itemComment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.VSItemBar item_bar = 2; */
        if (message.itemBar)
            VSItemBar.internalBinaryWrite(message.itemBar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSBar
 */
export const VSBar = new VSBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSItemComment$Type extends MessageType<VSItemComment> {
    constructor() {
        super("data.VSItemComment", [
            { no: 1, name: "item_comment_icon_dark", kind: "message", T: () => Image },
            { no: 2, name: "item_comment_icon_light", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<VSItemComment>): VSItemComment {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSItemComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSItemComment): VSItemComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image item_comment_icon_dark */ 1:
                    message.itemCommentIconDark = Image.internalBinaryRead(reader, reader.uint32(), options, message.itemCommentIconDark);
                    break;
                case /* data.Image item_comment_icon_light */ 2:
                    message.itemCommentIconLight = Image.internalBinaryRead(reader, reader.uint32(), options, message.itemCommentIconLight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSItemComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image item_comment_icon_dark = 1; */
        if (message.itemCommentIconDark)
            Image.internalBinaryWrite(message.itemCommentIconDark, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image item_comment_icon_light = 2; */
        if (message.itemCommentIconLight)
            Image.internalBinaryWrite(message.itemCommentIconLight, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSItemComment
 */
export const VSItemComment = new VSItemComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSItemBar$Type extends MessageType<VSItemBar> {
    constructor() {
        super("data.VSItemBar", [
            { no: 1, name: "icon_dark", kind: "message", T: () => Image },
            { no: 2, name: "icon_light", kind: "message", T: () => Image },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "seperator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "watch_info_pv", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "watch_info_heat", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "collection_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "tab_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "content_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VSItemBar>): VSItemBar {
        const message = { title: "", seperator: "", detail: "", watchInfoPv: 0n, watchInfoHeat: "", collectionId: 0n, tabId: 0, contentType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSItemBar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSItemBar): VSItemBar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon_dark */ 1:
                    message.iconDark = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconDark);
                    break;
                case /* data.Image icon_light */ 2:
                    message.iconLight = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconLight);
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string seperator */ 4:
                    message.seperator = reader.string();
                    break;
                case /* string detail */ 5:
                    message.detail = reader.string();
                    break;
                case /* int64 watch_info_pv */ 6:
                    message.watchInfoPv = reader.int64().toBigInt();
                    break;
                case /* string watch_info_heat */ 7:
                    message.watchInfoHeat = reader.string();
                    break;
                case /* int64 collection_id */ 8:
                    message.collectionId = reader.int64().toBigInt();
                    break;
                case /* int32 tab_id */ 9:
                    message.tabId = reader.int32();
                    break;
                case /* string content_type */ 10:
                    message.contentType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSItemBar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon_dark = 1; */
        if (message.iconDark)
            Image.internalBinaryWrite(message.iconDark, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon_light = 2; */
        if (message.iconLight)
            Image.internalBinaryWrite(message.iconLight, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string seperator = 4; */
        if (message.seperator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.seperator);
        /* string detail = 5; */
        if (message.detail !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.detail);
        /* int64 watch_info_pv = 6; */
        if (message.watchInfoPv !== 0n)
            writer.tag(6, WireType.Varint).int64(message.watchInfoPv);
        /* string watch_info_heat = 7; */
        if (message.watchInfoHeat !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.watchInfoHeat);
        /* int64 collection_id = 8; */
        if (message.collectionId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.collectionId);
        /* int32 tab_id = 9; */
        if (message.tabId !== 0)
            writer.tag(9, WireType.Varint).int32(message.tabId);
        /* string content_type = 10; */
        if (message.contentType !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.contentType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSItemBar
 */
export const VSItemBar = new VSItemBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpisodePreviewImage$Type extends MessageType<EpisodePreviewImage> {
    constructor() {
        super("data.EpisodePreviewImage", [
            { no: 1, name: "preview_uri_up", kind: "message", T: () => Image },
            { no: 2, name: "preview_uri_down", kind: "message", T: () => Image },
            { no: 3, name: "preview_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "preview_word_up", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "preview_word_down", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EpisodePreviewImage>): EpisodePreviewImage {
        const message = { previewType: 0, previewWordUp: "", previewWordDown: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpisodePreviewImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpisodePreviewImage): EpisodePreviewImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image preview_uri_up */ 1:
                    message.previewUriUp = Image.internalBinaryRead(reader, reader.uint32(), options, message.previewUriUp);
                    break;
                case /* data.Image preview_uri_down */ 2:
                    message.previewUriDown = Image.internalBinaryRead(reader, reader.uint32(), options, message.previewUriDown);
                    break;
                case /* int32 preview_type */ 3:
                    message.previewType = reader.int32();
                    break;
                case /* string preview_word_up */ 4:
                    message.previewWordUp = reader.string();
                    break;
                case /* string preview_word_down */ 5:
                    message.previewWordDown = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpisodePreviewImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image preview_uri_up = 1; */
        if (message.previewUriUp)
            Image.internalBinaryWrite(message.previewUriUp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image preview_uri_down = 2; */
        if (message.previewUriDown)
            Image.internalBinaryWrite(message.previewUriDown, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 preview_type = 3; */
        if (message.previewType !== 0)
            writer.tag(3, WireType.Varint).int32(message.previewType);
        /* string preview_word_up = 4; */
        if (message.previewWordUp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.previewWordUp);
        /* string preview_word_down = 5; */
        if (message.previewWordDown !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.previewWordDown);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EpisodePreviewImage
 */
export const EpisodePreviewImage = new EpisodePreviewImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSGiftPannel$Type extends MessageType<VSGiftPannel> {
    constructor() {
        super("data.VSGiftPannel", [
            { no: 1, name: "background_colors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "background", kind: "message", T: () => Image },
            { no: 3, name: "selected", kind: "message", T: () => Image },
            { no: 4, name: "top_title", kind: "message", T: () => Image },
            { no: 5, name: "background_bottom", kind: "message", T: () => Image },
            { no: 6, name: "background_top", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<VSGiftPannel>): VSGiftPannel {
        const message = { backgroundColors: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSGiftPannel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSGiftPannel): VSGiftPannel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string background_colors */ 1:
                    message.backgroundColors.push(reader.string());
                    break;
                case /* data.Image background */ 2:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* data.Image selected */ 3:
                    message.selected = Image.internalBinaryRead(reader, reader.uint32(), options, message.selected);
                    break;
                case /* data.Image top_title */ 4:
                    message.topTitle = Image.internalBinaryRead(reader, reader.uint32(), options, message.topTitle);
                    break;
                case /* data.Image background_bottom */ 5:
                    message.backgroundBottom = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundBottom);
                    break;
                case /* data.Image background_top */ 6:
                    message.backgroundTop = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundTop);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSGiftPannel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string background_colors = 1; */
        for (let i = 0; i < message.backgroundColors.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.backgroundColors[i]);
        /* data.Image background = 2; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image selected = 3; */
        if (message.selected)
            Image.internalBinaryWrite(message.selected, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image top_title = 4; */
        if (message.topTitle)
            Image.internalBinaryWrite(message.topTitle, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_bottom = 5; */
        if (message.backgroundBottom)
            Image.internalBinaryWrite(message.backgroundBottom, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_top = 6; */
        if (message.backgroundTop)
            Image.internalBinaryWrite(message.backgroundTop, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSGiftPannel
 */
export const VSGiftPannel = new VSGiftPannel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpisodePreviewBottom$Type extends MessageType<EpisodePreviewBottom> {
    constructor() {
        super("data.EpisodePreviewBottom", [
            { no: 1, name: "watch_period_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "latest_period_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EpisodePreviewBottom>): EpisodePreviewBottom {
        const message = { watchPeriodStr: "", latestPeriodStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpisodePreviewBottom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpisodePreviewBottom): EpisodePreviewBottom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string watch_period_str */ 1:
                    message.watchPeriodStr = reader.string();
                    break;
                case /* string latest_period_str */ 2:
                    message.latestPeriodStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpisodePreviewBottom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string watch_period_str = 1; */
        if (message.watchPeriodStr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.watchPeriodStr);
        /* string latest_period_str = 2; */
        if (message.latestPeriodStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.latestPeriodStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EpisodePreviewBottom
 */
export const EpisodePreviewBottom = new EpisodePreviewBottom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSPannelIcon$Type extends MessageType<VSPannelIcon> {
    constructor() {
        super("data.VSPannelIcon", [
            { no: 1, name: "sp_landscape_icon", kind: "message", T: () => Image },
            { no: 2, name: "sp_vertical_icon", kind: "message", T: () => Image },
            { no: 3, name: "landscape_vertical_switch_icon", kind: "message", T: () => Image },
            { no: 4, name: "lock_screen_icon", kind: "message", T: () => Image },
            { no: 9, name: "landscape_more_icon", kind: "message", T: () => Image },
            { no: 10, name: "vertical_more_icon", kind: "message", T: () => Image },
            { no: 11, name: "landscape_comment_icon", kind: "message", T: () => Image },
            { no: 12, name: "vertical_comment_icon", kind: "message", T: () => Image },
            { no: 13, name: "vertical_landscape_switch_icon", kind: "message", T: () => Image },
            { no: 14, name: "vertical_lock_screen_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<VSPannelIcon>): VSPannelIcon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSPannelIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSPannelIcon): VSPannelIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image sp_landscape_icon */ 1:
                    message.spLandscapeIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.spLandscapeIcon);
                    break;
                case /* data.Image sp_vertical_icon */ 2:
                    message.spVerticalIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.spVerticalIcon);
                    break;
                case /* data.Image landscape_vertical_switch_icon */ 3:
                    message.landscapeVerticalSwitchIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.landscapeVerticalSwitchIcon);
                    break;
                case /* data.Image lock_screen_icon */ 4:
                    message.lockScreenIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.lockScreenIcon);
                    break;
                case /* data.Image landscape_more_icon */ 9:
                    message.landscapeMoreIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.landscapeMoreIcon);
                    break;
                case /* data.Image vertical_more_icon */ 10:
                    message.verticalMoreIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.verticalMoreIcon);
                    break;
                case /* data.Image landscape_comment_icon */ 11:
                    message.landscapeCommentIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.landscapeCommentIcon);
                    break;
                case /* data.Image vertical_comment_icon */ 12:
                    message.verticalCommentIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.verticalCommentIcon);
                    break;
                case /* data.Image vertical_landscape_switch_icon */ 13:
                    message.verticalLandscapeSwitchIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.verticalLandscapeSwitchIcon);
                    break;
                case /* data.Image vertical_lock_screen_icon */ 14:
                    message.verticalLockScreenIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.verticalLockScreenIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSPannelIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image sp_landscape_icon = 1; */
        if (message.spLandscapeIcon)
            Image.internalBinaryWrite(message.spLandscapeIcon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image sp_vertical_icon = 2; */
        if (message.spVerticalIcon)
            Image.internalBinaryWrite(message.spVerticalIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image landscape_vertical_switch_icon = 3; */
        if (message.landscapeVerticalSwitchIcon)
            Image.internalBinaryWrite(message.landscapeVerticalSwitchIcon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image lock_screen_icon = 4; */
        if (message.lockScreenIcon)
            Image.internalBinaryWrite(message.lockScreenIcon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image landscape_more_icon = 9; */
        if (message.landscapeMoreIcon)
            Image.internalBinaryWrite(message.landscapeMoreIcon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image vertical_more_icon = 10; */
        if (message.verticalMoreIcon)
            Image.internalBinaryWrite(message.verticalMoreIcon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Image landscape_comment_icon = 11; */
        if (message.landscapeCommentIcon)
            Image.internalBinaryWrite(message.landscapeCommentIcon, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.Image vertical_comment_icon = 12; */
        if (message.verticalCommentIcon)
            Image.internalBinaryWrite(message.verticalCommentIcon, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* data.Image vertical_landscape_switch_icon = 13; */
        if (message.verticalLandscapeSwitchIcon)
            Image.internalBinaryWrite(message.verticalLandscapeSwitchIcon, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* data.Image vertical_lock_screen_icon = 14; */
        if (message.verticalLockScreenIcon)
            Image.internalBinaryWrite(message.verticalLockScreenIcon, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VSPannelIcon
 */
export const VSPannelIcon = new VSPannelIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiCameraBasicInfo$Type extends MessageType<MultiCameraBasicInfo> {
    constructor() {
        super("data.MultiCameraBasicInfo", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "icon_background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "panel_background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon_pad", kind: "message", T: () => Image },
            { no: 5, name: "ban_xgs", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "support_vs_core", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "default_display_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MultiCameraBasicInfo>): MultiCameraBasicInfo {
        const message = { iconBackgroundColor: "", panelBackgroundColor: "", banXgs: false, supportVsCore: false, name: "", defaultDisplayDuration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiCameraBasicInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiCameraBasicInfo): MultiCameraBasicInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string icon_background_color */ 2:
                    message.iconBackgroundColor = reader.string();
                    break;
                case /* string panel_background_color */ 3:
                    message.panelBackgroundColor = reader.string();
                    break;
                case /* data.Image icon_pad */ 4:
                    message.iconPad = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconPad);
                    break;
                case /* bool ban_xgs */ 5:
                    message.banXgs = reader.bool();
                    break;
                case /* bool support_vs_core */ 6:
                    message.supportVsCore = reader.bool();
                    break;
                case /* string name */ 7:
                    message.name = reader.string();
                    break;
                case /* int32 default_display_duration */ 8:
                    message.defaultDisplayDuration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiCameraBasicInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string icon_background_color = 2; */
        if (message.iconBackgroundColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconBackgroundColor);
        /* string panel_background_color = 3; */
        if (message.panelBackgroundColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.panelBackgroundColor);
        /* data.Image icon_pad = 4; */
        if (message.iconPad)
            Image.internalBinaryWrite(message.iconPad, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool ban_xgs = 5; */
        if (message.banXgs !== false)
            writer.tag(5, WireType.Varint).bool(message.banXgs);
        /* bool support_vs_core = 6; */
        if (message.supportVsCore !== false)
            writer.tag(6, WireType.Varint).bool(message.supportVsCore);
        /* string name = 7; */
        if (message.name !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.name);
        /* int32 default_display_duration = 8; */
        if (message.defaultDisplayDuration !== 0)
            writer.tag(8, WireType.Varint).int32(message.defaultDisplayDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiCameraBasicInfo
 */
export const MultiCameraBasicInfo = new MultiCameraBasicInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CollectionItem$Type extends MessageType<CollectionItem> {
    constructor() {
        super("data.CollectionItem", [
            { no: 1, name: "collection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "collection_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cover_img", kind: "message", T: () => Image },
            { no: 5, name: "original_vid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "video_duration", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "collection_timing", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "tmpl_vid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "reflow_tag_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "collection_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "original_vid_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "collection_tag", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "episode_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "share_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "ug_share_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "degrade_vid_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "event_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CollectionItem>): CollectionItem {
        const message = { collectionId: "", collectionType: 0, title: "", originalVid: "", videoDuration: "", collectionTiming: "", tmplVid: "", reflowTagList: [], roomId: "", collectionSource: 0, originalVidUrl: "", collectionTag: 0, episodeId: "", shareInfo: "", createTime: 0n, status: 0, ugShareInfo: "", degradeVidUrl: "", eventTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CollectionItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollectionItem): CollectionItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string collection_id */ 1:
                    message.collectionId = reader.string();
                    break;
                case /* int32 collection_type */ 2:
                    message.collectionType = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* data.Image cover_img */ 4:
                    message.coverImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.coverImg);
                    break;
                case /* string original_vid */ 5:
                    message.originalVid = reader.string();
                    break;
                case /* string video_duration */ 6:
                    message.videoDuration = reader.string();
                    break;
                case /* string collection_timing */ 7:
                    message.collectionTiming = reader.string();
                    break;
                case /* string tmpl_vid */ 8:
                    message.tmplVid = reader.string();
                    break;
                case /* repeated int32 reflow_tag_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.reflowTagList.push(reader.int32());
                    else
                        message.reflowTagList.push(reader.int32());
                    break;
                case /* string room_id */ 11:
                    message.roomId = reader.string();
                    break;
                case /* int32 collection_source */ 12:
                    message.collectionSource = reader.int32();
                    break;
                case /* string original_vid_url */ 13:
                    message.originalVidUrl = reader.string();
                    break;
                case /* int32 collection_tag */ 14:
                    message.collectionTag = reader.int32();
                    break;
                case /* string episode_id */ 15:
                    message.episodeId = reader.string();
                    break;
                case /* string share_info */ 16:
                    message.shareInfo = reader.string();
                    break;
                case /* int64 create_time */ 17:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 18:
                    message.status = reader.int32();
                    break;
                case /* string ug_share_info */ 19:
                    message.ugShareInfo = reader.string();
                    break;
                case /* string degrade_vid_url */ 20:
                    message.degradeVidUrl = reader.string();
                    break;
                case /* int64 event_time */ 21:
                    message.eventTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollectionItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string collection_id = 1; */
        if (message.collectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.collectionId);
        /* int32 collection_type = 2; */
        if (message.collectionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.collectionType);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* data.Image cover_img = 4; */
        if (message.coverImg)
            Image.internalBinaryWrite(message.coverImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string original_vid = 5; */
        if (message.originalVid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.originalVid);
        /* string video_duration = 6; */
        if (message.videoDuration !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.videoDuration);
        /* string collection_timing = 7; */
        if (message.collectionTiming !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.collectionTiming);
        /* string tmpl_vid = 8; */
        if (message.tmplVid !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.tmplVid);
        /* repeated int32 reflow_tag_list = 10; */
        if (message.reflowTagList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.reflowTagList.length; i++)
                writer.int32(message.reflowTagList[i]);
            writer.join();
        }
        /* string room_id = 11; */
        if (message.roomId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.roomId);
        /* int32 collection_source = 12; */
        if (message.collectionSource !== 0)
            writer.tag(12, WireType.Varint).int32(message.collectionSource);
        /* string original_vid_url = 13; */
        if (message.originalVidUrl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.originalVidUrl);
        /* int32 collection_tag = 14; */
        if (message.collectionTag !== 0)
            writer.tag(14, WireType.Varint).int32(message.collectionTag);
        /* string episode_id = 15; */
        if (message.episodeId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.episodeId);
        /* string share_info = 16; */
        if (message.shareInfo !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.shareInfo);
        /* int64 create_time = 17; */
        if (message.createTime !== 0n)
            writer.tag(17, WireType.Varint).int64(message.createTime);
        /* int32 status = 18; */
        if (message.status !== 0)
            writer.tag(18, WireType.Varint).int32(message.status);
        /* string ug_share_info = 19; */
        if (message.ugShareInfo !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.ugShareInfo);
        /* string degrade_vid_url = 20; */
        if (message.degradeVidUrl !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.degradeVidUrl);
        /* int64 event_time = 21; */
        if (message.eventTime !== 0n)
            writer.tag(21, WireType.Varint).int64(message.eventTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CollectionItem
 */
export const CollectionItem = new CollectionItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SharePosterInfo$Type extends MessageType<SharePosterInfo> {
    constructor() {
        super("data.SharePosterInfo", [
            { no: 1, name: "data", kind: "message", T: () => SharePosterInfo_PosterData }
        ]);
    }
    create(value?: PartialMessage<SharePosterInfo>): SharePosterInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SharePosterInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SharePosterInfo): SharePosterInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.SharePosterInfo.PosterData data */ 1:
                    message.data = SharePosterInfo_PosterData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SharePosterInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.SharePosterInfo.PosterData data = 1; */
        if (message.data)
            SharePosterInfo_PosterData.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SharePosterInfo
 */
export const SharePosterInfo = new SharePosterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SharePosterInfo_PosterData$Type extends MessageType<SharePosterInfo_PosterData> {
    constructor() {
        super("data.SharePosterInfo.PosterData", [
            { no: 1, name: "poster", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 2, name: "decorator", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image }
        ]);
    }
    create(value?: PartialMessage<SharePosterInfo_PosterData>): SharePosterInfo_PosterData {
        const message = { poster: [], decorator: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SharePosterInfo_PosterData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SharePosterInfo_PosterData): SharePosterInfo_PosterData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.Image poster */ 1:
                    message.poster.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.Image decorator */ 2:
                    message.decorator.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SharePosterInfo_PosterData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.Image poster = 1; */
        for (let i = 0; i < message.poster.length; i++)
            Image.internalBinaryWrite(message.poster[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image decorator = 2; */
        for (let i = 0; i < message.decorator.length; i++)
            Image.internalBinaryWrite(message.decorator[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SharePosterInfo.PosterData
 */
export const SharePosterInfo_PosterData = new SharePosterInfo_PosterData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BusinessConfigure$Type extends MessageType<BusinessConfigure> {
    constructor() {
        super("data.BusinessConfigure", [
            { no: 1, name: "BusinessID", kind: "scalar", jsonName: "BusinessID", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "BusType", kind: "scalar", jsonName: "BusType", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "DelaySecond", kind: "scalar", jsonName: "DelaySecond", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "PreciseTime", kind: "scalar", jsonName: "PreciseTime", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "DisplaySecond", kind: "scalar", jsonName: "DisplaySecond", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "ResConfig", kind: "message", jsonName: "ResConfig", T: () => ResourceConfigure },
            { no: 7, name: "DelType", kind: "scalar", jsonName: "DelType", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BusinessConfigure>): BusinessConfigure {
        const message = { businessID: 0n, busType: 0n, delaySecond: 0, preciseTime: 0n, displaySecond: 0, delType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BusinessConfigure>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BusinessConfigure): BusinessConfigure {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 BusinessID = 1 [json_name = "BusinessID"];*/ 1:
                    message.businessID = reader.int64().toBigInt();
                    break;
                case /* int64 BusType = 2 [json_name = "BusType"];*/ 2:
                    message.busType = reader.int64().toBigInt();
                    break;
                case /* int32 DelaySecond = 3 [json_name = "DelaySecond"];*/ 3:
                    message.delaySecond = reader.int32();
                    break;
                case /* int64 PreciseTime = 4 [json_name = "PreciseTime"];*/ 4:
                    message.preciseTime = reader.int64().toBigInt();
                    break;
                case /* int32 DisplaySecond = 5 [json_name = "DisplaySecond"];*/ 5:
                    message.displaySecond = reader.int32();
                    break;
                case /* data.ResourceConfigure ResConfig = 6 [json_name = "ResConfig"];*/ 6:
                    message.resConfig = ResourceConfigure.internalBinaryRead(reader, reader.uint32(), options, message.resConfig);
                    break;
                case /* int64 DelType = 7 [json_name = "DelType"];*/ 7:
                    message.delType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BusinessConfigure, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 BusinessID = 1 [json_name = "BusinessID"]; */
        if (message.businessID !== 0n)
            writer.tag(1, WireType.Varint).int64(message.businessID);
        /* int64 BusType = 2 [json_name = "BusType"]; */
        if (message.busType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.busType);
        /* int32 DelaySecond = 3 [json_name = "DelaySecond"]; */
        if (message.delaySecond !== 0)
            writer.tag(3, WireType.Varint).int32(message.delaySecond);
        /* int64 PreciseTime = 4 [json_name = "PreciseTime"]; */
        if (message.preciseTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.preciseTime);
        /* int32 DisplaySecond = 5 [json_name = "DisplaySecond"]; */
        if (message.displaySecond !== 0)
            writer.tag(5, WireType.Varint).int32(message.displaySecond);
        /* data.ResourceConfigure ResConfig = 6 [json_name = "ResConfig"]; */
        if (message.resConfig)
            ResourceConfigure.internalBinaryWrite(message.resConfig, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 DelType = 7 [json_name = "DelType"]; */
        if (message.delType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.delType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BusinessConfigure
 */
export const BusinessConfigure = new BusinessConfigure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceConfigure$Type extends MessageType<ResourceConfigure> {
    constructor() {
        super("data.ResourceConfigure", [
            { no: 1, name: "ResourceID", kind: "scalar", jsonName: "ResourceID", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "BarrageConf", kind: "message", jsonName: "BarrageConf", T: () => BarrageConfigure },
            { no: 3, name: "ScreenBarConf", kind: "message", jsonName: "ScreenBarConf", T: () => ScreenBarConfigure }
        ]);
    }
    create(value?: PartialMessage<ResourceConfigure>): ResourceConfigure {
        const message = { resourceID: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResourceConfigure>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceConfigure): ResourceConfigure {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ResourceID = 1 [json_name = "ResourceID"];*/ 1:
                    message.resourceID = reader.int64().toBigInt();
                    break;
                case /* data.BarrageConfigure BarrageConf = 2 [json_name = "BarrageConf"];*/ 2:
                    message.barrageConf = BarrageConfigure.internalBinaryRead(reader, reader.uint32(), options, message.barrageConf);
                    break;
                case /* data.ScreenBarConfigure ScreenBarConf = 3 [json_name = "ScreenBarConf"];*/ 3:
                    message.screenBarConf = ScreenBarConfigure.internalBinaryRead(reader, reader.uint32(), options, message.screenBarConf);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceConfigure, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 ResourceID = 1 [json_name = "ResourceID"]; */
        if (message.resourceID !== 0n)
            writer.tag(1, WireType.Varint).int64(message.resourceID);
        /* data.BarrageConfigure BarrageConf = 2 [json_name = "BarrageConf"]; */
        if (message.barrageConf)
            BarrageConfigure.internalBinaryWrite(message.barrageConf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.ScreenBarConfigure ScreenBarConf = 3 [json_name = "ScreenBarConf"]; */
        if (message.screenBarConf)
            ScreenBarConfigure.internalBinaryWrite(message.screenBarConf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ResourceConfigure
 */
export const ResourceConfigure = new ResourceConfigure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BarrageConfigure$Type extends MessageType<BarrageConfigure> {
    constructor() {
        super("data.BarrageConfigure", [
            { no: 1, name: "Logo", kind: "message", jsonName: "Logo", T: () => Image },
            { no: 2, name: "Text", kind: "scalar", jsonName: "Text", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "AtomsBGColor", kind: "scalar", jsonName: "AtomsBGColor", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "AtomsFrame", kind: "scalar", jsonName: "AtomsFrame", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "AtomsText", kind: "scalar", jsonName: "AtomsText", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "Image", kind: "message", jsonName: "Image", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BarrageConfigure>): BarrageConfigure {
        const message = { text: "", atomsBGColor: "", atomsFrame: "", atomsText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BarrageConfigure>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BarrageConfigure): BarrageConfigure {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image Logo = 1 [json_name = "Logo"];*/ 1:
                    message.logo = Image.internalBinaryRead(reader, reader.uint32(), options, message.logo);
                    break;
                case /* string Text = 2 [json_name = "Text"];*/ 2:
                    message.text = reader.string();
                    break;
                case /* string AtomsBGColor = 3 [json_name = "AtomsBGColor"];*/ 3:
                    message.atomsBGColor = reader.string();
                    break;
                case /* string AtomsFrame = 4 [json_name = "AtomsFrame"];*/ 4:
                    message.atomsFrame = reader.string();
                    break;
                case /* string AtomsText = 5 [json_name = "AtomsText"];*/ 5:
                    message.atomsText = reader.string();
                    break;
                case /* data.Image Image = 6 [json_name = "Image"];*/ 6:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BarrageConfigure, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image Logo = 1 [json_name = "Logo"]; */
        if (message.logo)
            Image.internalBinaryWrite(message.logo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string Text = 2 [json_name = "Text"]; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string AtomsBGColor = 3 [json_name = "AtomsBGColor"]; */
        if (message.atomsBGColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.atomsBGColor);
        /* string AtomsFrame = 4 [json_name = "AtomsFrame"]; */
        if (message.atomsFrame !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.atomsFrame);
        /* string AtomsText = 5 [json_name = "AtomsText"]; */
        if (message.atomsText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.atomsText);
        /* data.Image Image = 6 [json_name = "Image"]; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BarrageConfigure
 */
export const BarrageConfigure = new BarrageConfigure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScreenBarConfigure$Type extends MessageType<ScreenBarConfigure> {
    constructor() {
        super("data.ScreenBarConfigure", [
            { no: 1, name: "Image", kind: "message", jsonName: "Image", T: () => Image },
            { no: 2, name: "IsDynamicImg", kind: "scalar", jsonName: "IsDynamicImg", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "jump_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ScreenBarConfigure>): ScreenBarConfigure {
        const message = { isDynamicImg: 0, schema: "", jumpPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScreenBarConfigure>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScreenBarConfigure): ScreenBarConfigure {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image Image = 1 [json_name = "Image"];*/ 1:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* int32 IsDynamicImg = 2 [json_name = "IsDynamicImg"];*/ 2:
                    message.isDynamicImg = reader.int32();
                    break;
                case /* string schema */ 3:
                    message.schema = reader.string();
                    break;
                case /* string jump_prompt */ 4:
                    message.jumpPrompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScreenBarConfigure, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image Image = 1 [json_name = "Image"]; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 IsDynamicImg = 2 [json_name = "IsDynamicImg"]; */
        if (message.isDynamicImg !== 0)
            writer.tag(2, WireType.Varint).int32(message.isDynamicImg);
        /* string schema = 3; */
        if (message.schema !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schema);
        /* string jump_prompt = 4; */
        if (message.jumpPrompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jumpPrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ScreenBarConfigure
 */
export const ScreenBarConfigure = new ScreenBarConfigure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiTab$Type extends MessageType<MultiTab> {
    constructor() {
        super("data.MultiTab", [
            { no: 1, name: "tab_title_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tabs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MultiTab_TabItem }
        ]);
    }
    create(value?: PartialMessage<MultiTab>): MultiTab {
        const message = { tabTitleColor: "", tabs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiTab>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiTab): MultiTab {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tab_title_color */ 1:
                    message.tabTitleColor = reader.string();
                    break;
                case /* repeated data.MultiTab.TabItem tabs */ 2:
                    message.tabs.push(MultiTab_TabItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiTab, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tab_title_color = 1; */
        if (message.tabTitleColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tabTitleColor);
        /* repeated data.MultiTab.TabItem tabs = 2; */
        for (let i = 0; i < message.tabs.length; i++)
            MultiTab_TabItem.internalBinaryWrite(message.tabs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiTab
 */
export const MultiTab = new MultiTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiTab_TabItem$Type extends MessageType<MultiTab_TabItem> {
    constructor() {
        super("data.MultiTab.TabItem", [
            { no: 1, name: "tab_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tab_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "jump_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tab_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "tab_show_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "hide_camera_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MultiTab_TabItem>): MultiTab_TabItem {
        const message = { tabType: 0n, tabName: "", jumpLink: "", tabId: 0n, tabShowType: 0, hideCameraIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiTab_TabItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiTab_TabItem): MultiTab_TabItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tab_type */ 1:
                    message.tabType = reader.int64().toBigInt();
                    break;
                case /* string tab_name */ 2:
                    message.tabName = reader.string();
                    break;
                case /* string jump_link */ 3:
                    message.jumpLink = reader.string();
                    break;
                case /* int64 tab_id */ 4:
                    message.tabId = reader.int64().toBigInt();
                    break;
                case /* int32 tab_show_type */ 5:
                    message.tabShowType = reader.int32();
                    break;
                case /* repeated int64 hide_camera_ids */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hideCameraIds.push(reader.int64().toBigInt());
                    else
                        message.hideCameraIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiTab_TabItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 tab_type = 1; */
        if (message.tabType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.tabType);
        /* string tab_name = 2; */
        if (message.tabName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tabName);
        /* string jump_link = 3; */
        if (message.jumpLink !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.jumpLink);
        /* int64 tab_id = 4; */
        if (message.tabId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.tabId);
        /* int32 tab_show_type = 5; */
        if (message.tabShowType !== 0)
            writer.tag(5, WireType.Varint).int32(message.tabShowType);
        /* repeated int64 hide_camera_ids = 6; */
        if (message.hideCameraIds.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hideCameraIds.length; i++)
                writer.int64(message.hideCameraIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiTab.TabItem
 */
export const MultiTab_TabItem = new MultiTab_TabItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolbarBizSkin$Type extends MessageType<ToolbarBizSkin> {
    constructor() {
        super("data.ToolbarBizSkin", [
            { no: 1, name: "icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<ToolbarBizSkin>): ToolbarBizSkin {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolbarBizSkin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolbarBizSkin): ToolbarBizSkin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolbarBizSkin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ToolbarBizSkin
 */
export const ToolbarBizSkin = new ToolbarBizSkin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolbarPermutation$Type extends MessageType<ToolbarPermutation> {
    constructor() {
        super("data.ToolbarPermutation", [
            { no: 1, name: "vertical", kind: "message", T: () => ToolbarPermutation_Rule },
            { no: 2, name: "landscape", kind: "message", T: () => ToolbarPermutation_Rule },
            { no: 3, name: "general", kind: "message", T: () => ToolbarPermutation_Rule }
        ]);
    }
    create(value?: PartialMessage<ToolbarPermutation>): ToolbarPermutation {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolbarPermutation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolbarPermutation): ToolbarPermutation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ToolbarPermutation.Rule vertical */ 1:
                    message.vertical = ToolbarPermutation_Rule.internalBinaryRead(reader, reader.uint32(), options, message.vertical);
                    break;
                case /* data.ToolbarPermutation.Rule landscape */ 2:
                    message.landscape = ToolbarPermutation_Rule.internalBinaryRead(reader, reader.uint32(), options, message.landscape);
                    break;
                case /* data.ToolbarPermutation.Rule general */ 3:
                    message.general = ToolbarPermutation_Rule.internalBinaryRead(reader, reader.uint32(), options, message.general);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolbarPermutation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ToolbarPermutation.Rule vertical = 1; */
        if (message.vertical)
            ToolbarPermutation_Rule.internalBinaryWrite(message.vertical, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.ToolbarPermutation.Rule landscape = 2; */
        if (message.landscape)
            ToolbarPermutation_Rule.internalBinaryWrite(message.landscape, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.ToolbarPermutation.Rule general = 3; */
        if (message.general)
            ToolbarPermutation_Rule.internalBinaryWrite(message.general, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ToolbarPermutation
 */
export const ToolbarPermutation = new ToolbarPermutation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolbarPermutation_Rule$Type extends MessageType<ToolbarPermutation_Rule> {
    constructor() {
        super("data.ToolbarPermutation.Rule", [
            { no: 1, name: "GroupPriority", kind: "scalar", jsonName: "GroupPriority", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ComponentSequence", kind: "scalar", jsonName: "ComponentSequence", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToolbarPermutation_Rule>): ToolbarPermutation_Rule {
        const message = { groupPriority: [], componentSequence: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolbarPermutation_Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolbarPermutation_Rule): ToolbarPermutation_Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 GroupPriority = 1 [json_name = "GroupPriority"];*/ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.groupPriority.push(reader.int32());
                    else
                        message.groupPriority.push(reader.int32());
                    break;
                case /* repeated int32 ComponentSequence = 2 [json_name = "ComponentSequence"];*/ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.componentSequence.push(reader.int32());
                    else
                        message.componentSequence.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolbarPermutation_Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 GroupPriority = 1 [json_name = "GroupPriority"]; */
        if (message.groupPriority.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.groupPriority.length; i++)
                writer.int32(message.groupPriority[i]);
            writer.join();
        }
        /* repeated int32 ComponentSequence = 2 [json_name = "ComponentSequence"]; */
        if (message.componentSequence.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.componentSequence.length; i++)
                writer.int32(message.componentSequence[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ToolbarPermutation.Rule
 */
export const ToolbarPermutation_Rule = new ToolbarPermutation_Rule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelInfo$Type extends MessageType<RoomChannelInfo> {
    constructor() {
        super("data.RoomChannelInfo", [
            { no: 1, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_owner", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "member_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "top_user", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 6, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "room_channel_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "need_approval_user", kind: "message", T: () => User },
            { no: 9, name: "owner", kind: "message", T: () => User },
            { no: 10, name: "max_member_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 200, name: "rtc_ext_info", kind: "message", T: () => RtcExtInfo }
        ]);
    }
    create(value?: PartialMessage<RoomChannelInfo>): RoomChannelInfo {
        const message = { channelId: 0n, token: "", isOwner: false, memberCount: 0n, topUser: [], channelName: "", roomChannelMode: 0, maxMemberCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelInfo): RoomChannelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 channel_id */ 1:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                case /* bool is_owner */ 3:
                    message.isOwner = reader.bool();
                    break;
                case /* int64 member_count */ 4:
                    message.memberCount = reader.int64().toBigInt();
                    break;
                case /* repeated data.User top_user */ 5:
                    message.topUser.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string channel_name */ 6:
                    message.channelName = reader.string();
                    break;
                case /* int32 room_channel_mode */ 7:
                    message.roomChannelMode = reader.int32();
                    break;
                case /* data.User need_approval_user */ 8:
                    message.needApprovalUser = User.internalBinaryRead(reader, reader.uint32(), options, message.needApprovalUser);
                    break;
                case /* data.User owner */ 9:
                    message.owner = User.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                case /* int64 max_member_count */ 10:
                    message.maxMemberCount = reader.int64().toBigInt();
                    break;
                case /* data.RtcExtInfo rtc_ext_info */ 200:
                    message.rtcExtInfo = RtcExtInfo.internalBinaryRead(reader, reader.uint32(), options, message.rtcExtInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 channel_id = 1; */
        if (message.channelId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.channelId);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        /* bool is_owner = 3; */
        if (message.isOwner !== false)
            writer.tag(3, WireType.Varint).bool(message.isOwner);
        /* int64 member_count = 4; */
        if (message.memberCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.memberCount);
        /* repeated data.User top_user = 5; */
        for (let i = 0; i < message.topUser.length; i++)
            User.internalBinaryWrite(message.topUser[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string channel_name = 6; */
        if (message.channelName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.channelName);
        /* int32 room_channel_mode = 7; */
        if (message.roomChannelMode !== 0)
            writer.tag(7, WireType.Varint).int32(message.roomChannelMode);
        /* data.User need_approval_user = 8; */
        if (message.needApprovalUser)
            User.internalBinaryWrite(message.needApprovalUser, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.User owner = 9; */
        if (message.owner)
            User.internalBinaryWrite(message.owner, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 max_member_count = 10; */
        if (message.maxMemberCount !== 0n)
            writer.tag(10, WireType.Varint).int64(message.maxMemberCount);
        /* data.RtcExtInfo rtc_ext_info = 200; */
        if (message.rtcExtInfo)
            RtcExtInfo.internalBinaryWrite(message.rtcExtInfo, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomChannelInfo
 */
export const RoomChannelInfo = new RoomChannelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RtcExtInfo$Type extends MessageType<RtcExtInfo> {
    constructor() {
        super("data.RtcExtInfo", [
            { no: 1, name: "link_mic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_core_exr_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rtc_strategy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "public_stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RtcExtInfo>): RtcExtInfo {
        const message = { linkMicIdStr: "", rtcExtInfo: "", liveCoreExrInfo: "", rtcStrategy: "", publicStreamId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RtcExtInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RtcExtInfo): RtcExtInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string link_mic_id_str */ 1:
                    message.linkMicIdStr = reader.string();
                    break;
                case /* string rtc_ext_info */ 2:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_exr_info */ 3:
                    message.liveCoreExrInfo = reader.string();
                    break;
                case /* string rtc_strategy */ 4:
                    message.rtcStrategy = reader.string();
                    break;
                case /* string public_stream_id */ 5:
                    message.publicStreamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RtcExtInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string link_mic_id_str = 1; */
        if (message.linkMicIdStr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.linkMicIdStr);
        /* string rtc_ext_info = 2; */
        if (message.rtcExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_exr_info = 3; */
        if (message.liveCoreExrInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.liveCoreExrInfo);
        /* string rtc_strategy = 4; */
        if (message.rtcStrategy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.rtcStrategy);
        /* string public_stream_id = 5; */
        if (message.publicStreamId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.publicStreamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RtcExtInfo
 */
export const RtcExtInfo = new RtcExtInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayByPlayItemInfo$Type extends MessageType<PlayByPlayItemInfo> {
    constructor() {
        super("data.PlayByPlayItemInfo", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "player_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "ref_player_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "incident_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "elapsed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "elapsed_plus", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "player_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ref_player_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "player_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "ref_player_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "start_time_pts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "end_time_pts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "start_time_sei", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "end_time_sei", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayByPlayItemInfo>): PlayByPlayItemInfo {
        const message = { timestamp: 0n, playerId: 0n, refPlayerId: 0n, incidentType: 0, elapsed: 0, elapsedPlus: 0, playerName: "", refPlayerName: "", playerIdStr: "", refPlayerIdStr: "", startTimePts: 0n, endTimePts: 0n, startTimeSei: 0n, endTimeSei: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayByPlayItemInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayByPlayItemInfo): PlayByPlayItemInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* int64 player_id */ 2:
                    message.playerId = reader.int64().toBigInt();
                    break;
                case /* int64 ref_player_id */ 3:
                    message.refPlayerId = reader.int64().toBigInt();
                    break;
                case /* int32 incident_type */ 4:
                    message.incidentType = reader.int32();
                    break;
                case /* double elapsed */ 5:
                    message.elapsed = reader.double();
                    break;
                case /* double elapsed_plus */ 6:
                    message.elapsedPlus = reader.double();
                    break;
                case /* string player_name */ 7:
                    message.playerName = reader.string();
                    break;
                case /* string ref_player_name */ 8:
                    message.refPlayerName = reader.string();
                    break;
                case /* string player_id_str */ 9:
                    message.playerIdStr = reader.string();
                    break;
                case /* string ref_player_id_str */ 10:
                    message.refPlayerIdStr = reader.string();
                    break;
                case /* int64 start_time_pts */ 11:
                    message.startTimePts = reader.int64().toBigInt();
                    break;
                case /* int64 end_time_pts */ 12:
                    message.endTimePts = reader.int64().toBigInt();
                    break;
                case /* int64 start_time_sei */ 13:
                    message.startTimeSei = reader.int64().toBigInt();
                    break;
                case /* int64 end_time_sei */ 14:
                    message.endTimeSei = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayByPlayItemInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        /* int64 player_id = 2; */
        if (message.playerId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.playerId);
        /* int64 ref_player_id = 3; */
        if (message.refPlayerId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.refPlayerId);
        /* int32 incident_type = 4; */
        if (message.incidentType !== 0)
            writer.tag(4, WireType.Varint).int32(message.incidentType);
        /* double elapsed = 5; */
        if (message.elapsed !== 0)
            writer.tag(5, WireType.Bit64).double(message.elapsed);
        /* double elapsed_plus = 6; */
        if (message.elapsedPlus !== 0)
            writer.tag(6, WireType.Bit64).double(message.elapsedPlus);
        /* string player_name = 7; */
        if (message.playerName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.playerName);
        /* string ref_player_name = 8; */
        if (message.refPlayerName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.refPlayerName);
        /* string player_id_str = 9; */
        if (message.playerIdStr !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.playerIdStr);
        /* string ref_player_id_str = 10; */
        if (message.refPlayerIdStr !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.refPlayerIdStr);
        /* int64 start_time_pts = 11; */
        if (message.startTimePts !== 0n)
            writer.tag(11, WireType.Varint).int64(message.startTimePts);
        /* int64 end_time_pts = 12; */
        if (message.endTimePts !== 0n)
            writer.tag(12, WireType.Varint).int64(message.endTimePts);
        /* int64 start_time_sei = 13; */
        if (message.startTimeSei !== 0n)
            writer.tag(13, WireType.Varint).int64(message.startTimeSei);
        /* int64 end_time_sei = 14; */
        if (message.endTimeSei !== 0n)
            writer.tag(14, WireType.Varint).int64(message.endTimeSei);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PlayByPlayItemInfo
 */
export const PlayByPlayItemInfo = new PlayByPlayItemInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInfo$Type extends MessageType<PlayerInfo> {
    constructor() {
        super("data.PlayerInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "shirt", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "lineup_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "portrait", kind: "message", T: () => Image },
            { no: 7, name: "last_event", kind: "message", T: () => PlayByPlayItemInfo },
            { no: 8, name: "x_axis", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "y_axis", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "position_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "playing_time", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "player_stats", kind: "message", T: () => PlayerStats },
            { no: 13, name: "player_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "last_up_event", kind: "message", T: () => PlayByPlayItemInfo },
            { no: 15, name: "event_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayByPlayItemInfo },
            { no: 16, name: "age", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "worth", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "club_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "superstar_flag", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "superstar_img", kind: "message", T: () => Image },
            { no: 21, name: "superstar_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "superstar_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerInfo>): PlayerInfo {
        const message = { id: 0n, name: "", shirt: 0, position: "", lineupType: 0, xAxis: 0, yAxis: 0, positionNum: 0, playingTime: 0, playerIdStr: "", eventList: [], age: 0, worth: 0, clubName: "", superstarFlag: false, superstarName: "", superstarDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInfo): PlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 shirt */ 3:
                    message.shirt = reader.int32();
                    break;
                case /* string position */ 4:
                    message.position = reader.string();
                    break;
                case /* int32 lineup_type */ 5:
                    message.lineupType = reader.int32();
                    break;
                case /* data.Image portrait */ 6:
                    message.portrait = Image.internalBinaryRead(reader, reader.uint32(), options, message.portrait);
                    break;
                case /* data.PlayByPlayItemInfo last_event */ 7:
                    message.lastEvent = PlayByPlayItemInfo.internalBinaryRead(reader, reader.uint32(), options, message.lastEvent);
                    break;
                case /* double x_axis */ 8:
                    message.xAxis = reader.double();
                    break;
                case /* double y_axis */ 9:
                    message.yAxis = reader.double();
                    break;
                case /* int32 position_num */ 10:
                    message.positionNum = reader.int32();
                    break;
                case /* double playing_time */ 11:
                    message.playingTime = reader.double();
                    break;
                case /* data.PlayerStats player_stats */ 12:
                    message.playerStats = PlayerStats.internalBinaryRead(reader, reader.uint32(), options, message.playerStats);
                    break;
                case /* string player_id_str */ 13:
                    message.playerIdStr = reader.string();
                    break;
                case /* data.PlayByPlayItemInfo last_up_event */ 14:
                    message.lastUpEvent = PlayByPlayItemInfo.internalBinaryRead(reader, reader.uint32(), options, message.lastUpEvent);
                    break;
                case /* repeated data.PlayByPlayItemInfo event_list */ 15:
                    message.eventList.push(PlayByPlayItemInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 age */ 16:
                    message.age = reader.int32();
                    break;
                case /* double worth */ 17:
                    message.worth = reader.double();
                    break;
                case /* string club_name */ 18:
                    message.clubName = reader.string();
                    break;
                case /* bool superstar_flag */ 19:
                    message.superstarFlag = reader.bool();
                    break;
                case /* data.Image superstar_img */ 20:
                    message.superstarImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.superstarImg);
                    break;
                case /* string superstar_name */ 21:
                    message.superstarName = reader.string();
                    break;
                case /* string superstar_desc */ 22:
                    message.superstarDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 shirt = 3; */
        if (message.shirt !== 0)
            writer.tag(3, WireType.Varint).int32(message.shirt);
        /* string position = 4; */
        if (message.position !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.position);
        /* int32 lineup_type = 5; */
        if (message.lineupType !== 0)
            writer.tag(5, WireType.Varint).int32(message.lineupType);
        /* data.Image portrait = 6; */
        if (message.portrait)
            Image.internalBinaryWrite(message.portrait, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.PlayByPlayItemInfo last_event = 7; */
        if (message.lastEvent)
            PlayByPlayItemInfo.internalBinaryWrite(message.lastEvent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* double x_axis = 8; */
        if (message.xAxis !== 0)
            writer.tag(8, WireType.Bit64).double(message.xAxis);
        /* double y_axis = 9; */
        if (message.yAxis !== 0)
            writer.tag(9, WireType.Bit64).double(message.yAxis);
        /* int32 position_num = 10; */
        if (message.positionNum !== 0)
            writer.tag(10, WireType.Varint).int32(message.positionNum);
        /* double playing_time = 11; */
        if (message.playingTime !== 0)
            writer.tag(11, WireType.Bit64).double(message.playingTime);
        /* data.PlayerStats player_stats = 12; */
        if (message.playerStats)
            PlayerStats.internalBinaryWrite(message.playerStats, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string player_id_str = 13; */
        if (message.playerIdStr !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.playerIdStr);
        /* data.PlayByPlayItemInfo last_up_event = 14; */
        if (message.lastUpEvent)
            PlayByPlayItemInfo.internalBinaryWrite(message.lastUpEvent, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PlayByPlayItemInfo event_list = 15; */
        for (let i = 0; i < message.eventList.length; i++)
            PlayByPlayItemInfo.internalBinaryWrite(message.eventList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* int32 age = 16; */
        if (message.age !== 0)
            writer.tag(16, WireType.Varint).int32(message.age);
        /* double worth = 17; */
        if (message.worth !== 0)
            writer.tag(17, WireType.Bit64).double(message.worth);
        /* string club_name = 18; */
        if (message.clubName !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.clubName);
        /* bool superstar_flag = 19; */
        if (message.superstarFlag !== false)
            writer.tag(19, WireType.Varint).bool(message.superstarFlag);
        /* data.Image superstar_img = 20; */
        if (message.superstarImg)
            Image.internalBinaryWrite(message.superstarImg, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* string superstar_name = 21; */
        if (message.superstarName !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.superstarName);
        /* string superstar_desc = 22; */
        if (message.superstarDesc !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.superstarDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PlayerInfo
 */
export const PlayerInfo = new PlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoalStageDetail$Type extends MessageType<GoalStageDetail> {
    constructor() {
        super("data.GoalStageDetail", [
            { no: 1, name: "first_half_goal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "second_half_goal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "overtime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "shots", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "total", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GoalStageDetail>): GoalStageDetail {
        const message = { firstHalfGoal: "", secondHalfGoal: "", overtime: "", shots: "", total: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GoalStageDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GoalStageDetail): GoalStageDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string first_half_goal */ 1:
                    message.firstHalfGoal = reader.string();
                    break;
                case /* string second_half_goal */ 2:
                    message.secondHalfGoal = reader.string();
                    break;
                case /* string overtime */ 3:
                    message.overtime = reader.string();
                    break;
                case /* string shots */ 4:
                    message.shots = reader.string();
                    break;
                case /* string total */ 5:
                    message.total = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GoalStageDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string first_half_goal = 1; */
        if (message.firstHalfGoal !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.firstHalfGoal);
        /* string second_half_goal = 2; */
        if (message.secondHalfGoal !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secondHalfGoal);
        /* string overtime = 3; */
        if (message.overtime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.overtime);
        /* string shots = 4; */
        if (message.shots !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.shots);
        /* string total = 5; */
        if (message.total !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GoalStageDetail
 */
export const GoalStageDetail = new GoalStageDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Against$Type extends MessageType<Against> {
    constructor() {
        super("data.Against", [
            { no: 1, name: "left_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "left_logo", kind: "message", T: () => Image },
            { no: 3, name: "left_goal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "left_players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerInfo },
            { no: 5, name: "left_goal_stage_detail", kind: "message", T: () => GoalStageDetail },
            { no: 6, name: "right_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "right_logo", kind: "message", T: () => Image },
            { no: 8, name: "right_goal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "right_players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerInfo },
            { no: 10, name: "right_goal_stage_detail", kind: "message", T: () => GoalStageDetail },
            { no: 11, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "left_team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "right_team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "diff_sei2abs_second", kind: "scalar", jsonName: "diffSei2absSecond", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "final_goal_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "current_goal_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "left_score_addition", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "right_score_addition", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "left_goal_int", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "right_goal_int", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "left_score_detail", kind: "message", T: () => BasketBallGoalStageDetail },
            { no: 23, name: "right_score_detail", kind: "message", T: () => BasketBallGoalStageDetail },
            { no: 24, name: "basketball_stage", kind: "message", T: () => BasketballStage },
            { no: 25, name: "esport_stage", kind: "message", T: () => ESportsStage }
        ]);
    }
    create(value?: PartialMessage<Against>): Against {
        const message = { leftName: "", leftGoal: "", leftPlayers: [], rightName: "", rightGoal: "", rightPlayers: [], timestamp: 0n, version: 0n, leftTeamId: 0n, rightTeamId: 0n, diffSei2AbsSecond: 0n, finalGoalStage: 0, currentGoalStage: 0, leftScoreAddition: 0, rightScoreAddition: 0, leftGoalInt: 0n, rightGoalInt: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Against>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Against): Against {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string left_name */ 1:
                    message.leftName = reader.string();
                    break;
                case /* data.Image left_logo */ 2:
                    message.leftLogo = Image.internalBinaryRead(reader, reader.uint32(), options, message.leftLogo);
                    break;
                case /* string left_goal */ 3:
                    message.leftGoal = reader.string();
                    break;
                case /* repeated data.PlayerInfo left_players */ 4:
                    message.leftPlayers.push(PlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.GoalStageDetail left_goal_stage_detail */ 5:
                    message.leftGoalStageDetail = GoalStageDetail.internalBinaryRead(reader, reader.uint32(), options, message.leftGoalStageDetail);
                    break;
                case /* string right_name */ 6:
                    message.rightName = reader.string();
                    break;
                case /* data.Image right_logo */ 7:
                    message.rightLogo = Image.internalBinaryRead(reader, reader.uint32(), options, message.rightLogo);
                    break;
                case /* string right_goal */ 8:
                    message.rightGoal = reader.string();
                    break;
                case /* repeated data.PlayerInfo right_players */ 9:
                    message.rightPlayers.push(PlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.GoalStageDetail right_goal_stage_detail */ 10:
                    message.rightGoalStageDetail = GoalStageDetail.internalBinaryRead(reader, reader.uint32(), options, message.rightGoalStageDetail);
                    break;
                case /* int64 timestamp */ 11:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* int64 version */ 12:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* int64 left_team_id */ 13:
                    message.leftTeamId = reader.int64().toBigInt();
                    break;
                case /* int64 right_team_id */ 14:
                    message.rightTeamId = reader.int64().toBigInt();
                    break;
                case /* int64 diff_sei2abs_second = 15 [json_name = "diffSei2absSecond"];*/ 15:
                    message.diffSei2AbsSecond = reader.int64().toBigInt();
                    break;
                case /* int32 final_goal_stage */ 16:
                    message.finalGoalStage = reader.int32();
                    break;
                case /* int32 current_goal_stage */ 17:
                    message.currentGoalStage = reader.int32();
                    break;
                case /* int32 left_score_addition */ 18:
                    message.leftScoreAddition = reader.int32();
                    break;
                case /* int32 right_score_addition */ 19:
                    message.rightScoreAddition = reader.int32();
                    break;
                case /* int64 left_goal_int */ 20:
                    message.leftGoalInt = reader.int64().toBigInt();
                    break;
                case /* int64 right_goal_int */ 21:
                    message.rightGoalInt = reader.int64().toBigInt();
                    break;
                case /* data.BasketBallGoalStageDetail left_score_detail */ 22:
                    message.leftScoreDetail = BasketBallGoalStageDetail.internalBinaryRead(reader, reader.uint32(), options, message.leftScoreDetail);
                    break;
                case /* data.BasketBallGoalStageDetail right_score_detail */ 23:
                    message.rightScoreDetail = BasketBallGoalStageDetail.internalBinaryRead(reader, reader.uint32(), options, message.rightScoreDetail);
                    break;
                case /* data.BasketballStage basketball_stage */ 24:
                    message.basketballStage = BasketballStage.internalBinaryRead(reader, reader.uint32(), options, message.basketballStage);
                    break;
                case /* data.ESportsStage esport_stage */ 25:
                    message.esportStage = ESportsStage.internalBinaryRead(reader, reader.uint32(), options, message.esportStage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Against, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string left_name = 1; */
        if (message.leftName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leftName);
        /* data.Image left_logo = 2; */
        if (message.leftLogo)
            Image.internalBinaryWrite(message.leftLogo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string left_goal = 3; */
        if (message.leftGoal !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.leftGoal);
        /* repeated data.PlayerInfo left_players = 4; */
        for (let i = 0; i < message.leftPlayers.length; i++)
            PlayerInfo.internalBinaryWrite(message.leftPlayers[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.GoalStageDetail left_goal_stage_detail = 5; */
        if (message.leftGoalStageDetail)
            GoalStageDetail.internalBinaryWrite(message.leftGoalStageDetail, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string right_name = 6; */
        if (message.rightName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rightName);
        /* data.Image right_logo = 7; */
        if (message.rightLogo)
            Image.internalBinaryWrite(message.rightLogo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string right_goal = 8; */
        if (message.rightGoal !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.rightGoal);
        /* repeated data.PlayerInfo right_players = 9; */
        for (let i = 0; i < message.rightPlayers.length; i++)
            PlayerInfo.internalBinaryWrite(message.rightPlayers[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.GoalStageDetail right_goal_stage_detail = 10; */
        if (message.rightGoalStageDetail)
            GoalStageDetail.internalBinaryWrite(message.rightGoalStageDetail, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int64 timestamp = 11; */
        if (message.timestamp !== 0n)
            writer.tag(11, WireType.Varint).int64(message.timestamp);
        /* int64 version = 12; */
        if (message.version !== 0n)
            writer.tag(12, WireType.Varint).int64(message.version);
        /* int64 left_team_id = 13; */
        if (message.leftTeamId !== 0n)
            writer.tag(13, WireType.Varint).int64(message.leftTeamId);
        /* int64 right_team_id = 14; */
        if (message.rightTeamId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.rightTeamId);
        /* int64 diff_sei2abs_second = 15 [json_name = "diffSei2absSecond"]; */
        if (message.diffSei2AbsSecond !== 0n)
            writer.tag(15, WireType.Varint).int64(message.diffSei2AbsSecond);
        /* int32 final_goal_stage = 16; */
        if (message.finalGoalStage !== 0)
            writer.tag(16, WireType.Varint).int32(message.finalGoalStage);
        /* int32 current_goal_stage = 17; */
        if (message.currentGoalStage !== 0)
            writer.tag(17, WireType.Varint).int32(message.currentGoalStage);
        /* int32 left_score_addition = 18; */
        if (message.leftScoreAddition !== 0)
            writer.tag(18, WireType.Varint).int32(message.leftScoreAddition);
        /* int32 right_score_addition = 19; */
        if (message.rightScoreAddition !== 0)
            writer.tag(19, WireType.Varint).int32(message.rightScoreAddition);
        /* int64 left_goal_int = 20; */
        if (message.leftGoalInt !== 0n)
            writer.tag(20, WireType.Varint).int64(message.leftGoalInt);
        /* int64 right_goal_int = 21; */
        if (message.rightGoalInt !== 0n)
            writer.tag(21, WireType.Varint).int64(message.rightGoalInt);
        /* data.BasketBallGoalStageDetail left_score_detail = 22; */
        if (message.leftScoreDetail)
            BasketBallGoalStageDetail.internalBinaryWrite(message.leftScoreDetail, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* data.BasketBallGoalStageDetail right_score_detail = 23; */
        if (message.rightScoreDetail)
            BasketBallGoalStageDetail.internalBinaryWrite(message.rightScoreDetail, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* data.BasketballStage basketball_stage = 24; */
        if (message.basketballStage)
            BasketballStage.internalBinaryWrite(message.basketballStage, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* data.ESportsStage esport_stage = 25; */
        if (message.esportStage)
            ESportsStage.internalBinaryWrite(message.esportStage, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Against
 */
export const Against = new Against$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToutiaoMatchData$Type extends MessageType<ToutiaoMatchData> {
    constructor() {
        super("data.ToutiaoMatchData", [
            { no: 1, name: "match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "match_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "against", kind: "message", T: () => Against },
            { no: 4, name: "started_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "venue_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "referee", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "team_stats", kind: "message", T: () => TeamStats },
            { no: 9, name: "player_stats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats },
            { no: 10, name: "match_group", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "match_round", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "match_phase_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "can_subscribe", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "display_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "bjt_format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "local_time_format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "live_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "match_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "match_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "started_time_unix", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "left_score_addition", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "right_score_addition", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "duration", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "event_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "winner_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "winner_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "winner_icon", kind: "message", T: () => Image },
            { no: 28, name: "event_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "bo_num", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToutiaoMatchData>): ToutiaoMatchData {
        const message = { matchId: 0n, matchTitle: "", startedTime: "", city: "", venueName: "", referee: "", playerStats: [], matchGroup: "", matchRound: "", matchPhaseName: "", canSubscribe: false, displayStatus: 0, bjtFormat: "", localTimeFormat: "", liveStatus: 0, matchStatus: 0, matchIdStr: "", startedTimeUnix: 0n, leftScoreAddition: 0, rightScoreAddition: 0, duration: "", eventIds: [], winnerId: 0n, winnerIdStr: "", eventName: "", boNum: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToutiaoMatchData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToutiaoMatchData): ToutiaoMatchData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 match_id */ 1:
                    message.matchId = reader.int64().toBigInt();
                    break;
                case /* string match_title */ 2:
                    message.matchTitle = reader.string();
                    break;
                case /* data.Against against */ 3:
                    message.against = Against.internalBinaryRead(reader, reader.uint32(), options, message.against);
                    break;
                case /* string started_time */ 4:
                    message.startedTime = reader.string();
                    break;
                case /* string city */ 5:
                    message.city = reader.string();
                    break;
                case /* string venue_name */ 6:
                    message.venueName = reader.string();
                    break;
                case /* string referee */ 7:
                    message.referee = reader.string();
                    break;
                case /* data.TeamStats team_stats */ 8:
                    message.teamStats = TeamStats.internalBinaryRead(reader, reader.uint32(), options, message.teamStats);
                    break;
                case /* repeated data.PlayerStats player_stats */ 9:
                    message.playerStats.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string match_group */ 10:
                    message.matchGroup = reader.string();
                    break;
                case /* string match_round */ 11:
                    message.matchRound = reader.string();
                    break;
                case /* string match_phase_name */ 12:
                    message.matchPhaseName = reader.string();
                    break;
                case /* bool can_subscribe */ 13:
                    message.canSubscribe = reader.bool();
                    break;
                case /* int32 display_status */ 14:
                    message.displayStatus = reader.int32();
                    break;
                case /* string bjt_format */ 15:
                    message.bjtFormat = reader.string();
                    break;
                case /* string local_time_format */ 16:
                    message.localTimeFormat = reader.string();
                    break;
                case /* int32 live_status */ 17:
                    message.liveStatus = reader.int32();
                    break;
                case /* int32 match_status */ 18:
                    message.matchStatus = reader.int32();
                    break;
                case /* string match_id_str */ 19:
                    message.matchIdStr = reader.string();
                    break;
                case /* int64 started_time_unix */ 20:
                    message.startedTimeUnix = reader.int64().toBigInt();
                    break;
                case /* int32 left_score_addition */ 21:
                    message.leftScoreAddition = reader.int32();
                    break;
                case /* int32 right_score_addition */ 22:
                    message.rightScoreAddition = reader.int32();
                    break;
                case /* string duration */ 23:
                    message.duration = reader.string();
                    break;
                case /* repeated int64 event_ids */ 24:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.eventIds.push(reader.int64().toBigInt());
                    else
                        message.eventIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 winner_id */ 25:
                    message.winnerId = reader.int64().toBigInt();
                    break;
                case /* string winner_id_str */ 26:
                    message.winnerIdStr = reader.string();
                    break;
                case /* data.Image winner_icon */ 27:
                    message.winnerIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.winnerIcon);
                    break;
                case /* string event_name */ 28:
                    message.eventName = reader.string();
                    break;
                case /* string bo_num */ 29:
                    message.boNum = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToutiaoMatchData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 match_id = 1; */
        if (message.matchId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.matchId);
        /* string match_title = 2; */
        if (message.matchTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.matchTitle);
        /* data.Against against = 3; */
        if (message.against)
            Against.internalBinaryWrite(message.against, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string started_time = 4; */
        if (message.startedTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.startedTime);
        /* string city = 5; */
        if (message.city !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.city);
        /* string venue_name = 6; */
        if (message.venueName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.venueName);
        /* string referee = 7; */
        if (message.referee !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.referee);
        /* data.TeamStats team_stats = 8; */
        if (message.teamStats)
            TeamStats.internalBinaryWrite(message.teamStats, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PlayerStats player_stats = 9; */
        for (let i = 0; i < message.playerStats.length; i++)
            PlayerStats.internalBinaryWrite(message.playerStats[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string match_group = 10; */
        if (message.matchGroup !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.matchGroup);
        /* string match_round = 11; */
        if (message.matchRound !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.matchRound);
        /* string match_phase_name = 12; */
        if (message.matchPhaseName !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.matchPhaseName);
        /* bool can_subscribe = 13; */
        if (message.canSubscribe !== false)
            writer.tag(13, WireType.Varint).bool(message.canSubscribe);
        /* int32 display_status = 14; */
        if (message.displayStatus !== 0)
            writer.tag(14, WireType.Varint).int32(message.displayStatus);
        /* string bjt_format = 15; */
        if (message.bjtFormat !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.bjtFormat);
        /* string local_time_format = 16; */
        if (message.localTimeFormat !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.localTimeFormat);
        /* int32 live_status = 17; */
        if (message.liveStatus !== 0)
            writer.tag(17, WireType.Varint).int32(message.liveStatus);
        /* int32 match_status = 18; */
        if (message.matchStatus !== 0)
            writer.tag(18, WireType.Varint).int32(message.matchStatus);
        /* string match_id_str = 19; */
        if (message.matchIdStr !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.matchIdStr);
        /* int64 started_time_unix = 20; */
        if (message.startedTimeUnix !== 0n)
            writer.tag(20, WireType.Varint).int64(message.startedTimeUnix);
        /* int32 left_score_addition = 21; */
        if (message.leftScoreAddition !== 0)
            writer.tag(21, WireType.Varint).int32(message.leftScoreAddition);
        /* int32 right_score_addition = 22; */
        if (message.rightScoreAddition !== 0)
            writer.tag(22, WireType.Varint).int32(message.rightScoreAddition);
        /* string duration = 23; */
        if (message.duration !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.duration);
        /* repeated int64 event_ids = 24; */
        if (message.eventIds.length) {
            writer.tag(24, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.eventIds.length; i++)
                writer.int64(message.eventIds[i]);
            writer.join();
        }
        /* int64 winner_id = 25; */
        if (message.winnerId !== 0n)
            writer.tag(25, WireType.Varint).int64(message.winnerId);
        /* string winner_id_str = 26; */
        if (message.winnerIdStr !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.winnerIdStr);
        /* data.Image winner_icon = 27; */
        if (message.winnerIcon)
            Image.internalBinaryWrite(message.winnerIcon, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* string event_name = 28; */
        if (message.eventName !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.eventName);
        /* string bo_num = 29; */
        if (message.boNum !== "")
            writer.tag(29, WireType.LengthDelimited).string(message.boNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ToutiaoMatchData
 */
export const ToutiaoMatchData = new ToutiaoMatchData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamStats$Type extends MessageType<TeamStats> {
    constructor() {
        super("data.TeamStats", [
            { no: 1, name: "team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "possession", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "shot_on", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "shot_off", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "free_kick", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "corner", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "counter", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "saves", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "offside", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "foul_commit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "yellow_cards", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "redCards", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "pass", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 14, name: "key_pass", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "passes_completed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "steal", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "intercept", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "shots", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 19, name: "possession_five_min", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<TeamStats>): TeamStats {
        const message = { teamId: 0n, possession: 0, shotOn: 0, shotOff: 0, freeKick: 0, corner: 0, counter: 0, saves: 0, offside: 0, foulCommit: 0, yellowCards: 0, redCards: 0, pass: 0, keyPass: 0, passesCompleted: 0, steal: 0, intercept: 0, shots: 0, possessionFiveMin: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamStats): TeamStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 team_id */ 1:
                    message.teamId = reader.int64().toBigInt();
                    break;
                case /* double possession */ 2:
                    message.possession = reader.double();
                    break;
                case /* double shot_on */ 3:
                    message.shotOn = reader.double();
                    break;
                case /* double shot_off */ 4:
                    message.shotOff = reader.double();
                    break;
                case /* double free_kick */ 5:
                    message.freeKick = reader.double();
                    break;
                case /* double corner */ 6:
                    message.corner = reader.double();
                    break;
                case /* double counter */ 7:
                    message.counter = reader.double();
                    break;
                case /* double saves */ 8:
                    message.saves = reader.double();
                    break;
                case /* double offside */ 9:
                    message.offside = reader.double();
                    break;
                case /* double foul_commit */ 10:
                    message.foulCommit = reader.double();
                    break;
                case /* double yellow_cards */ 11:
                    message.yellowCards = reader.double();
                    break;
                case /* double redCards */ 12:
                    message.redCards = reader.double();
                    break;
                case /* double pass */ 13:
                    message.pass = reader.double();
                    break;
                case /* double key_pass */ 14:
                    message.keyPass = reader.double();
                    break;
                case /* double passes_completed */ 15:
                    message.passesCompleted = reader.double();
                    break;
                case /* double steal */ 16:
                    message.steal = reader.double();
                    break;
                case /* double intercept */ 17:
                    message.intercept = reader.double();
                    break;
                case /* double shots */ 18:
                    message.shots = reader.double();
                    break;
                case /* double possession_five_min */ 19:
                    message.possessionFiveMin = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.teamId);
        /* double possession = 2; */
        if (message.possession !== 0)
            writer.tag(2, WireType.Bit64).double(message.possession);
        /* double shot_on = 3; */
        if (message.shotOn !== 0)
            writer.tag(3, WireType.Bit64).double(message.shotOn);
        /* double shot_off = 4; */
        if (message.shotOff !== 0)
            writer.tag(4, WireType.Bit64).double(message.shotOff);
        /* double free_kick = 5; */
        if (message.freeKick !== 0)
            writer.tag(5, WireType.Bit64).double(message.freeKick);
        /* double corner = 6; */
        if (message.corner !== 0)
            writer.tag(6, WireType.Bit64).double(message.corner);
        /* double counter = 7; */
        if (message.counter !== 0)
            writer.tag(7, WireType.Bit64).double(message.counter);
        /* double saves = 8; */
        if (message.saves !== 0)
            writer.tag(8, WireType.Bit64).double(message.saves);
        /* double offside = 9; */
        if (message.offside !== 0)
            writer.tag(9, WireType.Bit64).double(message.offside);
        /* double foul_commit = 10; */
        if (message.foulCommit !== 0)
            writer.tag(10, WireType.Bit64).double(message.foulCommit);
        /* double yellow_cards = 11; */
        if (message.yellowCards !== 0)
            writer.tag(11, WireType.Bit64).double(message.yellowCards);
        /* double redCards = 12; */
        if (message.redCards !== 0)
            writer.tag(12, WireType.Bit64).double(message.redCards);
        /* double pass = 13; */
        if (message.pass !== 0)
            writer.tag(13, WireType.Bit64).double(message.pass);
        /* double key_pass = 14; */
        if (message.keyPass !== 0)
            writer.tag(14, WireType.Bit64).double(message.keyPass);
        /* double passes_completed = 15; */
        if (message.passesCompleted !== 0)
            writer.tag(15, WireType.Bit64).double(message.passesCompleted);
        /* double steal = 16; */
        if (message.steal !== 0)
            writer.tag(16, WireType.Bit64).double(message.steal);
        /* double intercept = 17; */
        if (message.intercept !== 0)
            writer.tag(17, WireType.Bit64).double(message.intercept);
        /* double shots = 18; */
        if (message.shots !== 0)
            writer.tag(18, WireType.Bit64).double(message.shots);
        /* double possession_five_min = 19; */
        if (message.possessionFiveMin !== 0)
            writer.tag(19, WireType.Bit64).double(message.possessionFiveMin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamStats
 */
export const TeamStats = new TeamStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerStats$Type extends MessageType<PlayerStats> {
    constructor() {
        super("data.PlayerStats", [
            { no: 1, name: "player_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "minutes_played", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "goals", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "assists", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "shots", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "shots_on", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "y_cards", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "r_cards", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "offsides", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "fouls_committed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "own_goals", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "saves", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 14, name: "caught_ball", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "clean_sheets", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "pass", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "key_pass", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "passes_completed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 19, name: "steal", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 20, name: "intercept", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "clearances", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerStats>): PlayerStats {
        const message = { playerId: 0n, teamId: 0n, minutesPlayed: 0, goals: 0, assists: 0, shots: 0, shotsOn: 0, yCards: 0, rCards: 0, offsides: 0, foulsCommitted: 0, ownGoals: 0, saves: 0, caughtBall: 0, cleanSheets: 0, pass: 0, keyPass: 0, passesCompleted: 0, steal: 0, intercept: 0, clearances: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 player_id */ 1:
                    message.playerId = reader.int64().toBigInt();
                    break;
                case /* int64 team_id */ 2:
                    message.teamId = reader.int64().toBigInt();
                    break;
                case /* double minutes_played */ 3:
                    message.minutesPlayed = reader.double();
                    break;
                case /* double goals */ 4:
                    message.goals = reader.double();
                    break;
                case /* double assists */ 5:
                    message.assists = reader.double();
                    break;
                case /* double shots */ 6:
                    message.shots = reader.double();
                    break;
                case /* double shots_on */ 7:
                    message.shotsOn = reader.double();
                    break;
                case /* double y_cards */ 8:
                    message.yCards = reader.double();
                    break;
                case /* double r_cards */ 9:
                    message.rCards = reader.double();
                    break;
                case /* double offsides */ 10:
                    message.offsides = reader.double();
                    break;
                case /* double fouls_committed */ 11:
                    message.foulsCommitted = reader.double();
                    break;
                case /* double own_goals */ 12:
                    message.ownGoals = reader.double();
                    break;
                case /* double saves */ 13:
                    message.saves = reader.double();
                    break;
                case /* double caught_ball */ 14:
                    message.caughtBall = reader.double();
                    break;
                case /* double clean_sheets */ 15:
                    message.cleanSheets = reader.double();
                    break;
                case /* double pass */ 16:
                    message.pass = reader.double();
                    break;
                case /* double key_pass */ 17:
                    message.keyPass = reader.double();
                    break;
                case /* double passes_completed */ 18:
                    message.passesCompleted = reader.double();
                    break;
                case /* double steal */ 19:
                    message.steal = reader.double();
                    break;
                case /* double intercept */ 20:
                    message.intercept = reader.double();
                    break;
                case /* double clearances */ 21:
                    message.clearances = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 player_id = 1; */
        if (message.playerId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.playerId);
        /* int64 team_id = 2; */
        if (message.teamId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.teamId);
        /* double minutes_played = 3; */
        if (message.minutesPlayed !== 0)
            writer.tag(3, WireType.Bit64).double(message.minutesPlayed);
        /* double goals = 4; */
        if (message.goals !== 0)
            writer.tag(4, WireType.Bit64).double(message.goals);
        /* double assists = 5; */
        if (message.assists !== 0)
            writer.tag(5, WireType.Bit64).double(message.assists);
        /* double shots = 6; */
        if (message.shots !== 0)
            writer.tag(6, WireType.Bit64).double(message.shots);
        /* double shots_on = 7; */
        if (message.shotsOn !== 0)
            writer.tag(7, WireType.Bit64).double(message.shotsOn);
        /* double y_cards = 8; */
        if (message.yCards !== 0)
            writer.tag(8, WireType.Bit64).double(message.yCards);
        /* double r_cards = 9; */
        if (message.rCards !== 0)
            writer.tag(9, WireType.Bit64).double(message.rCards);
        /* double offsides = 10; */
        if (message.offsides !== 0)
            writer.tag(10, WireType.Bit64).double(message.offsides);
        /* double fouls_committed = 11; */
        if (message.foulsCommitted !== 0)
            writer.tag(11, WireType.Bit64).double(message.foulsCommitted);
        /* double own_goals = 12; */
        if (message.ownGoals !== 0)
            writer.tag(12, WireType.Bit64).double(message.ownGoals);
        /* double saves = 13; */
        if (message.saves !== 0)
            writer.tag(13, WireType.Bit64).double(message.saves);
        /* double caught_ball = 14; */
        if (message.caughtBall !== 0)
            writer.tag(14, WireType.Bit64).double(message.caughtBall);
        /* double clean_sheets = 15; */
        if (message.cleanSheets !== 0)
            writer.tag(15, WireType.Bit64).double(message.cleanSheets);
        /* double pass = 16; */
        if (message.pass !== 0)
            writer.tag(16, WireType.Bit64).double(message.pass);
        /* double key_pass = 17; */
        if (message.keyPass !== 0)
            writer.tag(17, WireType.Bit64).double(message.keyPass);
        /* double passes_completed = 18; */
        if (message.passesCompleted !== 0)
            writer.tag(18, WireType.Bit64).double(message.passesCompleted);
        /* double steal = 19; */
        if (message.steal !== 0)
            writer.tag(19, WireType.Bit64).double(message.steal);
        /* double intercept = 20; */
        if (message.intercept !== 0)
            writer.tag(20, WireType.Bit64).double(message.intercept);
        /* double clearances = 21; */
        if (message.clearances !== 0)
            writer.tag(21, WireType.Bit64).double(message.clearances);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PlayerStats
 */
export const PlayerStats = new PlayerStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchShareBackground$Type extends MessageType<MatchShareBackground> {
    constructor() {
        super("data.MatchShareBackground", [
            { no: 1, name: "vertical_img", kind: "message", T: () => Image },
            { no: 2, name: "horizontal_img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<MatchShareBackground>): MatchShareBackground {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchShareBackground>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchShareBackground): MatchShareBackground {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image vertical_img */ 1:
                    message.verticalImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.verticalImg);
                    break;
                case /* data.Image horizontal_img */ 2:
                    message.horizontalImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.horizontalImg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchShareBackground, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image vertical_img = 1; */
        if (message.verticalImg)
            Image.internalBinaryWrite(message.verticalImg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image horizontal_img = 2; */
        if (message.horizontalImg)
            Image.internalBinaryWrite(message.horizontalImg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchShareBackground
 */
export const MatchShareBackground = new MatchShareBackground$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchTitle$Type extends MessageType<MatchTitle> {
    constructor() {
        super("data.MatchTitle", [
            { no: 1, name: "room_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title_icon", kind: "message", T: () => MatchTitle_TitleIcon }
        ]);
    }
    create(value?: PartialMessage<MatchTitle>): MatchTitle {
        const message = { roomTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTitle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTitle): MatchTitle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string room_title */ 1:
                    message.roomTitle = reader.string();
                    break;
                case /* data.MatchTitle.TitleIcon title_icon */ 2:
                    message.titleIcon = MatchTitle_TitleIcon.internalBinaryRead(reader, reader.uint32(), options, message.titleIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTitle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string room_title = 1; */
        if (message.roomTitle !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roomTitle);
        /* data.MatchTitle.TitleIcon title_icon = 2; */
        if (message.titleIcon)
            MatchTitle_TitleIcon.internalBinaryWrite(message.titleIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchTitle
 */
export const MatchTitle = new MatchTitle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchTitle_TitleIcon$Type extends MessageType<MatchTitle_TitleIcon> {
    constructor() {
        super("data.MatchTitle.TitleIcon", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "size_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchTitle_TitleIcon>): MatchTitle_TitleIcon {
        const message = { url: "", sizeType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTitle_TitleIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTitle_TitleIcon): MatchTitle_TitleIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* int32 size_type */ 2:
                    message.sizeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTitle_TitleIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* int32 size_type = 2; */
        if (message.sizeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.sizeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchTitle.TitleIcon
 */
export const MatchTitle_TitleIcon = new MatchTitle_TitleIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchTab$Type extends MessageType<MatchTab> {
    constructor() {
        super("data.MatchTab", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MatchTab>): MatchTab {
        const message = { title: "", schema: "", id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTab>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTab): MatchTab {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* int64 id */ 3:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTab, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* int64 id = 3; */
        if (message.id !== 0n)
            writer.tag(3, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchTab
 */
export const MatchTab = new MatchTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDrawer$Type extends MessageType<MatchDrawer> {
    constructor() {
        super("data.MatchDrawer", [
            { no: 1, name: "entry_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entry_icon", kind: "message", T: () => Image },
            { no: 3, name: "drawer_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "drawer_background", kind: "message", T: () => Image },
            { no: 5, name: "return_btn_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "display_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDrawer>): MatchDrawer {
        const message = { entryName: "", drawerTitle: "", returnBtnText: "", displayMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDrawer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDrawer): MatchDrawer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entry_name */ 1:
                    message.entryName = reader.string();
                    break;
                case /* data.Image entry_icon */ 2:
                    message.entryIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.entryIcon);
                    break;
                case /* string drawer_title */ 3:
                    message.drawerTitle = reader.string();
                    break;
                case /* data.Image drawer_background */ 4:
                    message.drawerBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.drawerBackground);
                    break;
                case /* string return_btn_text */ 5:
                    message.returnBtnText = reader.string();
                    break;
                case /* int32 display_mode */ 6:
                    message.displayMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDrawer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entry_name = 1; */
        if (message.entryName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entryName);
        /* data.Image entry_icon = 2; */
        if (message.entryIcon)
            Image.internalBinaryWrite(message.entryIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string drawer_title = 3; */
        if (message.drawerTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.drawerTitle);
        /* data.Image drawer_background = 4; */
        if (message.drawerBackground)
            Image.internalBinaryWrite(message.drawerBackground, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string return_btn_text = 5; */
        if (message.returnBtnText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.returnBtnText);
        /* int32 display_mode = 6; */
        if (message.displayMode !== 0)
            writer.tag(6, WireType.Varint).int32(message.displayMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MatchDrawer
 */
export const MatchDrawer = new MatchDrawer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BasketBallGoalStageDetail$Type extends MessageType<BasketBallGoalStageDetail> {
    constructor() {
        super("data.BasketBallGoalStageDetail", [
            { no: 1, name: "first_period", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "second_period", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "third_period", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "forth_period", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "overtime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BasketBallGoalStageDetail>): BasketBallGoalStageDetail {
        const message = { firstPeriod: 0, secondPeriod: 0, thirdPeriod: 0, forthPeriod: 0, overtime: 0, total: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BasketBallGoalStageDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasketBallGoalStageDetail): BasketBallGoalStageDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 first_period */ 1:
                    message.firstPeriod = reader.int32();
                    break;
                case /* int32 second_period */ 2:
                    message.secondPeriod = reader.int32();
                    break;
                case /* int32 third_period */ 3:
                    message.thirdPeriod = reader.int32();
                    break;
                case /* int32 forth_period */ 4:
                    message.forthPeriod = reader.int32();
                    break;
                case /* int32 overtime */ 5:
                    message.overtime = reader.int32();
                    break;
                case /* int32 total */ 6:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasketBallGoalStageDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 first_period = 1; */
        if (message.firstPeriod !== 0)
            writer.tag(1, WireType.Varint).int32(message.firstPeriod);
        /* int32 second_period = 2; */
        if (message.secondPeriod !== 0)
            writer.tag(2, WireType.Varint).int32(message.secondPeriod);
        /* int32 third_period = 3; */
        if (message.thirdPeriod !== 0)
            writer.tag(3, WireType.Varint).int32(message.thirdPeriod);
        /* int32 forth_period = 4; */
        if (message.forthPeriod !== 0)
            writer.tag(4, WireType.Varint).int32(message.forthPeriod);
        /* int32 overtime = 5; */
        if (message.overtime !== 0)
            writer.tag(5, WireType.Varint).int32(message.overtime);
        /* int32 total = 6; */
        if (message.total !== 0)
            writer.tag(6, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BasketBallGoalStageDetail
 */
export const BasketBallGoalStageDetail = new BasketBallGoalStageDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BasketballStage$Type extends MessageType<BasketballStage> {
    constructor() {
        super("data.BasketballStage", [
            { no: 1, name: "current_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "final_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BasketballStage>): BasketballStage {
        const message = { currentStage: 0, finalStage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BasketballStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasketballStage): BasketballStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current_stage */ 1:
                    message.currentStage = reader.int32();
                    break;
                case /* int32 final_stage */ 2:
                    message.finalStage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasketballStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current_stage = 1; */
        if (message.currentStage !== 0)
            writer.tag(1, WireType.Varint).int32(message.currentStage);
        /* int32 final_stage = 2; */
        if (message.finalStage !== 0)
            writer.tag(2, WireType.Varint).int32(message.finalStage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BasketballStage
 */
export const BasketballStage = new BasketballStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ESportsStage$Type extends MessageType<ESportsStage> {
    constructor() {
        super("data.ESportsStage", [
            { no: 1, name: "current_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "final_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ESportsStage>): ESportsStage {
        const message = { currentStage: 0, finalStage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ESportsStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ESportsStage): ESportsStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current_stage */ 1:
                    message.currentStage = reader.int32();
                    break;
                case /* int32 final_stage */ 2:
                    message.finalStage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ESportsStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current_stage = 1; */
        if (message.currentStage !== 0)
            writer.tag(1, WireType.Varint).int32(message.currentStage);
        /* int32 final_stage = 2; */
        if (message.finalStage !== 0)
            writer.tag(2, WireType.Varint).int32(message.finalStage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ESportsStage
 */
export const ESportsStage = new ESportsStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveItemInfo$Type extends MessageType<PaidLiveItemInfo> {
    constructor() {
        super("data.PaidLiveItemInfo", [
            { no: 1, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "item_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaidLiveItemInfo>): PaidLiveItemInfo {
        const message = { itemId: 0n, itemType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveItemInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveItemInfo): PaidLiveItemInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 item_id */ 1:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* int32 item_type */ 2:
                    message.itemType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveItemInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 item_id = 1; */
        if (message.itemId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.itemId);
        /* int32 item_type = 2; */
        if (message.itemType !== 0)
            writer.tag(2, WireType.Varint).int32(message.itemType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLiveItemInfo
 */
export const PaidLiveItemInfo = new PaidLiveItemInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivilegeInfo$Type extends MessageType<PrivilegeInfo> {
    constructor() {
        super("data.PrivilegeInfo", [
            { no: 1, name: "entity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PaidLiveItemInfo },
            { no: 3, name: "paid_live_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "paid_live_info", kind: "message", T: () => PrivilegeBaseInfo },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "privilege_url", kind: "message", T: () => PrivilegeUrl },
            { no: 7, name: "ui_config", kind: "message", T: () => PaidLiveUIBaseConfig },
            { no: 8, name: "entity_config", kind: "message", T: () => PaidLiveConfig }
        ]);
    }
    create(value?: PartialMessage<PrivilegeInfo>): PrivilegeInfo {
        const message = { entityId: 0n, itemList: [], paidLiveType: 0, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivilegeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivilegeInfo): PrivilegeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 entity_id */ 1:
                    message.entityId = reader.int64().toBigInt();
                    break;
                case /* repeated data.PaidLiveItemInfo item_list */ 2:
                    message.itemList.push(PaidLiveItemInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 paid_live_type */ 3:
                    message.paidLiveType = reader.int32();
                    break;
                case /* data.PrivilegeBaseInfo paid_live_info */ 4:
                    message.paidLiveInfo = PrivilegeBaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.paidLiveInfo);
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                case /* data.PrivilegeUrl privilege_url */ 6:
                    message.privilegeUrl = PrivilegeUrl.internalBinaryRead(reader, reader.uint32(), options, message.privilegeUrl);
                    break;
                case /* data.PaidLiveUIBaseConfig ui_config */ 7:
                    message.uiConfig = PaidLiveUIBaseConfig.internalBinaryRead(reader, reader.uint32(), options, message.uiConfig);
                    break;
                case /* data.PaidLiveConfig entity_config */ 8:
                    message.entityConfig = PaidLiveConfig.internalBinaryRead(reader, reader.uint32(), options, message.entityConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivilegeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 entity_id = 1; */
        if (message.entityId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.entityId);
        /* repeated data.PaidLiveItemInfo item_list = 2; */
        for (let i = 0; i < message.itemList.length; i++)
            PaidLiveItemInfo.internalBinaryWrite(message.itemList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 paid_live_type = 3; */
        if (message.paidLiveType !== 0)
            writer.tag(3, WireType.Varint).int32(message.paidLiveType);
        /* data.PrivilegeBaseInfo paid_live_info = 4; */
        if (message.paidLiveInfo)
            PrivilegeBaseInfo.internalBinaryWrite(message.paidLiveInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        /* data.PrivilegeUrl privilege_url = 6; */
        if (message.privilegeUrl)
            PrivilegeUrl.internalBinaryWrite(message.privilegeUrl, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.PaidLiveUIBaseConfig ui_config = 7; */
        if (message.uiConfig)
            PaidLiveUIBaseConfig.internalBinaryWrite(message.uiConfig, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.PaidLiveConfig entity_config = 8; */
        if (message.entityConfig)
            PaidLiveConfig.internalBinaryWrite(message.entityConfig, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PrivilegeInfo
 */
export const PrivilegeInfo = new PrivilegeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivilegeBaseInfo$Type extends MessageType<PrivilegeBaseInfo> {
    constructor() {
        super("data.PrivilegeBaseInfo", [
            { no: 1, name: "paid_live_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "view_right", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "delivery", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PrivilegeBaseInfo>): PrivilegeBaseInfo {
        const message = { paidLiveType: 0, viewRight: 0, delivery: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivilegeBaseInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivilegeBaseInfo): PrivilegeBaseInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 paid_live_type */ 1:
                    message.paidLiveType = reader.int32();
                    break;
                case /* int32 view_right */ 2:
                    message.viewRight = reader.int32();
                    break;
                case /* int32 delivery */ 3:
                    message.delivery = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivilegeBaseInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 paid_live_type = 1; */
        if (message.paidLiveType !== 0)
            writer.tag(1, WireType.Varint).int32(message.paidLiveType);
        /* int32 view_right = 2; */
        if (message.viewRight !== 0)
            writer.tag(2, WireType.Varint).int32(message.viewRight);
        /* int32 delivery = 3; */
        if (message.delivery !== 0)
            writer.tag(3, WireType.Varint).int32(message.delivery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PrivilegeBaseInfo
 */
export const PrivilegeBaseInfo = new PrivilegeBaseInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivilegeUrl$Type extends MessageType<PrivilegeUrl> {
    constructor() {
        super("data.PrivilegeUrl", [
            { no: 1, name: "privilege_panel_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "privilege_card_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrivilegeUrl>): PrivilegeUrl {
        const message = { privilegePanelSchema: "", privilegeCardSchema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivilegeUrl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivilegeUrl): PrivilegeUrl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string privilege_panel_schema */ 1:
                    message.privilegePanelSchema = reader.string();
                    break;
                case /* string privilege_card_schema */ 2:
                    message.privilegeCardSchema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivilegeUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string privilege_panel_schema = 1; */
        if (message.privilegePanelSchema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.privilegePanelSchema);
        /* string privilege_card_schema = 2; */
        if (message.privilegeCardSchema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.privilegeCardSchema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PrivilegeUrl
 */
export const PrivilegeUrl = new PrivilegeUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveConfig$Type extends MessageType<PaidLiveConfig> {
    constructor() {
        super("data.PaidLiveConfig", [
            { no: 1, name: "spu_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "spu_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sku_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "sku_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "cover", kind: "message", T: () => Image },
            { no: 9, name: "sell_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "ios_pay_price_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PaidLiveConfig_PriceInfo },
            { no: 12, name: "android_pay_price_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PaidLiveConfig_PriceInfo },
            { no: 13, name: "user_right", kind: "message", T: () => PaidLiveConfig_UserRight }
        ]);
    }
    create(value?: PartialMessage<PaidLiveConfig>): PaidLiveConfig {
        const message = { spuId: 0n, spuIdStr: "", skuId: 0n, skuIdStr: "", title: "", subTitle: "", tags: [], sellStatus: 0, status: 0, iosPayPriceInfo: [], androidPayPriceInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveConfig): PaidLiveConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 spu_id */ 1:
                    message.spuId = reader.int64().toBigInt();
                    break;
                case /* string spu_id_str */ 2:
                    message.spuIdStr = reader.string();
                    break;
                case /* int64 sku_id */ 3:
                    message.skuId = reader.int64().toBigInt();
                    break;
                case /* string sku_id_str */ 4:
                    message.skuIdStr = reader.string();
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 6:
                    message.subTitle = reader.string();
                    break;
                case /* repeated string tags */ 7:
                    message.tags.push(reader.string());
                    break;
                case /* data.Image cover */ 8:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                case /* int32 sell_status */ 9:
                    message.sellStatus = reader.int32();
                    break;
                case /* int32 status */ 10:
                    message.status = reader.int32();
                    break;
                case /* repeated data.PaidLiveConfig.PriceInfo ios_pay_price_info */ 11:
                    message.iosPayPriceInfo.push(PaidLiveConfig_PriceInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.PaidLiveConfig.PriceInfo android_pay_price_info */ 12:
                    message.androidPayPriceInfo.push(PaidLiveConfig_PriceInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.PaidLiveConfig.UserRight user_right */ 13:
                    message.userRight = PaidLiveConfig_UserRight.internalBinaryRead(reader, reader.uint32(), options, message.userRight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 spu_id = 1; */
        if (message.spuId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.spuId);
        /* string spu_id_str = 2; */
        if (message.spuIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.spuIdStr);
        /* int64 sku_id = 3; */
        if (message.skuId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.skuId);
        /* string sku_id_str = 4; */
        if (message.skuIdStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.skuIdStr);
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 6; */
        if (message.subTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.subTitle);
        /* repeated string tags = 7; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.tags[i]);
        /* data.Image cover = 8; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 sell_status = 9; */
        if (message.sellStatus !== 0)
            writer.tag(9, WireType.Varint).int32(message.sellStatus);
        /* int32 status = 10; */
        if (message.status !== 0)
            writer.tag(10, WireType.Varint).int32(message.status);
        /* repeated data.PaidLiveConfig.PriceInfo ios_pay_price_info = 11; */
        for (let i = 0; i < message.iosPayPriceInfo.length; i++)
            PaidLiveConfig_PriceInfo.internalBinaryWrite(message.iosPayPriceInfo[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PaidLiveConfig.PriceInfo android_pay_price_info = 12; */
        for (let i = 0; i < message.androidPayPriceInfo.length; i++)
            PaidLiveConfig_PriceInfo.internalBinaryWrite(message.androidPayPriceInfo[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* data.PaidLiveConfig.UserRight user_right = 13; */
        if (message.userRight)
            PaidLiveConfig_UserRight.internalBinaryWrite(message.userRight, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLiveConfig
 */
export const PaidLiveConfig = new PaidLiveConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveConfig_PriceInfo$Type extends MessageType<PaidLiveConfig_PriceInfo> {
    constructor() {
        super("data.PaidLiveConfig.PriceInfo", [
            { no: 1, name: "pay_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "right_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaidLiveConfig_PriceInfo>): PaidLiveConfig_PriceInfo {
        const message = { payType: 0, price: 0n, rightDuration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveConfig_PriceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveConfig_PriceInfo): PaidLiveConfig_PriceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 pay_type */ 1:
                    message.payType = reader.int32();
                    break;
                case /* int64 price */ 2:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int32 right_duration */ 3:
                    message.rightDuration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveConfig_PriceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 pay_type = 1; */
        if (message.payType !== 0)
            writer.tag(1, WireType.Varint).int32(message.payType);
        /* int64 price = 2; */
        if (message.price !== 0n)
            writer.tag(2, WireType.Varint).int64(message.price);
        /* int32 right_duration = 3; */
        if (message.rightDuration !== 0)
            writer.tag(3, WireType.Varint).int32(message.rightDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLiveConfig.PriceInfo
 */
export const PaidLiveConfig_PriceInfo = new PaidLiveConfig_PriceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveConfig_UserRight$Type extends MessageType<PaidLiveConfig_UserRight> {
    constructor() {
        super("data.PaidLiveConfig.UserRight", [
            { no: 1, name: "view_right", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "delivery", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "need_delivery_notice", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PaidLiveConfig_UserRight>): PaidLiveConfig_UserRight {
        const message = { viewRight: 0, duration: 0n, delivery: 0, needDeliveryNotice: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveConfig_UserRight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveConfig_UserRight): PaidLiveConfig_UserRight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 view_right */ 1:
                    message.viewRight = reader.int32();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int32 delivery */ 6:
                    message.delivery = reader.int32();
                    break;
                case /* bool need_delivery_notice */ 7:
                    message.needDeliveryNotice = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveConfig_UserRight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 view_right = 1; */
        if (message.viewRight !== 0)
            writer.tag(1, WireType.Varint).int32(message.viewRight);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* int32 delivery = 6; */
        if (message.delivery !== 0)
            writer.tag(6, WireType.Varint).int32(message.delivery);
        /* bool need_delivery_notice = 7; */
        if (message.needDeliveryNotice !== false)
            writer.tag(7, WireType.Varint).bool(message.needDeliveryNotice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLiveConfig.UserRight
 */
export const PaidLiveConfig_UserRight = new PaidLiveConfig_UserRight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveUIBaseConfig$Type extends MessageType<PaidLiveUIBaseConfig> {
    constructor() {
        super("data.PaidLiveUIBaseConfig", [
            { no: 1, name: "paid_live_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "paid_live_icon", kind: "message", T: () => Image },
            { no: 3, name: "paid_live_icon_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "no_right_end_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "no_right_end_sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "has_right_end_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "has_right_end_sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "paid_conversion_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "panel_six_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "feed_page_purchase_btn_word", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "purchase_btn_word", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "im_share_top_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "im_share_bottom_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "search_card_top_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "panel_feed_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "panel_im_card_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "panel_in_room_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "panel_search_card_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PaidLiveUIBaseConfig>): PaidLiveUIBaseConfig {
        const message = { paidLiveType: 0, paidLiveIconTitle: "", duration: 0n, noRightEndTitle: "", noRightEndSubTitle: "", hasRightEndTitle: "", hasRightEndSubTitle: "", paidConversionJumpUrl: "", panelSixJumpUrl: "", feedPagePurchaseBtnWord: "", purchaseBtnWord: "", imShareTopTitle: "", imShareBottomTitle: "", searchCardTopTitle: "", panelFeedJumpUrl: "", panelImCardJumpUrl: "", panelInRoomJumpUrl: "", panelSearchCardJumpUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveUIBaseConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveUIBaseConfig): PaidLiveUIBaseConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 paid_live_type */ 1:
                    message.paidLiveType = reader.int32();
                    break;
                case /* data.Image paid_live_icon */ 2:
                    message.paidLiveIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.paidLiveIcon);
                    break;
                case /* string paid_live_icon_title */ 3:
                    message.paidLiveIconTitle = reader.string();
                    break;
                case /* int64 duration */ 4:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string no_right_end_title */ 5:
                    message.noRightEndTitle = reader.string();
                    break;
                case /* string no_right_end_sub_title */ 6:
                    message.noRightEndSubTitle = reader.string();
                    break;
                case /* string has_right_end_title */ 7:
                    message.hasRightEndTitle = reader.string();
                    break;
                case /* string has_right_end_sub_title */ 8:
                    message.hasRightEndSubTitle = reader.string();
                    break;
                case /* string paid_conversion_jump_url */ 9:
                    message.paidConversionJumpUrl = reader.string();
                    break;
                case /* string panel_six_jump_url */ 10:
                    message.panelSixJumpUrl = reader.string();
                    break;
                case /* string feed_page_purchase_btn_word */ 11:
                    message.feedPagePurchaseBtnWord = reader.string();
                    break;
                case /* string purchase_btn_word */ 12:
                    message.purchaseBtnWord = reader.string();
                    break;
                case /* string im_share_top_title */ 13:
                    message.imShareTopTitle = reader.string();
                    break;
                case /* string im_share_bottom_title */ 14:
                    message.imShareBottomTitle = reader.string();
                    break;
                case /* string search_card_top_title */ 15:
                    message.searchCardTopTitle = reader.string();
                    break;
                case /* string panel_feed_jump_url */ 16:
                    message.panelFeedJumpUrl = reader.string();
                    break;
                case /* string panel_im_card_jump_url */ 17:
                    message.panelImCardJumpUrl = reader.string();
                    break;
                case /* string panel_in_room_jump_url */ 18:
                    message.panelInRoomJumpUrl = reader.string();
                    break;
                case /* string panel_search_card_jump_url */ 19:
                    message.panelSearchCardJumpUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveUIBaseConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 paid_live_type = 1; */
        if (message.paidLiveType !== 0)
            writer.tag(1, WireType.Varint).int32(message.paidLiveType);
        /* data.Image paid_live_icon = 2; */
        if (message.paidLiveIcon)
            Image.internalBinaryWrite(message.paidLiveIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string paid_live_icon_title = 3; */
        if (message.paidLiveIconTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.paidLiveIconTitle);
        /* int64 duration = 4; */
        if (message.duration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.duration);
        /* string no_right_end_title = 5; */
        if (message.noRightEndTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.noRightEndTitle);
        /* string no_right_end_sub_title = 6; */
        if (message.noRightEndSubTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.noRightEndSubTitle);
        /* string has_right_end_title = 7; */
        if (message.hasRightEndTitle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.hasRightEndTitle);
        /* string has_right_end_sub_title = 8; */
        if (message.hasRightEndSubTitle !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.hasRightEndSubTitle);
        /* string paid_conversion_jump_url = 9; */
        if (message.paidConversionJumpUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.paidConversionJumpUrl);
        /* string panel_six_jump_url = 10; */
        if (message.panelSixJumpUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.panelSixJumpUrl);
        /* string feed_page_purchase_btn_word = 11; */
        if (message.feedPagePurchaseBtnWord !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.feedPagePurchaseBtnWord);
        /* string purchase_btn_word = 12; */
        if (message.purchaseBtnWord !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.purchaseBtnWord);
        /* string im_share_top_title = 13; */
        if (message.imShareTopTitle !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.imShareTopTitle);
        /* string im_share_bottom_title = 14; */
        if (message.imShareBottomTitle !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.imShareBottomTitle);
        /* string search_card_top_title = 15; */
        if (message.searchCardTopTitle !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.searchCardTopTitle);
        /* string panel_feed_jump_url = 16; */
        if (message.panelFeedJumpUrl !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.panelFeedJumpUrl);
        /* string panel_im_card_jump_url = 17; */
        if (message.panelImCardJumpUrl !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.panelImCardJumpUrl);
        /* string panel_in_room_jump_url = 18; */
        if (message.panelInRoomJumpUrl !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.panelInRoomJumpUrl);
        /* string panel_search_card_jump_url = 19; */
        if (message.panelSearchCardJumpUrl !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.panelSearchCardJumpUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLiveUIBaseConfig
 */
export const PaidLiveUIBaseConfig = new PaidLiveUIBaseConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatReplyRespInfo$Type extends MessageType<ChatReplyRespInfo> {
    constructor() {
        super("data.ChatReplyRespInfo", [
            { no: 1, name: "reply_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reply_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "reply_text", kind: "message", T: () => Text },
            { no: 4, name: "reply_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "reply_webcast_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatReplyRespInfo>): ChatReplyRespInfo {
        const message = { replyMsgId: 0n, replyId: 0n, replyUid: 0n, replyWebcastUid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatReplyRespInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatReplyRespInfo): ChatReplyRespInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 reply_msg_id */ 1:
                    message.replyMsgId = reader.int64().toBigInt();
                    break;
                case /* int64 reply_id */ 2:
                    message.replyId = reader.int64().toBigInt();
                    break;
                case /* data.Text reply_text */ 3:
                    message.replyText = Text.internalBinaryRead(reader, reader.uint32(), options, message.replyText);
                    break;
                case /* int64 reply_uid */ 4:
                    message.replyUid = reader.int64().toBigInt();
                    break;
                case /* string reply_webcast_uid */ 5:
                    message.replyWebcastUid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatReplyRespInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 reply_msg_id = 1; */
        if (message.replyMsgId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.replyMsgId);
        /* int64 reply_id = 2; */
        if (message.replyId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.replyId);
        /* data.Text reply_text = 3; */
        if (message.replyText)
            Text.internalBinaryWrite(message.replyText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 reply_uid = 4; */
        if (message.replyUid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.replyUid);
        /* string reply_webcast_uid = 5; */
        if (message.replyWebcastUid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.replyWebcastUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChatReplyRespInfo
 */
export const ChatReplyRespInfo = new ChatReplyRespInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftIMPriority$Type extends MessageType<GiftIMPriority> {
    constructor() {
        super("data.GiftIMPriority", [
            { no: 1, name: "queue_sizes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "self_queue_priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GiftIMPriority>): GiftIMPriority {
        const message = { queueSizes: [], selfQueuePriority: 0n, priority: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftIMPriority>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftIMPriority): GiftIMPriority {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 queue_sizes */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.queueSizes.push(reader.int64().toBigInt());
                    else
                        message.queueSizes.push(reader.int64().toBigInt());
                    break;
                case /* int64 self_queue_priority */ 2:
                    message.selfQueuePriority = reader.int64().toBigInt();
                    break;
                case /* int64 priority */ 3:
                    message.priority = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftIMPriority, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 queue_sizes = 1; */
        if (message.queueSizes.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.queueSizes.length; i++)
                writer.int64(message.queueSizes[i]);
            writer.join();
        }
        /* int64 self_queue_priority = 2; */
        if (message.selfQueuePriority !== 0n)
            writer.tag(2, WireType.Varint).int64(message.selfQueuePriority);
        /* int64 priority = 3; */
        if (message.priority !== 0n)
            writer.tag(3, WireType.Varint).int64(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftIMPriority
 */
export const GiftIMPriority = new GiftIMPriority$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemCardInfo$Type extends MessageType<ItemCardInfo> {
    constructor() {
        super("data.ItemCardInfo", [
            { no: 1, name: "item_card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "card_play_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "card_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rest_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "failure_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "progress_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "item_card_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "mystery_rank_n", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "total_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "card_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ItemCardInfo>): ItemCardInfo {
        const message = { itemCardType: 0, cardPlayType: 0, cardValue: "", restDuration: 0n, failureTime: 0n, progressText: "", itemCardStatus: 0, mysteryRankN: 0n, totalDuration: 0n, cardName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemCardInfo): ItemCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 item_card_type */ 1:
                    message.itemCardType = reader.int32();
                    break;
                case /* int32 card_play_type */ 2:
                    message.cardPlayType = reader.int32();
                    break;
                case /* string card_value */ 3:
                    message.cardValue = reader.string();
                    break;
                case /* int64 rest_duration */ 4:
                    message.restDuration = reader.int64().toBigInt();
                    break;
                case /* int64 failure_time */ 5:
                    message.failureTime = reader.int64().toBigInt();
                    break;
                case /* string progress_text */ 6:
                    message.progressText = reader.string();
                    break;
                case /* int32 item_card_status */ 7:
                    message.itemCardStatus = reader.int32();
                    break;
                case /* int64 mystery_rank_n */ 8:
                    message.mysteryRankN = reader.int64().toBigInt();
                    break;
                case /* int64 total_duration */ 9:
                    message.totalDuration = reader.int64().toBigInt();
                    break;
                case /* string card_name */ 10:
                    message.cardName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 item_card_type = 1; */
        if (message.itemCardType !== 0)
            writer.tag(1, WireType.Varint).int32(message.itemCardType);
        /* int32 card_play_type = 2; */
        if (message.cardPlayType !== 0)
            writer.tag(2, WireType.Varint).int32(message.cardPlayType);
        /* string card_value = 3; */
        if (message.cardValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cardValue);
        /* int64 rest_duration = 4; */
        if (message.restDuration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.restDuration);
        /* int64 failure_time = 5; */
        if (message.failureTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.failureTime);
        /* string progress_text = 6; */
        if (message.progressText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.progressText);
        /* int32 item_card_status = 7; */
        if (message.itemCardStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.itemCardStatus);
        /* int64 mystery_rank_n = 8; */
        if (message.mysteryRankN !== 0n)
            writer.tag(8, WireType.Varint).int64(message.mysteryRankN);
        /* int64 total_duration = 9; */
        if (message.totalDuration !== 0n)
            writer.tag(9, WireType.Varint).int64(message.totalDuration);
        /* string card_name = 10; */
        if (message.cardName !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.cardName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ItemCardInfo
 */
export const ItemCardInfo = new ItemCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BreakthroughConfig$Type extends MessageType<BreakthroughConfig> {
    constructor() {
        super("data.BreakthroughConfig", [
            { no: 1, name: "stages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BreakthroughConfig_Stage },
            { no: 2, name: "mvp_image", kind: "message", T: () => Image },
            { no: 3, name: "high_score_threshold", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BreakthroughConfig>): BreakthroughConfig {
        const message = { stages: [], highScoreThreshold: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BreakthroughConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BreakthroughConfig): BreakthroughConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.BreakthroughConfig.Stage stages */ 1:
                    message.stages.push(BreakthroughConfig_Stage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image mvp_image */ 2:
                    message.mvpImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.mvpImage);
                    break;
                case /* int64 high_score_threshold */ 3:
                    message.highScoreThreshold = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BreakthroughConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.BreakthroughConfig.Stage stages = 1; */
        for (let i = 0; i < message.stages.length; i++)
            BreakthroughConfig_Stage.internalBinaryWrite(message.stages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image mvp_image = 2; */
        if (message.mvpImage)
            Image.internalBinaryWrite(message.mvpImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 high_score_threshold = 3; */
        if (message.highScoreThreshold !== 0n)
            writer.tag(3, WireType.Varint).int64(message.highScoreThreshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BreakthroughConfig
 */
export const BreakthroughConfig = new BreakthroughConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BreakthroughConfig_Stage$Type extends MessageType<BreakthroughConfig_Stage> {
    constructor() {
        super("data.BreakthroughConfig.Stage", [
            { no: 1, name: "target_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "end_animation_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "end_atmosphere_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BreakthroughConfig_Stage>): BreakthroughConfig_Stage {
        const message = { targetScore: 0n, endAnimationUrl: "", endAtmosphereUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BreakthroughConfig_Stage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BreakthroughConfig_Stage): BreakthroughConfig_Stage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 target_score */ 1:
                    message.targetScore = reader.int64().toBigInt();
                    break;
                case /* string end_animation_url */ 2:
                    message.endAnimationUrl = reader.string();
                    break;
                case /* string end_atmosphere_url */ 3:
                    message.endAtmosphereUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BreakthroughConfig_Stage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 target_score = 1; */
        if (message.targetScore !== 0n)
            writer.tag(1, WireType.Varint).int64(message.targetScore);
        /* string end_animation_url = 2; */
        if (message.endAnimationUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.endAnimationUrl);
        /* string end_atmosphere_url = 3; */
        if (message.endAtmosphereUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.endAtmosphereUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BreakthroughConfig.Stage
 */
export const BreakthroughConfig_Stage = new BreakthroughConfig_Stage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BreakthroughInfo$Type extends MessageType<BreakthroughInfo> {
    constructor() {
        super("data.BreakthroughInfo", [
            { no: 1, name: "stage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "total_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "mvp_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "state", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BreakthroughInfo>): BreakthroughInfo {
        const message = { stage: 0n, totalScore: 0n, mvpAnchorId: 0n, state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BreakthroughInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BreakthroughInfo): BreakthroughInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 stage */ 1:
                    message.stage = reader.int64().toBigInt();
                    break;
                case /* int64 total_score */ 2:
                    message.totalScore = reader.int64().toBigInt();
                    break;
                case /* int64 mvp_anchor_id */ 3:
                    message.mvpAnchorId = reader.int64().toBigInt();
                    break;
                case /* int32 state */ 4:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BreakthroughInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 stage = 1; */
        if (message.stage !== 0n)
            writer.tag(1, WireType.Varint).int64(message.stage);
        /* int64 total_score = 2; */
        if (message.totalScore !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalScore);
        /* int64 mvp_anchor_id = 3; */
        if (message.mvpAnchorId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.mvpAnchorId);
        /* int32 state = 4; */
        if (message.state !== 0)
            writer.tag(4, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BreakthroughInfo
 */
export const BreakthroughInfo = new BreakthroughInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSettings$Type extends MessageType<BattleSettings> {
    constructor() {
        super("data.BattleSettings", [
            { no: 1, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "finished", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "banner_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "config", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "notify_scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "hotsoon_notify_scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "title_config", kind: "message", T: () => BattleTitleConfig },
            { no: 14, name: "punish_config", kind: "message", T: () => BattleTitleConfig },
            { no: 15, name: "punish_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "punish_start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "optimize_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "punish_optimize_on", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "blood_display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "status_display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "need_close_linkmic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "display_last_result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "normal_activity_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "invite_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 27, name: "battle_config_setting", kind: "message", T: () => BattleConfigSetting },
            { no: 28, name: "bar_config", kind: "message", T: () => BattleBarConfig },
            { no: 33, name: "hotsoon_bar_config", kind: "message", T: () => BattleBarConfig },
            { no: 34, name: "initiator_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 35, name: "battle_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 36, name: "play_tags", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 37, name: "steal_tower_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 38, name: "lynx_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleSettings>): BattleSettings {
        const message = { battleId: 0n, startTimeMs: 0n, duration: 0n, theme: "", channelId: 0n, matchType: 0n, finished: 0n, bannerUrl: "", mode: 0, config: "", notifySchemeUrl: "", hotsoonNotifySchemeUrl: "", punishDuration: 0n, punishStartTimeMs: 0n, optimizeVersion: 0, punishOptimizeOn: false, bloodDisplayDuration: 0n, statusDisplayDuration: 0n, toast: "", needCloseLinkmic: false, displayLastResult: false, normalActivityName: "", inviteType: 0, initiatorId: 0n, battleType: 0, playTags: [], stealTowerDuration: 0n, lynxData: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSettings): BattleSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 battle_id */ 1:
                    message.battleId = reader.int64().toBigInt();
                    break;
                case /* int64 start_time_ms */ 2:
                    message.startTimeMs = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string theme */ 4:
                    message.theme = reader.string();
                    break;
                case /* int64 channel_id */ 5:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 match_type */ 6:
                    message.matchType = reader.int64().toBigInt();
                    break;
                case /* int64 finished */ 7:
                    message.finished = reader.int64().toBigInt();
                    break;
                case /* string banner_url */ 8:
                    message.bannerUrl = reader.string();
                    break;
                case /* int32 mode */ 9:
                    message.mode = reader.int32();
                    break;
                case /* string config */ 10:
                    message.config = reader.string();
                    break;
                case /* string notify_scheme_url */ 11:
                    message.notifySchemeUrl = reader.string();
                    break;
                case /* string hotsoon_notify_scheme_url */ 12:
                    message.hotsoonNotifySchemeUrl = reader.string();
                    break;
                case /* data.BattleTitleConfig title_config */ 13:
                    message.titleConfig = BattleTitleConfig.internalBinaryRead(reader, reader.uint32(), options, message.titleConfig);
                    break;
                case /* data.BattleTitleConfig punish_config */ 14:
                    message.punishConfig = BattleTitleConfig.internalBinaryRead(reader, reader.uint32(), options, message.punishConfig);
                    break;
                case /* int64 punish_duration */ 15:
                    message.punishDuration = reader.int64().toBigInt();
                    break;
                case /* int64 punish_start_time_ms */ 16:
                    message.punishStartTimeMs = reader.int64().toBigInt();
                    break;
                case /* int32 optimize_version */ 17:
                    message.optimizeVersion = reader.int32();
                    break;
                case /* bool punish_optimize_on */ 18:
                    message.punishOptimizeOn = reader.bool();
                    break;
                case /* int64 blood_display_duration */ 19:
                    message.bloodDisplayDuration = reader.int64().toBigInt();
                    break;
                case /* int64 status_display_duration */ 20:
                    message.statusDisplayDuration = reader.int64().toBigInt();
                    break;
                case /* string toast */ 21:
                    message.toast = reader.string();
                    break;
                case /* bool need_close_linkmic */ 22:
                    message.needCloseLinkmic = reader.bool();
                    break;
                case /* bool display_last_result */ 23:
                    message.displayLastResult = reader.bool();
                    break;
                case /* string normal_activity_name */ 24:
                    message.normalActivityName = reader.string();
                    break;
                case /* int32 invite_type */ 25:
                    message.inviteType = reader.int32();
                    break;
                case /* data.BattleConfigSetting battle_config_setting */ 27:
                    message.battleConfigSetting = BattleConfigSetting.internalBinaryRead(reader, reader.uint32(), options, message.battleConfigSetting);
                    break;
                case /* data.BattleBarConfig bar_config */ 28:
                    message.barConfig = BattleBarConfig.internalBinaryRead(reader, reader.uint32(), options, message.barConfig);
                    break;
                case /* data.BattleBarConfig hotsoon_bar_config */ 33:
                    message.hotsoonBarConfig = BattleBarConfig.internalBinaryRead(reader, reader.uint32(), options, message.hotsoonBarConfig);
                    break;
                case /* int64 initiator_id */ 34:
                    message.initiatorId = reader.int64().toBigInt();
                    break;
                case /* int32 battle_type */ 35:
                    message.battleType = reader.int32();
                    break;
                case /* repeated int32 play_tags */ 36:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playTags.push(reader.int32());
                    else
                        message.playTags.push(reader.int32());
                    break;
                case /* int64 steal_tower_duration */ 37:
                    message.stealTowerDuration = reader.int64().toBigInt();
                    break;
                case /* string lynx_data */ 38:
                    message.lynxData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 battle_id = 1; */
        if (message.battleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.battleId);
        /* int64 start_time_ms = 2; */
        if (message.startTimeMs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTimeMs);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* string theme = 4; */
        if (message.theme !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.theme);
        /* int64 channel_id = 5; */
        if (message.channelId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.channelId);
        /* int64 match_type = 6; */
        if (message.matchType !== 0n)
            writer.tag(6, WireType.Varint).int64(message.matchType);
        /* int64 finished = 7; */
        if (message.finished !== 0n)
            writer.tag(7, WireType.Varint).int64(message.finished);
        /* string banner_url = 8; */
        if (message.bannerUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.bannerUrl);
        /* int32 mode = 9; */
        if (message.mode !== 0)
            writer.tag(9, WireType.Varint).int32(message.mode);
        /* string config = 10; */
        if (message.config !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.config);
        /* string notify_scheme_url = 11; */
        if (message.notifySchemeUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.notifySchemeUrl);
        /* string hotsoon_notify_scheme_url = 12; */
        if (message.hotsoonNotifySchemeUrl !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.hotsoonNotifySchemeUrl);
        /* data.BattleTitleConfig title_config = 13; */
        if (message.titleConfig)
            BattleTitleConfig.internalBinaryWrite(message.titleConfig, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleTitleConfig punish_config = 14; */
        if (message.punishConfig)
            BattleTitleConfig.internalBinaryWrite(message.punishConfig, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int64 punish_duration = 15; */
        if (message.punishDuration !== 0n)
            writer.tag(15, WireType.Varint).int64(message.punishDuration);
        /* int64 punish_start_time_ms = 16; */
        if (message.punishStartTimeMs !== 0n)
            writer.tag(16, WireType.Varint).int64(message.punishStartTimeMs);
        /* int32 optimize_version = 17; */
        if (message.optimizeVersion !== 0)
            writer.tag(17, WireType.Varint).int32(message.optimizeVersion);
        /* bool punish_optimize_on = 18; */
        if (message.punishOptimizeOn !== false)
            writer.tag(18, WireType.Varint).bool(message.punishOptimizeOn);
        /* int64 blood_display_duration = 19; */
        if (message.bloodDisplayDuration !== 0n)
            writer.tag(19, WireType.Varint).int64(message.bloodDisplayDuration);
        /* int64 status_display_duration = 20; */
        if (message.statusDisplayDuration !== 0n)
            writer.tag(20, WireType.Varint).int64(message.statusDisplayDuration);
        /* string toast = 21; */
        if (message.toast !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.toast);
        /* bool need_close_linkmic = 22; */
        if (message.needCloseLinkmic !== false)
            writer.tag(22, WireType.Varint).bool(message.needCloseLinkmic);
        /* bool display_last_result = 23; */
        if (message.displayLastResult !== false)
            writer.tag(23, WireType.Varint).bool(message.displayLastResult);
        /* string normal_activity_name = 24; */
        if (message.normalActivityName !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.normalActivityName);
        /* int32 invite_type = 25; */
        if (message.inviteType !== 0)
            writer.tag(25, WireType.Varint).int32(message.inviteType);
        /* data.BattleConfigSetting battle_config_setting = 27; */
        if (message.battleConfigSetting)
            BattleConfigSetting.internalBinaryWrite(message.battleConfigSetting, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleBarConfig bar_config = 28; */
        if (message.barConfig)
            BattleBarConfig.internalBinaryWrite(message.barConfig, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleBarConfig hotsoon_bar_config = 33; */
        if (message.hotsoonBarConfig)
            BattleBarConfig.internalBinaryWrite(message.hotsoonBarConfig, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* int64 initiator_id = 34; */
        if (message.initiatorId !== 0n)
            writer.tag(34, WireType.Varint).int64(message.initiatorId);
        /* int32 battle_type = 35; */
        if (message.battleType !== 0)
            writer.tag(35, WireType.Varint).int32(message.battleType);
        /* repeated int32 play_tags = 36; */
        if (message.playTags.length) {
            writer.tag(36, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playTags.length; i++)
                writer.int32(message.playTags[i]);
            writer.join();
        }
        /* int64 steal_tower_duration = 37; */
        if (message.stealTowerDuration !== 0n)
            writer.tag(37, WireType.Varint).int64(message.stealTowerDuration);
        /* string lynx_data = 38; */
        if (message.lynxData !== "")
            writer.tag(38, WireType.LengthDelimited).string(message.lynxData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleSettings
 */
export const BattleSettings = new BattleSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleTitleConfig$Type extends MessageType<BattleTitleConfig> {
    constructor() {
        super("data.BattleTitleConfig", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "scheme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hotsoon_scheme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "new_icon", kind: "message", T: () => Image },
            { no: 8, name: "pre_icon", kind: "message", T: () => Image },
            { no: 9, name: "icon_back_img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BattleTitleConfig>): BattleTitleConfig {
        const message = { content: "", scheme: "", hotsoonScheme: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleTitleConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleTitleConfig): BattleTitleConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string scheme */ 3:
                    message.scheme = reader.string();
                    break;
                case /* string hotsoon_scheme */ 4:
                    message.hotsoonScheme = reader.string();
                    break;
                case /* data.Image new_icon */ 7:
                    message.newIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.newIcon);
                    break;
                case /* data.Image pre_icon */ 8:
                    message.preIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.preIcon);
                    break;
                case /* data.Image icon_back_img */ 9:
                    message.iconBackImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconBackImg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleTitleConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string scheme = 3; */
        if (message.scheme !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.scheme);
        /* string hotsoon_scheme = 4; */
        if (message.hotsoonScheme !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hotsoonScheme);
        /* data.Image new_icon = 7; */
        if (message.newIcon)
            Image.internalBinaryWrite(message.newIcon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Image pre_icon = 8; */
        if (message.preIcon)
            Image.internalBinaryWrite(message.preIcon, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon_back_img = 9; */
        if (message.iconBackImg)
            Image.internalBinaryWrite(message.iconBackImg, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleTitleConfig
 */
export const BattleTitleConfig = new BattleTitleConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnimeInfo$Type extends MessageType<AnimeInfo> {
    constructor() {
        super("data.AnimeInfo", [
            { no: 1, name: "bar_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "aura_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "normal_bar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "buff_bar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "steal_tower_bar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cur_bar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "cur_aura_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AnimeInfo>): AnimeInfo {
        const message = { barType: 0, auraType: 0, normalBarUrl: "", buffBarUrl: "", stealTowerBarUrl: "", curBarUrl: "", curAuraUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnimeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnimeInfo): AnimeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 bar_type */ 1:
                    message.barType = reader.int32();
                    break;
                case /* int32 aura_type */ 2:
                    message.auraType = reader.int32();
                    break;
                case /* string normal_bar_url */ 3:
                    message.normalBarUrl = reader.string();
                    break;
                case /* string buff_bar_url */ 4:
                    message.buffBarUrl = reader.string();
                    break;
                case /* string steal_tower_bar_url */ 5:
                    message.stealTowerBarUrl = reader.string();
                    break;
                case /* string cur_bar_url */ 6:
                    message.curBarUrl = reader.string();
                    break;
                case /* string cur_aura_url */ 7:
                    message.curAuraUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnimeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 bar_type = 1; */
        if (message.barType !== 0)
            writer.tag(1, WireType.Varint).int32(message.barType);
        /* int32 aura_type = 2; */
        if (message.auraType !== 0)
            writer.tag(2, WireType.Varint).int32(message.auraType);
        /* string normal_bar_url = 3; */
        if (message.normalBarUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.normalBarUrl);
        /* string buff_bar_url = 4; */
        if (message.buffBarUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.buffBarUrl);
        /* string steal_tower_bar_url = 5; */
        if (message.stealTowerBarUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.stealTowerBarUrl);
        /* string cur_bar_url = 6; */
        if (message.curBarUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.curBarUrl);
        /* string cur_aura_url = 7; */
        if (message.curAuraUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.curAuraUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnimeInfo
 */
export const AnimeInfo = new AnimeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleBarConfig$Type extends MessageType<BattleBarConfig> {
    constructor() {
        super("data.BattleBarConfig", [
            { no: 1, name: "left_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "right_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "left_score_view_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "right_score_view_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "anime_info", kind: "message", T: () => AnimeInfo }
        ]);
    }
    create(value?: PartialMessage<BattleBarConfig>): BattleBarConfig {
        const message = { leftColor: "", rightColor: "", leftScoreViewColor: "", rightScoreViewColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleBarConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleBarConfig): BattleBarConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string left_color */ 1:
                    message.leftColor = reader.string();
                    break;
                case /* string right_color */ 2:
                    message.rightColor = reader.string();
                    break;
                case /* string left_score_view_color */ 3:
                    message.leftScoreViewColor = reader.string();
                    break;
                case /* string right_score_view_color */ 4:
                    message.rightScoreViewColor = reader.string();
                    break;
                case /* data.AnimeInfo anime_info */ 5:
                    message.animeInfo = AnimeInfo.internalBinaryRead(reader, reader.uint32(), options, message.animeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleBarConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string left_color = 1; */
        if (message.leftColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leftColor);
        /* string right_color = 2; */
        if (message.rightColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightColor);
        /* string left_score_view_color = 3; */
        if (message.leftScoreViewColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.leftScoreViewColor);
        /* string right_score_view_color = 4; */
        if (message.rightScoreViewColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.rightScoreViewColor);
        /* data.AnimeInfo anime_info = 5; */
        if (message.animeInfo)
            AnimeInfo.internalBinaryWrite(message.animeInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleBarConfig
 */
export const BattleBarConfig = new BattleBarConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleShellConfig$Type extends MessageType<BattleShellConfig> {
    constructor() {
        super("data.BattleShellConfig", [
            { no: 1, name: "shell_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleShellConfig>): BattleShellConfig {
        const message = { shellType: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleShellConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleShellConfig): BattleShellConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 shell_type */ 1:
                    message.shellType = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleShellConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 shell_type = 1; */
        if (message.shellType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.shellType);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleShellConfig
 */
export const BattleShellConfig = new BattleShellConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleArmy$Type extends MessageType<BattleArmy> {
    constructor() {
        super("data.BattleArmy", [
            { no: 1, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "rank_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleArmy_RankUser },
            { no: 3, name: "anchor_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleArmy>): BattleArmy {
        const message = { anchorId: 0n, rankList: [], anchorIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleArmy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleArmy): BattleArmy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 anchor_id */ 1:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* repeated data.BattleArmy.RankUser rank_list */ 2:
                    message.rankList.push(BattleArmy_RankUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string anchor_id_str */ 3:
                    message.anchorIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleArmy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 anchor_id = 1; */
        if (message.anchorId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.anchorId);
        /* repeated data.BattleArmy.RankUser rank_list = 2; */
        for (let i = 0; i < message.rankList.length; i++)
            BattleArmy_RankUser.internalBinaryWrite(message.rankList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string anchor_id_str = 3; */
        if (message.anchorIdStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.anchorIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleArmy
 */
export const BattleArmy = new BattleArmy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleArmy_RankUser$Type extends MessageType<BattleArmy_RankUser> {
    constructor() {
        super("data.BattleArmy.RankUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 4, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleArmy_RankUser>): BattleArmy_RankUser {
        const message = { userId: 0n, nickname: "", score: 0n, userIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleArmy_RankUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleArmy_RankUser): BattleArmy_RankUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 3:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* int64 score */ 4:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string user_id_str */ 5:
                    message.userIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleArmy_RankUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* data.Image avatar_thumb = 3; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 4; */
        if (message.score !== 0n)
            writer.tag(4, WireType.Varint).int64(message.score);
        /* string user_id_str = 5; */
        if (message.userIdStr !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleArmy.RankUser
 */
export const BattleArmy_RankUser = new BattleArmy_RankUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleScore$Type extends MessageType<BattleScore> {
    constructor() {
        super("data.BattleScore", [
            { no: 1, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rank_bonus_score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "weekly_rank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "winning_streak", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "winning_streak_bonus_score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "battle_count_bonus_score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "user_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "current_bonus", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "grade", kind: "message", T: () => BattleStarActivityGrade },
            { no: 11, name: "score_relative", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "score_relative_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "is_large_pk_score", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "room_like_trigger", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "score_blur_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "battle_rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "new_score_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "multi_pk_team_score_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "multi_pk_team_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "multi_pk_team_rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "is_multi_pk_relative_text", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BattleScore>): BattleScore {
        const message = { score: 0, userId: 0n, rankBonusScore: 0, weeklyRank: 0, winningStreak: 0, winningStreakBonusScore: 0, battleCountBonusScore: 0, userIdStr: "", currentBonus: 0, scoreRelative: false, scoreRelativeText: "", isLargePkScore: false, roomLikeTrigger: false, scoreBlurText: "", battleRank: 0n, newScoreOpen: false, multiPkTeamScoreText: "", multiPkTeamScore: 0n, multiPkTeamRank: 0n, isMultiPkRelativeText: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleScore): BattleScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 score */ 1:
                    message.score = reader.int32();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int32 rank_bonus_score */ 3:
                    message.rankBonusScore = reader.int32();
                    break;
                case /* int32 weekly_rank */ 4:
                    message.weeklyRank = reader.int32();
                    break;
                case /* int32 winning_streak */ 5:
                    message.winningStreak = reader.int32();
                    break;
                case /* int32 winning_streak_bonus_score */ 6:
                    message.winningStreakBonusScore = reader.int32();
                    break;
                case /* int32 battle_count_bonus_score */ 7:
                    message.battleCountBonusScore = reader.int32();
                    break;
                case /* string user_id_str */ 8:
                    message.userIdStr = reader.string();
                    break;
                case /* int32 current_bonus */ 9:
                    message.currentBonus = reader.int32();
                    break;
                case /* data.BattleStarActivityGrade grade */ 10:
                    message.grade = BattleStarActivityGrade.internalBinaryRead(reader, reader.uint32(), options, message.grade);
                    break;
                case /* bool score_relative */ 11:
                    message.scoreRelative = reader.bool();
                    break;
                case /* string score_relative_text */ 12:
                    message.scoreRelativeText = reader.string();
                    break;
                case /* bool is_large_pk_score */ 13:
                    message.isLargePkScore = reader.bool();
                    break;
                case /* bool room_like_trigger */ 14:
                    message.roomLikeTrigger = reader.bool();
                    break;
                case /* string score_blur_text */ 15:
                    message.scoreBlurText = reader.string();
                    break;
                case /* int64 battle_rank */ 16:
                    message.battleRank = reader.int64().toBigInt();
                    break;
                case /* bool new_score_open */ 17:
                    message.newScoreOpen = reader.bool();
                    break;
                case /* string multi_pk_team_score_text */ 18:
                    message.multiPkTeamScoreText = reader.string();
                    break;
                case /* int64 multi_pk_team_score */ 19:
                    message.multiPkTeamScore = reader.int64().toBigInt();
                    break;
                case /* int64 multi_pk_team_rank */ 20:
                    message.multiPkTeamRank = reader.int64().toBigInt();
                    break;
                case /* bool is_multi_pk_relative_text */ 21:
                    message.isMultiPkRelativeText = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 score = 1; */
        if (message.score !== 0)
            writer.tag(1, WireType.Varint).int32(message.score);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* int32 rank_bonus_score = 3; */
        if (message.rankBonusScore !== 0)
            writer.tag(3, WireType.Varint).int32(message.rankBonusScore);
        /* int32 weekly_rank = 4; */
        if (message.weeklyRank !== 0)
            writer.tag(4, WireType.Varint).int32(message.weeklyRank);
        /* int32 winning_streak = 5; */
        if (message.winningStreak !== 0)
            writer.tag(5, WireType.Varint).int32(message.winningStreak);
        /* int32 winning_streak_bonus_score = 6; */
        if (message.winningStreakBonusScore !== 0)
            writer.tag(6, WireType.Varint).int32(message.winningStreakBonusScore);
        /* int32 battle_count_bonus_score = 7; */
        if (message.battleCountBonusScore !== 0)
            writer.tag(7, WireType.Varint).int32(message.battleCountBonusScore);
        /* string user_id_str = 8; */
        if (message.userIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.userIdStr);
        /* int32 current_bonus = 9; */
        if (message.currentBonus !== 0)
            writer.tag(9, WireType.Varint).int32(message.currentBonus);
        /* data.BattleStarActivityGrade grade = 10; */
        if (message.grade)
            BattleStarActivityGrade.internalBinaryWrite(message.grade, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bool score_relative = 11; */
        if (message.scoreRelative !== false)
            writer.tag(11, WireType.Varint).bool(message.scoreRelative);
        /* string score_relative_text = 12; */
        if (message.scoreRelativeText !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.scoreRelativeText);
        /* bool is_large_pk_score = 13; */
        if (message.isLargePkScore !== false)
            writer.tag(13, WireType.Varint).bool(message.isLargePkScore);
        /* bool room_like_trigger = 14; */
        if (message.roomLikeTrigger !== false)
            writer.tag(14, WireType.Varint).bool(message.roomLikeTrigger);
        /* string score_blur_text = 15; */
        if (message.scoreBlurText !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.scoreBlurText);
        /* int64 battle_rank = 16; */
        if (message.battleRank !== 0n)
            writer.tag(16, WireType.Varint).int64(message.battleRank);
        /* bool new_score_open = 17; */
        if (message.newScoreOpen !== false)
            writer.tag(17, WireType.Varint).bool(message.newScoreOpen);
        /* string multi_pk_team_score_text = 18; */
        if (message.multiPkTeamScoreText !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.multiPkTeamScoreText);
        /* int64 multi_pk_team_score = 19; */
        if (message.multiPkTeamScore !== 0n)
            writer.tag(19, WireType.Varint).int64(message.multiPkTeamScore);
        /* int64 multi_pk_team_rank = 20; */
        if (message.multiPkTeamRank !== 0n)
            writer.tag(20, WireType.Varint).int64(message.multiPkTeamRank);
        /* bool is_multi_pk_relative_text = 21; */
        if (message.isMultiPkRelativeText !== false)
            writer.tag(21, WireType.Varint).bool(message.isMultiPkRelativeText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleScore
 */
export const BattleScore = new BattleScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleConsecutiveRecordInfo$Type extends MessageType<BattleConsecutiveRecordInfo> {
    constructor() {
        super("data.BattleConsecutiveRecordInfo", [
            { no: 1, name: "battle_result_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "consecutive_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleConsecutiveRecordInfo>): BattleConsecutiveRecordInfo {
        const message = { battleResultType: 0, consecutiveCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleConsecutiveRecordInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleConsecutiveRecordInfo): BattleConsecutiveRecordInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 battle_result_type */ 1:
                    message.battleResultType = reader.int32();
                    break;
                case /* int64 consecutive_count */ 2:
                    message.consecutiveCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleConsecutiveRecordInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 battle_result_type = 1; */
        if (message.battleResultType !== 0)
            writer.tag(1, WireType.Varint).int32(message.battleResultType);
        /* int64 consecutive_count = 2; */
        if (message.consecutiveCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.consecutiveCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleConsecutiveRecordInfo
 */
export const BattleConsecutiveRecordInfo = new BattleConsecutiveRecordInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleUserInfo$Type extends MessageType<BattleUserInfo> {
    constructor() {
        super("data.BattleUserInfo", [
            { no: 1, name: "user", kind: "message", T: () => BattleUserInfo_BaseUserInfo },
            { no: 2, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleRivalTag },
            { no: 3, name: "consecutive_record", kind: "message", T: () => BattleConsecutiveRecordInfo },
            { no: 4, name: "grade", kind: "message", T: () => BattleStarActivityGrade },
            { no: 5, name: "grade_change", kind: "message", T: () => BattleStarActivityGradeChange },
            { no: 6, name: "team_coach_score", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "pk_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pk_result", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "activity_user", kind: "message", T: () => ActivityUser },
            { no: 10, name: "multi_pk_team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "battle_start_desc_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "user_img_flip_info", kind: "message", T: () => BattleUserInfo_UserImgFlipInfo }
        ]);
    }
    create(value?: PartialMessage<BattleUserInfo>): BattleUserInfo {
        const message = { tags: [], teamCoachScore: "", pkRole: 0, pkResult: 0, multiPkTeamId: 0n, battleStartDescText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleUserInfo): BattleUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.BattleUserInfo.BaseUserInfo user */ 1:
                    message.user = BattleUserInfo_BaseUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated data.BattleRivalTag tags */ 2:
                    message.tags.push(BattleRivalTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.BattleConsecutiveRecordInfo consecutive_record */ 3:
                    message.consecutiveRecord = BattleConsecutiveRecordInfo.internalBinaryRead(reader, reader.uint32(), options, message.consecutiveRecord);
                    break;
                case /* data.BattleStarActivityGrade grade */ 4:
                    message.grade = BattleStarActivityGrade.internalBinaryRead(reader, reader.uint32(), options, message.grade);
                    break;
                case /* data.BattleStarActivityGradeChange grade_change */ 5:
                    message.gradeChange = BattleStarActivityGradeChange.internalBinaryRead(reader, reader.uint32(), options, message.gradeChange);
                    break;
                case /* string team_coach_score */ 6:
                    message.teamCoachScore = reader.string();
                    break;
                case /* int32 pk_role */ 7:
                    message.pkRole = reader.int32();
                    break;
                case /* int32 pk_result */ 8:
                    message.pkResult = reader.int32();
                    break;
                case /* data.ActivityUser activity_user */ 9:
                    message.activityUser = ActivityUser.internalBinaryRead(reader, reader.uint32(), options, message.activityUser);
                    break;
                case /* int64 multi_pk_team_id */ 10:
                    message.multiPkTeamId = reader.int64().toBigInt();
                    break;
                case /* string battle_start_desc_text */ 11:
                    message.battleStartDescText = reader.string();
                    break;
                case /* data.BattleUserInfo.UserImgFlipInfo user_img_flip_info */ 12:
                    message.userImgFlipInfo = BattleUserInfo_UserImgFlipInfo.internalBinaryRead(reader, reader.uint32(), options, message.userImgFlipInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.BattleUserInfo.BaseUserInfo user = 1; */
        if (message.user)
            BattleUserInfo_BaseUserInfo.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.BattleRivalTag tags = 2; */
        for (let i = 0; i < message.tags.length; i++)
            BattleRivalTag.internalBinaryWrite(message.tags[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleConsecutiveRecordInfo consecutive_record = 3; */
        if (message.consecutiveRecord)
            BattleConsecutiveRecordInfo.internalBinaryWrite(message.consecutiveRecord, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleStarActivityGrade grade = 4; */
        if (message.grade)
            BattleStarActivityGrade.internalBinaryWrite(message.grade, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleStarActivityGradeChange grade_change = 5; */
        if (message.gradeChange)
            BattleStarActivityGradeChange.internalBinaryWrite(message.gradeChange, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string team_coach_score = 6; */
        if (message.teamCoachScore !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.teamCoachScore);
        /* int32 pk_role = 7; */
        if (message.pkRole !== 0)
            writer.tag(7, WireType.Varint).int32(message.pkRole);
        /* int32 pk_result = 8; */
        if (message.pkResult !== 0)
            writer.tag(8, WireType.Varint).int32(message.pkResult);
        /* data.ActivityUser activity_user = 9; */
        if (message.activityUser)
            ActivityUser.internalBinaryWrite(message.activityUser, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 multi_pk_team_id = 10; */
        if (message.multiPkTeamId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.multiPkTeamId);
        /* string battle_start_desc_text = 11; */
        if (message.battleStartDescText !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.battleStartDescText);
        /* data.BattleUserInfo.UserImgFlipInfo user_img_flip_info = 12; */
        if (message.userImgFlipInfo)
            BattleUserInfo_UserImgFlipInfo.internalBinaryWrite(message.userImgFlipInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleUserInfo
 */
export const BattleUserInfo = new BattleUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleUserInfo_BaseUserInfo$Type extends MessageType<BattleUserInfo_BaseUserInfo> {
    constructor() {
        super("data.BattleUserInfo.BaseUserInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 4, name: "gender", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattleUserInfo_BaseUserInfo>): BattleUserInfo_BaseUserInfo {
        const message = { userId: 0n, nickName: "", gender: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleUserInfo_BaseUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleUserInfo_BaseUserInfo): BattleUserInfo_BaseUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string nick_name */ 2:
                    message.nickName = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 3:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* int32 gender */ 4:
                    message.gender = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleUserInfo_BaseUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string nick_name = 2; */
        if (message.nickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickName);
        /* data.Image avatar_thumb = 3; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 gender = 4; */
        if (message.gender !== 0)
            writer.tag(4, WireType.Varint).int32(message.gender);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleUserInfo.BaseUserInfo
 */
export const BattleUserInfo_BaseUserInfo = new BattleUserInfo_BaseUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleUserInfo_UserImgFlipInfo$Type extends MessageType<BattleUserInfo_UserImgFlipInfo> {
    constructor() {
        super("data.BattleUserInfo.UserImgFlipInfo", [
            { no: 1, name: "flip_image", kind: "message", T: () => Image },
            { no: 2, name: "pk_stage_medal", kind: "message", T: () => Image },
            { no: 3, name: "pk_stage_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleUserInfo_UserImgFlipInfo>): BattleUserInfo_UserImgFlipInfo {
        const message = { pkStageDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleUserInfo_UserImgFlipInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleUserInfo_UserImgFlipInfo): BattleUserInfo_UserImgFlipInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image flip_image */ 1:
                    message.flipImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.flipImage);
                    break;
                case /* data.Image pk_stage_medal */ 2:
                    message.pkStageMedal = Image.internalBinaryRead(reader, reader.uint32(), options, message.pkStageMedal);
                    break;
                case /* string pk_stage_desc */ 3:
                    message.pkStageDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleUserInfo_UserImgFlipInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image flip_image = 1; */
        if (message.flipImage)
            Image.internalBinaryWrite(message.flipImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image pk_stage_medal = 2; */
        if (message.pkStageMedal)
            Image.internalBinaryWrite(message.pkStageMedal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string pk_stage_desc = 3; */
        if (message.pkStageDesc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pkStageDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleUserInfo.UserImgFlipInfo
 */
export const BattleUserInfo_UserImgFlipInfo = new BattleUserInfo_UserImgFlipInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSkinConfig$Type extends MessageType<BattleSkinConfig> {
    constructor() {
        super("data.BattleSkinConfig", [
            { no: 1, name: "start_animation_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "win_animation_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lose_animation_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "draw_animation_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_show_enter_user_info", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "room_bg_full_image", kind: "message", T: () => Image },
            { no: 7, name: "room_bg_top_image", kind: "message", T: () => Image },
            { no: 8, name: "room_bg_bottom_image", kind: "message", T: () => Image },
            { no: 9, name: "enter_user_info_position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "enter_show_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleSkinConfig>): BattleSkinConfig {
        const message = { startAnimationUrl: "", winAnimationUrl: "", loseAnimationUrl: "", drawAnimationUrl: "", isShowEnterUserInfo: false, enterUserInfoPosition: 0n, enterShowTimeMs: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSkinConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSkinConfig): BattleSkinConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start_animation_url */ 1:
                    message.startAnimationUrl = reader.string();
                    break;
                case /* string win_animation_url */ 2:
                    message.winAnimationUrl = reader.string();
                    break;
                case /* string lose_animation_url */ 3:
                    message.loseAnimationUrl = reader.string();
                    break;
                case /* string draw_animation_url */ 4:
                    message.drawAnimationUrl = reader.string();
                    break;
                case /* bool is_show_enter_user_info */ 5:
                    message.isShowEnterUserInfo = reader.bool();
                    break;
                case /* data.Image room_bg_full_image */ 6:
                    message.roomBgFullImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.roomBgFullImage);
                    break;
                case /* data.Image room_bg_top_image */ 7:
                    message.roomBgTopImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.roomBgTopImage);
                    break;
                case /* data.Image room_bg_bottom_image */ 8:
                    message.roomBgBottomImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.roomBgBottomImage);
                    break;
                case /* int64 enter_user_info_position */ 9:
                    message.enterUserInfoPosition = reader.int64().toBigInt();
                    break;
                case /* int64 enter_show_time_ms */ 10:
                    message.enterShowTimeMs = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSkinConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start_animation_url = 1; */
        if (message.startAnimationUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.startAnimationUrl);
        /* string win_animation_url = 2; */
        if (message.winAnimationUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.winAnimationUrl);
        /* string lose_animation_url = 3; */
        if (message.loseAnimationUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loseAnimationUrl);
        /* string draw_animation_url = 4; */
        if (message.drawAnimationUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.drawAnimationUrl);
        /* bool is_show_enter_user_info = 5; */
        if (message.isShowEnterUserInfo !== false)
            writer.tag(5, WireType.Varint).bool(message.isShowEnterUserInfo);
        /* data.Image room_bg_full_image = 6; */
        if (message.roomBgFullImage)
            Image.internalBinaryWrite(message.roomBgFullImage, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image room_bg_top_image = 7; */
        if (message.roomBgTopImage)
            Image.internalBinaryWrite(message.roomBgTopImage, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Image room_bg_bottom_image = 8; */
        if (message.roomBgBottomImage)
            Image.internalBinaryWrite(message.roomBgBottomImage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 enter_user_info_position = 9; */
        if (message.enterUserInfoPosition !== 0n)
            writer.tag(9, WireType.Varint).int64(message.enterUserInfoPosition);
        /* int64 enter_show_time_ms = 10; */
        if (message.enterShowTimeMs !== 0n)
            writer.tag(10, WireType.Varint).int64(message.enterShowTimeMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleSkinConfig
 */
export const BattleSkinConfig = new BattleSkinConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleRivalTag$Type extends MessageType<BattleRivalTag> {
    constructor() {
        super("data.BattleRivalTag", [
            { no: 1, name: "bg_image", kind: "message", T: () => Image },
            { no: 2, name: "icon_image", kind: "message", T: () => Image },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tag_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattleRivalTag>): BattleRivalTag {
        const message = { content: "", fontColor: "", tagType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleRivalTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleRivalTag): BattleRivalTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image bg_image */ 1:
                    message.bgImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgImage);
                    break;
                case /* data.Image icon_image */ 2:
                    message.iconImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconImage);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string font_color */ 4:
                    message.fontColor = reader.string();
                    break;
                case /* int32 tag_type */ 5:
                    message.tagType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleRivalTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image bg_image = 1; */
        if (message.bgImage)
            Image.internalBinaryWrite(message.bgImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon_image = 2; */
        if (message.iconImage)
            Image.internalBinaryWrite(message.iconImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string font_color = 4; */
        if (message.fontColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fontColor);
        /* int32 tag_type = 5; */
        if (message.tagType !== 0)
            writer.tag(5, WireType.Varint).int32(message.tagType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleRivalTag
 */
export const BattleRivalTag = new BattleRivalTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTask$Type extends MessageType<TeamTask> {
    constructor() {
        super("data.TeamTask", [
            { no: 1, name: "config", kind: "message", T: () => TeamTask_Config },
            { no: 3, name: "battle_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trigger_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "battle_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTask>): TeamTask {
        const message = { battleId: "", triggerUserId: "", battleType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamTask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTask): TeamTask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.TeamTask.Config config */ 1:
                    message.config = TeamTask_Config.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* string battle_id */ 3:
                    message.battleId = reader.string();
                    break;
                case /* string trigger_user_id */ 4:
                    message.triggerUserId = reader.string();
                    break;
                case /* int32 battle_type */ 5:
                    message.battleType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.TeamTask.Config config = 1; */
        if (message.config)
            TeamTask_Config.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string battle_id = 3; */
        if (message.battleId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.battleId);
        /* string trigger_user_id = 4; */
        if (message.triggerUserId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.triggerUserId);
        /* int32 battle_type = 5; */
        if (message.battleType !== 0)
            writer.tag(5, WireType.Varint).int32(message.battleType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamTask
 */
export const TeamTask = new TeamTask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTask_ExtraConfig$Type extends MessageType<TeamTask_ExtraConfig> {
    constructor() {
        super("data.TeamTask.ExtraConfig", [
            { no: 5, name: "special_gift_count_config", kind: "message", T: () => TeamTask_SpecialGiftCountConfig }
        ]);
    }
    create(value?: PartialMessage<TeamTask_ExtraConfig>): TeamTask_ExtraConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamTask_ExtraConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTask_ExtraConfig): TeamTask_ExtraConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.TeamTask.SpecialGiftCountConfig special_gift_count_config */ 5:
                    message.specialGiftCountConfig = TeamTask_SpecialGiftCountConfig.internalBinaryRead(reader, reader.uint32(), options, message.specialGiftCountConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTask_ExtraConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.TeamTask.SpecialGiftCountConfig special_gift_count_config = 5; */
        if (message.specialGiftCountConfig)
            TeamTask_SpecialGiftCountConfig.internalBinaryWrite(message.specialGiftCountConfig, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamTask.ExtraConfig
 */
export const TeamTask_ExtraConfig = new TeamTask_ExtraConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTask_PeriodConfig$Type extends MessageType<TeamTask_PeriodConfig> {
    constructor() {
        super("data.TeamTask.PeriodConfig", [
            { no: 1, name: "begin_second_relative_battle_finish", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "end_second_relative_battle_finish", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTask_PeriodConfig>): TeamTask_PeriodConfig {
        const message = { beginSecondRelativeBattleFinish: 0n, endSecondRelativeBattleFinish: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamTask_PeriodConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTask_PeriodConfig): TeamTask_PeriodConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 begin_second_relative_battle_finish */ 1:
                    message.beginSecondRelativeBattleFinish = reader.int64().toBigInt();
                    break;
                case /* int64 end_second_relative_battle_finish */ 2:
                    message.endSecondRelativeBattleFinish = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTask_PeriodConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 begin_second_relative_battle_finish = 1; */
        if (message.beginSecondRelativeBattleFinish !== 0n)
            writer.tag(1, WireType.Varint).int64(message.beginSecondRelativeBattleFinish);
        /* int64 end_second_relative_battle_finish = 2; */
        if (message.endSecondRelativeBattleFinish !== 0n)
            writer.tag(2, WireType.Varint).int64(message.endSecondRelativeBattleFinish);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamTask.PeriodConfig
 */
export const TeamTask_PeriodConfig = new TeamTask_PeriodConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTask_SpecialGiftCountConfig$Type extends MessageType<TeamTask_SpecialGiftCountConfig> {
    constructor() {
        super("data.TeamTask.SpecialGiftCountConfig", [
            { no: 1, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "gift_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "max_gift_count_per_user", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "current_gift_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTask_SpecialGiftCountConfig>): TeamTask_SpecialGiftCountConfig {
        const message = { giftId: 0n, giftName: "", maxGiftCountPerUser: 0n, currentGiftCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamTask_SpecialGiftCountConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTask_SpecialGiftCountConfig): TeamTask_SpecialGiftCountConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 gift_id */ 1:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* string gift_name */ 2:
                    message.giftName = reader.string();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 max_gift_count_per_user */ 4:
                    message.maxGiftCountPerUser = reader.int64().toBigInt();
                    break;
                case /* int64 current_gift_count */ 5:
                    message.currentGiftCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTask_SpecialGiftCountConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 gift_id = 1; */
        if (message.giftId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.giftId);
        /* string gift_name = 2; */
        if (message.giftName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.giftName);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 max_gift_count_per_user = 4; */
        if (message.maxGiftCountPerUser !== 0n)
            writer.tag(4, WireType.Varint).int64(message.maxGiftCountPerUser);
        /* int64 current_gift_count = 5; */
        if (message.currentGiftCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.currentGiftCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamTask.SpecialGiftCountConfig
 */
export const TeamTask_SpecialGiftCountConfig = new TeamTask_SpecialGiftCountConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTask_Config$Type extends MessageType<TeamTask_Config> {
    constructor() {
        super("data.TeamTask.Config", [
            { no: 2, name: "reward_buff_multiple", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "task_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "extra_config", kind: "message", T: () => TeamTask_ExtraConfig },
            { no: 5, name: "target_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "reward_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "team_work_team_task_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "stage_reward_buff_multiple", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTask_Config>): TeamTask_Config {
        const message = { rewardBuffMultiple: 0n, taskType: 0, targetType: 0, rewardType: 0, teamWorkTeamTaskType: 0, stageRewardBuffMultiple: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamTask_Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTask_Config): TeamTask_Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 reward_buff_multiple */ 2:
                    message.rewardBuffMultiple = reader.int64().toBigInt();
                    break;
                case /* int32 task_type */ 3:
                    message.taskType = reader.int32();
                    break;
                case /* data.TeamTask.ExtraConfig extra_config */ 4:
                    message.extraConfig = TeamTask_ExtraConfig.internalBinaryRead(reader, reader.uint32(), options, message.extraConfig);
                    break;
                case /* int32 target_type */ 5:
                    message.targetType = reader.int32();
                    break;
                case /* int32 reward_type */ 6:
                    message.rewardType = reader.int32();
                    break;
                case /* int32 team_work_team_task_type */ 7:
                    message.teamWorkTeamTaskType = reader.int32();
                    break;
                case /* repeated int64 stage_reward_buff_multiple */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.stageRewardBuffMultiple.push(reader.int64().toBigInt());
                    else
                        message.stageRewardBuffMultiple.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTask_Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 reward_buff_multiple = 2; */
        if (message.rewardBuffMultiple !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rewardBuffMultiple);
        /* int32 task_type = 3; */
        if (message.taskType !== 0)
            writer.tag(3, WireType.Varint).int32(message.taskType);
        /* data.TeamTask.ExtraConfig extra_config = 4; */
        if (message.extraConfig)
            TeamTask_ExtraConfig.internalBinaryWrite(message.extraConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 target_type = 5; */
        if (message.targetType !== 0)
            writer.tag(5, WireType.Varint).int32(message.targetType);
        /* int32 reward_type = 6; */
        if (message.rewardType !== 0)
            writer.tag(6, WireType.Varint).int32(message.rewardType);
        /* int32 team_work_team_task_type = 7; */
        if (message.teamWorkTeamTaskType !== 0)
            writer.tag(7, WireType.Varint).int32(message.teamWorkTeamTaskType);
        /* repeated int64 stage_reward_buff_multiple = 8; */
        if (message.stageRewardBuffMultiple.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.stageRewardBuffMultiple.length; i++)
                writer.int64(message.stageRewardBuffMultiple[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamTask.Config
 */
export const TeamTask_Config = new TeamTask_Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTask_Info$Type extends MessageType<TeamTask_Info> {
    constructor() {
        super("data.TeamTask.Info", [
            { no: 1, name: "target_user_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "finish_user_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "result", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "reward", kind: "message", T: () => TeamTask_Reward },
            { no: 5, name: "ratio", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "role", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "item_card_info", kind: "message", T: () => ItemCardInfo },
            { no: 8, name: "value_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "progress_blur_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTask_Info>): TeamTask_Info {
        const message = { targetUserCount: 0n, finishUserCount: 0n, result: 0, ratio: 0n, role: 0, valueText: "", progressBlurText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamTask_Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTask_Info): TeamTask_Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 target_user_count */ 1:
                    message.targetUserCount = reader.int64().toBigInt();
                    break;
                case /* int64 finish_user_count */ 2:
                    message.finishUserCount = reader.int64().toBigInt();
                    break;
                case /* int32 result */ 3:
                    message.result = reader.int32();
                    break;
                case /* data.TeamTask.Reward reward */ 4:
                    message.reward = TeamTask_Reward.internalBinaryRead(reader, reader.uint32(), options, message.reward);
                    break;
                case /* int64 ratio */ 5:
                    message.ratio = reader.int64().toBigInt();
                    break;
                case /* int32 role */ 6:
                    message.role = reader.int32();
                    break;
                case /* data.ItemCardInfo item_card_info */ 7:
                    message.itemCardInfo = ItemCardInfo.internalBinaryRead(reader, reader.uint32(), options, message.itemCardInfo);
                    break;
                case /* string value_text */ 8:
                    message.valueText = reader.string();
                    break;
                case /* string progress_blur_text */ 9:
                    message.progressBlurText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTask_Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 target_user_count = 1; */
        if (message.targetUserCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.targetUserCount);
        /* int64 finish_user_count = 2; */
        if (message.finishUserCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.finishUserCount);
        /* int32 result = 3; */
        if (message.result !== 0)
            writer.tag(3, WireType.Varint).int32(message.result);
        /* data.TeamTask.Reward reward = 4; */
        if (message.reward)
            TeamTask_Reward.internalBinaryWrite(message.reward, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 ratio = 5; */
        if (message.ratio !== 0n)
            writer.tag(5, WireType.Varint).int64(message.ratio);
        /* int32 role = 6; */
        if (message.role !== 0)
            writer.tag(6, WireType.Varint).int32(message.role);
        /* data.ItemCardInfo item_card_info = 7; */
        if (message.itemCardInfo)
            ItemCardInfo.internalBinaryWrite(message.itemCardInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string value_text = 8; */
        if (message.valueText !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.valueText);
        /* string progress_blur_text = 9; */
        if (message.progressBlurText !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.progressBlurText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamTask.Info
 */
export const TeamTask_Info = new TeamTask_Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamTask_Reward$Type extends MessageType<TeamTask_Reward> {
    constructor() {
        super("data.TeamTask.Reward", [
            { no: 1, name: "begin_second_relative_battle_finish", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "end_second_relative_battle_finish", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "reward_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "current_reward_buff_multiple", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TeamTask_Reward>): TeamTask_Reward {
        const message = { beginSecondRelativeBattleFinish: 0n, endSecondRelativeBattleFinish: 0n, rewardScore: 0n, currentRewardBuffMultiple: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamTask_Reward>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamTask_Reward): TeamTask_Reward {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 begin_second_relative_battle_finish */ 1:
                    message.beginSecondRelativeBattleFinish = reader.int64().toBigInt();
                    break;
                case /* int64 end_second_relative_battle_finish */ 2:
                    message.endSecondRelativeBattleFinish = reader.int64().toBigInt();
                    break;
                case /* int64 reward_score */ 3:
                    message.rewardScore = reader.int64().toBigInt();
                    break;
                case /* int64 current_reward_buff_multiple */ 4:
                    message.currentRewardBuffMultiple = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamTask_Reward, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 begin_second_relative_battle_finish = 1; */
        if (message.beginSecondRelativeBattleFinish !== 0n)
            writer.tag(1, WireType.Varint).int64(message.beginSecondRelativeBattleFinish);
        /* int64 end_second_relative_battle_finish = 2; */
        if (message.endSecondRelativeBattleFinish !== 0n)
            writer.tag(2, WireType.Varint).int64(message.endSecondRelativeBattleFinish);
        /* int64 reward_score = 3; */
        if (message.rewardScore !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rewardScore);
        /* int64 current_reward_buff_multiple = 4; */
        if (message.currentRewardBuffMultiple !== 0n)
            writer.tag(4, WireType.Varint).int64(message.currentRewardBuffMultiple);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamTask.Reward
 */
export const TeamTask_Reward = new TeamTask_Reward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleRankUser$Type extends MessageType<BattleRankUser> {
    constructor() {
        super("data.BattleRankUser", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "grade_buff_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "sub_des", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleRankUser>): BattleRankUser {
        const message = { score: 0n, rank: 0n, gradeBuffScore: 0n, subDes: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleRankUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleRankUser): BattleRankUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 3:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* int64 grade_buff_score */ 4:
                    message.gradeBuffScore = reader.int64().toBigInt();
                    break;
                case /* string sub_des */ 5:
                    message.subDes = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleRankUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* int64 rank = 3; */
        if (message.rank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rank);
        /* int64 grade_buff_score = 4; */
        if (message.gradeBuffScore !== 0n)
            writer.tag(4, WireType.Varint).int64(message.gradeBuffScore);
        /* string sub_des = 5; */
        if (message.subDes !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subDes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleRankUser
 */
export const BattleRankUser = new BattleRankUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleAnchorContributors$Type extends MessageType<BattleAnchorContributors> {
    constructor() {
        super("data.BattleAnchorContributors", [
            { no: 1, name: "ranks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleRankUser },
            { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "buff_card_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleBuffCardInfo }
        ]);
    }
    create(value?: PartialMessage<BattleAnchorContributors>): BattleAnchorContributors {
        const message = { ranks: [], totalCount: 0n, buffCardInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleAnchorContributors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleAnchorContributors): BattleAnchorContributors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.BattleRankUser ranks */ 1:
                    message.ranks.push(BattleRankUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total_count */ 2:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                case /* repeated data.BattleBuffCardInfo buff_card_infos */ 3:
                    message.buffCardInfos.push(BattleBuffCardInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleAnchorContributors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.BattleRankUser ranks = 1; */
        for (let i = 0; i < message.ranks.length; i++)
            BattleRankUser.internalBinaryWrite(message.ranks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count = 2; */
        if (message.totalCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalCount);
        /* repeated data.BattleBuffCardInfo buff_card_infos = 3; */
        for (let i = 0; i < message.buffCardInfos.length; i++)
            BattleBuffCardInfo.internalBinaryWrite(message.buffCardInfos[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleAnchorContributors
 */
export const BattleAnchorContributors = new BattleAnchorContributors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleContributorsRankListV2$Type extends MessageType<BattleContributorsRankListV2> {
    constructor() {
        super("data.BattleContributorsRankListV2", [
            { no: 2, name: "team_task", kind: "message", T: () => TeamTask },
            { no: 3, name: "battle_settings", kind: "message", T: () => BattleSettings },
            { no: 4, name: "loser_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "loser_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleContributorsRankListV2>): BattleContributorsRankListV2 {
        const message = { loserId: 0n, loserIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleContributorsRankListV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleContributorsRankListV2): BattleContributorsRankListV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.TeamTask team_task */ 2:
                    message.teamTask = TeamTask.internalBinaryRead(reader, reader.uint32(), options, message.teamTask);
                    break;
                case /* data.BattleSettings battle_settings */ 3:
                    message.battleSettings = BattleSettings.internalBinaryRead(reader, reader.uint32(), options, message.battleSettings);
                    break;
                case /* int64 loser_id */ 4:
                    message.loserId = reader.int64().toBigInt();
                    break;
                case /* string loser_id_str */ 5:
                    message.loserIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleContributorsRankListV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.TeamTask team_task = 2; */
        if (message.teamTask)
            TeamTask.internalBinaryWrite(message.teamTask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleSettings battle_settings = 3; */
        if (message.battleSettings)
            BattleSettings.internalBinaryWrite(message.battleSettings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 loser_id = 4; */
        if (message.loserId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.loserId);
        /* string loser_id_str = 5; */
        if (message.loserIdStr !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.loserIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleContributorsRankListV2
 */
export const BattleContributorsRankListV2 = new BattleContributorsRankListV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationalPlay$Type extends MessageType<OperationalPlay> {
    constructor() {
        super("data.OperationalPlay", [
            { no: 1, name: "operational_play_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "multiple_matches_3", kind: "message", T: () => MultipleMatches3 }
        ]);
    }
    create(value?: PartialMessage<OperationalPlay>): OperationalPlay {
        const message = { operationalPlayType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OperationalPlay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperationalPlay): OperationalPlay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 operational_play_type */ 1:
                    message.operationalPlayType = reader.int32();
                    break;
                case /* data.MultipleMatches3 multiple_matches_3 */ 2:
                    message.multipleMatches3 = MultipleMatches3.internalBinaryRead(reader, reader.uint32(), options, message.multipleMatches3);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperationalPlay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 operational_play_type = 1; */
        if (message.operationalPlayType !== 0)
            writer.tag(1, WireType.Varint).int32(message.operationalPlayType);
        /* data.MultipleMatches3 multiple_matches_3 = 2; */
        if (message.multipleMatches3)
            MultipleMatches3.internalBinaryWrite(message.multipleMatches3, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OperationalPlay
 */
export const OperationalPlay = new OperationalPlay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultipleMatches3$Type extends MessageType<MultipleMatches3> {
    constructor() {
        super("data.MultipleMatches3", [
            { no: 2, name: "current_match", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "winner_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "current_winner_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MultipleMatches3>): MultipleMatches3 {
        const message = { currentMatch: 0n, end: false, winnerUid: 0n, currentWinnerUid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultipleMatches3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultipleMatches3): MultipleMatches3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 current_match */ 2:
                    message.currentMatch = reader.int64().toBigInt();
                    break;
                case /* bool end */ 3:
                    message.end = reader.bool();
                    break;
                case /* int64 winner_uid */ 4:
                    message.winnerUid = reader.int64().toBigInt();
                    break;
                case /* int64 current_winner_uid */ 5:
                    message.currentWinnerUid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultipleMatches3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 current_match = 2; */
        if (message.currentMatch !== 0n)
            writer.tag(2, WireType.Varint).int64(message.currentMatch);
        /* bool end = 3; */
        if (message.end !== false)
            writer.tag(3, WireType.Varint).bool(message.end);
        /* int64 winner_uid = 4; */
        if (message.winnerUid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.winnerUid);
        /* int64 current_winner_uid = 5; */
        if (message.currentWinnerUid !== 0n)
            writer.tag(5, WireType.Varint).int64(message.currentWinnerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultipleMatches3
 */
export const MultipleMatches3 = new MultipleMatches3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultipleMatchesUserInfo$Type extends MessageType<MultipleMatchesUserInfo> {
    constructor() {
        super("data.MultipleMatchesUserInfo", [
            { no: 1, name: "win_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MultipleMatchesUserInfo>): MultipleMatchesUserInfo {
        const message = { winCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultipleMatchesUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultipleMatchesUserInfo): MultipleMatchesUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 win_count */ 1:
                    message.winCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultipleMatchesUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 win_count = 1; */
        if (message.winCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.winCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultipleMatchesUserInfo
 */
export const MultipleMatchesUserInfo = new MultipleMatchesUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityUser$Type extends MessageType<ActivityUser> {
    constructor() {
        super("data.ActivityUser", [
            { no: 1, name: "activity_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_tab_text", kind: "message", T: () => Text },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "labels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleRivalTag },
            { no: 6, name: "sub_tab_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "button_image", kind: "message", T: () => Image },
            { no: 10, name: "back_ground_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image }
        ]);
    }
    create(value?: PartialMessage<ActivityUser>): ActivityUser {
        const message = { activityName: "", userId: 0n, userIdStr: "", labels: [], subTabText: "", isValid: false, message: "", backGroundImages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityUser): ActivityUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string activity_name */ 1:
                    message.activityName = reader.string();
                    break;
                case /* data.Text display_tab_text */ 2:
                    message.displayTabText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayTabText);
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string user_id_str */ 4:
                    message.userIdStr = reader.string();
                    break;
                case /* repeated data.BattleRivalTag labels */ 5:
                    message.labels.push(BattleRivalTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string sub_tab_text */ 6:
                    message.subTabText = reader.string();
                    break;
                case /* bool is_valid */ 7:
                    message.isValid = reader.bool();
                    break;
                case /* string message */ 8:
                    message.message = reader.string();
                    break;
                case /* data.Image button_image */ 9:
                    message.buttonImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.buttonImage);
                    break;
                case /* repeated data.Image back_ground_images */ 10:
                    message.backGroundImages.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string activity_name = 1; */
        if (message.activityName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.activityName);
        /* data.Text display_tab_text = 2; */
        if (message.displayTabText)
            Text.internalBinaryWrite(message.displayTabText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* string user_id_str = 4; */
        if (message.userIdStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userIdStr);
        /* repeated data.BattleRivalTag labels = 5; */
        for (let i = 0; i < message.labels.length; i++)
            BattleRivalTag.internalBinaryWrite(message.labels[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string sub_tab_text = 6; */
        if (message.subTabText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.subTabText);
        /* bool is_valid = 7; */
        if (message.isValid !== false)
            writer.tag(7, WireType.Varint).bool(message.isValid);
        /* string message = 8; */
        if (message.message !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.message);
        /* data.Image button_image = 9; */
        if (message.buttonImage)
            Image.internalBinaryWrite(message.buttonImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image back_ground_images = 10; */
        for (let i = 0; i < message.backGroundImages.length; i++)
            Image.internalBinaryWrite(message.backGroundImages[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ActivityUser
 */
export const ActivityUser = new ActivityUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSelfData$Type extends MessageType<BattleSelfData> {
    constructor() {
        super("data.BattleSelfData", [
            { no: 1, name: "pk_duration_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pk_value_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "like_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "gift_value_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "gift_uv_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "ticket_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "set_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleSelfData>): BattleSelfData {
        const message = { pkDurationTime: 0n, pkValueType: 0, likeType: 0n, giftValueType: 0n, giftUvType: 0n, ticketType: 0n, setUid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSelfData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSelfData): BattleSelfData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pk_duration_time */ 1:
                    message.pkDurationTime = reader.int64().toBigInt();
                    break;
                case /* int32 pk_value_type */ 2:
                    message.pkValueType = reader.int32();
                    break;
                case /* int64 like_type */ 3:
                    message.likeType = reader.int64().toBigInt();
                    break;
                case /* int64 gift_value_type */ 4:
                    message.giftValueType = reader.int64().toBigInt();
                    break;
                case /* int64 gift_uv_type */ 5:
                    message.giftUvType = reader.int64().toBigInt();
                    break;
                case /* int64 ticket_type */ 6:
                    message.ticketType = reader.int64().toBigInt();
                    break;
                case /* int64 set_uid */ 7:
                    message.setUid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSelfData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pk_duration_time = 1; */
        if (message.pkDurationTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pkDurationTime);
        /* int32 pk_value_type = 2; */
        if (message.pkValueType !== 0)
            writer.tag(2, WireType.Varint).int32(message.pkValueType);
        /* int64 like_type = 3; */
        if (message.likeType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.likeType);
        /* int64 gift_value_type = 4; */
        if (message.giftValueType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.giftValueType);
        /* int64 gift_uv_type = 5; */
        if (message.giftUvType !== 0n)
            writer.tag(5, WireType.Varint).int64(message.giftUvType);
        /* int64 ticket_type = 6; */
        if (message.ticketType !== 0n)
            writer.tag(6, WireType.Varint).int64(message.ticketType);
        /* int64 set_uid = 7; */
        if (message.setUid !== 0n)
            writer.tag(7, WireType.Varint).int64(message.setUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleSelfData
 */
export const BattleSelfData = new BattleSelfData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleConfigSetting$Type extends MessageType<BattleConfigSetting> {
    constructor() {
        super("data.BattleConfigSetting", [
            { no: 1, name: "mod_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "self_data", kind: "message", T: () => BattleSelfData },
            { no: 3, name: "vote_data", kind: "message", T: () => VoteSetting },
            { no: 4, name: "self_setting_rate", kind: "message", T: () => BattleSelfSettingRate },
            { no: 5, name: "flex_activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "shell_config", kind: "message", T: () => BattleShellConfig },
            { no: 7, name: "breakthrough_config", kind: "message", T: () => BreakthroughConfig },
            { no: 8, name: "specify_gift_config", kind: "message", T: () => SpecifyGiftConfig },
            { no: 9, name: "play_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "team_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "activity_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattleConfigSetting>): BattleConfigSetting {
        const message = { modType: 0, flexActivityId: 0n, playMode: 0, teamMode: 0, activityMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleConfigSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleConfigSetting): BattleConfigSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 mod_type */ 1:
                    message.modType = reader.int32();
                    break;
                case /* data.BattleSelfData self_data */ 2:
                    message.selfData = BattleSelfData.internalBinaryRead(reader, reader.uint32(), options, message.selfData);
                    break;
                case /* data.VoteSetting vote_data */ 3:
                    message.voteData = VoteSetting.internalBinaryRead(reader, reader.uint32(), options, message.voteData);
                    break;
                case /* data.BattleSelfSettingRate self_setting_rate */ 4:
                    message.selfSettingRate = BattleSelfSettingRate.internalBinaryRead(reader, reader.uint32(), options, message.selfSettingRate);
                    break;
                case /* int64 flex_activity_id */ 5:
                    message.flexActivityId = reader.int64().toBigInt();
                    break;
                case /* data.BattleShellConfig shell_config */ 6:
                    message.shellConfig = BattleShellConfig.internalBinaryRead(reader, reader.uint32(), options, message.shellConfig);
                    break;
                case /* data.BreakthroughConfig breakthrough_config */ 7:
                    message.breakthroughConfig = BreakthroughConfig.internalBinaryRead(reader, reader.uint32(), options, message.breakthroughConfig);
                    break;
                case /* data.SpecifyGiftConfig specify_gift_config */ 8:
                    message.specifyGiftConfig = SpecifyGiftConfig.internalBinaryRead(reader, reader.uint32(), options, message.specifyGiftConfig);
                    break;
                case /* int32 play_mode */ 9:
                    message.playMode = reader.int32();
                    break;
                case /* int32 team_mode */ 10:
                    message.teamMode = reader.int32();
                    break;
                case /* int32 activity_mode */ 11:
                    message.activityMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleConfigSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 mod_type = 1; */
        if (message.modType !== 0)
            writer.tag(1, WireType.Varint).int32(message.modType);
        /* data.BattleSelfData self_data = 2; */
        if (message.selfData)
            BattleSelfData.internalBinaryWrite(message.selfData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.VoteSetting vote_data = 3; */
        if (message.voteData)
            VoteSetting.internalBinaryWrite(message.voteData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleSelfSettingRate self_setting_rate = 4; */
        if (message.selfSettingRate)
            BattleSelfSettingRate.internalBinaryWrite(message.selfSettingRate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 flex_activity_id = 5; */
        if (message.flexActivityId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.flexActivityId);
        /* data.BattleShellConfig shell_config = 6; */
        if (message.shellConfig)
            BattleShellConfig.internalBinaryWrite(message.shellConfig, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.BreakthroughConfig breakthrough_config = 7; */
        if (message.breakthroughConfig)
            BreakthroughConfig.internalBinaryWrite(message.breakthroughConfig, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.SpecifyGiftConfig specify_gift_config = 8; */
        if (message.specifyGiftConfig)
            SpecifyGiftConfig.internalBinaryWrite(message.specifyGiftConfig, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 play_mode = 9; */
        if (message.playMode !== 0)
            writer.tag(9, WireType.Varint).int32(message.playMode);
        /* int32 team_mode = 10; */
        if (message.teamMode !== 0)
            writer.tag(10, WireType.Varint).int32(message.teamMode);
        /* int32 activity_mode = 11; */
        if (message.activityMode !== 0)
            writer.tag(11, WireType.Varint).int32(message.activityMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleConfigSetting
 */
export const BattleConfigSetting = new BattleConfigSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpecifyGiftConfig$Type extends MessageType<SpecifyGiftConfig> {
    constructor() {
        super("data.SpecifyGiftConfig", [
            { no: 1, name: "gift_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "set_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "des", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SpecifyGiftConfig>): SpecifyGiftConfig {
        const message = { giftIds: [], setUid: 0n, des: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpecifyGiftConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpecifyGiftConfig): SpecifyGiftConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 gift_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.giftIds.push(reader.int64().toBigInt());
                    else
                        message.giftIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 set_uid */ 3:
                    message.setUid = reader.int64().toBigInt();
                    break;
                case /* string des */ 4:
                    message.des = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpecifyGiftConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 gift_ids = 1; */
        if (message.giftIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.giftIds.length; i++)
                writer.int64(message.giftIds[i]);
            writer.join();
        }
        /* int64 set_uid = 3; */
        if (message.setUid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.setUid);
        /* string des = 4; */
        if (message.des !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.des);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SpecifyGiftConfig
 */
export const SpecifyGiftConfig = new SpecifyGiftConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSelfSettingRate$Type extends MessageType<BattleSelfSettingRate> {
    constructor() {
        super("data.BattleSelfSettingRate", [
            { no: 1, name: "pk_value_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pk_2_like_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "gift_2_pk_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "gift_uv_2_pk_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "ticket_2_pk_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "set_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleSelfSettingRate>): BattleSelfSettingRate {
        const message = { pkValueType: 0n, pk2LikeRate: 0n, gift2PkRate: 0n, giftUv2PkRate: 0n, ticket2PkRate: 0n, setUid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSelfSettingRate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSelfSettingRate): BattleSelfSettingRate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pk_value_type */ 1:
                    message.pkValueType = reader.int64().toBigInt();
                    break;
                case /* int64 pk_2_like_rate */ 2:
                    message.pk2LikeRate = reader.int64().toBigInt();
                    break;
                case /* int64 gift_2_pk_rate */ 3:
                    message.gift2PkRate = reader.int64().toBigInt();
                    break;
                case /* int64 gift_uv_2_pk_rate */ 4:
                    message.giftUv2PkRate = reader.int64().toBigInt();
                    break;
                case /* int64 ticket_2_pk_rate */ 5:
                    message.ticket2PkRate = reader.int64().toBigInt();
                    break;
                case /* int64 set_uid */ 6:
                    message.setUid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSelfSettingRate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pk_value_type = 1; */
        if (message.pkValueType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pkValueType);
        /* int64 pk_2_like_rate = 2; */
        if (message.pk2LikeRate !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pk2LikeRate);
        /* int64 gift_2_pk_rate = 3; */
        if (message.gift2PkRate !== 0n)
            writer.tag(3, WireType.Varint).int64(message.gift2PkRate);
        /* int64 gift_uv_2_pk_rate = 4; */
        if (message.giftUv2PkRate !== 0n)
            writer.tag(4, WireType.Varint).int64(message.giftUv2PkRate);
        /* int64 ticket_2_pk_rate = 5; */
        if (message.ticket2PkRate !== 0n)
            writer.tag(5, WireType.Varint).int64(message.ticket2PkRate);
        /* int64 set_uid = 6; */
        if (message.setUid !== 0n)
            writer.tag(6, WireType.Varint).int64(message.setUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleSelfSettingRate
 */
export const BattleSelfSettingRate = new BattleSelfSettingRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftDetail$Type extends MessageType<GiftDetail> {
    constructor() {
        super("data.GiftDetail", [
            { no: 1, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "gift_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "message", T: () => Image },
            { no: 4, name: "gift_des", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftDetail>): GiftDetail {
        const message = { giftId: 0n, giftName: "", giftDes: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftDetail): GiftDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 gift_id */ 1:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* string gift_name */ 2:
                    message.giftName = reader.string();
                    break;
                case /* data.Image image */ 3:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string gift_des */ 4:
                    message.giftDes = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 gift_id = 1; */
        if (message.giftId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.giftId);
        /* string gift_name = 2; */
        if (message.giftName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.giftName);
        /* data.Image image = 3; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string gift_des = 4; */
        if (message.giftDes !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.giftDes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftDetail
 */
export const GiftDetail = new GiftDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VoteSetting$Type extends MessageType<VoteSetting> {
    constructor() {
        super("data.VoteSetting", [
            { no: 1, name: "vote_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "vote_des", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VoteSetting>): VoteSetting {
        const message = { voteType: 0n, voteDes: "", durationTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VoteSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VoteSetting): VoteSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 vote_type */ 1:
                    message.voteType = reader.int64().toBigInt();
                    break;
                case /* string vote_des */ 2:
                    message.voteDes = reader.string();
                    break;
                case /* int64 duration_time */ 3:
                    message.durationTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VoteSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 vote_type = 1; */
        if (message.voteType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.voteType);
        /* string vote_des = 2; */
        if (message.voteDes !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voteDes);
        /* int64 duration_time = 3; */
        if (message.durationTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.durationTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VoteSetting
 */
export const VoteSetting = new VoteSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PanelTitle$Type extends MessageType<PanelTitle> {
    constructor() {
        super("data.PanelTitle", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon_bg_image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<PanelTitle>): PanelTitle {
        const message = { title: "", desc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PanelTitle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PanelTitle): PanelTitle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string desc */ 2:
                    message.desc = reader.string();
                    break;
                case /* data.Image icon_bg_image */ 3:
                    message.iconBgImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.iconBgImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PanelTitle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string desc = 2; */
        if (message.desc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        /* data.Image icon_bg_image = 3; */
        if (message.iconBgImage)
            Image.internalBinaryWrite(message.iconBgImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PanelTitle
 */
export const PanelTitle = new PanelTitle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleStarActivityGrade$Type extends MessageType<BattleStarActivityGrade> {
    constructor() {
        super("data.BattleStarActivityGrade", [
            { no: 1, name: "grade", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "star_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "target_star_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "star_activity_grade_medal", kind: "message", T: () => BattleStarActivityGradeMedal },
            { no: 6, name: "grade_enum", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattleStarActivityGrade>): BattleStarActivityGrade {
        const message = { grade: "", level: 0n, starCount: 0n, targetStarCount: 0n, gradeEnum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleStarActivityGrade>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleStarActivityGrade): BattleStarActivityGrade {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string grade */ 1:
                    message.grade = reader.string();
                    break;
                case /* int64 level */ 2:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* int64 star_count */ 3:
                    message.starCount = reader.int64().toBigInt();
                    break;
                case /* int64 target_star_count */ 4:
                    message.targetStarCount = reader.int64().toBigInt();
                    break;
                case /* data.BattleStarActivityGradeMedal star_activity_grade_medal */ 5:
                    message.starActivityGradeMedal = BattleStarActivityGradeMedal.internalBinaryRead(reader, reader.uint32(), options, message.starActivityGradeMedal);
                    break;
                case /* int32 grade_enum */ 6:
                    message.gradeEnum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleStarActivityGrade, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string grade = 1; */
        if (message.grade !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.grade);
        /* int64 level = 2; */
        if (message.level !== 0n)
            writer.tag(2, WireType.Varint).int64(message.level);
        /* int64 star_count = 3; */
        if (message.starCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.starCount);
        /* int64 target_star_count = 4; */
        if (message.targetStarCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.targetStarCount);
        /* data.BattleStarActivityGradeMedal star_activity_grade_medal = 5; */
        if (message.starActivityGradeMedal)
            BattleStarActivityGradeMedal.internalBinaryWrite(message.starActivityGradeMedal, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 grade_enum = 6; */
        if (message.gradeEnum !== 0)
            writer.tag(6, WireType.Varint).int32(message.gradeEnum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleStarActivityGrade
 */
export const BattleStarActivityGrade = new BattleStarActivityGrade$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleStarActivityGradeMedal$Type extends MessageType<BattleStarActivityGradeMedal> {
    constructor() {
        super("data.BattleStarActivityGradeMedal", [
            { no: 1, name: "grade_medal", kind: "message", T: () => Image },
            { no: 2, name: "level_image", kind: "message", T: () => Image },
            { no: 3, name: "badge_image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BattleStarActivityGradeMedal>): BattleStarActivityGradeMedal {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleStarActivityGradeMedal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleStarActivityGradeMedal): BattleStarActivityGradeMedal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image grade_medal */ 1:
                    message.gradeMedal = Image.internalBinaryRead(reader, reader.uint32(), options, message.gradeMedal);
                    break;
                case /* data.Image level_image */ 2:
                    message.levelImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.levelImage);
                    break;
                case /* data.Image badge_image */ 3:
                    message.badgeImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.badgeImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleStarActivityGradeMedal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image grade_medal = 1; */
        if (message.gradeMedal)
            Image.internalBinaryWrite(message.gradeMedal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image level_image = 2; */
        if (message.levelImage)
            Image.internalBinaryWrite(message.levelImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image badge_image = 3; */
        if (message.badgeImage)
            Image.internalBinaryWrite(message.badgeImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleStarActivityGradeMedal
 */
export const BattleStarActivityGradeMedal = new BattleStarActivityGradeMedal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleBuffCardMeta$Type extends MessageType<BattleBuffCardMeta> {
    constructor() {
        super("data.BattleBuffCardMeta", [
            { no: 1, name: "battle_buff_card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "effect_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "effect_start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "effect_duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "create_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "card_extra_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleBuffCardMeta>): BattleBuffCardMeta {
        const message = { battleBuffCardType: 0, effectJson: "", effectStartTimeMs: 0n, effectDurationMs: 0n, createTimeMs: 0n, cardExtraInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleBuffCardMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleBuffCardMeta): BattleBuffCardMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 battle_buff_card_type */ 1:
                    message.battleBuffCardType = reader.int32();
                    break;
                case /* string effect_json */ 2:
                    message.effectJson = reader.string();
                    break;
                case /* int64 effect_start_time_ms */ 3:
                    message.effectStartTimeMs = reader.int64().toBigInt();
                    break;
                case /* int64 effect_duration_ms */ 4:
                    message.effectDurationMs = reader.int64().toBigInt();
                    break;
                case /* int64 create_time_ms */ 5:
                    message.createTimeMs = reader.int64().toBigInt();
                    break;
                case /* string card_extra_info */ 6:
                    message.cardExtraInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleBuffCardMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 battle_buff_card_type = 1; */
        if (message.battleBuffCardType !== 0)
            writer.tag(1, WireType.Varint).int32(message.battleBuffCardType);
        /* string effect_json = 2; */
        if (message.effectJson !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.effectJson);
        /* int64 effect_start_time_ms = 3; */
        if (message.effectStartTimeMs !== 0n)
            writer.tag(3, WireType.Varint).int64(message.effectStartTimeMs);
        /* int64 effect_duration_ms = 4; */
        if (message.effectDurationMs !== 0n)
            writer.tag(4, WireType.Varint).int64(message.effectDurationMs);
        /* int64 create_time_ms = 5; */
        if (message.createTimeMs !== 0n)
            writer.tag(5, WireType.Varint).int64(message.createTimeMs);
        /* string card_extra_info = 6; */
        if (message.cardExtraInfo !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.cardExtraInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleBuffCardMeta
 */
export const BattleBuffCardMeta = new BattleBuffCardMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleBuffCardInfo$Type extends MessageType<BattleBuffCardInfo> {
    constructor() {
        super("data.BattleBuffCardInfo", [
            { no: 1, name: "battle_buff_card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "effective_buff_cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleBuffCardMeta },
            { no: 3, name: "waiting_buff_cards_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "bonus_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleBuffCardInfo>): BattleBuffCardInfo {
        const message = { battleBuffCardType: 0, effectiveBuffCards: [], waitingBuffCardsCount: 0n, bonusScore: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleBuffCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleBuffCardInfo): BattleBuffCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 battle_buff_card_type */ 1:
                    message.battleBuffCardType = reader.int32();
                    break;
                case /* repeated data.BattleBuffCardMeta effective_buff_cards */ 2:
                    message.effectiveBuffCards.push(BattleBuffCardMeta.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 waiting_buff_cards_count */ 3:
                    message.waitingBuffCardsCount = reader.int64().toBigInt();
                    break;
                case /* int64 bonus_score */ 4:
                    message.bonusScore = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleBuffCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 battle_buff_card_type = 1; */
        if (message.battleBuffCardType !== 0)
            writer.tag(1, WireType.Varint).int32(message.battleBuffCardType);
        /* repeated data.BattleBuffCardMeta effective_buff_cards = 2; */
        for (let i = 0; i < message.effectiveBuffCards.length; i++)
            BattleBuffCardMeta.internalBinaryWrite(message.effectiveBuffCards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 waiting_buff_cards_count = 3; */
        if (message.waitingBuffCardsCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.waitingBuffCardsCount);
        /* int64 bonus_score = 4; */
        if (message.bonusScore !== 0n)
            writer.tag(4, WireType.Varint).int64(message.bonusScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleBuffCardInfo
 */
export const BattleBuffCardInfo = new BattleBuffCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleStarActivityGradeChange$Type extends MessageType<BattleStarActivityGradeChange> {
    constructor() {
        super("data.BattleStarActivityGradeChange", [
            { no: 1, name: "star", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "before_grade", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "before_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "current_grade", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "current_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleStarActivityGradeChange>): BattleStarActivityGradeChange {
        const message = { star: 0n, score: 0n, beforeGrade: "", beforeLevel: 0n, currentGrade: "", currentLevel: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleStarActivityGradeChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleStarActivityGradeChange): BattleStarActivityGradeChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 star */ 1:
                    message.star = reader.int64().toBigInt();
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string before_grade */ 3:
                    message.beforeGrade = reader.string();
                    break;
                case /* int64 before_level */ 4:
                    message.beforeLevel = reader.int64().toBigInt();
                    break;
                case /* string current_grade */ 5:
                    message.currentGrade = reader.string();
                    break;
                case /* int64 current_level */ 6:
                    message.currentLevel = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleStarActivityGradeChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 star = 1; */
        if (message.star !== 0n)
            writer.tag(1, WireType.Varint).int64(message.star);
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* string before_grade = 3; */
        if (message.beforeGrade !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.beforeGrade);
        /* int64 before_level = 4; */
        if (message.beforeLevel !== 0n)
            writer.tag(4, WireType.Varint).int64(message.beforeLevel);
        /* string current_grade = 5; */
        if (message.currentGrade !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.currentGrade);
        /* int64 current_level = 6; */
        if (message.currentLevel !== 0n)
            writer.tag(6, WireType.Varint).int64(message.currentLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleStarActivityGradeChange
 */
export const BattleStarActivityGradeChange = new BattleStarActivityGradeChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerBaseInfo$Type extends MessageType<LinkerBaseInfo> {
    constructor() {
        super("data.LinkerBaseInfo", [
            { no: 1, name: "scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "play_modes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "ui_layout", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "MaxMemberCount", kind: "scalar", jsonName: "MaxMemberCount", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerBaseInfo>): LinkerBaseInfo {
        const message = { scene: 0, playModes: [], uiLayout: 0, maxMemberCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerBaseInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerBaseInfo): LinkerBaseInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 scene */ 1:
                    message.scene = reader.int32();
                    break;
                case /* repeated int64 play_modes */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playModes.push(reader.int64().toBigInt());
                    else
                        message.playModes.push(reader.int64().toBigInt());
                    break;
                case /* int32 ui_layout */ 3:
                    message.uiLayout = reader.int32();
                    break;
                case /* int64 MaxMemberCount = 4 [json_name = "MaxMemberCount"];*/ 4:
                    message.maxMemberCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerBaseInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 scene = 1; */
        if (message.scene !== 0)
            writer.tag(1, WireType.Varint).int32(message.scene);
        /* repeated int64 play_modes = 2; */
        if (message.playModes.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playModes.length; i++)
                writer.int64(message.playModes[i]);
            writer.join();
        }
        /* int32 ui_layout = 3; */
        if (message.uiLayout !== 0)
            writer.tag(3, WireType.Varint).int32(message.uiLayout);
        /* int64 MaxMemberCount = 4 [json_name = "MaxMemberCount"]; */
        if (message.maxMemberCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.maxMemberCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkerBaseInfo
 */
export const LinkerBaseInfo = new LinkerBaseInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUser$Type extends MessageType<ListUser> {
    constructor() {
        super("data.ListUser", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "linkmic_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "link_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "link_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "user_position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "silence_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "modify_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "linker_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "role_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "content", kind: "message", T: () => ListUser_Content },
            { no: 12, name: "mc_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "is_background", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "host", kind: "message", T: () => HostInfo },
            { no: 15, name: "mic_pos_tag_info", kind: "message", T: () => MicPosTagInfo },
            { no: 16, name: "pk_available", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 200, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListUser>): ListUser {
        const message = { linkmicId: 0n, linkmicIdStr: "", linkStatus: 0, linkType: 0, userPosition: 0, silenceStatus: 0, modifyTime: 0n, linkerId: 0n, roleType: 0, mcStatus: 0n, isBackground: 0n, pkAvailable: false, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUser): ListUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 linkmic_id */ 2:
                    message.linkmicId = reader.int64().toBigInt();
                    break;
                case /* string linkmic_id_str */ 3:
                    message.linkmicIdStr = reader.string();
                    break;
                case /* int32 link_status */ 4:
                    message.linkStatus = reader.int32();
                    break;
                case /* int32 link_type */ 5:
                    message.linkType = reader.int32();
                    break;
                case /* int32 user_position */ 6:
                    message.userPosition = reader.int32();
                    break;
                case /* int32 silence_status */ 7:
                    message.silenceStatus = reader.int32();
                    break;
                case /* int64 modify_time */ 8:
                    message.modifyTime = reader.int64().toBigInt();
                    break;
                case /* int64 linker_id */ 9:
                    message.linkerId = reader.int64().toBigInt();
                    break;
                case /* int32 role_type */ 10:
                    message.roleType = reader.int32();
                    break;
                case /* data.ListUser.Content content */ 11:
                    message.content = ListUser_Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* int64 mc_status */ 12:
                    message.mcStatus = reader.int64().toBigInt();
                    break;
                case /* int64 is_background */ 13:
                    message.isBackground = reader.int64().toBigInt();
                    break;
                case /* data.HostInfo host */ 14:
                    message.host = HostInfo.internalBinaryRead(reader, reader.uint32(), options, message.host);
                    break;
                case /* data.MicPosTagInfo mic_pos_tag_info */ 15:
                    message.micPosTagInfo = MicPosTagInfo.internalBinaryRead(reader, reader.uint32(), options, message.micPosTagInfo);
                    break;
                case /* bool pk_available */ 16:
                    message.pkAvailable = reader.bool();
                    break;
                case /* string extra */ 200:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 linkmic_id = 2; */
        if (message.linkmicId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.linkmicId);
        /* string linkmic_id_str = 3; */
        if (message.linkmicIdStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.linkmicIdStr);
        /* int32 link_status = 4; */
        if (message.linkStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.linkStatus);
        /* int32 link_type = 5; */
        if (message.linkType !== 0)
            writer.tag(5, WireType.Varint).int32(message.linkType);
        /* int32 user_position = 6; */
        if (message.userPosition !== 0)
            writer.tag(6, WireType.Varint).int32(message.userPosition);
        /* int32 silence_status = 7; */
        if (message.silenceStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.silenceStatus);
        /* int64 modify_time = 8; */
        if (message.modifyTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.modifyTime);
        /* int64 linker_id = 9; */
        if (message.linkerId !== 0n)
            writer.tag(9, WireType.Varint).int64(message.linkerId);
        /* int32 role_type = 10; */
        if (message.roleType !== 0)
            writer.tag(10, WireType.Varint).int32(message.roleType);
        /* data.ListUser.Content content = 11; */
        if (message.content)
            ListUser_Content.internalBinaryWrite(message.content, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 mc_status = 12; */
        if (message.mcStatus !== 0n)
            writer.tag(12, WireType.Varint).int64(message.mcStatus);
        /* int64 is_background = 13; */
        if (message.isBackground !== 0n)
            writer.tag(13, WireType.Varint).int64(message.isBackground);
        /* data.HostInfo host = 14; */
        if (message.host)
            HostInfo.internalBinaryWrite(message.host, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* data.MicPosTagInfo mic_pos_tag_info = 15; */
        if (message.micPosTagInfo)
            MicPosTagInfo.internalBinaryWrite(message.micPosTagInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* bool pk_available = 16; */
        if (message.pkAvailable !== false)
            writer.tag(16, WireType.Varint).bool(message.pkAvailable);
        /* string extra = 200; */
        if (message.extra !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ListUser
 */
export const ListUser = new ListUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUser_Content$Type extends MessageType<ListUser_Content> {
    constructor() {
        super("data.ListUser.Content", [
            { no: 2, name: "linkmic_content", kind: "message", T: () => ListUserLinkmicContent },
            { no: 3, name: "linkmic_audience_content", kind: "message", T: () => ListUserLinkmicAudienceContent }
        ]);
    }
    create(value?: PartialMessage<ListUser_Content>): ListUser_Content {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUser_Content>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUser_Content): ListUser_Content {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ListUserLinkmicContent linkmic_content */ 2:
                    message.linkmicContent = ListUserLinkmicContent.internalBinaryRead(reader, reader.uint32(), options, message.linkmicContent);
                    break;
                case /* data.ListUserLinkmicAudienceContent linkmic_audience_content */ 3:
                    message.linkmicAudienceContent = ListUserLinkmicAudienceContent.internalBinaryRead(reader, reader.uint32(), options, message.linkmicAudienceContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUser_Content, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ListUserLinkmicContent linkmic_content = 2; */
        if (message.linkmicContent)
            ListUserLinkmicContent.internalBinaryWrite(message.linkmicContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.ListUserLinkmicAudienceContent linkmic_audience_content = 3; */
        if (message.linkmicAudienceContent)
            ListUserLinkmicAudienceContent.internalBinaryWrite(message.linkmicAudienceContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ListUser.Content
 */
export const ListUser_Content = new ListUser_Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BanUser$Type extends MessageType<BanUser> {
    constructor() {
        super("data.BanUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "anchor_explain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "audience_explain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BanUser>): BanUser {
        const message = { userId: 0n, reason: "", url: "", anchorExplain: "", audienceExplain: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BanUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BanUser): BanUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* string anchor_explain */ 4:
                    message.anchorExplain = reader.string();
                    break;
                case /* string audience_explain */ 5:
                    message.audienceExplain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BanUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* string anchor_explain = 4; */
        if (message.anchorExplain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.anchorExplain);
        /* string audience_explain = 5; */
        if (message.audienceExplain !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.audienceExplain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BanUser
 */
export const BanUser = new BanUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserLinkmicContent$Type extends MessageType<ListUserLinkmicContent> {
    constructor() {
        super("data.ListUserLinkmicContent", [
            { no: 1, name: "resource_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "show_identity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "pk_user_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "game_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "fan_ticket", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "join_channel_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "anchor_linkmic_id_info", kind: "message", T: () => AnchorLinkmicIDInfo },
            { no: 8, name: "anchor_auth_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListUserLinkmicContent>): ListUserLinkmicContent {
        const message = { resourceId: 0n, showIdentity: false, pkUserRole: 0, gameName: "", fanTicket: "", joinChannelTime: 0n, anchorAuthRole: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUserLinkmicContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserLinkmicContent): ListUserLinkmicContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 resource_id */ 1:
                    message.resourceId = reader.int64().toBigInt();
                    break;
                case /* bool show_identity */ 2:
                    message.showIdentity = reader.bool();
                    break;
                case /* int32 pk_user_role */ 3:
                    message.pkUserRole = reader.int32();
                    break;
                case /* string game_name */ 4:
                    message.gameName = reader.string();
                    break;
                case /* string fan_ticket */ 5:
                    message.fanTicket = reader.string();
                    break;
                case /* int64 join_channel_time */ 6:
                    message.joinChannelTime = reader.int64().toBigInt();
                    break;
                case /* data.AnchorLinkmicIDInfo anchor_linkmic_id_info */ 7:
                    message.anchorLinkmicIdInfo = AnchorLinkmicIDInfo.internalBinaryRead(reader, reader.uint32(), options, message.anchorLinkmicIdInfo);
                    break;
                case /* int32 anchor_auth_role */ 8:
                    message.anchorAuthRole = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserLinkmicContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.resourceId);
        /* bool show_identity = 2; */
        if (message.showIdentity !== false)
            writer.tag(2, WireType.Varint).bool(message.showIdentity);
        /* int32 pk_user_role = 3; */
        if (message.pkUserRole !== 0)
            writer.tag(3, WireType.Varint).int32(message.pkUserRole);
        /* string game_name = 4; */
        if (message.gameName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.gameName);
        /* string fan_ticket = 5; */
        if (message.fanTicket !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fanTicket);
        /* int64 join_channel_time = 6; */
        if (message.joinChannelTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.joinChannelTime);
        /* data.AnchorLinkmicIDInfo anchor_linkmic_id_info = 7; */
        if (message.anchorLinkmicIdInfo)
            AnchorLinkmicIDInfo.internalBinaryWrite(message.anchorLinkmicIdInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 anchor_auth_role = 8; */
        if (message.anchorAuthRole !== 0)
            writer.tag(8, WireType.Varint).int32(message.anchorAuthRole);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ListUserLinkmicContent
 */
export const ListUserLinkmicContent = new ListUserLinkmicContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorLinkmicIDInfo$Type extends MessageType<AnchorLinkmicIDInfo> {
    constructor() {
        super("data.AnchorLinkmicIDInfo", [
            { no: 1, name: "main_linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backup_linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "use_backup_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorLinkmicIDInfo>): AnchorLinkmicIDInfo {
        const message = { mainLinkmicIdStr: "", backupLinkmicIdStr: "", useBackupStream: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorLinkmicIDInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorLinkmicIDInfo): AnchorLinkmicIDInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string main_linkmic_id_str */ 1:
                    message.mainLinkmicIdStr = reader.string();
                    break;
                case /* string backup_linkmic_id_str */ 2:
                    message.backupLinkmicIdStr = reader.string();
                    break;
                case /* bool use_backup_stream */ 3:
                    message.useBackupStream = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorLinkmicIDInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string main_linkmic_id_str = 1; */
        if (message.mainLinkmicIdStr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mainLinkmicIdStr);
        /* string backup_linkmic_id_str = 2; */
        if (message.backupLinkmicIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.backupLinkmicIdStr);
        /* bool use_backup_stream = 3; */
        if (message.useBackupStream !== false)
            writer.tag(3, WireType.Varint).bool(message.useBackupStream);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnchorLinkmicIDInfo
 */
export const AnchorLinkmicIDInfo = new AnchorLinkmicIDInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserLinkmicAudienceContent$Type extends MessageType<ListUserLinkmicAudienceContent> {
    constructor() {
        super("data.ListUserLinkmicAudienceContent", [
            { no: 1, name: "fan_ticket", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "host_permission", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "client_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "device_platform", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "join_channel_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "expected_leave_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "in_waiting_list", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "current_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "fan_ticket_fuzzy_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "list_user_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "fan_ticket_real_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "rank_contributor_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "mic_dress", kind: "message", T: () => MicDress },
            { no: 16, name: "paid_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "is_enlarged", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "self_discipline_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "is_anonymous", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "apply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "self_discipline_start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "self_discipline_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "self_discripline_target_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "device_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "themed_competition_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListUserLinkmicAudienceContent>): ListUserLinkmicAudienceContent {
        const message = { fanTicket: 0n, hostPermission: false, appId: 0n, clientVersion: 0n, devicePlatform: "", joinChannelTime: 0n, expectedLeaveTime: 0n, inWaitingList: false, extra: "", currentTime: 0n, fanTicketFuzzyStr: "", listUserRole: 0, fanTicketRealStr: "", rankContributorIds: [], paidCount: 0n, isEnlarged: false, selfDisciplineDuration: 0n, isAnonymous: false, applyType: 0, selfDisciplineStartTimeMs: 0n, selfDisciplineStartTime: 0n, selfDiscriplineTargetDuration: 0n, deviceIdStr: "", themedCompetitionRole: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListUserLinkmicAudienceContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserLinkmicAudienceContent): ListUserLinkmicAudienceContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 fan_ticket */ 1:
                    message.fanTicket = reader.int64().toBigInt();
                    break;
                case /* bool host_permission */ 2:
                    message.hostPermission = reader.bool();
                    break;
                case /* int64 app_id */ 3:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* int64 client_version */ 4:
                    message.clientVersion = reader.int64().toBigInt();
                    break;
                case /* string device_platform */ 5:
                    message.devicePlatform = reader.string();
                    break;
                case /* int64 join_channel_time */ 6:
                    message.joinChannelTime = reader.int64().toBigInt();
                    break;
                case /* int64 expected_leave_time */ 7:
                    message.expectedLeaveTime = reader.int64().toBigInt();
                    break;
                case /* bool in_waiting_list */ 8:
                    message.inWaitingList = reader.bool();
                    break;
                case /* string extra */ 9:
                    message.extra = reader.string();
                    break;
                case /* int64 current_time */ 10:
                    message.currentTime = reader.int64().toBigInt();
                    break;
                case /* string fan_ticket_fuzzy_str */ 11:
                    message.fanTicketFuzzyStr = reader.string();
                    break;
                case /* int32 list_user_role */ 12:
                    message.listUserRole = reader.int32();
                    break;
                case /* string fan_ticket_real_str */ 13:
                    message.fanTicketRealStr = reader.string();
                    break;
                case /* repeated int64 rank_contributor_ids */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rankContributorIds.push(reader.int64().toBigInt());
                    else
                        message.rankContributorIds.push(reader.int64().toBigInt());
                    break;
                case /* data.MicDress mic_dress */ 15:
                    message.micDress = MicDress.internalBinaryRead(reader, reader.uint32(), options, message.micDress);
                    break;
                case /* int64 paid_count */ 16:
                    message.paidCount = reader.int64().toBigInt();
                    break;
                case /* bool is_enlarged */ 17:
                    message.isEnlarged = reader.bool();
                    break;
                case /* int64 self_discipline_duration */ 18:
                    message.selfDisciplineDuration = reader.int64().toBigInt();
                    break;
                case /* bool is_anonymous */ 19:
                    message.isAnonymous = reader.bool();
                    break;
                case /* int32 apply_type */ 20:
                    message.applyType = reader.int32();
                    break;
                case /* int64 self_discipline_start_time_ms */ 21:
                    message.selfDisciplineStartTimeMs = reader.int64().toBigInt();
                    break;
                case /* int64 self_discipline_start_time */ 22:
                    message.selfDisciplineStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 self_discripline_target_duration */ 23:
                    message.selfDiscriplineTargetDuration = reader.int64().toBigInt();
                    break;
                case /* string device_id_str */ 24:
                    message.deviceIdStr = reader.string();
                    break;
                case /* int32 themed_competition_role */ 25:
                    message.themedCompetitionRole = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserLinkmicAudienceContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 fan_ticket = 1; */
        if (message.fanTicket !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fanTicket);
        /* bool host_permission = 2; */
        if (message.hostPermission !== false)
            writer.tag(2, WireType.Varint).bool(message.hostPermission);
        /* int64 app_id = 3; */
        if (message.appId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.appId);
        /* int64 client_version = 4; */
        if (message.clientVersion !== 0n)
            writer.tag(4, WireType.Varint).int64(message.clientVersion);
        /* string device_platform = 5; */
        if (message.devicePlatform !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.devicePlatform);
        /* int64 join_channel_time = 6; */
        if (message.joinChannelTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.joinChannelTime);
        /* int64 expected_leave_time = 7; */
        if (message.expectedLeaveTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.expectedLeaveTime);
        /* bool in_waiting_list = 8; */
        if (message.inWaitingList !== false)
            writer.tag(8, WireType.Varint).bool(message.inWaitingList);
        /* string extra = 9; */
        if (message.extra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.extra);
        /* int64 current_time = 10; */
        if (message.currentTime !== 0n)
            writer.tag(10, WireType.Varint).int64(message.currentTime);
        /* string fan_ticket_fuzzy_str = 11; */
        if (message.fanTicketFuzzyStr !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.fanTicketFuzzyStr);
        /* int32 list_user_role = 12; */
        if (message.listUserRole !== 0)
            writer.tag(12, WireType.Varint).int32(message.listUserRole);
        /* string fan_ticket_real_str = 13; */
        if (message.fanTicketRealStr !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.fanTicketRealStr);
        /* repeated int64 rank_contributor_ids = 14; */
        if (message.rankContributorIds.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.rankContributorIds.length; i++)
                writer.int64(message.rankContributorIds[i]);
            writer.join();
        }
        /* data.MicDress mic_dress = 15; */
        if (message.micDress)
            MicDress.internalBinaryWrite(message.micDress, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* int64 paid_count = 16; */
        if (message.paidCount !== 0n)
            writer.tag(16, WireType.Varint).int64(message.paidCount);
        /* bool is_enlarged = 17; */
        if (message.isEnlarged !== false)
            writer.tag(17, WireType.Varint).bool(message.isEnlarged);
        /* int64 self_discipline_duration = 18; */
        if (message.selfDisciplineDuration !== 0n)
            writer.tag(18, WireType.Varint).int64(message.selfDisciplineDuration);
        /* bool is_anonymous = 19; */
        if (message.isAnonymous !== false)
            writer.tag(19, WireType.Varint).bool(message.isAnonymous);
        /* int32 apply_type = 20; */
        if (message.applyType !== 0)
            writer.tag(20, WireType.Varint).int32(message.applyType);
        /* int64 self_discipline_start_time_ms = 21; */
        if (message.selfDisciplineStartTimeMs !== 0n)
            writer.tag(21, WireType.Varint).int64(message.selfDisciplineStartTimeMs);
        /* int64 self_discipline_start_time = 22; */
        if (message.selfDisciplineStartTime !== 0n)
            writer.tag(22, WireType.Varint).int64(message.selfDisciplineStartTime);
        /* int64 self_discripline_target_duration = 23; */
        if (message.selfDiscriplineTargetDuration !== 0n)
            writer.tag(23, WireType.Varint).int64(message.selfDiscriplineTargetDuration);
        /* string device_id_str = 24; */
        if (message.deviceIdStr !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.deviceIdStr);
        /* int32 themed_competition_role = 25; */
        if (message.themedCompetitionRole !== 0)
            writer.tag(25, WireType.Varint).int32(message.themedCompetitionRole);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ListUserLinkmicAudienceContent
 */
export const ListUserLinkmicAudienceContent = new ListUserLinkmicAudienceContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceActionSource$Type extends MessageType<AudienceActionSource> {
    constructor() {
        super("data.AudienceActionSource", [
            { no: 1, name: "invite_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "permit_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AudienceActionSource>): AudienceActionSource {
        const message = { inviteSource: 0, permitSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceActionSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceActionSource): AudienceActionSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 invite_source */ 1:
                    message.inviteSource = reader.int32();
                    break;
                case /* int32 permit_source */ 2:
                    message.permitSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceActionSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 invite_source = 1; */
        if (message.inviteSource !== 0)
            writer.tag(1, WireType.Varint).int32(message.inviteSource);
        /* int32 permit_source = 2; */
        if (message.permitSource !== 0)
            writer.tag(2, WireType.Varint).int32(message.permitSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AudienceActionSource
 */
export const AudienceActionSource = new AudienceActionSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchSceneData$Type extends MessageType<SwitchSceneData> {
    constructor() {
        super("data.SwitchSceneData", [
            { no: 1, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 4, name: "scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "play_modes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "ui_layout", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "multi_rtc_info", kind: "message", T: () => MultiRtcInfo },
            { no: 8, name: "multi_live_core_info", kind: "message", T: () => MultiLiveCoreInfo },
            { no: 9, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo },
            { no: 10, name: "to_linker_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "multi_anchor_extra", kind: "message", T: () => MultiAnchorExtra },
            { no: 12, name: "anchor_ui_layout", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "inviter_from_scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchSceneData>): SwitchSceneData {
        const message = { rtcExtInfo: "", liveCoreExtInfo: "", linkedUsers: [], scene: 0, playModes: [], uiLayout: 0, toLinkerId: 0n, anchorUiLayout: 0, inviterFromScene: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchSceneData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchSceneData): SwitchSceneData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rtc_ext_info */ 1:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_ext_info */ 2:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* repeated data.ListUser linked_users */ 3:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 scene */ 4:
                    message.scene = reader.int32();
                    break;
                case /* repeated int32 play_modes */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playModes.push(reader.int32());
                    else
                        message.playModes.push(reader.int32());
                    break;
                case /* int32 ui_layout */ 6:
                    message.uiLayout = reader.int32();
                    break;
                case /* data.MultiRtcInfo multi_rtc_info */ 7:
                    message.multiRtcInfo = MultiRtcInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiRtcInfo);
                    break;
                case /* data.MultiLiveCoreInfo multi_live_core_info */ 8:
                    message.multiLiveCoreInfo = MultiLiveCoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiLiveCoreInfo);
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 9:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                case /* int64 to_linker_id */ 10:
                    message.toLinkerId = reader.int64().toBigInt();
                    break;
                case /* data.MultiAnchorExtra multi_anchor_extra */ 11:
                    message.multiAnchorExtra = MultiAnchorExtra.internalBinaryRead(reader, reader.uint32(), options, message.multiAnchorExtra);
                    break;
                case /* int32 anchor_ui_layout */ 12:
                    message.anchorUiLayout = reader.int32();
                    break;
                case /* int32 inviter_from_scene */ 13:
                    message.inviterFromScene = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchSceneData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rtc_ext_info = 1; */
        if (message.rtcExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_ext_info = 2; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* repeated data.ListUser linked_users = 3; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 scene = 4; */
        if (message.scene !== 0)
            writer.tag(4, WireType.Varint).int32(message.scene);
        /* repeated int32 play_modes = 5; */
        if (message.playModes.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playModes.length; i++)
                writer.int32(message.playModes[i]);
            writer.join();
        }
        /* int32 ui_layout = 6; */
        if (message.uiLayout !== 0)
            writer.tag(6, WireType.Varint).int32(message.uiLayout);
        /* data.MultiRtcInfo multi_rtc_info = 7; */
        if (message.multiRtcInfo)
            MultiRtcInfo.internalBinaryWrite(message.multiRtcInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiLiveCoreInfo multi_live_core_info = 8; */
        if (message.multiLiveCoreInfo)
            MultiLiveCoreInfo.internalBinaryWrite(message.multiLiveCoreInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiChannelInfo multi_channel_info = 9; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 to_linker_id = 10; */
        if (message.toLinkerId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.toLinkerId);
        /* data.MultiAnchorExtra multi_anchor_extra = 11; */
        if (message.multiAnchorExtra)
            MultiAnchorExtra.internalBinaryWrite(message.multiAnchorExtra, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int32 anchor_ui_layout = 12; */
        if (message.anchorUiLayout !== 0)
            writer.tag(12, WireType.Varint).int32(message.anchorUiLayout);
        /* int32 inviter_from_scene = 13; */
        if (message.inviterFromScene !== 0)
            writer.tag(13, WireType.Varint).int32(message.inviterFromScene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SwitchSceneData
 */
export const SwitchSceneData = new SwitchSceneData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiAnchorExtra$Type extends MessageType<MultiAnchorExtra> {
    constructor() {
        super("data.MultiAnchorExtra", [
            { no: 1, name: "invite_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MultiAnchorExtra>): MultiAnchorExtra {
        const message = { inviteRole: 0, matchType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiAnchorExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiAnchorExtra): MultiAnchorExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 invite_role */ 1:
                    message.inviteRole = reader.int32();
                    break;
                case /* int64 match_type */ 2:
                    message.matchType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiAnchorExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 invite_role = 1; */
        if (message.inviteRole !== 0)
            writer.tag(1, WireType.Varint).int32(message.inviteRole);
        /* int64 match_type = 2; */
        if (message.matchType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.matchType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiAnchorExtra
 */
export const MultiAnchorExtra = new MultiAnchorExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiLiveCoreInfo$Type extends MessageType<MultiLiveCoreInfo> {
    constructor() {
        super("data.MultiLiveCoreInfo", [
            { no: 1, name: "scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MultiLiveCoreInfo>): MultiLiveCoreInfo {
        const message = { scene: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiLiveCoreInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiLiveCoreInfo): MultiLiveCoreInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 scene */ 1:
                    message.scene = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiLiveCoreInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 scene = 1; */
        if (message.scene !== 0)
            writer.tag(1, WireType.Varint).int32(message.scene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiLiveCoreInfo
 */
export const MultiLiveCoreInfo = new MultiLiveCoreInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiRtcInfo$Type extends MessageType<MultiRtcInfo> {
    constructor() {
        super("data.MultiRtcInfo", [
            { no: 1, name: "scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MultiRtcInfo>): MultiRtcInfo {
        const message = { scene: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiRtcInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiRtcInfo): MultiRtcInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 scene */ 1:
                    message.scene = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiRtcInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 scene = 1; */
        if (message.scene !== 0)
            writer.tag(1, WireType.Varint).int32(message.scene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiRtcInfo
 */
export const MultiRtcInfo = new MultiRtcInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePlayModeData$Type extends MessageType<ChangePlayModeData> {
    constructor() {
        super("data.ChangePlayModeData", [
            { no: 1, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 2, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "multi_rtc_info", kind: "message", T: () => MultiRtcInfo },
            { no: 5, name: "multi_live_core_info", kind: "message", T: () => MultiLiveCoreInfo },
            { no: 6, name: "play_modes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePlayModeData>): ChangePlayModeData {
        const message = { linkedUsers: [], rtcExtInfo: "", liveCoreExtInfo: "", playModes: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangePlayModeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePlayModeData): ChangePlayModeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ListUser linked_users */ 1:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string rtc_ext_info */ 2:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_ext_info */ 3:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* data.MultiRtcInfo multi_rtc_info */ 4:
                    message.multiRtcInfo = MultiRtcInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiRtcInfo);
                    break;
                case /* data.MultiLiveCoreInfo multi_live_core_info */ 5:
                    message.multiLiveCoreInfo = MultiLiveCoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiLiveCoreInfo);
                    break;
                case /* repeated int32 play_modes */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playModes.push(reader.int32());
                    else
                        message.playModes.push(reader.int32());
                    break;
                case /* uint64 version */ 7:
                    message.version = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePlayModeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ListUser linked_users = 1; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string rtc_ext_info = 2; */
        if (message.rtcExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_ext_info = 3; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* data.MultiRtcInfo multi_rtc_info = 4; */
        if (message.multiRtcInfo)
            MultiRtcInfo.internalBinaryWrite(message.multiRtcInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiLiveCoreInfo multi_live_core_info = 5; */
        if (message.multiLiveCoreInfo)
            MultiLiveCoreInfo.internalBinaryWrite(message.multiLiveCoreInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 play_modes = 6; */
        if (message.playModes.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playModes.length; i++)
                writer.int32(message.playModes[i]);
            writer.join();
        }
        /* uint64 version = 7; */
        if (message.version !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChangePlayModeData
 */
export const ChangePlayModeData = new ChangePlayModeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomLinkerContent$Type extends MessageType<RoomLinkerContent> {
    constructor() {
        super("data.RoomLinkerContent", [
            { no: 1, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 2, name: "room_link_silence_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "is_anchor_background", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomLinkerContent>): RoomLinkerContent {
        const message = { linkedUsers: [], roomLinkSilenceStatus: 0, anchorId: 0n, isAnchorBackground: 0n, version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomLinkerContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomLinkerContent): RoomLinkerContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ListUser linked_users */ 1:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 room_link_silence_status */ 2:
                    message.roomLinkSilenceStatus = reader.int32();
                    break;
                case /* int64 anchor_id */ 3:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* int64 is_anchor_background */ 4:
                    message.isAnchorBackground = reader.int64().toBigInt();
                    break;
                case /* int64 version */ 5:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomLinkerContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ListUser linked_users = 1; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 room_link_silence_status = 2; */
        if (message.roomLinkSilenceStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.roomLinkSilenceStatus);
        /* int64 anchor_id = 3; */
        if (message.anchorId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.anchorId);
        /* int64 is_anchor_background = 4; */
        if (message.isAnchorBackground !== 0n)
            writer.tag(4, WireType.Varint).int64(message.isAnchorBackground);
        /* int64 version = 5; */
        if (message.version !== 0n)
            writer.tag(5, WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomLinkerContent
 */
export const RoomLinkerContent = new RoomLinkerContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HostInfo$Type extends MessageType<HostInfo> {
    constructor() {
        super("data.HostInfo", [
            { no: 1, name: "is_host", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "host_position_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HostInfo>): HostInfo {
        const message = { isHost: 0n, hostPositionName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HostInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HostInfo): HostInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 is_host */ 1:
                    message.isHost = reader.int64().toBigInt();
                    break;
                case /* string host_position_name */ 2:
                    message.hostPositionName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HostInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 is_host = 1; */
        if (message.isHost !== 0n)
            writer.tag(1, WireType.Varint).int64(message.isHost);
        /* string host_position_name = 2; */
        if (message.hostPositionName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hostPositionName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.HostInfo
 */
export const HostInfo = new HostInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MicPosTagInfo$Type extends MessageType<MicPosTagInfo> {
    constructor() {
        super("data.MicPosTagInfo", [
            { no: 1, name: "tag_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "tag_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_color_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tag_type_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "bg_color_img", kind: "message", T: () => Image },
            { no: 7, name: "open_tag_desc_page", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MicPosTagInfo>): MicPosTagInfo {
        const message = { tagType: 0, tagName: "", textColorValue: "", bgColorValue: "", tagTypeId: 0n, openTagDescPage: false, schema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MicPosTagInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MicPosTagInfo): MicPosTagInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tag_type */ 1:
                    message.tagType = reader.int32();
                    break;
                case /* string tag_name */ 2:
                    message.tagName = reader.string();
                    break;
                case /* string text_color_value */ 3:
                    message.textColorValue = reader.string();
                    break;
                case /* string bg_color_value */ 4:
                    message.bgColorValue = reader.string();
                    break;
                case /* int64 tag_type_id */ 5:
                    message.tagTypeId = reader.int64().toBigInt();
                    break;
                case /* data.Image bg_color_img */ 6:
                    message.bgColorImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgColorImg);
                    break;
                case /* bool open_tag_desc_page */ 7:
                    message.openTagDescPage = reader.bool();
                    break;
                case /* string schema */ 8:
                    message.schema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MicPosTagInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tag_type = 1; */
        if (message.tagType !== 0)
            writer.tag(1, WireType.Varint).int32(message.tagType);
        /* string tag_name = 2; */
        if (message.tagName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tagName);
        /* string text_color_value = 3; */
        if (message.textColorValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorValue);
        /* string bg_color_value = 4; */
        if (message.bgColorValue !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColorValue);
        /* int64 tag_type_id = 5; */
        if (message.tagTypeId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.tagTypeId);
        /* data.Image bg_color_img = 6; */
        if (message.bgColorImg)
            Image.internalBinaryWrite(message.bgColorImg, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool open_tag_desc_page = 7; */
        if (message.openTagDescPage !== false)
            writer.tag(7, WireType.Varint).bool(message.openTagDescPage);
        /* string schema = 8; */
        if (message.schema !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.schema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MicPosTagInfo
 */
export const MicPosTagInfo = new MicPosTagInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelListUser$Type extends MessageType<ChannelListUser> {
    constructor() {
        super("data.ChannelListUser", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "link_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "link_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "silence_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "modify_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "linker_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "role_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "apply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "invite_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "linker_reportor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "rtc_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 200, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelListUser>): ChannelListUser {
        const message = { linkStatus: 0, linkType: 0, silenceStatus: 0, modifyTime: 0n, linkerId: 0n, roleType: 0, applyType: 0, inviteType: 0, linkerReportor: 0n, rtcUserId: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelListUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelListUser): ChannelListUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int32 link_status */ 2:
                    message.linkStatus = reader.int32();
                    break;
                case /* int32 link_type */ 3:
                    message.linkType = reader.int32();
                    break;
                case /* int32 silence_status */ 4:
                    message.silenceStatus = reader.int32();
                    break;
                case /* int64 modify_time */ 5:
                    message.modifyTime = reader.int64().toBigInt();
                    break;
                case /* int64 linker_id */ 6:
                    message.linkerId = reader.int64().toBigInt();
                    break;
                case /* int32 role_type */ 7:
                    message.roleType = reader.int32();
                    break;
                case /* int32 apply_type */ 8:
                    message.applyType = reader.int32();
                    break;
                case /* int32 invite_type */ 9:
                    message.inviteType = reader.int32();
                    break;
                case /* int64 linker_reportor */ 10:
                    message.linkerReportor = reader.int64().toBigInt();
                    break;
                case /* string rtc_user_id */ 11:
                    message.rtcUserId = reader.string();
                    break;
                case /* string extra */ 200:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelListUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 link_status = 2; */
        if (message.linkStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.linkStatus);
        /* int32 link_type = 3; */
        if (message.linkType !== 0)
            writer.tag(3, WireType.Varint).int32(message.linkType);
        /* int32 silence_status = 4; */
        if (message.silenceStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.silenceStatus);
        /* int64 modify_time = 5; */
        if (message.modifyTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.modifyTime);
        /* int64 linker_id = 6; */
        if (message.linkerId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.linkerId);
        /* int32 role_type = 7; */
        if (message.roleType !== 0)
            writer.tag(7, WireType.Varint).int32(message.roleType);
        /* int32 apply_type = 8; */
        if (message.applyType !== 0)
            writer.tag(8, WireType.Varint).int32(message.applyType);
        /* int32 invite_type = 9; */
        if (message.inviteType !== 0)
            writer.tag(9, WireType.Varint).int32(message.inviteType);
        /* int64 linker_reportor = 10; */
        if (message.linkerReportor !== 0n)
            writer.tag(10, WireType.Varint).int64(message.linkerReportor);
        /* string rtc_user_id = 11; */
        if (message.rtcUserId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.rtcUserId);
        /* string extra = 200; */
        if (message.extra !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChannelListUser
 */
export const ChannelListUser = new ChannelListUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorLinkmicChannelInfo$Type extends MessageType<AnchorLinkmicChannelInfo> {
    constructor() {
        super("data.AnchorLinkmicChannelInfo", [
            { no: 1, name: "linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo }
        ]);
    }
    create(value?: PartialMessage<AnchorLinkmicChannelInfo>): AnchorLinkmicChannelInfo {
        const message = { linkmicIdStr: "", rtcExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorLinkmicChannelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorLinkmicChannelInfo): AnchorLinkmicChannelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string linkmic_id_str */ 1:
                    message.linkmicIdStr = reader.string();
                    break;
                case /* string rtc_ext_info */ 2:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 3:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorLinkmicChannelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string linkmic_id_str = 1; */
        if (message.linkmicIdStr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.linkmicIdStr);
        /* string rtc_ext_info = 2; */
        if (message.rtcExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* data.MultiChannelInfo multi_channel_info = 3; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnchorLinkmicChannelInfo
 */
export const AnchorLinkmicChannelInfo = new AnchorLinkmicChannelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVComponentMediaInfo$Type extends MessageType<KTVComponentMediaInfo> {
    constructor() {
        super("data.KTVComponentMediaInfo", [
            { no: 1, name: "ktv_live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KTVComponentMediaInfo>): KTVComponentMediaInfo {
        const message = { ktvLiveCoreExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVComponentMediaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVComponentMediaInfo): KTVComponentMediaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ktv_live_core_ext_info */ 1:
                    message.ktvLiveCoreExtInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVComponentMediaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ktv_live_core_ext_info = 1; */
        if (message.ktvLiveCoreExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ktvLiveCoreExtInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KTVComponentMediaInfo
 */
export const KTVComponentMediaInfo = new KTVComponentMediaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PersonalKaraokeMediaInfo$Type extends MessageType<PersonalKaraokeMediaInfo> {
    constructor() {
        super("data.PersonalKaraokeMediaInfo", [
            { no: 1, name: "personal_karaoke_live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PersonalKaraokeMediaInfo>): PersonalKaraokeMediaInfo {
        const message = { personalKaraokeLiveCoreExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PersonalKaraokeMediaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PersonalKaraokeMediaInfo): PersonalKaraokeMediaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string personal_karaoke_live_core_ext_info */ 1:
                    message.personalKaraokeLiveCoreExtInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PersonalKaraokeMediaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string personal_karaoke_live_core_ext_info = 1; */
        if (message.personalKaraokeLiveCoreExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.personalKaraokeLiveCoreExtInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PersonalKaraokeMediaInfo
 */
export const PersonalKaraokeMediaInfo = new PersonalKaraokeMediaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicMediaInfo$Type extends MessageType<LinkmicMediaInfo> {
    constructor() {
        super("data.LinkmicMediaInfo", [
            { no: 1, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "multi_rtc_info", kind: "message", T: () => MultiRtcInfo },
            { no: 5, name: "multi_live_core_info", kind: "message", T: () => MultiLiveCoreInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicMediaInfo>): LinkmicMediaInfo {
        const message = { rtcExtInfo: "", linkmicIdStr: "", liveCoreExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicMediaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicMediaInfo): LinkmicMediaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rtc_ext_info */ 1:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string linkmic_id_str */ 2:
                    message.linkmicIdStr = reader.string();
                    break;
                case /* string live_core_ext_info */ 3:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* data.MultiRtcInfo multi_rtc_info */ 4:
                    message.multiRtcInfo = MultiRtcInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiRtcInfo);
                    break;
                case /* data.MultiLiveCoreInfo multi_live_core_info */ 5:
                    message.multiLiveCoreInfo = MultiLiveCoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiLiveCoreInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicMediaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rtc_ext_info = 1; */
        if (message.rtcExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string linkmic_id_str = 2; */
        if (message.linkmicIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.linkmicIdStr);
        /* string live_core_ext_info = 3; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* data.MultiRtcInfo multi_rtc_info = 4; */
        if (message.multiRtcInfo)
            MultiRtcInfo.internalBinaryWrite(message.multiRtcInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiLiveCoreInfo multi_live_core_info = 5; */
        if (message.multiLiveCoreInfo)
            MultiLiveCoreInfo.internalBinaryWrite(message.multiLiveCoreInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicMediaInfo
 */
export const LinkmicMediaInfo = new LinkmicMediaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMediaInfoNotify$Type extends MessageType<UpdateMediaInfoNotify> {
    constructor() {
        super("data.UpdateMediaInfoNotify", [
            { no: 1, name: "need_update", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateMediaInfoNotify>): UpdateMediaInfoNotify {
        const message = { needUpdate: false, position: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateMediaInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMediaInfoNotify): UpdateMediaInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool need_update */ 1:
                    message.needUpdate = reader.bool();
                    break;
                case /* int64 position */ 2:
                    message.position = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMediaInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool need_update = 1; */
        if (message.needUpdate !== false)
            writer.tag(1, WireType.Varint).bool(message.needUpdate);
        /* int64 position = 2; */
        if (message.position !== 0n)
            writer.tag(2, WireType.Varint).int64(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.UpdateMediaInfoNotify
 */
export const UpdateMediaInfoNotify = new UpdateMediaInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicMediaParam$Type extends MessageType<LinkmicMediaParam> {
    constructor() {
        super("data.LinkmicMediaParam", [
            { no: 1, name: "linkmic_media_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "linkmic_media_info", kind: "message", T: () => LinkmicMediaInfo },
            { no: 3, name: "ktv_component_media_info", kind: "message", T: () => KTVComponentMediaInfo },
            { no: 4, name: "update_media_info_notify", kind: "message", T: () => UpdateMediaInfoNotify },
            { no: 5, name: "personal_karaoke_info", kind: "message", T: () => PersonalKaraokeMediaInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicMediaParam>): LinkmicMediaParam {
        const message = { linkmicMediaType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicMediaParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicMediaParam): LinkmicMediaParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 linkmic_media_type */ 1:
                    message.linkmicMediaType = reader.int32();
                    break;
                case /* data.LinkmicMediaInfo linkmic_media_info */ 2:
                    message.linkmicMediaInfo = LinkmicMediaInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkmicMediaInfo);
                    break;
                case /* data.KTVComponentMediaInfo ktv_component_media_info */ 3:
                    message.ktvComponentMediaInfo = KTVComponentMediaInfo.internalBinaryRead(reader, reader.uint32(), options, message.ktvComponentMediaInfo);
                    break;
                case /* data.UpdateMediaInfoNotify update_media_info_notify */ 4:
                    message.updateMediaInfoNotify = UpdateMediaInfoNotify.internalBinaryRead(reader, reader.uint32(), options, message.updateMediaInfoNotify);
                    break;
                case /* data.PersonalKaraokeMediaInfo personal_karaoke_info */ 5:
                    message.personalKaraokeInfo = PersonalKaraokeMediaInfo.internalBinaryRead(reader, reader.uint32(), options, message.personalKaraokeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicMediaParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 linkmic_media_type = 1; */
        if (message.linkmicMediaType !== 0)
            writer.tag(1, WireType.Varint).int32(message.linkmicMediaType);
        /* data.LinkmicMediaInfo linkmic_media_info = 2; */
        if (message.linkmicMediaInfo)
            LinkmicMediaInfo.internalBinaryWrite(message.linkmicMediaInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.KTVComponentMediaInfo ktv_component_media_info = 3; */
        if (message.ktvComponentMediaInfo)
            KTVComponentMediaInfo.internalBinaryWrite(message.ktvComponentMediaInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.UpdateMediaInfoNotify update_media_info_notify = 4; */
        if (message.updateMediaInfoNotify)
            UpdateMediaInfoNotify.internalBinaryWrite(message.updateMediaInfoNotify, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.PersonalKaraokeMediaInfo personal_karaoke_info = 5; */
        if (message.personalKaraokeInfo)
            PersonalKaraokeMediaInfo.internalBinaryWrite(message.personalKaraokeInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicMediaParam
 */
export const LinkmicMediaParam = new LinkmicMediaParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MCUContent$Type extends MessageType<MCUContent> {
    constructor() {
        super("data.MCUContent", [
            { no: 1, name: "current_stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rivals_stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MCUContent>): MCUContent {
        const message = { currentStreamId: "", rivalsStreamId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MCUContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MCUContent): MCUContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string current_stream_id */ 1:
                    message.currentStreamId = reader.string();
                    break;
                case /* string rivals_stream_id */ 2:
                    message.rivalsStreamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MCUContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string current_stream_id = 1; */
        if (message.currentStreamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.currentStreamId);
        /* string rivals_stream_id = 2; */
        if (message.rivalsStreamId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rivalsStreamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MCUContent
 */
export const MCUContent = new MCUContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreRTCInfo$Type extends MessageType<PreRTCInfo> {
    constructor() {
        super("data.PreRTCInfo", [
            { no: 3, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PreRTCInfo>): PreRTCInfo {
        const message = { version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreRTCInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreRTCInfo): PreRTCInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version */ 3:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreRTCInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 version = 3; */
        if (message.version !== 0n)
            writer.tag(3, WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreRTCInfo
 */
export const PreRTCInfo = new PreRTCInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreRTCLinkUserInfo$Type extends MessageType<PreRTCLinkUserInfo> {
    constructor() {
        super("data.PreRTCLinkUserInfo", [
            { no: 1, name: "rtc_push_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "link_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PreRTCLinkUserInfo>): PreRTCLinkUserInfo {
        const message = { rtcPushStream: false, linkmicIdStr: "", linkStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreRTCLinkUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreRTCLinkUserInfo): PreRTCLinkUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool rtc_push_stream */ 1:
                    message.rtcPushStream = reader.bool();
                    break;
                case /* string linkmic_id_str */ 2:
                    message.linkmicIdStr = reader.string();
                    break;
                case /* int32 link_status */ 3:
                    message.linkStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreRTCLinkUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool rtc_push_stream = 1; */
        if (message.rtcPushStream !== false)
            writer.tag(1, WireType.Varint).bool(message.rtcPushStream);
        /* string linkmic_id_str = 2; */
        if (message.linkmicIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.linkmicIdStr);
        /* int32 link_status = 3; */
        if (message.linkStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.linkStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PreRTCLinkUserInfo
 */
export const PreRTCLinkUserInfo = new PreRTCLinkUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MicDress$Type extends MessageType<MicDress> {
    constructor() {
        super("data.MicDress", [
            { no: 1, name: "voice_dress", kind: "message", T: () => VoiceWave },
            { no: 2, name: "voice_wave", kind: "message", T: () => VoiceWave }
        ]);
    }
    create(value?: PartialMessage<MicDress>): MicDress {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MicDress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MicDress): MicDress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.VoiceWave voice_dress */ 1:
                    message.voiceDress = VoiceWave.internalBinaryRead(reader, reader.uint32(), options, message.voiceDress);
                    break;
                case /* data.VoiceWave voice_wave */ 2:
                    message.voiceWave = VoiceWave.internalBinaryRead(reader, reader.uint32(), options, message.voiceWave);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MicDress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.VoiceWave voice_dress = 1; */
        if (message.voiceDress)
            VoiceWave.internalBinaryWrite(message.voiceDress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.VoiceWave voice_wave = 2; */
        if (message.voiceWave)
            VoiceWave.internalBinaryWrite(message.voiceWave, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MicDress
 */
export const MicDress = new MicDress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VoiceWave$Type extends MessageType<VoiceWave> {
    constructor() {
        super("data.VoiceWave", [
            { no: 1, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "low_img", kind: "message", T: () => Image },
            { no: 3, name: "medium_img", kind: "message", T: () => Image },
            { no: 4, name: "high_img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<VoiceWave>): VoiceWave {
        const message = { dressId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VoiceWave>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VoiceWave): VoiceWave {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dress_id */ 1:
                    message.dressId = reader.string();
                    break;
                case /* data.Image low_img */ 2:
                    message.lowImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.lowImg);
                    break;
                case /* data.Image medium_img */ 3:
                    message.mediumImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.mediumImg);
                    break;
                case /* data.Image high_img */ 4:
                    message.highImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.highImg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VoiceWave, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dress_id = 1; */
        if (message.dressId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dressId);
        /* data.Image low_img = 2; */
        if (message.lowImg)
            Image.internalBinaryWrite(message.lowImg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image medium_img = 3; */
        if (message.mediumImg)
            Image.internalBinaryWrite(message.mediumImg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image high_img = 4; */
        if (message.highImg)
            Image.internalBinaryWrite(message.highImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VoiceWave
 */
export const VoiceWave = new VoiceWave$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmojiPermission$Type extends MessageType<EmojiPermission> {
    constructor() {
        super("data.EmojiPermission", [
            { no: 1, name: "has_permission", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "toast_without_permission", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bottom_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmojiPermission>): EmojiPermission {
        const message = { hasPermission: false, toastWithoutPermission: "", bottomText: "", schema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmojiPermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmojiPermission): EmojiPermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has_permission */ 1:
                    message.hasPermission = reader.bool();
                    break;
                case /* string toast_without_permission */ 2:
                    message.toastWithoutPermission = reader.string();
                    break;
                case /* string bottom_text */ 3:
                    message.bottomText = reader.string();
                    break;
                case /* string schema */ 4:
                    message.schema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmojiPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool has_permission = 1; */
        if (message.hasPermission !== false)
            writer.tag(1, WireType.Varint).bool(message.hasPermission);
        /* string toast_without_permission = 2; */
        if (message.toastWithoutPermission !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toastWithoutPermission);
        /* string bottom_text = 3; */
        if (message.bottomText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bottomText);
        /* string schema = 4; */
        if (message.schema !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.schema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EmojiPermission
 */
export const EmojiPermission = new EmojiPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendInteractEmojiConfig$Type extends MessageType<SendInteractEmojiConfig> {
    constructor() {
        super("data.SendInteractEmojiConfig", [
            { no: 1, name: "interact_emoji", kind: "message", T: () => Image },
            { no: 2, name: "duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "own_emoji", kind: "message", T: () => Image },
            { no: 5, name: "own_emoji_duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "scale_up", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "reshape", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "sound_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "reshape_start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SendInteractEmojiConfig>): SendInteractEmojiConfig {
        const message = { durationMs: 0n, start: 0n, ownEmojiDurationMs: 0n, offset: 0n, scaleUp: 0n, reshape: false, soundUrl: "", reshapeStart: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendInteractEmojiConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendInteractEmojiConfig): SendInteractEmojiConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image interact_emoji */ 1:
                    message.interactEmoji = Image.internalBinaryRead(reader, reader.uint32(), options, message.interactEmoji);
                    break;
                case /* int64 duration_ms */ 2:
                    message.durationMs = reader.int64().toBigInt();
                    break;
                case /* int64 start */ 3:
                    message.start = reader.int64().toBigInt();
                    break;
                case /* data.Image own_emoji */ 4:
                    message.ownEmoji = Image.internalBinaryRead(reader, reader.uint32(), options, message.ownEmoji);
                    break;
                case /* int64 own_emoji_duration_ms */ 5:
                    message.ownEmojiDurationMs = reader.int64().toBigInt();
                    break;
                case /* int64 offset */ 6:
                    message.offset = reader.int64().toBigInt();
                    break;
                case /* int64 scale_up */ 7:
                    message.scaleUp = reader.int64().toBigInt();
                    break;
                case /* bool reshape */ 8:
                    message.reshape = reader.bool();
                    break;
                case /* string sound_url */ 9:
                    message.soundUrl = reader.string();
                    break;
                case /* int64 reshape_start */ 10:
                    message.reshapeStart = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendInteractEmojiConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image interact_emoji = 1; */
        if (message.interactEmoji)
            Image.internalBinaryWrite(message.interactEmoji, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration_ms = 2; */
        if (message.durationMs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.durationMs);
        /* int64 start = 3; */
        if (message.start !== 0n)
            writer.tag(3, WireType.Varint).int64(message.start);
        /* data.Image own_emoji = 4; */
        if (message.ownEmoji)
            Image.internalBinaryWrite(message.ownEmoji, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 own_emoji_duration_ms = 5; */
        if (message.ownEmojiDurationMs !== 0n)
            writer.tag(5, WireType.Varint).int64(message.ownEmojiDurationMs);
        /* int64 offset = 6; */
        if (message.offset !== 0n)
            writer.tag(6, WireType.Varint).int64(message.offset);
        /* int64 scale_up = 7; */
        if (message.scaleUp !== 0n)
            writer.tag(7, WireType.Varint).int64(message.scaleUp);
        /* bool reshape = 8; */
        if (message.reshape !== false)
            writer.tag(8, WireType.Varint).bool(message.reshape);
        /* string sound_url = 9; */
        if (message.soundUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.soundUrl);
        /* int64 reshape_start = 10; */
        if (message.reshapeStart !== 0n)
            writer.tag(10, WireType.Varint).int64(message.reshapeStart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SendInteractEmojiConfig
 */
export const SendInteractEmojiConfig = new SendInteractEmojiConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmojiInteractResource$Type extends MessageType<EmojiInteractResource> {
    constructor() {
        super("data.EmojiInteractResource", [
            { no: 1, name: "from_image", kind: "message", T: () => SendInteractEmojiConfig },
            { no: 2, name: "pass_image", kind: "message", T: () => SendInteractEmojiConfig },
            { no: 3, name: "to_image", kind: "message", T: () => SendInteractEmojiConfig }
        ]);
    }
    create(value?: PartialMessage<EmojiInteractResource>): EmojiInteractResource {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmojiInteractResource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmojiInteractResource): EmojiInteractResource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.SendInteractEmojiConfig from_image */ 1:
                    message.fromImage = SendInteractEmojiConfig.internalBinaryRead(reader, reader.uint32(), options, message.fromImage);
                    break;
                case /* data.SendInteractEmojiConfig pass_image */ 2:
                    message.passImage = SendInteractEmojiConfig.internalBinaryRead(reader, reader.uint32(), options, message.passImage);
                    break;
                case /* data.SendInteractEmojiConfig to_image */ 3:
                    message.toImage = SendInteractEmojiConfig.internalBinaryRead(reader, reader.uint32(), options, message.toImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmojiInteractResource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.SendInteractEmojiConfig from_image = 1; */
        if (message.fromImage)
            SendInteractEmojiConfig.internalBinaryWrite(message.fromImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.SendInteractEmojiConfig pass_image = 2; */
        if (message.passImage)
            SendInteractEmojiConfig.internalBinaryWrite(message.passImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.SendInteractEmojiConfig to_image = 3; */
        if (message.toImage)
            SendInteractEmojiConfig.internalBinaryWrite(message.toImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EmojiInteractResource
 */
export const EmojiInteractResource = new EmojiInteractResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmojiAvatarResource$Type extends MessageType<EmojiAvatarResource> {
    constructor() {
        super("data.EmojiAvatarResource", [
            { no: 1, name: "action_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EmojiAvatarResource>): EmojiAvatarResource {
        const message = { actionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmojiAvatarResource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmojiAvatarResource): EmojiAvatarResource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 action_id */ 1:
                    message.actionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmojiAvatarResource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 action_id = 1; */
        if (message.actionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.actionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EmojiAvatarResource
 */
export const EmojiAvatarResource = new EmojiAvatarResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmojiTag$Type extends MessageType<EmojiTag> {
    constructor() {
        super("data.EmojiTag", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmojiTag>): EmojiTag {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmojiTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmojiTag): EmojiTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmojiTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EmojiTag
 */
export const EmojiTag = new EmojiTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicAudienceEmoji$Type extends MessageType<LinkmicAudienceEmoji> {
    constructor() {
        super("data.LinkmicAudienceEmoji", [
            { no: 1, name: "emoji_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_random", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "emoji_image", kind: "message", T: () => Image },
            { no: 4, name: "emoji_dynamic_image", kind: "message", T: () => Image },
            { no: 5, name: "emoji_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "animation_duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "emoji_result_duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "permission", kind: "message", T: () => EmojiPermission },
            { no: 10, name: "emoji_sound", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "interact_resource", kind: "message", T: () => EmojiInteractResource },
            { no: 12, name: "category_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "avatar_resource", kind: "message", T: () => EmojiAvatarResource },
            { no: 14, name: "need_reverse", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "emoji_tag", kind: "message", T: () => EmojiTag },
            { no: 16, name: "emoji_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicAudienceEmoji>): LinkmicAudienceEmoji {
        const message = { emojiId: 0n, isRandom: false, emojiName: "", animationDurationMs: 0n, emojiResultDurationMs: 0n, type: 0, emojiSound: "", categoryType: 0, needReverse: false, emojiStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicAudienceEmoji>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicAudienceEmoji): LinkmicAudienceEmoji {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 emoji_id */ 1:
                    message.emojiId = reader.int64().toBigInt();
                    break;
                case /* bool is_random */ 2:
                    message.isRandom = reader.bool();
                    break;
                case /* data.Image emoji_image */ 3:
                    message.emojiImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.emojiImage);
                    break;
                case /* data.Image emoji_dynamic_image */ 4:
                    message.emojiDynamicImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.emojiDynamicImage);
                    break;
                case /* string emoji_name */ 5:
                    message.emojiName = reader.string();
                    break;
                case /* int64 animation_duration_ms */ 6:
                    message.animationDurationMs = reader.int64().toBigInt();
                    break;
                case /* int64 emoji_result_duration_ms */ 7:
                    message.emojiResultDurationMs = reader.int64().toBigInt();
                    break;
                case /* int32 type */ 8:
                    message.type = reader.int32();
                    break;
                case /* data.EmojiPermission permission */ 9:
                    message.permission = EmojiPermission.internalBinaryRead(reader, reader.uint32(), options, message.permission);
                    break;
                case /* string emoji_sound */ 10:
                    message.emojiSound = reader.string();
                    break;
                case /* data.EmojiInteractResource interact_resource */ 11:
                    message.interactResource = EmojiInteractResource.internalBinaryRead(reader, reader.uint32(), options, message.interactResource);
                    break;
                case /* int32 category_type */ 12:
                    message.categoryType = reader.int32();
                    break;
                case /* data.EmojiAvatarResource avatar_resource */ 13:
                    message.avatarResource = EmojiAvatarResource.internalBinaryRead(reader, reader.uint32(), options, message.avatarResource);
                    break;
                case /* bool need_reverse */ 14:
                    message.needReverse = reader.bool();
                    break;
                case /* data.EmojiTag emoji_tag */ 15:
                    message.emojiTag = EmojiTag.internalBinaryRead(reader, reader.uint32(), options, message.emojiTag);
                    break;
                case /* int32 emoji_status */ 16:
                    message.emojiStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicAudienceEmoji, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 emoji_id = 1; */
        if (message.emojiId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.emojiId);
        /* bool is_random = 2; */
        if (message.isRandom !== false)
            writer.tag(2, WireType.Varint).bool(message.isRandom);
        /* data.Image emoji_image = 3; */
        if (message.emojiImage)
            Image.internalBinaryWrite(message.emojiImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image emoji_dynamic_image = 4; */
        if (message.emojiDynamicImage)
            Image.internalBinaryWrite(message.emojiDynamicImage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string emoji_name = 5; */
        if (message.emojiName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.emojiName);
        /* int64 animation_duration_ms = 6; */
        if (message.animationDurationMs !== 0n)
            writer.tag(6, WireType.Varint).int64(message.animationDurationMs);
        /* int64 emoji_result_duration_ms = 7; */
        if (message.emojiResultDurationMs !== 0n)
            writer.tag(7, WireType.Varint).int64(message.emojiResultDurationMs);
        /* int32 type = 8; */
        if (message.type !== 0)
            writer.tag(8, WireType.Varint).int32(message.type);
        /* data.EmojiPermission permission = 9; */
        if (message.permission)
            EmojiPermission.internalBinaryWrite(message.permission, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string emoji_sound = 10; */
        if (message.emojiSound !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.emojiSound);
        /* data.EmojiInteractResource interact_resource = 11; */
        if (message.interactResource)
            EmojiInteractResource.internalBinaryWrite(message.interactResource, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int32 category_type = 12; */
        if (message.categoryType !== 0)
            writer.tag(12, WireType.Varint).int32(message.categoryType);
        /* data.EmojiAvatarResource avatar_resource = 13; */
        if (message.avatarResource)
            EmojiAvatarResource.internalBinaryWrite(message.avatarResource, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bool need_reverse = 14; */
        if (message.needReverse !== false)
            writer.tag(14, WireType.Varint).bool(message.needReverse);
        /* data.EmojiTag emoji_tag = 15; */
        if (message.emojiTag)
            EmojiTag.internalBinaryWrite(message.emojiTag, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* int32 emoji_status = 16; */
        if (message.emojiStatus !== 0)
            writer.tag(16, WireType.Varint).int32(message.emojiStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicAudienceEmoji
 */
export const LinkmicAudienceEmoji = new LinkmicAudienceEmoji$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorLinkmicInfo$Type extends MessageType<AnchorLinkmicInfo> {
    constructor() {
        super("data.AnchorLinkmicInfo", [
            { no: 1, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "use_backup_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorLinkmicInfo>): AnchorLinkmicInfo {
        const message = { rtcExtInfo: "", linkmicIdStr: "", useBackupStream: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorLinkmicInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorLinkmicInfo): AnchorLinkmicInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rtc_ext_info */ 1:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string linkmic_id_str */ 2:
                    message.linkmicIdStr = reader.string();
                    break;
                case /* bool use_backup_stream */ 3:
                    message.useBackupStream = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorLinkmicInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rtc_ext_info = 1; */
        if (message.rtcExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string linkmic_id_str = 2; */
        if (message.linkmicIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.linkmicIdStr);
        /* bool use_backup_stream = 3; */
        if (message.useBackupStream !== false)
            writer.tag(3, WireType.Varint).bool(message.useBackupStream);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnchorLinkmicInfo
 */
export const AnchorLinkmicInfo = new AnchorLinkmicInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicPositionItem$Type extends MessageType<LinkmicPositionItem> {
    constructor() {
        super("data.LinkmicPositionItem", [
            { no: 1, name: "position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "active_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "verify_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "position_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicPositionItem>): LinkmicPositionItem {
        const message = { position: 0n, status: 0, activeName: "", verifyStatus: 0, positionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicPositionItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicPositionItem): LinkmicPositionItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 position */ 1:
                    message.position = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* string active_name */ 3:
                    message.activeName = reader.string();
                    break;
                case /* int32 verify_status */ 4:
                    message.verifyStatus = reader.int32();
                    break;
                case /* int32 position_type */ 5:
                    message.positionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicPositionItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 position = 1; */
        if (message.position !== 0n)
            writer.tag(1, WireType.Varint).int64(message.position);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* string active_name = 3; */
        if (message.activeName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.activeName);
        /* int32 verify_status = 4; */
        if (message.verifyStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.verifyStatus);
        /* int32 position_type = 5; */
        if (message.positionType !== 0)
            writer.tag(5, WireType.Varint).int32(message.positionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicPositionItem
 */
export const LinkmicPositionItem = new LinkmicPositionItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicQuickInteract$Type extends MessageType<LinkmicQuickInteract> {
    constructor() {
        super("data.LinkmicQuickInteract", [
            { no: 1, name: "send_gift_user", kind: "message", T: () => User },
            { no: 2, name: "thanks_carousel_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "thanks_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "receive_gift_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicQuickInteract>): LinkmicQuickInteract {
        const message = { thanksCarouselDuration: 0n, thanksContent: "", receiveGiftUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicQuickInteract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicQuickInteract): LinkmicQuickInteract {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User send_gift_user */ 1:
                    message.sendGiftUser = User.internalBinaryRead(reader, reader.uint32(), options, message.sendGiftUser);
                    break;
                case /* int64 thanks_carousel_duration */ 2:
                    message.thanksCarouselDuration = reader.int64().toBigInt();
                    break;
                case /* string thanks_content */ 3:
                    message.thanksContent = reader.string();
                    break;
                case /* int64 receive_gift_user_id */ 4:
                    message.receiveGiftUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicQuickInteract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User send_gift_user = 1; */
        if (message.sendGiftUser)
            User.internalBinaryWrite(message.sendGiftUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 thanks_carousel_duration = 2; */
        if (message.thanksCarouselDuration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.thanksCarouselDuration);
        /* string thanks_content = 3; */
        if (message.thanksContent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thanksContent);
        /* int64 receive_gift_user_id = 4; */
        if (message.receiveGiftUserId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.receiveGiftUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicQuickInteract
 */
export const LinkmicQuickInteract = new LinkmicQuickInteract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteRoomInfo$Type extends MessageType<InviteRoomInfo> {
    constructor() {
        super("data.InviteRoomInfo", [
            { no: 1, name: "inviter_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "live_room_mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user_count_fuzzy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "score_fuzzy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "room_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "inviter_room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteRoomInfo>): InviteRoomInfo {
        const message = { inviterRoomId: 0n, liveRoomMode: 0n, userCount: 0n, score: 0n, userCountFuzzy: "", scoreFuzzy: "", roomDesc: "", inviterRoomIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InviteRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteRoomInfo): InviteRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 inviter_room_id */ 1:
                    message.inviterRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 live_room_mode */ 2:
                    message.liveRoomMode = reader.int64().toBigInt();
                    break;
                case /* int64 user_count */ 3:
                    message.userCount = reader.int64().toBigInt();
                    break;
                case /* int64 score */ 4:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string user_count_fuzzy */ 5:
                    message.userCountFuzzy = reader.string();
                    break;
                case /* string score_fuzzy */ 6:
                    message.scoreFuzzy = reader.string();
                    break;
                case /* string room_desc */ 7:
                    message.roomDesc = reader.string();
                    break;
                case /* string inviter_room_id_str */ 8:
                    message.inviterRoomIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 inviter_room_id = 1; */
        if (message.inviterRoomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.inviterRoomId);
        /* int64 live_room_mode = 2; */
        if (message.liveRoomMode !== 0n)
            writer.tag(2, WireType.Varint).int64(message.liveRoomMode);
        /* int64 user_count = 3; */
        if (message.userCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userCount);
        /* int64 score = 4; */
        if (message.score !== 0n)
            writer.tag(4, WireType.Varint).int64(message.score);
        /* string user_count_fuzzy = 5; */
        if (message.userCountFuzzy !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userCountFuzzy);
        /* string score_fuzzy = 6; */
        if (message.scoreFuzzy !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.scoreFuzzy);
        /* string room_desc = 7; */
        if (message.roomDesc !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.roomDesc);
        /* string inviter_room_id_str = 8; */
        if (message.inviterRoomIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.inviterRoomIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.InviteRoomInfo
 */
export const InviteRoomInfo = new InviteRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrossRoomLinkReplyGuestInfo$Type extends MessageType<CrossRoomLinkReplyGuestInfo> {
    constructor() {
        super("data.CrossRoomLinkReplyGuestInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_low_client_version", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_selected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_not_support_app", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "user_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CrossRoomLinkReplyGuestInfo>): CrossRoomLinkReplyGuestInfo {
        const message = { userId: 0n, isLowClientVersion: false, isSelected: false, isNotSupportApp: false, userIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrossRoomLinkReplyGuestInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrossRoomLinkReplyGuestInfo): CrossRoomLinkReplyGuestInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* bool is_low_client_version */ 2:
                    message.isLowClientVersion = reader.bool();
                    break;
                case /* bool is_selected */ 3:
                    message.isSelected = reader.bool();
                    break;
                case /* bool is_not_support_app */ 4:
                    message.isNotSupportApp = reader.bool();
                    break;
                case /* string user_id_str */ 5:
                    message.userIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrossRoomLinkReplyGuestInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* bool is_low_client_version = 2; */
        if (message.isLowClientVersion !== false)
            writer.tag(2, WireType.Varint).bool(message.isLowClientVersion);
        /* bool is_selected = 3; */
        if (message.isSelected !== false)
            writer.tag(3, WireType.Varint).bool(message.isSelected);
        /* bool is_not_support_app = 4; */
        if (message.isNotSupportApp !== false)
            writer.tag(4, WireType.Varint).bool(message.isNotSupportApp);
        /* string user_id_str = 5; */
        if (message.userIdStr !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CrossRoomLinkReplyGuestInfo
 */
export const CrossRoomLinkReplyGuestInfo = new CrossRoomLinkReplyGuestInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserHighScoreSongTag$Type extends MessageType<UserHighScoreSongTag> {
    constructor() {
        super("data.UserHighScoreSongTag", [
            { no: 1, name: "high_score_song_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_color", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserHighScoreSongTag>): UserHighScoreSongTag {
        const message = { highScoreSongCount: "", icon: "", bgColor: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserHighScoreSongTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserHighScoreSongTag): UserHighScoreSongTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string high_score_song_count */ 1:
                    message.highScoreSongCount = reader.string();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                case /* repeated string bg_color */ 3:
                    message.bgColor.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserHighScoreSongTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string high_score_song_count = 1; */
        if (message.highScoreSongCount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.highScoreSongCount);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        /* repeated string bg_color = 3; */
        for (let i = 0; i < message.bgColor.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.bgColor[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.UserHighScoreSongTag
 */
export const UserHighScoreSongTag = new UserHighScoreSongTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvSongStruct$Type extends MessageType<KtvSongStruct> {
    constructor() {
        super("data.KtvSongStruct", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "lyric_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "song_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "lyric_url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "song_pattern", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "preview_start_time", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "full_track", kind: "message", T: () => KtvSongStruct_AudioInfo },
            { no: 12, name: "accompaniment_track", kind: "message", T: () => KtvSongStruct_AudioInfo },
            { no: 13, name: "new_cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "midi_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "is_favorite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "order_info", kind: "message", T: () => KtvSongStruct_OrderInfo },
            { no: 17, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "music_climax", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MusicInterval },
            { no: 20, name: "preludes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MusicInterval },
            { no: 21, name: "interludes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MusicInterval },
            { no: 22, name: "segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MusicInterval },
            { no: 23, name: "pattern_file_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "bridge_segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MusicInterval },
            { no: 25, name: "main_segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MusicInterval },
            { no: 26, name: "finale_segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MusicInterval },
            { no: 27, name: "chorus_info", kind: "message", T: () => ChorusVideoInfo },
            { no: 28, name: "song_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 29, name: "add_song_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "total_order_with_cur_anchor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 31, name: "global_total_order", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 32, name: "artist_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 34, name: "song_copyright", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 35, name: "is_prior_song", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 36, name: "is_fragment_song", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 37, name: "fragment_lyric", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 38, name: "personal_song_info", kind: "message", T: () => KtvSongStruct_PersonalSongInfo },
            { no: 39, name: "lyric_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 40, name: "midi_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "want_listen_info", kind: "message", T: () => KtvSongStruct_WantListenInfo },
            { no: 42, name: "challenge_info", kind: "message", T: () => KtvSongStruct_ChallengeInfo }
        ]);
    }
    create(value?: PartialMessage<KtvSongStruct>): KtvSongStruct {
        const message = { id: 0n, title: "", author: "", lyricType: 0n, songUrl: "", lyricUrlList: [], duration: 0n, coverUrl: "", songPattern: 0n, previewStartTime: 0, newCoverUrl: "", midiUrl: "", isFavorite: false, tags: [], musicClimax: [], preludes: [], interludes: [], segments: [], patternFileUrl: "", bridgeSegments: [], mainSegments: [], finaleSegments: [], songType: 0, addSongSource: "", totalOrderWithCurAnchor: 0n, globalTotalOrder: 0n, artistIds: [], idStr: "", songCopyright: [], isPriorSong: false, isFragmentSong: false, fragmentLyric: "", lyricHash: "", midiHash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvSongStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvSongStruct): KtvSongStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string author */ 3:
                    message.author = reader.string();
                    break;
                case /* int64 lyric_type */ 4:
                    message.lyricType = reader.int64().toBigInt();
                    break;
                case /* string song_url */ 5:
                    message.songUrl = reader.string();
                    break;
                case /* repeated string lyric_url_list */ 6:
                    message.lyricUrlList.push(reader.string());
                    break;
                case /* int64 duration */ 7:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string cover_url */ 8:
                    message.coverUrl = reader.string();
                    break;
                case /* int64 song_pattern */ 9:
                    message.songPattern = reader.int64().toBigInt();
                    break;
                case /* double preview_start_time */ 10:
                    message.previewStartTime = reader.double();
                    break;
                case /* data.KtvSongStruct.AudioInfo full_track */ 11:
                    message.fullTrack = KtvSongStruct_AudioInfo.internalBinaryRead(reader, reader.uint32(), options, message.fullTrack);
                    break;
                case /* data.KtvSongStruct.AudioInfo accompaniment_track */ 12:
                    message.accompanimentTrack = KtvSongStruct_AudioInfo.internalBinaryRead(reader, reader.uint32(), options, message.accompanimentTrack);
                    break;
                case /* string new_cover_url */ 13:
                    message.newCoverUrl = reader.string();
                    break;
                case /* string midi_url */ 14:
                    message.midiUrl = reader.string();
                    break;
                case /* bool is_favorite */ 15:
                    message.isFavorite = reader.bool();
                    break;
                case /* data.KtvSongStruct.OrderInfo order_info */ 16:
                    message.orderInfo = KtvSongStruct_OrderInfo.internalBinaryRead(reader, reader.uint32(), options, message.orderInfo);
                    break;
                case /* repeated string tags */ 17:
                    message.tags.push(reader.string());
                    break;
                case /* repeated data.MusicInterval music_climax */ 19:
                    message.musicClimax.push(MusicInterval.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.MusicInterval preludes */ 20:
                    message.preludes.push(MusicInterval.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.MusicInterval interludes */ 21:
                    message.interludes.push(MusicInterval.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.MusicInterval segments */ 22:
                    message.segments.push(MusicInterval.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string pattern_file_url */ 23:
                    message.patternFileUrl = reader.string();
                    break;
                case /* repeated data.MusicInterval bridge_segments */ 24:
                    message.bridgeSegments.push(MusicInterval.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.MusicInterval main_segments */ 25:
                    message.mainSegments.push(MusicInterval.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.MusicInterval finale_segments */ 26:
                    message.finaleSegments.push(MusicInterval.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.ChorusVideoInfo chorus_info */ 27:
                    message.chorusInfo = ChorusVideoInfo.internalBinaryRead(reader, reader.uint32(), options, message.chorusInfo);
                    break;
                case /* int32 song_type */ 28:
                    message.songType = reader.int32();
                    break;
                case /* string add_song_source */ 29:
                    message.addSongSource = reader.string();
                    break;
                case /* int64 total_order_with_cur_anchor */ 30:
                    message.totalOrderWithCurAnchor = reader.int64().toBigInt();
                    break;
                case /* int64 global_total_order */ 31:
                    message.globalTotalOrder = reader.int64().toBigInt();
                    break;
                case /* repeated int64 artist_ids */ 32:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.artistIds.push(reader.int64().toBigInt());
                    else
                        message.artistIds.push(reader.int64().toBigInt());
                    break;
                case /* string id_str */ 33:
                    message.idStr = reader.string();
                    break;
                case /* repeated int32 song_copyright */ 34:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.songCopyright.push(reader.int32());
                    else
                        message.songCopyright.push(reader.int32());
                    break;
                case /* bool is_prior_song */ 35:
                    message.isPriorSong = reader.bool();
                    break;
                case /* bool is_fragment_song */ 36:
                    message.isFragmentSong = reader.bool();
                    break;
                case /* string fragment_lyric */ 37:
                    message.fragmentLyric = reader.string();
                    break;
                case /* data.KtvSongStruct.PersonalSongInfo personal_song_info */ 38:
                    message.personalSongInfo = KtvSongStruct_PersonalSongInfo.internalBinaryRead(reader, reader.uint32(), options, message.personalSongInfo);
                    break;
                case /* string lyric_hash */ 39:
                    message.lyricHash = reader.string();
                    break;
                case /* string midi_hash */ 40:
                    message.midiHash = reader.string();
                    break;
                case /* data.KtvSongStruct.WantListenInfo want_listen_info */ 41:
                    message.wantListenInfo = KtvSongStruct_WantListenInfo.internalBinaryRead(reader, reader.uint32(), options, message.wantListenInfo);
                    break;
                case /* data.KtvSongStruct.ChallengeInfo challenge_info */ 42:
                    message.challengeInfo = KtvSongStruct_ChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, message.challengeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvSongStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string author = 3; */
        if (message.author !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.author);
        /* int64 lyric_type = 4; */
        if (message.lyricType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.lyricType);
        /* string song_url = 5; */
        if (message.songUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.songUrl);
        /* repeated string lyric_url_list = 6; */
        for (let i = 0; i < message.lyricUrlList.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.lyricUrlList[i]);
        /* int64 duration = 7; */
        if (message.duration !== 0n)
            writer.tag(7, WireType.Varint).int64(message.duration);
        /* string cover_url = 8; */
        if (message.coverUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.coverUrl);
        /* int64 song_pattern = 9; */
        if (message.songPattern !== 0n)
            writer.tag(9, WireType.Varint).int64(message.songPattern);
        /* double preview_start_time = 10; */
        if (message.previewStartTime !== 0)
            writer.tag(10, WireType.Bit64).double(message.previewStartTime);
        /* data.KtvSongStruct.AudioInfo full_track = 11; */
        if (message.fullTrack)
            KtvSongStruct_AudioInfo.internalBinaryWrite(message.fullTrack, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.KtvSongStruct.AudioInfo accompaniment_track = 12; */
        if (message.accompanimentTrack)
            KtvSongStruct_AudioInfo.internalBinaryWrite(message.accompanimentTrack, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string new_cover_url = 13; */
        if (message.newCoverUrl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.newCoverUrl);
        /* string midi_url = 14; */
        if (message.midiUrl !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.midiUrl);
        /* bool is_favorite = 15; */
        if (message.isFavorite !== false)
            writer.tag(15, WireType.Varint).bool(message.isFavorite);
        /* data.KtvSongStruct.OrderInfo order_info = 16; */
        if (message.orderInfo)
            KtvSongStruct_OrderInfo.internalBinaryWrite(message.orderInfo, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* repeated string tags = 17; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(17, WireType.LengthDelimited).string(message.tags[i]);
        /* repeated data.MusicInterval music_climax = 19; */
        for (let i = 0; i < message.musicClimax.length; i++)
            MusicInterval.internalBinaryWrite(message.musicClimax[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.MusicInterval preludes = 20; */
        for (let i = 0; i < message.preludes.length; i++)
            MusicInterval.internalBinaryWrite(message.preludes[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.MusicInterval interludes = 21; */
        for (let i = 0; i < message.interludes.length; i++)
            MusicInterval.internalBinaryWrite(message.interludes[i], writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.MusicInterval segments = 22; */
        for (let i = 0; i < message.segments.length; i++)
            MusicInterval.internalBinaryWrite(message.segments[i], writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* string pattern_file_url = 23; */
        if (message.patternFileUrl !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.patternFileUrl);
        /* repeated data.MusicInterval bridge_segments = 24; */
        for (let i = 0; i < message.bridgeSegments.length; i++)
            MusicInterval.internalBinaryWrite(message.bridgeSegments[i], writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.MusicInterval main_segments = 25; */
        for (let i = 0; i < message.mainSegments.length; i++)
            MusicInterval.internalBinaryWrite(message.mainSegments[i], writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.MusicInterval finale_segments = 26; */
        for (let i = 0; i < message.finaleSegments.length; i++)
            MusicInterval.internalBinaryWrite(message.finaleSegments[i], writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* data.ChorusVideoInfo chorus_info = 27; */
        if (message.chorusInfo)
            ChorusVideoInfo.internalBinaryWrite(message.chorusInfo, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* int32 song_type = 28; */
        if (message.songType !== 0)
            writer.tag(28, WireType.Varint).int32(message.songType);
        /* string add_song_source = 29; */
        if (message.addSongSource !== "")
            writer.tag(29, WireType.LengthDelimited).string(message.addSongSource);
        /* int64 total_order_with_cur_anchor = 30; */
        if (message.totalOrderWithCurAnchor !== 0n)
            writer.tag(30, WireType.Varint).int64(message.totalOrderWithCurAnchor);
        /* int64 global_total_order = 31; */
        if (message.globalTotalOrder !== 0n)
            writer.tag(31, WireType.Varint).int64(message.globalTotalOrder);
        /* repeated int64 artist_ids = 32; */
        if (message.artistIds.length) {
            writer.tag(32, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.artistIds.length; i++)
                writer.int64(message.artistIds[i]);
            writer.join();
        }
        /* string id_str = 33; */
        if (message.idStr !== "")
            writer.tag(33, WireType.LengthDelimited).string(message.idStr);
        /* repeated int32 song_copyright = 34; */
        if (message.songCopyright.length) {
            writer.tag(34, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.songCopyright.length; i++)
                writer.int32(message.songCopyright[i]);
            writer.join();
        }
        /* bool is_prior_song = 35; */
        if (message.isPriorSong !== false)
            writer.tag(35, WireType.Varint).bool(message.isPriorSong);
        /* bool is_fragment_song = 36; */
        if (message.isFragmentSong !== false)
            writer.tag(36, WireType.Varint).bool(message.isFragmentSong);
        /* string fragment_lyric = 37; */
        if (message.fragmentLyric !== "")
            writer.tag(37, WireType.LengthDelimited).string(message.fragmentLyric);
        /* data.KtvSongStruct.PersonalSongInfo personal_song_info = 38; */
        if (message.personalSongInfo)
            KtvSongStruct_PersonalSongInfo.internalBinaryWrite(message.personalSongInfo, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* string lyric_hash = 39; */
        if (message.lyricHash !== "")
            writer.tag(39, WireType.LengthDelimited).string(message.lyricHash);
        /* string midi_hash = 40; */
        if (message.midiHash !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.midiHash);
        /* data.KtvSongStruct.WantListenInfo want_listen_info = 41; */
        if (message.wantListenInfo)
            KtvSongStruct_WantListenInfo.internalBinaryWrite(message.wantListenInfo, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* data.KtvSongStruct.ChallengeInfo challenge_info = 42; */
        if (message.challengeInfo)
            KtvSongStruct_ChallengeInfo.internalBinaryWrite(message.challengeInfo, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvSongStruct
 */
export const KtvSongStruct = new KtvSongStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvSongStruct_AudioInfo$Type extends MessageType<KtvSongStruct_AudioInfo> {
    constructor() {
        super("data.KtvSongStruct.AudioInfo", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "song_patten", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "audio_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "volume_lufs", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "volume_peak", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "bpm", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "beats_point_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "file_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KtvSongStruct_AudioInfo>): KtvSongStruct_AudioInfo {
        const message = { url: "", songPatten: 0n, audioId: 0n, volumeLufs: 0, volumePeak: 0, bpm: 0, beatsPointUrl: "", createTime: 0n, fileHash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvSongStruct_AudioInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvSongStruct_AudioInfo): KtvSongStruct_AudioInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* int64 song_patten */ 2:
                    message.songPatten = reader.int64().toBigInt();
                    break;
                case /* int64 audio_id */ 3:
                    message.audioId = reader.int64().toBigInt();
                    break;
                case /* double volume_lufs */ 4:
                    message.volumeLufs = reader.double();
                    break;
                case /* double volume_peak */ 5:
                    message.volumePeak = reader.double();
                    break;
                case /* double bpm */ 6:
                    message.bpm = reader.double();
                    break;
                case /* string beats_point_url */ 7:
                    message.beatsPointUrl = reader.string();
                    break;
                case /* int64 create_time */ 8:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* string file_hash */ 9:
                    message.fileHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvSongStruct_AudioInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* int64 song_patten = 2; */
        if (message.songPatten !== 0n)
            writer.tag(2, WireType.Varint).int64(message.songPatten);
        /* int64 audio_id = 3; */
        if (message.audioId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.audioId);
        /* double volume_lufs = 4; */
        if (message.volumeLufs !== 0)
            writer.tag(4, WireType.Bit64).double(message.volumeLufs);
        /* double volume_peak = 5; */
        if (message.volumePeak !== 0)
            writer.tag(5, WireType.Bit64).double(message.volumePeak);
        /* double bpm = 6; */
        if (message.bpm !== 0)
            writer.tag(6, WireType.Bit64).double(message.bpm);
        /* string beats_point_url = 7; */
        if (message.beatsPointUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.beatsPointUrl);
        /* int64 create_time = 8; */
        if (message.createTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.createTime);
        /* string file_hash = 9; */
        if (message.fileHash !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.fileHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvSongStruct.AudioInfo
 */
export const KtvSongStruct_AudioInfo = new KtvSongStruct_AudioInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvSongStruct_UserInfo$Type extends MessageType<KtvSongStruct_UserInfo> {
    constructor() {
        super("data.KtvSongStruct.UserInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "message", T: () => Image },
            { no: 4, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "high_score_song_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ktv_stage_mic_pos_tag_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ktv_lyric_text", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "ktv_component_lyric_text_first_line", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "ktv_component_lyric_text_second_line", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "high_score_song_tag", kind: "message", T: () => UserHighScoreSongTag },
            { no: 11, name: "hit_midi_record_ab", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "user_midi_score", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "is_high_score_song", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<KtvSongStruct_UserInfo>): KtvSongStruct_UserInfo {
        const message = { id: 0n, nickname: "", idStr: "", highScoreSongCount: "", ktvStageMicPosTagText: "", ktvLyricText: 0, ktvComponentLyricTextFirstLine: "", ktvComponentLyricTextSecondLine: 0, hitMidiRecordAb: 0n, userMidiScore: 0, isHighScoreSong: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvSongStruct_UserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvSongStruct_UserInfo): KtvSongStruct_UserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* data.Image avatar */ 3:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                case /* string id_str */ 4:
                    message.idStr = reader.string();
                    break;
                case /* string high_score_song_count */ 5:
                    message.highScoreSongCount = reader.string();
                    break;
                case /* string ktv_stage_mic_pos_tag_text */ 6:
                    message.ktvStageMicPosTagText = reader.string();
                    break;
                case /* int32 ktv_lyric_text */ 7:
                    message.ktvLyricText = reader.int32();
                    break;
                case /* string ktv_component_lyric_text_first_line */ 8:
                    message.ktvComponentLyricTextFirstLine = reader.string();
                    break;
                case /* int32 ktv_component_lyric_text_second_line */ 9:
                    message.ktvComponentLyricTextSecondLine = reader.int32();
                    break;
                case /* data.UserHighScoreSongTag high_score_song_tag */ 10:
                    message.highScoreSongTag = UserHighScoreSongTag.internalBinaryRead(reader, reader.uint32(), options, message.highScoreSongTag);
                    break;
                case /* int64 hit_midi_record_ab */ 11:
                    message.hitMidiRecordAb = reader.int64().toBigInt();
                    break;
                case /* double user_midi_score */ 12:
                    message.userMidiScore = reader.double();
                    break;
                case /* bool is_high_score_song */ 13:
                    message.isHighScoreSong = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvSongStruct_UserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* data.Image avatar = 3; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string id_str = 4; */
        if (message.idStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.idStr);
        /* string high_score_song_count = 5; */
        if (message.highScoreSongCount !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.highScoreSongCount);
        /* string ktv_stage_mic_pos_tag_text = 6; */
        if (message.ktvStageMicPosTagText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.ktvStageMicPosTagText);
        /* int32 ktv_lyric_text = 7; */
        if (message.ktvLyricText !== 0)
            writer.tag(7, WireType.Varint).int32(message.ktvLyricText);
        /* string ktv_component_lyric_text_first_line = 8; */
        if (message.ktvComponentLyricTextFirstLine !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.ktvComponentLyricTextFirstLine);
        /* int32 ktv_component_lyric_text_second_line = 9; */
        if (message.ktvComponentLyricTextSecondLine !== 0)
            writer.tag(9, WireType.Varint).int32(message.ktvComponentLyricTextSecondLine);
        /* data.UserHighScoreSongTag high_score_song_tag = 10; */
        if (message.highScoreSongTag)
            UserHighScoreSongTag.internalBinaryWrite(message.highScoreSongTag, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int64 hit_midi_record_ab = 11; */
        if (message.hitMidiRecordAb !== 0n)
            writer.tag(11, WireType.Varint).int64(message.hitMidiRecordAb);
        /* double user_midi_score = 12; */
        if (message.userMidiScore !== 0)
            writer.tag(12, WireType.Bit64).double(message.userMidiScore);
        /* bool is_high_score_song = 13; */
        if (message.isHighScoreSong !== false)
            writer.tag(13, WireType.Varint).bool(message.isHighScoreSong);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvSongStruct.UserInfo
 */
export const KtvSongStruct_UserInfo = new KtvSongStruct_UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvSongStruct_OrderInfo$Type extends MessageType<KtvSongStruct_OrderInfo> {
    constructor() {
        super("data.KtvSongStruct.OrderInfo", [
            { no: 1, name: "top_user", kind: "message", T: () => KtvSongStruct_UserInfo },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "order_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "has_added", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<KtvSongStruct_OrderInfo>): KtvSongStruct_OrderInfo {
        const message = { score: 0n, orderCount: 0n, hasAdded: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvSongStruct_OrderInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvSongStruct_OrderInfo): KtvSongStruct_OrderInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.KtvSongStruct.UserInfo top_user */ 1:
                    message.topUser = KtvSongStruct_UserInfo.internalBinaryRead(reader, reader.uint32(), options, message.topUser);
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 order_count */ 3:
                    message.orderCount = reader.int64().toBigInt();
                    break;
                case /* bool has_added */ 4:
                    message.hasAdded = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvSongStruct_OrderInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.KtvSongStruct.UserInfo top_user = 1; */
        if (message.topUser)
            KtvSongStruct_UserInfo.internalBinaryWrite(message.topUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* int64 order_count = 3; */
        if (message.orderCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.orderCount);
        /* bool has_added = 4; */
        if (message.hasAdded !== false)
            writer.tag(4, WireType.Varint).bool(message.hasAdded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvSongStruct.OrderInfo
 */
export const KtvSongStruct_OrderInfo = new KtvSongStruct_OrderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvSongStruct_PersonalSongInfo$Type extends MessageType<KtvSongStruct_PersonalSongInfo> {
    constructor() {
        super("data.KtvSongStruct.PersonalSongInfo", [
            { no: 1, name: "user_midi_score", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "is_high_score_song", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<KtvSongStruct_PersonalSongInfo>): KtvSongStruct_PersonalSongInfo {
        const message = { userMidiScore: 0, isHighScoreSong: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvSongStruct_PersonalSongInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvSongStruct_PersonalSongInfo): KtvSongStruct_PersonalSongInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double user_midi_score */ 1:
                    message.userMidiScore = reader.double();
                    break;
                case /* bool is_high_score_song */ 2:
                    message.isHighScoreSong = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvSongStruct_PersonalSongInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double user_midi_score = 1; */
        if (message.userMidiScore !== 0)
            writer.tag(1, WireType.Bit64).double(message.userMidiScore);
        /* bool is_high_score_song = 2; */
        if (message.isHighScoreSong !== false)
            writer.tag(2, WireType.Varint).bool(message.isHighScoreSong);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvSongStruct.PersonalSongInfo
 */
export const KtvSongStruct_PersonalSongInfo = new KtvSongStruct_PersonalSongInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvSongStruct_WantListenInfo$Type extends MessageType<KtvSongStruct_WantListenInfo> {
    constructor() {
        super("data.KtvSongStruct.WantListenInfo", [
            { no: 1, name: "want_listen_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KtvSongStruct_WantListenInfo>): KtvSongStruct_WantListenInfo {
        const message = { wantListenCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvSongStruct_WantListenInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvSongStruct_WantListenInfo): KtvSongStruct_WantListenInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 want_listen_count */ 1:
                    message.wantListenCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvSongStruct_WantListenInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 want_listen_count = 1; */
        if (message.wantListenCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.wantListenCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvSongStruct.WantListenInfo
 */
export const KtvSongStruct_WantListenInfo = new KtvSongStruct_WantListenInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvSongStruct_ChallengeInfo$Type extends MessageType<KtvSongStruct_ChallengeInfo> {
    constructor() {
        super("data.KtvSongStruct.ChallengeInfo", [
            { no: 1, name: "ktv_challenge_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "score", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<KtvSongStruct_ChallengeInfo>): KtvSongStruct_ChallengeInfo {
        const message = { ktvChallengeType: 0, isSuccess: false, score: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvSongStruct_ChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvSongStruct_ChallengeInfo): KtvSongStruct_ChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 ktv_challenge_type */ 1:
                    message.ktvChallengeType = reader.int32();
                    break;
                case /* bool is_success */ 2:
                    message.isSuccess = reader.bool();
                    break;
                case /* double score */ 3:
                    message.score = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvSongStruct_ChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 ktv_challenge_type = 1; */
        if (message.ktvChallengeType !== 0)
            writer.tag(1, WireType.Varint).int32(message.ktvChallengeType);
        /* bool is_success = 2; */
        if (message.isSuccess !== false)
            writer.tag(2, WireType.Varint).bool(message.isSuccess);
        /* double score = 3; */
        if (message.score !== 0)
            writer.tag(3, WireType.Bit64).double(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvSongStruct.ChallengeInfo
 */
export const KtvSongStruct_ChallengeInfo = new KtvSongStruct_ChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicInterval$Type extends MessageType<MusicInterval> {
    constructor() {
        super("data.MusicInterval", [
            { no: 1, name: "StartTimeMillisecond", kind: "scalar", jsonName: "StartTimeMillisecond", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "DurationMillisecond", kind: "scalar", jsonName: "DurationMillisecond", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MusicInterval>): MusicInterval {
        const message = { startTimeMillisecond: 0n, durationMillisecond: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicInterval>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicInterval): MusicInterval {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 StartTimeMillisecond = 1 [json_name = "StartTimeMillisecond"];*/ 1:
                    message.startTimeMillisecond = reader.int64().toBigInt();
                    break;
                case /* int64 DurationMillisecond = 2 [json_name = "DurationMillisecond"];*/ 2:
                    message.durationMillisecond = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicInterval, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 StartTimeMillisecond = 1 [json_name = "StartTimeMillisecond"]; */
        if (message.startTimeMillisecond !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startTimeMillisecond);
        /* int64 DurationMillisecond = 2 [json_name = "DurationMillisecond"]; */
        if (message.durationMillisecond !== 0n)
            writer.tag(2, WireType.Varint).int64(message.durationMillisecond);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MusicInterval
 */
export const MusicInterval = new MusicInterval$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChorusVideoInfo$Type extends MessageType<ChorusVideoInfo> {
    constructor() {
        super("data.ChorusVideoInfo", [
            { no: 1, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "item_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "author_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "author_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "use_times", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<ChorusVideoInfo>): ChorusVideoInfo {
        const message = { itemId: 0n, itemDescription: "", itemUrl: "", authorId: 0n, authorName: "", useTimes: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChorusVideoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChorusVideoInfo): ChorusVideoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 item_id */ 1:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* string item_description */ 2:
                    message.itemDescription = reader.string();
                    break;
                case /* string item_url */ 3:
                    message.itemUrl = reader.string();
                    break;
                case /* int64 author_id */ 4:
                    message.authorId = reader.int64().toBigInt();
                    break;
                case /* string author_name */ 5:
                    message.authorName = reader.string();
                    break;
                case /* int64 use_times */ 6:
                    message.useTimes = reader.int64().toBigInt();
                    break;
                case /* data.Image image */ 7:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChorusVideoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 item_id = 1; */
        if (message.itemId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.itemId);
        /* string item_description = 2; */
        if (message.itemDescription !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemDescription);
        /* string item_url = 3; */
        if (message.itemUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemUrl);
        /* int64 author_id = 4; */
        if (message.authorId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.authorId);
        /* string author_name = 5; */
        if (message.authorName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.authorName);
        /* int64 use_times = 6; */
        if (message.useTimes !== 0n)
            writer.tag(6, WireType.Varint).int64(message.useTimes);
        /* data.Image image = 7; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChorusVideoInfo
 */
export const ChorusVideoInfo = new ChorusVideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvAtmosphereVideoFrameColorData$Type extends MessageType<KtvAtmosphereVideoFrameColorData> {
    constructor() {
        super("data.KtvAtmosphereVideoFrameColorData", [
            { no: 1, name: "main", kind: "message", T: () => KtvAtmosphereVideoFrameColorData_Color },
            { no: 2, name: "secondary", kind: "message", T: () => KtvAtmosphereVideoFrameColorData_Color }
        ]);
    }
    create(value?: PartialMessage<KtvAtmosphereVideoFrameColorData>): KtvAtmosphereVideoFrameColorData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvAtmosphereVideoFrameColorData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvAtmosphereVideoFrameColorData): KtvAtmosphereVideoFrameColorData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.KtvAtmosphereVideoFrameColorData.Color main */ 1:
                    message.main = KtvAtmosphereVideoFrameColorData_Color.internalBinaryRead(reader, reader.uint32(), options, message.main);
                    break;
                case /* data.KtvAtmosphereVideoFrameColorData.Color secondary */ 2:
                    message.secondary = KtvAtmosphereVideoFrameColorData_Color.internalBinaryRead(reader, reader.uint32(), options, message.secondary);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvAtmosphereVideoFrameColorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.KtvAtmosphereVideoFrameColorData.Color main = 1; */
        if (message.main)
            KtvAtmosphereVideoFrameColorData_Color.internalBinaryWrite(message.main, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.KtvAtmosphereVideoFrameColorData.Color secondary = 2; */
        if (message.secondary)
            KtvAtmosphereVideoFrameColorData_Color.internalBinaryWrite(message.secondary, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvAtmosphereVideoFrameColorData
 */
export const KtvAtmosphereVideoFrameColorData = new KtvAtmosphereVideoFrameColorData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvAtmosphereVideoFrameColorData_Color$Type extends MessageType<KtvAtmosphereVideoFrameColorData_Color> {
    constructor() {
        super("data.KtvAtmosphereVideoFrameColorData.Color", [
            { no: 1, name: "red", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "green", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "blue", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<KtvAtmosphereVideoFrameColorData_Color>): KtvAtmosphereVideoFrameColorData_Color {
        const message = { red: 0, green: 0, blue: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvAtmosphereVideoFrameColorData_Color>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvAtmosphereVideoFrameColorData_Color): KtvAtmosphereVideoFrameColorData_Color {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 red */ 1:
                    message.red = reader.int32();
                    break;
                case /* int32 green */ 2:
                    message.green = reader.int32();
                    break;
                case /* int32 blue */ 3:
                    message.blue = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvAtmosphereVideoFrameColorData_Color, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 red = 1; */
        if (message.red !== 0)
            writer.tag(1, WireType.Varint).int32(message.red);
        /* int32 green = 2; */
        if (message.green !== 0)
            writer.tag(2, WireType.Varint).int32(message.green);
        /* int32 blue = 3; */
        if (message.blue !== 0)
            writer.tag(3, WireType.Varint).int32(message.blue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvAtmosphereVideoFrameColorData.Color
 */
export const KtvAtmosphereVideoFrameColorData_Color = new KtvAtmosphereVideoFrameColorData_Color$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvAtmosphereVideoInfo$Type extends MessageType<KtvAtmosphereVideoInfo> {
    constructor() {
        super("data.KtvAtmosphereVideoInfo", [
            { no: 1, name: "vid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "play_auth_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "video_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "frame_color_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KtvAtmosphereVideoFrameColorData },
            { no: 5, name: "video_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KtvAtmosphereVideoInfo>): KtvAtmosphereVideoInfo {
        const message = { vid: "", playAuthToken: "", videoType: 0, frameColorData: [], videoUrl: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvAtmosphereVideoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvAtmosphereVideoInfo): KtvAtmosphereVideoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string vid */ 1:
                    message.vid = reader.string();
                    break;
                case /* string play_auth_token */ 2:
                    message.playAuthToken = reader.string();
                    break;
                case /* int32 video_type */ 3:
                    message.videoType = reader.int32();
                    break;
                case /* repeated data.KtvAtmosphereVideoFrameColorData frame_color_data */ 4:
                    message.frameColorData.push(KtvAtmosphereVideoFrameColorData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string video_url */ 5:
                    message.videoUrl.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvAtmosphereVideoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string vid = 1; */
        if (message.vid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.vid);
        /* string play_auth_token = 2; */
        if (message.playAuthToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playAuthToken);
        /* int32 video_type = 3; */
        if (message.videoType !== 0)
            writer.tag(3, WireType.Varint).int32(message.videoType);
        /* repeated data.KtvAtmosphereVideoFrameColorData frame_color_data = 4; */
        for (let i = 0; i < message.frameColorData.length; i++)
            KtvAtmosphereVideoFrameColorData.internalBinaryWrite(message.frameColorData[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string video_url = 5; */
        for (let i = 0; i < message.videoUrl.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.videoUrl[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KtvAtmosphereVideoInfo
 */
export const KtvAtmosphereVideoInfo = new KtvAtmosphereVideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightContributors$Type extends MessageType<LinkmicTeamfightContributors> {
    constructor() {
        super("data.LinkmicTeamfightContributors", [
            { no: 1, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightContributors>): LinkmicTeamfightContributors {
        const message = { userIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightContributors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightContributors): LinkmicTeamfightContributors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 user_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int64().toBigInt());
                    else
                        message.userIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightContributors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 user_ids = 1; */
        if (message.userIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int64(message.userIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicTeamfightContributors
 */
export const LinkmicTeamfightContributors = new LinkmicTeamfightContributors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightPlayer$Type extends MessageType<LinkmicTeamfightPlayer> {
    constructor() {
        super("data.LinkmicTeamfightPlayer", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "score_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "score_fuzzy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "contributors", kind: "message", T: () => LinkmicTeamfightContributors },
            { no: 6, name: "role", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightPlayer>): LinkmicTeamfightPlayer {
        const message = { userId: 0n, score: 0n, scoreStr: "", scoreFuzzy: "", role: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightPlayer): LinkmicTeamfightPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string score_str */ 3:
                    message.scoreStr = reader.string();
                    break;
                case /* string score_fuzzy */ 4:
                    message.scoreFuzzy = reader.string();
                    break;
                case /* data.LinkmicTeamfightContributors contributors */ 5:
                    message.contributors = LinkmicTeamfightContributors.internalBinaryRead(reader, reader.uint32(), options, message.contributors);
                    break;
                case /* int32 role */ 6:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* string score_str = 3; */
        if (message.scoreStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.scoreStr);
        /* string score_fuzzy = 4; */
        if (message.scoreFuzzy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.scoreFuzzy);
        /* data.LinkmicTeamfightContributors contributors = 5; */
        if (message.contributors)
            LinkmicTeamfightContributors.internalBinaryWrite(message.contributors, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 role = 6; */
        if (message.role !== 0)
            writer.tag(6, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicTeamfightPlayer
 */
export const LinkmicTeamfightPlayer = new LinkmicTeamfightPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightBonusInfo$Type extends MessageType<LinkmicTeamfightBonusInfo> {
    constructor() {
        super("data.LinkmicTeamfightBonusInfo", [
            { no: 1, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "coefficient", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightBonusInfo>): LinkmicTeamfightBonusInfo {
        const message = { startTime: 0n, duration: 0n, coefficient: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightBonusInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightBonusInfo): LinkmicTeamfightBonusInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_time */ 1:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* double coefficient */ 3:
                    message.coefficient = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightBonusInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_time = 1; */
        if (message.startTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startTime);
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* double coefficient = 3; */
        if (message.coefficient !== 0)
            writer.tag(3, WireType.Bit64).double(message.coefficient);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicTeamfightBonusInfo
 */
export const LinkmicTeamfightBonusInfo = new LinkmicTeamfightBonusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightTeamInfo$Type extends MessageType<LinkmicTeamfightTeamInfo> {
    constructor() {
        super("data.LinkmicTeamfightTeamInfo", [
            { no: 1, name: "team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "score_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "score_fuzzy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "contributors", kind: "message", T: () => LinkmicTeamfightContributors },
            { no: 6, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicTeamfightPlayer },
            { no: 7, name: "is_score_fuzzy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "owner_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "team_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "bonus_info", kind: "message", T: () => LinkmicTeamfightBonusInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightTeamInfo>): LinkmicTeamfightTeamInfo {
        const message = { teamId: 0n, score: 0n, scoreStr: "", scoreFuzzy: "", players: [], isScoreFuzzy: false, ownerId: 0n, teamIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightTeamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightTeamInfo): LinkmicTeamfightTeamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 team_id */ 1:
                    message.teamId = reader.int64().toBigInt();
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string score_str */ 3:
                    message.scoreStr = reader.string();
                    break;
                case /* string score_fuzzy */ 4:
                    message.scoreFuzzy = reader.string();
                    break;
                case /* data.LinkmicTeamfightContributors contributors */ 5:
                    message.contributors = LinkmicTeamfightContributors.internalBinaryRead(reader, reader.uint32(), options, message.contributors);
                    break;
                case /* repeated data.LinkmicTeamfightPlayer players */ 6:
                    message.players.push(LinkmicTeamfightPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_score_fuzzy */ 7:
                    message.isScoreFuzzy = reader.bool();
                    break;
                case /* int64 owner_id */ 8:
                    message.ownerId = reader.int64().toBigInt();
                    break;
                case /* string team_id_str */ 9:
                    message.teamIdStr = reader.string();
                    break;
                case /* data.LinkmicTeamfightBonusInfo bonus_info */ 10:
                    message.bonusInfo = LinkmicTeamfightBonusInfo.internalBinaryRead(reader, reader.uint32(), options, message.bonusInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightTeamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.teamId);
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* string score_str = 3; */
        if (message.scoreStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.scoreStr);
        /* string score_fuzzy = 4; */
        if (message.scoreFuzzy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.scoreFuzzy);
        /* data.LinkmicTeamfightContributors contributors = 5; */
        if (message.contributors)
            LinkmicTeamfightContributors.internalBinaryWrite(message.contributors, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkmicTeamfightPlayer players = 6; */
        for (let i = 0; i < message.players.length; i++)
            LinkmicTeamfightPlayer.internalBinaryWrite(message.players[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool is_score_fuzzy = 7; */
        if (message.isScoreFuzzy !== false)
            writer.tag(7, WireType.Varint).bool(message.isScoreFuzzy);
        /* int64 owner_id = 8; */
        if (message.ownerId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.ownerId);
        /* string team_id_str = 9; */
        if (message.teamIdStr !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.teamIdStr);
        /* data.LinkmicTeamfightBonusInfo bonus_info = 10; */
        if (message.bonusInfo)
            LinkmicTeamfightBonusInfo.internalBinaryWrite(message.bonusInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicTeamfightTeamInfo
 */
export const LinkmicTeamfightTeamInfo = new LinkmicTeamfightTeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightInfo$Type extends MessageType<LinkmicTeamfightInfo> {
    constructor() {
        super("data.LinkmicTeamfightInfo", [
            { no: 1, name: "teamfight_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "teamfight_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "punish_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "punish_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "team_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicTeamfightTeamInfo },
            { no: 10, name: "win_team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "current_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "pk_bar_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "show_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "initiator_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "score_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "show_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "initiator_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "win_team_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 100, name: "room_battle_content", kind: "message", T: () => TeamfightRoomBattleContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightInfo>): LinkmicTeamfightInfo {
        const message = { teamfightId: 0n, teamfightIdStr: "", type: 0, status: 0, startTime: 0n, duration: 0n, punishStartTime: 0n, punishDuration: 0n, teamInfos: [], winTeamId: 0n, currentTimeMs: 0n, pkBarStyle: 0, showStartTime: 0n, initiatorUserId: 0n, scoreType: 0, showDuration: 0n, initiatorAnchorId: 0n, winTeamIdStr: "", dressId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightInfo): LinkmicTeamfightInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 teamfight_id */ 1:
                    message.teamfightId = reader.int64().toBigInt();
                    break;
                case /* string teamfight_id_str */ 2:
                    message.teamfightIdStr = reader.string();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                case /* int64 start_time */ 5:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 6:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 punish_start_time */ 7:
                    message.punishStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 punish_duration */ 8:
                    message.punishDuration = reader.int64().toBigInt();
                    break;
                case /* repeated data.LinkmicTeamfightTeamInfo team_infos */ 9:
                    message.teamInfos.push(LinkmicTeamfightTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 win_team_id */ 10:
                    message.winTeamId = reader.int64().toBigInt();
                    break;
                case /* int64 current_time_ms */ 11:
                    message.currentTimeMs = reader.int64().toBigInt();
                    break;
                case /* int32 pk_bar_style */ 12:
                    message.pkBarStyle = reader.int32();
                    break;
                case /* int64 show_start_time */ 13:
                    message.showStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 initiator_user_id */ 14:
                    message.initiatorUserId = reader.int64().toBigInt();
                    break;
                case /* int32 score_type */ 15:
                    message.scoreType = reader.int32();
                    break;
                case /* int64 show_duration */ 16:
                    message.showDuration = reader.int64().toBigInt();
                    break;
                case /* int64 initiator_anchor_id */ 17:
                    message.initiatorAnchorId = reader.int64().toBigInt();
                    break;
                case /* string win_team_id_str */ 18:
                    message.winTeamIdStr = reader.string();
                    break;
                case /* string dress_id */ 19:
                    message.dressId = reader.string();
                    break;
                case /* data.TeamfightRoomBattleContent room_battle_content */ 100:
                    message.roomBattleContent = TeamfightRoomBattleContent.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 teamfight_id = 1; */
        if (message.teamfightId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.teamfightId);
        /* string teamfight_id_str = 2; */
        if (message.teamfightIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.teamfightIdStr);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* int64 start_time = 5; */
        if (message.startTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.startTime);
        /* int64 duration = 6; */
        if (message.duration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.duration);
        /* int64 punish_start_time = 7; */
        if (message.punishStartTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.punishStartTime);
        /* int64 punish_duration = 8; */
        if (message.punishDuration !== 0n)
            writer.tag(8, WireType.Varint).int64(message.punishDuration);
        /* repeated data.LinkmicTeamfightTeamInfo team_infos = 9; */
        for (let i = 0; i < message.teamInfos.length; i++)
            LinkmicTeamfightTeamInfo.internalBinaryWrite(message.teamInfos[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 win_team_id = 10; */
        if (message.winTeamId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.winTeamId);
        /* int64 current_time_ms = 11; */
        if (message.currentTimeMs !== 0n)
            writer.tag(11, WireType.Varint).int64(message.currentTimeMs);
        /* int32 pk_bar_style = 12; */
        if (message.pkBarStyle !== 0)
            writer.tag(12, WireType.Varint).int32(message.pkBarStyle);
        /* int64 show_start_time = 13; */
        if (message.showStartTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.showStartTime);
        /* int64 initiator_user_id = 14; */
        if (message.initiatorUserId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.initiatorUserId);
        /* int32 score_type = 15; */
        if (message.scoreType !== 0)
            writer.tag(15, WireType.Varint).int32(message.scoreType);
        /* int64 show_duration = 16; */
        if (message.showDuration !== 0n)
            writer.tag(16, WireType.Varint).int64(message.showDuration);
        /* int64 initiator_anchor_id = 17; */
        if (message.initiatorAnchorId !== 0n)
            writer.tag(17, WireType.Varint).int64(message.initiatorAnchorId);
        /* string win_team_id_str = 18; */
        if (message.winTeamIdStr !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.winTeamIdStr);
        /* string dress_id = 19; */
        if (message.dressId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.dressId);
        /* data.TeamfightRoomBattleContent room_battle_content = 100; */
        if (message.roomBattleContent)
            TeamfightRoomBattleContent.internalBinaryWrite(message.roomBattleContent, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicTeamfightInfo
 */
export const LinkmicTeamfightInfo = new LinkmicTeamfightInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinTeamfightInfo$Type extends MessageType<JoinTeamfightInfo> {
    constructor() {
        super("data.JoinTeamfightInfo", [
            { no: 1, name: "team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "team_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinTeamfightInfo>): JoinTeamfightInfo {
        const message = { teamId: 0n, teamIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinTeamfightInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinTeamfightInfo): JoinTeamfightInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 team_id */ 1:
                    message.teamId = reader.int64().toBigInt();
                    break;
                case /* string team_id_str */ 2:
                    message.teamIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinTeamfightInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 team_id = 1; */
        if (message.teamId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.teamId);
        /* string team_id_str = 2; */
        if (message.teamIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.teamIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.JoinTeamfightInfo
 */
export const JoinTeamfightInfo = new JoinTeamfightInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBattleProcessInfo$Type extends MessageType<RoomBattleProcessInfo> {
    constructor() {
        super("data.RoomBattleProcessInfo", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "select_guests_content", kind: "message", T: () => RoomBattleProcessSelectGuestsContent },
            { no: 3, name: "waiting_battle_content", kind: "message", T: () => RoomBattleProcessWaitingBattleContent }
        ]);
    }
    create(value?: PartialMessage<RoomBattleProcessInfo>): RoomBattleProcessInfo {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBattleProcessInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBattleProcessInfo): RoomBattleProcessInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* data.RoomBattleProcessSelectGuestsContent select_guests_content */ 2:
                    message.selectGuestsContent = RoomBattleProcessSelectGuestsContent.internalBinaryRead(reader, reader.uint32(), options, message.selectGuestsContent);
                    break;
                case /* data.RoomBattleProcessWaitingBattleContent waiting_battle_content */ 3:
                    message.waitingBattleContent = RoomBattleProcessWaitingBattleContent.internalBinaryRead(reader, reader.uint32(), options, message.waitingBattleContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBattleProcessInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* data.RoomBattleProcessSelectGuestsContent select_guests_content = 2; */
        if (message.selectGuestsContent)
            RoomBattleProcessSelectGuestsContent.internalBinaryWrite(message.selectGuestsContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomBattleProcessWaitingBattleContent waiting_battle_content = 3; */
        if (message.waitingBattleContent)
            RoomBattleProcessWaitingBattleContent.internalBinaryWrite(message.waitingBattleContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBattleProcessInfo
 */
export const RoomBattleProcessInfo = new RoomBattleProcessInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBattleProcessSelectGuestsContent$Type extends MessageType<RoomBattleProcessSelectGuestsContent> {
    constructor() {
        super("data.RoomBattleProcessSelectGuestsContent", [
            { no: 1, name: "guest_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CrossRoomLinkReplyGuestInfo }
        ]);
    }
    create(value?: PartialMessage<RoomBattleProcessSelectGuestsContent>): RoomBattleProcessSelectGuestsContent {
        const message = { guestInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBattleProcessSelectGuestsContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBattleProcessSelectGuestsContent): RoomBattleProcessSelectGuestsContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.CrossRoomLinkReplyGuestInfo guest_infos */ 1:
                    message.guestInfos.push(CrossRoomLinkReplyGuestInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBattleProcessSelectGuestsContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.CrossRoomLinkReplyGuestInfo guest_infos = 1; */
        for (let i = 0; i < message.guestInfos.length; i++)
            CrossRoomLinkReplyGuestInfo.internalBinaryWrite(message.guestInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBattleProcessSelectGuestsContent
 */
export const RoomBattleProcessSelectGuestsContent = new RoomBattleProcessSelectGuestsContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBattleProcessWaitingBattleContent$Type extends MessageType<RoomBattleProcessWaitingBattleContent> {
    constructor() {
        super("data.RoomBattleProcessWaitingBattleContent", [
            { no: 1, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "select_guests_waiting_sec", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomBattleProcessWaitingBattleContent>): RoomBattleProcessWaitingBattleContent {
        const message = { toast: "", selectGuestsWaitingSec: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBattleProcessWaitingBattleContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBattleProcessWaitingBattleContent): RoomBattleProcessWaitingBattleContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toast */ 1:
                    message.toast = reader.string();
                    break;
                case /* int64 select_guests_waiting_sec */ 2:
                    message.selectGuestsWaitingSec = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBattleProcessWaitingBattleContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toast = 1; */
        if (message.toast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toast);
        /* int64 select_guests_waiting_sec = 2; */
        if (message.selectGuestsWaitingSec !== 0n)
            writer.tag(2, WireType.Varint).int64(message.selectGuestsWaitingSec);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBattleProcessWaitingBattleContent
 */
export const RoomBattleProcessWaitingBattleContent = new RoomBattleProcessWaitingBattleContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBattleRoomInfo$Type extends MessageType<RoomBattleRoomInfo> {
    constructor() {
        super("data.RoomBattleRoomInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "join_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "start_operator_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomBattleRoomInfo>): RoomBattleRoomInfo {
        const message = { id: 0n, joinStatus: 0, startOperatorUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBattleRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBattleRoomInfo): RoomBattleRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int32 join_status */ 2:
                    message.joinStatus = reader.int32();
                    break;
                case /* int64 start_operator_user_id */ 3:
                    message.startOperatorUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBattleRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int32 join_status = 2; */
        if (message.joinStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.joinStatus);
        /* int64 start_operator_user_id = 3; */
        if (message.startOperatorUserId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startOperatorUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBattleRoomInfo
 */
export const RoomBattleRoomInfo = new RoomBattleRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamfightRoomBattleContent$Type extends MessageType<TeamfightRoomBattleContent> {
    constructor() {
        super("data.TeamfightRoomBattleContent", [
            { no: 2, name: "invite_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "room_battle_mode", kind: "message", T: () => RoomBattleMode },
            { no: 5, name: "if_theme_default", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "theme_chooser_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "if_peak_hour", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "anchor_relation_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "begin_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamfightRoomBattleContent>): TeamfightRoomBattleContent {
        const message = { inviteSource: 0, extra: "", ifThemeDefault: "", themeChooserRoomId: 0n, ifPeakHour: 0n, anchorRelationType: "", beginType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamfightRoomBattleContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamfightRoomBattleContent): TeamfightRoomBattleContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 invite_source */ 2:
                    message.inviteSource = reader.int32();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                case /* data.RoomBattleMode room_battle_mode */ 4:
                    message.roomBattleMode = RoomBattleMode.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleMode);
                    break;
                case /* string if_theme_default */ 5:
                    message.ifThemeDefault = reader.string();
                    break;
                case /* int64 theme_chooser_room_id */ 6:
                    message.themeChooserRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 if_peak_hour */ 7:
                    message.ifPeakHour = reader.int64().toBigInt();
                    break;
                case /* string anchor_relation_type */ 8:
                    message.anchorRelationType = reader.string();
                    break;
                case /* string begin_type */ 9:
                    message.beginType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamfightRoomBattleContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 invite_source = 2; */
        if (message.inviteSource !== 0)
            writer.tag(2, WireType.Varint).int32(message.inviteSource);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        /* data.RoomBattleMode room_battle_mode = 4; */
        if (message.roomBattleMode)
            RoomBattleMode.internalBinaryWrite(message.roomBattleMode, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string if_theme_default = 5; */
        if (message.ifThemeDefault !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.ifThemeDefault);
        /* int64 theme_chooser_room_id = 6; */
        if (message.themeChooserRoomId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.themeChooserRoomId);
        /* int64 if_peak_hour = 7; */
        if (message.ifPeakHour !== 0n)
            writer.tag(7, WireType.Varint).int64(message.ifPeakHour);
        /* string anchor_relation_type = 8; */
        if (message.anchorRelationType !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.anchorRelationType);
        /* string begin_type = 9; */
        if (message.beginType !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.beginType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamfightRoomBattleContent
 */
export const TeamfightRoomBattleContent = new TeamfightRoomBattleContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBattleThemeParam$Type extends MessageType<RoomBattleThemeParam> {
    constructor() {
        super("data.RoomBattleThemeParam", [
            { no: 1, name: "theme_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "theme_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "theme_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "theme_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomBattleThemeParam>): RoomBattleThemeParam {
        const message = { themeId: 0n, themeType: 0, themeTitle: "", themeDescription: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBattleThemeParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBattleThemeParam): RoomBattleThemeParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 theme_id */ 1:
                    message.themeId = reader.int64().toBigInt();
                    break;
                case /* int32 theme_type */ 2:
                    message.themeType = reader.int32();
                    break;
                case /* string theme_title */ 3:
                    message.themeTitle = reader.string();
                    break;
                case /* string theme_description */ 4:
                    message.themeDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBattleThemeParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 theme_id = 1; */
        if (message.themeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.themeId);
        /* int32 theme_type = 2; */
        if (message.themeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.themeType);
        /* string theme_title = 3; */
        if (message.themeTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.themeTitle);
        /* string theme_description = 4; */
        if (message.themeDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.themeDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBattleThemeParam
 */
export const RoomBattleThemeParam = new RoomBattleThemeParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBattleMode$Type extends MessageType<RoomBattleMode> {
    constructor() {
        super("data.RoomBattleMode", [
            { no: 1, name: "room_battle_mode_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 100, name: "room_battle_theme_param", kind: "message", T: () => RoomBattleThemeParam }
        ]);
    }
    create(value?: PartialMessage<RoomBattleMode>): RoomBattleMode {
        const message = { roomBattleModeType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBattleMode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBattleMode): RoomBattleMode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 room_battle_mode_type */ 1:
                    message.roomBattleModeType = reader.int32();
                    break;
                case /* data.RoomBattleThemeParam room_battle_theme_param */ 100:
                    message.roomBattleThemeParam = RoomBattleThemeParam.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleThemeParam);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBattleMode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 room_battle_mode_type = 1; */
        if (message.roomBattleModeType !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomBattleModeType);
        /* data.RoomBattleThemeParam room_battle_theme_param = 100; */
        if (message.roomBattleThemeParam)
            RoomBattleThemeParam.internalBinaryWrite(message.roomBattleThemeParam, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBattleMode
 */
export const RoomBattleMode = new RoomBattleMode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChorusInfo$Type extends MessageType<ChorusInfo> {
    constructor() {
        super("data.ChorusInfo", [
            { no: 1, name: "chorus_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "lead_singer_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "finish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChorusInfo>): ChorusInfo {
        const message = { chorusId: 0n, leadSingerId: 0n, startTime: 0n, finishTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChorusInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChorusInfo): ChorusInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chorus_id */ 1:
                    message.chorusId = reader.int64().toBigInt();
                    break;
                case /* int64 lead_singer_id */ 2:
                    message.leadSingerId = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 3:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 finish_time */ 4:
                    message.finishTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChorusInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chorus_id = 1; */
        if (message.chorusId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chorusId);
        /* int64 lead_singer_id = 2; */
        if (message.leadSingerId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.leadSingerId);
        /* int64 start_time = 3; */
        if (message.startTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startTime);
        /* int64 finish_time = 4; */
        if (message.finishTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.finishTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChorusInfo
 */
export const ChorusInfo = new ChorusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChorusSongInfo$Type extends MessageType<ChorusSongInfo> {
    constructor() {
        super("data.ChorusSongInfo", [
            { no: 1, name: "music", kind: "message", T: () => KtvSongStruct },
            { no: 2, name: "is_self_seeing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChorusSongInfo>): ChorusSongInfo {
        const message = { isSelfSeeing: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChorusSongInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChorusSongInfo): ChorusSongInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.KtvSongStruct music */ 1:
                    message.music = KtvSongStruct.internalBinaryRead(reader, reader.uint32(), options, message.music);
                    break;
                case /* bool is_self_seeing */ 2:
                    message.isSelfSeeing = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChorusSongInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.KtvSongStruct music = 1; */
        if (message.music)
            KtvSongStruct.internalBinaryWrite(message.music, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_self_seeing = 2; */
        if (message.isSelfSeeing !== false)
            writer.tag(2, WireType.Varint).bool(message.isSelfSeeing);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChorusSongInfo
 */
export const ChorusSongInfo = new ChorusSongInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BottomRightCardArea$Type extends MessageType<BottomRightCardArea> {
    constructor() {
        super("data.BottomRightCardArea", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "priority", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "toolbar_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "combine_type", kind: "message", T: () => CombineType },
            { no: 5, name: "card_display_info", kind: "message", T: () => CardDisplayInfo },
            { no: 61, name: "anim_config", kind: "message", T: () => AnimConfig },
            { no: 62, name: "is_preloading", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "mock_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BottomRightCardArea>): BottomRightCardArea {
        const message = { type: 0, priority: 0, toolbarType: 0, isPreloading: false, mockType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BottomRightCardArea>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BottomRightCardArea): BottomRightCardArea {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* uint32 priority */ 2:
                    message.priority = reader.uint32();
                    break;
                case /* int32 toolbar_type */ 3:
                    message.toolbarType = reader.int32();
                    break;
                case /* data.CombineType combine_type */ 4:
                    message.combineType = CombineType.internalBinaryRead(reader, reader.uint32(), options, message.combineType);
                    break;
                case /* data.CardDisplayInfo card_display_info */ 5:
                    message.cardDisplayInfo = CardDisplayInfo.internalBinaryRead(reader, reader.uint32(), options, message.cardDisplayInfo);
                    break;
                case /* data.AnimConfig anim_config */ 61:
                    message.animConfig = AnimConfig.internalBinaryRead(reader, reader.uint32(), options, message.animConfig);
                    break;
                case /* bool is_preloading */ 62:
                    message.isPreloading = reader.bool();
                    break;
                case /* int32 mock_type */ 6:
                    message.mockType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BottomRightCardArea, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* uint32 priority = 2; */
        if (message.priority !== 0)
            writer.tag(2, WireType.Varint).uint32(message.priority);
        /* int32 toolbar_type = 3; */
        if (message.toolbarType !== 0)
            writer.tag(3, WireType.Varint).int32(message.toolbarType);
        /* data.CombineType combine_type = 4; */
        if (message.combineType)
            CombineType.internalBinaryWrite(message.combineType, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.CardDisplayInfo card_display_info = 5; */
        if (message.cardDisplayInfo)
            CardDisplayInfo.internalBinaryWrite(message.cardDisplayInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.AnimConfig anim_config = 61; */
        if (message.animConfig)
            AnimConfig.internalBinaryWrite(message.animConfig, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* bool is_preloading = 62; */
        if (message.isPreloading !== false)
            writer.tag(62, WireType.Varint).bool(message.isPreloading);
        /* int32 mock_type = 6; */
        if (message.mockType !== 0)
            writer.tag(6, WireType.Varint).int32(message.mockType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BottomRightCardArea
 */
export const BottomRightCardArea = new BottomRightCardArea$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnimConfig$Type extends MessageType<AnimConfig> {
    constructor() {
        super("data.AnimConfig", [
            { no: 1, name: "is_anim_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "enter_anim_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "exit_anim_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AnimConfig>): AnimConfig {
        const message = { isAnimSupported: false, enterAnimType: 0, exitAnimType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnimConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnimConfig): AnimConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_anim_supported */ 1:
                    message.isAnimSupported = reader.bool();
                    break;
                case /* int32 enter_anim_type */ 2:
                    message.enterAnimType = reader.int32();
                    break;
                case /* int32 exit_anim_type */ 3:
                    message.exitAnimType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnimConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_anim_supported = 1; */
        if (message.isAnimSupported !== false)
            writer.tag(1, WireType.Varint).bool(message.isAnimSupported);
        /* int32 enter_anim_type = 2; */
        if (message.enterAnimType !== 0)
            writer.tag(2, WireType.Varint).int32(message.enterAnimType);
        /* int32 exit_anim_type = 3; */
        if (message.exitAnimType !== 0)
            writer.tag(3, WireType.Varint).int32(message.exitAnimType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnimConfig
 */
export const AnimConfig = new AnimConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CombineType$Type extends MessageType<CombineType> {
    constructor() {
        super("data.CombineType", [
            { no: 1, name: "area_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "area_sub_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CombineType>): CombineType {
        const message = { areaType: 0, areaSubType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CombineType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombineType): CombineType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 area_type */ 1:
                    message.areaType = reader.int32();
                    break;
                case /* int32 area_sub_type */ 2:
                    message.areaSubType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CombineType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 area_type = 1; */
        if (message.areaType !== 0)
            writer.tag(1, WireType.Varint).int32(message.areaType);
        /* int32 area_sub_type = 2; */
        if (message.areaSubType !== 0)
            writer.tag(2, WireType.Varint).int32(message.areaSubType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CombineType
 */
export const CombineType = new CombineType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardDisplayInfo$Type extends MessageType<CardDisplayInfo> {
    constructor() {
        super("data.CardDisplayInfo", [
            { no: 1, name: "card_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fallback_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "container_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "width", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "bottom", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "right", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 20, name: "container_payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "trigger_config", kind: "message", T: () => CardTriggerConfig },
            { no: 31, name: "condition_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CardCondition },
            { no: 40, name: "pre_defeat_strategy", kind: "message", T: () => CardPreDefeatStrategy },
            { no: 41, name: "show_defeat_strategy", kind: "message", T: () => CardShowDefeatStrategy },
            { no: 60, name: "landscape_config", kind: "message", T: () => LandScapeConfig },
            { no: 50, name: "accessible_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CardDisplayInfo>): CardDisplayInfo {
        const message = { cardId: 0, url: "", fallbackUrl: "", containerType: 0, durationMs: 0n, width: 0, height: 0, bottom: 0, right: 0, containerPayload: "", conditionList: [], accessibleName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardDisplayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardDisplayInfo): CardDisplayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 card_id */ 1:
                    message.cardId = reader.int32();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string fallback_url */ 3:
                    message.fallbackUrl = reader.string();
                    break;
                case /* int32 container_type */ 4:
                    message.containerType = reader.int32();
                    break;
                case /* int64 duration_ms */ 5:
                    message.durationMs = reader.int64().toBigInt();
                    break;
                case /* uint32 width */ 10:
                    message.width = reader.uint32();
                    break;
                case /* uint32 height */ 11:
                    message.height = reader.uint32();
                    break;
                case /* uint32 bottom */ 12:
                    message.bottom = reader.uint32();
                    break;
                case /* uint32 right */ 13:
                    message.right = reader.uint32();
                    break;
                case /* string container_payload */ 20:
                    message.containerPayload = reader.string();
                    break;
                case /* data.CardTriggerConfig trigger_config */ 30:
                    message.triggerConfig = CardTriggerConfig.internalBinaryRead(reader, reader.uint32(), options, message.triggerConfig);
                    break;
                case /* repeated data.CardCondition condition_list */ 31:
                    message.conditionList.push(CardCondition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.CardPreDefeatStrategy pre_defeat_strategy */ 40:
                    message.preDefeatStrategy = CardPreDefeatStrategy.internalBinaryRead(reader, reader.uint32(), options, message.preDefeatStrategy);
                    break;
                case /* data.CardShowDefeatStrategy show_defeat_strategy */ 41:
                    message.showDefeatStrategy = CardShowDefeatStrategy.internalBinaryRead(reader, reader.uint32(), options, message.showDefeatStrategy);
                    break;
                case /* data.LandScapeConfig landscape_config */ 60:
                    message.landscapeConfig = LandScapeConfig.internalBinaryRead(reader, reader.uint32(), options, message.landscapeConfig);
                    break;
                case /* string accessible_name */ 50:
                    message.accessibleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardDisplayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 card_id = 1; */
        if (message.cardId !== 0)
            writer.tag(1, WireType.Varint).int32(message.cardId);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string fallback_url = 3; */
        if (message.fallbackUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fallbackUrl);
        /* int32 container_type = 4; */
        if (message.containerType !== 0)
            writer.tag(4, WireType.Varint).int32(message.containerType);
        /* int64 duration_ms = 5; */
        if (message.durationMs !== 0n)
            writer.tag(5, WireType.Varint).int64(message.durationMs);
        /* uint32 width = 10; */
        if (message.width !== 0)
            writer.tag(10, WireType.Varint).uint32(message.width);
        /* uint32 height = 11; */
        if (message.height !== 0)
            writer.tag(11, WireType.Varint).uint32(message.height);
        /* uint32 bottom = 12; */
        if (message.bottom !== 0)
            writer.tag(12, WireType.Varint).uint32(message.bottom);
        /* uint32 right = 13; */
        if (message.right !== 0)
            writer.tag(13, WireType.Varint).uint32(message.right);
        /* string container_payload = 20; */
        if (message.containerPayload !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.containerPayload);
        /* data.CardTriggerConfig trigger_config = 30; */
        if (message.triggerConfig)
            CardTriggerConfig.internalBinaryWrite(message.triggerConfig, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.CardCondition condition_list = 31; */
        for (let i = 0; i < message.conditionList.length; i++)
            CardCondition.internalBinaryWrite(message.conditionList[i], writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* data.CardPreDefeatStrategy pre_defeat_strategy = 40; */
        if (message.preDefeatStrategy)
            CardPreDefeatStrategy.internalBinaryWrite(message.preDefeatStrategy, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* data.CardShowDefeatStrategy show_defeat_strategy = 41; */
        if (message.showDefeatStrategy)
            CardShowDefeatStrategy.internalBinaryWrite(message.showDefeatStrategy, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* data.LandScapeConfig landscape_config = 60; */
        if (message.landscapeConfig)
            LandScapeConfig.internalBinaryWrite(message.landscapeConfig, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* string accessible_name = 50; */
        if (message.accessibleName !== "")
            writer.tag(50, WireType.LengthDelimited).string(message.accessibleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CardDisplayInfo
 */
export const CardDisplayInfo = new CardDisplayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LandScapeConfig$Type extends MessageType<LandScapeConfig> {
    constructor() {
        super("data.LandScapeConfig", [
            { no: 1, name: "is_landscape_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "width", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "bottom", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "right", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LandScapeConfig>): LandScapeConfig {
        const message = { isLandscapeSupported: false, width: 0, height: 0, bottom: 0, right: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LandScapeConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LandScapeConfig): LandScapeConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_landscape_supported */ 1:
                    message.isLandscapeSupported = reader.bool();
                    break;
                case /* uint32 width */ 2:
                    message.width = reader.uint32();
                    break;
                case /* uint32 height */ 3:
                    message.height = reader.uint32();
                    break;
                case /* uint32 bottom */ 4:
                    message.bottom = reader.uint32();
                    break;
                case /* uint32 right */ 5:
                    message.right = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LandScapeConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_landscape_supported = 1; */
        if (message.isLandscapeSupported !== false)
            writer.tag(1, WireType.Varint).bool(message.isLandscapeSupported);
        /* uint32 width = 2; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).uint32(message.width);
        /* uint32 height = 3; */
        if (message.height !== 0)
            writer.tag(3, WireType.Varint).uint32(message.height);
        /* uint32 bottom = 4; */
        if (message.bottom !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bottom);
        /* uint32 right = 5; */
        if (message.right !== 0)
            writer.tag(5, WireType.Varint).uint32(message.right);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LandScapeConfig
 */
export const LandScapeConfig = new LandScapeConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardTriggerConfig$Type extends MessageType<CardTriggerConfig> {
    constructor() {
        super("data.CardTriggerConfig", [
            { no: 1, name: "strategy", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "commonTriggerList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CardTrigger }
        ]);
    }
    create(value?: PartialMessage<CardTriggerConfig>): CardTriggerConfig {
        const message = { strategy: 0, commonTriggerList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardTriggerConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardTriggerConfig): CardTriggerConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 strategy */ 1:
                    message.strategy = reader.uint32();
                    break;
                case /* repeated data.CardTrigger commonTriggerList */ 2:
                    message.commonTriggerList.push(CardTrigger.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardTriggerConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 strategy = 1; */
        if (message.strategy !== 0)
            writer.tag(1, WireType.Varint).uint32(message.strategy);
        /* repeated data.CardTrigger commonTriggerList = 2; */
        for (let i = 0; i < message.commonTriggerList.length; i++)
            CardTrigger.internalBinaryWrite(message.commonTriggerList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CardTriggerConfig
 */
export const CardTriggerConfig = new CardTriggerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardTrigger$Type extends MessageType<CardTrigger> {
    constructor() {
        super("data.CardTrigger", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CardTrigger>): CardTrigger {
        const message = { type: 0, value: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardTrigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardTrigger): CardTrigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 value */ 2:
                    message.value = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardTrigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 value = 2; */
        if (message.value !== 0n)
            writer.tag(2, WireType.Varint).int64(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CardTrigger
 */
export const CardTrigger = new CardTrigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardCondition$Type extends MessageType<CardCondition> {
    constructor() {
        super("data.CardCondition", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CardCondition>): CardCondition {
        const message = { type: 0, value: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardCondition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardCondition): CardCondition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 value */ 2:
                    message.value = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardCondition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 value = 2; */
        if (message.value !== 0n)
            writer.tag(2, WireType.Varint).int64(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CardCondition
 */
export const CardCondition = new CardCondition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardPreDefeatStrategy$Type extends MessageType<CardPreDefeatStrategy> {
    constructor() {
        super("data.CardPreDefeatStrategy", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CardPreDefeatStrategy>): CardPreDefeatStrategy {
        const message = { type: 0, value: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardPreDefeatStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardPreDefeatStrategy): CardPreDefeatStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 value */ 2:
                    message.value = reader.int64().toBigInt();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardPreDefeatStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 value = 2; */
        if (message.value !== 0n)
            writer.tag(2, WireType.Varint).int64(message.value);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CardPreDefeatStrategy
 */
export const CardPreDefeatStrategy = new CardPreDefeatStrategy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardShowDefeatStrategy$Type extends MessageType<CardShowDefeatStrategy> {
    constructor() {
        super("data.CardShowDefeatStrategy", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CardShowDefeatStrategy>): CardShowDefeatStrategy {
        const message = { type: 0, value: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardShowDefeatStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardShowDefeatStrategy): CardShowDefeatStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 value */ 2:
                    message.value = reader.int64().toBigInt();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardShowDefeatStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 value = 2; */
        if (message.value !== 0n)
            writer.tag(2, WireType.Varint).int64(message.value);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CardShowDefeatStrategy
 */
export const CardShowDefeatStrategy = new CardShowDefeatStrategy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftPreviewInfo$Type extends MessageType<GiftPreviewInfo> {
    constructor() {
        super("data.GiftPreviewInfo", [
            { no: 1, name: "lock_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "client_block_use_scheme_url", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "block_scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "client_check_left_diamond", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "block_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftPreviewInfo>): GiftPreviewInfo {
        const message = { lockStatus: 0n, clientBlockUseSchemeUrl: false, blockSchemeUrl: "", clientCheckLeftDiamond: false, blockToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftPreviewInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftPreviewInfo): GiftPreviewInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 lock_status */ 1:
                    message.lockStatus = reader.int64().toBigInt();
                    break;
                case /* bool client_block_use_scheme_url */ 2:
                    message.clientBlockUseSchemeUrl = reader.bool();
                    break;
                case /* string block_scheme_url */ 3:
                    message.blockSchemeUrl = reader.string();
                    break;
                case /* bool client_check_left_diamond */ 4:
                    message.clientCheckLeftDiamond = reader.bool();
                    break;
                case /* string block_toast */ 5:
                    message.blockToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftPreviewInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 lock_status = 1; */
        if (message.lockStatus !== 0n)
            writer.tag(1, WireType.Varint).int64(message.lockStatus);
        /* bool client_block_use_scheme_url = 2; */
        if (message.clientBlockUseSchemeUrl !== false)
            writer.tag(2, WireType.Varint).bool(message.clientBlockUseSchemeUrl);
        /* string block_scheme_url = 3; */
        if (message.blockSchemeUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.blockSchemeUrl);
        /* bool client_check_left_diamond = 4; */
        if (message.clientCheckLeftDiamond !== false)
            writer.tag(4, WireType.Varint).bool(message.clientCheckLeftDiamond);
        /* string block_toast = 5; */
        if (message.blockToast !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.blockToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftPreviewInfo
 */
export const GiftPreviewInfo = new GiftPreviewInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuffLockInfo$Type extends MessageType<BuffLockInfo> {
    constructor() {
        super("data.BuffLockInfo", [
            { no: 1, name: "locked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cell_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BuffLockInfo>): BuffLockInfo {
        const message = { locked: false, toast: "", schema: "", cellText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuffLockInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuffLockInfo): BuffLockInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool locked */ 1:
                    message.locked = reader.bool();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                case /* string schema */ 3:
                    message.schema = reader.string();
                    break;
                case /* string cell_text */ 4:
                    message.cellText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuffLockInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool locked = 1; */
        if (message.locked !== false)
            writer.tag(1, WireType.Varint).bool(message.locked);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        /* string schema = 3; */
        if (message.schema !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schema);
        /* string cell_text = 4; */
        if (message.cellText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cellText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BuffLockInfo
 */
export const BuffLockInfo = new BuffLockInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftBuffInfo$Type extends MessageType<GiftBuffInfo> {
    constructor() {
        super("data.GiftBuffInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_img", kind: "message", T: () => Image },
            { no: 4, name: "sweep_light_img", kind: "message", T: () => Image },
            { no: 5, name: "buff_gift_describe_img", kind: "message", T: () => Image },
            { no: 6, name: "buff_gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "buff_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "buff_can_send", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "buff_diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "lock_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "default_chose_action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "buff_lock_info", kind: "message", T: () => BuffLockInfo }
        ]);
    }
    create(value?: PartialMessage<GiftBuffInfo>): GiftBuffInfo {
        const message = { text: "", textColor: "", buffGiftId: 0n, buffLevel: 0, buffCanSend: false, buffDiamondCount: 0n, lockToast: "", defaultChoseAction: 0n, startTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftBuffInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftBuffInfo): GiftBuffInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* data.Image bg_img */ 3:
                    message.bgImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgImg);
                    break;
                case /* data.Image sweep_light_img */ 4:
                    message.sweepLightImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.sweepLightImg);
                    break;
                case /* data.Image buff_gift_describe_img */ 5:
                    message.buffGiftDescribeImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.buffGiftDescribeImg);
                    break;
                case /* int64 buff_gift_id */ 6:
                    message.buffGiftId = reader.int64().toBigInt();
                    break;
                case /* int32 buff_level */ 7:
                    message.buffLevel = reader.int32();
                    break;
                case /* bool buff_can_send */ 8:
                    message.buffCanSend = reader.bool();
                    break;
                case /* int64 buff_diamond_count */ 9:
                    message.buffDiamondCount = reader.int64().toBigInt();
                    break;
                case /* string lock_toast */ 10:
                    message.lockToast = reader.string();
                    break;
                case /* int64 default_chose_action */ 11:
                    message.defaultChoseAction = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 12:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* data.BuffLockInfo buff_lock_info */ 13:
                    message.buffLockInfo = BuffLockInfo.internalBinaryRead(reader, reader.uint32(), options, message.buffLockInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftBuffInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* data.Image bg_img = 3; */
        if (message.bgImg)
            Image.internalBinaryWrite(message.bgImg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image sweep_light_img = 4; */
        if (message.sweepLightImg)
            Image.internalBinaryWrite(message.sweepLightImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image buff_gift_describe_img = 5; */
        if (message.buffGiftDescribeImg)
            Image.internalBinaryWrite(message.buffGiftDescribeImg, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 buff_gift_id = 6; */
        if (message.buffGiftId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.buffGiftId);
        /* int32 buff_level = 7; */
        if (message.buffLevel !== 0)
            writer.tag(7, WireType.Varint).int32(message.buffLevel);
        /* bool buff_can_send = 8; */
        if (message.buffCanSend !== false)
            writer.tag(8, WireType.Varint).bool(message.buffCanSend);
        /* int64 buff_diamond_count = 9; */
        if (message.buffDiamondCount !== 0n)
            writer.tag(9, WireType.Varint).int64(message.buffDiamondCount);
        /* string lock_toast = 10; */
        if (message.lockToast !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.lockToast);
        /* int64 default_chose_action = 11; */
        if (message.defaultChoseAction !== 0n)
            writer.tag(11, WireType.Varint).int64(message.defaultChoseAction);
        /* int64 start_time = 12; */
        if (message.startTime !== 0n)
            writer.tag(12, WireType.Varint).int64(message.startTime);
        /* data.BuffLockInfo buff_lock_info = 13; */
        if (message.buffLockInfo)
            BuffLockInfo.internalBinaryWrite(message.buffLockInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftBuffInfo
 */
export const GiftBuffInfo = new GiftBuffInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftTip$Type extends MessageType<GiftTip> {
    constructor() {
        super("data.GiftTip", [
            { no: 1, name: "display_text", kind: "message", T: () => Text },
            { no: 2, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "prefix_image", kind: "message", T: () => Image },
            { no: 4, name: "remaining_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "remaining_duration_suffix_text", kind: "message", T: () => Text },
            { no: 6, name: "countdown_deadline_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GiftTip>): GiftTip {
        const message = { backgroundColor: "", remainingDuration: 0n, countdownDeadlineTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftTip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftTip): GiftTip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text display_text */ 1:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* string background_color */ 2:
                    message.backgroundColor = reader.string();
                    break;
                case /* data.Image prefix_image */ 3:
                    message.prefixImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.prefixImage);
                    break;
                case /* int64 remaining_duration */ 4:
                    message.remainingDuration = reader.int64().toBigInt();
                    break;
                case /* data.Text remaining_duration_suffix_text */ 5:
                    message.remainingDurationSuffixText = Text.internalBinaryRead(reader, reader.uint32(), options, message.remainingDurationSuffixText);
                    break;
                case /* int64 countdown_deadline_time */ 6:
                    message.countdownDeadlineTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftTip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text display_text = 1; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string background_color = 2; */
        if (message.backgroundColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.backgroundColor);
        /* data.Image prefix_image = 3; */
        if (message.prefixImage)
            Image.internalBinaryWrite(message.prefixImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 remaining_duration = 4; */
        if (message.remainingDuration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.remainingDuration);
        /* data.Text remaining_duration_suffix_text = 5; */
        if (message.remainingDurationSuffixText)
            Text.internalBinaryWrite(message.remainingDurationSuffixText, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 countdown_deadline_time = 6; */
        if (message.countdownDeadlineTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.countdownDeadlineTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftTip
 */
export const GiftTip = new GiftTip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftStruct$Type extends MessageType<GiftStruct> {
    constructor() {
        super("data.GiftStruct", [
            { no: 1, name: "image", kind: "message", T: () => Image },
            { no: 2, name: "describe", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notify", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "fansclub_info", kind: "message", T: () => GiftStruct_GiftStructFansClubInfo },
            { no: 7, name: "for_linkmic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "doodle", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "for_fansclub", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "combo", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "diamond_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "is_displayed_on_panel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "primary_effect_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "gift_label_icon", kind: "message", T: () => Image },
            { no: 16, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "region", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "manual", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "for_custom", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "icon", kind: "message", T: () => Image },
            { no: 22, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "watermelon_seeds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "gold_effect", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "subs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LuckyMoneyGiftMeta },
            { no: 26, name: "golden_beans", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 27, name: "honor_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 28, name: "item_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 29, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "gift_operation", kind: "message", T: () => GiftPanelOperation },
            { no: 31, name: "event_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "noble_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "guide_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 34, name: "punish_medicine", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 35, name: "for_portal", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 36, name: "business_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 37, name: "cny_gift", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 38, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 39, name: "vip_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 40, name: "is_gray", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 41, name: "gray_scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 42, name: "gift_scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 43, name: "gift_banner", kind: "message", T: () => GiftBanner },
            { no: 44, name: "trigger_words", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "gift_buff_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GiftBuffInfo },
            { no: 46, name: "for_first_recharge", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 47, name: "dynamic_img_for_selected", kind: "message", T: () => Image },
            { no: 48, name: "after_send_action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 49, name: "gift_offline_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 50, name: "top_bar_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 51, name: "top_right_avatar", kind: "message", T: () => Image },
            { no: 52, name: "banner_scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 53, name: "is_locked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 54, name: "req_extra_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 55, name: "asset_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 56, name: "gift_preview_info", kind: "message", T: () => GiftPreviewInfo },
            { no: 57, name: "gift_tip", kind: "message", T: () => GiftTip },
            { no: 58, name: "need_sweep_light_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 59, name: "group_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GiftGroupInfo },
            { no: 60, name: "bottom_text", kind: "message", T: () => Text },
            { no: 61, name: "mystery_shop_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 62, name: "optional_asset_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 63, name: "disable_wish_list", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 64, name: "gift_msg_board", kind: "message", T: () => GiftStruct_GiftMsgBoard },
            { no: 65, name: "emoji_interact_resource", kind: "message", T: () => EmojiInteractResource },
            { no: 66, name: "tray_dynamic_img_flippable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 67, name: "pico_show_action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 68, name: "selected_dynamic_effect", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 69, name: "gift_touch_label", kind: "message", T: () => GiftTouchLabel },
            { no: 70, name: "unselected_bottom_info", kind: "message", T: () => GiftUnselectedBottomInfo },
            { no: 71, name: "gift_confirm_info", kind: "message", T: () => GiftConfirmInfo },
            { no: 72, name: "biz_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 73, name: "biz_item", kind: "message", T: () => GoodsBizItem }
        ]);
    }
    create(value?: PartialMessage<GiftStruct>): GiftStruct {
        const message = { describe: "", notify: false, duration: 0n, id: 0n, forLinkmic: false, doodle: false, forFansclub: false, combo: false, type: 0, diamondCount: 0, isDisplayedOnPanel: false, primaryEffectId: 0n, name: "", region: "", manual: "", forCustom: false, actionType: 0, watermelonSeeds: 0, goldEffect: "", subs: [], goldenBeans: 0n, honorLevel: 0n, itemType: 0, schemeUrl: "", eventName: "", nobleLevel: 0n, guideUrl: "", punishMedicine: false, forPortal: false, businessText: "", cnyGift: false, appId: 0n, vipLevel: 0n, isGray: false, graySchemeUrl: "", giftScene: 0n, triggerWords: [], giftBuffInfos: [], forFirstRecharge: false, afterSendAction: 0, giftOfflineTime: 0n, topBarText: "", bannerSchemeUrl: "", isLocked: false, reqExtraType: 0n, assetIds: [], needSweepLightCount: 0, groupInfo: [], mysteryShopStatus: 0, optionalAssetIds: [], disableWishList: false, trayDynamicImgFlippable: false, picoShowAction: 0n, selectedDynamicEffect: 0n, bizType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftStruct): GiftStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image image */ 1:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string describe */ 2:
                    message.describe = reader.string();
                    break;
                case /* bool notify */ 3:
                    message.notify = reader.bool();
                    break;
                case /* int64 duration */ 4:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 id */ 5:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* data.GiftStruct.GiftStructFansClubInfo fansclub_info */ 6:
                    message.fansclubInfo = GiftStruct_GiftStructFansClubInfo.internalBinaryRead(reader, reader.uint32(), options, message.fansclubInfo);
                    break;
                case /* bool for_linkmic */ 7:
                    message.forLinkmic = reader.bool();
                    break;
                case /* bool doodle */ 8:
                    message.doodle = reader.bool();
                    break;
                case /* bool for_fansclub */ 9:
                    message.forFansclub = reader.bool();
                    break;
                case /* bool combo */ 10:
                    message.combo = reader.bool();
                    break;
                case /* int32 type */ 11:
                    message.type = reader.int32();
                    break;
                case /* int32 diamond_count */ 12:
                    message.diamondCount = reader.int32();
                    break;
                case /* bool is_displayed_on_panel */ 13:
                    message.isDisplayedOnPanel = reader.bool();
                    break;
                case /* int64 primary_effect_id */ 14:
                    message.primaryEffectId = reader.int64().toBigInt();
                    break;
                case /* data.Image gift_label_icon */ 15:
                    message.giftLabelIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.giftLabelIcon);
                    break;
                case /* string name */ 16:
                    message.name = reader.string();
                    break;
                case /* string region */ 17:
                    message.region = reader.string();
                    break;
                case /* string manual */ 18:
                    message.manual = reader.string();
                    break;
                case /* bool for_custom */ 19:
                    message.forCustom = reader.bool();
                    break;
                case /* data.Image icon */ 21:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int32 action_type */ 22:
                    message.actionType = reader.int32();
                    break;
                case /* int32 watermelon_seeds */ 23:
                    message.watermelonSeeds = reader.int32();
                    break;
                case /* string gold_effect */ 24:
                    message.goldEffect = reader.string();
                    break;
                case /* repeated data.LuckyMoneyGiftMeta subs */ 25:
                    message.subs.push(LuckyMoneyGiftMeta.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 golden_beans */ 26:
                    message.goldenBeans = reader.int64().toBigInt();
                    break;
                case /* int64 honor_level */ 27:
                    message.honorLevel = reader.int64().toBigInt();
                    break;
                case /* int32 item_type */ 28:
                    message.itemType = reader.int32();
                    break;
                case /* string scheme_url */ 29:
                    message.schemeUrl = reader.string();
                    break;
                case /* data.GiftPanelOperation gift_operation */ 30:
                    message.giftOperation = GiftPanelOperation.internalBinaryRead(reader, reader.uint32(), options, message.giftOperation);
                    break;
                case /* string event_name */ 31:
                    message.eventName = reader.string();
                    break;
                case /* int64 noble_level */ 32:
                    message.nobleLevel = reader.int64().toBigInt();
                    break;
                case /* string guide_url */ 33:
                    message.guideUrl = reader.string();
                    break;
                case /* bool punish_medicine */ 34:
                    message.punishMedicine = reader.bool();
                    break;
                case /* bool for_portal */ 35:
                    message.forPortal = reader.bool();
                    break;
                case /* string business_text */ 36:
                    message.businessText = reader.string();
                    break;
                case /* bool cny_gift */ 37:
                    message.cnyGift = reader.bool();
                    break;
                case /* int64 app_id */ 38:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* int64 vip_level */ 39:
                    message.vipLevel = reader.int64().toBigInt();
                    break;
                case /* bool is_gray */ 40:
                    message.isGray = reader.bool();
                    break;
                case /* string gray_scheme_url */ 41:
                    message.graySchemeUrl = reader.string();
                    break;
                case /* int64 gift_scene */ 42:
                    message.giftScene = reader.int64().toBigInt();
                    break;
                case /* data.GiftBanner gift_banner */ 43:
                    message.giftBanner = GiftBanner.internalBinaryRead(reader, reader.uint32(), options, message.giftBanner);
                    break;
                case /* repeated string trigger_words */ 44:
                    message.triggerWords.push(reader.string());
                    break;
                case /* repeated data.GiftBuffInfo gift_buff_infos */ 45:
                    message.giftBuffInfos.push(GiftBuffInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool for_first_recharge */ 46:
                    message.forFirstRecharge = reader.bool();
                    break;
                case /* data.Image dynamic_img_for_selected */ 47:
                    message.dynamicImgForSelected = Image.internalBinaryRead(reader, reader.uint32(), options, message.dynamicImgForSelected);
                    break;
                case /* int32 after_send_action */ 48:
                    message.afterSendAction = reader.int32();
                    break;
                case /* int64 gift_offline_time */ 49:
                    message.giftOfflineTime = reader.int64().toBigInt();
                    break;
                case /* string top_bar_text */ 50:
                    message.topBarText = reader.string();
                    break;
                case /* data.Image top_right_avatar */ 51:
                    message.topRightAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.topRightAvatar);
                    break;
                case /* string banner_scheme_url */ 52:
                    message.bannerSchemeUrl = reader.string();
                    break;
                case /* bool is_locked */ 53:
                    message.isLocked = reader.bool();
                    break;
                case /* int64 req_extra_type */ 54:
                    message.reqExtraType = reader.int64().toBigInt();
                    break;
                case /* repeated int64 asset_ids */ 55:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.assetIds.push(reader.int64().toBigInt());
                    else
                        message.assetIds.push(reader.int64().toBigInt());
                    break;
                case /* data.GiftPreviewInfo gift_preview_info */ 56:
                    message.giftPreviewInfo = GiftPreviewInfo.internalBinaryRead(reader, reader.uint32(), options, message.giftPreviewInfo);
                    break;
                case /* data.GiftTip gift_tip */ 57:
                    message.giftTip = GiftTip.internalBinaryRead(reader, reader.uint32(), options, message.giftTip);
                    break;
                case /* int32 need_sweep_light_count */ 58:
                    message.needSweepLightCount = reader.int32();
                    break;
                case /* repeated data.GiftGroupInfo group_info */ 59:
                    message.groupInfo.push(GiftGroupInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Text bottom_text */ 60:
                    message.bottomText = Text.internalBinaryRead(reader, reader.uint32(), options, message.bottomText);
                    break;
                case /* int32 mystery_shop_status */ 61:
                    message.mysteryShopStatus = reader.int32();
                    break;
                case /* repeated int64 optional_asset_ids */ 62:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.optionalAssetIds.push(reader.int64().toBigInt());
                    else
                        message.optionalAssetIds.push(reader.int64().toBigInt());
                    break;
                case /* bool disable_wish_list */ 63:
                    message.disableWishList = reader.bool();
                    break;
                case /* data.GiftStruct.GiftMsgBoard gift_msg_board */ 64:
                    message.giftMsgBoard = GiftStruct_GiftMsgBoard.internalBinaryRead(reader, reader.uint32(), options, message.giftMsgBoard);
                    break;
                case /* data.EmojiInteractResource emoji_interact_resource */ 65:
                    message.emojiInteractResource = EmojiInteractResource.internalBinaryRead(reader, reader.uint32(), options, message.emojiInteractResource);
                    break;
                case /* bool tray_dynamic_img_flippable */ 66:
                    message.trayDynamicImgFlippable = reader.bool();
                    break;
                case /* int64 pico_show_action */ 67:
                    message.picoShowAction = reader.int64().toBigInt();
                    break;
                case /* int64 selected_dynamic_effect */ 68:
                    message.selectedDynamicEffect = reader.int64().toBigInt();
                    break;
                case /* data.GiftTouchLabel gift_touch_label */ 69:
                    message.giftTouchLabel = GiftTouchLabel.internalBinaryRead(reader, reader.uint32(), options, message.giftTouchLabel);
                    break;
                case /* data.GiftUnselectedBottomInfo unselected_bottom_info */ 70:
                    message.unselectedBottomInfo = GiftUnselectedBottomInfo.internalBinaryRead(reader, reader.uint32(), options, message.unselectedBottomInfo);
                    break;
                case /* data.GiftConfirmInfo gift_confirm_info */ 71:
                    message.giftConfirmInfo = GiftConfirmInfo.internalBinaryRead(reader, reader.uint32(), options, message.giftConfirmInfo);
                    break;
                case /* int32 biz_type */ 72:
                    message.bizType = reader.int32();
                    break;
                case /* data.GoodsBizItem biz_item */ 73:
                    message.bizItem = GoodsBizItem.internalBinaryRead(reader, reader.uint32(), options, message.bizItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image image = 1; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string describe = 2; */
        if (message.describe !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.describe);
        /* bool notify = 3; */
        if (message.notify !== false)
            writer.tag(3, WireType.Varint).bool(message.notify);
        /* int64 duration = 4; */
        if (message.duration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.duration);
        /* int64 id = 5; */
        if (message.id !== 0n)
            writer.tag(5, WireType.Varint).int64(message.id);
        /* data.GiftStruct.GiftStructFansClubInfo fansclub_info = 6; */
        if (message.fansclubInfo)
            GiftStruct_GiftStructFansClubInfo.internalBinaryWrite(message.fansclubInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool for_linkmic = 7; */
        if (message.forLinkmic !== false)
            writer.tag(7, WireType.Varint).bool(message.forLinkmic);
        /* bool doodle = 8; */
        if (message.doodle !== false)
            writer.tag(8, WireType.Varint).bool(message.doodle);
        /* bool for_fansclub = 9; */
        if (message.forFansclub !== false)
            writer.tag(9, WireType.Varint).bool(message.forFansclub);
        /* bool combo = 10; */
        if (message.combo !== false)
            writer.tag(10, WireType.Varint).bool(message.combo);
        /* int32 type = 11; */
        if (message.type !== 0)
            writer.tag(11, WireType.Varint).int32(message.type);
        /* int32 diamond_count = 12; */
        if (message.diamondCount !== 0)
            writer.tag(12, WireType.Varint).int32(message.diamondCount);
        /* bool is_displayed_on_panel = 13; */
        if (message.isDisplayedOnPanel !== false)
            writer.tag(13, WireType.Varint).bool(message.isDisplayedOnPanel);
        /* int64 primary_effect_id = 14; */
        if (message.primaryEffectId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.primaryEffectId);
        /* data.Image gift_label_icon = 15; */
        if (message.giftLabelIcon)
            Image.internalBinaryWrite(message.giftLabelIcon, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string name = 16; */
        if (message.name !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.name);
        /* string region = 17; */
        if (message.region !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.region);
        /* string manual = 18; */
        if (message.manual !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.manual);
        /* bool for_custom = 19; */
        if (message.forCustom !== false)
            writer.tag(19, WireType.Varint).bool(message.forCustom);
        /* data.Image icon = 21; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* int32 action_type = 22; */
        if (message.actionType !== 0)
            writer.tag(22, WireType.Varint).int32(message.actionType);
        /* int32 watermelon_seeds = 23; */
        if (message.watermelonSeeds !== 0)
            writer.tag(23, WireType.Varint).int32(message.watermelonSeeds);
        /* string gold_effect = 24; */
        if (message.goldEffect !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.goldEffect);
        /* repeated data.LuckyMoneyGiftMeta subs = 25; */
        for (let i = 0; i < message.subs.length; i++)
            LuckyMoneyGiftMeta.internalBinaryWrite(message.subs[i], writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* int64 golden_beans = 26; */
        if (message.goldenBeans !== 0n)
            writer.tag(26, WireType.Varint).int64(message.goldenBeans);
        /* int64 honor_level = 27; */
        if (message.honorLevel !== 0n)
            writer.tag(27, WireType.Varint).int64(message.honorLevel);
        /* int32 item_type = 28; */
        if (message.itemType !== 0)
            writer.tag(28, WireType.Varint).int32(message.itemType);
        /* string scheme_url = 29; */
        if (message.schemeUrl !== "")
            writer.tag(29, WireType.LengthDelimited).string(message.schemeUrl);
        /* data.GiftPanelOperation gift_operation = 30; */
        if (message.giftOperation)
            GiftPanelOperation.internalBinaryWrite(message.giftOperation, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* string event_name = 31; */
        if (message.eventName !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.eventName);
        /* int64 noble_level = 32; */
        if (message.nobleLevel !== 0n)
            writer.tag(32, WireType.Varint).int64(message.nobleLevel);
        /* string guide_url = 33; */
        if (message.guideUrl !== "")
            writer.tag(33, WireType.LengthDelimited).string(message.guideUrl);
        /* bool punish_medicine = 34; */
        if (message.punishMedicine !== false)
            writer.tag(34, WireType.Varint).bool(message.punishMedicine);
        /* bool for_portal = 35; */
        if (message.forPortal !== false)
            writer.tag(35, WireType.Varint).bool(message.forPortal);
        /* string business_text = 36; */
        if (message.businessText !== "")
            writer.tag(36, WireType.LengthDelimited).string(message.businessText);
        /* bool cny_gift = 37; */
        if (message.cnyGift !== false)
            writer.tag(37, WireType.Varint).bool(message.cnyGift);
        /* int64 app_id = 38; */
        if (message.appId !== 0n)
            writer.tag(38, WireType.Varint).int64(message.appId);
        /* int64 vip_level = 39; */
        if (message.vipLevel !== 0n)
            writer.tag(39, WireType.Varint).int64(message.vipLevel);
        /* bool is_gray = 40; */
        if (message.isGray !== false)
            writer.tag(40, WireType.Varint).bool(message.isGray);
        /* string gray_scheme_url = 41; */
        if (message.graySchemeUrl !== "")
            writer.tag(41, WireType.LengthDelimited).string(message.graySchemeUrl);
        /* int64 gift_scene = 42; */
        if (message.giftScene !== 0n)
            writer.tag(42, WireType.Varint).int64(message.giftScene);
        /* data.GiftBanner gift_banner = 43; */
        if (message.giftBanner)
            GiftBanner.internalBinaryWrite(message.giftBanner, writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* repeated string trigger_words = 44; */
        for (let i = 0; i < message.triggerWords.length; i++)
            writer.tag(44, WireType.LengthDelimited).string(message.triggerWords[i]);
        /* repeated data.GiftBuffInfo gift_buff_infos = 45; */
        for (let i = 0; i < message.giftBuffInfos.length; i++)
            GiftBuffInfo.internalBinaryWrite(message.giftBuffInfos[i], writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* bool for_first_recharge = 46; */
        if (message.forFirstRecharge !== false)
            writer.tag(46, WireType.Varint).bool(message.forFirstRecharge);
        /* data.Image dynamic_img_for_selected = 47; */
        if (message.dynamicImgForSelected)
            Image.internalBinaryWrite(message.dynamicImgForSelected, writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* int32 after_send_action = 48; */
        if (message.afterSendAction !== 0)
            writer.tag(48, WireType.Varint).int32(message.afterSendAction);
        /* int64 gift_offline_time = 49; */
        if (message.giftOfflineTime !== 0n)
            writer.tag(49, WireType.Varint).int64(message.giftOfflineTime);
        /* string top_bar_text = 50; */
        if (message.topBarText !== "")
            writer.tag(50, WireType.LengthDelimited).string(message.topBarText);
        /* data.Image top_right_avatar = 51; */
        if (message.topRightAvatar)
            Image.internalBinaryWrite(message.topRightAvatar, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* string banner_scheme_url = 52; */
        if (message.bannerSchemeUrl !== "")
            writer.tag(52, WireType.LengthDelimited).string(message.bannerSchemeUrl);
        /* bool is_locked = 53; */
        if (message.isLocked !== false)
            writer.tag(53, WireType.Varint).bool(message.isLocked);
        /* int64 req_extra_type = 54; */
        if (message.reqExtraType !== 0n)
            writer.tag(54, WireType.Varint).int64(message.reqExtraType);
        /* repeated int64 asset_ids = 55; */
        if (message.assetIds.length) {
            writer.tag(55, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.assetIds.length; i++)
                writer.int64(message.assetIds[i]);
            writer.join();
        }
        /* data.GiftPreviewInfo gift_preview_info = 56; */
        if (message.giftPreviewInfo)
            GiftPreviewInfo.internalBinaryWrite(message.giftPreviewInfo, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* data.GiftTip gift_tip = 57; */
        if (message.giftTip)
            GiftTip.internalBinaryWrite(message.giftTip, writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* int32 need_sweep_light_count = 58; */
        if (message.needSweepLightCount !== 0)
            writer.tag(58, WireType.Varint).int32(message.needSweepLightCount);
        /* repeated data.GiftGroupInfo group_info = 59; */
        for (let i = 0; i < message.groupInfo.length; i++)
            GiftGroupInfo.internalBinaryWrite(message.groupInfo[i], writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* data.Text bottom_text = 60; */
        if (message.bottomText)
            Text.internalBinaryWrite(message.bottomText, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* int32 mystery_shop_status = 61; */
        if (message.mysteryShopStatus !== 0)
            writer.tag(61, WireType.Varint).int32(message.mysteryShopStatus);
        /* repeated int64 optional_asset_ids = 62; */
        if (message.optionalAssetIds.length) {
            writer.tag(62, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.optionalAssetIds.length; i++)
                writer.int64(message.optionalAssetIds[i]);
            writer.join();
        }
        /* bool disable_wish_list = 63; */
        if (message.disableWishList !== false)
            writer.tag(63, WireType.Varint).bool(message.disableWishList);
        /* data.GiftStruct.GiftMsgBoard gift_msg_board = 64; */
        if (message.giftMsgBoard)
            GiftStruct_GiftMsgBoard.internalBinaryWrite(message.giftMsgBoard, writer.tag(64, WireType.LengthDelimited).fork(), options).join();
        /* data.EmojiInteractResource emoji_interact_resource = 65; */
        if (message.emojiInteractResource)
            EmojiInteractResource.internalBinaryWrite(message.emojiInteractResource, writer.tag(65, WireType.LengthDelimited).fork(), options).join();
        /* bool tray_dynamic_img_flippable = 66; */
        if (message.trayDynamicImgFlippable !== false)
            writer.tag(66, WireType.Varint).bool(message.trayDynamicImgFlippable);
        /* int64 pico_show_action = 67; */
        if (message.picoShowAction !== 0n)
            writer.tag(67, WireType.Varint).int64(message.picoShowAction);
        /* int64 selected_dynamic_effect = 68; */
        if (message.selectedDynamicEffect !== 0n)
            writer.tag(68, WireType.Varint).int64(message.selectedDynamicEffect);
        /* data.GiftTouchLabel gift_touch_label = 69; */
        if (message.giftTouchLabel)
            GiftTouchLabel.internalBinaryWrite(message.giftTouchLabel, writer.tag(69, WireType.LengthDelimited).fork(), options).join();
        /* data.GiftUnselectedBottomInfo unselected_bottom_info = 70; */
        if (message.unselectedBottomInfo)
            GiftUnselectedBottomInfo.internalBinaryWrite(message.unselectedBottomInfo, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        /* data.GiftConfirmInfo gift_confirm_info = 71; */
        if (message.giftConfirmInfo)
            GiftConfirmInfo.internalBinaryWrite(message.giftConfirmInfo, writer.tag(71, WireType.LengthDelimited).fork(), options).join();
        /* int32 biz_type = 72; */
        if (message.bizType !== 0)
            writer.tag(72, WireType.Varint).int32(message.bizType);
        /* data.GoodsBizItem biz_item = 73; */
        if (message.bizItem)
            GoodsBizItem.internalBinaryWrite(message.bizItem, writer.tag(73, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftStruct
 */
export const GiftStruct = new GiftStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftStruct_GiftStructFansClubInfo$Type extends MessageType<GiftStruct_GiftStructFansClubInfo> {
    constructor() {
        super("data.GiftStruct.GiftStructFansClubInfo", [
            { no: 1, name: "min_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "insert_pos", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiftStruct_GiftStructFansClubInfo>): GiftStruct_GiftStructFansClubInfo {
        const message = { minLevel: 0, insertPos: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftStruct_GiftStructFansClubInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftStruct_GiftStructFansClubInfo): GiftStruct_GiftStructFansClubInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 min_level */ 1:
                    message.minLevel = reader.int32();
                    break;
                case /* int32 insert_pos */ 2:
                    message.insertPos = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftStruct_GiftStructFansClubInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 min_level = 1; */
        if (message.minLevel !== 0)
            writer.tag(1, WireType.Varint).int32(message.minLevel);
        /* int32 insert_pos = 2; */
        if (message.insertPos !== 0)
            writer.tag(2, WireType.Varint).int32(message.insertPos);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftStruct.GiftStructFansClubInfo
 */
export const GiftStruct_GiftStructFansClubInfo = new GiftStruct_GiftStructFansClubInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftStruct_GiftMsgBoard$Type extends MessageType<GiftStruct_GiftMsgBoard> {
    constructor() {
        super("data.GiftStruct.GiftMsgBoard", [
            { no: 1, name: "for_msg_board", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "prompt_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftStruct_GiftMsgBoard>): GiftStruct_GiftMsgBoard {
        const message = { forMsgBoard: false, promptText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftStruct_GiftMsgBoard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftStruct_GiftMsgBoard): GiftStruct_GiftMsgBoard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool for_msg_board */ 1:
                    message.forMsgBoard = reader.bool();
                    break;
                case /* string prompt_text */ 2:
                    message.promptText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftStruct_GiftMsgBoard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool for_msg_board = 1; */
        if (message.forMsgBoard !== false)
            writer.tag(1, WireType.Varint).bool(message.forMsgBoard);
        /* string prompt_text = 2; */
        if (message.promptText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.promptText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftStruct.GiftMsgBoard
 */
export const GiftStruct_GiftMsgBoard = new GiftStruct_GiftMsgBoard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoodsBizItem$Type extends MessageType<GoodsBizItem> {
    constructor() {
        super("data.GoodsBizItem", [
            { no: 1, name: "goods", kind: "message", T: () => BizGoods },
            { no: 2, name: "entrance", kind: "message", T: () => BizEntrance }
        ]);
    }
    create(value?: PartialMessage<GoodsBizItem>): GoodsBizItem {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GoodsBizItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GoodsBizItem): GoodsBizItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.BizGoods goods */ 1:
                    message.goods = BizGoods.internalBinaryRead(reader, reader.uint32(), options, message.goods);
                    break;
                case /* data.BizEntrance entrance */ 2:
                    message.entrance = BizEntrance.internalBinaryRead(reader, reader.uint32(), options, message.entrance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GoodsBizItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.BizGoods goods = 1; */
        if (message.goods)
            BizGoods.internalBinaryWrite(message.goods, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.BizEntrance entrance = 2; */
        if (message.entrance)
            BizEntrance.internalBinaryWrite(message.entrance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GoodsBizItem
 */
export const GoodsBizItem = new GoodsBizItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizGoods$Type extends MessageType<BizGoods> {
    constructor() {
        super("data.BizGoods", [
            { no: 1, name: "goods", kind: "message", T: () => GoodsStruct },
            { no: 2, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "consume_scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BizGoods>): BizGoods {
        const message = { extra: "", consumeScene: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BizGoods>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BizGoods): BizGoods {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.GoodsStruct goods */ 1:
                    message.goods = GoodsStruct.internalBinaryRead(reader, reader.uint32(), options, message.goods);
                    break;
                case /* string extra */ 2:
                    message.extra = reader.string();
                    break;
                case /* int64 consume_scene */ 3:
                    message.consumeScene = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BizGoods, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.GoodsStruct goods = 1; */
        if (message.goods)
            GoodsStruct.internalBinaryWrite(message.goods, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 2; */
        if (message.extra !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extra);
        /* int64 consume_scene = 3; */
        if (message.consumeScene !== 0n)
            writer.tag(3, WireType.Varint).int64(message.consumeScene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BizGoods
 */
export const BizGoods = new BizGoods$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizEntrance$Type extends MessageType<BizEntrance> {
    constructor() {
        super("data.BizEntrance", [
            { no: 1, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BizEntrance>): BizEntrance {
        const message = { schemeUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BizEntrance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BizEntrance): BizEntrance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scheme_url */ 1:
                    message.schemeUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BizEntrance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scheme_url = 1; */
        if (message.schemeUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schemeUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BizEntrance
 */
export const BizEntrance = new BizEntrance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftConfirmInfo$Type extends MessageType<GiftConfirmInfo> {
    constructor() {
        super("data.GiftConfirmInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cancel_button_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "confirm_button_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "confirm_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiftConfirmInfo>): GiftConfirmInfo {
        const message = { title: "", text: "", cancelButtonText: "", confirmButtonText: "", confirmType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftConfirmInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftConfirmInfo): GiftConfirmInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string cancel_button_text */ 3:
                    message.cancelButtonText = reader.string();
                    break;
                case /* string confirm_button_text */ 4:
                    message.confirmButtonText = reader.string();
                    break;
                case /* int32 confirm_type */ 5:
                    message.confirmType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftConfirmInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string cancel_button_text = 3; */
        if (message.cancelButtonText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cancelButtonText);
        /* string confirm_button_text = 4; */
        if (message.confirmButtonText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.confirmButtonText);
        /* int32 confirm_type = 5; */
        if (message.confirmType !== 0)
            writer.tag(5, WireType.Varint).int32(message.confirmType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftConfirmInfo
 */
export const GiftConfirmInfo = new GiftConfirmInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftUnselectedBottomInfo$Type extends MessageType<GiftUnselectedBottomInfo> {
    constructor() {
        super("data.GiftUnselectedBottomInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftUnselectedBottomInfo>): GiftUnselectedBottomInfo {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftUnselectedBottomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftUnselectedBottomInfo): GiftUnselectedBottomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftUnselectedBottomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftUnselectedBottomInfo
 */
export const GiftUnselectedBottomInfo = new GiftUnselectedBottomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftTouchLabel$Type extends MessageType<GiftTouchLabel> {
    constructor() {
        super("data.GiftTouchLabel", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "unique_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftTouchLabel>): GiftTouchLabel {
        const message = { uniqueKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftTouchLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftTouchLabel): GiftTouchLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string unique_key */ 2:
                    message.uniqueKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftTouchLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string unique_key = 2; */
        if (message.uniqueKey !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uniqueKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftTouchLabel
 */
export const GiftTouchLabel = new GiftTouchLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftGroupInfo$Type extends MessageType<GiftGroupInfo> {
    constructor() {
        super("data.GiftGroupInfo", [
            { no: 1, name: "group_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "group_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftGroupInfo>): GiftGroupInfo {
        const message = { groupCount: 0, groupText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftGroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftGroupInfo): GiftGroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 group_count */ 1:
                    message.groupCount = reader.int32();
                    break;
                case /* string group_text */ 2:
                    message.groupText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftGroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 group_count = 1; */
        if (message.groupCount !== 0)
            writer.tag(1, WireType.Varint).int32(message.groupCount);
        /* string group_text = 2; */
        if (message.groupText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftGroupInfo
 */
export const GiftGroupInfo = new GiftGroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftPanelOperation$Type extends MessageType<GiftPanelOperation> {
    constructor() {
        super("data.GiftPanelOperation", [
            { no: 1, name: "left_image", kind: "message", T: () => Image },
            { no: 2, name: "right_image", kind: "message", T: () => Image },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "title_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "event_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftPanelOperation>): GiftPanelOperation {
        const message = { title: "", titleColor: "", titleSize: 0n, schemeUrl: "", eventName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftPanelOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftPanelOperation): GiftPanelOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image left_image */ 1:
                    message.leftImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.leftImage);
                    break;
                case /* data.Image right_image */ 2:
                    message.rightImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.rightImage);
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string title_color */ 4:
                    message.titleColor = reader.string();
                    break;
                case /* int64 title_size */ 5:
                    message.titleSize = reader.int64().toBigInt();
                    break;
                case /* string scheme_url */ 6:
                    message.schemeUrl = reader.string();
                    break;
                case /* string event_name */ 7:
                    message.eventName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftPanelOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image left_image = 1; */
        if (message.leftImage)
            Image.internalBinaryWrite(message.leftImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image right_image = 2; */
        if (message.rightImage)
            Image.internalBinaryWrite(message.rightImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string title_color = 4; */
        if (message.titleColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.titleColor);
        /* int64 title_size = 5; */
        if (message.titleSize !== 0n)
            writer.tag(5, WireType.Varint).int64(message.titleSize);
        /* string scheme_url = 6; */
        if (message.schemeUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.schemeUrl);
        /* string event_name = 7; */
        if (message.eventName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.eventName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftPanelOperation
 */
export const GiftPanelOperation = new GiftPanelOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FreeGift$Type extends MessageType<FreeGift> {
    constructor() {
        super("data.FreeGift", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "repeat_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "fan_tickets", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "waterwmlon", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FreeGift>): FreeGift {
        const message = { id: 0n, count: 0n, content: "", groupId: 0n, repeatCount: 0n, fanTickets: 0n, waterwmlon: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FreeGift>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FreeGift): FreeGift {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 group_id */ 4:
                    message.groupId = reader.int64().toBigInt();
                    break;
                case /* int64 repeat_count */ 5:
                    message.repeatCount = reader.int64().toBigInt();
                    break;
                case /* int64 fan_tickets */ 6:
                    message.fanTickets = reader.int64().toBigInt();
                    break;
                case /* int64 waterwmlon */ 7:
                    message.waterwmlon = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FreeGift, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 group_id = 4; */
        if (message.groupId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.groupId);
        /* int64 repeat_count = 5; */
        if (message.repeatCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.repeatCount);
        /* int64 fan_tickets = 6; */
        if (message.fanTickets !== 0n)
            writer.tag(6, WireType.Varint).int64(message.fanTickets);
        /* int64 waterwmlon = 7; */
        if (message.waterwmlon !== 0n)
            writer.tag(7, WireType.Varint).int64(message.waterwmlon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FreeGift
 */
export const FreeGift = new FreeGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyMoneyGiftMeta$Type extends MessageType<LuckyMoneyGiftMeta> {
    constructor() {
        super("data.LuckyMoneyGiftMeta", [
            { no: 1, name: "image", kind: "message", T: () => Image },
            { no: 2, name: "describe", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "diamond_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LuckyMoneyGiftMeta>): LuckyMoneyGiftMeta {
        const message = { describe: "", id: 0n, diamondCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyMoneyGiftMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyMoneyGiftMeta): LuckyMoneyGiftMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image image */ 1:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string describe */ 2:
                    message.describe = reader.string();
                    break;
                case /* int64 id */ 3:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int32 diamond_count */ 4:
                    message.diamondCount = reader.int32();
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyMoneyGiftMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image image = 1; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string describe = 2; */
        if (message.describe !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.describe);
        /* int64 id = 3; */
        if (message.id !== 0n)
            writer.tag(3, WireType.Varint).int64(message.id);
        /* int32 diamond_count = 4; */
        if (message.diamondCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.diamondCount);
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LuckyMoneyGiftMeta
 */
export const LuckyMoneyGiftMeta = new LuckyMoneyGiftMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorGiftData$Type extends MessageType<AnchorGiftData> {
    constructor() {
        super("data.AnchorGiftData", [
            { no: 1, name: "anchor_diy_origin_img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<AnchorGiftData>): AnchorGiftData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorGiftData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorGiftData): AnchorGiftData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image anchor_diy_origin_img */ 1:
                    message.anchorDiyOriginImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.anchorDiyOriginImg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorGiftData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image anchor_diy_origin_img = 1; */
        if (message.anchorDiyOriginImg)
            Image.internalBinaryWrite(message.anchorDiyOriginImg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnchorGiftData
 */
export const AnchorGiftData = new AnchorGiftData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftBanner$Type extends MessageType<GiftBanner> {
    constructor() {
        super("data.GiftBanner", [
            { no: 1, name: "display_text", kind: "message", T: () => Text },
            { no: 2, name: "display_text_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "box_img", kind: "message", T: () => Image },
            { no: 4, name: "bg_img", kind: "message", T: () => Image },
            { no: 5, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "animate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "box_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "available_box_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GiftBanner>): GiftBanner {
        const message = { displayTextBgColor: "", schemeUrl: "", animate: false, boxId: 0n, availableBoxCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftBanner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftBanner): GiftBanner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text display_text */ 1:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* string display_text_bg_color */ 2:
                    message.displayTextBgColor = reader.string();
                    break;
                case /* data.Image box_img */ 3:
                    message.boxImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.boxImg);
                    break;
                case /* data.Image bg_img */ 4:
                    message.bgImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgImg);
                    break;
                case /* string scheme_url */ 5:
                    message.schemeUrl = reader.string();
                    break;
                case /* bool animate */ 6:
                    message.animate = reader.bool();
                    break;
                case /* int64 box_id */ 7:
                    message.boxId = reader.int64().toBigInt();
                    break;
                case /* int64 available_box_count */ 8:
                    message.availableBoxCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftBanner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text display_text = 1; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string display_text_bg_color = 2; */
        if (message.displayTextBgColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayTextBgColor);
        /* data.Image box_img = 3; */
        if (message.boxImg)
            Image.internalBinaryWrite(message.boxImg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image bg_img = 4; */
        if (message.bgImg)
            Image.internalBinaryWrite(message.bgImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string scheme_url = 5; */
        if (message.schemeUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.schemeUrl);
        /* bool animate = 6; */
        if (message.animate !== false)
            writer.tag(6, WireType.Varint).bool(message.animate);
        /* int64 box_id = 7; */
        if (message.boxId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.boxId);
        /* int64 available_box_count = 8; */
        if (message.availableBoxCount !== 0n)
            writer.tag(8, WireType.Varint).int64(message.availableBoxCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftBanner
 */
export const GiftBanner = new GiftBanner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffectMixImageInfo$Type extends MessageType<EffectMixImageInfo> {
    constructor() {
        super("data.EffectMixImageInfo", [
            { no: 1, name: "image_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mix_image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<EffectMixImageInfo>): EffectMixImageInfo {
        const message = { imageKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffectMixImageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffectMixImageInfo): EffectMixImageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image_key */ 1:
                    message.imageKey = reader.string();
                    break;
                case /* data.Image mix_image */ 2:
                    message.mixImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.mixImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffectMixImageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image_key = 1; */
        if (message.imageKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imageKey);
        /* data.Image mix_image = 2; */
        if (message.mixImage)
            Image.internalBinaryWrite(message.mixImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EffectMixImageInfo
 */
export const EffectMixImageInfo = new EffectMixImageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetEffectMixInfo$Type extends MessageType<AssetEffectMixInfo> {
    constructor() {
        super("data.AssetEffectMixInfo", [
            { no: 1, name: "effect_mix_image_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EffectMixImageInfo }
        ]);
    }
    create(value?: PartialMessage<AssetEffectMixInfo>): AssetEffectMixInfo {
        const message = { effectMixImageInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssetEffectMixInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssetEffectMixInfo): AssetEffectMixInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.EffectMixImageInfo effect_mix_image_infos */ 1:
                    message.effectMixImageInfos.push(EffectMixImageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssetEffectMixInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.EffectMixImageInfo effect_mix_image_infos = 1; */
        for (let i = 0; i < message.effectMixImageInfos.length; i++)
            EffectMixImageInfo.internalBinaryWrite(message.effectMixImageInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AssetEffectMixInfo
 */
export const AssetEffectMixInfo = new AssetEffectMixInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftTrayInfo$Type extends MessageType<GiftTrayInfo> {
    constructor() {
        super("data.GiftTrayInfo", [
            { no: 1, name: "tray_display_text", kind: "message", T: () => Text },
            { no: 2, name: "tray_base_img", kind: "message", T: () => Image },
            { no: 3, name: "tray_head_img", kind: "message", T: () => Image },
            { no: 4, name: "tray_right_img", kind: "message", T: () => Image },
            { no: 5, name: "tray_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "tray_dynamic_img", kind: "message", T: () => Image },
            { no: 7, name: "tray_schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "tray_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "tray_base_img_v2", kind: "message", T: () => Image },
            { no: 10, name: "tray_right_img_v2", kind: "message", T: () => Image },
            { no: 11, name: "use_high_layer", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "tray_slide_rate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "tray_pre_effect", kind: "message", T: () => TrayPreEffect },
            { no: 16, name: "tray_post_effect", kind: "message", T: () => TrayPostEffect },
            { no: 17, name: "origin_gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "buff_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "toolbar_card_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftTrayInfo>): GiftTrayInfo {
        const message = { trayLevel: 0n, traySchemaUrl: "", trayType: 0, useHighLayer: false, duration: 0n, toast: "", traySlideRate: 0, originGiftId: 0n, buffLevel: 0n, toolbarCardName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftTrayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftTrayInfo): GiftTrayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text tray_display_text */ 1:
                    message.trayDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.trayDisplayText);
                    break;
                case /* data.Image tray_base_img */ 2:
                    message.trayBaseImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.trayBaseImg);
                    break;
                case /* data.Image tray_head_img */ 3:
                    message.trayHeadImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.trayHeadImg);
                    break;
                case /* data.Image tray_right_img */ 4:
                    message.trayRightImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.trayRightImg);
                    break;
                case /* int64 tray_level */ 5:
                    message.trayLevel = reader.int64().toBigInt();
                    break;
                case /* data.Image tray_dynamic_img */ 6:
                    message.trayDynamicImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.trayDynamicImg);
                    break;
                case /* string tray_schema_url */ 7:
                    message.traySchemaUrl = reader.string();
                    break;
                case /* int32 tray_type */ 8:
                    message.trayType = reader.int32();
                    break;
                case /* data.Image tray_base_img_v2 */ 9:
                    message.trayBaseImgV2 = Image.internalBinaryRead(reader, reader.uint32(), options, message.trayBaseImgV2);
                    break;
                case /* data.Image tray_right_img_v2 */ 10:
                    message.trayRightImgV2 = Image.internalBinaryRead(reader, reader.uint32(), options, message.trayRightImgV2);
                    break;
                case /* bool use_high_layer */ 11:
                    message.useHighLayer = reader.bool();
                    break;
                case /* int64 duration */ 12:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string toast */ 13:
                    message.toast = reader.string();
                    break;
                case /* int32 tray_slide_rate */ 14:
                    message.traySlideRate = reader.int32();
                    break;
                case /* data.TrayPreEffect tray_pre_effect */ 15:
                    message.trayPreEffect = TrayPreEffect.internalBinaryRead(reader, reader.uint32(), options, message.trayPreEffect);
                    break;
                case /* data.TrayPostEffect tray_post_effect */ 16:
                    message.trayPostEffect = TrayPostEffect.internalBinaryRead(reader, reader.uint32(), options, message.trayPostEffect);
                    break;
                case /* int64 origin_gift_id */ 17:
                    message.originGiftId = reader.int64().toBigInt();
                    break;
                case /* int64 buff_level */ 18:
                    message.buffLevel = reader.int64().toBigInt();
                    break;
                case /* string toolbar_card_name */ 19:
                    message.toolbarCardName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftTrayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text tray_display_text = 1; */
        if (message.trayDisplayText)
            Text.internalBinaryWrite(message.trayDisplayText, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image tray_base_img = 2; */
        if (message.trayBaseImg)
            Image.internalBinaryWrite(message.trayBaseImg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image tray_head_img = 3; */
        if (message.trayHeadImg)
            Image.internalBinaryWrite(message.trayHeadImg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image tray_right_img = 4; */
        if (message.trayRightImg)
            Image.internalBinaryWrite(message.trayRightImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 tray_level = 5; */
        if (message.trayLevel !== 0n)
            writer.tag(5, WireType.Varint).int64(message.trayLevel);
        /* data.Image tray_dynamic_img = 6; */
        if (message.trayDynamicImg)
            Image.internalBinaryWrite(message.trayDynamicImg, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string tray_schema_url = 7; */
        if (message.traySchemaUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.traySchemaUrl);
        /* int32 tray_type = 8; */
        if (message.trayType !== 0)
            writer.tag(8, WireType.Varint).int32(message.trayType);
        /* data.Image tray_base_img_v2 = 9; */
        if (message.trayBaseImgV2)
            Image.internalBinaryWrite(message.trayBaseImgV2, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image tray_right_img_v2 = 10; */
        if (message.trayRightImgV2)
            Image.internalBinaryWrite(message.trayRightImgV2, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bool use_high_layer = 11; */
        if (message.useHighLayer !== false)
            writer.tag(11, WireType.Varint).bool(message.useHighLayer);
        /* int64 duration = 12; */
        if (message.duration !== 0n)
            writer.tag(12, WireType.Varint).int64(message.duration);
        /* string toast = 13; */
        if (message.toast !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.toast);
        /* int32 tray_slide_rate = 14; */
        if (message.traySlideRate !== 0)
            writer.tag(14, WireType.Varint).int32(message.traySlideRate);
        /* data.TrayPreEffect tray_pre_effect = 15; */
        if (message.trayPreEffect)
            TrayPreEffect.internalBinaryWrite(message.trayPreEffect, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* data.TrayPostEffect tray_post_effect = 16; */
        if (message.trayPostEffect)
            TrayPostEffect.internalBinaryWrite(message.trayPostEffect, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* int64 origin_gift_id = 17; */
        if (message.originGiftId !== 0n)
            writer.tag(17, WireType.Varint).int64(message.originGiftId);
        /* int64 buff_level = 18; */
        if (message.buffLevel !== 0n)
            writer.tag(18, WireType.Varint).int64(message.buffLevel);
        /* string toolbar_card_name = 19; */
        if (message.toolbarCardName !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.toolbarCardName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftTrayInfo
 */
export const GiftTrayInfo = new GiftTrayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrayPreEffect$Type extends MessageType<TrayPreEffect> {
    constructor() {
        super("data.TrayPreEffect", [
            { no: 1, name: "pre_effect_img", kind: "message", T: () => Image },
            { no: 2, name: "tray_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "tray_ripple", kind: "message", T: () => Image },
            { no: 4, name: "pre_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pre_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "pre_effect_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrayPreEffect>): TrayPreEffect {
        const message = { trayStartTime: 0n, preSchema: "", preDuration: 0n, preEffectSource: 0, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrayPreEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrayPreEffect): TrayPreEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image pre_effect_img */ 1:
                    message.preEffectImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.preEffectImg);
                    break;
                case /* int64 tray_start_time */ 2:
                    message.trayStartTime = reader.int64().toBigInt();
                    break;
                case /* data.Image tray_ripple */ 3:
                    message.trayRipple = Image.internalBinaryRead(reader, reader.uint32(), options, message.trayRipple);
                    break;
                case /* string pre_schema */ 4:
                    message.preSchema = reader.string();
                    break;
                case /* int64 pre_duration */ 5:
                    message.preDuration = reader.int64().toBigInt();
                    break;
                case /* int32 pre_effect_source */ 6:
                    message.preEffectSource = reader.int32();
                    break;
                case /* string extra */ 7:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrayPreEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image pre_effect_img = 1; */
        if (message.preEffectImg)
            Image.internalBinaryWrite(message.preEffectImg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 tray_start_time = 2; */
        if (message.trayStartTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.trayStartTime);
        /* data.Image tray_ripple = 3; */
        if (message.trayRipple)
            Image.internalBinaryWrite(message.trayRipple, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string pre_schema = 4; */
        if (message.preSchema !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.preSchema);
        /* int64 pre_duration = 5; */
        if (message.preDuration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.preDuration);
        /* int32 pre_effect_source = 6; */
        if (message.preEffectSource !== 0)
            writer.tag(6, WireType.Varint).int32(message.preEffectSource);
        /* string extra = 7; */
        if (message.extra !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TrayPreEffect
 */
export const TrayPreEffect = new TrayPreEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrayPostEffect$Type extends MessageType<TrayPostEffect> {
    constructor() {
        super("data.TrayPostEffect", [
            { no: 1, name: "post_effect_img", kind: "message", T: () => Image },
            { no: 2, name: "post_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "post_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "post_effect_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TrayPostEffect>): TrayPostEffect {
        const message = { postSchema: "", postDuration: 0n, postEffectSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrayPostEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrayPostEffect): TrayPostEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image post_effect_img */ 1:
                    message.postEffectImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.postEffectImg);
                    break;
                case /* string post_schema */ 2:
                    message.postSchema = reader.string();
                    break;
                case /* int64 post_duration */ 3:
                    message.postDuration = reader.int64().toBigInt();
                    break;
                case /* int32 post_effect_source */ 4:
                    message.postEffectSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrayPostEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image post_effect_img = 1; */
        if (message.postEffectImg)
            Image.internalBinaryWrite(message.postEffectImg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string post_schema = 2; */
        if (message.postSchema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.postSchema);
        /* int64 post_duration = 3; */
        if (message.postDuration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.postDuration);
        /* int32 post_effect_source = 4; */
        if (message.postEffectSource !== 0)
            writer.tag(4, WireType.Varint).int32(message.postEffectSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TrayPostEffect
 */
export const TrayPostEffect = new TrayPostEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeriesPlayGift$Type extends MessageType<SeriesPlayGift> {
    constructor() {
        super("data.SeriesPlayGift", [
            { no: 1, name: "gift_struct", kind: "message", T: () => GiftStruct },
            { no: 2, name: "series_tray_info", kind: "message", T: () => SeriesTrayInfo },
            { no: 3, name: "send_together", kind: "message", T: () => SendTogether },
            { no: 4, name: "diy_item_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "anchor_gift", kind: "message", T: () => AnchorGiftData },
            { no: 6, name: "asset_effect_mix_info", kind: "message", T: () => AssetEffectMixInfo }
        ]);
    }
    create(value?: PartialMessage<SeriesPlayGift>): SeriesPlayGift {
        const message = { diyItemInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeriesPlayGift>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeriesPlayGift): SeriesPlayGift {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.GiftStruct gift_struct */ 1:
                    message.giftStruct = GiftStruct.internalBinaryRead(reader, reader.uint32(), options, message.giftStruct);
                    break;
                case /* data.SeriesTrayInfo series_tray_info */ 2:
                    message.seriesTrayInfo = SeriesTrayInfo.internalBinaryRead(reader, reader.uint32(), options, message.seriesTrayInfo);
                    break;
                case /* data.SendTogether send_together */ 3:
                    message.sendTogether = SendTogether.internalBinaryRead(reader, reader.uint32(), options, message.sendTogether);
                    break;
                case /* string diy_item_info */ 4:
                    message.diyItemInfo = reader.string();
                    break;
                case /* data.AnchorGiftData anchor_gift */ 5:
                    message.anchorGift = AnchorGiftData.internalBinaryRead(reader, reader.uint32(), options, message.anchorGift);
                    break;
                case /* data.AssetEffectMixInfo asset_effect_mix_info */ 6:
                    message.assetEffectMixInfo = AssetEffectMixInfo.internalBinaryRead(reader, reader.uint32(), options, message.assetEffectMixInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeriesPlayGift, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.GiftStruct gift_struct = 1; */
        if (message.giftStruct)
            GiftStruct.internalBinaryWrite(message.giftStruct, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.SeriesTrayInfo series_tray_info = 2; */
        if (message.seriesTrayInfo)
            SeriesTrayInfo.internalBinaryWrite(message.seriesTrayInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.SendTogether send_together = 3; */
        if (message.sendTogether)
            SendTogether.internalBinaryWrite(message.sendTogether, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string diy_item_info = 4; */
        if (message.diyItemInfo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.diyItemInfo);
        /* data.AnchorGiftData anchor_gift = 5; */
        if (message.anchorGift)
            AnchorGiftData.internalBinaryWrite(message.anchorGift, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.AssetEffectMixInfo asset_effect_mix_info = 6; */
        if (message.assetEffectMixInfo)
            AssetEffectMixInfo.internalBinaryWrite(message.assetEffectMixInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SeriesPlayGift
 */
export const SeriesPlayGift = new SeriesPlayGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeriesTrayInfo$Type extends MessageType<SeriesTrayInfo> {
    constructor() {
        super("data.SeriesTrayInfo", [
            { no: 1, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "static_img", kind: "message", T: () => Image },
            { no: 3, name: "dynamic_img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<SeriesTrayInfo>): SeriesTrayInfo {
        const message = { duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeriesTrayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeriesTrayInfo): SeriesTrayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 duration */ 1:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* data.Image static_img */ 2:
                    message.staticImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.staticImg);
                    break;
                case /* data.Image dynamic_img */ 3:
                    message.dynamicImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.dynamicImg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeriesTrayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 duration = 1; */
        if (message.duration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.duration);
        /* data.Image static_img = 2; */
        if (message.staticImg)
            Image.internalBinaryWrite(message.staticImg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image dynamic_img = 3; */
        if (message.dynamicImg)
            Image.internalBinaryWrite(message.dynamicImg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SeriesTrayInfo
 */
export const SeriesTrayInfo = new SeriesTrayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendTogether$Type extends MessageType<SendTogether> {
    constructor() {
        super("data.SendTogether", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SendTogether>): SendTogether {
        const message = { id: "", startTime: 0n, endTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendTogether>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendTogether): SendTogether {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 3:
                    message.endTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendTogether, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int64 start_time = 2; */
        if (message.startTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 3; */
        if (message.endTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SendTogether
 */
export const SendTogether = new SendTogether$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraEffect$Type extends MessageType<ExtraEffect> {
    constructor() {
        super("data.ExtraEffect", [
            { no: 1, name: "asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "display_form", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExtraEffect>): ExtraEffect {
        const message = { assetId: 0n, displayForm: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExtraEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtraEffect): ExtraEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 asset_id */ 1:
                    message.assetId = reader.int64().toBigInt();
                    break;
                case /* int32 display_form */ 2:
                    message.displayForm = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtraEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 asset_id = 1; */
        if (message.assetId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.assetId);
        /* int32 display_form = 2; */
        if (message.displayForm !== 0)
            writer.tag(2, WireType.Varint).int32(message.displayForm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ExtraEffect
 */
export const ExtraEffect = new ExtraEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoodsStruct$Type extends MessageType<GoodsStruct> {
    constructor() {
        super("data.GoodsStruct", [
            { no: 1, name: "goods_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "goods_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "icon", kind: "message", T: () => Image },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "offline_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 50, name: "options", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GoodsStruct>): GoodsStruct {
        const message = { goodsId: 0n, goodsType: 0n, name: "", diamondCount: 0n, description: "", offlineTime: 0n, extra: "", options: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GoodsStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GoodsStruct): GoodsStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 goods_id */ 1:
                    message.goodsId = reader.int64().toBigInt();
                    break;
                case /* int64 goods_type */ 2:
                    message.goodsType = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* int64 diamond_count */ 4:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* int64 offline_time */ 7:
                    message.offlineTime = reader.int64().toBigInt();
                    break;
                case /* string extra */ 8:
                    message.extra = reader.string();
                    break;
                case /* repeated int64 options */ 50:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.options.push(reader.int64().toBigInt());
                    else
                        message.options.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GoodsStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 goods_id = 1; */
        if (message.goodsId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.goodsId);
        /* int64 goods_type = 2; */
        if (message.goodsType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.goodsType);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* int64 diamond_count = 4; */
        if (message.diamondCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.diamondCount);
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* int64 offline_time = 7; */
        if (message.offlineTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.offlineTime);
        /* string extra = 8; */
        if (message.extra !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.extra);
        /* repeated int64 options = 50; */
        if (message.options.length) {
            writer.tag(50, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.options.length; i++)
                writer.int64(message.options[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GoodsStruct
 */
export const GoodsStruct = new GoodsStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameImage$Type extends MessageType<GameImage> {
    constructor() {
        super("data.GameImage", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "rotation", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GameImage>): GameImage {
        const message = { urlList: [], uri: "", height: 0n, width: 0n, rotation: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameImage): GameImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* int64 height */ 3:
                    message.height = reader.int64().toBigInt();
                    break;
                case /* int64 width */ 4:
                    message.width = reader.int64().toBigInt();
                    break;
                case /* int64 rotation */ 5:
                    message.rotation = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* int64 height = 3; */
        if (message.height !== 0n)
            writer.tag(3, WireType.Varint).int64(message.height);
        /* int64 width = 4; */
        if (message.width !== 0n)
            writer.tag(4, WireType.Varint).int64(message.width);
        /* int64 rotation = 5; */
        if (message.rotation !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rotation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameImage
 */
export const GameImage = new GameImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameImageBundler$Type extends MessageType<GameImageBundler> {
    constructor() {
        super("data.GameImageBundler", [
            { no: 1, name: "origin_image", kind: "message", T: () => GameImage },
            { no: 2, name: "thumb_image", kind: "message", T: () => GameImage },
            { no: 3, name: "thumb_heif_image", kind: "message", T: () => GameImage }
        ]);
    }
    create(value?: PartialMessage<GameImageBundler>): GameImageBundler {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameImageBundler>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameImageBundler): GameImageBundler {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.GameImage origin_image */ 1:
                    message.originImage = GameImage.internalBinaryRead(reader, reader.uint32(), options, message.originImage);
                    break;
                case /* data.GameImage thumb_image */ 2:
                    message.thumbImage = GameImage.internalBinaryRead(reader, reader.uint32(), options, message.thumbImage);
                    break;
                case /* data.GameImage thumb_heif_image */ 3:
                    message.thumbHeifImage = GameImage.internalBinaryRead(reader, reader.uint32(), options, message.thumbHeifImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameImageBundler, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.GameImage origin_image = 1; */
        if (message.originImage)
            GameImage.internalBinaryWrite(message.originImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.GameImage thumb_image = 2; */
        if (message.thumbImage)
            GameImage.internalBinaryWrite(message.thumbImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.GameImage thumb_heif_image = 3; */
        if (message.thumbHeifImage)
            GameImage.internalBinaryWrite(message.thumbHeifImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameImageBundler
 */
export const GameImageBundler = new GameImageBundler$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayTeamMember$Type extends MessageType<PlayTeamMember> {
    constructor() {
        super("data.PlayTeamMember", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayTeamMember>): PlayTeamMember {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayTeamMember>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayTeamMember): PlayTeamMember {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayTeamMember, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PlayTeamMember
 */
export const PlayTeamMember = new PlayTeamMember$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftVoteResult$Type extends MessageType<GiftVoteResult> {
    constructor() {
        super("data.GiftVoteResult", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "gift_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "count_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftVoteResult>): GiftVoteResult {
        const message = { text: "", count: 0n, giftId: 0n, name: "", diamondCount: 0n, giftType: 0n, countStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftVoteResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftVoteResult): GiftVoteResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 gift_id */ 4:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* int64 diamond_count */ 6:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                case /* int64 gift_type */ 7:
                    message.giftType = reader.int64().toBigInt();
                    break;
                case /* string count_str */ 8:
                    message.countStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftVoteResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 gift_id = 4; */
        if (message.giftId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.giftId);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* int64 diamond_count = 6; */
        if (message.diamondCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.diamondCount);
        /* int64 gift_type = 7; */
        if (message.giftType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.giftType);
        /* string count_str = 8; */
        if (message.countStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.countStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftVoteResult
 */
export const GiftVoteResult = new GiftVoteResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowStatusLabel$Type extends MessageType<ShowStatusLabel> {
    constructor() {
        super("data.ShowStatusLabel", [
            { no: 1, name: "show_status_label_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "show_status_label_text_transparency", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "show_status_label_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShowStatusLabel>): ShowStatusLabel {
        const message = { showStatusLabelText: "", showStatusLabelTextTransparency: 0, showStatusLabelBgColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowStatusLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowStatusLabel): ShowStatusLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string show_status_label_text */ 1:
                    message.showStatusLabelText = reader.string();
                    break;
                case /* float show_status_label_text_transparency */ 2:
                    message.showStatusLabelTextTransparency = reader.float();
                    break;
                case /* string show_status_label_bg_color */ 3:
                    message.showStatusLabelBgColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowStatusLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string show_status_label_text = 1; */
        if (message.showStatusLabelText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.showStatusLabelText);
        /* float show_status_label_text_transparency = 2; */
        if (message.showStatusLabelTextTransparency !== 0)
            writer.tag(2, WireType.Bit32).float(message.showStatusLabelTextTransparency);
        /* string show_status_label_bg_color = 3; */
        if (message.showStatusLabelBgColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.showStatusLabelBgColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShowStatusLabel
 */
export const ShowStatusLabel = new ShowStatusLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupShowUserItem$Type extends MessageType<GroupShowUserItem> {
    constructor() {
        super("data.GroupShowUserItem", [
            { no: 1, name: "group_show_user", kind: "message", T: () => User },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "send_button_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "group_show_fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "group_show_cur_round_fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "show_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "identity_label", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "live_avatar_frame_image", kind: "message", T: () => Image },
            { no: 9, name: "bg_image", kind: "message", T: () => Image },
            { no: 10, name: "show_status_label", kind: "message", T: () => ShowStatusLabel },
            { no: 11, name: "is_best_shower", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "show_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GroupShowUserItem>): GroupShowUserItem {
        const message = { description: "", sendButtonText: "", groupShowFanTicketCount: 0n, groupShowCurRoundFanTicketCount: 0n, showEndTime: 0n, identityLabel: 0, isBestShower: false, showStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupShowUserItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupShowUserItem): GroupShowUserItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User group_show_user */ 1:
                    message.groupShowUser = User.internalBinaryRead(reader, reader.uint32(), options, message.groupShowUser);
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string send_button_text */ 3:
                    message.sendButtonText = reader.string();
                    break;
                case /* int64 group_show_fan_ticket_count */ 4:
                    message.groupShowFanTicketCount = reader.int64().toBigInt();
                    break;
                case /* int64 group_show_cur_round_fan_ticket_count */ 5:
                    message.groupShowCurRoundFanTicketCount = reader.int64().toBigInt();
                    break;
                case /* int64 show_end_time */ 6:
                    message.showEndTime = reader.int64().toBigInt();
                    break;
                case /* int32 identity_label */ 7:
                    message.identityLabel = reader.int32();
                    break;
                case /* data.Image live_avatar_frame_image */ 8:
                    message.liveAvatarFrameImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.liveAvatarFrameImage);
                    break;
                case /* data.Image bg_image */ 9:
                    message.bgImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgImage);
                    break;
                case /* data.ShowStatusLabel show_status_label */ 10:
                    message.showStatusLabel = ShowStatusLabel.internalBinaryRead(reader, reader.uint32(), options, message.showStatusLabel);
                    break;
                case /* bool is_best_shower */ 11:
                    message.isBestShower = reader.bool();
                    break;
                case /* int32 show_status */ 12:
                    message.showStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupShowUserItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User group_show_user = 1; */
        if (message.groupShowUser)
            User.internalBinaryWrite(message.groupShowUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string send_button_text = 3; */
        if (message.sendButtonText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sendButtonText);
        /* int64 group_show_fan_ticket_count = 4; */
        if (message.groupShowFanTicketCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.groupShowFanTicketCount);
        /* int64 group_show_cur_round_fan_ticket_count = 5; */
        if (message.groupShowCurRoundFanTicketCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.groupShowCurRoundFanTicketCount);
        /* int64 show_end_time = 6; */
        if (message.showEndTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.showEndTime);
        /* int32 identity_label = 7; */
        if (message.identityLabel !== 0)
            writer.tag(7, WireType.Varint).int32(message.identityLabel);
        /* data.Image live_avatar_frame_image = 8; */
        if (message.liveAvatarFrameImage)
            Image.internalBinaryWrite(message.liveAvatarFrameImage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image bg_image = 9; */
        if (message.bgImage)
            Image.internalBinaryWrite(message.bgImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.ShowStatusLabel show_status_label = 10; */
        if (message.showStatusLabel)
            ShowStatusLabel.internalBinaryWrite(message.showStatusLabel, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bool is_best_shower = 11; */
        if (message.isBestShower !== false)
            writer.tag(11, WireType.Varint).bool(message.isBestShower);
        /* int32 show_status = 12; */
        if (message.showStatus !== 0)
            writer.tag(12, WireType.Varint).int32(message.showStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GroupShowUserItem
 */
export const GroupShowUserItem = new GroupShowUserItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupShowInfo$Type extends MessageType<GroupShowInfo> {
    constructor() {
        super("data.GroupShowInfo", [
            { no: 1, name: "group_show_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupShowUserItem },
            { no: 2, name: "description_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "background_image", kind: "message", T: () => Image },
            { no: 6, name: "group_show_scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "is_live_show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "toast_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "is_group_show_anchor", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GroupShowInfo>): GroupShowInfo {
        const message = { groupShowUsers: [], descriptionStyle: 0n, title: "", subTitle: "", groupShowScene: 0n, isLiveShow: false, toastText: "", isGroupShowAnchor: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupShowInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupShowInfo): GroupShowInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.GroupShowUserItem group_show_users */ 1:
                    message.groupShowUsers.push(GroupShowUserItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 description_style */ 2:
                    message.descriptionStyle = reader.int64().toBigInt();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 4:
                    message.subTitle = reader.string();
                    break;
                case /* data.Image background_image */ 5:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* int64 group_show_scene */ 6:
                    message.groupShowScene = reader.int64().toBigInt();
                    break;
                case /* bool is_live_show */ 7:
                    message.isLiveShow = reader.bool();
                    break;
                case /* string toast_text */ 8:
                    message.toastText = reader.string();
                    break;
                case /* bool is_group_show_anchor */ 9:
                    message.isGroupShowAnchor = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupShowInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.GroupShowUserItem group_show_users = 1; */
        for (let i = 0; i < message.groupShowUsers.length; i++)
            GroupShowUserItem.internalBinaryWrite(message.groupShowUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 description_style = 2; */
        if (message.descriptionStyle !== 0n)
            writer.tag(2, WireType.Varint).int64(message.descriptionStyle);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 4; */
        if (message.subTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subTitle);
        /* data.Image background_image = 5; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 group_show_scene = 6; */
        if (message.groupShowScene !== 0n)
            writer.tag(6, WireType.Varint).int64(message.groupShowScene);
        /* bool is_live_show = 7; */
        if (message.isLiveShow !== false)
            writer.tag(7, WireType.Varint).bool(message.isLiveShow);
        /* string toast_text = 8; */
        if (message.toastText !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.toastText);
        /* bool is_group_show_anchor = 9; */
        if (message.isGroupShowAnchor !== false)
            writer.tag(9, WireType.Varint).bool(message.isGroupShowAnchor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GroupShowInfo
 */
export const GroupShowInfo = new GroupShowInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskCondDef$Type extends MessageType<GrowthTaskCondDef> {
    constructor() {
        super("data.GrowthTaskCondDef", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "operator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskCondDef>): GrowthTaskCondDef {
        const message = { id: 0n, key: "", desc: "", operator: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskCondDef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskCondDef): GrowthTaskCondDef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string desc */ 3:
                    message.desc = reader.string();
                    break;
                case /* string operator */ 4:
                    message.operator = reader.string();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskCondDef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string desc = 3; */
        if (message.desc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.desc);
        /* string operator = 4; */
        if (message.operator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.operator);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GrowthTaskCondDef
 */
export const GrowthTaskCondDef = new GrowthTaskCondDef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskCondition$Type extends MessageType<GrowthTaskCondition> {
    constructor() {
        super("data.GrowthTaskCondition", [
            { no: 1, name: "def", kind: "message", T: () => GrowthTaskCondDef },
            { no: 2, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "current_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "target_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "display_current_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "display_target_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "display_delta", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskCondition>): GrowthTaskCondition {
        const message = { desc: "", currentValue: 0n, targetValue: 0n, displayCurrentValue: "", displayTargetValue: "", displayDelta: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskCondition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskCondition): GrowthTaskCondition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.GrowthTaskCondDef def */ 1:
                    message.def = GrowthTaskCondDef.internalBinaryRead(reader, reader.uint32(), options, message.def);
                    break;
                case /* string desc */ 2:
                    message.desc = reader.string();
                    break;
                case /* int64 current_value */ 3:
                    message.currentValue = reader.int64().toBigInt();
                    break;
                case /* int64 target_value */ 4:
                    message.targetValue = reader.int64().toBigInt();
                    break;
                case /* string display_current_value */ 5:
                    message.displayCurrentValue = reader.string();
                    break;
                case /* string display_target_value */ 6:
                    message.displayTargetValue = reader.string();
                    break;
                case /* string display_delta */ 7:
                    message.displayDelta = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskCondition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.GrowthTaskCondDef def = 1; */
        if (message.def)
            GrowthTaskCondDef.internalBinaryWrite(message.def, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string desc = 2; */
        if (message.desc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        /* int64 current_value = 3; */
        if (message.currentValue !== 0n)
            writer.tag(3, WireType.Varint).int64(message.currentValue);
        /* int64 target_value = 4; */
        if (message.targetValue !== 0n)
            writer.tag(4, WireType.Varint).int64(message.targetValue);
        /* string display_current_value = 5; */
        if (message.displayCurrentValue !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.displayCurrentValue);
        /* string display_target_value = 6; */
        if (message.displayTargetValue !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.displayTargetValue);
        /* string display_delta = 7; */
        if (message.displayDelta !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.displayDelta);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GrowthTaskCondition
 */
export const GrowthTaskCondition = new GrowthTaskCondition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskRewardDef$Type extends MessageType<GrowthTaskRewardDef> {
    constructor() {
        super("data.GrowthTaskRewardDef", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reward_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "settle_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "target", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "operator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "send_param_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskRewardDef>): GrowthTaskRewardDef {
        const message = { id: 0n, rewardType: 0, settleType: 0, target: "", desc: "", operator: "", sendParamStr: "", extra: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskRewardDef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskRewardDef): GrowthTaskRewardDef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int32 reward_type */ 2:
                    message.rewardType = reader.int32();
                    break;
                case /* int32 settle_type */ 3:
                    message.settleType = reader.int32();
                    break;
                case /* string target */ 4:
                    message.target = reader.string();
                    break;
                case /* string desc */ 5:
                    message.desc = reader.string();
                    break;
                case /* string operator */ 6:
                    message.operator = reader.string();
                    break;
                case /* string send_param_str */ 7:
                    message.sendParamStr = reader.string();
                    break;
                case /* string extra */ 8:
                    message.extra = reader.string();
                    break;
                case /* string name */ 9:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskRewardDef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int32 reward_type = 2; */
        if (message.rewardType !== 0)
            writer.tag(2, WireType.Varint).int32(message.rewardType);
        /* int32 settle_type = 3; */
        if (message.settleType !== 0)
            writer.tag(3, WireType.Varint).int32(message.settleType);
        /* string target = 4; */
        if (message.target !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.target);
        /* string desc = 5; */
        if (message.desc !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.desc);
        /* string operator = 6; */
        if (message.operator !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.operator);
        /* string send_param_str = 7; */
        if (message.sendParamStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.sendParamStr);
        /* string extra = 8; */
        if (message.extra !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.extra);
        /* string name = 9; */
        if (message.name !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GrowthTaskRewardDef
 */
export const GrowthTaskRewardDef = new GrowthTaskRewardDef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskReward$Type extends MessageType<GrowthTaskReward> {
    constructor() {
        super("data.GrowthTaskReward", [
            { no: 1, name: "def", kind: "message", T: () => GrowthTaskRewardDef },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "remaining_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskReward>): GrowthTaskReward {
        const message = { status: 0, extra: "", remainingCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskReward>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskReward): GrowthTaskReward {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.GrowthTaskRewardDef def */ 1:
                    message.def = GrowthTaskRewardDef.internalBinaryRead(reader, reader.uint32(), options, message.def);
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                case /* int64 remaining_count */ 4:
                    message.remainingCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskReward, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.GrowthTaskRewardDef def = 1; */
        if (message.def)
            GrowthTaskRewardDef.internalBinaryWrite(message.def, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        /* int64 remaining_count = 4; */
        if (message.remainingCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.remainingCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GrowthTaskReward
 */
export const GrowthTaskReward = new GrowthTaskReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskStage$Type extends MessageType<GrowthTaskStage> {
    constructor() {
        super("data.GrowthTaskStage", [
            { no: 1, name: "condition_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GrowthTaskCondition },
            { no: 2, name: "reward_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GrowthTaskReward },
            { no: 3, name: "completed_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskStage>): GrowthTaskStage {
        const message = { conditionList: [], rewardList: [], completedTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskStage): GrowthTaskStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.GrowthTaskCondition condition_list */ 1:
                    message.conditionList.push(GrowthTaskCondition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.GrowthTaskReward reward_list */ 2:
                    message.rewardList.push(GrowthTaskReward.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 completed_time */ 3:
                    message.completedTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.GrowthTaskCondition condition_list = 1; */
        for (let i = 0; i < message.conditionList.length; i++)
            GrowthTaskCondition.internalBinaryWrite(message.conditionList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.GrowthTaskReward reward_list = 2; */
        for (let i = 0; i < message.rewardList.length; i++)
            GrowthTaskReward.internalBinaryWrite(message.rewardList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 completed_time = 3; */
        if (message.completedTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.completedTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GrowthTaskStage
 */
export const GrowthTaskStage = new GrowthTaskStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTask$Type extends MessageType<GrowthTask> {
    constructor() {
        super("data.GrowthTask", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "class_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "item_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "task_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "task_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "display_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "display_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "completed_stage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "finish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GrowthTaskStage },
            { no: 19, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "config", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GrowthTask>): GrowthTask {
        const message = { id: 0n, idStr: "", liveId: 0n, appId: 0n, classId: 0n, groupId: 0n, itemType: 0, itemId: "", taskName: "", taskDesc: "", startTime: 0n, endTime: 0n, displayStartTime: 0n, displayEndTime: 0n, status: 0, completedStage: 0n, finishTime: 0n, stageList: [], extra: "", config: "", createTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTask): GrowthTask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 2:
                    message.idStr = reader.string();
                    break;
                case /* int64 live_id */ 3:
                    message.liveId = reader.int64().toBigInt();
                    break;
                case /* int64 app_id */ 4:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* int64 class_id */ 5:
                    message.classId = reader.int64().toBigInt();
                    break;
                case /* int64 group_id */ 6:
                    message.groupId = reader.int64().toBigInt();
                    break;
                case /* int32 item_type */ 7:
                    message.itemType = reader.int32();
                    break;
                case /* string item_id */ 8:
                    message.itemId = reader.string();
                    break;
                case /* string task_name */ 9:
                    message.taskName = reader.string();
                    break;
                case /* string task_desc */ 10:
                    message.taskDesc = reader.string();
                    break;
                case /* int64 start_time */ 11:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 12:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int64 display_start_time */ 13:
                    message.displayStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 display_end_time */ 14:
                    message.displayEndTime = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 15:
                    message.status = reader.int32();
                    break;
                case /* int64 completed_stage */ 16:
                    message.completedStage = reader.int64().toBigInt();
                    break;
                case /* int64 finish_time */ 17:
                    message.finishTime = reader.int64().toBigInt();
                    break;
                case /* repeated data.GrowthTaskStage stage_list */ 18:
                    message.stageList.push(GrowthTaskStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string extra */ 19:
                    message.extra = reader.string();
                    break;
                case /* string config */ 20:
                    message.config = reader.string();
                    break;
                case /* int64 create_time */ 21:
                    message.createTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string id_str = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* int64 live_id = 3; */
        if (message.liveId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.liveId);
        /* int64 app_id = 4; */
        if (message.appId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.appId);
        /* int64 class_id = 5; */
        if (message.classId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.classId);
        /* int64 group_id = 6; */
        if (message.groupId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.groupId);
        /* int32 item_type = 7; */
        if (message.itemType !== 0)
            writer.tag(7, WireType.Varint).int32(message.itemType);
        /* string item_id = 8; */
        if (message.itemId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.itemId);
        /* string task_name = 9; */
        if (message.taskName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.taskName);
        /* string task_desc = 10; */
        if (message.taskDesc !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.taskDesc);
        /* int64 start_time = 11; */
        if (message.startTime !== 0n)
            writer.tag(11, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 12; */
        if (message.endTime !== 0n)
            writer.tag(12, WireType.Varint).int64(message.endTime);
        /* int64 display_start_time = 13; */
        if (message.displayStartTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.displayStartTime);
        /* int64 display_end_time = 14; */
        if (message.displayEndTime !== 0n)
            writer.tag(14, WireType.Varint).int64(message.displayEndTime);
        /* int32 status = 15; */
        if (message.status !== 0)
            writer.tag(15, WireType.Varint).int32(message.status);
        /* int64 completed_stage = 16; */
        if (message.completedStage !== 0n)
            writer.tag(16, WireType.Varint).int64(message.completedStage);
        /* int64 finish_time = 17; */
        if (message.finishTime !== 0n)
            writer.tag(17, WireType.Varint).int64(message.finishTime);
        /* repeated data.GrowthTaskStage stage_list = 18; */
        for (let i = 0; i < message.stageList.length; i++)
            GrowthTaskStage.internalBinaryWrite(message.stageList[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 19; */
        if (message.extra !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.extra);
        /* string config = 20; */
        if (message.config !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.config);
        /* int64 create_time = 21; */
        if (message.createTime !== 0n)
            writer.tag(21, WireType.Varint).int64(message.createTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GrowthTask
 */
export const GrowthTask = new GrowthTask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskContributorRank$Type extends MessageType<GrowthTaskContributorRank> {
    constructor() {
        super("data.GrowthTaskContributorRank", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskContributorRank>): GrowthTaskContributorRank {
        const message = { score: 0n, rank: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskContributorRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskContributorRank): GrowthTaskContributorRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 3:
                    message.rank = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskContributorRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* int64 rank = 3; */
        if (message.rank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GrowthTaskContributorRank
 */
export const GrowthTaskContributorRank = new GrowthTaskContributorRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleGradeItem$Type extends MessageType<GuestBattleGradeItem> {
    constructor() {
        super("data.GuestBattleGradeItem", [
            { no: 1, name: "level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "level_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "score_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_full_level", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBattleGradeItem>): GuestBattleGradeItem {
        const message = { level: 0n, levelStr: "", score: 0n, scoreStr: "", isFullLevel: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleGradeItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleGradeItem): GuestBattleGradeItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 level */ 1:
                    message.level = reader.int64().toBigInt();
                    break;
                case /* string level_str */ 2:
                    message.levelStr = reader.string();
                    break;
                case /* int64 score */ 3:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string score_str */ 4:
                    message.scoreStr = reader.string();
                    break;
                case /* bool is_full_level */ 5:
                    message.isFullLevel = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleGradeItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 level = 1; */
        if (message.level !== 0n)
            writer.tag(1, WireType.Varint).int64(message.level);
        /* string level_str = 2; */
        if (message.levelStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.levelStr);
        /* int64 score = 3; */
        if (message.score !== 0n)
            writer.tag(3, WireType.Varint).int64(message.score);
        /* string score_str = 4; */
        if (message.scoreStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.scoreStr);
        /* bool is_full_level = 5; */
        if (message.isFullLevel !== false)
            writer.tag(5, WireType.Varint).bool(message.isFullLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GuestBattleGradeItem
 */
export const GuestBattleGradeItem = new GuestBattleGradeItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleUserGradeInfo$Type extends MessageType<GuestBattleUserGradeInfo> {
    constructor() {
        super("data.GuestBattleUserGradeInfo", [
            { no: 1, name: "cur_grade", kind: "message", T: () => GuestBattleGradeItem },
            { no: 2, name: "next_grade", kind: "message", T: () => GuestBattleGradeItem },
            { no: 3, name: "upgrade_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "upgrade_score_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBattleUserGradeInfo>): GuestBattleUserGradeInfo {
        const message = { upgradeScore: 0n, upgradeScoreStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleUserGradeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleUserGradeInfo): GuestBattleUserGradeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.GuestBattleGradeItem cur_grade */ 1:
                    message.curGrade = GuestBattleGradeItem.internalBinaryRead(reader, reader.uint32(), options, message.curGrade);
                    break;
                case /* data.GuestBattleGradeItem next_grade */ 2:
                    message.nextGrade = GuestBattleGradeItem.internalBinaryRead(reader, reader.uint32(), options, message.nextGrade);
                    break;
                case /* int64 upgrade_score */ 3:
                    message.upgradeScore = reader.int64().toBigInt();
                    break;
                case /* string upgrade_score_str */ 4:
                    message.upgradeScoreStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleUserGradeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.GuestBattleGradeItem cur_grade = 1; */
        if (message.curGrade)
            GuestBattleGradeItem.internalBinaryWrite(message.curGrade, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.GuestBattleGradeItem next_grade = 2; */
        if (message.nextGrade)
            GuestBattleGradeItem.internalBinaryWrite(message.nextGrade, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 upgrade_score = 3; */
        if (message.upgradeScore !== 0n)
            writer.tag(3, WireType.Varint).int64(message.upgradeScore);
        /* string upgrade_score_str = 4; */
        if (message.upgradeScoreStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.upgradeScoreStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GuestBattleUserGradeInfo
 */
export const GuestBattleUserGradeInfo = new GuestBattleUserGradeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleUIInfo$Type extends MessageType<GuestBattleUIInfo> {
    constructor() {
        super("data.GuestBattleUIInfo", [
            { no: 1, name: "open_animation", kind: "message", T: () => Image },
            { no: 2, name: "score_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<GuestBattleUIInfo>): GuestBattleUIInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleUIInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleUIInfo): GuestBattleUIInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image open_animation */ 1:
                    message.openAnimation = Image.internalBinaryRead(reader, reader.uint32(), options, message.openAnimation);
                    break;
                case /* data.Image score_icon */ 2:
                    message.scoreIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.scoreIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleUIInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image open_animation = 1; */
        if (message.openAnimation)
            Image.internalBinaryWrite(message.openAnimation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image score_icon = 2; */
        if (message.scoreIcon)
            Image.internalBinaryWrite(message.scoreIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GuestBattleUIInfo
 */
export const GuestBattleUIInfo = new GuestBattleUIInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleContributors$Type extends MessageType<GuestBattleContributors> {
    constructor() {
        super("data.GuestBattleContributors", [
            { no: 1, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBattleContributors>): GuestBattleContributors {
        const message = { userIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleContributors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleContributors): GuestBattleContributors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 user_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int64().toBigInt());
                    else
                        message.userIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleContributors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 user_ids = 1; */
        if (message.userIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int64(message.userIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GuestBattleContributors
 */
export const GuestBattleContributors = new GuestBattleContributors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleResult$Type extends MessageType<BattleResult> {
    constructor() {
        super("data.BattleResult", [
            { no: 1, name: "guest_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "score_fuzzy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "contributors", kind: "message", T: () => GuestBattleContributors },
            { no: 6, name: "quick_interact", kind: "message", T: () => LinkmicQuickInteract },
            { no: 7, name: "crown_info", kind: "message", T: () => GuestBattleUserGradeInfo },
            { no: 8, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "score_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "role", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "guest_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleResult>): BattleResult {
        const message = { guestId: 0n, score: "", rank: 0n, scoreFuzzy: "", nickname: "", scoreNum: 0n, role: 0, guestIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleResult): BattleResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 guest_id */ 1:
                    message.guestId = reader.int64().toBigInt();
                    break;
                case /* string score */ 2:
                    message.score = reader.string();
                    break;
                case /* int64 rank */ 3:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* string score_fuzzy */ 4:
                    message.scoreFuzzy = reader.string();
                    break;
                case /* data.GuestBattleContributors contributors */ 5:
                    message.contributors = GuestBattleContributors.internalBinaryRead(reader, reader.uint32(), options, message.contributors);
                    break;
                case /* data.LinkmicQuickInteract quick_interact */ 6:
                    message.quickInteract = LinkmicQuickInteract.internalBinaryRead(reader, reader.uint32(), options, message.quickInteract);
                    break;
                case /* data.GuestBattleUserGradeInfo crown_info */ 7:
                    message.crownInfo = GuestBattleUserGradeInfo.internalBinaryRead(reader, reader.uint32(), options, message.crownInfo);
                    break;
                case /* string nickname */ 8:
                    message.nickname = reader.string();
                    break;
                case /* int64 score_num */ 9:
                    message.scoreNum = reader.int64().toBigInt();
                    break;
                case /* int32 role */ 10:
                    message.role = reader.int32();
                    break;
                case /* string guest_id_str */ 11:
                    message.guestIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 guest_id = 1; */
        if (message.guestId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.guestId);
        /* string score = 2; */
        if (message.score !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.score);
        /* int64 rank = 3; */
        if (message.rank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rank);
        /* string score_fuzzy = 4; */
        if (message.scoreFuzzy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.scoreFuzzy);
        /* data.GuestBattleContributors contributors = 5; */
        if (message.contributors)
            GuestBattleContributors.internalBinaryWrite(message.contributors, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkmicQuickInteract quick_interact = 6; */
        if (message.quickInteract)
            LinkmicQuickInteract.internalBinaryWrite(message.quickInteract, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.GuestBattleUserGradeInfo crown_info = 7; */
        if (message.crownInfo)
            GuestBattleUserGradeInfo.internalBinaryWrite(message.crownInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string nickname = 8; */
        if (message.nickname !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.nickname);
        /* int64 score_num = 9; */
        if (message.scoreNum !== 0n)
            writer.tag(9, WireType.Varint).int64(message.scoreNum);
        /* int32 role = 10; */
        if (message.role !== 0)
            writer.tag(10, WireType.Varint).int32(message.role);
        /* string guest_id_str = 11; */
        if (message.guestIdStr !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.guestIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BattleResult
 */
export const BattleResult = new BattleResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleInfo$Type extends MessageType<GuestBattleInfo> {
    constructor() {
        super("data.GuestBattleInfo", [
            { no: 1, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "battle_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleResult },
            { no: 5, name: "current_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "finish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "show_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "battle_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "loser_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "score_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "ui_info", kind: "message", T: () => GuestBattleUIInfo }
        ]);
    }
    create(value?: PartialMessage<GuestBattleInfo>): GuestBattleInfo {
        const message = { battleId: 0n, battleType: 0n, status: 0n, results: [], currentTime: 0n, finishTime: 0n, showDuration: 0n, battleIdStr: "", loserNum: 0n, dressId: "", scoreType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleInfo): GuestBattleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 battle_id */ 1:
                    message.battleId = reader.int64().toBigInt();
                    break;
                case /* int64 battle_type */ 2:
                    message.battleType = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* repeated data.BattleResult results */ 4:
                    message.results.push(BattleResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 current_time */ 5:
                    message.currentTime = reader.int64().toBigInt();
                    break;
                case /* int64 finish_time */ 6:
                    message.finishTime = reader.int64().toBigInt();
                    break;
                case /* int64 show_duration */ 7:
                    message.showDuration = reader.int64().toBigInt();
                    break;
                case /* string battle_id_str */ 8:
                    message.battleIdStr = reader.string();
                    break;
                case /* int64 loser_num */ 9:
                    message.loserNum = reader.int64().toBigInt();
                    break;
                case /* string dress_id */ 10:
                    message.dressId = reader.string();
                    break;
                case /* int64 score_type */ 11:
                    message.scoreType = reader.int64().toBigInt();
                    break;
                case /* data.GuestBattleUIInfo ui_info */ 12:
                    message.uiInfo = GuestBattleUIInfo.internalBinaryRead(reader, reader.uint32(), options, message.uiInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 battle_id = 1; */
        if (message.battleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.battleId);
        /* int64 battle_type = 2; */
        if (message.battleType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.battleType);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* repeated data.BattleResult results = 4; */
        for (let i = 0; i < message.results.length; i++)
            BattleResult.internalBinaryWrite(message.results[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 current_time = 5; */
        if (message.currentTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.currentTime);
        /* int64 finish_time = 6; */
        if (message.finishTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.finishTime);
        /* int64 show_duration = 7; */
        if (message.showDuration !== 0n)
            writer.tag(7, WireType.Varint).int64(message.showDuration);
        /* string battle_id_str = 8; */
        if (message.battleIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.battleIdStr);
        /* int64 loser_num = 9; */
        if (message.loserNum !== 0n)
            writer.tag(9, WireType.Varint).int64(message.loserNum);
        /* string dress_id = 10; */
        if (message.dressId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.dressId);
        /* int64 score_type = 11; */
        if (message.scoreType !== 0n)
            writer.tag(11, WireType.Varint).int64(message.scoreType);
        /* data.GuestBattleUIInfo ui_info = 12; */
        if (message.uiInfo)
            GuestBattleUIInfo.internalBinaryWrite(message.uiInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GuestBattleInfo
 */
export const GuestBattleInfo = new GuestBattleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Banner$Type extends MessageType<Banner> {
    constructor() {
        super("data.Banner", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "message", T: () => Image },
            { no: 4, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "banner_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "frame_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "roomid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "appointment_start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "appointment_end_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "appointment_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Banner>): Banner {
        const message = { id: 0n, title: "", height: 0n, width: 0n, schemaUrl: "", actionType: 0n, bannerType: 0n, priority: 0n, text: "", frameType: 0n, extra: "", status: 0n, uid: 0n, roomid: 0n, appointmentStartTimestamp: 0n, appointmentEndTimestamp: 0n, appointmentId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Banner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Banner): Banner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* data.Image image */ 3:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* int64 height */ 4:
                    message.height = reader.int64().toBigInt();
                    break;
                case /* int64 width */ 5:
                    message.width = reader.int64().toBigInt();
                    break;
                case /* string schema_url */ 6:
                    message.schemaUrl = reader.string();
                    break;
                case /* int64 action_type */ 7:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* int64 banner_type */ 8:
                    message.bannerType = reader.int64().toBigInt();
                    break;
                case /* int64 priority */ 9:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* string text */ 10:
                    message.text = reader.string();
                    break;
                case /* int64 frame_type */ 11:
                    message.frameType = reader.int64().toBigInt();
                    break;
                case /* string extra */ 12:
                    message.extra = reader.string();
                    break;
                case /* int64 status */ 13:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* int64 uid */ 14:
                    message.uid = reader.int64().toBigInt();
                    break;
                case /* int64 roomid */ 15:
                    message.roomid = reader.int64().toBigInt();
                    break;
                case /* int64 appointment_start_timestamp */ 16:
                    message.appointmentStartTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 appointment_end_timestamp */ 17:
                    message.appointmentEndTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 appointment_id */ 18:
                    message.appointmentId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Banner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* data.Image image = 3; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 height = 4; */
        if (message.height !== 0n)
            writer.tag(4, WireType.Varint).int64(message.height);
        /* int64 width = 5; */
        if (message.width !== 0n)
            writer.tag(5, WireType.Varint).int64(message.width);
        /* string schema_url = 6; */
        if (message.schemaUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.schemaUrl);
        /* int64 action_type = 7; */
        if (message.actionType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.actionType);
        /* int64 banner_type = 8; */
        if (message.bannerType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.bannerType);
        /* int64 priority = 9; */
        if (message.priority !== 0n)
            writer.tag(9, WireType.Varint).int64(message.priority);
        /* string text = 10; */
        if (message.text !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.text);
        /* int64 frame_type = 11; */
        if (message.frameType !== 0n)
            writer.tag(11, WireType.Varint).int64(message.frameType);
        /* string extra = 12; */
        if (message.extra !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.extra);
        /* int64 status = 13; */
        if (message.status !== 0n)
            writer.tag(13, WireType.Varint).int64(message.status);
        /* int64 uid = 14; */
        if (message.uid !== 0n)
            writer.tag(14, WireType.Varint).int64(message.uid);
        /* int64 roomid = 15; */
        if (message.roomid !== 0n)
            writer.tag(15, WireType.Varint).int64(message.roomid);
        /* int64 appointment_start_timestamp = 16; */
        if (message.appointmentStartTimestamp !== 0n)
            writer.tag(16, WireType.Varint).int64(message.appointmentStartTimestamp);
        /* int64 appointment_end_timestamp = 17; */
        if (message.appointmentEndTimestamp !== 0n)
            writer.tag(17, WireType.Varint).int64(message.appointmentEndTimestamp);
        /* int64 appointment_id = 18; */
        if (message.appointmentId !== 0n)
            writer.tag(18, WireType.Varint).int64(message.appointmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Banner
 */
export const Banner = new Banner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BannerCollapse$Type extends MessageType<BannerCollapse> {
    constructor() {
        super("data.BannerCollapse", [
            { no: 1, name: "collapse_title", kind: "message", T: () => Text },
            { no: 2, name: "collapse_image", kind: "message", T: () => Image },
            { no: 3, name: "enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "collapse_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "vertical_line_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BannerCollapse>): BannerCollapse {
        const message = { enable: false, backgroundColor: "", collapseHeight: 0n, verticalLineColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BannerCollapse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BannerCollapse): BannerCollapse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text collapse_title */ 1:
                    message.collapseTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.collapseTitle);
                    break;
                case /* data.Image collapse_image */ 2:
                    message.collapseImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.collapseImage);
                    break;
                case /* bool enable */ 3:
                    message.enable = reader.bool();
                    break;
                case /* string background_color */ 4:
                    message.backgroundColor = reader.string();
                    break;
                case /* int64 collapse_height */ 5:
                    message.collapseHeight = reader.int64().toBigInt();
                    break;
                case /* string vertical_line_color */ 6:
                    message.verticalLineColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BannerCollapse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text collapse_title = 1; */
        if (message.collapseTitle)
            Text.internalBinaryWrite(message.collapseTitle, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image collapse_image = 2; */
        if (message.collapseImage)
            Image.internalBinaryWrite(message.collapseImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool enable = 3; */
        if (message.enable !== false)
            writer.tag(3, WireType.Varint).bool(message.enable);
        /* string background_color = 4; */
        if (message.backgroundColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.backgroundColor);
        /* int64 collapse_height = 5; */
        if (message.collapseHeight !== 0n)
            writer.tag(5, WireType.Varint).int64(message.collapseHeight);
        /* string vertical_line_color = 6; */
        if (message.verticalLineColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.verticalLineColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BannerCollapse
 */
export const BannerCollapse = new BannerCollapse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BannerContainer$Type extends MessageType<BannerContainer> {
    constructor() {
        super("data.BannerContainer", [
            { no: 1, name: "container_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "banner_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Banner },
            { no: 3, name: "animation_image", kind: "message", T: () => Image },
            { no: 4, name: "collapse", kind: "message", T: () => BannerCollapse },
            { no: 5, name: "container_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "container_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "lynx_container_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "container_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "token_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BannerContainer>): BannerContainer {
        const message = { containerUrl: "", bannerList: [], containerHeight: 0n, containerWidth: 0n, lynxContainerUrl: "", containerType: 0n, tokenList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BannerContainer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BannerContainer): BannerContainer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string container_url */ 1:
                    message.containerUrl = reader.string();
                    break;
                case /* repeated data.Banner banner_list */ 2:
                    message.bannerList.push(Banner.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image animation_image */ 3:
                    message.animationImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.animationImage);
                    break;
                case /* data.BannerCollapse collapse */ 4:
                    message.collapse = BannerCollapse.internalBinaryRead(reader, reader.uint32(), options, message.collapse);
                    break;
                case /* int64 container_height */ 5:
                    message.containerHeight = reader.int64().toBigInt();
                    break;
                case /* int64 container_width */ 6:
                    message.containerWidth = reader.int64().toBigInt();
                    break;
                case /* string lynx_container_url */ 7:
                    message.lynxContainerUrl = reader.string();
                    break;
                case /* int64 container_type */ 8:
                    message.containerType = reader.int64().toBigInt();
                    break;
                case /* repeated string token_list */ 9:
                    message.tokenList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BannerContainer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string container_url = 1; */
        if (message.containerUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.containerUrl);
        /* repeated data.Banner banner_list = 2; */
        for (let i = 0; i < message.bannerList.length; i++)
            Banner.internalBinaryWrite(message.bannerList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image animation_image = 3; */
        if (message.animationImage)
            Image.internalBinaryWrite(message.animationImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerCollapse collapse = 4; */
        if (message.collapse)
            BannerCollapse.internalBinaryWrite(message.collapse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 container_height = 5; */
        if (message.containerHeight !== 0n)
            writer.tag(5, WireType.Varint).int64(message.containerHeight);
        /* int64 container_width = 6; */
        if (message.containerWidth !== 0n)
            writer.tag(6, WireType.Varint).int64(message.containerWidth);
        /* string lynx_container_url = 7; */
        if (message.lynxContainerUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.lynxContainerUrl);
        /* int64 container_type = 8; */
        if (message.containerType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.containerType);
        /* repeated string token_list = 9; */
        for (let i = 0; i < message.tokenList.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.tokenList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BannerContainer
 */
export const BannerContainer = new BannerContainer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BannerData$Type extends MessageType<BannerData> {
    constructor() {
        super("data.BannerData", [
            { no: 1, name: "top_right", kind: "message", T: () => BannerContainer },
            { no: 2, name: "bottom_right", kind: "message", T: () => BannerContainer },
            { no: 3, name: "gift_panel", kind: "message", T: () => BannerContainer },
            { no: 4, name: "middle", kind: "message", T: () => BannerContainer },
            { no: 5, name: "activity_top_right", kind: "message", T: () => BannerContainer },
            { no: 6, name: "top_left", kind: "message", T: () => BannerContainer },
            { no: 7, name: "live_scene", kind: "message", T: () => BannerContainer },
            { no: 8, name: "activity_vs_interactive", kind: "message", T: () => BannerContainer },
            { no: 9, name: "activity_interactive", kind: "message", T: () => BannerContainer },
            { no: 10, name: "activity_vs_bottom_right", kind: "message", T: () => BannerContainer }
        ]);
    }
    create(value?: PartialMessage<BannerData>): BannerData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BannerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BannerData): BannerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.BannerContainer top_right */ 1:
                    message.topRight = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.topRight);
                    break;
                case /* data.BannerContainer bottom_right */ 2:
                    message.bottomRight = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.bottomRight);
                    break;
                case /* data.BannerContainer gift_panel */ 3:
                    message.giftPanel = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.giftPanel);
                    break;
                case /* data.BannerContainer middle */ 4:
                    message.middle = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.middle);
                    break;
                case /* data.BannerContainer activity_top_right */ 5:
                    message.activityTopRight = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.activityTopRight);
                    break;
                case /* data.BannerContainer top_left */ 6:
                    message.topLeft = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.topLeft);
                    break;
                case /* data.BannerContainer live_scene */ 7:
                    message.liveScene = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.liveScene);
                    break;
                case /* data.BannerContainer activity_vs_interactive */ 8:
                    message.activityVsInteractive = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.activityVsInteractive);
                    break;
                case /* data.BannerContainer activity_interactive */ 9:
                    message.activityInteractive = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.activityInteractive);
                    break;
                case /* data.BannerContainer activity_vs_bottom_right */ 10:
                    message.activityVsBottomRight = BannerContainer.internalBinaryRead(reader, reader.uint32(), options, message.activityVsBottomRight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BannerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.BannerContainer top_right = 1; */
        if (message.topRight)
            BannerContainer.internalBinaryWrite(message.topRight, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer bottom_right = 2; */
        if (message.bottomRight)
            BannerContainer.internalBinaryWrite(message.bottomRight, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer gift_panel = 3; */
        if (message.giftPanel)
            BannerContainer.internalBinaryWrite(message.giftPanel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer middle = 4; */
        if (message.middle)
            BannerContainer.internalBinaryWrite(message.middle, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer activity_top_right = 5; */
        if (message.activityTopRight)
            BannerContainer.internalBinaryWrite(message.activityTopRight, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer top_left = 6; */
        if (message.topLeft)
            BannerContainer.internalBinaryWrite(message.topLeft, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer live_scene = 7; */
        if (message.liveScene)
            BannerContainer.internalBinaryWrite(message.liveScene, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer activity_vs_interactive = 8; */
        if (message.activityVsInteractive)
            BannerContainer.internalBinaryWrite(message.activityVsInteractive, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer activity_interactive = 9; */
        if (message.activityInteractive)
            BannerContainer.internalBinaryWrite(message.activityInteractive, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.BannerContainer activity_vs_bottom_right = 10; */
        if (message.activityVsBottomRight)
            BannerContainer.internalBinaryWrite(message.activityVsBottomRight, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BannerData
 */
export const BannerData = new BannerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeIconInfo$Type extends MessageType<LikeIconInfo> {
    constructor() {
        super("data.LikeIconInfo", [
            { no: 1, name: "icons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LikeIconInfo>): LikeIconInfo {
        const message = { icons: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeIconInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeIconInfo): LikeIconInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.Image icons */ 1:
                    message.icons.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeIconInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.Image icons = 1; */
        for (let i = 0; i < message.icons.length; i++)
            Image.internalBinaryWrite(message.icons[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LikeIconInfo
 */
export const LikeIconInfo = new LikeIconInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeIconInfo_IconList$Type extends MessageType<LikeIconInfo_IconList> {
    constructor() {
        super("data.LikeIconInfo.IconList", [
            { no: 1, name: "icons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LikeIconInfo_IconList>): LikeIconInfo_IconList {
        const message = { icons: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeIconInfo_IconList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeIconInfo_IconList): LikeIconInfo_IconList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.Image icons */ 1:
                    message.icons.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeIconInfo_IconList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.Image icons = 1; */
        for (let i = 0; i < message.icons.length; i++)
            Image.internalBinaryWrite(message.icons[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LikeIconInfo.IconList
 */
export const LikeIconInfo_IconList = new LikeIconInfo_IconList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatEmojiGuideInfo$Type extends MessageType<ChatEmojiGuideInfo> {
    constructor() {
        super("data.ChatEmojiGuideInfo", [
            { no: 1, name: "emojis", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatEmojiGuideInfo_EmojiGuideConf }
        ]);
    }
    create(value?: PartialMessage<ChatEmojiGuideInfo>): ChatEmojiGuideInfo {
        const message = { emojis: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatEmojiGuideInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatEmojiGuideInfo): ChatEmojiGuideInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ChatEmojiGuideInfo.EmojiGuideConf emojis */ 1:
                    message.emojis.push(ChatEmojiGuideInfo_EmojiGuideConf.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatEmojiGuideInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ChatEmojiGuideInfo.EmojiGuideConf emojis = 1; */
        for (let i = 0; i < message.emojis.length; i++)
            ChatEmojiGuideInfo_EmojiGuideConf.internalBinaryWrite(message.emojis[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChatEmojiGuideInfo
 */
export const ChatEmojiGuideInfo = new ChatEmojiGuideInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatEmojiGuideInfo_EmojiGuideConf$Type extends MessageType<ChatEmojiGuideInfo_EmojiGuideConf> {
    constructor() {
        super("data.ChatEmojiGuideInfo.EmojiGuideConf", [
            { no: 1, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trigger_words", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "begin_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChatEmojiGuideInfo_EmojiGuideConf>): ChatEmojiGuideInfo_EmojiGuideConf {
        const message = { emoji: "", triggerWords: [], beginTime: 0n, endTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatEmojiGuideInfo_EmojiGuideConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatEmojiGuideInfo_EmojiGuideConf): ChatEmojiGuideInfo_EmojiGuideConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string emoji */ 1:
                    message.emoji = reader.string();
                    break;
                case /* repeated string trigger_words */ 2:
                    message.triggerWords.push(reader.string());
                    break;
                case /* int64 begin_time */ 10:
                    message.beginTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 11:
                    message.endTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatEmojiGuideInfo_EmojiGuideConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string emoji = 1; */
        if (message.emoji !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emoji);
        /* repeated string trigger_words = 2; */
        for (let i = 0; i < message.triggerWords.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.triggerWords[i]);
        /* int64 begin_time = 10; */
        if (message.beginTime !== 0n)
            writer.tag(10, WireType.Varint).int64(message.beginTime);
        /* int64 end_time = 11; */
        if (message.endTime !== 0n)
            writer.tag(11, WireType.Varint).int64(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChatEmojiGuideInfo.EmojiGuideConf
 */
export const ChatEmojiGuideInfo_EmojiGuideConf = new ChatEmojiGuideInfo_EmojiGuideConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatImageGuideInfo$Type extends MessageType<ChatImageGuideInfo> {
    constructor() {
        super("data.ChatImageGuideInfo", [
            { no: 1, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatImageGuideInfo_ImageGuideConf }
        ]);
    }
    create(value?: PartialMessage<ChatImageGuideInfo>): ChatImageGuideInfo {
        const message = { images: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatImageGuideInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatImageGuideInfo): ChatImageGuideInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ChatImageGuideInfo.ImageGuideConf images */ 1:
                    message.images.push(ChatImageGuideInfo_ImageGuideConf.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatImageGuideInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ChatImageGuideInfo.ImageGuideConf images = 1; */
        for (let i = 0; i < message.images.length; i++)
            ChatImageGuideInfo_ImageGuideConf.internalBinaryWrite(message.images[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChatImageGuideInfo
 */
export const ChatImageGuideInfo = new ChatImageGuideInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatImageGuideInfo_ImageGuideConf$Type extends MessageType<ChatImageGuideInfo_ImageGuideConf> {
    constructor() {
        super("data.ChatImageGuideInfo.ImageGuideConf", [
            { no: 1, name: "image_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image", kind: "message", T: () => Image },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trigger_words", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "begin_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChatImageGuideInfo_ImageGuideConf>): ChatImageGuideInfo_ImageGuideConf {
        const message = { imageId: "", text: "", triggerWords: [], beginTime: 0n, endTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatImageGuideInfo_ImageGuideConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatImageGuideInfo_ImageGuideConf): ChatImageGuideInfo_ImageGuideConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image_id */ 1:
                    message.imageId = reader.string();
                    break;
                case /* data.Image image */ 2:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* repeated string trigger_words */ 4:
                    message.triggerWords.push(reader.string());
                    break;
                case /* int64 begin_time */ 10:
                    message.beginTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 11:
                    message.endTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatImageGuideInfo_ImageGuideConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image_id = 1; */
        if (message.imageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imageId);
        /* data.Image image = 2; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* repeated string trigger_words = 4; */
        for (let i = 0; i < message.triggerWords.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.triggerWords[i]);
        /* int64 begin_time = 10; */
        if (message.beginTime !== 0n)
            writer.tag(10, WireType.Varint).int64(message.beginTime);
        /* int64 end_time = 11; */
        if (message.endTime !== 0n)
            writer.tag(11, WireType.Varint).int64(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChatImageGuideInfo.ImageGuideConf
 */
export const ChatImageGuideInfo_ImageGuideConf = new ChatImageGuideInfo_ImageGuideConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareItemStyle$Type extends MessageType<ShareItemStyle> {
    constructor() {
        super("data.ShareItemStyle", [
            { no: 1, name: "item_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "name_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShareItemStyle>): ShareItemStyle {
        const message = { itemType: "", itemId: "", name: "", nameColor: "", schema: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShareItemStyle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShareItemStyle): ShareItemStyle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_type */ 1:
                    message.itemType = reader.string();
                    break;
                case /* string item_id */ 2:
                    message.itemId = reader.string();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string name_color */ 5:
                    message.nameColor = reader.string();
                    break;
                case /* string schema */ 6:
                    message.schema = reader.string();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShareItemStyle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_type = 1; */
        if (message.itemType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemType);
        /* string item_id = 2; */
        if (message.itemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemId);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string name_color = 5; */
        if (message.nameColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.nameColor);
        /* string schema = 6; */
        if (message.schema !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.schema);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShareItemStyle
 */
export const ShareItemStyle = new ShareItemStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyMaterial$Type extends MessageType<BuoyMaterial> {
    constructor() {
        super("data.BuoyMaterial", [
            { no: 1, name: "buoy_ball", kind: "message", T: () => Image },
            { no: 2, name: "buoy_tailing", kind: "message", T: () => Image },
            { no: 3, name: "univ_scatter_deco_a", kind: "message", T: () => Image },
            { no: 4, name: "univ_scatter_deco_b", kind: "message", T: () => Image },
            { no: 5, name: "univ_scatter_deco_c", kind: "message", T: () => Image },
            { no: 6, name: "advan_scatter_deco_a", kind: "message", T: () => Image },
            { no: 7, name: "advan_scatter_deco_b", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BuoyMaterial>): BuoyMaterial {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuoyMaterial>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuoyMaterial): BuoyMaterial {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image buoy_ball */ 1:
                    message.buoyBall = Image.internalBinaryRead(reader, reader.uint32(), options, message.buoyBall);
                    break;
                case /* data.Image buoy_tailing */ 2:
                    message.buoyTailing = Image.internalBinaryRead(reader, reader.uint32(), options, message.buoyTailing);
                    break;
                case /* data.Image univ_scatter_deco_a */ 3:
                    message.univScatterDecoA = Image.internalBinaryRead(reader, reader.uint32(), options, message.univScatterDecoA);
                    break;
                case /* data.Image univ_scatter_deco_b */ 4:
                    message.univScatterDecoB = Image.internalBinaryRead(reader, reader.uint32(), options, message.univScatterDecoB);
                    break;
                case /* data.Image univ_scatter_deco_c */ 5:
                    message.univScatterDecoC = Image.internalBinaryRead(reader, reader.uint32(), options, message.univScatterDecoC);
                    break;
                case /* data.Image advan_scatter_deco_a */ 6:
                    message.advanScatterDecoA = Image.internalBinaryRead(reader, reader.uint32(), options, message.advanScatterDecoA);
                    break;
                case /* data.Image advan_scatter_deco_b */ 7:
                    message.advanScatterDecoB = Image.internalBinaryRead(reader, reader.uint32(), options, message.advanScatterDecoB);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuoyMaterial, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image buoy_ball = 1; */
        if (message.buoyBall)
            Image.internalBinaryWrite(message.buoyBall, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image buoy_tailing = 2; */
        if (message.buoyTailing)
            Image.internalBinaryWrite(message.buoyTailing, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image univ_scatter_deco_a = 3; */
        if (message.univScatterDecoA)
            Image.internalBinaryWrite(message.univScatterDecoA, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image univ_scatter_deco_b = 4; */
        if (message.univScatterDecoB)
            Image.internalBinaryWrite(message.univScatterDecoB, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image univ_scatter_deco_c = 5; */
        if (message.univScatterDecoC)
            Image.internalBinaryWrite(message.univScatterDecoC, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image advan_scatter_deco_a = 6; */
        if (message.advanScatterDecoA)
            Image.internalBinaryWrite(message.advanScatterDecoA, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image advan_scatter_deco_b = 7; */
        if (message.advanScatterDecoB)
            Image.internalBinaryWrite(message.advanScatterDecoB, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BuoyMaterial
 */
export const BuoyMaterial = new BuoyMaterial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackgroundMaterial$Type extends MessageType<BackgroundMaterial> {
    constructor() {
        super("data.BackgroundMaterial", [
            { no: 1, name: "buoy_area_bg", kind: "message", T: () => Image },
            { no: 2, name: "global_bg", kind: "message", T: () => Image },
            { no: 3, name: "scoreboard_bg", kind: "message", T: () => Image },
            { no: 4, name: "tone_line_start", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tone_line_end", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BackgroundMaterial>): BackgroundMaterial {
        const message = { toneLineStart: "", toneLineEnd: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BackgroundMaterial>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackgroundMaterial): BackgroundMaterial {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image buoy_area_bg */ 1:
                    message.buoyAreaBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.buoyAreaBg);
                    break;
                case /* data.Image global_bg */ 2:
                    message.globalBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.globalBg);
                    break;
                case /* data.Image scoreboard_bg */ 3:
                    message.scoreboardBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.scoreboardBg);
                    break;
                case /* string tone_line_start */ 4:
                    message.toneLineStart = reader.string();
                    break;
                case /* string tone_line_end */ 5:
                    message.toneLineEnd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackgroundMaterial, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image buoy_area_bg = 1; */
        if (message.buoyAreaBg)
            Image.internalBinaryWrite(message.buoyAreaBg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image global_bg = 2; */
        if (message.globalBg)
            Image.internalBinaryWrite(message.globalBg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image scoreboard_bg = 3; */
        if (message.scoreboardBg)
            Image.internalBinaryWrite(message.scoreboardBg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string tone_line_start = 4; */
        if (message.toneLineStart !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toneLineStart);
        /* string tone_line_end = 5; */
        if (message.toneLineEnd !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toneLineEnd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BackgroundMaterial
 */
export const BackgroundMaterial = new BackgroundMaterial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackMaterial$Type extends MessageType<FeedbackMaterial> {
    constructor() {
        super("data.FeedbackMaterial", [
            { no: 1, name: "nice", kind: "message", T: () => Image },
            { no: 2, name: "good", kind: "message", T: () => Image },
            { no: 3, name: "perfect", kind: "message", T: () => Image },
            { no: 4, name: "advan_perfect_bg", kind: "message", T: () => Image },
            { no: 5, name: "advan_perfect_tx", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<FeedbackMaterial>): FeedbackMaterial {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackMaterial>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackMaterial): FeedbackMaterial {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image nice */ 1:
                    message.nice = Image.internalBinaryRead(reader, reader.uint32(), options, message.nice);
                    break;
                case /* data.Image good */ 2:
                    message.good = Image.internalBinaryRead(reader, reader.uint32(), options, message.good);
                    break;
                case /* data.Image perfect */ 3:
                    message.perfect = Image.internalBinaryRead(reader, reader.uint32(), options, message.perfect);
                    break;
                case /* data.Image advan_perfect_bg */ 4:
                    message.advanPerfectBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.advanPerfectBg);
                    break;
                case /* data.Image advan_perfect_tx */ 5:
                    message.advanPerfectTx = Image.internalBinaryRead(reader, reader.uint32(), options, message.advanPerfectTx);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackMaterial, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image nice = 1; */
        if (message.nice)
            Image.internalBinaryWrite(message.nice, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image good = 2; */
        if (message.good)
            Image.internalBinaryWrite(message.good, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image perfect = 3; */
        if (message.perfect)
            Image.internalBinaryWrite(message.perfect, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image advan_perfect_bg = 4; */
        if (message.advanPerfectBg)
            Image.internalBinaryWrite(message.advanPerfectBg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image advan_perfect_tx = 5; */
        if (message.advanPerfectTx)
            Image.internalBinaryWrite(message.advanPerfectTx, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FeedbackMaterial
 */
export const FeedbackMaterial = new FeedbackMaterial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MidiSkinMaterial$Type extends MessageType<MidiSkinMaterial> {
    constructor() {
        super("data.MidiSkinMaterial", [
            { no: 1, name: "buoy", kind: "message", T: () => BuoyMaterial },
            { no: 2, name: "bg", kind: "message", T: () => BackgroundMaterial },
            { no: 3, name: "feedback", kind: "message", T: () => FeedbackMaterial },
            { no: 4, name: "lyric_color_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MidiSkinMaterial>): MidiSkinMaterial {
        const message = { lyricColorValue: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MidiSkinMaterial>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MidiSkinMaterial): MidiSkinMaterial {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.BuoyMaterial buoy */ 1:
                    message.buoy = BuoyMaterial.internalBinaryRead(reader, reader.uint32(), options, message.buoy);
                    break;
                case /* data.BackgroundMaterial bg */ 2:
                    message.bg = BackgroundMaterial.internalBinaryRead(reader, reader.uint32(), options, message.bg);
                    break;
                case /* data.FeedbackMaterial feedback */ 3:
                    message.feedback = FeedbackMaterial.internalBinaryRead(reader, reader.uint32(), options, message.feedback);
                    break;
                case /* string lyric_color_value */ 4:
                    message.lyricColorValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MidiSkinMaterial, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.BuoyMaterial buoy = 1; */
        if (message.buoy)
            BuoyMaterial.internalBinaryWrite(message.buoy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.BackgroundMaterial bg = 2; */
        if (message.bg)
            BackgroundMaterial.internalBinaryWrite(message.bg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.FeedbackMaterial feedback = 3; */
        if (message.feedback)
            FeedbackMaterial.internalBinaryWrite(message.feedback, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string lyric_color_value = 4; */
        if (message.lyricColorValue !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lyricColorValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MidiSkinMaterial
 */
export const MidiSkinMaterial = new MidiSkinMaterial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDressPrompt$Type extends MessageType<AddDressPrompt> {
    constructor() {
        super("data.AddDressPrompt", [
            { no: 1, name: "has_add_dress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "add_dress_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AddDressPrompt>): AddDressPrompt {
        const message = { hasAddDress: false, addDressVersion: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddDressPrompt>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDressPrompt): AddDressPrompt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has_add_dress */ 1:
                    message.hasAddDress = reader.bool();
                    break;
                case /* int64 add_dress_version */ 2:
                    message.addDressVersion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDressPrompt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool has_add_dress = 1; */
        if (message.hasAddDress !== false)
            writer.tag(1, WireType.Varint).bool(message.hasAddDress);
        /* int64 add_dress_version = 2; */
        if (message.addDressVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.addDressVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AddDressPrompt
 */
export const AddDressPrompt = new AddDressPrompt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MidiSkinDressInfo$Type extends MessageType<MidiSkinDressInfo> {
    constructor() {
        super("data.MidiSkinDressInfo", [
            { no: 1, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "material", kind: "message", T: () => MidiSkinMaterial }
        ]);
    }
    create(value?: PartialMessage<MidiSkinDressInfo>): MidiSkinDressInfo {
        const message = { dressId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MidiSkinDressInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MidiSkinDressInfo): MidiSkinDressInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dress_id */ 1:
                    message.dressId = reader.string();
                    break;
                case /* data.MidiSkinMaterial material */ 2:
                    message.material = MidiSkinMaterial.internalBinaryRead(reader, reader.uint32(), options, message.material);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MidiSkinDressInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dress_id = 1; */
        if (message.dressId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dressId);
        /* data.MidiSkinMaterial material = 2; */
        if (message.material)
            MidiSkinMaterial.internalBinaryWrite(message.material, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MidiSkinDressInfo
 */
export const MidiSkinDressInfo = new MidiSkinDressInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkPhase$Type extends MessageType<LinkPhase> {
    constructor() {
        super("data.LinkPhase", [
            { no: 1, name: "phase_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "phase_seconds_begin", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "phase_seconds_end", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkPhase>): LinkPhase {
        const message = { phaseId: 0, phaseSecondsBegin: 0, phaseSecondsEnd: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkPhase>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkPhase): LinkPhase {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 phase_id */ 1:
                    message.phaseId = reader.int32();
                    break;
                case /* int32 phase_seconds_begin */ 2:
                    message.phaseSecondsBegin = reader.int32();
                    break;
                case /* int32 phase_seconds_end */ 3:
                    message.phaseSecondsEnd = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkPhase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 phase_id = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).int32(message.phaseId);
        /* int32 phase_seconds_begin = 2; */
        if (message.phaseSecondsBegin !== 0)
            writer.tag(2, WireType.Varint).int32(message.phaseSecondsBegin);
        /* int32 phase_seconds_end = 3; */
        if (message.phaseSecondsEnd !== 0)
            writer.tag(3, WireType.Varint).int32(message.phaseSecondsEnd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkPhase
 */
export const LinkPhase = new LinkPhase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkPhaseConfig$Type extends MessageType<LinkPhaseConfig> {
    constructor() {
        super("data.LinkPhaseConfig", [
            { no: 1, name: "phases", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkPhase },
            { no: 2, name: "easter_egg_cartoon_seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkPhaseConfig>): LinkPhaseConfig {
        const message = { phases: [], easterEggCartoonSeconds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkPhaseConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkPhaseConfig): LinkPhaseConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.LinkPhase phases */ 1:
                    message.phases.push(LinkPhase.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 easter_egg_cartoon_seconds */ 2:
                    message.easterEggCartoonSeconds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkPhaseConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.LinkPhase phases = 1; */
        for (let i = 0; i < message.phases.length; i++)
            LinkPhase.internalBinaryWrite(message.phases[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 easter_egg_cartoon_seconds = 2; */
        if (message.easterEggCartoonSeconds !== 0)
            writer.tag(2, WireType.Varint).int32(message.easterEggCartoonSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkPhaseConfig
 */
export const LinkPhaseConfig = new LinkPhaseConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicSetting$Type extends MessageType<LinkmicSetting> {
    constructor() {
        super("data.LinkmicSetting", [
            { no: 1, name: "key", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "content", kind: "message", T: () => SettingContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicSetting>): LinkmicSetting {
        const message = { key: 0, value: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicSetting): LinkmicSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 key */ 1:
                    message.key = reader.int32();
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                case /* data.SettingContent content */ 3:
                    message.content = SettingContent.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 key = 1; */
        if (message.key !== 0)
            writer.tag(1, WireType.Varint).int32(message.key);
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        /* data.SettingContent content = 3; */
        if (message.content)
            SettingContent.internalBinaryWrite(message.content, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicSetting
 */
export const LinkmicSetting = new LinkmicSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingContent$Type extends MessageType<SettingContent> {
    constructor() {
        super("data.SettingContent", [
            { no: 1, name: "application_reason_content", kind: "message", T: () => ApplicationReasonContent },
            { no: 2, name: "bid_paid_linkmic_content", kind: "message", T: () => BidPaidLinkmicContent },
            { no: 3, name: "normal_paid_linkmic_setting_content", kind: "message", T: () => NormalPaidLinkmicSettingContent },
            { no: 4, name: "normal_paid_linkmic_desc_content", kind: "message", T: () => NormalPaidLinkmicDescContent },
            { no: 5, name: "bid_paid_linkmic_setting_content", kind: "message", T: () => BidPaidLinkmicSettingContent },
            { no: 6, name: "ktv_challenge_content", kind: "message", T: () => KTVChallengeContent },
            { no: 7, name: "room_battle_setting_content", kind: "message", T: () => RoomBattleSettingContent },
            { no: 8, name: "normal_paid_linkmic_add_price_content", kind: "message", T: () => NormalPaidLinkmicAddPriceContent },
            { no: 9, name: "guest_battle_config_content", kind: "message", T: () => GuestBattleConfigContent },
            { no: 10, name: "team_fight_config_content", kind: "message", T: () => TeamFightConfigContent },
            { no: 11, name: "self_discipline_info", kind: "message", T: () => SelfDisciplineInfo },
            { no: 12, name: "duo_battle_config_content", kind: "message", T: () => DuoBattleConfigContent },
            { no: 13, name: "ktv_component_content", kind: "message", T: () => KTVComponentContent },
            { no: 14, name: "audio_subtitle_content", kind: "message", T: () => AudioSubtitleContent },
            { no: 15, name: "linkmic_init_info_content", kind: "message", T: () => LinkmicInitInfoContent }
        ]);
    }
    create(value?: PartialMessage<SettingContent>): SettingContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SettingContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingContent): SettingContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ApplicationReasonContent application_reason_content */ 1:
                    message.applicationReasonContent = ApplicationReasonContent.internalBinaryRead(reader, reader.uint32(), options, message.applicationReasonContent);
                    break;
                case /* data.BidPaidLinkmicContent bid_paid_linkmic_content */ 2:
                    message.bidPaidLinkmicContent = BidPaidLinkmicContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicContent);
                    break;
                case /* data.NormalPaidLinkmicSettingContent normal_paid_linkmic_setting_content */ 3:
                    message.normalPaidLinkmicSettingContent = NormalPaidLinkmicSettingContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicSettingContent);
                    break;
                case /* data.NormalPaidLinkmicDescContent normal_paid_linkmic_desc_content */ 4:
                    message.normalPaidLinkmicDescContent = NormalPaidLinkmicDescContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicDescContent);
                    break;
                case /* data.BidPaidLinkmicSettingContent bid_paid_linkmic_setting_content */ 5:
                    message.bidPaidLinkmicSettingContent = BidPaidLinkmicSettingContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicSettingContent);
                    break;
                case /* data.KTVChallengeContent ktv_challenge_content */ 6:
                    message.ktvChallengeContent = KTVChallengeContent.internalBinaryRead(reader, reader.uint32(), options, message.ktvChallengeContent);
                    break;
                case /* data.RoomBattleSettingContent room_battle_setting_content */ 7:
                    message.roomBattleSettingContent = RoomBattleSettingContent.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleSettingContent);
                    break;
                case /* data.NormalPaidLinkmicAddPriceContent normal_paid_linkmic_add_price_content */ 8:
                    message.normalPaidLinkmicAddPriceContent = NormalPaidLinkmicAddPriceContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicAddPriceContent);
                    break;
                case /* data.GuestBattleConfigContent guest_battle_config_content */ 9:
                    message.guestBattleConfigContent = GuestBattleConfigContent.internalBinaryRead(reader, reader.uint32(), options, message.guestBattleConfigContent);
                    break;
                case /* data.TeamFightConfigContent team_fight_config_content */ 10:
                    message.teamFightConfigContent = TeamFightConfigContent.internalBinaryRead(reader, reader.uint32(), options, message.teamFightConfigContent);
                    break;
                case /* data.SelfDisciplineInfo self_discipline_info */ 11:
                    message.selfDisciplineInfo = SelfDisciplineInfo.internalBinaryRead(reader, reader.uint32(), options, message.selfDisciplineInfo);
                    break;
                case /* data.DuoBattleConfigContent duo_battle_config_content */ 12:
                    message.duoBattleConfigContent = DuoBattleConfigContent.internalBinaryRead(reader, reader.uint32(), options, message.duoBattleConfigContent);
                    break;
                case /* data.KTVComponentContent ktv_component_content */ 13:
                    message.ktvComponentContent = KTVComponentContent.internalBinaryRead(reader, reader.uint32(), options, message.ktvComponentContent);
                    break;
                case /* data.AudioSubtitleContent audio_subtitle_content */ 14:
                    message.audioSubtitleContent = AudioSubtitleContent.internalBinaryRead(reader, reader.uint32(), options, message.audioSubtitleContent);
                    break;
                case /* data.LinkmicInitInfoContent linkmic_init_info_content */ 15:
                    message.linkmicInitInfoContent = LinkmicInitInfoContent.internalBinaryRead(reader, reader.uint32(), options, message.linkmicInitInfoContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ApplicationReasonContent application_reason_content = 1; */
        if (message.applicationReasonContent)
            ApplicationReasonContent.internalBinaryWrite(message.applicationReasonContent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.BidPaidLinkmicContent bid_paid_linkmic_content = 2; */
        if (message.bidPaidLinkmicContent)
            BidPaidLinkmicContent.internalBinaryWrite(message.bidPaidLinkmicContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.NormalPaidLinkmicSettingContent normal_paid_linkmic_setting_content = 3; */
        if (message.normalPaidLinkmicSettingContent)
            NormalPaidLinkmicSettingContent.internalBinaryWrite(message.normalPaidLinkmicSettingContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.NormalPaidLinkmicDescContent normal_paid_linkmic_desc_content = 4; */
        if (message.normalPaidLinkmicDescContent)
            NormalPaidLinkmicDescContent.internalBinaryWrite(message.normalPaidLinkmicDescContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.BidPaidLinkmicSettingContent bid_paid_linkmic_setting_content = 5; */
        if (message.bidPaidLinkmicSettingContent)
            BidPaidLinkmicSettingContent.internalBinaryWrite(message.bidPaidLinkmicSettingContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.KTVChallengeContent ktv_challenge_content = 6; */
        if (message.ktvChallengeContent)
            KTVChallengeContent.internalBinaryWrite(message.ktvChallengeContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.RoomBattleSettingContent room_battle_setting_content = 7; */
        if (message.roomBattleSettingContent)
            RoomBattleSettingContent.internalBinaryWrite(message.roomBattleSettingContent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.NormalPaidLinkmicAddPriceContent normal_paid_linkmic_add_price_content = 8; */
        if (message.normalPaidLinkmicAddPriceContent)
            NormalPaidLinkmicAddPriceContent.internalBinaryWrite(message.normalPaidLinkmicAddPriceContent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.GuestBattleConfigContent guest_battle_config_content = 9; */
        if (message.guestBattleConfigContent)
            GuestBattleConfigContent.internalBinaryWrite(message.guestBattleConfigContent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.TeamFightConfigContent team_fight_config_content = 10; */
        if (message.teamFightConfigContent)
            TeamFightConfigContent.internalBinaryWrite(message.teamFightConfigContent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.SelfDisciplineInfo self_discipline_info = 11; */
        if (message.selfDisciplineInfo)
            SelfDisciplineInfo.internalBinaryWrite(message.selfDisciplineInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.DuoBattleConfigContent duo_battle_config_content = 12; */
        if (message.duoBattleConfigContent)
            DuoBattleConfigContent.internalBinaryWrite(message.duoBattleConfigContent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* data.KTVComponentContent ktv_component_content = 13; */
        if (message.ktvComponentContent)
            KTVComponentContent.internalBinaryWrite(message.ktvComponentContent, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* data.AudioSubtitleContent audio_subtitle_content = 14; */
        if (message.audioSubtitleContent)
            AudioSubtitleContent.internalBinaryWrite(message.audioSubtitleContent, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkmicInitInfoContent linkmic_init_info_content = 15; */
        if (message.linkmicInitInfoContent)
            LinkmicInitInfoContent.internalBinaryWrite(message.linkmicInitInfoContent, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SettingContent
 */
export const SettingContent = new SettingContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicInitInfoContent$Type extends MessageType<LinkmicInitInfoContent> {
    constructor() {
        super("data.LinkmicInitInfoContent", [
            { no: 1, name: "video_chat_init_info", kind: "message", T: () => InitInfoSetting }
        ]);
    }
    create(value?: PartialMessage<LinkmicInitInfoContent>): LinkmicInitInfoContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicInitInfoContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicInitInfoContent): LinkmicInitInfoContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.InitInfoSetting video_chat_init_info */ 1:
                    message.videoChatInitInfo = InitInfoSetting.internalBinaryRead(reader, reader.uint32(), options, message.videoChatInitInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicInitInfoContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.InitInfoSetting video_chat_init_info = 1; */
        if (message.videoChatInitInfo)
            InitInfoSetting.internalBinaryWrite(message.videoChatInitInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicInitInfoContent
 */
export const LinkmicInitInfoContent = new LinkmicInitInfoContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitInfoSetting$Type extends MessageType<InitInfoSetting> {
    constructor() {
        super("data.InitInfoSetting", [
            { no: 1, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "ui_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "auto_open", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InitInfoSetting>): InitInfoSetting {
        const message = { scene: 0n, uiLayout: 0n, autoOpen: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitInfoSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitInfoSetting): InitInfoSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 scene */ 1:
                    message.scene = reader.int64().toBigInt();
                    break;
                case /* int64 ui_layout */ 2:
                    message.uiLayout = reader.int64().toBigInt();
                    break;
                case /* int64 auto_open */ 3:
                    message.autoOpen = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitInfoSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 scene = 1; */
        if (message.scene !== 0n)
            writer.tag(1, WireType.Varint).int64(message.scene);
        /* int64 ui_layout = 2; */
        if (message.uiLayout !== 0n)
            writer.tag(2, WireType.Varint).int64(message.uiLayout);
        /* int64 auto_open = 3; */
        if (message.autoOpen !== 0n)
            writer.tag(3, WireType.Varint).int64(message.autoOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.InitInfoSetting
 */
export const InitInfoSetting = new InitInfoSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioSubtitleContent$Type extends MessageType<AudioSubtitleContent> {
    constructor() {
        super("data.AudioSubtitleContent", [
            { no: 1, name: "audio_subtitle_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AudioSubtitleContent>): AudioSubtitleContent {
        const message = { audioSubtitleValue: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioSubtitleContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioSubtitleContent): AudioSubtitleContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 audio_subtitle_value */ 1:
                    message.audioSubtitleValue = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioSubtitleContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 audio_subtitle_value = 1; */
        if (message.audioSubtitleValue !== 0n)
            writer.tag(1, WireType.Varint).int64(message.audioSubtitleValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AudioSubtitleContent
 */
export const AudioSubtitleContent = new AudioSubtitleContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplicationReasonContent$Type extends MessageType<ApplicationReasonContent> {
    constructor() {
        super("data.ApplicationReasonContent", [
            { no: 1, name: "ApplicationReasonExample", kind: "scalar", jsonName: "ApplicationReasonExample", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "DefaultApplicationReasonExample", kind: "scalar", jsonName: "DefaultApplicationReasonExample", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApplicationReasonContent>): ApplicationReasonContent {
        const message = { applicationReasonExample: "", defaultApplicationReasonExample: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ApplicationReasonContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplicationReasonContent): ApplicationReasonContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ApplicationReasonExample = 1 [json_name = "ApplicationReasonExample"];*/ 1:
                    message.applicationReasonExample = reader.string();
                    break;
                case /* string DefaultApplicationReasonExample = 2 [json_name = "DefaultApplicationReasonExample"];*/ 2:
                    message.defaultApplicationReasonExample = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplicationReasonContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ApplicationReasonExample = 1 [json_name = "ApplicationReasonExample"]; */
        if (message.applicationReasonExample !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.applicationReasonExample);
        /* string DefaultApplicationReasonExample = 2 [json_name = "DefaultApplicationReasonExample"]; */
        if (message.defaultApplicationReasonExample !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultApplicationReasonExample);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ApplicationReasonContent
 */
export const ApplicationReasonContent = new ApplicationReasonContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BidPaidLinkmicContent$Type extends MessageType<BidPaidLinkmicContent> {
    constructor() {
        super("data.BidPaidLinkmicContent", [
            { no: 1, name: "start_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "link_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "max_bid_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "bid_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "bid_steps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BidPaidLinkmicOptionalStep }
        ]);
    }
    create(value?: PartialMessage<BidPaidLinkmicContent>): BidPaidLinkmicContent {
        const message = { startPrice: 0n, linkDuration: 0n, maxBidPrice: 0n, bidDuration: 0n, bidSteps: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BidPaidLinkmicContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BidPaidLinkmicContent): BidPaidLinkmicContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_price */ 1:
                    message.startPrice = reader.int64().toBigInt();
                    break;
                case /* int64 link_duration */ 2:
                    message.linkDuration = reader.int64().toBigInt();
                    break;
                case /* int64 max_bid_price */ 3:
                    message.maxBidPrice = reader.int64().toBigInt();
                    break;
                case /* int64 bid_duration */ 4:
                    message.bidDuration = reader.int64().toBigInt();
                    break;
                case /* repeated data.BidPaidLinkmicOptionalStep bid_steps */ 5:
                    message.bidSteps.push(BidPaidLinkmicOptionalStep.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BidPaidLinkmicContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_price = 1; */
        if (message.startPrice !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startPrice);
        /* int64 link_duration = 2; */
        if (message.linkDuration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.linkDuration);
        /* int64 max_bid_price = 3; */
        if (message.maxBidPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.maxBidPrice);
        /* int64 bid_duration = 4; */
        if (message.bidDuration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.bidDuration);
        /* repeated data.BidPaidLinkmicOptionalStep bid_steps = 5; */
        for (let i = 0; i < message.bidSteps.length; i++)
            BidPaidLinkmicOptionalStep.internalBinaryWrite(message.bidSteps[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BidPaidLinkmicContent
 */
export const BidPaidLinkmicContent = new BidPaidLinkmicContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalPaidLinkmicSettingContent$Type extends MessageType<NormalPaidLinkmicSettingContent> {
    constructor() {
        super("data.NormalPaidLinkmicSettingContent", [
            { no: 1, name: "paid_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "limited_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NormalPaidLinkmicSettingContent>): NormalPaidLinkmicSettingContent {
        const message = { paidCount: 0n, limitedTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NormalPaidLinkmicSettingContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalPaidLinkmicSettingContent): NormalPaidLinkmicSettingContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 paid_count */ 1:
                    message.paidCount = reader.int64().toBigInt();
                    break;
                case /* int64 limited_time */ 2:
                    message.limitedTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalPaidLinkmicSettingContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 paid_count = 1; */
        if (message.paidCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.paidCount);
        /* int64 limited_time = 2; */
        if (message.limitedTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.limitedTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.NormalPaidLinkmicSettingContent
 */
export const NormalPaidLinkmicSettingContent = new NormalPaidLinkmicSettingContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalPaidLinkmicDescContent$Type extends MessageType<NormalPaidLinkmicDescContent> {
    constructor() {
        super("data.NormalPaidLinkmicDescContent", [
            { no: 1, name: "saved_tag_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "saved_tag_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PaidLinkmicTag },
            { no: 3, name: "saved_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "reviewed_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NormalPaidLinkmicDescContent>): NormalPaidLinkmicDescContent {
        const message = { savedTagIds: [], savedTagInfos: [], savedDesc: "", reviewedDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NormalPaidLinkmicDescContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalPaidLinkmicDescContent): NormalPaidLinkmicDescContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 saved_tag_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.savedTagIds.push(reader.int64().toBigInt());
                    else
                        message.savedTagIds.push(reader.int64().toBigInt());
                    break;
                case /* repeated data.PaidLinkmicTag saved_tag_infos */ 2:
                    message.savedTagInfos.push(PaidLinkmicTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string saved_desc */ 3:
                    message.savedDesc = reader.string();
                    break;
                case /* string reviewed_desc */ 4:
                    message.reviewedDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalPaidLinkmicDescContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 saved_tag_ids = 1; */
        if (message.savedTagIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.savedTagIds.length; i++)
                writer.int64(message.savedTagIds[i]);
            writer.join();
        }
        /* repeated data.PaidLinkmicTag saved_tag_infos = 2; */
        for (let i = 0; i < message.savedTagInfos.length; i++)
            PaidLinkmicTag.internalBinaryWrite(message.savedTagInfos[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string saved_desc = 3; */
        if (message.savedDesc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.savedDesc);
        /* string reviewed_desc = 4; */
        if (message.reviewedDesc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.reviewedDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.NormalPaidLinkmicDescContent
 */
export const NormalPaidLinkmicDescContent = new NormalPaidLinkmicDescContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BidPaidLinkmicSettingContent$Type extends MessageType<BidPaidLinkmicSettingContent> {
    constructor() {
        super("data.BidPaidLinkmicSettingContent", [
            { no: 1, name: "start_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "link_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BidPaidLinkmicSettingContent>): BidPaidLinkmicSettingContent {
        const message = { startPrice: 0n, linkDuration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BidPaidLinkmicSettingContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BidPaidLinkmicSettingContent): BidPaidLinkmicSettingContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_price */ 1:
                    message.startPrice = reader.int64().toBigInt();
                    break;
                case /* int64 link_duration */ 2:
                    message.linkDuration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BidPaidLinkmicSettingContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_price = 1; */
        if (message.startPrice !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startPrice);
        /* int64 link_duration = 2; */
        if (message.linkDuration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.linkDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BidPaidLinkmicSettingContent
 */
export const BidPaidLinkmicSettingContent = new BidPaidLinkmicSettingContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVChallengeContent$Type extends MessageType<KTVChallengeContent> {
    constructor() {
        super("data.KTVChallengeContent", [
            { no: 1, name: "TargetScore", kind: "scalar", jsonName: "TargetScore", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "TargetDurationSecond", kind: "scalar", jsonName: "TargetDurationSecond", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KTVChallengeContent>): KTVChallengeContent {
        const message = { targetScore: 0n, targetDurationSecond: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVChallengeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVChallengeContent): KTVChallengeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 TargetScore = 1 [json_name = "TargetScore"];*/ 1:
                    message.targetScore = reader.int64().toBigInt();
                    break;
                case /* int64 TargetDurationSecond = 2 [json_name = "TargetDurationSecond"];*/ 2:
                    message.targetDurationSecond = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVChallengeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 TargetScore = 1 [json_name = "TargetScore"]; */
        if (message.targetScore !== 0n)
            writer.tag(1, WireType.Varint).int64(message.targetScore);
        /* int64 TargetDurationSecond = 2 [json_name = "TargetDurationSecond"]; */
        if (message.targetDurationSecond !== 0n)
            writer.tag(2, WireType.Varint).int64(message.targetDurationSecond);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KTVChallengeContent
 */
export const KTVChallengeContent = new KTVChallengeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBattleSettingContent$Type extends MessageType<RoomBattleSettingContent> {
    constructor() {
        super("data.RoomBattleSettingContent", [
            { no: 1, name: "battle_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "accept_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "only_accept_following_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "not_accept_less_than_three_linked_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "room_battle_theme_param", kind: "message", T: () => RoomBattleThemeParam }
        ]);
    }
    create(value?: PartialMessage<RoomBattleSettingContent>): RoomBattleSettingContent {
        const message = { battleDuration: 0n, acceptInvite: false, onlyAcceptFollowingInvite: false, notAcceptLessThanThreeLinkedInvite: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBattleSettingContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBattleSettingContent): RoomBattleSettingContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 battle_duration */ 1:
                    message.battleDuration = reader.int64().toBigInt();
                    break;
                case /* bool accept_invite */ 2:
                    message.acceptInvite = reader.bool();
                    break;
                case /* bool only_accept_following_invite */ 3:
                    message.onlyAcceptFollowingInvite = reader.bool();
                    break;
                case /* bool not_accept_less_than_three_linked_invite */ 4:
                    message.notAcceptLessThanThreeLinkedInvite = reader.bool();
                    break;
                case /* data.RoomBattleThemeParam room_battle_theme_param */ 5:
                    message.roomBattleThemeParam = RoomBattleThemeParam.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleThemeParam);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBattleSettingContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 battle_duration = 1; */
        if (message.battleDuration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.battleDuration);
        /* bool accept_invite = 2; */
        if (message.acceptInvite !== false)
            writer.tag(2, WireType.Varint).bool(message.acceptInvite);
        /* bool only_accept_following_invite = 3; */
        if (message.onlyAcceptFollowingInvite !== false)
            writer.tag(3, WireType.Varint).bool(message.onlyAcceptFollowingInvite);
        /* bool not_accept_less_than_three_linked_invite = 4; */
        if (message.notAcceptLessThanThreeLinkedInvite !== false)
            writer.tag(4, WireType.Varint).bool(message.notAcceptLessThanThreeLinkedInvite);
        /* data.RoomBattleThemeParam room_battle_theme_param = 5; */
        if (message.roomBattleThemeParam)
            RoomBattleThemeParam.internalBinaryWrite(message.roomBattleThemeParam, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomBattleSettingContent
 */
export const RoomBattleSettingContent = new RoomBattleSettingContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalPaidLinkmicAddPriceContent$Type extends MessageType<NormalPaidLinkmicAddPriceContent> {
    constructor() {
        super("data.NormalPaidLinkmicAddPriceContent", [
            { no: 1, name: "add_price_strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "custom_add_price_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NormalPaidLinkmicAddPriceContent>): NormalPaidLinkmicAddPriceContent {
        const message = { addPriceStrategy: 0, customAddPriceValue: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NormalPaidLinkmicAddPriceContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalPaidLinkmicAddPriceContent): NormalPaidLinkmicAddPriceContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 add_price_strategy */ 1:
                    message.addPriceStrategy = reader.int32();
                    break;
                case /* int64 custom_add_price_value */ 2:
                    message.customAddPriceValue = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalPaidLinkmicAddPriceContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 add_price_strategy = 1; */
        if (message.addPriceStrategy !== 0)
            writer.tag(1, WireType.Varint).int32(message.addPriceStrategy);
        /* int64 custom_add_price_value = 2; */
        if (message.customAddPriceValue !== 0n)
            writer.tag(2, WireType.Varint).int64(message.customAddPriceValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.NormalPaidLinkmicAddPriceContent
 */
export const NormalPaidLinkmicAddPriceContent = new NormalPaidLinkmicAddPriceContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleConfigContent$Type extends MessageType<GuestBattleConfigContent> {
    constructor() {
        super("data.GuestBattleConfigContent", [
            { no: 1, name: "is_anchor_involved", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "last_battle_duration_by_anchor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "loser_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "score_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBattleConfigContent>): GuestBattleConfigContent {
        const message = { isAnchorInvolved: 0, lastBattleDurationByAnchor: 0n, loserNum: 0n, scoreType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleConfigContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleConfigContent): GuestBattleConfigContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 is_anchor_involved */ 1:
                    message.isAnchorInvolved = reader.int32();
                    break;
                case /* int64 last_battle_duration_by_anchor */ 2:
                    message.lastBattleDurationByAnchor = reader.int64().toBigInt();
                    break;
                case /* int64 loser_num */ 3:
                    message.loserNum = reader.int64().toBigInt();
                    break;
                case /* int64 score_type */ 4:
                    message.scoreType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleConfigContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 is_anchor_involved = 1; */
        if (message.isAnchorInvolved !== 0)
            writer.tag(1, WireType.Varint).int32(message.isAnchorInvolved);
        /* int64 last_battle_duration_by_anchor = 2; */
        if (message.lastBattleDurationByAnchor !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lastBattleDurationByAnchor);
        /* int64 loser_num = 3; */
        if (message.loserNum !== 0n)
            writer.tag(3, WireType.Varint).int64(message.loserNum);
        /* int64 score_type = 4; */
        if (message.scoreType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.scoreType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GuestBattleConfigContent
 */
export const GuestBattleConfigContent = new GuestBattleConfigContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamFightConfigContent$Type extends MessageType<TeamFightConfigContent> {
    constructor() {
        super("data.TeamFightConfigContent", [
            { no: 1, name: "last_fight_duration_by_anchor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TeamFightConfigContent>): TeamFightConfigContent {
        const message = { lastFightDurationByAnchor: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamFightConfigContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamFightConfigContent): TeamFightConfigContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 last_fight_duration_by_anchor */ 1:
                    message.lastFightDurationByAnchor = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamFightConfigContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 last_fight_duration_by_anchor = 1; */
        if (message.lastFightDurationByAnchor !== 0n)
            writer.tag(1, WireType.Varint).int64(message.lastFightDurationByAnchor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TeamFightConfigContent
 */
export const TeamFightConfigContent = new TeamFightConfigContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DuoBattleConfigContent$Type extends MessageType<DuoBattleConfigContent> {
    constructor() {
        super("data.DuoBattleConfigContent", [
            { no: 1, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DuoBattleConfigContent>): DuoBattleConfigContent {
        const message = { duration: 0n, scoreType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DuoBattleConfigContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DuoBattleConfigContent): DuoBattleConfigContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 duration */ 1:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int32 score_type */ 2:
                    message.scoreType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DuoBattleConfigContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 duration = 1; */
        if (message.duration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.duration);
        /* int32 score_type = 2; */
        if (message.scoreType !== 0)
            writer.tag(2, WireType.Varint).int32(message.scoreType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DuoBattleConfigContent
 */
export const DuoBattleConfigContent = new DuoBattleConfigContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelfDisciplineInfo$Type extends MessageType<SelfDisciplineInfo> {
    constructor() {
        super("data.SelfDisciplineInfo", [
            { no: 1, name: "target_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_target", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target_icon_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "punch_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "room_punch_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SelfDisciplineInfo>): SelfDisciplineInfo {
        const message = { targetList: [], currentTarget: "", targetIconUri: "", text: "", punchDuration: 0n, roomPunchCount: "", version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelfDisciplineInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelfDisciplineInfo): SelfDisciplineInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string target_list */ 1:
                    message.targetList.push(reader.string());
                    break;
                case /* string current_target */ 2:
                    message.currentTarget = reader.string();
                    break;
                case /* string target_icon_uri */ 3:
                    message.targetIconUri = reader.string();
                    break;
                case /* string text */ 4:
                    message.text = reader.string();
                    break;
                case /* int64 punch_duration */ 6:
                    message.punchDuration = reader.int64().toBigInt();
                    break;
                case /* string room_punch_count */ 7:
                    message.roomPunchCount = reader.string();
                    break;
                case /* int64 version */ 8:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelfDisciplineInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string target_list = 1; */
        for (let i = 0; i < message.targetList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.targetList[i]);
        /* string current_target = 2; */
        if (message.currentTarget !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentTarget);
        /* string target_icon_uri = 3; */
        if (message.targetIconUri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.targetIconUri);
        /* string text = 4; */
        if (message.text !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.text);
        /* int64 punch_duration = 6; */
        if (message.punchDuration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.punchDuration);
        /* string room_punch_count = 7; */
        if (message.roomPunchCount !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.roomPunchCount);
        /* int64 version = 8; */
        if (message.version !== 0n)
            writer.tag(8, WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.SelfDisciplineInfo
 */
export const SelfDisciplineInfo = new SelfDisciplineInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVComponentContent$Type extends MessageType<KTVComponentContent> {
    constructor() {
        super("data.KTVComponentContent", [
            { no: 1, name: "KTVComponentSwitchStatus", kind: "scalar", jsonName: "KTVComponentSwitchStatus", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<KTVComponentContent>): KTVComponentContent {
        const message = { kTVComponentSwitchStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVComponentContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVComponentContent): KTVComponentContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 KTVComponentSwitchStatus = 1 [json_name = "KTVComponentSwitchStatus"];*/ 1:
                    message.kTVComponentSwitchStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVComponentContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 KTVComponentSwitchStatus = 1 [json_name = "KTVComponentSwitchStatus"]; */
        if (message.kTVComponentSwitchStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.kTVComponentSwitchStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.KTVComponentContent
 */
export const KTVComponentContent = new KTVComponentContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BidPaidLinkmicOptionalStep$Type extends MessageType<BidPaidLinkmicOptionalStep> {
    constructor() {
        super("data.BidPaidLinkmicOptionalStep", [
            { no: 1, name: "bid_left_closed_interval", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bid_right_closed_interval", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "bid_step", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BidPaidLinkmicOptionalStep>): BidPaidLinkmicOptionalStep {
        const message = { bidLeftClosedInterval: 0n, bidRightClosedInterval: 0n, bidStep: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BidPaidLinkmicOptionalStep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BidPaidLinkmicOptionalStep): BidPaidLinkmicOptionalStep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 bid_left_closed_interval */ 1:
                    message.bidLeftClosedInterval = reader.int64().toBigInt();
                    break;
                case /* int64 bid_right_closed_interval */ 2:
                    message.bidRightClosedInterval = reader.int64().toBigInt();
                    break;
                case /* int64 bid_step */ 3:
                    message.bidStep = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BidPaidLinkmicOptionalStep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 bid_left_closed_interval = 1; */
        if (message.bidLeftClosedInterval !== 0n)
            writer.tag(1, WireType.Varint).int64(message.bidLeftClosedInterval);
        /* int64 bid_right_closed_interval = 2; */
        if (message.bidRightClosedInterval !== 0n)
            writer.tag(2, WireType.Varint).int64(message.bidRightClosedInterval);
        /* int64 bid_step = 3; */
        if (message.bidStep !== 0n)
            writer.tag(3, WireType.Varint).int64(message.bidStep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BidPaidLinkmicOptionalStep
 */
export const BidPaidLinkmicOptionalStep = new BidPaidLinkmicOptionalStep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BidPaidLinkmicBidInfo$Type extends MessageType<BidPaidLinkmicBidInfo> {
    constructor() {
        super("data.BidPaidLinkmicBidInfo", [
            { no: 1, name: "bid_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bid_users_uv", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "server_left_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_avatar", kind: "message", T: () => Image },
            { no: 7, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BidPaidLinkmicBidInfo>): BidPaidLinkmicBidInfo {
        const message = { bidPrice: 0n, bidUsersUv: 0n, serverLeftTime: 0n, userName: "", userId: 0n, version: 0n, secUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BidPaidLinkmicBidInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BidPaidLinkmicBidInfo): BidPaidLinkmicBidInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 bid_price */ 1:
                    message.bidPrice = reader.int64().toBigInt();
                    break;
                case /* int64 bid_users_uv */ 2:
                    message.bidUsersUv = reader.int64().toBigInt();
                    break;
                case /* int64 server_left_time */ 3:
                    message.serverLeftTime = reader.int64().toBigInt();
                    break;
                case /* string user_name */ 4:
                    message.userName = reader.string();
                    break;
                case /* int64 user_id */ 5:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Image user_avatar */ 6:
                    message.userAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.userAvatar);
                    break;
                case /* uint64 version */ 7:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* string sec_user_id */ 8:
                    message.secUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BidPaidLinkmicBidInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 bid_price = 1; */
        if (message.bidPrice !== 0n)
            writer.tag(1, WireType.Varint).int64(message.bidPrice);
        /* int64 bid_users_uv = 2; */
        if (message.bidUsersUv !== 0n)
            writer.tag(2, WireType.Varint).int64(message.bidUsersUv);
        /* int64 server_left_time = 3; */
        if (message.serverLeftTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.serverLeftTime);
        /* string user_name = 4; */
        if (message.userName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userName);
        /* int64 user_id = 5; */
        if (message.userId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.userId);
        /* data.Image user_avatar = 6; */
        if (message.userAvatar)
            Image.internalBinaryWrite(message.userAvatar, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 7; */
        if (message.version !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.version);
        /* string sec_user_id = 8; */
        if (message.secUserId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.secUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BidPaidLinkmicBidInfo
 */
export const BidPaidLinkmicBidInfo = new BidPaidLinkmicBidInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BidPaidLinkmicDealInfo$Type extends MessageType<BidPaidLinkmicDealInfo> {
    constructor() {
        super("data.BidPaidLinkmicDealInfo", [
            { no: 1, name: "win_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_avatar", kind: "message", T: () => Image },
            { no: 5, name: "sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BidPaidLinkmicDealInfo>): BidPaidLinkmicDealInfo {
        const message = { winPrice: 0n, userName: "", userId: 0n, secUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BidPaidLinkmicDealInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BidPaidLinkmicDealInfo): BidPaidLinkmicDealInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 win_price */ 1:
                    message.winPrice = reader.int64().toBigInt();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Image user_avatar */ 4:
                    message.userAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.userAvatar);
                    break;
                case /* string sec_user_id */ 5:
                    message.secUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BidPaidLinkmicDealInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 win_price = 1; */
        if (message.winPrice !== 0n)
            writer.tag(1, WireType.Varint).int64(message.winPrice);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* data.Image user_avatar = 4; */
        if (message.userAvatar)
            Image.internalBinaryWrite(message.userAvatar, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string sec_user_id = 5; */
        if (message.secUserId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.secUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BidPaidLinkmicDealInfo
 */
export const BidPaidLinkmicDealInfo = new BidPaidLinkmicDealInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BidPaidLinkmicBidRecord$Type extends MessageType<BidPaidLinkmicBidRecord> {
    constructor() {
        super("data.BidPaidLinkmicBidRecord", [
            { no: 1, name: "bid_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_avatar", kind: "message", T: () => Image },
            { no: 5, name: "is_start_price", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BidPaidLinkmicBidRecord>): BidPaidLinkmicBidRecord {
        const message = { bidPrice: 0n, userName: "", userId: 0n, isStartPrice: false, secUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BidPaidLinkmicBidRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BidPaidLinkmicBidRecord): BidPaidLinkmicBidRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 bid_price */ 1:
                    message.bidPrice = reader.int64().toBigInt();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Image user_avatar */ 4:
                    message.userAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.userAvatar);
                    break;
                case /* bool is_start_price */ 5:
                    message.isStartPrice = reader.bool();
                    break;
                case /* string sec_user_id */ 6:
                    message.secUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BidPaidLinkmicBidRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 bid_price = 1; */
        if (message.bidPrice !== 0n)
            writer.tag(1, WireType.Varint).int64(message.bidPrice);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* data.Image user_avatar = 4; */
        if (message.userAvatar)
            Image.internalBinaryWrite(message.userAvatar, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool is_start_price = 5; */
        if (message.isStartPrice !== false)
            writer.tag(5, WireType.Varint).bool(message.isStartPrice);
        /* string sec_user_id = 6; */
        if (message.secUserId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.secUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BidPaidLinkmicBidRecord
 */
export const BidPaidLinkmicBidRecord = new BidPaidLinkmicBidRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalPaidLinkmicInfo$Type extends MessageType<NormalPaidLinkmicInfo> {
    constructor() {
        super("data.NormalPaidLinkmicInfo", [
            { no: 1, name: "paid_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "limited_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "add_price_strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "add_price_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "add_price_multiple", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NormalPaidLinkmicInfo>): NormalPaidLinkmicInfo {
        const message = { paidCount: 0n, limitedTime: 0n, status: 0, addPriceStrategy: 0, addPriceValue: 0n, addPriceMultiple: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NormalPaidLinkmicInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalPaidLinkmicInfo): NormalPaidLinkmicInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 paid_count */ 1:
                    message.paidCount = reader.int64().toBigInt();
                    break;
                case /* int64 limited_time */ 2:
                    message.limitedTime = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* int32 add_price_strategy */ 4:
                    message.addPriceStrategy = reader.int32();
                    break;
                case /* int64 add_price_value */ 5:
                    message.addPriceValue = reader.int64().toBigInt();
                    break;
                case /* int64 add_price_multiple */ 6:
                    message.addPriceMultiple = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalPaidLinkmicInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 paid_count = 1; */
        if (message.paidCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.paidCount);
        /* int64 limited_time = 2; */
        if (message.limitedTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.limitedTime);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* int32 add_price_strategy = 4; */
        if (message.addPriceStrategy !== 0)
            writer.tag(4, WireType.Varint).int32(message.addPriceStrategy);
        /* int64 add_price_value = 5; */
        if (message.addPriceValue !== 0n)
            writer.tag(5, WireType.Varint).int64(message.addPriceValue);
        /* int64 add_price_multiple = 6; */
        if (message.addPriceMultiple !== 0n)
            writer.tag(6, WireType.Varint).int64(message.addPriceMultiple);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.NormalPaidLinkmicInfo
 */
export const NormalPaidLinkmicInfo = new NormalPaidLinkmicInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLinkmicTag$Type extends MessageType<PaidLinkmicTag> {
    constructor() {
        super("data.PaidLinkmicTag", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pic", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<PaidLinkmicTag>): PaidLinkmicTag {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLinkmicTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLinkmicTag): PaidLinkmicTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* data.Image pic */ 3:
                    message.pic = Image.internalBinaryRead(reader, reader.uint32(), options, message.pic);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLinkmicTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* data.Image pic = 3; */
        if (message.pic)
            Image.internalBinaryWrite(message.pic, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLinkmicTag
 */
export const PaidLinkmicTag = new PaidLinkmicTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLinkmicExplainCardInfo$Type extends MessageType<PaidLinkmicExplainCardInfo> {
    constructor() {
        super("data.PaidLinkmicExplainCardInfo", [
            { no: 1, name: "num_of_link", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "avg_grade", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "tag", kind: "message", T: () => PaidLinkmicTag }
        ]);
    }
    create(value?: PartialMessage<PaidLinkmicExplainCardInfo>): PaidLinkmicExplainCardInfo {
        const message = { numOfLink: 0n, avgGrade: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLinkmicExplainCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLinkmicExplainCardInfo): PaidLinkmicExplainCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 num_of_link */ 1:
                    message.numOfLink = reader.int64().toBigInt();
                    break;
                case /* float avg_grade */ 2:
                    message.avgGrade = reader.float();
                    break;
                case /* data.PaidLinkmicTag tag */ 3:
                    message.tag = PaidLinkmicTag.internalBinaryRead(reader, reader.uint32(), options, message.tag);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLinkmicExplainCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 num_of_link = 1; */
        if (message.numOfLink !== 0n)
            writer.tag(1, WireType.Varint).int64(message.numOfLink);
        /* float avg_grade = 2; */
        if (message.avgGrade !== 0)
            writer.tag(2, WireType.Bit32).float(message.avgGrade);
        /* data.PaidLinkmicTag tag = 3; */
        if (message.tag)
            PaidLinkmicTag.internalBinaryWrite(message.tag, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PaidLinkmicExplainCardInfo
 */
export const PaidLinkmicExplainCardInfo = new PaidLinkmicExplainCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgBoardItemInfo$Type extends MessageType<MsgBoardItemInfo> {
    constructor() {
        super("data.MsgBoardItemInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sender", kind: "message", T: () => User },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "process_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "msg_disappear_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MsgBoardItemInfo>): MsgBoardItemInfo {
        const message = { id: 0n, idStr: "", content: "", processStatus: 0, giftId: 0n, msgDisappearTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgBoardItemInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgBoardItemInfo): MsgBoardItemInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 2:
                    message.idStr = reader.string();
                    break;
                case /* data.User sender */ 3:
                    message.sender = User.internalBinaryRead(reader, reader.uint32(), options, message.sender);
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* int32 process_status */ 5:
                    message.processStatus = reader.int32();
                    break;
                case /* int64 gift_id */ 6:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 msg_disappear_time */ 7:
                    message.msgDisappearTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgBoardItemInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string id_str = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* data.User sender = 3; */
        if (message.sender)
            User.internalBinaryWrite(message.sender, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* int32 process_status = 5; */
        if (message.processStatus !== 0)
            writer.tag(5, WireType.Varint).int32(message.processStatus);
        /* int64 gift_id = 6; */
        if (message.giftId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.giftId);
        /* int64 msg_disappear_time = 7; */
        if (message.msgDisappearTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.msgDisappearTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MsgBoardItemInfo
 */
export const MsgBoardItemInfo = new MsgBoardItemInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderSingItemV2$Type extends MessageType<OrderSingItemV2> {
    constructor() {
        super("data.OrderSingItemV2", [
            { no: 1, name: "order_user", kind: "message", T: () => User },
            { no: 2, name: "gift_sender", kind: "message", T: () => User },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "microphone_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "gift_diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "order_sing_gift_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<OrderSingItemV2>): OrderSingItemV2 {
        const message = { itemId: "", microphoneType: 0, giftId: 0n, giftDiamondCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderSingItemV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderSingItemV2): OrderSingItemV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User order_user */ 1:
                    message.orderUser = User.internalBinaryRead(reader, reader.uint32(), options, message.orderUser);
                    break;
                case /* data.User gift_sender */ 2:
                    message.giftSender = User.internalBinaryRead(reader, reader.uint32(), options, message.giftSender);
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* int32 microphone_type */ 4:
                    message.microphoneType = reader.int32();
                    break;
                case /* int64 gift_id */ 5:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 gift_diamond_count */ 6:
                    message.giftDiamondCount = reader.int64().toBigInt();
                    break;
                case /* data.Image order_sing_gift_icon */ 7:
                    message.orderSingGiftIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.orderSingGiftIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderSingItemV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User order_user = 1; */
        if (message.orderUser)
            User.internalBinaryWrite(message.orderUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User gift_sender = 2; */
        if (message.giftSender)
            User.internalBinaryWrite(message.giftSender, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* int32 microphone_type = 4; */
        if (message.microphoneType !== 0)
            writer.tag(4, WireType.Varint).int32(message.microphoneType);
        /* int64 gift_id = 5; */
        if (message.giftId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.giftId);
        /* int64 gift_diamond_count = 6; */
        if (message.giftDiamondCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.giftDiamondCount);
        /* data.Image order_sing_gift_icon = 7; */
        if (message.orderSingGiftIcon)
            Image.internalBinaryWrite(message.orderSingGiftIcon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.OrderSingItemV2
 */
export const OrderSingItemV2 = new OrderSingItemV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurrentOrderSingItemV2$Type extends MessageType<CurrentOrderSingItemV2> {
    constructor() {
        super("data.CurrentOrderSingItemV2", [
            { no: 1, name: "current_sing_item", kind: "message", T: () => OrderSingItemV2 },
            { no: 2, name: "microphone_task_data", kind: "message", T: () => MicrophoneTaskDataV2 }
        ]);
    }
    create(value?: PartialMessage<CurrentOrderSingItemV2>): CurrentOrderSingItemV2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CurrentOrderSingItemV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CurrentOrderSingItemV2): CurrentOrderSingItemV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.OrderSingItemV2 current_sing_item */ 1:
                    message.currentSingItem = OrderSingItemV2.internalBinaryRead(reader, reader.uint32(), options, message.currentSingItem);
                    break;
                case /* data.MicrophoneTaskDataV2 microphone_task_data */ 2:
                    message.microphoneTaskData = MicrophoneTaskDataV2.internalBinaryRead(reader, reader.uint32(), options, message.microphoneTaskData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CurrentOrderSingItemV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.OrderSingItemV2 current_sing_item = 1; */
        if (message.currentSingItem)
            OrderSingItemV2.internalBinaryWrite(message.currentSingItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.MicrophoneTaskDataV2 microphone_task_data = 2; */
        if (message.microphoneTaskData)
            MicrophoneTaskDataV2.internalBinaryWrite(message.microphoneTaskData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CurrentOrderSingItemV2
 */
export const CurrentOrderSingItemV2 = new CurrentOrderSingItemV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MicrophoneTaskDataV2$Type extends MessageType<MicrophoneTaskDataV2> {
    constructor() {
        super("data.MicrophoneTaskDataV2", [
            { no: 1, name: "current_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "need_score_to_next", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "order_sing_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MicrophoneTaskDataV2>): MicrophoneTaskDataV2 {
        const message = { currentScore: 0n, needScoreToNext: 0n, orderSingStage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MicrophoneTaskDataV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MicrophoneTaskDataV2): MicrophoneTaskDataV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 current_score */ 1:
                    message.currentScore = reader.int64().toBigInt();
                    break;
                case /* int64 need_score_to_next */ 2:
                    message.needScoreToNext = reader.int64().toBigInt();
                    break;
                case /* int32 order_sing_stage */ 3:
                    message.orderSingStage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MicrophoneTaskDataV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 current_score = 1; */
        if (message.currentScore !== 0n)
            writer.tag(1, WireType.Varint).int64(message.currentScore);
        /* int64 need_score_to_next = 2; */
        if (message.needScoreToNext !== 0n)
            writer.tag(2, WireType.Varint).int64(message.needScoreToNext);
        /* int32 order_sing_stage = 3; */
        if (message.orderSingStage !== 0)
            writer.tag(3, WireType.Varint).int32(message.orderSingStage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MicrophoneTaskDataV2
 */
export const MicrophoneTaskDataV2 = new MicrophoneTaskDataV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdventurFont$Type extends MessageType<AdventurFont> {
    constructor() {
        super("data.AdventurFont", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdventurFont>): AdventurFont {
        const message = { text: "", color: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdventurFont>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdventurFont): AdventurFont {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string color */ 2:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdventurFont, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string color = 2; */
        if (message.color !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AdventurFont
 */
export const AdventurFont = new AdventurFont$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdventureCardInfo$Type extends MessageType<AdventureCardInfo> {
    constructor() {
        super("data.AdventureCardInfo", [
            { no: 1, name: "card_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_stage_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "background", kind: "message", T: () => Image },
            { no: 5, name: "pair_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "title", kind: "message", T: () => AdventurFont },
            { no: 8, name: "card_unique_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "timestamp", kind: "message", T: () => AdventurFont },
            { no: 10, name: "paired_user_nickname_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "card_unique_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "pair_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdventureCardInfo>): AdventureCardInfo {
        const message = { cardId: 0n, fromStageId: 0n, pairId: 0n, cardUniqueId: 0n, pairedUserNicknameColor: "", cardUniqueIdStr: "", pairIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdventureCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdventureCardInfo): AdventureCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 card_id */ 1:
                    message.cardId = reader.int64().toBigInt();
                    break;
                case /* int64 from_stage_id */ 2:
                    message.fromStageId = reader.int64().toBigInt();
                    break;
                case /* data.Image background */ 3:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int64 pair_id */ 5:
                    message.pairId = reader.int64().toBigInt();
                    break;
                case /* data.AdventurFont title */ 7:
                    message.title = AdventurFont.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* int64 card_unique_id */ 8:
                    message.cardUniqueId = reader.int64().toBigInt();
                    break;
                case /* data.AdventurFont timestamp */ 9:
                    message.timestamp = AdventurFont.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* string paired_user_nickname_color */ 10:
                    message.pairedUserNicknameColor = reader.string();
                    break;
                case /* string card_unique_id_str */ 11:
                    message.cardUniqueIdStr = reader.string();
                    break;
                case /* string pair_id_str */ 12:
                    message.pairIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdventureCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 card_id = 1; */
        if (message.cardId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.cardId);
        /* int64 from_stage_id = 2; */
        if (message.fromStageId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fromStageId);
        /* data.Image background = 3; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 pair_id = 5; */
        if (message.pairId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.pairId);
        /* data.AdventurFont title = 7; */
        if (message.title)
            AdventurFont.internalBinaryWrite(message.title, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 card_unique_id = 8; */
        if (message.cardUniqueId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.cardUniqueId);
        /* data.AdventurFont timestamp = 9; */
        if (message.timestamp)
            AdventurFont.internalBinaryWrite(message.timestamp, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string paired_user_nickname_color = 10; */
        if (message.pairedUserNicknameColor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.pairedUserNicknameColor);
        /* string card_unique_id_str = 11; */
        if (message.cardUniqueIdStr !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.cardUniqueIdStr);
        /* string pair_id_str = 12; */
        if (message.pairIdStr !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.pairIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AdventureCardInfo
 */
export const AdventureCardInfo = new AdventureCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdventurePairInfo$Type extends MessageType<AdventurePairInfo> {
    constructor() {
        super("data.AdventurePairInfo", [
            { no: 1, name: "pair_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_user", kind: "message", T: () => AdventureUserInfo },
            { no: 3, name: "to_user", kind: "message", T: () => AdventureUserInfo },
            { no: 4, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "next_stage_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "stage_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "stage_info", kind: "message", T: () => AdventureStageInfo },
            { no: 8, name: "pair_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "call_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "caller_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "pair_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdventurePairInfo>): AdventurePairInfo {
        const message = { pairId: 0n, score: 0n, nextStageScore: 0n, stageId: 0n, pairStatus: 0, callStatus: 0, callerUserId: 0n, pairIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdventurePairInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdventurePairInfo): AdventurePairInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pair_id */ 1:
                    message.pairId = reader.int64().toBigInt();
                    break;
                case /* data.AdventureUserInfo from_user */ 2:
                    message.fromUser = AdventureUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.fromUser);
                    break;
                case /* data.AdventureUserInfo to_user */ 3:
                    message.toUser = AdventureUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* int64 score */ 4:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 next_stage_score */ 5:
                    message.nextStageScore = reader.int64().toBigInt();
                    break;
                case /* int64 stage_id */ 6:
                    message.stageId = reader.int64().toBigInt();
                    break;
                case /* data.AdventureStageInfo stage_info */ 7:
                    message.stageInfo = AdventureStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.stageInfo);
                    break;
                case /* int32 pair_status */ 8:
                    message.pairStatus = reader.int32();
                    break;
                case /* int32 call_status */ 9:
                    message.callStatus = reader.int32();
                    break;
                case /* int64 caller_user_id */ 10:
                    message.callerUserId = reader.int64().toBigInt();
                    break;
                case /* string pair_id_str */ 11:
                    message.pairIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdventurePairInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pair_id = 1; */
        if (message.pairId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pairId);
        /* data.AdventureUserInfo from_user = 2; */
        if (message.fromUser)
            AdventureUserInfo.internalBinaryWrite(message.fromUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.AdventureUserInfo to_user = 3; */
        if (message.toUser)
            AdventureUserInfo.internalBinaryWrite(message.toUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 4; */
        if (message.score !== 0n)
            writer.tag(4, WireType.Varint).int64(message.score);
        /* int64 next_stage_score = 5; */
        if (message.nextStageScore !== 0n)
            writer.tag(5, WireType.Varint).int64(message.nextStageScore);
        /* int64 stage_id = 6; */
        if (message.stageId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.stageId);
        /* data.AdventureStageInfo stage_info = 7; */
        if (message.stageInfo)
            AdventureStageInfo.internalBinaryWrite(message.stageInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 pair_status = 8; */
        if (message.pairStatus !== 0)
            writer.tag(8, WireType.Varint).int32(message.pairStatus);
        /* int32 call_status = 9; */
        if (message.callStatus !== 0)
            writer.tag(9, WireType.Varint).int32(message.callStatus);
        /* int64 caller_user_id = 10; */
        if (message.callerUserId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.callerUserId);
        /* string pair_id_str = 11; */
        if (message.pairIdStr !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.pairIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AdventurePairInfo
 */
export const AdventurePairInfo = new AdventurePairInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdventureStageInfo$Type extends MessageType<AdventureStageInfo> {
    constructor() {
        super("data.AdventureStageInfo", [
            { no: 1, name: "stage_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "stage_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stage_background", kind: "message", T: () => Image },
            { no: 5, name: "stage_lower_limit_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "stage_lower_limit_score_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "button_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "stage_call_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "stage_call_duration_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "stage_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "process_bar_track_image", kind: "message", T: () => Image },
            { no: 12, name: "process_bar_image", kind: "message", T: () => Image },
            { no: 13, name: "process_bar_dot_image", kind: "message", T: () => Image },
            { no: 14, name: "process_bar_header_image", kind: "message", T: () => Image },
            { no: 15, name: "process_bar_bubble_image", kind: "message", T: () => Image },
            { no: 16, name: "process_bar_bubble_header_image", kind: "message", T: () => Image },
            { no: 17, name: "paired_user_avatar_bg", kind: "message", T: () => Image },
            { no: 18, name: "paired_user_avatar_bg_border_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "stage_bg_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AdventureStageInfo>): AdventureStageInfo {
        const message = { stageId: 0n, stageName: "", stageLowerLimitScore: 0n, stageLowerLimitScoreList: [], buttonStatus: 0, stageCallDuration: 0n, stageCallDurationList: [], stageType: 0, pairedUserAvatarBgBorderColor: "", stageBgType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdventureStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdventureStageInfo): AdventureStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 stage_id */ 1:
                    message.stageId = reader.int64().toBigInt();
                    break;
                case /* string stage_name */ 2:
                    message.stageName = reader.string();
                    break;
                case /* data.Image stage_background */ 3:
                    message.stageBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.stageBackground);
                    break;
                case /* int64 stage_lower_limit_score */ 5:
                    message.stageLowerLimitScore = reader.int64().toBigInt();
                    break;
                case /* repeated int64 stage_lower_limit_score_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.stageLowerLimitScoreList.push(reader.int64().toBigInt());
                    else
                        message.stageLowerLimitScoreList.push(reader.int64().toBigInt());
                    break;
                case /* int32 button_status */ 7:
                    message.buttonStatus = reader.int32();
                    break;
                case /* int64 stage_call_duration */ 8:
                    message.stageCallDuration = reader.int64().toBigInt();
                    break;
                case /* repeated int64 stage_call_duration_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.stageCallDurationList.push(reader.int64().toBigInt());
                    else
                        message.stageCallDurationList.push(reader.int64().toBigInt());
                    break;
                case /* int32 stage_type */ 10:
                    message.stageType = reader.int32();
                    break;
                case /* data.Image process_bar_track_image */ 11:
                    message.processBarTrackImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.processBarTrackImage);
                    break;
                case /* data.Image process_bar_image */ 12:
                    message.processBarImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.processBarImage);
                    break;
                case /* data.Image process_bar_dot_image */ 13:
                    message.processBarDotImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.processBarDotImage);
                    break;
                case /* data.Image process_bar_header_image */ 14:
                    message.processBarHeaderImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.processBarHeaderImage);
                    break;
                case /* data.Image process_bar_bubble_image */ 15:
                    message.processBarBubbleImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.processBarBubbleImage);
                    break;
                case /* data.Image process_bar_bubble_header_image */ 16:
                    message.processBarBubbleHeaderImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.processBarBubbleHeaderImage);
                    break;
                case /* data.Image paired_user_avatar_bg */ 17:
                    message.pairedUserAvatarBg = Image.internalBinaryRead(reader, reader.uint32(), options, message.pairedUserAvatarBg);
                    break;
                case /* string paired_user_avatar_bg_border_color */ 18:
                    message.pairedUserAvatarBgBorderColor = reader.string();
                    break;
                case /* int64 stage_bg_type */ 19:
                    message.stageBgType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdventureStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 stage_id = 1; */
        if (message.stageId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.stageId);
        /* string stage_name = 2; */
        if (message.stageName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stageName);
        /* data.Image stage_background = 3; */
        if (message.stageBackground)
            Image.internalBinaryWrite(message.stageBackground, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 stage_lower_limit_score = 5; */
        if (message.stageLowerLimitScore !== 0n)
            writer.tag(5, WireType.Varint).int64(message.stageLowerLimitScore);
        /* repeated int64 stage_lower_limit_score_list = 6; */
        if (message.stageLowerLimitScoreList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.stageLowerLimitScoreList.length; i++)
                writer.int64(message.stageLowerLimitScoreList[i]);
            writer.join();
        }
        /* int32 button_status = 7; */
        if (message.buttonStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.buttonStatus);
        /* int64 stage_call_duration = 8; */
        if (message.stageCallDuration !== 0n)
            writer.tag(8, WireType.Varint).int64(message.stageCallDuration);
        /* repeated int64 stage_call_duration_list = 9; */
        if (message.stageCallDurationList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.stageCallDurationList.length; i++)
                writer.int64(message.stageCallDurationList[i]);
            writer.join();
        }
        /* int32 stage_type = 10; */
        if (message.stageType !== 0)
            writer.tag(10, WireType.Varint).int32(message.stageType);
        /* data.Image process_bar_track_image = 11; */
        if (message.processBarTrackImage)
            Image.internalBinaryWrite(message.processBarTrackImage, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.Image process_bar_image = 12; */
        if (message.processBarImage)
            Image.internalBinaryWrite(message.processBarImage, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* data.Image process_bar_dot_image = 13; */
        if (message.processBarDotImage)
            Image.internalBinaryWrite(message.processBarDotImage, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* data.Image process_bar_header_image = 14; */
        if (message.processBarHeaderImage)
            Image.internalBinaryWrite(message.processBarHeaderImage, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* data.Image process_bar_bubble_image = 15; */
        if (message.processBarBubbleImage)
            Image.internalBinaryWrite(message.processBarBubbleImage, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* data.Image process_bar_bubble_header_image = 16; */
        if (message.processBarBubbleHeaderImage)
            Image.internalBinaryWrite(message.processBarBubbleHeaderImage, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* data.Image paired_user_avatar_bg = 17; */
        if (message.pairedUserAvatarBg)
            Image.internalBinaryWrite(message.pairedUserAvatarBg, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* string paired_user_avatar_bg_border_color = 18; */
        if (message.pairedUserAvatarBgBorderColor !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.pairedUserAvatarBgBorderColor);
        /* int64 stage_bg_type = 19; */
        if (message.stageBgType !== 0n)
            writer.tag(19, WireType.Varint).int64(message.stageBgType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AdventureStageInfo
 */
export const AdventureStageInfo = new AdventureStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdventureUserInfo$Type extends MessageType<AdventureUserInfo> {
    constructor() {
        super("data.AdventureUserInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 3, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "is_mvp", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "user_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "invited_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "invite_users", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "call_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "new_im_icon_with_level", kind: "message", T: () => Image },
            { no: 14, name: "gender", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AdventureUserInfo>): AdventureUserInfo {
        const message = { userId: 0n, nickName: "", score: 0n, rank: 0n, isMvp: false, userStatus: 0, invitedCount: 0n, inviteUsers: [], callStatus: 0, gender: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdventureUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdventureUserInfo): AdventureUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Image avatar_thumb */ 2:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* string nick_name */ 3:
                    message.nickName = reader.string();
                    break;
                case /* int64 score */ 4:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 5:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* bool is_mvp */ 8:
                    message.isMvp = reader.bool();
                    break;
                case /* int32 user_status */ 9:
                    message.userStatus = reader.int32();
                    break;
                case /* int64 invited_count */ 10:
                    message.invitedCount = reader.int64().toBigInt();
                    break;
                case /* repeated int64 invite_users */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.inviteUsers.push(reader.int64().toBigInt());
                    else
                        message.inviteUsers.push(reader.int64().toBigInt());
                    break;
                case /* int32 call_status */ 12:
                    message.callStatus = reader.int32();
                    break;
                case /* data.Image new_im_icon_with_level */ 13:
                    message.newImIconWithLevel = Image.internalBinaryRead(reader, reader.uint32(), options, message.newImIconWithLevel);
                    break;
                case /* int32 gender */ 14:
                    message.gender = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdventureUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* data.Image avatar_thumb = 2; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string nick_name = 3; */
        if (message.nickName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickName);
        /* int64 score = 4; */
        if (message.score !== 0n)
            writer.tag(4, WireType.Varint).int64(message.score);
        /* int64 rank = 5; */
        if (message.rank !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rank);
        /* bool is_mvp = 8; */
        if (message.isMvp !== false)
            writer.tag(8, WireType.Varint).bool(message.isMvp);
        /* int32 user_status = 9; */
        if (message.userStatus !== 0)
            writer.tag(9, WireType.Varint).int32(message.userStatus);
        /* int64 invited_count = 10; */
        if (message.invitedCount !== 0n)
            writer.tag(10, WireType.Varint).int64(message.invitedCount);
        /* repeated int64 invite_users = 11; */
        if (message.inviteUsers.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.inviteUsers.length; i++)
                writer.int64(message.inviteUsers[i]);
            writer.join();
        }
        /* int32 call_status = 12; */
        if (message.callStatus !== 0)
            writer.tag(12, WireType.Varint).int32(message.callStatus);
        /* data.Image new_im_icon_with_level = 13; */
        if (message.newImIconWithLevel)
            Image.internalBinaryWrite(message.newImIconWithLevel, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* int32 gender = 14; */
        if (message.gender !== 0)
            writer.tag(14, WireType.Varint).int32(message.gender);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AdventureUserInfo
 */
export const AdventureUserInfo = new AdventureUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdventureSettingContent$Type extends MessageType<AdventureSettingContent> {
    constructor() {
        super("data.AdventureSettingContent", [
            { no: 1, name: "header_background", kind: "message", T: () => Image },
            { no: 2, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdventureStageInfo },
            { no: 3, name: "call_stage", kind: "message", T: () => AdventureStageInfo }
        ]);
    }
    create(value?: PartialMessage<AdventureSettingContent>): AdventureSettingContent {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdventureSettingContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdventureSettingContent): AdventureSettingContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image header_background */ 1:
                    message.headerBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.headerBackground);
                    break;
                case /* repeated data.AdventureStageInfo stage_info_list */ 2:
                    message.stageInfoList.push(AdventureStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.AdventureStageInfo call_stage */ 3:
                    message.callStage = AdventureStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.callStage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdventureSettingContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image header_background = 1; */
        if (message.headerBackground)
            Image.internalBinaryWrite(message.headerBackground, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.AdventureStageInfo stage_info_list = 2; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            AdventureStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.AdventureStageInfo call_stage = 3; */
        if (message.callStage)
            AdventureStageInfo.internalBinaryWrite(message.callStage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AdventureSettingContent
 */
export const AdventureSettingContent = new AdventureSettingContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdventurePlayModeInfo$Type extends MessageType<AdventurePlayModeInfo> {
    constructor() {
        super("data.AdventurePlayModeInfo", [
            { no: 5, name: "linked_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdventureUserInfo },
            { no: 7, name: "play_mode_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "setting_content", kind: "message", T: () => AdventureSettingContent },
            { no: 9, name: "play_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "start_animation", kind: "message", T: () => Image },
            { no: 11, name: "finish_animation", kind: "message", T: () => Image },
            { no: 12, name: "play_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdventurePlayModeInfo>): AdventurePlayModeInfo {
        const message = { linkedUserList: [], playModeStatus: 0, playId: 0n, playIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdventurePlayModeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdventurePlayModeInfo): AdventurePlayModeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.AdventureUserInfo linked_user_list */ 5:
                    message.linkedUserList.push(AdventureUserInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 play_mode_status */ 7:
                    message.playModeStatus = reader.int32();
                    break;
                case /* data.AdventureSettingContent setting_content */ 8:
                    message.settingContent = AdventureSettingContent.internalBinaryRead(reader, reader.uint32(), options, message.settingContent);
                    break;
                case /* int64 play_id */ 9:
                    message.playId = reader.int64().toBigInt();
                    break;
                case /* data.Image start_animation */ 10:
                    message.startAnimation = Image.internalBinaryRead(reader, reader.uint32(), options, message.startAnimation);
                    break;
                case /* data.Image finish_animation */ 11:
                    message.finishAnimation = Image.internalBinaryRead(reader, reader.uint32(), options, message.finishAnimation);
                    break;
                case /* string play_id_str */ 12:
                    message.playIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdventurePlayModeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.AdventureUserInfo linked_user_list = 5; */
        for (let i = 0; i < message.linkedUserList.length; i++)
            AdventureUserInfo.internalBinaryWrite(message.linkedUserList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 play_mode_status = 7; */
        if (message.playModeStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.playModeStatus);
        /* data.AdventureSettingContent setting_content = 8; */
        if (message.settingContent)
            AdventureSettingContent.internalBinaryWrite(message.settingContent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 play_id = 9; */
        if (message.playId !== 0n)
            writer.tag(9, WireType.Varint).int64(message.playId);
        /* data.Image start_animation = 10; */
        if (message.startAnimation)
            Image.internalBinaryWrite(message.startAnimation, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Image finish_animation = 11; */
        if (message.finishAnimation)
            Image.internalBinaryWrite(message.finishAnimation, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string play_id_str = 12; */
        if (message.playIdStr !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.playIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AdventurePlayModeInfo
 */
export const AdventurePlayModeInfo = new AdventurePlayModeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMatchGroupInfo$Type extends MessageType<ChatMatchGroupInfo> {
    constructor() {
        super("data.ChatMatchGroupInfo", [
            { no: 1, name: "group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tag_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "disband_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "group_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 6, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMatchGroupInfo>): ChatMatchGroupInfo {
        const message = { groupId: "", tagId: 0n, disbandTime: 0n, status: 0, groupUserList: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMatchGroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMatchGroupInfo): ChatMatchGroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_id */ 1:
                    message.groupId = reader.string();
                    break;
                case /* int64 tag_id */ 2:
                    message.tagId = reader.int64().toBigInt();
                    break;
                case /* int64 disband_time */ 3:
                    message.disbandTime = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                case /* repeated data.User group_user_list */ 5:
                    message.groupUserList.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 version */ 6:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMatchGroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_id = 1; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* int64 tag_id = 2; */
        if (message.tagId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.tagId);
        /* int64 disband_time = 3; */
        if (message.disbandTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.disbandTime);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* repeated data.User group_user_list = 5; */
        for (let i = 0; i < message.groupUserList.length; i++)
            User.internalBinaryWrite(message.groupUserList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 version = 6; */
        if (message.version !== 0n)
            writer.tag(6, WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChatMatchGroupInfo
 */
export const ChatMatchGroupInfo = new ChatMatchGroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractiveScreenCastInfo$Type extends MessageType<InteractiveScreenCastInfo> {
    constructor() {
        super("data.InteractiveScreenCastInfo", [
            { no: 1, name: "item_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractiveScreenCastInfo>): InteractiveScreenCastInfo {
        const message = { itemAppId: "", itemType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractiveScreenCastInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractiveScreenCastInfo): InteractiveScreenCastInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_app_id */ 1:
                    message.itemAppId = reader.string();
                    break;
                case /* int32 item_type */ 2:
                    message.itemType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractiveScreenCastInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_app_id = 1; */
        if (message.itemAppId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemAppId);
        /* int32 item_type = 2; */
        if (message.itemType !== 0)
            writer.tag(2, WireType.Varint).int32(message.itemType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.InteractiveScreenCastInfo
 */
export const InteractiveScreenCastInfo = new InteractiveScreenCastInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicGameInfo$Type extends MessageType<LinkmicGameInfo> {
    constructor() {
        super("data.LinkmicGameInfo", [
            { no: 1, name: "play_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "game_category", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicGameInfo>): LinkmicGameInfo {
        const message = { playId: 0n, gameId: "", gameCategory: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicGameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicGameInfo): LinkmicGameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 play_id */ 1:
                    message.playId = reader.int64().toBigInt();
                    break;
                case /* string game_id */ 2:
                    message.gameId = reader.string();
                    break;
                case /* string game_category */ 3:
                    message.gameCategory = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 play_id = 1; */
        if (message.playId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.playId);
        /* string game_id = 2; */
        if (message.gameId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameId);
        /* string game_category = 3; */
        if (message.gameCategory !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gameCategory);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LinkmicGameInfo
 */
export const LinkmicGameInfo = new LinkmicGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThemedCompetitionSetting$Type extends MessageType<ThemedCompetitionSetting> {
    constructor() {
        super("data.ThemedCompetitionSetting", [
            { no: 1, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "theme_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "selection_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "win_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "judges_user_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "max_judges_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "max_win_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "server_theme_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "custom_theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "max_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "can_edit_score", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "max_score_candidates", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ThemedCompetitionSetting>): ThemedCompetitionSetting {
        const message = { theme: "", themeType: 0, selectionType: 0, winCount: 0n, judgesUserIdList: [], maxJudgesCount: 0n, maxWinCount: 0n, serverThemeList: [], customTheme: "", maxScore: 0n, canEditScore: false, maxScoreCandidates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThemedCompetitionSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThemedCompetitionSetting): ThemedCompetitionSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string theme */ 1:
                    message.theme = reader.string();
                    break;
                case /* int32 theme_type */ 2:
                    message.themeType = reader.int32();
                    break;
                case /* int32 selection_type */ 3:
                    message.selectionType = reader.int32();
                    break;
                case /* int64 win_count */ 4:
                    message.winCount = reader.int64().toBigInt();
                    break;
                case /* repeated int64 judges_user_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.judgesUserIdList.push(reader.int64().toBigInt());
                    else
                        message.judgesUserIdList.push(reader.int64().toBigInt());
                    break;
                case /* int64 max_judges_count */ 6:
                    message.maxJudgesCount = reader.int64().toBigInt();
                    break;
                case /* int64 max_win_count */ 7:
                    message.maxWinCount = reader.int64().toBigInt();
                    break;
                case /* repeated string server_theme_list */ 8:
                    message.serverThemeList.push(reader.string());
                    break;
                case /* string custom_theme */ 9:
                    message.customTheme = reader.string();
                    break;
                case /* int64 max_score */ 10:
                    message.maxScore = reader.int64().toBigInt();
                    break;
                case /* bool can_edit_score */ 11:
                    message.canEditScore = reader.bool();
                    break;
                case /* repeated int64 max_score_candidates */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.maxScoreCandidates.push(reader.int64().toBigInt());
                    else
                        message.maxScoreCandidates.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThemedCompetitionSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string theme = 1; */
        if (message.theme !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.theme);
        /* int32 theme_type = 2; */
        if (message.themeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.themeType);
        /* int32 selection_type = 3; */
        if (message.selectionType !== 0)
            writer.tag(3, WireType.Varint).int32(message.selectionType);
        /* int64 win_count = 4; */
        if (message.winCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.winCount);
        /* repeated int64 judges_user_id_list = 5; */
        if (message.judgesUserIdList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.judgesUserIdList.length; i++)
                writer.int64(message.judgesUserIdList[i]);
            writer.join();
        }
        /* int64 max_judges_count = 6; */
        if (message.maxJudgesCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.maxJudgesCount);
        /* int64 max_win_count = 7; */
        if (message.maxWinCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.maxWinCount);
        /* repeated string server_theme_list = 8; */
        for (let i = 0; i < message.serverThemeList.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.serverThemeList[i]);
        /* string custom_theme = 9; */
        if (message.customTheme !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.customTheme);
        /* int64 max_score = 10; */
        if (message.maxScore !== 0n)
            writer.tag(10, WireType.Varint).int64(message.maxScore);
        /* bool can_edit_score = 11; */
        if (message.canEditScore !== false)
            writer.tag(11, WireType.Varint).bool(message.canEditScore);
        /* repeated int64 max_score_candidates = 12; */
        if (message.maxScoreCandidates.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.maxScoreCandidates.length; i++)
                writer.int64(message.maxScoreCandidates[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ThemedCompetitionSetting
 */
export const ThemedCompetitionSetting = new ThemedCompetitionSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThemedCompetitionInfo$Type extends MessageType<ThemedCompetitionInfo> {
    constructor() {
        super("data.ThemedCompetitionInfo", [
            { no: 1, name: "setting", kind: "message", T: () => ThemedCompetitionSetting },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "competition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "current_performer_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ThemedCompetitionInfo>): ThemedCompetitionInfo {
        const message = { status: 0, competitionId: 0n, currentPerformerUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThemedCompetitionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThemedCompetitionInfo): ThemedCompetitionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ThemedCompetitionSetting setting */ 1:
                    message.setting = ThemedCompetitionSetting.internalBinaryRead(reader, reader.uint32(), options, message.setting);
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* int64 competition_id */ 4:
                    message.competitionId = reader.int64().toBigInt();
                    break;
                case /* int64 current_performer_user_id */ 5:
                    message.currentPerformerUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThemedCompetitionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ThemedCompetitionSetting setting = 1; */
        if (message.setting)
            ThemedCompetitionSetting.internalBinaryWrite(message.setting, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* int64 competition_id = 4; */
        if (message.competitionId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.competitionId);
        /* int64 current_performer_user_id = 5; */
        if (message.currentPerformerUserId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.currentPerformerUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ThemedCompetitionInfo
 */
export const ThemedCompetitionInfo = new ThemedCompetitionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThemedCompetitionInfo_Score$Type extends MessageType<ThemedCompetitionInfo_Score> {
    constructor() {
        super("data.ThemedCompetitionInfo.Score", [
            { no: 1, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score_fuzz", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "win_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "show_effect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ThemedCompetitionInfo_Score>): ThemedCompetitionInfo_Score {
        const message = { score: 0n, scoreFuzz: "", winType: 0, rank: 0n, showEffect: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThemedCompetitionInfo_Score>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThemedCompetitionInfo_Score): ThemedCompetitionInfo_Score {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 score */ 1:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string score_fuzz */ 2:
                    message.scoreFuzz = reader.string();
                    break;
                case /* int32 win_type */ 3:
                    message.winType = reader.int32();
                    break;
                case /* int64 rank */ 4:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* bool show_effect */ 5:
                    message.showEffect = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThemedCompetitionInfo_Score, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 score = 1; */
        if (message.score !== 0n)
            writer.tag(1, WireType.Varint).int64(message.score);
        /* string score_fuzz = 2; */
        if (message.scoreFuzz !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scoreFuzz);
        /* int32 win_type = 3; */
        if (message.winType !== 0)
            writer.tag(3, WireType.Varint).int32(message.winType);
        /* int64 rank = 4; */
        if (message.rank !== 0n)
            writer.tag(4, WireType.Varint).int64(message.rank);
        /* bool show_effect = 5; */
        if (message.showEffect !== false)
            writer.tag(5, WireType.Varint).bool(message.showEffect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ThemedCompetitionInfo.Score
 */
export const ThemedCompetitionInfo_Score = new ThemedCompetitionInfo_Score$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryExpandActivityInfo$Type extends MessageType<LotteryExpandActivityInfo> {
    constructor() {
        super("data.LotteryExpandActivityInfo", [
            { no: 1, name: "biz_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "expand_activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rule_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tips_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "expand_lucky_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "expand_grant_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "extra_gift_bag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "bytepay_voucher_switcher", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryExpandActivityInfo>): LotteryExpandActivityInfo {
        const message = { bizId: 0n, expandActivityId: "", ruleText: "", tipsText: "", expandLuckyCount: 0n, expandGrantCount: 0n, extraGiftBag: "", bytepayVoucherSwitcher: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryExpandActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryExpandActivityInfo): LotteryExpandActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 biz_id */ 1:
                    message.bizId = reader.int64().toBigInt();
                    break;
                case /* string expand_activity_id */ 2:
                    message.expandActivityId = reader.string();
                    break;
                case /* string rule_text */ 3:
                    message.ruleText = reader.string();
                    break;
                case /* string tips_text */ 4:
                    message.tipsText = reader.string();
                    break;
                case /* int64 expand_lucky_count */ 5:
                    message.expandLuckyCount = reader.int64().toBigInt();
                    break;
                case /* int64 expand_grant_count */ 6:
                    message.expandGrantCount = reader.int64().toBigInt();
                    break;
                case /* string extra_gift_bag */ 10:
                    message.extraGiftBag = reader.string();
                    break;
                case /* int64 bytepay_voucher_switcher */ 11:
                    message.bytepayVoucherSwitcher = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryExpandActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 biz_id = 1; */
        if (message.bizId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.bizId);
        /* string expand_activity_id = 2; */
        if (message.expandActivityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.expandActivityId);
        /* string rule_text = 3; */
        if (message.ruleText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ruleText);
        /* string tips_text = 4; */
        if (message.tipsText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tipsText);
        /* int64 expand_lucky_count = 5; */
        if (message.expandLuckyCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.expandLuckyCount);
        /* int64 expand_grant_count = 6; */
        if (message.expandGrantCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.expandGrantCount);
        /* string extra_gift_bag = 10; */
        if (message.extraGiftBag !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.extraGiftBag);
        /* int64 bytepay_voucher_switcher = 11; */
        if (message.bytepayVoucherSwitcher !== 0n)
            writer.tag(11, WireType.Varint).int64(message.bytepayVoucherSwitcher);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryExpandActivityInfo
 */
export const LotteryExpandActivityInfo = new LotteryExpandActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryRegularlyConfig$Type extends MessageType<LotteryRegularlyConfig> {
    constructor() {
        super("data.LotteryRegularlyConfig", [
            { no: 1, name: "times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "interval", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryRegularlyConfig>): LotteryRegularlyConfig {
        const message = { times: 0, interval: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryRegularlyConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryRegularlyConfig): LotteryRegularlyConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 times */ 1:
                    message.times = reader.int32();
                    break;
                case /* int32 interval */ 2:
                    message.interval = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryRegularlyConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 times = 1; */
        if (message.times !== 0)
            writer.tag(1, WireType.Varint).int32(message.times);
        /* int32 interval = 2; */
        if (message.interval !== 0)
            writer.tag(2, WireType.Varint).int32(message.interval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryRegularlyConfig
 */
export const LotteryRegularlyConfig = new LotteryRegularlyConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryInfo$Type extends MessageType<LotteryInfo> {
    constructor() {
        super("data.LotteryInfo", [
            { no: 1, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "owner_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "owner_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "prize_info", kind: "message", T: () => LotteryPrize },
            { no: 8, name: "conditions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LotteryCondition },
            { no: 9, name: "prize_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "lucky_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "count_down", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "draw_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "real_lucky_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "total_grant_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "withdraw_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "real_draw_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "lucky_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LotteryLuckyUser },
            { no: 20, name: "current_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "candidate_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "lottery_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "sec_anchor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "sec_owner_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "expand_activity_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LotteryExpandActivityInfo },
            { no: 27, name: "use_new_draw_interaction", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 30, name: "launch_task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "launch_task_info", kind: "message", T: () => LaunchTaskInfo },
            { no: 50, name: "client_biz_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 51, name: "server_biz_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 52, name: "ui_config", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryInfo>): LotteryInfo {
        const message = { lotteryId: 0n, ownerUserId: 0n, anchorId: 0n, ownerType: 0, roomId: 0n, status: 0, conditions: [], prizeCount: 0n, luckyCount: 0n, countDown: 0n, startTime: 0n, drawTime: 0n, extra: "", realLuckyCount: 0n, totalGrantCount: 0n, withdrawCount: 0n, realDrawTime: 0n, luckyUsers: [], currentTime: 0n, candidateNum: 0n, lotteryIdStr: "", roomIdStr: "", secAnchorId: "", secOwnerUserId: "", expandActivityInfoList: [], useNewDrawInteraction: false, launchTaskId: "", index: 0, clientBizData: "", serverBizData: "", uiConfig: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryInfo): LotteryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 lottery_id */ 1:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* int64 owner_user_id */ 2:
                    message.ownerUserId = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_id */ 3:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* int32 owner_type */ 4:
                    message.ownerType = reader.int32();
                    break;
                case /* int64 room_id */ 5:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 6:
                    message.status = reader.int32();
                    break;
                case /* data.LotteryPrize prize_info */ 7:
                    message.prizeInfo = LotteryPrize.internalBinaryRead(reader, reader.uint32(), options, message.prizeInfo);
                    break;
                case /* repeated data.LotteryCondition conditions */ 8:
                    message.conditions.push(LotteryCondition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 prize_count */ 9:
                    message.prizeCount = reader.int64().toBigInt();
                    break;
                case /* int64 lucky_count */ 10:
                    message.luckyCount = reader.int64().toBigInt();
                    break;
                case /* int64 count_down */ 11:
                    message.countDown = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 12:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 draw_time */ 13:
                    message.drawTime = reader.int64().toBigInt();
                    break;
                case /* string extra */ 14:
                    message.extra = reader.string();
                    break;
                case /* int64 real_lucky_count */ 15:
                    message.realLuckyCount = reader.int64().toBigInt();
                    break;
                case /* int64 total_grant_count */ 16:
                    message.totalGrantCount = reader.int64().toBigInt();
                    break;
                case /* int64 withdraw_count */ 17:
                    message.withdrawCount = reader.int64().toBigInt();
                    break;
                case /* int64 real_draw_time */ 18:
                    message.realDrawTime = reader.int64().toBigInt();
                    break;
                case /* repeated data.LotteryLuckyUser lucky_users */ 19:
                    message.luckyUsers.push(LotteryLuckyUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 current_time */ 20:
                    message.currentTime = reader.int64().toBigInt();
                    break;
                case /* int64 candidate_num */ 21:
                    message.candidateNum = reader.int64().toBigInt();
                    break;
                case /* string lottery_id_str */ 22:
                    message.lotteryIdStr = reader.string();
                    break;
                case /* string room_id_str */ 23:
                    message.roomIdStr = reader.string();
                    break;
                case /* string sec_anchor_id */ 24:
                    message.secAnchorId = reader.string();
                    break;
                case /* string sec_owner_user_id */ 25:
                    message.secOwnerUserId = reader.string();
                    break;
                case /* repeated data.LotteryExpandActivityInfo expand_activity_info_list */ 26:
                    message.expandActivityInfoList.push(LotteryExpandActivityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool use_new_draw_interaction */ 27:
                    message.useNewDrawInteraction = reader.bool();
                    break;
                case /* string launch_task_id */ 30:
                    message.launchTaskId = reader.string();
                    break;
                case /* int32 index */ 31:
                    message.index = reader.int32();
                    break;
                case /* data.LaunchTaskInfo launch_task_info */ 32:
                    message.launchTaskInfo = LaunchTaskInfo.internalBinaryRead(reader, reader.uint32(), options, message.launchTaskInfo);
                    break;
                case /* string client_biz_data */ 50:
                    message.clientBizData = reader.string();
                    break;
                case /* string server_biz_data */ 51:
                    message.serverBizData = reader.string();
                    break;
                case /* string ui_config */ 52:
                    message.uiConfig = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 lottery_id = 1; */
        if (message.lotteryId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.lotteryId);
        /* int64 owner_user_id = 2; */
        if (message.ownerUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.ownerUserId);
        /* int64 anchor_id = 3; */
        if (message.anchorId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.anchorId);
        /* int32 owner_type = 4; */
        if (message.ownerType !== 0)
            writer.tag(4, WireType.Varint).int32(message.ownerType);
        /* int64 room_id = 5; */
        if (message.roomId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.roomId);
        /* int32 status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* data.LotteryPrize prize_info = 7; */
        if (message.prizeInfo)
            LotteryPrize.internalBinaryWrite(message.prizeInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LotteryCondition conditions = 8; */
        for (let i = 0; i < message.conditions.length; i++)
            LotteryCondition.internalBinaryWrite(message.conditions[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 prize_count = 9; */
        if (message.prizeCount !== 0n)
            writer.tag(9, WireType.Varint).int64(message.prizeCount);
        /* int64 lucky_count = 10; */
        if (message.luckyCount !== 0n)
            writer.tag(10, WireType.Varint).int64(message.luckyCount);
        /* int64 count_down = 11; */
        if (message.countDown !== 0n)
            writer.tag(11, WireType.Varint).int64(message.countDown);
        /* int64 start_time = 12; */
        if (message.startTime !== 0n)
            writer.tag(12, WireType.Varint).int64(message.startTime);
        /* int64 draw_time = 13; */
        if (message.drawTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.drawTime);
        /* string extra = 14; */
        if (message.extra !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.extra);
        /* int64 real_lucky_count = 15; */
        if (message.realLuckyCount !== 0n)
            writer.tag(15, WireType.Varint).int64(message.realLuckyCount);
        /* int64 total_grant_count = 16; */
        if (message.totalGrantCount !== 0n)
            writer.tag(16, WireType.Varint).int64(message.totalGrantCount);
        /* int64 withdraw_count = 17; */
        if (message.withdrawCount !== 0n)
            writer.tag(17, WireType.Varint).int64(message.withdrawCount);
        /* int64 real_draw_time = 18; */
        if (message.realDrawTime !== 0n)
            writer.tag(18, WireType.Varint).int64(message.realDrawTime);
        /* repeated data.LotteryLuckyUser lucky_users = 19; */
        for (let i = 0; i < message.luckyUsers.length; i++)
            LotteryLuckyUser.internalBinaryWrite(message.luckyUsers[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* int64 current_time = 20; */
        if (message.currentTime !== 0n)
            writer.tag(20, WireType.Varint).int64(message.currentTime);
        /* int64 candidate_num = 21; */
        if (message.candidateNum !== 0n)
            writer.tag(21, WireType.Varint).int64(message.candidateNum);
        /* string lottery_id_str = 22; */
        if (message.lotteryIdStr !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.lotteryIdStr);
        /* string room_id_str = 23; */
        if (message.roomIdStr !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.roomIdStr);
        /* string sec_anchor_id = 24; */
        if (message.secAnchorId !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.secAnchorId);
        /* string sec_owner_user_id = 25; */
        if (message.secOwnerUserId !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.secOwnerUserId);
        /* repeated data.LotteryExpandActivityInfo expand_activity_info_list = 26; */
        for (let i = 0; i < message.expandActivityInfoList.length; i++)
            LotteryExpandActivityInfo.internalBinaryWrite(message.expandActivityInfoList[i], writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* bool use_new_draw_interaction = 27; */
        if (message.useNewDrawInteraction !== false)
            writer.tag(27, WireType.Varint).bool(message.useNewDrawInteraction);
        /* string launch_task_id = 30; */
        if (message.launchTaskId !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.launchTaskId);
        /* int32 index = 31; */
        if (message.index !== 0)
            writer.tag(31, WireType.Varint).int32(message.index);
        /* data.LaunchTaskInfo launch_task_info = 32; */
        if (message.launchTaskInfo)
            LaunchTaskInfo.internalBinaryWrite(message.launchTaskInfo, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* string client_biz_data = 50; */
        if (message.clientBizData !== "")
            writer.tag(50, WireType.LengthDelimited).string(message.clientBizData);
        /* string server_biz_data = 51; */
        if (message.serverBizData !== "")
            writer.tag(51, WireType.LengthDelimited).string(message.serverBizData);
        /* string ui_config = 52; */
        if (message.uiConfig !== "")
            writer.tag(52, WireType.LengthDelimited).string(message.uiConfig);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryInfo
 */
export const LotteryInfo = new LotteryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LaunchTaskInfo$Type extends MessageType<LaunchTaskInfo> {
    constructor() {
        super("data.LaunchTaskInfo", [
            { no: 1, name: "launch_task_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "launch_task_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "launch_task_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "had_launch_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "last_lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "regularly_config", kind: "message", T: () => LotteryRegularlyConfig }
        ]);
    }
    create(value?: PartialMessage<LaunchTaskInfo>): LaunchTaskInfo {
        const message = { launchTaskId: 0n, launchTaskIdStr: "", launchTaskStatus: 0n, hadLaunchCount: 0n, lastLotteryId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LaunchTaskInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LaunchTaskInfo): LaunchTaskInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 launch_task_id */ 1:
                    message.launchTaskId = reader.int64().toBigInt();
                    break;
                case /* string launch_task_id_str */ 2:
                    message.launchTaskIdStr = reader.string();
                    break;
                case /* int64 launch_task_status */ 3:
                    message.launchTaskStatus = reader.int64().toBigInt();
                    break;
                case /* int64 had_launch_count */ 5:
                    message.hadLaunchCount = reader.int64().toBigInt();
                    break;
                case /* int64 last_lottery_id */ 6:
                    message.lastLotteryId = reader.int64().toBigInt();
                    break;
                case /* data.LotteryRegularlyConfig regularly_config */ 4:
                    message.regularlyConfig = LotteryRegularlyConfig.internalBinaryRead(reader, reader.uint32(), options, message.regularlyConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LaunchTaskInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 launch_task_id = 1; */
        if (message.launchTaskId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.launchTaskId);
        /* string launch_task_id_str = 2; */
        if (message.launchTaskIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.launchTaskIdStr);
        /* int64 launch_task_status = 3; */
        if (message.launchTaskStatus !== 0n)
            writer.tag(3, WireType.Varint).int64(message.launchTaskStatus);
        /* int64 had_launch_count = 5; */
        if (message.hadLaunchCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.hadLaunchCount);
        /* int64 last_lottery_id = 6; */
        if (message.lastLotteryId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.lastLotteryId);
        /* data.LotteryRegularlyConfig regularly_config = 4; */
        if (message.regularlyConfig)
            LotteryRegularlyConfig.internalBinaryWrite(message.regularlyConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LaunchTaskInfo
 */
export const LaunchTaskInfo = new LaunchTaskInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryPrize$Type extends MessageType<LotteryPrize> {
    constructor() {
        super("data.LotteryPrize", [
            { no: 1, name: "prize_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "prize_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryPrize>): LotteryPrize {
        const message = { prizeId: 0n, type: 0, name: "", image: "", prizeDescription: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryPrize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryPrize): LotteryPrize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 prize_id */ 1:
                    message.prizeId = reader.int64().toBigInt();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string image */ 4:
                    message.image = reader.string();
                    break;
                case /* string prize_description */ 5:
                    message.prizeDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryPrize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 prize_id = 1; */
        if (message.prizeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.prizeId);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string image = 4; */
        if (message.image !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.image);
        /* string prize_description = 5; */
        if (message.prizeDescription !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.prizeDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryPrize
 */
export const LotteryPrize = new LotteryPrize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryCondition$Type extends MessageType<LotteryCondition> {
    constructor() {
        super("data.LotteryCondition", [
            { no: 1, name: "condition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "gift_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "gift_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "need_diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "min_fans_level", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "remarks", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "biz_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryCondition>): LotteryCondition {
        const message = { conditionId: 0n, type: 0, content: "", status: 0, description: "", giftId: 0n, giftCount: 0n, giftName: "", needDiamondCount: 0n, minFansLevel: 0n, remarks: "", bizInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryCondition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryCondition): LotteryCondition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 condition_id */ 1:
                    message.conditionId = reader.int64().toBigInt();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* int64 gift_id */ 6:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 gift_count */ 7:
                    message.giftCount = reader.int64().toBigInt();
                    break;
                case /* string gift_name */ 8:
                    message.giftName = reader.string();
                    break;
                case /* int64 need_diamond_count */ 9:
                    message.needDiamondCount = reader.int64().toBigInt();
                    break;
                case /* int64 min_fans_level */ 10:
                    message.minFansLevel = reader.int64().toBigInt();
                    break;
                case /* string remarks */ 30:
                    message.remarks = reader.string();
                    break;
                case /* string biz_info */ 31:
                    message.bizInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryCondition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 condition_id = 1; */
        if (message.conditionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.conditionId);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* int64 gift_id = 6; */
        if (message.giftId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.giftId);
        /* int64 gift_count = 7; */
        if (message.giftCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.giftCount);
        /* string gift_name = 8; */
        if (message.giftName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.giftName);
        /* int64 need_diamond_count = 9; */
        if (message.needDiamondCount !== 0n)
            writer.tag(9, WireType.Varint).int64(message.needDiamondCount);
        /* int64 min_fans_level = 10; */
        if (message.minFansLevel !== 0n)
            writer.tag(10, WireType.Varint).int64(message.minFansLevel);
        /* string remarks = 30; */
        if (message.remarks !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.remarks);
        /* string biz_info = 31; */
        if (message.bizInfo !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.bizInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryCondition
 */
export const LotteryCondition = new LotteryCondition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryLuckyUser$Type extends MessageType<LotteryLuckyUser> {
    constructor() {
        super("data.LotteryLuckyUser", [
            { no: 1, name: "lucky_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "grant_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "user_extra_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "order_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "prize_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "prize_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "expire_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "voucher_prize_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VoucherPrizeInfo },
            { no: 15, name: "use_new_award", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "award", kind: "message", T: () => LotteryLuckyUser_Award }
        ]);
    }
    create(value?: PartialMessage<LotteryLuckyUser>): LotteryLuckyUser {
        const message = { luckyId: 0n, lotteryId: 0n, roomId: 0n, userId: 0n, userName: "", avatarUrl: "", grantCount: 0n, userExtraInfo: "", orderInfo: "", secUserId: "", prizeType: 0n, prizeName: "", expireTime: 0n, voucherPrizeList: [], useNewAward: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryLuckyUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryLuckyUser): LotteryLuckyUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 lucky_id */ 1:
                    message.luckyId = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_id */ 2:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 3:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 4:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string user_name */ 5:
                    message.userName = reader.string();
                    break;
                case /* string avatar_url */ 6:
                    message.avatarUrl = reader.string();
                    break;
                case /* int64 grant_count */ 7:
                    message.grantCount = reader.int64().toBigInt();
                    break;
                case /* string user_extra_info */ 8:
                    message.userExtraInfo = reader.string();
                    break;
                case /* string order_info */ 9:
                    message.orderInfo = reader.string();
                    break;
                case /* string sec_user_id */ 10:
                    message.secUserId = reader.string();
                    break;
                case /* int64 prize_type */ 11:
                    message.prizeType = reader.int64().toBigInt();
                    break;
                case /* string prize_name */ 12:
                    message.prizeName = reader.string();
                    break;
                case /* int64 expire_time */ 13:
                    message.expireTime = reader.int64().toBigInt();
                    break;
                case /* repeated data.VoucherPrizeInfo voucher_prize_list */ 14:
                    message.voucherPrizeList.push(VoucherPrizeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool use_new_award */ 15:
                    message.useNewAward = reader.bool();
                    break;
                case /* data.LotteryLuckyUser.Award award */ 16:
                    message.award = LotteryLuckyUser_Award.internalBinaryRead(reader, reader.uint32(), options, message.award);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryLuckyUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 lucky_id = 1; */
        if (message.luckyId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.luckyId);
        /* int64 lottery_id = 2; */
        if (message.lotteryId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lotteryId);
        /* int64 room_id = 3; */
        if (message.roomId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.roomId);
        /* int64 user_id = 4; */
        if (message.userId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.userId);
        /* string user_name = 5; */
        if (message.userName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userName);
        /* string avatar_url = 6; */
        if (message.avatarUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.avatarUrl);
        /* int64 grant_count = 7; */
        if (message.grantCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.grantCount);
        /* string user_extra_info = 8; */
        if (message.userExtraInfo !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.userExtraInfo);
        /* string order_info = 9; */
        if (message.orderInfo !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.orderInfo);
        /* string sec_user_id = 10; */
        if (message.secUserId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.secUserId);
        /* int64 prize_type = 11; */
        if (message.prizeType !== 0n)
            writer.tag(11, WireType.Varint).int64(message.prizeType);
        /* string prize_name = 12; */
        if (message.prizeName !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.prizeName);
        /* int64 expire_time = 13; */
        if (message.expireTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.expireTime);
        /* repeated data.VoucherPrizeInfo voucher_prize_list = 14; */
        for (let i = 0; i < message.voucherPrizeList.length; i++)
            VoucherPrizeInfo.internalBinaryWrite(message.voucherPrizeList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool use_new_award = 15; */
        if (message.useNewAward !== false)
            writer.tag(15, WireType.Varint).bool(message.useNewAward);
        /* data.LotteryLuckyUser.Award award = 16; */
        if (message.award)
            LotteryLuckyUser_Award.internalBinaryWrite(message.award, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryLuckyUser
 */
export const LotteryLuckyUser = new LotteryLuckyUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryLuckyUser_Award$Type extends MessageType<LotteryLuckyUser_Award> {
    constructor() {
        super("data.LotteryLuckyUser.Award", [
            { no: 15, name: "summary_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "prize_details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LotteryLuckyUser_Award_PrizeDetail }
        ]);
    }
    create(value?: PartialMessage<LotteryLuckyUser_Award>): LotteryLuckyUser_Award {
        const message = { summaryDescription: "", prizeDetails: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryLuckyUser_Award>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryLuckyUser_Award): LotteryLuckyUser_Award {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string summary_description */ 15:
                    message.summaryDescription = reader.string();
                    break;
                case /* repeated data.LotteryLuckyUser.Award.PrizeDetail prize_details */ 16:
                    message.prizeDetails.push(LotteryLuckyUser_Award_PrizeDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryLuckyUser_Award, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string summary_description = 15; */
        if (message.summaryDescription !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.summaryDescription);
        /* repeated data.LotteryLuckyUser.Award.PrizeDetail prize_details = 16; */
        for (let i = 0; i < message.prizeDetails.length; i++)
            LotteryLuckyUser_Award_PrizeDetail.internalBinaryWrite(message.prizeDetails[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryLuckyUser.Award
 */
export const LotteryLuckyUser_Award = new LotteryLuckyUser_Award$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryLuckyUser_Award_PrizeDetail$Type extends MessageType<LotteryLuckyUser_Award_PrizeDetail> {
    constructor() {
        super("data.LotteryLuckyUser.Award.PrizeDetail", [
            { no: 1, name: "interest_show_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "interest_show_unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "interest_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "prize_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "prize_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryLuckyUser_Award_PrizeDetail>): LotteryLuckyUser_Award_PrizeDetail {
        const message = { interestShowType: 0, interestShowUnit: "", interestValue: "", prizeName: "", prizeDescription: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryLuckyUser_Award_PrizeDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryLuckyUser_Award_PrizeDetail): LotteryLuckyUser_Award_PrizeDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 interest_show_type */ 1:
                    message.interestShowType = reader.int32();
                    break;
                case /* string interest_show_unit */ 2:
                    message.interestShowUnit = reader.string();
                    break;
                case /* string interest_value */ 3:
                    message.interestValue = reader.string();
                    break;
                case /* string prize_name */ 4:
                    message.prizeName = reader.string();
                    break;
                case /* string prize_description */ 5:
                    message.prizeDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryLuckyUser_Award_PrizeDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 interest_show_type = 1; */
        if (message.interestShowType !== 0)
            writer.tag(1, WireType.Varint).int32(message.interestShowType);
        /* string interest_show_unit = 2; */
        if (message.interestShowUnit !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.interestShowUnit);
        /* string interest_value = 3; */
        if (message.interestValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.interestValue);
        /* string prize_name = 4; */
        if (message.prizeName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.prizeName);
        /* string prize_description = 5; */
        if (message.prizeDescription !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.prizeDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LotteryLuckyUser.Award.PrizeDetail
 */
export const LotteryLuckyUser_Award_PrizeDetail = new LotteryLuckyUser_Award_PrizeDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VoucherPrizeInfo$Type extends MessageType<VoucherPrizeInfo> {
    constructor() {
        super("data.VoucherPrizeInfo", [
            { no: 1, name: "prize_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "prize_batch_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expire_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "prize_unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VoucherPrizeInfo>): VoucherPrizeInfo {
        const message = { prizeAmount: "", prizeBatchName: "", expireTime: 0n, prizeUnit: "", desc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VoucherPrizeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VoucherPrizeInfo): VoucherPrizeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prize_amount */ 1:
                    message.prizeAmount = reader.string();
                    break;
                case /* string prize_batch_name */ 2:
                    message.prizeBatchName = reader.string();
                    break;
                case /* int64 expire_time */ 3:
                    message.expireTime = reader.int64().toBigInt();
                    break;
                case /* string prize_unit */ 4:
                    message.prizeUnit = reader.string();
                    break;
                case /* string desc */ 5:
                    message.desc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VoucherPrizeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prize_amount = 1; */
        if (message.prizeAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prizeAmount);
        /* string prize_batch_name = 2; */
        if (message.prizeBatchName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.prizeBatchName);
        /* int64 expire_time = 3; */
        if (message.expireTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.expireTime);
        /* string prize_unit = 4; */
        if (message.prizeUnit !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.prizeUnit);
        /* string desc = 5; */
        if (message.desc !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.desc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.VoucherPrizeInfo
 */
export const VoucherPrizeInfo = new VoucherPrizeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Portal$Type extends MessageType<Portal> {
    constructor() {
        super("data.Portal", [
            { no: 1, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "enter_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "sugar_daddy", kind: "message", T: () => User },
            { no: 4, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "anchor", kind: "message", T: () => User },
            { no: 6, name: "portal_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "invitee_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "wait_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "reward_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "total_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "cover", kind: "message", T: () => Image },
            { no: 14, name: "room_lucky_money_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "audiences", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 16, name: "distribute_strategy", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Portal>): Portal {
        const message = { startTime: 0n, enterCount: 0n, roomId: 0n, portalId: 0n, userType: 0, inviteeCount: 0n, status: 0, waitDuration: 0n, rewardDuration: 0n, totalAmount: 0n, roomLuckyMoneyAmount: 0n, audiences: [], distributeStrategy: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Portal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Portal): Portal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_time */ 1:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 enter_count */ 2:
                    message.enterCount = reader.int64().toBigInt();
                    break;
                case /* data.User sugar_daddy */ 3:
                    message.sugarDaddy = User.internalBinaryRead(reader, reader.uint32(), options, message.sugarDaddy);
                    break;
                case /* int64 room_id */ 4:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* data.User anchor */ 5:
                    message.anchor = User.internalBinaryRead(reader, reader.uint32(), options, message.anchor);
                    break;
                case /* int64 portal_id */ 6:
                    message.portalId = reader.int64().toBigInt();
                    break;
                case /* int32 user_type */ 7:
                    message.userType = reader.int32();
                    break;
                case /* int64 invitee_count */ 8:
                    message.inviteeCount = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 9:
                    message.status = reader.int32();
                    break;
                case /* int64 wait_duration */ 10:
                    message.waitDuration = reader.int64().toBigInt();
                    break;
                case /* int64 reward_duration */ 11:
                    message.rewardDuration = reader.int64().toBigInt();
                    break;
                case /* int64 total_amount */ 12:
                    message.totalAmount = reader.int64().toBigInt();
                    break;
                case /* data.Image cover */ 13:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                case /* int64 room_lucky_money_amount */ 14:
                    message.roomLuckyMoneyAmount = reader.int64().toBigInt();
                    break;
                case /* repeated data.User audiences */ 15:
                    message.audiences.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 distribute_strategy */ 16:
                    message.distributeStrategy = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Portal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_time = 1; */
        if (message.startTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startTime);
        /* int64 enter_count = 2; */
        if (message.enterCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.enterCount);
        /* data.User sugar_daddy = 3; */
        if (message.sugarDaddy)
            User.internalBinaryWrite(message.sugarDaddy, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 room_id = 4; */
        if (message.roomId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.roomId);
        /* data.User anchor = 5; */
        if (message.anchor)
            User.internalBinaryWrite(message.anchor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 portal_id = 6; */
        if (message.portalId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.portalId);
        /* int32 user_type = 7; */
        if (message.userType !== 0)
            writer.tag(7, WireType.Varint).int32(message.userType);
        /* int64 invitee_count = 8; */
        if (message.inviteeCount !== 0n)
            writer.tag(8, WireType.Varint).int64(message.inviteeCount);
        /* int32 status = 9; */
        if (message.status !== 0)
            writer.tag(9, WireType.Varint).int32(message.status);
        /* int64 wait_duration = 10; */
        if (message.waitDuration !== 0n)
            writer.tag(10, WireType.Varint).int64(message.waitDuration);
        /* int64 reward_duration = 11; */
        if (message.rewardDuration !== 0n)
            writer.tag(11, WireType.Varint).int64(message.rewardDuration);
        /* int64 total_amount = 12; */
        if (message.totalAmount !== 0n)
            writer.tag(12, WireType.Varint).int64(message.totalAmount);
        /* data.Image cover = 13; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* int64 room_lucky_money_amount = 14; */
        if (message.roomLuckyMoneyAmount !== 0n)
            writer.tag(14, WireType.Varint).int64(message.roomLuckyMoneyAmount);
        /* repeated data.User audiences = 15; */
        for (let i = 0; i < message.audiences.length; i++)
            User.internalBinaryWrite(message.audiences[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* int64 distribute_strategy = 16; */
        if (message.distributeStrategy !== 0n)
            writer.tag(16, WireType.Varint).int64(message.distributeStrategy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Portal
 */
export const Portal = new Portal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BetOption$Type extends MessageType<BetOption> {
    constructor() {
        super("data.BetOption", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "option_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "money", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "can_bet", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "can_bet_money", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BetOption>): BetOption {
        const message = { id: 0n, optionName: "", money: 0n, rate: 0n, win: false, canBet: false, canBetMoney: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BetOption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BetOption): BetOption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string option_name */ 2:
                    message.optionName = reader.string();
                    break;
                case /* int64 money */ 3:
                    message.money = reader.int64().toBigInt();
                    break;
                case /* int64 rate */ 4:
                    message.rate = reader.int64().toBigInt();
                    break;
                case /* bool win */ 5:
                    message.win = reader.bool();
                    break;
                case /* bool can_bet */ 6:
                    message.canBet = reader.bool();
                    break;
                case /* int64 can_bet_money */ 7:
                    message.canBetMoney = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BetOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string option_name = 2; */
        if (message.optionName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.optionName);
        /* int64 money = 3; */
        if (message.money !== 0n)
            writer.tag(3, WireType.Varint).int64(message.money);
        /* int64 rate = 4; */
        if (message.rate !== 0n)
            writer.tag(4, WireType.Varint).int64(message.rate);
        /* bool win = 5; */
        if (message.win !== false)
            writer.tag(5, WireType.Varint).bool(message.win);
        /* bool can_bet = 6; */
        if (message.canBet !== false)
            writer.tag(6, WireType.Varint).bool(message.canBet);
        /* int64 can_bet_money = 7; */
        if (message.canBetMoney !== 0n)
            writer.tag(7, WireType.Varint).int64(message.canBetMoney);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.BetOption
 */
export const BetOption = new BetOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorHistoryItem$Type extends MessageType<AnchorHistoryItem> {
    constructor() {
        super("data.AnchorHistoryItem", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quiz_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "options", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "quiz_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "countdown_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "win_option", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "template_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "fail_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "settle_again", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "absolute_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorHistoryItem>): AnchorHistoryItem {
        const message = { quizId: "", quizTitle: "", options: "", quizStatus: 0, countdownTime: 0n, winOption: 0n, templateId: "", failReason: "", createTime: 0n, settleAgain: 0n, absoluteEndTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorHistoryItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorHistoryItem): AnchorHistoryItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_id */ 1:
                    message.quizId = reader.string();
                    break;
                case /* string quiz_title */ 2:
                    message.quizTitle = reader.string();
                    break;
                case /* string options */ 3:
                    message.options = reader.string();
                    break;
                case /* int32 quiz_status */ 4:
                    message.quizStatus = reader.int32();
                    break;
                case /* int64 countdown_time */ 5:
                    message.countdownTime = reader.int64().toBigInt();
                    break;
                case /* int64 win_option */ 6:
                    message.winOption = reader.int64().toBigInt();
                    break;
                case /* string template_id */ 7:
                    message.templateId = reader.string();
                    break;
                case /* string fail_reason */ 8:
                    message.failReason = reader.string();
                    break;
                case /* int64 create_time */ 9:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int64 settle_again */ 10:
                    message.settleAgain = reader.int64().toBigInt();
                    break;
                case /* int64 absolute_end_time */ 11:
                    message.absoluteEndTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorHistoryItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_id = 1; */
        if (message.quizId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizId);
        /* string quiz_title = 2; */
        if (message.quizTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.quizTitle);
        /* string options = 3; */
        if (message.options !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.options);
        /* int32 quiz_status = 4; */
        if (message.quizStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.quizStatus);
        /* int64 countdown_time = 5; */
        if (message.countdownTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.countdownTime);
        /* int64 win_option = 6; */
        if (message.winOption !== 0n)
            writer.tag(6, WireType.Varint).int64(message.winOption);
        /* string template_id = 7; */
        if (message.templateId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.templateId);
        /* string fail_reason = 8; */
        if (message.failReason !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.failReason);
        /* int64 create_time = 9; */
        if (message.createTime !== 0n)
            writer.tag(9, WireType.Varint).int64(message.createTime);
        /* int64 settle_again = 10; */
        if (message.settleAgain !== 0n)
            writer.tag(10, WireType.Varint).int64(message.settleAgain);
        /* int64 absolute_end_time = 11; */
        if (message.absoluteEndTime !== 0n)
            writer.tag(11, WireType.Varint).int64(message.absoluteEndTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AnchorHistoryItem
 */
export const AnchorHistoryItem = new AnchorHistoryItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Quiz$Type extends MessageType<Quiz> {
    constructor() {
        super("data.Quiz", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "options", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "quiz_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "countdown_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "win_option", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "bet_option", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "gain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "template_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "absolute_end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Quiz>): Quiz {
        const message = { quizId: "", title: "", options: "", quizStatus: 0, countdownTime: 0n, winOption: 0n, betOption: 0n, gain: "", templateId: "", absoluteEndTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Quiz>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Quiz): Quiz {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quiz_id */ 1:
                    message.quizId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string options */ 3:
                    message.options = reader.string();
                    break;
                case /* int32 quiz_status */ 4:
                    message.quizStatus = reader.int32();
                    break;
                case /* int64 countdown_time */ 5:
                    message.countdownTime = reader.int64().toBigInt();
                    break;
                case /* int64 win_option */ 6:
                    message.winOption = reader.int64().toBigInt();
                    break;
                case /* int64 bet_option */ 7:
                    message.betOption = reader.int64().toBigInt();
                    break;
                case /* string gain */ 8:
                    message.gain = reader.string();
                    break;
                case /* string template_id */ 9:
                    message.templateId = reader.string();
                    break;
                case /* int64 absolute_end_time */ 10:
                    message.absoluteEndTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Quiz, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quiz_id = 1; */
        if (message.quizId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.quizId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string options = 3; */
        if (message.options !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.options);
        /* int32 quiz_status = 4; */
        if (message.quizStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.quizStatus);
        /* int64 countdown_time = 5; */
        if (message.countdownTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.countdownTime);
        /* int64 win_option = 6; */
        if (message.winOption !== 0n)
            writer.tag(6, WireType.Varint).int64(message.winOption);
        /* int64 bet_option = 7; */
        if (message.betOption !== 0n)
            writer.tag(7, WireType.Varint).int64(message.betOption);
        /* string gain = 8; */
        if (message.gain !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.gain);
        /* string template_id = 9; */
        if (message.templateId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.templateId);
        /* int64 absolute_end_time = 10; */
        if (message.absoluteEndTime !== 0n)
            writer.tag(10, WireType.Varint).int64(message.absoluteEndTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.Quiz
 */
export const Quiz = new Quiz$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatIdentity$Type extends MessageType<ChatIdentity> {
    constructor() {
        super("data.ChatIdentity", [
            { no: 1, name: "show_identity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "identity_label", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<ChatIdentity>): ChatIdentity {
        const message = { showIdentity: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatIdentity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatIdentity): ChatIdentity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 show_identity */ 1:
                    message.showIdentity = reader.int32();
                    break;
                case /* data.Image identity_label */ 2:
                    message.identityLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.identityLabel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatIdentity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 show_identity = 1; */
        if (message.showIdentity !== 0)
            writer.tag(1, WireType.Varint).int32(message.showIdentity);
        /* data.Image identity_label = 2; */
        if (message.identityLabel)
            Image.internalBinaryWrite(message.identityLabel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ChatIdentity
 */
export const ChatIdentity = new ChatIdentity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StampInfo$Type extends MessageType<StampInfo> {
    constructor() {
        super("data.StampInfo", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "open_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "web_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "icon", kind: "message", T: () => Image },
            { no: 7, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "thumbnail", kind: "message", T: () => Image },
            { no: 98, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "log_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StampInfo>): StampInfo {
        const message = { type: 0, id: "", title: "", openUrl: "", webUrl: "", status: 0, description: "", extra: "", logExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StampInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StampInfo): StampInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string open_url */ 4:
                    message.openUrl = reader.string();
                    break;
                case /* string web_url */ 5:
                    message.webUrl = reader.string();
                    break;
                case /* data.Image icon */ 6:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int32 status */ 7:
                    message.status = reader.int32();
                    break;
                case /* string description */ 8:
                    message.description = reader.string();
                    break;
                case /* data.Image thumbnail */ 9:
                    message.thumbnail = Image.internalBinaryRead(reader, reader.uint32(), options, message.thumbnail);
                    break;
                case /* string extra */ 98:
                    message.extra = reader.string();
                    break;
                case /* string log_extra */ 99:
                    message.logExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StampInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string open_url = 4; */
        if (message.openUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.openUrl);
        /* string web_url = 5; */
        if (message.webUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.webUrl);
        /* data.Image icon = 6; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* string description = 8; */
        if (message.description !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        /* data.Image thumbnail = 9; */
        if (message.thumbnail)
            Image.internalBinaryWrite(message.thumbnail, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 98; */
        if (message.extra !== "")
            writer.tag(98, WireType.LengthDelimited).string(message.extra);
        /* string log_extra = 99; */
        if (message.logExtra !== "")
            writer.tag(99, WireType.LengthDelimited).string(message.logExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StampInfo
 */
export const StampInfo = new StampInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceEntranceInfo$Type extends MessageType<AudienceEntranceInfo> {
    constructor() {
        super("data.AudienceEntranceInfo", [
            { no: 1, name: "interact_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "elem_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "icon", kind: "message", T: () => Image },
            { no: 7, name: "check_entrance_visitable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "need_metrics_report", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "punish_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 97, name: "im_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 98, name: "log_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "entrance_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AudienceEntranceInfo>): AudienceEntranceInfo {
        const message = { interactType: 0n, elemId: "", startId: 0n, status: 0n, name: "", checkEntranceVisitable: false, needMetricsReport: false, schemaUrl: "", source: 0, punishStatus: 0, imExtra: "", logExtra: "", entranceExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceEntranceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceEntranceInfo): AudienceEntranceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 interact_type */ 1:
                    message.interactType = reader.int64().toBigInt();
                    break;
                case /* string elem_id */ 2:
                    message.elemId = reader.string();
                    break;
                case /* int64 start_id */ 3:
                    message.startId = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 4:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* data.Image icon */ 6:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* bool check_entrance_visitable */ 7:
                    message.checkEntranceVisitable = reader.bool();
                    break;
                case /* bool need_metrics_report */ 8:
                    message.needMetricsReport = reader.bool();
                    break;
                case /* string schema_url */ 9:
                    message.schemaUrl = reader.string();
                    break;
                case /* int32 source */ 10:
                    message.source = reader.int32();
                    break;
                case /* int32 punish_status */ 11:
                    message.punishStatus = reader.int32();
                    break;
                case /* string im_extra */ 97:
                    message.imExtra = reader.string();
                    break;
                case /* string log_extra */ 98:
                    message.logExtra = reader.string();
                    break;
                case /* string entrance_extra */ 99:
                    message.entranceExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceEntranceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 interact_type = 1; */
        if (message.interactType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.interactType);
        /* string elem_id = 2; */
        if (message.elemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.elemId);
        /* int64 start_id = 3; */
        if (message.startId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startId);
        /* int64 status = 4; */
        if (message.status !== 0n)
            writer.tag(4, WireType.Varint).int64(message.status);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* data.Image icon = 6; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool check_entrance_visitable = 7; */
        if (message.checkEntranceVisitable !== false)
            writer.tag(7, WireType.Varint).bool(message.checkEntranceVisitable);
        /* bool need_metrics_report = 8; */
        if (message.needMetricsReport !== false)
            writer.tag(8, WireType.Varint).bool(message.needMetricsReport);
        /* string schema_url = 9; */
        if (message.schemaUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.schemaUrl);
        /* int32 source = 10; */
        if (message.source !== 0)
            writer.tag(10, WireType.Varint).int32(message.source);
        /* int32 punish_status = 11; */
        if (message.punishStatus !== 0)
            writer.tag(11, WireType.Varint).int32(message.punishStatus);
        /* string im_extra = 97; */
        if (message.imExtra !== "")
            writer.tag(97, WireType.LengthDelimited).string(message.imExtra);
        /* string log_extra = 98; */
        if (message.logExtra !== "")
            writer.tag(98, WireType.LengthDelimited).string(message.logExtra);
        /* string entrance_extra = 99; */
        if (message.entranceExtra !== "")
            writer.tag(99, WireType.LengthDelimited).string(message.entranceExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AudienceEntranceInfo
 */
export const AudienceEntranceInfo = new AudienceEntranceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomizedCardInfo$Type extends MessageType<CustomizedCardInfo> {
    constructor() {
        super("data.CustomizedCardInfo", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "open_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "source", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "punish_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 97, name: "im_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 98, name: "log_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "cover_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 100, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 101, name: "server_timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomizedCardInfo>): CustomizedCardInfo {
        const message = { status: 0, openUrl: "", duration: 0n, cardType: 0, content: "", source: 0n, punishStatus: 0, imExtra: "", logExtra: "", coverExtra: "", appId: "", serverTimestamp: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CustomizedCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomizedCardInfo): CustomizedCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string open_url */ 2:
                    message.openUrl = reader.string();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int32 card_type */ 4:
                    message.cardType = reader.int32();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* int64 source */ 6:
                    message.source = reader.int64().toBigInt();
                    break;
                case /* int32 punish_status */ 7:
                    message.punishStatus = reader.int32();
                    break;
                case /* string im_extra */ 97:
                    message.imExtra = reader.string();
                    break;
                case /* string log_extra */ 98:
                    message.logExtra = reader.string();
                    break;
                case /* string cover_extra */ 99:
                    message.coverExtra = reader.string();
                    break;
                case /* string app_id */ 100:
                    message.appId = reader.string();
                    break;
                case /* string server_timestamp */ 101:
                    message.serverTimestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomizedCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string open_url = 2; */
        if (message.openUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.openUrl);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* int32 card_type = 4; */
        if (message.cardType !== 0)
            writer.tag(4, WireType.Varint).int32(message.cardType);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* int64 source = 6; */
        if (message.source !== 0n)
            writer.tag(6, WireType.Varint).int64(message.source);
        /* int32 punish_status = 7; */
        if (message.punishStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.punishStatus);
        /* string im_extra = 97; */
        if (message.imExtra !== "")
            writer.tag(97, WireType.LengthDelimited).string(message.imExtra);
        /* string log_extra = 98; */
        if (message.logExtra !== "")
            writer.tag(98, WireType.LengthDelimited).string(message.logExtra);
        /* string cover_extra = 99; */
        if (message.coverExtra !== "")
            writer.tag(99, WireType.LengthDelimited).string(message.coverExtra);
        /* string app_id = 100; */
        if (message.appId !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.appId);
        /* string server_timestamp = 101; */
        if (message.serverTimestamp !== "")
            writer.tag(101, WireType.LengthDelimited).string(message.serverTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CustomizedCardInfo
 */
export const CustomizedCardInfo = new CustomizedCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCardInfo$Type extends MessageType<GameCardInfo> {
    constructor() {
        super("data.GameCardInfo", [
            { no: 1, name: "display_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "open_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "save_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GameCardInfo>): GameCardInfo {
        const message = { displayStatus: 0, status: 0n, openUrl: "", content: "", appId: "", saveTime: 0n, duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCardInfo): GameCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 display_status */ 1:
                    message.displayStatus = reader.int32();
                    break;
                case /* int64 status */ 2:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string open_url */ 3:
                    message.openUrl = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string app_id */ 5:
                    message.appId = reader.string();
                    break;
                case /* int64 save_time */ 6:
                    message.saveTime = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 7:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 display_status = 1; */
        if (message.displayStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.displayStatus);
        /* int64 status = 2; */
        if (message.status !== 0n)
            writer.tag(2, WireType.Varint).int64(message.status);
        /* string open_url = 3; */
        if (message.openUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.openUrl);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string app_id = 5; */
        if (message.appId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.appId);
        /* int64 save_time = 6; */
        if (message.saveTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.saveTime);
        /* int64 duration = 7; */
        if (message.duration !== 0n)
            writer.tag(7, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GameCardInfo
 */
export const GameCardInfo = new GameCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShelfCardInfo$Type extends MessageType<ShelfCardInfo> {
    constructor() {
        super("data.ShelfCardInfo", [
            { no: 1, name: "card_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "default_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "default_cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "customized_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "customized_cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "image", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 8, name: "source_page", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "review_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "from_review", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "can_modify_cover", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "card_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "create_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "review_result_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "review_title_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "reviewing_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "last_pass_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "last_pass_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "product_info", kind: "message", T: () => ProductInfo },
            { no: 96, name: "log_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShelfCardInfo>): ShelfCardInfo {
        const message = { cardId: 0n, schema: "", defaultTitle: "", defaultCoverUrl: "", customizedTitle: "", customizedCoverUrl: "", image: [], sourcePage: "", reviewStatus: 0, fromReview: false, canModifyCover: false, status: 0n, cardSource: 0, createInfo: "", reviewResultReason: "", reviewTitleStatus: 0, reviewingTitle: "", lastPassTitle: "", lastPassImg: "", logExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShelfCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShelfCardInfo): ShelfCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 card_id */ 1:
                    message.cardId = reader.int64().toBigInt();
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* string default_title */ 3:
                    message.defaultTitle = reader.string();
                    break;
                case /* string default_cover_url */ 4:
                    message.defaultCoverUrl = reader.string();
                    break;
                case /* string customized_title */ 5:
                    message.customizedTitle = reader.string();
                    break;
                case /* string customized_cover_url */ 6:
                    message.customizedCoverUrl = reader.string();
                    break;
                case /* repeated data.Image image */ 7:
                    message.image.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string source_page */ 8:
                    message.sourcePage = reader.string();
                    break;
                case /* int32 review_status */ 9:
                    message.reviewStatus = reader.int32();
                    break;
                case /* bool from_review */ 10:
                    message.fromReview = reader.bool();
                    break;
                case /* bool can_modify_cover */ 11:
                    message.canModifyCover = reader.bool();
                    break;
                case /* int64 status */ 12:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* int32 card_source */ 13:
                    message.cardSource = reader.int32();
                    break;
                case /* string create_info */ 14:
                    message.createInfo = reader.string();
                    break;
                case /* string review_result_reason */ 15:
                    message.reviewResultReason = reader.string();
                    break;
                case /* int32 review_title_status */ 16:
                    message.reviewTitleStatus = reader.int32();
                    break;
                case /* string reviewing_title */ 17:
                    message.reviewingTitle = reader.string();
                    break;
                case /* string last_pass_title */ 18:
                    message.lastPassTitle = reader.string();
                    break;
                case /* string last_pass_img */ 19:
                    message.lastPassImg = reader.string();
                    break;
                case /* data.ProductInfo product_info */ 20:
                    message.productInfo = ProductInfo.internalBinaryRead(reader, reader.uint32(), options, message.productInfo);
                    break;
                case /* string log_extra */ 96:
                    message.logExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShelfCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 card_id = 1; */
        if (message.cardId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.cardId);
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* string default_title = 3; */
        if (message.defaultTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.defaultTitle);
        /* string default_cover_url = 4; */
        if (message.defaultCoverUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.defaultCoverUrl);
        /* string customized_title = 5; */
        if (message.customizedTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.customizedTitle);
        /* string customized_cover_url = 6; */
        if (message.customizedCoverUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.customizedCoverUrl);
        /* repeated data.Image image = 7; */
        for (let i = 0; i < message.image.length; i++)
            Image.internalBinaryWrite(message.image[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string source_page = 8; */
        if (message.sourcePage !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.sourcePage);
        /* int32 review_status = 9; */
        if (message.reviewStatus !== 0)
            writer.tag(9, WireType.Varint).int32(message.reviewStatus);
        /* bool from_review = 10; */
        if (message.fromReview !== false)
            writer.tag(10, WireType.Varint).bool(message.fromReview);
        /* bool can_modify_cover = 11; */
        if (message.canModifyCover !== false)
            writer.tag(11, WireType.Varint).bool(message.canModifyCover);
        /* int64 status = 12; */
        if (message.status !== 0n)
            writer.tag(12, WireType.Varint).int64(message.status);
        /* int32 card_source = 13; */
        if (message.cardSource !== 0)
            writer.tag(13, WireType.Varint).int32(message.cardSource);
        /* string create_info = 14; */
        if (message.createInfo !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.createInfo);
        /* string review_result_reason = 15; */
        if (message.reviewResultReason !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.reviewResultReason);
        /* int32 review_title_status = 16; */
        if (message.reviewTitleStatus !== 0)
            writer.tag(16, WireType.Varint).int32(message.reviewTitleStatus);
        /* string reviewing_title = 17; */
        if (message.reviewingTitle !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.reviewingTitle);
        /* string last_pass_title = 18; */
        if (message.lastPassTitle !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.lastPassTitle);
        /* string last_pass_img = 19; */
        if (message.lastPassImg !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.lastPassImg);
        /* data.ProductInfo product_info = 20; */
        if (message.productInfo)
            ProductInfo.internalBinaryWrite(message.productInfo, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* string log_extra = 96; */
        if (message.logExtra !== "")
            writer.tag(96, WireType.LengthDelimited).string(message.logExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShelfCardInfo
 */
export const ShelfCardInfo = new ShelfCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShelfMicroAppInfo$Type extends MessageType<ShelfMicroAppInfo> {
    constructor() {
        super("data.ShelfMicroAppInfo", [
            { no: 1, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "label", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MicroAppLabel }
        ]);
    }
    create(value?: PartialMessage<ShelfMicroAppInfo>): ShelfMicroAppInfo {
        const message = { appId: "", name: "", schema: "", label: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShelfMicroAppInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShelfMicroAppInfo): ShelfMicroAppInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string app_id */ 1:
                    message.appId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string schema */ 4:
                    message.schema = reader.string();
                    break;
                case /* repeated data.MicroAppLabel label */ 5:
                    message.label.push(MicroAppLabel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShelfMicroAppInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string app_id = 1; */
        if (message.appId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string schema = 4; */
        if (message.schema !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.schema);
        /* repeated data.MicroAppLabel label = 5; */
        for (let i = 0; i < message.label.length; i++)
            MicroAppLabel.internalBinaryWrite(message.label[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShelfMicroAppInfo
 */
export const ShelfMicroAppInfo = new ShelfMicroAppInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MicroAppLabel$Type extends MessageType<MicroAppLabel> {
    constructor() {
        super("data.MicroAppLabel", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "font_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "background_begin_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "background_end_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MicroAppLabel>): MicroAppLabel {
        const message = { name: "", fontSize: 0, fontColor: "", backgroundBeginColor: "", backgroundEndColor: "", url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MicroAppLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MicroAppLabel): MicroAppLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 font_size */ 2:
                    message.fontSize = reader.int32();
                    break;
                case /* string font_color */ 3:
                    message.fontColor = reader.string();
                    break;
                case /* string background_begin_color */ 4:
                    message.backgroundBeginColor = reader.string();
                    break;
                case /* string background_end_color */ 5:
                    message.backgroundEndColor = reader.string();
                    break;
                case /* string url */ 6:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MicroAppLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 font_size = 2; */
        if (message.fontSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.fontSize);
        /* string font_color = 3; */
        if (message.fontColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fontColor);
        /* string background_begin_color = 4; */
        if (message.backgroundBeginColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.backgroundBeginColor);
        /* string background_end_color = 5; */
        if (message.backgroundEndColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.backgroundEndColor);
        /* string url = 6; */
        if (message.url !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MicroAppLabel
 */
export const MicroAppLabel = new MicroAppLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShelfInfo$Type extends MessageType<ShelfInfo> {
    constructor() {
        super("data.ShelfInfo", [
            { no: 1, name: "app_info", kind: "message", T: () => ShelfMicroAppInfo },
            { no: 2, name: "card_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ShelfCardInfo },
            { no: 3, name: "start_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "punish_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "mount_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "client_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 97, name: "im_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 98, name: "log_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShelfInfo>): ShelfInfo {
        const message = { cardInfoList: [], startId: 0n, source: 0, status: 0, punishStatus: 0, mountType: 0, clientExtra: "", imExtra: "", logExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShelfInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShelfInfo): ShelfInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ShelfMicroAppInfo app_info */ 1:
                    message.appInfo = ShelfMicroAppInfo.internalBinaryRead(reader, reader.uint32(), options, message.appInfo);
                    break;
                case /* repeated data.ShelfCardInfo card_info_list */ 2:
                    message.cardInfoList.push(ShelfCardInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 start_id */ 3:
                    message.startId = reader.int64().toBigInt();
                    break;
                case /* int32 source */ 4:
                    message.source = reader.int32();
                    break;
                case /* int32 status */ 5:
                    message.status = reader.int32();
                    break;
                case /* int32 punish_status */ 6:
                    message.punishStatus = reader.int32();
                    break;
                case /* int32 mount_type */ 7:
                    message.mountType = reader.int32();
                    break;
                case /* string client_extra */ 9:
                    message.clientExtra = reader.string();
                    break;
                case /* string im_extra */ 97:
                    message.imExtra = reader.string();
                    break;
                case /* string log_extra */ 98:
                    message.logExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShelfInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ShelfMicroAppInfo app_info = 1; */
        if (message.appInfo)
            ShelfMicroAppInfo.internalBinaryWrite(message.appInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ShelfCardInfo card_info_list = 2; */
        for (let i = 0; i < message.cardInfoList.length; i++)
            ShelfCardInfo.internalBinaryWrite(message.cardInfoList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_id = 3; */
        if (message.startId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startId);
        /* int32 source = 4; */
        if (message.source !== 0)
            writer.tag(4, WireType.Varint).int32(message.source);
        /* int32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* int32 punish_status = 6; */
        if (message.punishStatus !== 0)
            writer.tag(6, WireType.Varint).int32(message.punishStatus);
        /* int32 mount_type = 7; */
        if (message.mountType !== 0)
            writer.tag(7, WireType.Varint).int32(message.mountType);
        /* string client_extra = 9; */
        if (message.clientExtra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.clientExtra);
        /* string im_extra = 97; */
        if (message.imExtra !== "")
            writer.tag(97, WireType.LengthDelimited).string(message.imExtra);
        /* string log_extra = 98; */
        if (message.logExtra !== "")
            writer.tag(98, WireType.LengthDelimited).string(message.logExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ShelfInfo
 */
export const ShelfInfo = new ShelfInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductInfo$Type extends MessageType<ProductInfo> {
    constructor() {
        super("data.ProductInfo", [
            { no: 1, name: "product_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "introduction_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProductIntroductionInfo },
            { no: 5, name: "label_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProductLabelInfo },
            { no: 6, name: "price", kind: "message", T: () => ProductPriceInfo },
            { no: 7, name: "action_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "isShow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ProductInfo>): ProductInfo {
        const message = { productId: "", title: "", imgUrl: "", introductionList: [], labelList: [], actionText: "", isShow: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductInfo): ProductInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string product_id */ 1:
                    message.productId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string img_url */ 3:
                    message.imgUrl = reader.string();
                    break;
                case /* repeated data.ProductIntroductionInfo introduction_list */ 4:
                    message.introductionList.push(ProductIntroductionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.ProductLabelInfo label_list */ 5:
                    message.labelList.push(ProductLabelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.ProductPriceInfo price */ 6:
                    message.price = ProductPriceInfo.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                case /* string action_text */ 7:
                    message.actionText = reader.string();
                    break;
                case /* bool isShow */ 8:
                    message.isShow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string product_id = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string img_url = 3; */
        if (message.imgUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imgUrl);
        /* repeated data.ProductIntroductionInfo introduction_list = 4; */
        for (let i = 0; i < message.introductionList.length; i++)
            ProductIntroductionInfo.internalBinaryWrite(message.introductionList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ProductLabelInfo label_list = 5; */
        for (let i = 0; i < message.labelList.length; i++)
            ProductLabelInfo.internalBinaryWrite(message.labelList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.ProductPriceInfo price = 6; */
        if (message.price)
            ProductPriceInfo.internalBinaryWrite(message.price, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string action_text = 7; */
        if (message.actionText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.actionText);
        /* bool isShow = 8; */
        if (message.isShow !== false)
            writer.tag(8, WireType.Varint).bool(message.isShow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ProductInfo
 */
export const ProductInfo = new ProductInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductPriceInfo$Type extends MessageType<ProductPriceInfo> {
    constructor() {
        super("data.ProductPriceInfo", [
            { no: 1, name: "original_price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "current_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "current_suffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProductPriceInfo>): ProductPriceInfo {
        const message = { originalPrice: "", currentPrice: "", currentPrefix: "", currentSuffix: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductPriceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductPriceInfo): ProductPriceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string original_price */ 1:
                    message.originalPrice = reader.string();
                    break;
                case /* string current_price */ 2:
                    message.currentPrice = reader.string();
                    break;
                case /* string current_prefix */ 3:
                    message.currentPrefix = reader.string();
                    break;
                case /* string current_suffix */ 4:
                    message.currentSuffix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductPriceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string original_price = 1; */
        if (message.originalPrice !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.originalPrice);
        /* string current_price = 2; */
        if (message.currentPrice !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentPrice);
        /* string current_prefix = 3; */
        if (message.currentPrefix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currentPrefix);
        /* string current_suffix = 4; */
        if (message.currentSuffix !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.currentSuffix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ProductPriceInfo
 */
export const ProductPriceInfo = new ProductPriceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductIntroductionInfo$Type extends MessageType<ProductIntroductionInfo> {
    constructor() {
        super("data.ProductIntroductionInfo", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "font_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "introduction_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProductIntroductionInfo>): ProductIntroductionInfo {
        const message = { content: "", fontSize: 0, fontColor: "", introductionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductIntroductionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductIntroductionInfo): ProductIntroductionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* int32 font_size */ 2:
                    message.fontSize = reader.int32();
                    break;
                case /* string font_color */ 3:
                    message.fontColor = reader.string();
                    break;
                case /* int32 introduction_type */ 4:
                    message.introductionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductIntroductionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* int32 font_size = 2; */
        if (message.fontSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.fontSize);
        /* string font_color = 3; */
        if (message.fontColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fontColor);
        /* int32 introduction_type = 4; */
        if (message.introductionType !== 0)
            writer.tag(4, WireType.Varint).int32(message.introductionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ProductIntroductionInfo
 */
export const ProductIntroductionInfo = new ProductIntroductionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductLabelInfo$Type extends MessageType<ProductLabelInfo> {
    constructor() {
        super("data.ProductLabelInfo", [
            { no: 1, name: "left_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "right_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "font_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "border_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "dividing_line", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "label_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProductLabelInfo>): ProductLabelInfo {
        const message = { leftText: "", rightText: "", fontSize: 0, fontColor: "", borderColor: "", dividingLine: false, labelType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductLabelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductLabelInfo): ProductLabelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string left_text */ 1:
                    message.leftText = reader.string();
                    break;
                case /* string right_text */ 2:
                    message.rightText = reader.string();
                    break;
                case /* int32 font_size */ 3:
                    message.fontSize = reader.int32();
                    break;
                case /* string font_color */ 4:
                    message.fontColor = reader.string();
                    break;
                case /* string border_color */ 5:
                    message.borderColor = reader.string();
                    break;
                case /* bool dividing_line */ 6:
                    message.dividingLine = reader.bool();
                    break;
                case /* int32 label_type */ 7:
                    message.labelType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductLabelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string left_text = 1; */
        if (message.leftText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leftText);
        /* string right_text = 2; */
        if (message.rightText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightText);
        /* int32 font_size = 3; */
        if (message.fontSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.fontSize);
        /* string font_color = 4; */
        if (message.fontColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fontColor);
        /* string border_color = 5; */
        if (message.borderColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.borderColor);
        /* bool dividing_line = 6; */
        if (message.dividingLine !== false)
            writer.tag(6, WireType.Varint).bool(message.dividingLine);
        /* int32 label_type = 7; */
        if (message.labelType !== 0)
            writer.tag(7, WireType.Varint).int32(message.labelType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ProductLabelInfo
 */
export const ProductLabelInfo = new ProductLabelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PropSummary$Type extends MessageType<PropSummary> {
    constructor() {
        super("data.PropSummary", [
            { no: 1, name: "primary_effect_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "next_expire", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "prop_def_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "manual", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "diamond", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "reddot_tip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "icon", kind: "message", T: () => Image },
            { no: 9, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "gift", kind: "message", T: () => GiftStruct },
            { no: 12, name: "label_icon", kind: "message", T: () => Image },
            { no: 13, name: "is_fragment", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "fragments_compound_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "is_aweme_free_gift", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "diamond_icon", kind: "message", T: () => Image },
            { no: 17, name: "banner", kind: "message", T: () => Banner },
            { no: 18, name: "prop_def_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "gifts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HotfixGiftDataForProp },
            { no: 20, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "is_displayed_on_panel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "prop_def_sub_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PropSummary>): PropSummary {
        const message = { primaryEffectId: 0n, nextExpire: 0n, description: "", propDefId: 0n, manual: "", diamond: 0n, reddotTip: false, count: 0, name: "", isFragment: false, fragmentsCompoundCount: 0n, isAwemeFreeGift: 0n, propDefType: 0n, gifts: [], schemeUrl: "", isDisplayedOnPanel: false, propDefSubType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropSummary>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropSummary): PropSummary {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 primary_effect_id */ 1:
                    message.primaryEffectId = reader.int64().toBigInt();
                    break;
                case /* int64 next_expire */ 2:
                    message.nextExpire = reader.int64().toBigInt();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* int64 prop_def_id */ 4:
                    message.propDefId = reader.int64().toBigInt();
                    break;
                case /* string manual */ 5:
                    message.manual = reader.string();
                    break;
                case /* int64 diamond */ 6:
                    message.diamond = reader.int64().toBigInt();
                    break;
                case /* bool reddot_tip */ 7:
                    message.reddotTip = reader.bool();
                    break;
                case /* data.Image icon */ 8:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int32 count */ 9:
                    message.count = reader.int32();
                    break;
                case /* string name */ 10:
                    message.name = reader.string();
                    break;
                case /* data.GiftStruct gift */ 11:
                    message.gift = GiftStruct.internalBinaryRead(reader, reader.uint32(), options, message.gift);
                    break;
                case /* data.Image label_icon */ 12:
                    message.labelIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.labelIcon);
                    break;
                case /* bool is_fragment */ 13:
                    message.isFragment = reader.bool();
                    break;
                case /* int64 fragments_compound_count */ 14:
                    message.fragmentsCompoundCount = reader.int64().toBigInt();
                    break;
                case /* int64 is_aweme_free_gift */ 15:
                    message.isAwemeFreeGift = reader.int64().toBigInt();
                    break;
                case /* data.Image diamond_icon */ 16:
                    message.diamondIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.diamondIcon);
                    break;
                case /* data.Banner banner */ 17:
                    message.banner = Banner.internalBinaryRead(reader, reader.uint32(), options, message.banner);
                    break;
                case /* int64 prop_def_type */ 18:
                    message.propDefType = reader.int64().toBigInt();
                    break;
                case /* repeated data.HotfixGiftDataForProp gifts */ 19:
                    message.gifts.push(HotfixGiftDataForProp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string scheme_url */ 20:
                    message.schemeUrl = reader.string();
                    break;
                case /* bool is_displayed_on_panel */ 21:
                    message.isDisplayedOnPanel = reader.bool();
                    break;
                case /* int64 prop_def_sub_type */ 22:
                    message.propDefSubType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropSummary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 primary_effect_id = 1; */
        if (message.primaryEffectId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.primaryEffectId);
        /* int64 next_expire = 2; */
        if (message.nextExpire !== 0n)
            writer.tag(2, WireType.Varint).int64(message.nextExpire);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* int64 prop_def_id = 4; */
        if (message.propDefId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.propDefId);
        /* string manual = 5; */
        if (message.manual !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.manual);
        /* int64 diamond = 6; */
        if (message.diamond !== 0n)
            writer.tag(6, WireType.Varint).int64(message.diamond);
        /* bool reddot_tip = 7; */
        if (message.reddotTip !== false)
            writer.tag(7, WireType.Varint).bool(message.reddotTip);
        /* data.Image icon = 8; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 count = 9; */
        if (message.count !== 0)
            writer.tag(9, WireType.Varint).int32(message.count);
        /* string name = 10; */
        if (message.name !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.name);
        /* data.GiftStruct gift = 11; */
        if (message.gift)
            GiftStruct.internalBinaryWrite(message.gift, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.Image label_icon = 12; */
        if (message.labelIcon)
            Image.internalBinaryWrite(message.labelIcon, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bool is_fragment = 13; */
        if (message.isFragment !== false)
            writer.tag(13, WireType.Varint).bool(message.isFragment);
        /* int64 fragments_compound_count = 14; */
        if (message.fragmentsCompoundCount !== 0n)
            writer.tag(14, WireType.Varint).int64(message.fragmentsCompoundCount);
        /* int64 is_aweme_free_gift = 15; */
        if (message.isAwemeFreeGift !== 0n)
            writer.tag(15, WireType.Varint).int64(message.isAwemeFreeGift);
        /* data.Image diamond_icon = 16; */
        if (message.diamondIcon)
            Image.internalBinaryWrite(message.diamondIcon, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* data.Banner banner = 17; */
        if (message.banner)
            Banner.internalBinaryWrite(message.banner, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* int64 prop_def_type = 18; */
        if (message.propDefType !== 0n)
            writer.tag(18, WireType.Varint).int64(message.propDefType);
        /* repeated data.HotfixGiftDataForProp gifts = 19; */
        for (let i = 0; i < message.gifts.length; i++)
            HotfixGiftDataForProp.internalBinaryWrite(message.gifts[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* string scheme_url = 20; */
        if (message.schemeUrl !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.schemeUrl);
        /* bool is_displayed_on_panel = 21; */
        if (message.isDisplayedOnPanel !== false)
            writer.tag(21, WireType.Varint).bool(message.isDisplayedOnPanel);
        /* int64 prop_def_sub_type = 22; */
        if (message.propDefSubType !== 0n)
            writer.tag(22, WireType.Varint).int64(message.propDefSubType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.PropSummary
 */
export const PropSummary = new PropSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotfixGiftDataForProp$Type extends MessageType<HotfixGiftDataForProp> {
    constructor() {
        super("data.HotfixGiftDataForProp", [
            { no: 1, name: "display_text", kind: "message", T: () => Text },
            { no: 2, name: "describe", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "group_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "repeat_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "combo_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<HotfixGiftDataForProp>): HotfixGiftDataForProp {
        const message = { describe: "", giftId: 0n, groupCount: 0n, repeatCount: 0n, comboCount: 0n, msgId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotfixGiftDataForProp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotfixGiftDataForProp): HotfixGiftDataForProp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text display_text */ 1:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* string describe */ 2:
                    message.describe = reader.string();
                    break;
                case /* int64 gift_id */ 3:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 group_count */ 4:
                    message.groupCount = reader.int64().toBigInt();
                    break;
                case /* int64 repeat_count */ 5:
                    message.repeatCount = reader.int64().toBigInt();
                    break;
                case /* int64 combo_count */ 6:
                    message.comboCount = reader.int64().toBigInt();
                    break;
                case /* int64 msg_id */ 7:
                    message.msgId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotfixGiftDataForProp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text display_text = 1; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string describe = 2; */
        if (message.describe !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.describe);
        /* int64 gift_id = 3; */
        if (message.giftId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.giftId);
        /* int64 group_count = 4; */
        if (message.groupCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.groupCount);
        /* int64 repeat_count = 5; */
        if (message.repeatCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.repeatCount);
        /* int64 combo_count = 6; */
        if (message.comboCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.comboCount);
        /* int64 msg_id = 7; */
        if (message.msgId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.msgId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.HotfixGiftDataForProp
 */
export const HotfixGiftDataForProp = new HotfixGiftDataForProp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpisodeHighLight$Type extends MessageType<EpisodeHighLight> {
    constructor() {
        super("data.EpisodeHighLight", [
            { no: 1, name: "location", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "message", T: () => Image },
            { no: 4, name: "small_image", kind: "message", T: () => Image },
            { no: 5, name: "location_end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "hot", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "collection_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "pid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "location_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EpisodeHighLight>): EpisodeHighLight {
        const message = { location: 0n, description: "", locationEnd: 0n, hot: false, collectionId: 0n, pid: "", locationStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpisodeHighLight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpisodeHighLight): EpisodeHighLight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 location */ 1:
                    message.location = reader.int64().toBigInt();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* data.Image image */ 3:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* data.Image small_image */ 4:
                    message.smallImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.smallImage);
                    break;
                case /* int64 location_end */ 5:
                    message.locationEnd = reader.int64().toBigInt();
                    break;
                case /* bool hot */ 6:
                    message.hot = reader.bool();
                    break;
                case /* int64 collection_id */ 7:
                    message.collectionId = reader.int64().toBigInt();
                    break;
                case /* string pid */ 8:
                    message.pid = reader.string();
                    break;
                case /* string location_str */ 9:
                    message.locationStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpisodeHighLight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 location = 1; */
        if (message.location !== 0n)
            writer.tag(1, WireType.Varint).int64(message.location);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* data.Image image = 3; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image small_image = 4; */
        if (message.smallImage)
            Image.internalBinaryWrite(message.smallImage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 location_end = 5; */
        if (message.locationEnd !== 0n)
            writer.tag(5, WireType.Varint).int64(message.locationEnd);
        /* bool hot = 6; */
        if (message.hot !== false)
            writer.tag(6, WireType.Varint).bool(message.hot);
        /* int64 collection_id = 7; */
        if (message.collectionId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.collectionId);
        /* string pid = 8; */
        if (message.pid !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.pid);
        /* string location_str = 9; */
        if (message.locationStr !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.locationStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.EpisodeHighLight
 */
export const EpisodeHighLight = new EpisodeHighLight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MysteryRankUserItem$Type extends MessageType<MysteryRankUserItem> {
    constructor() {
        super("data.MysteryRankUserItem", [
            { no: 1, name: "User", kind: "message", jsonName: "User", T: () => MysteryUserInfo },
            { no: 2, name: "Score", kind: "scalar", jsonName: "Score", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "Rank", kind: "scalar", jsonName: "Rank", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MysteryRankUserItem>): MysteryRankUserItem {
        const message = { score: 0n, rank: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MysteryRankUserItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MysteryRankUserItem): MysteryRankUserItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MysteryUserInfo User = 1 [json_name = "User"];*/ 1:
                    message.user = MysteryUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 Score = 2 [json_name = "Score"];*/ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 Rank = 3 [json_name = "Rank"];*/ 3:
                    message.rank = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MysteryRankUserItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MysteryUserInfo User = 1 [json_name = "User"]; */
        if (message.user)
            MysteryUserInfo.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 Score = 2 [json_name = "Score"]; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* int64 Rank = 3 [json_name = "Rank"]; */
        if (message.rank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MysteryRankUserItem
 */
export const MysteryRankUserItem = new MysteryRankUserItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MysteryUserImage$Type extends MessageType<MysteryUserImage> {
    constructor() {
        super("data.MysteryUserImage", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MysteryUserImage>): MysteryUserImage {
        const message = { urlList: [], height: 0n, width: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MysteryUserImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MysteryUserImage): MysteryUserImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* int64 height */ 2:
                    message.height = reader.int64().toBigInt();
                    break;
                case /* int64 width */ 3:
                    message.width = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MysteryUserImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* int64 height = 2; */
        if (message.height !== 0n)
            writer.tag(2, WireType.Varint).int64(message.height);
        /* int64 width = 3; */
        if (message.width !== 0n)
            writer.tag(3, WireType.Varint).int64(message.width);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MysteryUserImage
 */
export const MysteryUserImage = new MysteryUserImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MysteryUserInfo$Type extends MessageType<MysteryUserInfo> {
    constructor() {
        super("data.MysteryUserInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "avatar_thumb", kind: "message", T: () => MysteryUserImage },
            { no: 6, name: "mystery", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MysteryUserInfo>): MysteryUserInfo {
        const message = { userId: 0n, idStr: "", liveRoomIdStr: "", nickName: "", mystery: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MysteryUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MysteryUserInfo): MysteryUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string id_str */ 2:
                    message.idStr = reader.string();
                    break;
                case /* string live_room_id_str */ 3:
                    message.liveRoomIdStr = reader.string();
                    break;
                case /* string nick_name */ 4:
                    message.nickName = reader.string();
                    break;
                case /* data.MysteryUserImage avatar_thumb */ 5:
                    message.avatarThumb = MysteryUserImage.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* bool mystery */ 6:
                    message.mystery = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MysteryUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string id_str = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* string live_room_id_str = 3; */
        if (message.liveRoomIdStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.liveRoomIdStr);
        /* string nick_name = 4; */
        if (message.nickName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nickName);
        /* data.MysteryUserImage avatar_thumb = 5; */
        if (message.avatarThumb)
            MysteryUserImage.internalBinaryWrite(message.avatarThumb, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool mystery = 6; */
        if (message.mystery !== false)
            writer.tag(6, WireType.Varint).bool(message.mystery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MysteryUserInfo
 */
export const MysteryUserInfo = new MysteryUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfitInteractionSetting$Type extends MessageType<ProfitInteractionSetting> {
    constructor() {
        super("data.ProfitInteractionSetting", [
            { no: 1, name: "show_interaction_score_close", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ProfitInteractionSetting>): ProfitInteractionSetting {
        const message = { showInteractionScoreClose: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfitInteractionSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfitInteractionSetting): ProfitInteractionSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool show_interaction_score_close */ 1:
                    message.showInteractionScoreClose = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfitInteractionSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool show_interaction_score_close = 1; */
        if (message.showInteractionScoreClose !== false)
            writer.tag(1, WireType.Varint).bool(message.showInteractionScoreClose);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ProfitInteractionSetting
 */
export const ProfitInteractionSetting = new ProfitInteractionSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankEnterInfo$Type extends MessageType<RankEnterInfo> {
    constructor() {
        super("data.RankEnterInfo", [
            { no: 1, name: "rank_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RankEnterInfo_RankInfo },
            { no: 2, name: "hidden_enter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "default_page", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RankEnterInfo_Page },
            { no: 5, name: "period_remaining_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "rank_infos_without_shop", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RankEnterInfo_RankInfo },
            { no: 7, name: "display_ktv_rank", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "default_rank_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RankEnterInfo_RankInfo },
            { no: 9, name: "customized_default_rank_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RankEnterInfo_RankInfo }
        ]);
    }
    create(value?: PartialMessage<RankEnterInfo>): RankEnterInfo {
        const message = { rankInfos: [], hiddenEnter: false, defaultPage: [], periodRemainingSecond: 0n, rankInfosWithoutShop: [], displayKtvRank: false, defaultRankInfos: [], customizedDefaultRankInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RankEnterInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RankEnterInfo): RankEnterInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.RankEnterInfo.RankInfo rank_infos */ 1:
                    message.rankInfos.push(RankEnterInfo_RankInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool hidden_enter */ 2:
                    message.hiddenEnter = reader.bool();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* repeated data.RankEnterInfo.Page default_page */ 4:
                    message.defaultPage.push(RankEnterInfo_Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 period_remaining_second */ 5:
                    message.periodRemainingSecond = reader.int64().toBigInt();
                    break;
                case /* repeated data.RankEnterInfo.RankInfo rank_infos_without_shop */ 6:
                    message.rankInfosWithoutShop.push(RankEnterInfo_RankInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool display_ktv_rank */ 7:
                    message.displayKtvRank = reader.bool();
                    break;
                case /* repeated data.RankEnterInfo.RankInfo default_rank_infos */ 8:
                    message.defaultRankInfos.push(RankEnterInfo_RankInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.RankEnterInfo.RankInfo customized_default_rank_infos */ 9:
                    message.customizedDefaultRankInfos.push(RankEnterInfo_RankInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RankEnterInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.RankEnterInfo.RankInfo rank_infos = 1; */
        for (let i = 0; i < message.rankInfos.length; i++)
            RankEnterInfo_RankInfo.internalBinaryWrite(message.rankInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool hidden_enter = 2; */
        if (message.hiddenEnter !== false)
            writer.tag(2, WireType.Varint).bool(message.hiddenEnter);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RankEnterInfo.Page default_page = 4; */
        for (let i = 0; i < message.defaultPage.length; i++)
            RankEnterInfo_Page.internalBinaryWrite(message.defaultPage[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 period_remaining_second = 5; */
        if (message.periodRemainingSecond !== 0n)
            writer.tag(5, WireType.Varint).int64(message.periodRemainingSecond);
        /* repeated data.RankEnterInfo.RankInfo rank_infos_without_shop = 6; */
        for (let i = 0; i < message.rankInfosWithoutShop.length; i++)
            RankEnterInfo_RankInfo.internalBinaryWrite(message.rankInfosWithoutShop[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool display_ktv_rank = 7; */
        if (message.displayKtvRank !== false)
            writer.tag(7, WireType.Varint).bool(message.displayKtvRank);
        /* repeated data.RankEnterInfo.RankInfo default_rank_infos = 8; */
        for (let i = 0; i < message.defaultRankInfos.length; i++)
            RankEnterInfo_RankInfo.internalBinaryWrite(message.defaultRankInfos[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RankEnterInfo.RankInfo customized_default_rank_infos = 9; */
        for (let i = 0; i < message.customizedDefaultRankInfos.length; i++)
            RankEnterInfo_RankInfo.internalBinaryWrite(message.customizedDefaultRankInfos[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RankEnterInfo
 */
export const RankEnterInfo = new RankEnterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankEnterInfo_Page$Type extends MessageType<RankEnterInfo_Page> {
    constructor() {
        super("data.RankEnterInfo.Page", [
            { no: 1, name: "jump_rank_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RankEnterInfo_Page>): RankEnterInfo_Page {
        const message = { jumpRankType: 0, content: "", contentType: 0, backgroundColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RankEnterInfo_Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RankEnterInfo_Page): RankEnterInfo_Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 jump_rank_type */ 1:
                    message.jumpRankType = reader.int32();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int32 content_type */ 3:
                    message.contentType = reader.int32();
                    break;
                case /* string background_color */ 4:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RankEnterInfo_Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 jump_rank_type = 1; */
        if (message.jumpRankType !== 0)
            writer.tag(1, WireType.Varint).int32(message.jumpRankType);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int32 content_type = 3; */
        if (message.contentType !== 0)
            writer.tag(3, WireType.Varint).int32(message.contentType);
        /* string background_color = 4; */
        if (message.backgroundColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RankEnterInfo.Page
 */
export const RankEnterInfo_Page = new RankEnterInfo_Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankEnterInfo_RankInfo$Type extends MessageType<RankEnterInfo_RankInfo> {
    constructor() {
        super("data.RankEnterInfo.RankInfo", [
            { no: 1, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RankEnterInfo_Page },
            { no: 2, name: "icon", kind: "message", T: () => Image },
            { no: 3, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "rank_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rank_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "entrance_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RankEnterInfo_RankInfo>): RankEnterInfo_RankInfo {
        const message = { pages: [], position: 0, rankType: 0, title: "", rankExtra: "", entranceExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RankEnterInfo_RankInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RankEnterInfo_RankInfo): RankEnterInfo_RankInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.RankEnterInfo.Page pages */ 1:
                    message.pages.push(RankEnterInfo_Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image icon */ 2:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int32 position */ 3:
                    message.position = reader.int32();
                    break;
                case /* int32 rank_type */ 4:
                    message.rankType = reader.int32();
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* string rank_extra */ 6:
                    message.rankExtra = reader.string();
                    break;
                case /* string entrance_extra */ 7:
                    message.entranceExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RankEnterInfo_RankInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.RankEnterInfo.Page pages = 1; */
        for (let i = 0; i < message.pages.length; i++)
            RankEnterInfo_Page.internalBinaryWrite(message.pages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon = 2; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 position = 3; */
        if (message.position !== 0)
            writer.tag(3, WireType.Varint).int32(message.position);
        /* int32 rank_type = 4; */
        if (message.rankType !== 0)
            writer.tag(4, WireType.Varint).int32(message.rankType);
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* string rank_extra = 6; */
        if (message.rankExtra !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rankExtra);
        /* string entrance_extra = 7; */
        if (message.entranceExtra !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.entranceExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RankEnterInfo.RankInfo
 */
export const RankEnterInfo_RankInfo = new RankEnterInfo_RankInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RanklistHourEntrance$Type extends MessageType<RanklistHourEntrance> {
    constructor() {
        super("data.RanklistHourEntrance", [
            { no: 1, name: "global_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RanklistHourEntrance_Info },
            { no: 2, name: "default_global_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RanklistHourEntrance_Info },
            { no: 3, name: "vertical_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RanklistHourEntrance_Info },
            { no: 4, name: "default_vertical_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RanklistHourEntrance_Info }
        ]);
    }
    create(value?: PartialMessage<RanklistHourEntrance>): RanklistHourEntrance {
        const message = { globalInfos: [], defaultGlobalInfos: [], verticalInfos: [], defaultVerticalInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RanklistHourEntrance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RanklistHourEntrance): RanklistHourEntrance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.RanklistHourEntrance.Info global_infos */ 1:
                    message.globalInfos.push(RanklistHourEntrance_Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.RanklistHourEntrance.Info default_global_infos */ 2:
                    message.defaultGlobalInfos.push(RanklistHourEntrance_Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.RanklistHourEntrance.Info vertical_infos */ 3:
                    message.verticalInfos.push(RanklistHourEntrance_Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.RanklistHourEntrance.Info default_vertical_infos */ 4:
                    message.defaultVerticalInfos.push(RanklistHourEntrance_Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RanklistHourEntrance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.RanklistHourEntrance.Info global_infos = 1; */
        for (let i = 0; i < message.globalInfos.length; i++)
            RanklistHourEntrance_Info.internalBinaryWrite(message.globalInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RanklistHourEntrance.Info default_global_infos = 2; */
        for (let i = 0; i < message.defaultGlobalInfos.length; i++)
            RanklistHourEntrance_Info.internalBinaryWrite(message.defaultGlobalInfos[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RanklistHourEntrance.Info vertical_infos = 3; */
        for (let i = 0; i < message.verticalInfos.length; i++)
            RanklistHourEntrance_Info.internalBinaryWrite(message.verticalInfos[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RanklistHourEntrance.Info default_vertical_infos = 4; */
        for (let i = 0; i < message.defaultVerticalInfos.length; i++)
            RanklistHourEntrance_Info.internalBinaryWrite(message.defaultVerticalInfos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RanklistHourEntrance
 */
export const RanklistHourEntrance = new RanklistHourEntrance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RanklistHourEntrance_Page$Type extends MessageType<RanklistHourEntrance_Page> {
    constructor() {
        super("data.RanklistHourEntrance.Page", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "show_times", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "content_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RanklistHourEntrance_Page>): RanklistHourEntrance_Page {
        const message = { content: "", backgroundColor: "", showTimes: 0n, contentType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RanklistHourEntrance_Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RanklistHourEntrance_Page): RanklistHourEntrance_Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* string background_color */ 2:
                    message.backgroundColor = reader.string();
                    break;
                case /* int64 show_times */ 3:
                    message.showTimes = reader.int64().toBigInt();
                    break;
                case /* int32 content_type */ 4:
                    message.contentType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RanklistHourEntrance_Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* string background_color = 2; */
        if (message.backgroundColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.backgroundColor);
        /* int64 show_times = 3; */
        if (message.showTimes !== 0n)
            writer.tag(3, WireType.Varint).int64(message.showTimes);
        /* int32 content_type = 4; */
        if (message.contentType !== 0)
            writer.tag(4, WireType.Varint).int32(message.contentType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RanklistHourEntrance.Page
 */
export const RanklistHourEntrance_Page = new RanklistHourEntrance_Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RanklistHourEntrance_Detail$Type extends MessageType<RanklistHourEntrance_Detail> {
    constructor() {
        super("data.RanklistHourEntrance.Detail", [
            { no: 1, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RanklistHourEntrance_Page },
            { no: 2, name: "ranklist_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ranklist_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "entrance_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RanklistHourEntrance_Detail>): RanklistHourEntrance_Detail {
        const message = { pages: [], ranklistType: 0, title: "", ranklistExtra: "", entranceExtra: "", schema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RanklistHourEntrance_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RanklistHourEntrance_Detail): RanklistHourEntrance_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.RanklistHourEntrance.Page pages */ 1:
                    message.pages.push(RanklistHourEntrance_Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 ranklist_type */ 2:
                    message.ranklistType = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string ranklist_extra */ 4:
                    message.ranklistExtra = reader.string();
                    break;
                case /* string entrance_extra */ 5:
                    message.entranceExtra = reader.string();
                    break;
                case /* string schema */ 6:
                    message.schema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RanklistHourEntrance_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.RanklistHourEntrance.Page pages = 1; */
        for (let i = 0; i < message.pages.length; i++)
            RanklistHourEntrance_Page.internalBinaryWrite(message.pages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 ranklist_type = 2; */
        if (message.ranklistType !== 0)
            writer.tag(2, WireType.Varint).int32(message.ranklistType);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string ranklist_extra = 4; */
        if (message.ranklistExtra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.ranklistExtra);
        /* string entrance_extra = 5; */
        if (message.entranceExtra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.entranceExtra);
        /* string schema = 6; */
        if (message.schema !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.schema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RanklistHourEntrance.Detail
 */
export const RanklistHourEntrance_Detail = new RanklistHourEntrance_Detail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RanklistHourEntrance_Info$Type extends MessageType<RanklistHourEntrance_Info> {
    constructor() {
        super("data.RanklistHourEntrance.Info", [
            { no: 1, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RanklistHourEntrance_Detail }
        ]);
    }
    create(value?: PartialMessage<RanklistHourEntrance_Info>): RanklistHourEntrance_Info {
        const message = { details: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RanklistHourEntrance_Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RanklistHourEntrance_Info): RanklistHourEntrance_Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.RanklistHourEntrance.Detail details */ 1:
                    message.details.push(RanklistHourEntrance_Detail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RanklistHourEntrance_Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.RanklistHourEntrance.Detail details = 1; */
        for (let i = 0; i < message.details.length; i++)
            RanklistHourEntrance_Detail.internalBinaryWrite(message.details[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RanklistHourEntrance.Info
 */
export const RanklistHourEntrance_Info = new RanklistHourEntrance_Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomIntroLabel$Type extends MessageType<RoomIntroLabel> {
    constructor() {
        super("data.RoomIntroLabel", [
            { no: 1, name: "label_tag", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "label_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "label_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomIntroLabel>): RoomIntroLabel {
        const message = { labelTag: 0, labelName: "", labelText: "", labelIcon: "", typeName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomIntroLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomIntroLabel): RoomIntroLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 label_tag */ 1:
                    message.labelTag = reader.int32();
                    break;
                case /* string label_name */ 2:
                    message.labelName = reader.string();
                    break;
                case /* string label_text */ 3:
                    message.labelText = reader.string();
                    break;
                case /* string label_icon */ 4:
                    message.labelIcon = reader.string();
                    break;
                case /* string type_name */ 5:
                    message.typeName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomIntroLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 label_tag = 1; */
        if (message.labelTag !== 0)
            writer.tag(1, WireType.Varint).int32(message.labelTag);
        /* string label_name = 2; */
        if (message.labelName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.labelName);
        /* string label_text = 3; */
        if (message.labelText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.labelText);
        /* string label_icon = 4; */
        if (message.labelIcon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.labelIcon);
        /* string type_name = 5; */
        if (message.typeName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.typeName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RoomIntroLabel
 */
export const RoomIntroLabel = new RoomIntroLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureDetail$Type extends MessageType<TreasureDetail> {
    constructor() {
        super("data.TreasureDetail", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count_down", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "trigger_timing", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "count_down_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureDetail>): TreasureDetail {
        const message = { key: "", content: "", countDown: 0n, triggerTiming: 0, countDownKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureDetail): TreasureDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 count_down */ 3:
                    message.countDown = reader.int64().toBigInt();
                    break;
                case /* int32 trigger_timing */ 4:
                    message.triggerTiming = reader.int32();
                    break;
                case /* string count_down_key */ 5:
                    message.countDownKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 count_down = 3; */
        if (message.countDown !== 0n)
            writer.tag(3, WireType.Varint).int64(message.countDown);
        /* int32 trigger_timing = 4; */
        if (message.triggerTiming !== 0)
            writer.tag(4, WireType.Varint).int32(message.triggerTiming);
        /* string count_down_key = 5; */
        if (message.countDownKey !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.countDownKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TreasureDetail
 */
export const TreasureDetail = new TreasureDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FreqCtrlParams$Type extends MessageType<FreqCtrlParams> {
    constructor() {
        super("data.FreqCtrlParams", [
            { no: 1, name: "strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cur", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FreqCtrlParams>): FreqCtrlParams {
        const message = { strategy: 0, limit: 0n, key: "", cur: 0n, duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FreqCtrlParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FreqCtrlParams): FreqCtrlParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 strategy */ 1:
                    message.strategy = reader.int32();
                    break;
                case /* int64 limit */ 2:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* string key */ 3:
                    message.key = reader.string();
                    break;
                case /* int64 cur */ 4:
                    message.cur = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 5:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FreqCtrlParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 strategy = 1; */
        if (message.strategy !== 0)
            writer.tag(1, WireType.Varint).int32(message.strategy);
        /* int64 limit = 2; */
        if (message.limit !== 0n)
            writer.tag(2, WireType.Varint).int64(message.limit);
        /* string key = 3; */
        if (message.key !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.key);
        /* int64 cur = 4; */
        if (message.cur !== 0n)
            writer.tag(4, WireType.Varint).int64(message.cur);
        /* int64 duration = 5; */
        if (message.duration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FreqCtrlParams
 */
export const FreqCtrlParams = new FreqCtrlParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshParams$Type extends MessageType<RefreshParams> {
    constructor() {
        super("data.RefreshParams", [
            { no: 1, name: "refresh_mechanism", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "polling_interval", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RefreshParams>): RefreshParams {
        const message = { refreshMechanism: 0, pollingInterval: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefreshParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshParams): RefreshParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 refresh_mechanism */ 1:
                    message.refreshMechanism = reader.int32();
                    break;
                case /* int64 polling_interval */ 2:
                    message.pollingInterval = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 refresh_mechanism = 1; */
        if (message.refreshMechanism !== 0)
            writer.tag(1, WireType.Varint).int32(message.refreshMechanism);
        /* int64 polling_interval = 2; */
        if (message.pollingInterval !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pollingInterval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RefreshParams
 */
export const RefreshParams = new RefreshParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TouchPositionMeta$Type extends MessageType<TouchPositionMeta> {
    constructor() {
        super("data.TouchPositionMeta", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "meta_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "template", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "freq_ctrl_params_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FreqCtrlParams },
            { no: 6, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "refresh_params_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RefreshParams },
            { no: 8, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TouchPositionMeta>): TouchPositionMeta {
        const message = { id: 0n, metaId: 0n, position: 0, template: 0n, freqCtrlParamsList: [], duration: 0n, refreshParamsList: [], priority: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TouchPositionMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TouchPositionMeta): TouchPositionMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 meta_id */ 2:
                    message.metaId = reader.int64().toBigInt();
                    break;
                case /* int32 position */ 3:
                    message.position = reader.int32();
                    break;
                case /* int64 template */ 4:
                    message.template = reader.int64().toBigInt();
                    break;
                case /* repeated data.FreqCtrlParams freq_ctrl_params_list */ 5:
                    message.freqCtrlParamsList.push(FreqCtrlParams.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 duration */ 6:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* repeated data.RefreshParams refresh_params_list */ 7:
                    message.refreshParamsList.push(RefreshParams.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 priority */ 8:
                    message.priority = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TouchPositionMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 meta_id = 2; */
        if (message.metaId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.metaId);
        /* int32 position = 3; */
        if (message.position !== 0)
            writer.tag(3, WireType.Varint).int32(message.position);
        /* int64 template = 4; */
        if (message.template !== 0n)
            writer.tag(4, WireType.Varint).int64(message.template);
        /* repeated data.FreqCtrlParams freq_ctrl_params_list = 5; */
        for (let i = 0; i < message.freqCtrlParamsList.length; i++)
            FreqCtrlParams.internalBinaryWrite(message.freqCtrlParamsList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 6; */
        if (message.duration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.duration);
        /* repeated data.RefreshParams refresh_params_list = 7; */
        for (let i = 0; i < message.refreshParamsList.length; i++)
            RefreshParams.internalBinaryWrite(message.refreshParamsList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 priority = 8; */
        if (message.priority !== 0n)
            writer.tag(8, WireType.Varint).int64(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TouchPositionMeta
 */
export const TouchPositionMeta = new TouchPositionMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskCurrentInfo$Type extends MessageType<TaskCurrentInfo> {
    constructor() {
        super("data.TaskCurrentInfo", [
            { no: 1, name: "pk_win_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room_like_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "subscribe_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TaskCurrentInfo>): TaskCurrentInfo {
        const message = { pkWinCount: 0n, roomLikeCount: 0n, subscribeCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskCurrentInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskCurrentInfo): TaskCurrentInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pk_win_count */ 1:
                    message.pkWinCount = reader.int64().toBigInt();
                    break;
                case /* int64 room_like_count */ 2:
                    message.roomLikeCount = reader.int64().toBigInt();
                    break;
                case /* int64 subscribe_count */ 4:
                    message.subscribeCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskCurrentInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pk_win_count = 1; */
        if (message.pkWinCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pkWinCount);
        /* int64 room_like_count = 2; */
        if (message.roomLikeCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.roomLikeCount);
        /* int64 subscribe_count = 4; */
        if (message.subscribeCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.subscribeCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TaskCurrentInfo
 */
export const TaskCurrentInfo = new TaskCurrentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskConditionExtra$Type extends MessageType<TaskConditionExtra> {
    constructor() {
        super("data.TaskConditionExtra", [
            { no: 1, name: "customized_gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "gift_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<TaskConditionExtra>): TaskConditionExtra {
        const message = { customizedGiftId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskConditionExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskConditionExtra): TaskConditionExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 customized_gift_id */ 1:
                    message.customizedGiftId = reader.int64().toBigInt();
                    break;
                case /* data.Image gift_icon */ 2:
                    message.giftIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.giftIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskConditionExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 customized_gift_id = 1; */
        if (message.customizedGiftId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.customizedGiftId);
        /* data.Image gift_icon = 2; */
        if (message.giftIcon)
            Image.internalBinaryWrite(message.giftIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TaskConditionExtra
 */
export const TaskConditionExtra = new TaskConditionExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskCondition$Type extends MessageType<TaskCondition> {
    constructor() {
        super("data.TaskCondition", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "operator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra", kind: "message", T: () => TaskConditionExtra }
        ]);
    }
    create(value?: PartialMessage<TaskCondition>): TaskCondition {
        const message = { key: "", value: 0n, operator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskCondition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskCondition): TaskCondition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* int64 value */ 2:
                    message.value = reader.int64().toBigInt();
                    break;
                case /* string operator */ 3:
                    message.operator = reader.string();
                    break;
                case /* data.TaskConditionExtra extra */ 4:
                    message.extra = TaskConditionExtra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskCondition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* int64 value = 2; */
        if (message.value !== 0n)
            writer.tag(2, WireType.Varint).int64(message.value);
        /* string operator = 3; */
        if (message.operator !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.operator);
        /* data.TaskConditionExtra extra = 4; */
        if (message.extra)
            TaskConditionExtra.internalBinaryWrite(message.extra, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TaskCondition
 */
export const TaskCondition = new TaskCondition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskTodoStep$Type extends MessageType<TaskTodoStep> {
    constructor() {
        super("data.TaskTodoStep", [
            { no: 1, name: "conditions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskCondition }
        ]);
    }
    create(value?: PartialMessage<TaskTodoStep>): TaskTodoStep {
        const message = { conditions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskTodoStep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskTodoStep): TaskTodoStep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.TaskCondition conditions */ 1:
                    message.conditions.push(TaskCondition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskTodoStep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.TaskCondition conditions = 1; */
        for (let i = 0; i < message.conditions.length; i++)
            TaskCondition.internalBinaryWrite(message.conditions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TaskTodoStep
 */
export const TaskTodoStep = new TaskTodoStep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskTodo$Type extends MessageType<TaskTodo> {
    constructor() {
        super("data.TaskTodo", [
            { no: 1, name: "steps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskTodoStep }
        ]);
    }
    create(value?: PartialMessage<TaskTodo>): TaskTodo {
        const message = { steps: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskTodo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskTodo): TaskTodo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.TaskTodoStep steps */ 1:
                    message.steps.push(TaskTodoStep.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskTodo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.TaskTodoStep steps = 1; */
        for (let i = 0; i < message.steps.length; i++)
            TaskTodoStep.internalBinaryWrite(message.steps[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TaskTodo
 */
export const TaskTodo = new TaskTodo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskRecord$Type extends MessageType<TaskRecord> {
    constructor() {
        super("data.TaskRecord", [
            { no: 1, name: "task_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "task_class_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "todos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskTodo },
            { no: 4, name: "current_info", kind: "message", T: () => TaskCurrentInfo },
            { no: 5, name: "wish_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "wish_contributor", kind: "message", T: () => WishContributor }
        ]);
    }
    create(value?: PartialMessage<TaskRecord>): TaskRecord {
        const message = { taskStatus: 0, taskClassId: 0n, todos: [], wishType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskRecord): TaskRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 task_status */ 1:
                    message.taskStatus = reader.int32();
                    break;
                case /* int64 task_class_id */ 2:
                    message.taskClassId = reader.int64().toBigInt();
                    break;
                case /* repeated data.TaskTodo todos */ 3:
                    message.todos.push(TaskTodo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.TaskCurrentInfo current_info */ 4:
                    message.currentInfo = TaskCurrentInfo.internalBinaryRead(reader, reader.uint32(), options, message.currentInfo);
                    break;
                case /* int32 wish_type */ 5:
                    message.wishType = reader.int32();
                    break;
                case /* data.WishContributor wish_contributor */ 6:
                    message.wishContributor = WishContributor.internalBinaryRead(reader, reader.uint32(), options, message.wishContributor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 task_status = 1; */
        if (message.taskStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.taskStatus);
        /* int64 task_class_id = 2; */
        if (message.taskClassId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.taskClassId);
        /* repeated data.TaskTodo todos = 3; */
        for (let i = 0; i < message.todos.length; i++)
            TaskTodo.internalBinaryWrite(message.todos[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.TaskCurrentInfo current_info = 4; */
        if (message.currentInfo)
            TaskCurrentInfo.internalBinaryWrite(message.currentInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 wish_type = 5; */
        if (message.wishType !== 0)
            writer.tag(5, WireType.Varint).int32(message.wishType);
        /* data.WishContributor wish_contributor = 6; */
        if (message.wishContributor)
            WishContributor.internalBinaryWrite(message.wishContributor, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.TaskRecord
 */
export const TaskRecord = new TaskRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WishContributor$Type extends MessageType<WishContributor> {
    constructor() {
        super("data.WishContributor", [
            { no: 1, name: "contributors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WishContributor_Contributor },
            { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "show_score", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WishContributor>): WishContributor {
        const message = { contributors: [], totalCount: 0n, showScore: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WishContributor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WishContributor): WishContributor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.WishContributor.Contributor contributors */ 1:
                    message.contributors.push(WishContributor_Contributor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total_count */ 2:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                case /* bool show_score */ 3:
                    message.showScore = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WishContributor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.WishContributor.Contributor contributors = 1; */
        for (let i = 0; i < message.contributors.length; i++)
            WishContributor_Contributor.internalBinaryWrite(message.contributors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count = 2; */
        if (message.totalCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalCount);
        /* bool show_score = 3; */
        if (message.showScore !== false)
            writer.tag(3, WireType.Varint).bool(message.showScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.WishContributor
 */
export const WishContributor = new WishContributor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WishContributor_Contributor$Type extends MessageType<WishContributor_Contributor> {
    constructor() {
        super("data.WishContributor.Contributor", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "message", T: () => Image },
            { no: 4, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "score_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WishContributor_Contributor>): WishContributor_Contributor {
        const message = { userId: 0n, secUserId: "", nickName: "", scoreDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WishContributor_Contributor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WishContributor_Contributor): WishContributor_Contributor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string sec_user_id */ 2:
                    message.secUserId = reader.string();
                    break;
                case /* data.Image avatar */ 3:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                case /* string nick_name */ 4:
                    message.nickName = reader.string();
                    break;
                case /* string score_desc */ 5:
                    message.scoreDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WishContributor_Contributor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string sec_user_id = 2; */
        if (message.secUserId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secUserId);
        /* data.Image avatar = 3; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string nick_name = 4; */
        if (message.nickName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nickName);
        /* string score_desc = 5; */
        if (message.scoreDesc !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.scoreDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.WishContributor.Contributor
 */
export const WishContributor_Contributor = new WishContributor_Contributor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppUserInfo$Type extends MessageType<AppUserInfo> {
    constructor() {
        super("data.AppUserInfo", [
            { no: 1, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "open_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AppUserInfo>): AppUserInfo {
        const message = { appId: "", gameId: 0n, openUid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppUserInfo): AppUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string app_id */ 1:
                    message.appId = reader.string();
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* string open_uid */ 3:
                    message.openUid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string app_id = 1; */
        if (message.appId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appId);
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* string open_uid = 3; */
        if (message.openUid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.openUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.AppUserInfo
 */
export const AppUserInfo = new AppUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftAudienceReceiverItem$Type extends MessageType<GiftAudienceReceiverItem> {
    constructor() {
        super("data.GiftAudienceReceiverItem", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "gift_auth", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "off_reason_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftAudienceReceiverItem>): GiftAudienceReceiverItem {
        const message = { score: 0n, giftAuth: false, offReasonToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftAudienceReceiverItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftAudienceReceiverItem): GiftAudienceReceiverItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* bool gift_auth */ 3:
                    message.giftAuth = reader.bool();
                    break;
                case /* string off_reason_toast */ 4:
                    message.offReasonToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftAudienceReceiverItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* bool gift_auth = 3; */
        if (message.giftAuth !== false)
            writer.tag(3, WireType.Varint).bool(message.giftAuth);
        /* string off_reason_toast = 4; */
        if (message.offReasonToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.offReasonToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.GiftAudienceReceiverItem
 */
export const GiftAudienceReceiverItem = new GiftAudienceReceiverItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartSingMultiChorusContent$Type extends MessageType<StartSingMultiChorusContent> {
    constructor() {
        super("data.StartSingMultiChorusContent", [
            { no: 1, name: "common", kind: "message", T: () => MultiChorusCommonContent }
        ]);
    }
    create(value?: PartialMessage<StartSingMultiChorusContent>): StartSingMultiChorusContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartSingMultiChorusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartSingMultiChorusContent): StartSingMultiChorusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MultiChorusCommonContent common */ 1:
                    message.common = MultiChorusCommonContent.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartSingMultiChorusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MultiChorusCommonContent common = 1; */
        if (message.common)
            MultiChorusCommonContent.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.StartSingMultiChorusContent
 */
export const StartSingMultiChorusContent = new StartSingMultiChorusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinMultiChorusContent$Type extends MessageType<JoinMultiChorusContent> {
    constructor() {
        super("data.JoinMultiChorusContent", [
            { no: 1, name: "common", kind: "message", T: () => MultiChorusCommonContent }
        ]);
    }
    create(value?: PartialMessage<JoinMultiChorusContent>): JoinMultiChorusContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinMultiChorusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinMultiChorusContent): JoinMultiChorusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MultiChorusCommonContent common */ 1:
                    message.common = MultiChorusCommonContent.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinMultiChorusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MultiChorusCommonContent common = 1; */
        if (message.common)
            MultiChorusCommonContent.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.JoinMultiChorusContent
 */
export const JoinMultiChorusContent = new JoinMultiChorusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveMultiChorusContent$Type extends MessageType<LeaveMultiChorusContent> {
    constructor() {
        super("data.LeaveMultiChorusContent", [
            { no: 1, name: "common", kind: "message", T: () => MultiChorusCommonContent }
        ]);
    }
    create(value?: PartialMessage<LeaveMultiChorusContent>): LeaveMultiChorusContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveMultiChorusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveMultiChorusContent): LeaveMultiChorusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MultiChorusCommonContent common */ 1:
                    message.common = MultiChorusCommonContent.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaveMultiChorusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MultiChorusCommonContent common = 1; */
        if (message.common)
            MultiChorusCommonContent.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.LeaveMultiChorusContent
 */
export const LeaveMultiChorusContent = new LeaveMultiChorusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishMultiChorusContent$Type extends MessageType<FinishMultiChorusContent> {
    constructor() {
        super("data.FinishMultiChorusContent", [
            { no: 1, name: "common", kind: "message", T: () => MultiChorusCommonContent },
            { no: 2, name: "finish_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FinishMultiChorusContent>): FinishMultiChorusContent {
        const message = { finishReason: 0, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishMultiChorusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishMultiChorusContent): FinishMultiChorusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MultiChorusCommonContent common */ 1:
                    message.common = MultiChorusCommonContent.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 finish_reason */ 2:
                    message.finishReason = reader.int32();
                    break;
                case /* string toast */ 3:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishMultiChorusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MultiChorusCommonContent common = 1; */
        if (message.common)
            MultiChorusCommonContent.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 finish_reason = 2; */
        if (message.finishReason !== 0)
            writer.tag(2, WireType.Varint).int32(message.finishReason);
        /* string toast = 3; */
        if (message.toast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.FinishMultiChorusContent
 */
export const FinishMultiChorusContent = new FinishMultiChorusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiChorusCommonContent$Type extends MessageType<MultiChorusCommonContent> {
    constructor() {
        super("data.MultiChorusCommonContent", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "multi_chorus_info", kind: "message", T: () => MultiChorusInfo }
        ]);
    }
    create(value?: PartialMessage<MultiChorusCommonContent>): MultiChorusCommonContent {
        const message = { userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiChorusCommonContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiChorusCommonContent): MultiChorusCommonContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.MultiChorusInfo multi_chorus_info */ 2:
                    message.multiChorusInfo = MultiChorusInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChorusInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiChorusCommonContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* data.MultiChorusInfo multi_chorus_info = 2; */
        if (message.multiChorusInfo)
            MultiChorusInfo.internalBinaryWrite(message.multiChorusInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiChorusCommonContent
 */
export const MultiChorusCommonContent = new MultiChorusCommonContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiChorusUpdateMessage$Type extends MessageType<MultiChorusUpdateMessage> {
    constructor() {
        super("data.MultiChorusUpdateMessage", [
            { no: 1, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "start_sing_multi_chorus_content", kind: "message", T: () => StartSingMultiChorusContent },
            { no: 3, name: "join_multi_chorus_content", kind: "message", T: () => JoinMultiChorusContent },
            { no: 4, name: "leave_multi_chorus_content", kind: "message", T: () => LeaveMultiChorusContent },
            { no: 5, name: "finish_multi_chorus_content", kind: "message", T: () => FinishMultiChorusContent }
        ]);
    }
    create(value?: PartialMessage<MultiChorusUpdateMessage>): MultiChorusUpdateMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiChorusUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiChorusUpdateMessage): MultiChorusUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 msg_type */ 1:
                    message.msgType = reader.int32();
                    break;
                case /* data.StartSingMultiChorusContent start_sing_multi_chorus_content */ 2:
                    message.startSingMultiChorusContent = StartSingMultiChorusContent.internalBinaryRead(reader, reader.uint32(), options, message.startSingMultiChorusContent);
                    break;
                case /* data.JoinMultiChorusContent join_multi_chorus_content */ 3:
                    message.joinMultiChorusContent = JoinMultiChorusContent.internalBinaryRead(reader, reader.uint32(), options, message.joinMultiChorusContent);
                    break;
                case /* data.LeaveMultiChorusContent leave_multi_chorus_content */ 4:
                    message.leaveMultiChorusContent = LeaveMultiChorusContent.internalBinaryRead(reader, reader.uint32(), options, message.leaveMultiChorusContent);
                    break;
                case /* data.FinishMultiChorusContent finish_multi_chorus_content */ 5:
                    message.finishMultiChorusContent = FinishMultiChorusContent.internalBinaryRead(reader, reader.uint32(), options, message.finishMultiChorusContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiChorusUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 msg_type = 1; */
        if (message.msgType !== 0)
            writer.tag(1, WireType.Varint).int32(message.msgType);
        /* data.StartSingMultiChorusContent start_sing_multi_chorus_content = 2; */
        if (message.startSingMultiChorusContent)
            StartSingMultiChorusContent.internalBinaryWrite(message.startSingMultiChorusContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.JoinMultiChorusContent join_multi_chorus_content = 3; */
        if (message.joinMultiChorusContent)
            JoinMultiChorusContent.internalBinaryWrite(message.joinMultiChorusContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.LeaveMultiChorusContent leave_multi_chorus_content = 4; */
        if (message.leaveMultiChorusContent)
            LeaveMultiChorusContent.internalBinaryWrite(message.leaveMultiChorusContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.FinishMultiChorusContent finish_multi_chorus_content = 5; */
        if (message.finishMultiChorusContent)
            FinishMultiChorusContent.internalBinaryWrite(message.finishMultiChorusContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiChorusUpdateMessage
 */
export const MultiChorusUpdateMessage = new MultiChorusUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiChorusInfo$Type extends MessageType<MultiChorusInfo> {
    constructor() {
        super("data.MultiChorusInfo", [
            { no: 1, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "leader_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "song_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "chorus_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MultiChorusInfo>): MultiChorusInfo {
        const message = { userIds: [], leaderUserId: 0n, songId: 0n, songType: 0, chorusId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiChorusInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiChorusInfo): MultiChorusInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 user_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int64().toBigInt());
                    else
                        message.userIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 leader_user_id */ 2:
                    message.leaderUserId = reader.int64().toBigInt();
                    break;
                case /* int64 song_id */ 3:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* int32 song_type */ 4:
                    message.songType = reader.int32();
                    break;
                case /* string chorus_id */ 6:
                    message.chorusId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiChorusInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 user_ids = 1; */
        if (message.userIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int64(message.userIds[i]);
            writer.join();
        }
        /* int64 leader_user_id = 2; */
        if (message.leaderUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.leaderUserId);
        /* int64 song_id = 3; */
        if (message.songId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.songId);
        /* int32 song_type = 4; */
        if (message.songType !== 0)
            writer.tag(4, WireType.Varint).int32(message.songType);
        /* string chorus_id = 6; */
        if (message.chorusId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.chorusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiChorusInfo
 */
export const MultiChorusInfo = new MultiChorusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiChorusUserBase$Type extends MessageType<MultiChorusUserBase> {
    constructor() {
        super("data.MultiChorusUserBase", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 3, name: "secret", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "sec_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mystery_man", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MultiChorusUserBase>): MultiChorusUserBase {
        const message = { id: 0n, secret: 0, secUid: "", mysteryMan: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiChorusUserBase>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiChorusUserBase): MultiChorusUserBase {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* data.Image avatar_thumb */ 2:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* int32 secret */ 3:
                    message.secret = reader.int32();
                    break;
                case /* string sec_uid */ 4:
                    message.secUid = reader.string();
                    break;
                case /* int32 mystery_man */ 5:
                    message.mysteryMan = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiChorusUserBase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* data.Image avatar_thumb = 2; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 secret = 3; */
        if (message.secret !== 0)
            writer.tag(3, WireType.Varint).int32(message.secret);
        /* string sec_uid = 4; */
        if (message.secUid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.secUid);
        /* int32 mystery_man = 5; */
        if (message.mysteryMan !== 0)
            writer.tag(5, WireType.Varint).int32(message.mysteryMan);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MultiChorusUserBase
 */
export const MultiChorusUserBase = new MultiChorusUserBase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoreLiveEntrance$Type extends MessageType<MoreLiveEntrance> {
    constructor() {
        super("data.MoreLiveEntrance", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tab_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "valid_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "event_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MoreLiveEntrance>): MoreLiveEntrance {
        const message = { name: "", tabType: 0n, validTime: 0n, priority: 0n, extra: "", eventExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MoreLiveEntrance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoreLiveEntrance): MoreLiveEntrance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 tab_type */ 2:
                    message.tabType = reader.int64().toBigInt();
                    break;
                case /* int64 valid_time */ 3:
                    message.validTime = reader.int64().toBigInt();
                    break;
                case /* int64 priority */ 4:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                case /* string event_extra */ 6:
                    message.eventExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoreLiveEntrance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 tab_type = 2; */
        if (message.tabType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.tabType);
        /* int64 valid_time = 3; */
        if (message.validTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.validTime);
        /* int64 priority = 4; */
        if (message.priority !== 0n)
            writer.tag(4, WireType.Varint).int64(message.priority);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        /* string event_extra = 6; */
        if (message.eventExtra !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.eventExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MoreLiveEntrance
 */
export const MoreLiveEntrance = new MoreLiveEntrance$Type();
