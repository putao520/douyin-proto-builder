// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "ecom.live.proto" (package "live", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message live.LiveCommonMessage
 */
export interface LiveCommonMessage {
    /**
     * @generated from protobuf field: int32 msg_type = 1;
     */
    msgType: number;
    /**
     * @generated from protobuf field: int64 screenshot_timestamp = 2;
     */
    screenshotTimestamp: bigint;
    /**
     * @generated from protobuf field: live.RoomTagOfflineInfo room_tag_offline_info = 3;
     */
    roomTagOfflineInfo?: RoomTagOfflineInfo;
    /**
     * @generated from protobuf field: live.FilterSwitchChangeData filter_switch_change_data = 4;
     */
    filterSwitchChangeData?: FilterSwitchChangeData;
    /**
     * @generated from protobuf field: live.GMVData gmv_data = 5;
     */
    gmvData?: GMVData;
}
/**
 * @generated from protobuf message live.RoomTagOfflineInfo
 */
export interface RoomTagOfflineInfo {
    /**
     * @generated from protobuf field: int64 tag_type = 1;
     */
    tagType: bigint;
    /**
     * @generated from protobuf field: string user_toast = 2;
     */
    userToast: string;
}
/**
 * @generated from protobuf message live.UpIcon
 */
export interface UpIcon {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string up_icon = 2;
     */
    upIcon: string;
    /**
     * @generated from protobuf field: string up_desc = 3;
     */
    upDesc: string;
    /**
     * @generated from protobuf field: string public_screen_notice = 4;
     */
    publicScreenNotice: string;
}
/**
 * @generated from protobuf message live.FilterSwitchChangeData
 */
export interface FilterSwitchChangeData {
    /**
     * @generated from protobuf field: bool enable = 1;
     */
    enable: boolean;
    /**
     * @generated from protobuf field: live.UpIcon up_icon = 2;
     */
    upIcon?: UpIcon;
}
/**
 * @generated from protobuf message live.GMVData
 */
export interface GMVData {
    /**
     * @generated from protobuf field: string gmv = 1;
     */
    gmv: string;
}
/**
 * @generated from protobuf message live.DelayParam
 */
export interface DelayParam {
    /**
     * @generated from protobuf field: int32 delay_strategy = 1;
     */
    delayStrategy: number;
    /**
     * @generated from protobuf field: int32 min_delay_ms = 2;
     */
    minDelayMs: number;
    /**
     * @generated from protobuf field: int32 max_delay_ms = 3;
     */
    maxDelayMs: number;
}
/**
 * @generated from protobuf message live.HotAtmosphere
 */
export interface HotAtmosphere {
    /**
     * @generated from protobuf field: string img = 1;
     */
    img: string;
    /**
     * @generated from protobuf field: string sale_num = 2;
     */
    saleNum: string;
    /**
     * @generated from protobuf field: int64 type = 3;
     */
    type: bigint;
    /**
     * @generated from protobuf field: string num = 4;
     */
    num: string;
    /**
     * @generated from protobuf field: string bg_color = 5;
     */
    bgColor: string;
    /**
     * @generated from protobuf field: string border_color = 6;
     */
    borderColor: string;
    /**
     * @generated from protobuf field: int64 left_margin = 7;
     */
    leftMargin: bigint;
    /**
     * @generated from protobuf field: int64 ui_type = 8;
     */
    uiType: bigint;
    /**
     * @generated from protobuf field: repeated string bg_colors = 9;
     */
    bgColors: string[];
    /**
     * @generated from protobuf field: repeated string border_colors = 10;
     */
    borderColors: string[];
    /**
     * @generated from protobuf field: string top_img = 11;
     */
    topImg: string;
}
/**
 * @generated from protobuf message live.BarrageBuyInfo
 */
export interface BarrageBuyInfo {
    /**
     * @generated from protobuf field: string nick_name = 1;
     */
    nickName: string;
    /**
     * @generated from protobuf field: int64 purchase_cnt = 2;
     */
    purchaseCnt: bigint;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: string icon = 4;
     */
    icon: string;
}
/**
 * @generated from protobuf message live.InteractionData
 */
export interface InteractionData {
    /**
     * @generated from protobuf field: bool full = 1;
     */
    full: boolean;
    /**
     * @generated from protobuf field: repeated live.InteractionContent contents = 2;
     */
    contents: InteractionContent[];
}
/**
 * @generated from protobuf message live.InteractionContent
 */
export interface InteractionContent {
    /**
     * @generated from protobuf field: live.InteractionContentCheck check = 1;
     */
    check?: InteractionContentCheck;
    /**
     * @generated from protobuf field: int32 priority = 2;
     */
    priority: number;
    /**
     * @generated from protobuf field: int32 loop_count = 3;
     */
    loopCount: number;
    /**
     * @generated from protobuf field: repeated live.InteractionElement content = 4;
     */
    content: InteractionElement[];
}
/**
 * @generated from protobuf message live.InteractionContentCheck
 */
export interface InteractionContentCheck {
    /**
     * @generated from protobuf field: int64 product_id = 1;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int32 index = 2;
     */
    index: number;
}
/**
 * @generated from protobuf message live.InteractionElement
 */
export interface InteractionElement {
    /**
     * @generated from protobuf field: int32 element_type = 1;
     */
    elementType: number;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: string text_color = 3;
     */
    textColor: string;
    /**
     * @generated from protobuf field: live.InteractionAvatar avatars = 4;
     */
    avatars?: InteractionAvatar;
    /**
     * @generated from protobuf field: int32 blank_width = 5;
     */
    blankWidth: number;
}
/**
 * @generated from protobuf message live.InteractionAvatar
 */
export interface InteractionAvatar {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: int32 width = 2;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 3;
     */
    height: number;
}
/**
 * @generated from protobuf message live.LiveInteractionMessage
 */
export interface LiveInteractionMessage {
    /**
     * @generated from protobuf field: int32 msg_type = 1;
     */
    msgType: number;
    /**
     * @generated from protobuf field: live.BarrageBuyInfo barrage_buy_info = 2;
     */
    barrageBuyInfo?: BarrageBuyInfo;
    /**
     * @generated from protobuf field: live.InteractionData interaction_data = 3;
     */
    interactionData?: InteractionData;
}
/**
 * @generated from protobuf message live.Img
 */
export interface Img {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: int32 height = 2;
     */
    height: number;
    /**
     * @generated from protobuf field: int32 width = 3;
     */
    width: number;
}
/**
 * @generated from protobuf message live.CurrentUserInfo
 */
export interface CurrentUserInfo {
    /**
     * @generated from protobuf field: live.Img user_pic = 1;
     */
    userPic?: Img;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message live.IncrPriceList
 */
export interface IncrPriceList {
    /**
     * @generated from protobuf field: int64 price = 1;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int64 range = 2;
     */
    range: bigint;
}
/**
 * @generated from protobuf message live.AuctionInfo
 */
export interface AuctionInfo {
    /**
     * @generated from protobuf field: int64 price = 1;
     */
    price: bigint;
    /**
     * @generated from protobuf field: string price_label = 2;
     */
    priceLabel: string;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: string jump_url = 4;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: live.CurrentUserInfo current_user_info = 5;
     */
    currentUserInfo?: CurrentUserInfo;
    /**
     * @generated from protobuf field: repeated live.IncrPriceList incr_price_lists = 6;
     */
    incrPriceLists: IncrPriceList[];
    /**
     * @generated from protobuf field: string button_label = 7;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: int64 product_id = 8;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 9;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 biz_id = 10;
     */
    bizId: number;
}
/**
 * @generated from protobuf message live.AuctionSuccess
 */
export interface AuctionSuccess {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 product_id = 2;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: string product_name = 3;
     */
    productName: string;
    /**
     * @generated from protobuf field: string product_pic = 4;
     */
    productPic: string;
    /**
     * @generated from protobuf field: int64 price = 5;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int64 charge = 6;
     */
    charge: bigint;
    /**
     * @generated from protobuf field: int64 freight = 7;
     */
    freight: bigint;
    /**
     * @generated from protobuf field: int64 total = 8;
     */
    total: bigint;
    /**
     * @generated from protobuf field: string button_label = 9;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: string jump_url = 10;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: string freight_collect = 11;
     */
    freightCollect: string;
    /**
     * @generated from protobuf field: int64 left_payment_time = 12;
     */
    leftPaymentTime: bigint;
    /**
     * @generated from protobuf field: int32 biz_id = 13;
     */
    bizId: number;
    /**
     * @generated from protobuf field: string deposit_info = 14;
     */
    depositInfo: string;
}
/**
 * @generated from protobuf message live.RedpackActivityInfo
 */
export interface RedpackActivityInfo {
    /**
     * @generated from protobuf field: int64 redpack_type = 1;
     */
    redpackType: bigint;
    /**
     * @generated from protobuf field: string redpack_activity_id = 2;
     */
    redpackActivityId: string;
    /**
     * @generated from protobuf field: string redpack_activity_name = 3;
     */
    redpackActivityName: string;
    /**
     * @generated from protobuf field: int64 start_apply_time = 4;
     */
    startApplyTime: bigint;
    /**
     * @generated from protobuf field: int64 end_apply_time = 5;
     */
    endApplyTime: bigint;
    /**
     * @generated from protobuf field: int64 preheat_time = 6;
     */
    preheatTime: bigint;
    /**
     * @generated from protobuf field: int64 total_amount = 7;
     */
    totalAmount: bigint;
    /**
     * @generated from protobuf field: string author_avatar_url = 8;
     */
    authorAvatarUrl: string;
    /**
     * @generated from protobuf field: string author_name = 9;
     */
    authorName: string;
    /**
     * @generated from protobuf field: string pendant_background_url = 10;
     */
    pendantBackgroundUrl: string;
    /**
     * @generated from protobuf field: string redpack_front_background_url = 11;
     */
    redpackFrontBackgroundUrl: string;
    /**
     * @generated from protobuf field: string redpack_label = 12;
     */
    redpackLabel: string;
    /**
     * @generated from protobuf field: string redpack_after_background_url = 13;
     */
    redpackAfterBackgroundUrl: string;
    /**
     * @generated from protobuf field: string redpack_after_belt_url = 14;
     */
    redpackAfterBeltUrl: string;
    /**
     * @generated from protobuf field: int64 scatter_time = 15;
     */
    scatterTime: bigint;
    /**
     * @generated from protobuf field: int64 server_time = 16;
     */
    serverTime: bigint;
    /**
     * @generated from protobuf field: int64 max_amount = 17;
     */
    maxAmount: bigint;
    /**
     * @generated from protobuf field: int64 show_type = 18;
     */
    showType: bigint;
    /**
     * @generated from protobuf field: string shorttouch_pendant_background_url = 19;
     */
    shorttouchPendantBackgroundUrl: string;
    /**
     * @generated from protobuf field: string shorttouch_pendant_icon_url = 20;
     */
    shorttouchPendantIconUrl: string;
    /**
     * @generated from protobuf field: string shorttouch_lottie_url = 21;
     */
    shorttouchLottieUrl: string;
}
/**
 * @generated from protobuf message live.BenefitLabel
 */
export interface BenefitLabel {
    /**
     * @generated from protobuf field: string LeftText = 1 [json_name = "LeftText"];
     */
    leftText: string;
    /**
     * @generated from protobuf field: string RightText = 2 [json_name = "RightText"];
     */
    rightText: string;
    /**
     * @generated from protobuf field: int32 TextStyle = 3 [json_name = "TextStyle"];
     */
    textStyle: number;
    /**
     * @generated from protobuf field: int32 ColorStyle = 4 [json_name = "ColorStyle"];
     */
    colorStyle: number;
    /**
     * @generated from protobuf field: int32 DivLine = 5 [json_name = "DivLine"];
     */
    divLine: number;
}
/**
 * @generated from protobuf message live.LotteryInfoList
 */
export interface LotteryInfoList {
    /**
     * @generated from protobuf field: string activity_id = 1;
     */
    activityId: string;
    /**
     * @generated from protobuf field: int64 task_type = 2;
     */
    taskType: bigint;
    /**
     * @generated from protobuf field: int64 open_time = 3;
     */
    openTime: bigint;
    /**
     * @generated from protobuf field: int64 user_activity_status = 4;
     */
    userActivityStatus: bigint;
    /**
     * @generated from protobuf field: string win_record_id = 5;
     */
    winRecordId: string;
    /**
     * @generated from protobuf field: string result_label = 6;
     */
    resultLabel: string;
    /**
     * @generated from protobuf field: string button_label = 7;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: repeated string text = 8;
     */
    text: string[];
    /**
     * @generated from protobuf field: string jump_url = 9;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: int64 lottery_type = 10;
     */
    lotteryType: bigint;
    /**
     * @generated from protobuf field: string elastic_title = 11;
     */
    elasticTitle: string;
    /**
     * @generated from protobuf field: live.BenefitLabel benefit_label = 12;
     */
    benefitLabel?: BenefitLabel;
}
/**
 * @generated from protobuf message live.WinLotteryAlert
 */
export interface WinLotteryAlert {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string button_label = 3;
     */
    buttonLabel: string;
}
/**
 * @generated from protobuf message live.WinLotteryInfo
 */
export interface WinLotteryInfo {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string img = 3;
     */
    img: string;
    /**
     * @generated from protobuf field: string button_label = 4;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: string win_record_id = 5;
     */
    winRecordId: string;
    /**
     * @generated from protobuf field: string activity_id = 6;
     */
    activityId: string;
    /**
     * @generated from protobuf field: bool is_addressed = 7;
     */
    isAddressed: boolean;
    /**
     * @generated from protobuf field: live.WinLotteryAlert alert = 8;
     */
    alert?: WinLotteryAlert;
    /**
     * @generated from protobuf field: bool is_win = 9;
     */
    isWin: boolean;
    /**
     * @generated from protobuf field: string jump_url = 10;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: int64 product_id = 11;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: repeated int64 activity_price = 12;
     */
    activityPrice: bigint[];
    /**
     * @generated from protobuf field: int64 buy_time = 13;
     */
    buyTime: bigint;
    /**
     * @generated from protobuf field: int64 lottery_type = 14;
     */
    lotteryType: bigint;
    /**
     * @generated from protobuf field: string product_id_str = 15;
     */
    productIdStr: string;
    /**
     * @generated from protobuf field: live.LotteryInfoList lottery_info_list = 16;
     */
    lotteryInfoList?: LotteryInfoList;
}
/**
 * @generated from protobuf message live.CouponActivityInfoMessage
 */
export interface CouponActivityInfoMessage {
    /**
     * @generated from protobuf field: int64 activity_type = 1;
     */
    activityType: bigint;
    /**
     * @generated from protobuf field: string before_text = 2;
     */
    beforeText: string;
    /**
     * @generated from protobuf field: string before_button = 3;
     */
    beforeButton: string;
    /**
     * @generated from protobuf field: string after_text = 4;
     */
    afterText: string;
    /**
     * @generated from protobuf field: string after_button = 5;
     */
    afterButton: string;
}
/**
 * @generated from protobuf message live.CouponMetaInfoMessage
 */
export interface CouponMetaInfoMessage {
    /**
     * @generated from protobuf field: string coupon_meta_id = 1;
     */
    couponMetaId: string;
    /**
     * @generated from protobuf field: string start_time = 2;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string expire_time = 3;
     */
    expireTime: string;
    /**
     * @generated from protobuf field: int64 period_type = 4;
     */
    periodType: bigint;
    /**
     * @generated from protobuf field: int64 valid_period = 5;
     */
    validPeriod: bigint;
    /**
     * @generated from protobuf field: string start_apply_time = 6;
     */
    startApplyTime: string;
    /**
     * @generated from protobuf field: string end_apply_time = 7;
     */
    endApplyTime: string;
    /**
     * @generated from protobuf field: string coupon_name = 8;
     */
    couponName: string;
    /**
     * @generated from protobuf field: string url = 9;
     */
    url: string;
    /**
     * @generated from protobuf field: int64 threshold = 10;
     */
    threshold: bigint;
    /**
     * @generated from protobuf field: int64 credit = 11;
     */
    credit: bigint;
    /**
     * @generated from protobuf field: int64 max_apply_times = 12;
     */
    maxApplyTimes: bigint;
    /**
     * @generated from protobuf field: int64 type = 13;
     */
    type: bigint;
    /**
     * @generated from protobuf field: string type_detail = 14;
     */
    typeDetail: string;
    /**
     * @generated from protobuf field: double discount = 15;
     */
    discount: number;
    /**
     * @generated from protobuf field: string shop_id = 16;
     */
    shopId: string;
    /**
     * @generated from protobuf field: int64 pay_type = 17;
     */
    payType: bigint;
    /**
     * @generated from protobuf field: int64 max_discount_limit = 18;
     */
    maxDiscountLimit: bigint;
    /**
     * @generated from protobuf field: string shop_name = 19;
     */
    shopName: string;
    /**
     * @generated from protobuf field: string type_string = 20;
     */
    typeString: string;
    /**
     * @generated from protobuf field: string what_coupon = 21;
     */
    whatCoupon: string;
    /**
     * @generated from protobuf field: string coupon_string = 22;
     */
    couponString: string;
    /**
     * @generated from protobuf field: int64 channel_id = 23;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 left_amount = 24;
     */
    leftAmount: bigint;
    /**
     * @generated from protobuf field: int64 has_applied = 25;
     */
    hasApplied: bigint;
    /**
     * @generated from protobuf field: int64 status = 26;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string shop_logo = 27;
     */
    shopLogo: string;
    /**
     * @generated from protobuf field: int64 is_show = 28;
     */
    isShow: bigint;
    /**
     * @generated from protobuf field: int64 total_amount = 29;
     */
    totalAmount: bigint;
    /**
     * @generated from protobuf field: int32 live_coupon_status = 30;
     */
    liveCouponStatus: number;
    /**
     * @generated from protobuf field: int32 coupon_source = 31;
     */
    couponSource: number;
    /**
     * @generated from protobuf field: int64 user_apply_times = 32;
     */
    userApplyTimes: bigint;
    /**
     * @generated from protobuf field: bool can_continue_apply = 33;
     */
    canContinueApply: boolean;
    /**
     * @generated from protobuf field: bool coupon_status = 34;
     */
    couponStatus: boolean;
    /**
     * @generated from protobuf field: bool coupon_reset = 35;
     */
    couponReset: boolean;
    /**
     * @generated from protobuf field: int64 start_time_timestamp = 36;
     */
    startTimeTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 expire_time_timestamp = 37;
     */
    expireTimeTimestamp: bigint;
    /**
     * @generated from protobuf field: string avatar = 38;
     */
    avatar: string;
    /**
     * @generated from protobuf field: int64 kol_uid = 39;
     */
    kolUid: bigint;
    /**
     * @generated from protobuf field: repeated int64 product_ids = 40;
     */
    productIds: bigint[];
    /**
     * @generated from protobuf field: int64 platform_sub_type = 41;
     */
    platformSubType: bigint;
    /**
     * @generated from protobuf field: bool has_available_goods = 42;
     */
    hasAvailableGoods: boolean;
    /**
     * @generated from protobuf field: string type_title = 43;
     */
    typeTitle: string;
    /**
     * @generated from protobuf field: int64 kol_user_tag = 45;
     */
    kolUserTag: bigint;
    /**
     * @generated from protobuf field: string type_icon = 46;
     */
    typeIcon: string;
    /**
     * @generated from protobuf field: int64 type_icon_width = 47;
     */
    typeIconWidth: bigint;
    /**
     * @generated from protobuf field: int64 type_icon_height = 48;
     */
    typeIconHeight: bigint;
    /**
     * @generated from protobuf field: string coupon_category = 49;
     */
    couponCategory: string;
    /**
     * @generated from protobuf field: string extra_data = 50;
     */
    extraData: string;
}
/**
 * @generated from protobuf message live.CouponInfo
 */
export interface CouponInfo {
    /**
     * @generated from protobuf field: int64 meta_id = 1;
     */
    metaId: bigint;
    /**
     * @generated from protobuf field: int64 server_time = 2;
     */
    serverTime: bigint;
    /**
     * @generated from protobuf field: int64 countdown = 3;
     */
    countdown: bigint;
    /**
     * @generated from protobuf field: string activity_json_str = 4;
     */
    activityJsonStr: string;
    /**
     * @generated from protobuf field: int32 coupon_type = 5;
     */
    couponType: number;
    /**
     * @generated from protobuf field: live.CouponActivityInfoMessage activity_info = 6;
     */
    activityInfo?: CouponActivityInfoMessage;
    /**
     * @generated from protobuf field: live.CouponMetaInfoMessage coupon_meta = 7;
     */
    couponMeta?: CouponMetaInfoMessage;
    /**
     * @generated from protobuf field: string meta_id_str = 8;
     */
    metaIdStr: string;
}
/**
 * @generated from protobuf message live.BrowseInfo
 */
export interface BrowseInfo {
    /**
     * @generated from protobuf field: int32 duration = 1;
     */
    duration: number;
    /**
     * @generated from protobuf field: string task_index = 2;
     */
    taskIndex: string;
    /**
     * @generated from protobuf field: int32 stop_duration = 3;
     */
    stopDuration: number;
}
/**
 * @generated from protobuf message live.TaskInfo
 */
export interface TaskInfo {
    /**
     * @generated from protobuf field: int32 task_type = 1;
     */
    taskType: number;
    /**
     * @generated from protobuf field: int32 task_status = 2;
     */
    taskStatus: number;
    /**
     * @generated from protobuf field: string report_event = 3;
     */
    reportEvent: string;
    /**
     * @generated from protobuf field: live.BrowseInfo browse_task_info = 4;
     */
    browseTaskInfo?: BrowseInfo;
}
/**
 * @generated from protobuf message live.LiveMarketingMessage
 */
export interface LiveMarketingMessage {
    /**
     * @generated from protobuf field: int32 msg_type = 1;
     */
    msgType: number;
    /**
     * @generated from protobuf field: repeated int64 product_ids = 2;
     */
    productIds: bigint[];
    /**
     * @generated from protobuf field: live.AuctionSuccess auction_success = 3;
     */
    auctionSuccess?: AuctionSuccess;
    /**
     * @generated from protobuf field: live.AuctionInfo auction_info = 4;
     */
    auctionInfo?: AuctionInfo;
    /**
     * @generated from protobuf field: live.RedpackActivityInfo redpack_activity_info = 5;
     */
    redpackActivityInfo?: RedpackActivityInfo;
    /**
     * @generated from protobuf field: live.WinLotteryInfo win_lotteryinfo = 6;
     */
    winLotteryinfo?: WinLotteryInfo;
    /**
     * @generated from protobuf field: live.LotteryInfoList lottery_info_list = 7;
     */
    lotteryInfoList?: LotteryInfoList;
    /**
     * @generated from protobuf field: live.CouponInfo coupon_info = 8;
     */
    couponInfo?: CouponInfo;
    /**
     * @generated from protobuf field: live.TaskInfo task_info = 9;
     */
    taskInfo?: TaskInfo;
}
/**
 * @generated from protobuf message live.PopProductInfo
 */
export interface PopProductInfo {
    /**
     * @generated from protobuf field: int64 promotion_id = 1;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: int64 product_id = 2;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int64 explain_time = 3;
     */
    explainTime: bigint;
}
/**
 * @generated from protobuf message live.LivePopMessage
 */
export interface LivePopMessage {
    /**
     * @generated from protobuf field: int32 msg_type = 1;
     */
    msgType: number;
    /**
     * @generated from protobuf field: int32 bubble_type = 2;
     */
    bubbleType: number;
    /**
     * @generated from protobuf field: int64 promotion_id = 3;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: live.HotAtmosphere hot_atmosphere = 4;
     */
    hotAtmosphere?: HotAtmosphere;
    /**
     * @generated from protobuf field: live.DelayParam delay_param = 5;
     */
    delayParam?: DelayParam;
    /**
     * @generated from protobuf field: live.PopProductInfo product_info = 6;
     */
    productInfo?: PopProductInfo;
}
/**
 * @generated from protobuf message live.CategoryRefreshMessage
 */
export interface CategoryRefreshMessage {
    /**
     * @generated from protobuf field: repeated live.CategoryRefreshMessage.CategoryInfo category_info = 1;
     */
    categoryInfo: CategoryRefreshMessage_CategoryInfo[];
    /**
     * @generated from protobuf field: int64 update_ts = 2;
     */
    updateTs: bigint;
    /**
     * @generated from protobuf field: string update_toast = 3;
     */
    updateToast: string;
}
/**
 * @generated from protobuf message live.CategoryRefreshMessage.CategoryInfo
 */
export interface CategoryRefreshMessage_CategoryInfo {
    /**
     * @generated from protobuf field: string unique_index = 1;
     */
    uniqueIndex: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 category_id = 3;
     */
    categoryId: bigint;
    /**
     * @generated from protobuf field: int64 category_type = 4;
     */
    categoryType: bigint;
    /**
     * @generated from protobuf field: bool need_reload = 5;
     */
    needReload: boolean;
}
/**
 * @generated from protobuf message live.ProductListRefreshMessage
 */
export interface ProductListRefreshMessage {
    /**
     * @generated from protobuf field: int64 update_ts = 1;
     */
    updateTs: bigint;
    /**
     * @generated from protobuf field: string update_toast = 2;
     */
    updateToast: string;
}
/**
 * @generated from protobuf message live.ProductListUpdateMessage
 */
export interface ProductListUpdateMessage {
    /**
     * @generated from protobuf field: int64 update_timestamp = 1;
     */
    updateTimestamp: bigint;
    /**
     * @generated from protobuf field: string update_toast = 2;
     */
    updateToast: string;
    /**
     * @generated from protobuf field: repeated live.ProductInfo update_product_info = 3;
     */
    updateProductInfo: ProductInfo[];
    /**
     * @generated from protobuf field: int64 total = 4;
     */
    total: bigint;
    /**
     * @generated from protobuf field: repeated live.CategoryInfo update_category_info = 5;
     */
    updateCategoryInfo: CategoryInfo[];
    /**
     * @generated from protobuf field: int32 msg_type = 6;
     */
    msgType: number;
}
/**
 * @generated from protobuf message live.ProductInfo
 */
export interface ProductInfo {
    /**
     * @generated from protobuf field: int64 promotion_id = 1;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: int32 index = 2;
     */
    index: number;
    /**
     * @generated from protobuf field: repeated int64 target_flash_uids = 3;
     */
    targetFlashUids: bigint[];
    /**
     * @generated from protobuf field: int64 explain_type = 4;
     */
    explainType: bigint;
}
/**
 * @generated from protobuf message live.CategoryInfo
 */
export interface CategoryInfo {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string promotion_ids = 3;
     */
    promotionIds: string[];
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: string unique_index = 5;
     */
    uniqueIndex: string;
}
/**
 * @generated from protobuf message live.ProductRefreshMessage
 */
export interface ProductRefreshMessage {
    /**
     * @generated from protobuf field: int64 promotion_id = 1;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: int64 product_id = 2;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int64 channel_type = 3;
     */
    channelType: bigint;
    /**
     * @generated from protobuf field: int64 channel_id = 4;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 update_ts = 5;
     */
    updateTs: bigint;
    /**
     * @generated from protobuf field: int32 action_type = 6;
     */
    actionType: number;
    /**
     * @generated from protobuf field: live.ProductRefreshMessage.ProductInfo product_info = 8;
     */
    productInfo?: ProductRefreshMessage_ProductInfo;
}
/**
 * @generated from protobuf message live.ProductRefreshMessage.ProductInfo
 */
export interface ProductRefreshMessage_ProductInfo {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string cover = 2;
     */
    cover: string;
}
/**
 * @generated from protobuf message live.ProductUpdateMessage
 */
export interface ProductUpdateMessage {
    /**
     * @generated from protobuf field: repeated int64 updated_product_ids = 1;
     */
    updatedProductIds: bigint[];
    /**
     * @generated from protobuf field: int32 update_type = 2;
     */
    updateType: number;
    /**
     * @generated from protobuf field: int64 promotion_id = 3;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: live.UpdatedProductInfo updated_product_info = 4;
     */
    updatedProductInfo?: UpdatedProductInfo;
    /**
     * @generated from protobuf field: bool sold_out = 5;
     */
    soldOut: boolean;
    /**
     * @generated from protobuf field: live.UpdatedCouponInfo updated_coupon_info = 6;
     */
    updatedCouponInfo?: UpdatedCouponInfo;
    /**
     * @generated from protobuf field: live.UpdatedCampaignInfo updated_campaign_info = 7;
     */
    updatedCampaignInfo?: UpdatedCampaignInfo;
    /**
     * @generated from protobuf field: int64 update_timestamp = 8;
     */
    updateTimestamp: bigint;
    /**
     * @generated from protobuf field: live.UpdatedSkuInfo update_sku_info = 9;
     */
    updateSkuInfo?: UpdatedSkuInfo;
    /**
     * @generated from protobuf field: live.UpdatedCommentaryVideoInfo updated_commentary_video_info = 10;
     */
    updatedCommentaryVideoInfo?: UpdatedCommentaryVideoInfo;
    /**
     * @generated from protobuf field: live.UpdatedGroupInfo updated_group_info = 11;
     */
    updatedGroupInfo?: UpdatedGroupInfo;
    /**
     * @generated from protobuf field: live.HotAtmosphere hot_atmosphere = 12;
     */
    hotAtmosphere?: HotAtmosphere;
    /**
     * @generated from protobuf field: bool can_sold = 13;
     */
    canSold: boolean;
}
/**
 * @generated from protobuf message live.UpdatedProductInfo
 */
export interface UpdatedProductInfo {
    /**
     * @generated from protobuf field: int64 price = 1;
     */
    price: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string cover = 3;
     */
    cover: string;
    /**
     * @generated from protobuf field: int64 status = 4;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string pop_upicon = 5;
     */
    popUpicon: string;
}
/**
 * @generated from protobuf message live.UpdatedCouponInfo
 */
export interface UpdatedCouponInfo {
    /**
     * @generated from protobuf field: string tag = 1;
     */
    tag: string;
    /**
     * @generated from protobuf field: string coupon_url = 2;
     */
    couponUrl: string;
    /**
     * @generated from protobuf field: string coupon_applet = 3;
     */
    couponApplet: string;
    /**
     * @generated from protobuf field: bool is_valid = 4;
     */
    isValid: boolean;
    /**
     * @generated from protobuf field: string coupon_meta_id = 5;
     */
    couponMetaId: string;
}
/**
 * @generated from protobuf message live.UpdatedCampaignInfo
 */
export interface UpdatedCampaignInfo {
    /**
     * @generated from protobuf field: bool is_valid = 1;
     */
    isValid: boolean;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: string price = 3;
     */
    price: string;
    /**
     * @generated from protobuf field: string pic = 4;
     */
    pic: string;
    /**
     * @generated from protobuf field: string start_time = 5;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string end_time = 6;
     */
    endTime: string;
    /**
     * @generated from protobuf field: string time_start_label = 7;
     */
    timeStartLabel: string;
    /**
     * @generated from protobuf field: string time_end_label = 8;
     */
    timeEndLabel: string;
    /**
     * @generated from protobuf field: string user_limit = 9;
     */
    userLimit: string;
    /**
     * @generated from protobuf field: string is_preheat = 10;
     */
    isPreheat: string;
    /**
     * @generated from protobuf field: string campaign_id = 11;
     */
    campaignId: string;
}
/**
 * @generated from protobuf message live.UpdatedSkuInfo
 */
export interface UpdatedSkuInfo {
    /**
     * @generated from protobuf field: int64 min_price = 2;
     */
    minPrice: bigint;
    /**
     * @generated from protobuf field: int64 max_price = 3;
     */
    maxPrice: bigint;
    /**
     * @generated from protobuf field: int64 unuse_min_price = 4;
     */
    unuseMinPrice: bigint;
    /**
     * @generated from protobuf field: int64 coupon_price = 5;
     */
    couponPrice: bigint;
}
/**
 * @generated from protobuf message live.SkuInfo
 */
export interface SkuInfo {
    /**
     * @generated from protobuf field: string sku_id = 1;
     */
    skuId: string;
    /**
     * @generated from protobuf field: int64 stock_num = 2;
     */
    stockNum: bigint;
    /**
     * @generated from protobuf field: int64 price = 3;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int64 coupon_price = 4;
     */
    couponPrice: bigint;
}
/**
 * @generated from protobuf message live.UpdatedGroupInfo
 */
export interface UpdatedGroupInfo {
    /**
     * @generated from protobuf field: repeated string avatar_list = 1;
     */
    avatarList: string[];
    /**
     * @generated from protobuf field: int64 joined = 2;
     */
    joined: bigint;
    /**
     * @generated from protobuf field: int64 group_size = 3;
     */
    groupSize: bigint;
    /**
     * @generated from protobuf field: int64 persent = 4;
     */
    persent: bigint;
}
/**
 * @generated from protobuf message live.UpdatedCommentaryVideoInfo
 */
export interface UpdatedCommentaryVideoInfo {
    /**
     * @generated from protobuf field: int64 action = 1;
     */
    action: bigint;
}
/**
 * @generated from protobuf message live.LiveSellerMessage
 */
export interface LiveSellerMessage {
    /**
     * @generated from protobuf field: int32 msg_type = 1;
     */
    msgType: number;
    /**
     * @generated from protobuf field: live.AuthorOrderLimitInfo author_order_limit_info = 2;
     */
    authorOrderLimitInfo?: AuthorOrderLimitInfo;
    /**
     * @generated from protobuf field: repeated live.StatsData list_room_stats_data = 3;
     */
    listRoomStatsData: StatsData[];
}
/**
 * @generated from protobuf message live.AuthorOrderLimitInfo
 */
export interface AuthorOrderLimitInfo {
    /**
     * @generated from protobuf field: live.ICON icon = 1;
     */
    icon?: ICON;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string button = 4;
     */
    button: string;
}
/**
 * @generated from protobuf message live.ICON
 */
export interface ICON {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: int32 width = 2;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 3;
     */
    height: number;
}
/**
 * @generated from protobuf message live.StatsData
 */
export interface StatsData {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
    /**
     * @generated from protobuf field: string unit = 2;
     */
    unit: string;
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class LiveCommonMessage$Type extends MessageType<LiveCommonMessage> {
    constructor() {
        super("live.LiveCommonMessage", [
            { no: 1, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "screenshot_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_tag_offline_info", kind: "message", T: () => RoomTagOfflineInfo },
            { no: 4, name: "filter_switch_change_data", kind: "message", T: () => FilterSwitchChangeData },
            { no: 5, name: "gmv_data", kind: "message", T: () => GMVData }
        ]);
    }
    create(value?: PartialMessage<LiveCommonMessage>): LiveCommonMessage {
        const message = { msgType: 0, screenshotTimestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveCommonMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveCommonMessage): LiveCommonMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 msg_type */ 1:
                    message.msgType = reader.int32();
                    break;
                case /* int64 screenshot_timestamp */ 2:
                    message.screenshotTimestamp = reader.int64().toBigInt();
                    break;
                case /* live.RoomTagOfflineInfo room_tag_offline_info */ 3:
                    message.roomTagOfflineInfo = RoomTagOfflineInfo.internalBinaryRead(reader, reader.uint32(), options, message.roomTagOfflineInfo);
                    break;
                case /* live.FilterSwitchChangeData filter_switch_change_data */ 4:
                    message.filterSwitchChangeData = FilterSwitchChangeData.internalBinaryRead(reader, reader.uint32(), options, message.filterSwitchChangeData);
                    break;
                case /* live.GMVData gmv_data */ 5:
                    message.gmvData = GMVData.internalBinaryRead(reader, reader.uint32(), options, message.gmvData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveCommonMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 msg_type = 1; */
        if (message.msgType !== 0)
            writer.tag(1, WireType.Varint).int32(message.msgType);
        /* int64 screenshot_timestamp = 2; */
        if (message.screenshotTimestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.screenshotTimestamp);
        /* live.RoomTagOfflineInfo room_tag_offline_info = 3; */
        if (message.roomTagOfflineInfo)
            RoomTagOfflineInfo.internalBinaryWrite(message.roomTagOfflineInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* live.FilterSwitchChangeData filter_switch_change_data = 4; */
        if (message.filterSwitchChangeData)
            FilterSwitchChangeData.internalBinaryWrite(message.filterSwitchChangeData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* live.GMVData gmv_data = 5; */
        if (message.gmvData)
            GMVData.internalBinaryWrite(message.gmvData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.LiveCommonMessage
 */
export const LiveCommonMessage = new LiveCommonMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomTagOfflineInfo$Type extends MessageType<RoomTagOfflineInfo> {
    constructor() {
        super("live.RoomTagOfflineInfo", [
            { no: 1, name: "tag_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomTagOfflineInfo>): RoomTagOfflineInfo {
        const message = { tagType: 0n, userToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomTagOfflineInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomTagOfflineInfo): RoomTagOfflineInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tag_type */ 1:
                    message.tagType = reader.int64().toBigInt();
                    break;
                case /* string user_toast */ 2:
                    message.userToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomTagOfflineInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 tag_type = 1; */
        if (message.tagType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.tagType);
        /* string user_toast = 2; */
        if (message.userToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.RoomTagOfflineInfo
 */
export const RoomTagOfflineInfo = new RoomTagOfflineInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpIcon$Type extends MessageType<UpIcon> {
    constructor() {
        super("live.UpIcon", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "up_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "up_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public_screen_notice", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpIcon>): UpIcon {
        const message = { name: "", upIcon: "", upDesc: "", publicScreenNotice: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpIcon): UpIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string up_icon */ 2:
                    message.upIcon = reader.string();
                    break;
                case /* string up_desc */ 3:
                    message.upDesc = reader.string();
                    break;
                case /* string public_screen_notice */ 4:
                    message.publicScreenNotice = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string up_icon = 2; */
        if (message.upIcon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.upIcon);
        /* string up_desc = 3; */
        if (message.upDesc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.upDesc);
        /* string public_screen_notice = 4; */
        if (message.publicScreenNotice !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.publicScreenNotice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.UpIcon
 */
export const UpIcon = new UpIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterSwitchChangeData$Type extends MessageType<FilterSwitchChangeData> {
    constructor() {
        super("live.FilterSwitchChangeData", [
            { no: 1, name: "enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "up_icon", kind: "message", T: () => UpIcon }
        ]);
    }
    create(value?: PartialMessage<FilterSwitchChangeData>): FilterSwitchChangeData {
        const message = { enable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FilterSwitchChangeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterSwitchChangeData): FilterSwitchChangeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable */ 1:
                    message.enable = reader.bool();
                    break;
                case /* live.UpIcon up_icon */ 2:
                    message.upIcon = UpIcon.internalBinaryRead(reader, reader.uint32(), options, message.upIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterSwitchChangeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable = 1; */
        if (message.enable !== false)
            writer.tag(1, WireType.Varint).bool(message.enable);
        /* live.UpIcon up_icon = 2; */
        if (message.upIcon)
            UpIcon.internalBinaryWrite(message.upIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.FilterSwitchChangeData
 */
export const FilterSwitchChangeData = new FilterSwitchChangeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMVData$Type extends MessageType<GMVData> {
    constructor() {
        super("live.GMVData", [
            { no: 1, name: "gmv", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GMVData>): GMVData {
        const message = { gmv: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMVData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMVData): GMVData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string gmv */ 1:
                    message.gmv = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GMVData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string gmv = 1; */
        if (message.gmv !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gmv);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.GMVData
 */
export const GMVData = new GMVData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelayParam$Type extends MessageType<DelayParam> {
    constructor() {
        super("live.DelayParam", [
            { no: 1, name: "delay_strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "min_delay_ms", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "max_delay_ms", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DelayParam>): DelayParam {
        const message = { delayStrategy: 0, minDelayMs: 0, maxDelayMs: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DelayParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelayParam): DelayParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 delay_strategy */ 1:
                    message.delayStrategy = reader.int32();
                    break;
                case /* int32 min_delay_ms */ 2:
                    message.minDelayMs = reader.int32();
                    break;
                case /* int32 max_delay_ms */ 3:
                    message.maxDelayMs = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DelayParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 delay_strategy = 1; */
        if (message.delayStrategy !== 0)
            writer.tag(1, WireType.Varint).int32(message.delayStrategy);
        /* int32 min_delay_ms = 2; */
        if (message.minDelayMs !== 0)
            writer.tag(2, WireType.Varint).int32(message.minDelayMs);
        /* int32 max_delay_ms = 3; */
        if (message.maxDelayMs !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxDelayMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.DelayParam
 */
export const DelayParam = new DelayParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotAtmosphere$Type extends MessageType<HotAtmosphere> {
    constructor() {
        super("live.HotAtmosphere", [
            { no: 1, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sale_num", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "num", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "border_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "left_margin", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "ui_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "bg_colors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "border_colors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "top_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HotAtmosphere>): HotAtmosphere {
        const message = { img: "", saleNum: "", type: 0n, num: "", bgColor: "", borderColor: "", leftMargin: 0n, uiType: 0n, bgColors: [], borderColors: [], topImg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotAtmosphere>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotAtmosphere): HotAtmosphere {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string img */ 1:
                    message.img = reader.string();
                    break;
                case /* string sale_num */ 2:
                    message.saleNum = reader.string();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* string num */ 4:
                    message.num = reader.string();
                    break;
                case /* string bg_color */ 5:
                    message.bgColor = reader.string();
                    break;
                case /* string border_color */ 6:
                    message.borderColor = reader.string();
                    break;
                case /* int64 left_margin */ 7:
                    message.leftMargin = reader.int64().toBigInt();
                    break;
                case /* int64 ui_type */ 8:
                    message.uiType = reader.int64().toBigInt();
                    break;
                case /* repeated string bg_colors */ 9:
                    message.bgColors.push(reader.string());
                    break;
                case /* repeated string border_colors */ 10:
                    message.borderColors.push(reader.string());
                    break;
                case /* string top_img */ 11:
                    message.topImg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotAtmosphere, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string img = 1; */
        if (message.img !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.img);
        /* string sale_num = 2; */
        if (message.saleNum !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.saleNum);
        /* int64 type = 3; */
        if (message.type !== 0n)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* string num = 4; */
        if (message.num !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.num);
        /* string bg_color = 5; */
        if (message.bgColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColor);
        /* string border_color = 6; */
        if (message.borderColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.borderColor);
        /* int64 left_margin = 7; */
        if (message.leftMargin !== 0n)
            writer.tag(7, WireType.Varint).int64(message.leftMargin);
        /* int64 ui_type = 8; */
        if (message.uiType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.uiType);
        /* repeated string bg_colors = 9; */
        for (let i = 0; i < message.bgColors.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.bgColors[i]);
        /* repeated string border_colors = 10; */
        for (let i = 0; i < message.borderColors.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.borderColors[i]);
        /* string top_img = 11; */
        if (message.topImg !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.topImg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.HotAtmosphere
 */
export const HotAtmosphere = new HotAtmosphere$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BarrageBuyInfo$Type extends MessageType<BarrageBuyInfo> {
    constructor() {
        super("live.BarrageBuyInfo", [
            { no: 1, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "purchase_cnt", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BarrageBuyInfo>): BarrageBuyInfo {
        const message = { nickName: "", purchaseCnt: 0n, text: "", icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BarrageBuyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BarrageBuyInfo): BarrageBuyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nick_name */ 1:
                    message.nickName = reader.string();
                    break;
                case /* int64 purchase_cnt */ 2:
                    message.purchaseCnt = reader.int64().toBigInt();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BarrageBuyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nick_name = 1; */
        if (message.nickName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nickName);
        /* int64 purchase_cnt = 2; */
        if (message.purchaseCnt !== 0n)
            writer.tag(2, WireType.Varint).int64(message.purchaseCnt);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.BarrageBuyInfo
 */
export const BarrageBuyInfo = new BarrageBuyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionData$Type extends MessageType<InteractionData> {
    constructor() {
        super("live.InteractionData", [
            { no: 1, name: "full", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "contents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InteractionContent }
        ]);
    }
    create(value?: PartialMessage<InteractionData>): InteractionData {
        const message = { full: false, contents: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionData): InteractionData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool full */ 1:
                    message.full = reader.bool();
                    break;
                case /* repeated live.InteractionContent contents */ 2:
                    message.contents.push(InteractionContent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool full = 1; */
        if (message.full !== false)
            writer.tag(1, WireType.Varint).bool(message.full);
        /* repeated live.InteractionContent contents = 2; */
        for (let i = 0; i < message.contents.length; i++)
            InteractionContent.internalBinaryWrite(message.contents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.InteractionData
 */
export const InteractionData = new InteractionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionContent$Type extends MessageType<InteractionContent> {
    constructor() {
        super("live.InteractionContent", [
            { no: 1, name: "check", kind: "message", T: () => InteractionContentCheck },
            { no: 2, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "loop_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InteractionElement }
        ]);
    }
    create(value?: PartialMessage<InteractionContent>): InteractionContent {
        const message = { priority: 0, loopCount: 0, content: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionContent): InteractionContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* live.InteractionContentCheck check */ 1:
                    message.check = InteractionContentCheck.internalBinaryRead(reader, reader.uint32(), options, message.check);
                    break;
                case /* int32 priority */ 2:
                    message.priority = reader.int32();
                    break;
                case /* int32 loop_count */ 3:
                    message.loopCount = reader.int32();
                    break;
                case /* repeated live.InteractionElement content */ 4:
                    message.content.push(InteractionElement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* live.InteractionContentCheck check = 1; */
        if (message.check)
            InteractionContentCheck.internalBinaryWrite(message.check, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 priority = 2; */
        if (message.priority !== 0)
            writer.tag(2, WireType.Varint).int32(message.priority);
        /* int32 loop_count = 3; */
        if (message.loopCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.loopCount);
        /* repeated live.InteractionElement content = 4; */
        for (let i = 0; i < message.content.length; i++)
            InteractionElement.internalBinaryWrite(message.content[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.InteractionContent
 */
export const InteractionContent = new InteractionContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionContentCheck$Type extends MessageType<InteractionContentCheck> {
    constructor() {
        super("live.InteractionContentCheck", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractionContentCheck>): InteractionContentCheck {
        const message = { productId: 0n, index: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionContentCheck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionContentCheck): InteractionContentCheck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int32 index */ 2:
                    message.index = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionContentCheck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        /* int32 index = 2; */
        if (message.index !== 0)
            writer.tag(2, WireType.Varint).int32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.InteractionContentCheck
 */
export const InteractionContentCheck = new InteractionContentCheck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionElement$Type extends MessageType<InteractionElement> {
    constructor() {
        super("live.InteractionElement", [
            { no: 1, name: "element_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "avatars", kind: "message", T: () => InteractionAvatar },
            { no: 5, name: "blank_width", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractionElement>): InteractionElement {
        const message = { elementType: 0, text: "", textColor: "", blankWidth: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionElement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionElement): InteractionElement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 element_type */ 1:
                    message.elementType = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 3:
                    message.textColor = reader.string();
                    break;
                case /* live.InteractionAvatar avatars */ 4:
                    message.avatars = InteractionAvatar.internalBinaryRead(reader, reader.uint32(), options, message.avatars);
                    break;
                case /* int32 blank_width */ 5:
                    message.blankWidth = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionElement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 element_type = 1; */
        if (message.elementType !== 0)
            writer.tag(1, WireType.Varint).int32(message.elementType);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string text_color = 3; */
        if (message.textColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColor);
        /* live.InteractionAvatar avatars = 4; */
        if (message.avatars)
            InteractionAvatar.internalBinaryWrite(message.avatars, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 blank_width = 5; */
        if (message.blankWidth !== 0)
            writer.tag(5, WireType.Varint).int32(message.blankWidth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.InteractionElement
 */
export const InteractionElement = new InteractionElement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionAvatar$Type extends MessageType<InteractionAvatar> {
    constructor() {
        super("live.InteractionAvatar", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractionAvatar>): InteractionAvatar {
        const message = { urlList: [], width: 0, height: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionAvatar): InteractionAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* int32 width */ 2:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 3:
                    message.height = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* int32 width = 2; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).int32(message.width);
        /* int32 height = 3; */
        if (message.height !== 0)
            writer.tag(3, WireType.Varint).int32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.InteractionAvatar
 */
export const InteractionAvatar = new InteractionAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveInteractionMessage$Type extends MessageType<LiveInteractionMessage> {
    constructor() {
        super("live.LiveInteractionMessage", [
            { no: 1, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "barrage_buy_info", kind: "message", T: () => BarrageBuyInfo },
            { no: 3, name: "interaction_data", kind: "message", T: () => InteractionData }
        ]);
    }
    create(value?: PartialMessage<LiveInteractionMessage>): LiveInteractionMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveInteractionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveInteractionMessage): LiveInteractionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 msg_type */ 1:
                    message.msgType = reader.int32();
                    break;
                case /* live.BarrageBuyInfo barrage_buy_info */ 2:
                    message.barrageBuyInfo = BarrageBuyInfo.internalBinaryRead(reader, reader.uint32(), options, message.barrageBuyInfo);
                    break;
                case /* live.InteractionData interaction_data */ 3:
                    message.interactionData = InteractionData.internalBinaryRead(reader, reader.uint32(), options, message.interactionData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveInteractionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 msg_type = 1; */
        if (message.msgType !== 0)
            writer.tag(1, WireType.Varint).int32(message.msgType);
        /* live.BarrageBuyInfo barrage_buy_info = 2; */
        if (message.barrageBuyInfo)
            BarrageBuyInfo.internalBinaryWrite(message.barrageBuyInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* live.InteractionData interaction_data = 3; */
        if (message.interactionData)
            InteractionData.internalBinaryWrite(message.interactionData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.LiveInteractionMessage
 */
export const LiveInteractionMessage = new LiveInteractionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Img$Type extends MessageType<Img> {
    constructor() {
        super("live.Img", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Img>): Img {
        const message = { urlList: [], height: 0, width: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Img>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Img): Img {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* int32 height */ 2:
                    message.height = reader.int32();
                    break;
                case /* int32 width */ 3:
                    message.width = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Img, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* int32 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int32(message.height);
        /* int32 width = 3; */
        if (message.width !== 0)
            writer.tag(3, WireType.Varint).int32(message.width);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.Img
 */
export const Img = new Img$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurrentUserInfo$Type extends MessageType<CurrentUserInfo> {
    constructor() {
        super("live.CurrentUserInfo", [
            { no: 1, name: "user_pic", kind: "message", T: () => Img },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CurrentUserInfo>): CurrentUserInfo {
        const message = { userName: "", userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CurrentUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CurrentUserInfo): CurrentUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* live.Img user_pic */ 1:
                    message.userPic = Img.internalBinaryRead(reader, reader.uint32(), options, message.userPic);
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CurrentUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* live.Img user_pic = 1; */
        if (message.userPic)
            Img.internalBinaryWrite(message.userPic, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.CurrentUserInfo
 */
export const CurrentUserInfo = new CurrentUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IncrPriceList$Type extends MessageType<IncrPriceList> {
    constructor() {
        super("live.IncrPriceList", [
            { no: 1, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "range", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<IncrPriceList>): IncrPriceList {
        const message = { price: 0n, range: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IncrPriceList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IncrPriceList): IncrPriceList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 price */ 1:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int64 range */ 2:
                    message.range = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IncrPriceList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 price = 1; */
        if (message.price !== 0n)
            writer.tag(1, WireType.Varint).int64(message.price);
        /* int64 range = 2; */
        if (message.range !== 0n)
            writer.tag(2, WireType.Varint).int64(message.range);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.IncrPriceList
 */
export const IncrPriceList = new IncrPriceList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionInfo$Type extends MessageType<AuctionInfo> {
    constructor() {
        super("live.AuctionInfo", [
            { no: 1, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "price_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "current_user_info", kind: "message", T: () => CurrentUserInfo },
            { no: 6, name: "incr_price_lists", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IncrPriceList },
            { no: 7, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "biz_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionInfo>): AuctionInfo {
        const message = { price: 0n, priceLabel: "", status: 0, jumpUrl: "", incrPriceLists: [], buttonLabel: "", productId: 0n, endTime: 0n, bizId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionInfo): AuctionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 price */ 1:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* string price_label */ 2:
                    message.priceLabel = reader.string();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string jump_url */ 4:
                    message.jumpUrl = reader.string();
                    break;
                case /* live.CurrentUserInfo current_user_info */ 5:
                    message.currentUserInfo = CurrentUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.currentUserInfo);
                    break;
                case /* repeated live.IncrPriceList incr_price_lists */ 6:
                    message.incrPriceLists.push(IncrPriceList.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string button_label */ 7:
                    message.buttonLabel = reader.string();
                    break;
                case /* int64 product_id */ 8:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 9:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 biz_id */ 10:
                    message.bizId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 price = 1; */
        if (message.price !== 0n)
            writer.tag(1, WireType.Varint).int64(message.price);
        /* string price_label = 2; */
        if (message.priceLabel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.priceLabel);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string jump_url = 4; */
        if (message.jumpUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jumpUrl);
        /* live.CurrentUserInfo current_user_info = 5; */
        if (message.currentUserInfo)
            CurrentUserInfo.internalBinaryWrite(message.currentUserInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated live.IncrPriceList incr_price_lists = 6; */
        for (let i = 0; i < message.incrPriceLists.length; i++)
            IncrPriceList.internalBinaryWrite(message.incrPriceLists[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string button_label = 7; */
        if (message.buttonLabel !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.buttonLabel);
        /* int64 product_id = 8; */
        if (message.productId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.productId);
        /* int64 end_time = 9; */
        if (message.endTime !== 0n)
            writer.tag(9, WireType.Varint).int64(message.endTime);
        /* int32 biz_id = 10; */
        if (message.bizId !== 0)
            writer.tag(10, WireType.Varint).int32(message.bizId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.AuctionInfo
 */
export const AuctionInfo = new AuctionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionSuccess$Type extends MessageType<AuctionSuccess> {
    constructor() {
        super("live.AuctionSuccess", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "product_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "product_pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "charge", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "freight", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "freight_collect", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "left_payment_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "biz_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "deposit_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionSuccess>): AuctionSuccess {
        const message = { title: "", productId: 0n, productName: "", productPic: "", price: 0n, charge: 0n, freight: 0n, total: 0n, buttonLabel: "", jumpUrl: "", freightCollect: "", leftPaymentTime: 0n, bizId: 0, depositInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionSuccess): AuctionSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* int64 product_id */ 2:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* string product_name */ 3:
                    message.productName = reader.string();
                    break;
                case /* string product_pic */ 4:
                    message.productPic = reader.string();
                    break;
                case /* int64 price */ 5:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int64 charge */ 6:
                    message.charge = reader.int64().toBigInt();
                    break;
                case /* int64 freight */ 7:
                    message.freight = reader.int64().toBigInt();
                    break;
                case /* int64 total */ 8:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* string button_label */ 9:
                    message.buttonLabel = reader.string();
                    break;
                case /* string jump_url */ 10:
                    message.jumpUrl = reader.string();
                    break;
                case /* string freight_collect */ 11:
                    message.freightCollect = reader.string();
                    break;
                case /* int64 left_payment_time */ 12:
                    message.leftPaymentTime = reader.int64().toBigInt();
                    break;
                case /* int32 biz_id */ 13:
                    message.bizId = reader.int32();
                    break;
                case /* string deposit_info */ 14:
                    message.depositInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int64 product_id = 2; */
        if (message.productId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.productId);
        /* string product_name = 3; */
        if (message.productName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.productName);
        /* string product_pic = 4; */
        if (message.productPic !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.productPic);
        /* int64 price = 5; */
        if (message.price !== 0n)
            writer.tag(5, WireType.Varint).int64(message.price);
        /* int64 charge = 6; */
        if (message.charge !== 0n)
            writer.tag(6, WireType.Varint).int64(message.charge);
        /* int64 freight = 7; */
        if (message.freight !== 0n)
            writer.tag(7, WireType.Varint).int64(message.freight);
        /* int64 total = 8; */
        if (message.total !== 0n)
            writer.tag(8, WireType.Varint).int64(message.total);
        /* string button_label = 9; */
        if (message.buttonLabel !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.buttonLabel);
        /* string jump_url = 10; */
        if (message.jumpUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.jumpUrl);
        /* string freight_collect = 11; */
        if (message.freightCollect !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.freightCollect);
        /* int64 left_payment_time = 12; */
        if (message.leftPaymentTime !== 0n)
            writer.tag(12, WireType.Varint).int64(message.leftPaymentTime);
        /* int32 biz_id = 13; */
        if (message.bizId !== 0)
            writer.tag(13, WireType.Varint).int32(message.bizId);
        /* string deposit_info = 14; */
        if (message.depositInfo !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.depositInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.AuctionSuccess
 */
export const AuctionSuccess = new AuctionSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedpackActivityInfo$Type extends MessageType<RedpackActivityInfo> {
    constructor() {
        super("live.RedpackActivityInfo", [
            { no: 1, name: "redpack_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "redpack_activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "redpack_activity_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_apply_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end_apply_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "preheat_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "total_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "author_avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "author_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "pendant_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "redpack_front_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "redpack_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "redpack_after_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "redpack_after_belt_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "scatter_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "server_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "max_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "show_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "shorttouch_pendant_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "shorttouch_pendant_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "shorttouch_lottie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RedpackActivityInfo>): RedpackActivityInfo {
        const message = { redpackType: 0n, redpackActivityId: "", redpackActivityName: "", startApplyTime: 0n, endApplyTime: 0n, preheatTime: 0n, totalAmount: 0n, authorAvatarUrl: "", authorName: "", pendantBackgroundUrl: "", redpackFrontBackgroundUrl: "", redpackLabel: "", redpackAfterBackgroundUrl: "", redpackAfterBeltUrl: "", scatterTime: 0n, serverTime: 0n, maxAmount: 0n, showType: 0n, shorttouchPendantBackgroundUrl: "", shorttouchPendantIconUrl: "", shorttouchLottieUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedpackActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedpackActivityInfo): RedpackActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 redpack_type */ 1:
                    message.redpackType = reader.int64().toBigInt();
                    break;
                case /* string redpack_activity_id */ 2:
                    message.redpackActivityId = reader.string();
                    break;
                case /* string redpack_activity_name */ 3:
                    message.redpackActivityName = reader.string();
                    break;
                case /* int64 start_apply_time */ 4:
                    message.startApplyTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_apply_time */ 5:
                    message.endApplyTime = reader.int64().toBigInt();
                    break;
                case /* int64 preheat_time */ 6:
                    message.preheatTime = reader.int64().toBigInt();
                    break;
                case /* int64 total_amount */ 7:
                    message.totalAmount = reader.int64().toBigInt();
                    break;
                case /* string author_avatar_url */ 8:
                    message.authorAvatarUrl = reader.string();
                    break;
                case /* string author_name */ 9:
                    message.authorName = reader.string();
                    break;
                case /* string pendant_background_url */ 10:
                    message.pendantBackgroundUrl = reader.string();
                    break;
                case /* string redpack_front_background_url */ 11:
                    message.redpackFrontBackgroundUrl = reader.string();
                    break;
                case /* string redpack_label */ 12:
                    message.redpackLabel = reader.string();
                    break;
                case /* string redpack_after_background_url */ 13:
                    message.redpackAfterBackgroundUrl = reader.string();
                    break;
                case /* string redpack_after_belt_url */ 14:
                    message.redpackAfterBeltUrl = reader.string();
                    break;
                case /* int64 scatter_time */ 15:
                    message.scatterTime = reader.int64().toBigInt();
                    break;
                case /* int64 server_time */ 16:
                    message.serverTime = reader.int64().toBigInt();
                    break;
                case /* int64 max_amount */ 17:
                    message.maxAmount = reader.int64().toBigInt();
                    break;
                case /* int64 show_type */ 18:
                    message.showType = reader.int64().toBigInt();
                    break;
                case /* string shorttouch_pendant_background_url */ 19:
                    message.shorttouchPendantBackgroundUrl = reader.string();
                    break;
                case /* string shorttouch_pendant_icon_url */ 20:
                    message.shorttouchPendantIconUrl = reader.string();
                    break;
                case /* string shorttouch_lottie_url */ 21:
                    message.shorttouchLottieUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedpackActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 redpack_type = 1; */
        if (message.redpackType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.redpackType);
        /* string redpack_activity_id = 2; */
        if (message.redpackActivityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.redpackActivityId);
        /* string redpack_activity_name = 3; */
        if (message.redpackActivityName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.redpackActivityName);
        /* int64 start_apply_time = 4; */
        if (message.startApplyTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startApplyTime);
        /* int64 end_apply_time = 5; */
        if (message.endApplyTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.endApplyTime);
        /* int64 preheat_time = 6; */
        if (message.preheatTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.preheatTime);
        /* int64 total_amount = 7; */
        if (message.totalAmount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.totalAmount);
        /* string author_avatar_url = 8; */
        if (message.authorAvatarUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.authorAvatarUrl);
        /* string author_name = 9; */
        if (message.authorName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.authorName);
        /* string pendant_background_url = 10; */
        if (message.pendantBackgroundUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.pendantBackgroundUrl);
        /* string redpack_front_background_url = 11; */
        if (message.redpackFrontBackgroundUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.redpackFrontBackgroundUrl);
        /* string redpack_label = 12; */
        if (message.redpackLabel !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.redpackLabel);
        /* string redpack_after_background_url = 13; */
        if (message.redpackAfterBackgroundUrl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.redpackAfterBackgroundUrl);
        /* string redpack_after_belt_url = 14; */
        if (message.redpackAfterBeltUrl !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.redpackAfterBeltUrl);
        /* int64 scatter_time = 15; */
        if (message.scatterTime !== 0n)
            writer.tag(15, WireType.Varint).int64(message.scatterTime);
        /* int64 server_time = 16; */
        if (message.serverTime !== 0n)
            writer.tag(16, WireType.Varint).int64(message.serverTime);
        /* int64 max_amount = 17; */
        if (message.maxAmount !== 0n)
            writer.tag(17, WireType.Varint).int64(message.maxAmount);
        /* int64 show_type = 18; */
        if (message.showType !== 0n)
            writer.tag(18, WireType.Varint).int64(message.showType);
        /* string shorttouch_pendant_background_url = 19; */
        if (message.shorttouchPendantBackgroundUrl !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.shorttouchPendantBackgroundUrl);
        /* string shorttouch_pendant_icon_url = 20; */
        if (message.shorttouchPendantIconUrl !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.shorttouchPendantIconUrl);
        /* string shorttouch_lottie_url = 21; */
        if (message.shorttouchLottieUrl !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.shorttouchLottieUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.RedpackActivityInfo
 */
export const RedpackActivityInfo = new RedpackActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BenefitLabel$Type extends MessageType<BenefitLabel> {
    constructor() {
        super("live.BenefitLabel", [
            { no: 1, name: "LeftText", kind: "scalar", jsonName: "LeftText", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "RightText", kind: "scalar", jsonName: "RightText", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "TextStyle", kind: "scalar", jsonName: "TextStyle", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "ColorStyle", kind: "scalar", jsonName: "ColorStyle", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "DivLine", kind: "scalar", jsonName: "DivLine", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BenefitLabel>): BenefitLabel {
        const message = { leftText: "", rightText: "", textStyle: 0, colorStyle: 0, divLine: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BenefitLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BenefitLabel): BenefitLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string LeftText = 1 [json_name = "LeftText"];*/ 1:
                    message.leftText = reader.string();
                    break;
                case /* string RightText = 2 [json_name = "RightText"];*/ 2:
                    message.rightText = reader.string();
                    break;
                case /* int32 TextStyle = 3 [json_name = "TextStyle"];*/ 3:
                    message.textStyle = reader.int32();
                    break;
                case /* int32 ColorStyle = 4 [json_name = "ColorStyle"];*/ 4:
                    message.colorStyle = reader.int32();
                    break;
                case /* int32 DivLine = 5 [json_name = "DivLine"];*/ 5:
                    message.divLine = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BenefitLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string LeftText = 1 [json_name = "LeftText"]; */
        if (message.leftText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leftText);
        /* string RightText = 2 [json_name = "RightText"]; */
        if (message.rightText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightText);
        /* int32 TextStyle = 3 [json_name = "TextStyle"]; */
        if (message.textStyle !== 0)
            writer.tag(3, WireType.Varint).int32(message.textStyle);
        /* int32 ColorStyle = 4 [json_name = "ColorStyle"]; */
        if (message.colorStyle !== 0)
            writer.tag(4, WireType.Varint).int32(message.colorStyle);
        /* int32 DivLine = 5 [json_name = "DivLine"]; */
        if (message.divLine !== 0)
            writer.tag(5, WireType.Varint).int32(message.divLine);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.BenefitLabel
 */
export const BenefitLabel = new BenefitLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryInfoList$Type extends MessageType<LotteryInfoList> {
    constructor() {
        super("live.LotteryInfoList", [
            { no: 1, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "task_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "open_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_activity_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "win_record_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "result_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "text", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "lottery_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "elastic_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "benefit_label", kind: "message", T: () => BenefitLabel }
        ]);
    }
    create(value?: PartialMessage<LotteryInfoList>): LotteryInfoList {
        const message = { activityId: "", taskType: 0n, openTime: 0n, userActivityStatus: 0n, winRecordId: "", resultLabel: "", buttonLabel: "", text: [], jumpUrl: "", lotteryType: 0n, elasticTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryInfoList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryInfoList): LotteryInfoList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string activity_id */ 1:
                    message.activityId = reader.string();
                    break;
                case /* int64 task_type */ 2:
                    message.taskType = reader.int64().toBigInt();
                    break;
                case /* int64 open_time */ 3:
                    message.openTime = reader.int64().toBigInt();
                    break;
                case /* int64 user_activity_status */ 4:
                    message.userActivityStatus = reader.int64().toBigInt();
                    break;
                case /* string win_record_id */ 5:
                    message.winRecordId = reader.string();
                    break;
                case /* string result_label */ 6:
                    message.resultLabel = reader.string();
                    break;
                case /* string button_label */ 7:
                    message.buttonLabel = reader.string();
                    break;
                case /* repeated string text */ 8:
                    message.text.push(reader.string());
                    break;
                case /* string jump_url */ 9:
                    message.jumpUrl = reader.string();
                    break;
                case /* int64 lottery_type */ 10:
                    message.lotteryType = reader.int64().toBigInt();
                    break;
                case /* string elastic_title */ 11:
                    message.elasticTitle = reader.string();
                    break;
                case /* live.BenefitLabel benefit_label */ 12:
                    message.benefitLabel = BenefitLabel.internalBinaryRead(reader, reader.uint32(), options, message.benefitLabel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryInfoList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string activity_id = 1; */
        if (message.activityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.activityId);
        /* int64 task_type = 2; */
        if (message.taskType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.taskType);
        /* int64 open_time = 3; */
        if (message.openTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.openTime);
        /* int64 user_activity_status = 4; */
        if (message.userActivityStatus !== 0n)
            writer.tag(4, WireType.Varint).int64(message.userActivityStatus);
        /* string win_record_id = 5; */
        if (message.winRecordId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.winRecordId);
        /* string result_label = 6; */
        if (message.resultLabel !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.resultLabel);
        /* string button_label = 7; */
        if (message.buttonLabel !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.buttonLabel);
        /* repeated string text = 8; */
        for (let i = 0; i < message.text.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.text[i]);
        /* string jump_url = 9; */
        if (message.jumpUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.jumpUrl);
        /* int64 lottery_type = 10; */
        if (message.lotteryType !== 0n)
            writer.tag(10, WireType.Varint).int64(message.lotteryType);
        /* string elastic_title = 11; */
        if (message.elasticTitle !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.elasticTitle);
        /* live.BenefitLabel benefit_label = 12; */
        if (message.benefitLabel)
            BenefitLabel.internalBinaryWrite(message.benefitLabel, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.LotteryInfoList
 */
export const LotteryInfoList = new LotteryInfoList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinLotteryAlert$Type extends MessageType<WinLotteryAlert> {
    constructor() {
        super("live.WinLotteryAlert", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WinLotteryAlert>): WinLotteryAlert {
        const message = { title: "", content: "", buttonLabel: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinLotteryAlert>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinLotteryAlert): WinLotteryAlert {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string button_label */ 3:
                    message.buttonLabel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinLotteryAlert, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string button_label = 3; */
        if (message.buttonLabel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.buttonLabel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.WinLotteryAlert
 */
export const WinLotteryAlert = new WinLotteryAlert$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinLotteryInfo$Type extends MessageType<WinLotteryInfo> {
    constructor() {
        super("live.WinLotteryInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "win_record_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "is_addressed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "alert", kind: "message", T: () => WinLotteryAlert },
            { no: 9, name: "is_win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "activity_price", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "buy_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "lottery_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "product_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "lottery_info_list", kind: "message", T: () => LotteryInfoList }
        ]);
    }
    create(value?: PartialMessage<WinLotteryInfo>): WinLotteryInfo {
        const message = { title: "", name: "", img: "", buttonLabel: "", winRecordId: "", activityId: "", isAddressed: false, isWin: false, jumpUrl: "", productId: 0n, activityPrice: [], buyTime: 0n, lotteryType: 0n, productIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinLotteryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinLotteryInfo): WinLotteryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string img */ 3:
                    message.img = reader.string();
                    break;
                case /* string button_label */ 4:
                    message.buttonLabel = reader.string();
                    break;
                case /* string win_record_id */ 5:
                    message.winRecordId = reader.string();
                    break;
                case /* string activity_id */ 6:
                    message.activityId = reader.string();
                    break;
                case /* bool is_addressed */ 7:
                    message.isAddressed = reader.bool();
                    break;
                case /* live.WinLotteryAlert alert */ 8:
                    message.alert = WinLotteryAlert.internalBinaryRead(reader, reader.uint32(), options, message.alert);
                    break;
                case /* bool is_win */ 9:
                    message.isWin = reader.bool();
                    break;
                case /* string jump_url */ 10:
                    message.jumpUrl = reader.string();
                    break;
                case /* int64 product_id */ 11:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 activity_price */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityPrice.push(reader.int64().toBigInt());
                    else
                        message.activityPrice.push(reader.int64().toBigInt());
                    break;
                case /* int64 buy_time */ 13:
                    message.buyTime = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_type */ 14:
                    message.lotteryType = reader.int64().toBigInt();
                    break;
                case /* string product_id_str */ 15:
                    message.productIdStr = reader.string();
                    break;
                case /* live.LotteryInfoList lottery_info_list */ 16:
                    message.lotteryInfoList = LotteryInfoList.internalBinaryRead(reader, reader.uint32(), options, message.lotteryInfoList);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinLotteryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string img = 3; */
        if (message.img !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.img);
        /* string button_label = 4; */
        if (message.buttonLabel !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.buttonLabel);
        /* string win_record_id = 5; */
        if (message.winRecordId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.winRecordId);
        /* string activity_id = 6; */
        if (message.activityId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.activityId);
        /* bool is_addressed = 7; */
        if (message.isAddressed !== false)
            writer.tag(7, WireType.Varint).bool(message.isAddressed);
        /* live.WinLotteryAlert alert = 8; */
        if (message.alert)
            WinLotteryAlert.internalBinaryWrite(message.alert, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool is_win = 9; */
        if (message.isWin !== false)
            writer.tag(9, WireType.Varint).bool(message.isWin);
        /* string jump_url = 10; */
        if (message.jumpUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.jumpUrl);
        /* int64 product_id = 11; */
        if (message.productId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.productId);
        /* repeated int64 activity_price = 12; */
        if (message.activityPrice.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activityPrice.length; i++)
                writer.int64(message.activityPrice[i]);
            writer.join();
        }
        /* int64 buy_time = 13; */
        if (message.buyTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.buyTime);
        /* int64 lottery_type = 14; */
        if (message.lotteryType !== 0n)
            writer.tag(14, WireType.Varint).int64(message.lotteryType);
        /* string product_id_str = 15; */
        if (message.productIdStr !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.productIdStr);
        /* live.LotteryInfoList lottery_info_list = 16; */
        if (message.lotteryInfoList)
            LotteryInfoList.internalBinaryWrite(message.lotteryInfoList, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.WinLotteryInfo
 */
export const WinLotteryInfo = new WinLotteryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponActivityInfoMessage$Type extends MessageType<CouponActivityInfoMessage> {
    constructor() {
        super("live.CouponActivityInfoMessage", [
            { no: 1, name: "activity_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "before_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "before_button", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "after_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "after_button", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CouponActivityInfoMessage>): CouponActivityInfoMessage {
        const message = { activityType: 0n, beforeText: "", beforeButton: "", afterText: "", afterButton: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponActivityInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponActivityInfoMessage): CouponActivityInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 activity_type */ 1:
                    message.activityType = reader.int64().toBigInt();
                    break;
                case /* string before_text */ 2:
                    message.beforeText = reader.string();
                    break;
                case /* string before_button */ 3:
                    message.beforeButton = reader.string();
                    break;
                case /* string after_text */ 4:
                    message.afterText = reader.string();
                    break;
                case /* string after_button */ 5:
                    message.afterButton = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponActivityInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 activity_type = 1; */
        if (message.activityType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.activityType);
        /* string before_text = 2; */
        if (message.beforeText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.beforeText);
        /* string before_button = 3; */
        if (message.beforeButton !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.beforeButton);
        /* string after_text = 4; */
        if (message.afterText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.afterText);
        /* string after_button = 5; */
        if (message.afterButton !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.afterButton);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.CouponActivityInfoMessage
 */
export const CouponActivityInfoMessage = new CouponActivityInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponMetaInfoMessage$Type extends MessageType<CouponMetaInfoMessage> {
    constructor() {
        super("live.CouponMetaInfoMessage", [
            { no: 1, name: "coupon_meta_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expire_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "period_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "valid_period", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "start_apply_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "end_apply_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "coupon_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "threshold", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "credit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "max_apply_times", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "type_detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "discount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "shop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "pay_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "max_discount_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "shop_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "type_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "what_coupon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "coupon_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "left_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "has_applied", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 27, name: "shop_logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "is_show", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 29, name: "total_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "live_coupon_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "coupon_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "user_apply_times", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "can_continue_apply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 34, name: "coupon_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 35, name: "coupon_reset", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 36, name: "start_time_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 37, name: "expire_time_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 38, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 39, name: "kol_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 40, name: "product_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 41, name: "platform_sub_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 42, name: "has_available_goods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 43, name: "type_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "kol_user_tag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 46, name: "type_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 47, name: "type_icon_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 48, name: "type_icon_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 49, name: "coupon_category", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 50, name: "extra_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CouponMetaInfoMessage>): CouponMetaInfoMessage {
        const message = { couponMetaId: "", startTime: "", expireTime: "", periodType: 0n, validPeriod: 0n, startApplyTime: "", endApplyTime: "", couponName: "", url: "", threshold: 0n, credit: 0n, maxApplyTimes: 0n, type: 0n, typeDetail: "", discount: 0, shopId: "", payType: 0n, maxDiscountLimit: 0n, shopName: "", typeString: "", whatCoupon: "", couponString: "", channelId: 0n, leftAmount: 0n, hasApplied: 0n, status: 0n, shopLogo: "", isShow: 0n, totalAmount: 0n, liveCouponStatus: 0, couponSource: 0, userApplyTimes: 0n, canContinueApply: false, couponStatus: false, couponReset: false, startTimeTimestamp: 0n, expireTimeTimestamp: 0n, avatar: "", kolUid: 0n, productIds: [], platformSubType: 0n, hasAvailableGoods: false, typeTitle: "", kolUserTag: 0n, typeIcon: "", typeIconWidth: 0n, typeIconHeight: 0n, couponCategory: "", extraData: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponMetaInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponMetaInfoMessage): CouponMetaInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string coupon_meta_id */ 1:
                    message.couponMetaId = reader.string();
                    break;
                case /* string start_time */ 2:
                    message.startTime = reader.string();
                    break;
                case /* string expire_time */ 3:
                    message.expireTime = reader.string();
                    break;
                case /* int64 period_type */ 4:
                    message.periodType = reader.int64().toBigInt();
                    break;
                case /* int64 valid_period */ 5:
                    message.validPeriod = reader.int64().toBigInt();
                    break;
                case /* string start_apply_time */ 6:
                    message.startApplyTime = reader.string();
                    break;
                case /* string end_apply_time */ 7:
                    message.endApplyTime = reader.string();
                    break;
                case /* string coupon_name */ 8:
                    message.couponName = reader.string();
                    break;
                case /* string url */ 9:
                    message.url = reader.string();
                    break;
                case /* int64 threshold */ 10:
                    message.threshold = reader.int64().toBigInt();
                    break;
                case /* int64 credit */ 11:
                    message.credit = reader.int64().toBigInt();
                    break;
                case /* int64 max_apply_times */ 12:
                    message.maxApplyTimes = reader.int64().toBigInt();
                    break;
                case /* int64 type */ 13:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* string type_detail */ 14:
                    message.typeDetail = reader.string();
                    break;
                case /* double discount */ 15:
                    message.discount = reader.double();
                    break;
                case /* string shop_id */ 16:
                    message.shopId = reader.string();
                    break;
                case /* int64 pay_type */ 17:
                    message.payType = reader.int64().toBigInt();
                    break;
                case /* int64 max_discount_limit */ 18:
                    message.maxDiscountLimit = reader.int64().toBigInt();
                    break;
                case /* string shop_name */ 19:
                    message.shopName = reader.string();
                    break;
                case /* string type_string */ 20:
                    message.typeString = reader.string();
                    break;
                case /* string what_coupon */ 21:
                    message.whatCoupon = reader.string();
                    break;
                case /* string coupon_string */ 22:
                    message.couponString = reader.string();
                    break;
                case /* int64 channel_id */ 23:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 left_amount */ 24:
                    message.leftAmount = reader.int64().toBigInt();
                    break;
                case /* int64 has_applied */ 25:
                    message.hasApplied = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 26:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string shop_logo */ 27:
                    message.shopLogo = reader.string();
                    break;
                case /* int64 is_show */ 28:
                    message.isShow = reader.int64().toBigInt();
                    break;
                case /* int64 total_amount */ 29:
                    message.totalAmount = reader.int64().toBigInt();
                    break;
                case /* int32 live_coupon_status */ 30:
                    message.liveCouponStatus = reader.int32();
                    break;
                case /* int32 coupon_source */ 31:
                    message.couponSource = reader.int32();
                    break;
                case /* int64 user_apply_times */ 32:
                    message.userApplyTimes = reader.int64().toBigInt();
                    break;
                case /* bool can_continue_apply */ 33:
                    message.canContinueApply = reader.bool();
                    break;
                case /* bool coupon_status */ 34:
                    message.couponStatus = reader.bool();
                    break;
                case /* bool coupon_reset */ 35:
                    message.couponReset = reader.bool();
                    break;
                case /* int64 start_time_timestamp */ 36:
                    message.startTimeTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 expire_time_timestamp */ 37:
                    message.expireTimeTimestamp = reader.int64().toBigInt();
                    break;
                case /* string avatar */ 38:
                    message.avatar = reader.string();
                    break;
                case /* int64 kol_uid */ 39:
                    message.kolUid = reader.int64().toBigInt();
                    break;
                case /* repeated int64 product_ids */ 40:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.productIds.push(reader.int64().toBigInt());
                    else
                        message.productIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 platform_sub_type */ 41:
                    message.platformSubType = reader.int64().toBigInt();
                    break;
                case /* bool has_available_goods */ 42:
                    message.hasAvailableGoods = reader.bool();
                    break;
                case /* string type_title */ 43:
                    message.typeTitle = reader.string();
                    break;
                case /* int64 kol_user_tag */ 45:
                    message.kolUserTag = reader.int64().toBigInt();
                    break;
                case /* string type_icon */ 46:
                    message.typeIcon = reader.string();
                    break;
                case /* int64 type_icon_width */ 47:
                    message.typeIconWidth = reader.int64().toBigInt();
                    break;
                case /* int64 type_icon_height */ 48:
                    message.typeIconHeight = reader.int64().toBigInt();
                    break;
                case /* string coupon_category */ 49:
                    message.couponCategory = reader.string();
                    break;
                case /* string extra_data */ 50:
                    message.extraData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponMetaInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string coupon_meta_id = 1; */
        if (message.couponMetaId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.couponMetaId);
        /* string start_time = 2; */
        if (message.startTime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startTime);
        /* string expire_time = 3; */
        if (message.expireTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.expireTime);
        /* int64 period_type = 4; */
        if (message.periodType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.periodType);
        /* int64 valid_period = 5; */
        if (message.validPeriod !== 0n)
            writer.tag(5, WireType.Varint).int64(message.validPeriod);
        /* string start_apply_time = 6; */
        if (message.startApplyTime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.startApplyTime);
        /* string end_apply_time = 7; */
        if (message.endApplyTime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.endApplyTime);
        /* string coupon_name = 8; */
        if (message.couponName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.couponName);
        /* string url = 9; */
        if (message.url !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.url);
        /* int64 threshold = 10; */
        if (message.threshold !== 0n)
            writer.tag(10, WireType.Varint).int64(message.threshold);
        /* int64 credit = 11; */
        if (message.credit !== 0n)
            writer.tag(11, WireType.Varint).int64(message.credit);
        /* int64 max_apply_times = 12; */
        if (message.maxApplyTimes !== 0n)
            writer.tag(12, WireType.Varint).int64(message.maxApplyTimes);
        /* int64 type = 13; */
        if (message.type !== 0n)
            writer.tag(13, WireType.Varint).int64(message.type);
        /* string type_detail = 14; */
        if (message.typeDetail !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.typeDetail);
        /* double discount = 15; */
        if (message.discount !== 0)
            writer.tag(15, WireType.Bit64).double(message.discount);
        /* string shop_id = 16; */
        if (message.shopId !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.shopId);
        /* int64 pay_type = 17; */
        if (message.payType !== 0n)
            writer.tag(17, WireType.Varint).int64(message.payType);
        /* int64 max_discount_limit = 18; */
        if (message.maxDiscountLimit !== 0n)
            writer.tag(18, WireType.Varint).int64(message.maxDiscountLimit);
        /* string shop_name = 19; */
        if (message.shopName !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.shopName);
        /* string type_string = 20; */
        if (message.typeString !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.typeString);
        /* string what_coupon = 21; */
        if (message.whatCoupon !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.whatCoupon);
        /* string coupon_string = 22; */
        if (message.couponString !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.couponString);
        /* int64 channel_id = 23; */
        if (message.channelId !== 0n)
            writer.tag(23, WireType.Varint).int64(message.channelId);
        /* int64 left_amount = 24; */
        if (message.leftAmount !== 0n)
            writer.tag(24, WireType.Varint).int64(message.leftAmount);
        /* int64 has_applied = 25; */
        if (message.hasApplied !== 0n)
            writer.tag(25, WireType.Varint).int64(message.hasApplied);
        /* int64 status = 26; */
        if (message.status !== 0n)
            writer.tag(26, WireType.Varint).int64(message.status);
        /* string shop_logo = 27; */
        if (message.shopLogo !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.shopLogo);
        /* int64 is_show = 28; */
        if (message.isShow !== 0n)
            writer.tag(28, WireType.Varint).int64(message.isShow);
        /* int64 total_amount = 29; */
        if (message.totalAmount !== 0n)
            writer.tag(29, WireType.Varint).int64(message.totalAmount);
        /* int32 live_coupon_status = 30; */
        if (message.liveCouponStatus !== 0)
            writer.tag(30, WireType.Varint).int32(message.liveCouponStatus);
        /* int32 coupon_source = 31; */
        if (message.couponSource !== 0)
            writer.tag(31, WireType.Varint).int32(message.couponSource);
        /* int64 user_apply_times = 32; */
        if (message.userApplyTimes !== 0n)
            writer.tag(32, WireType.Varint).int64(message.userApplyTimes);
        /* bool can_continue_apply = 33; */
        if (message.canContinueApply !== false)
            writer.tag(33, WireType.Varint).bool(message.canContinueApply);
        /* bool coupon_status = 34; */
        if (message.couponStatus !== false)
            writer.tag(34, WireType.Varint).bool(message.couponStatus);
        /* bool coupon_reset = 35; */
        if (message.couponReset !== false)
            writer.tag(35, WireType.Varint).bool(message.couponReset);
        /* int64 start_time_timestamp = 36; */
        if (message.startTimeTimestamp !== 0n)
            writer.tag(36, WireType.Varint).int64(message.startTimeTimestamp);
        /* int64 expire_time_timestamp = 37; */
        if (message.expireTimeTimestamp !== 0n)
            writer.tag(37, WireType.Varint).int64(message.expireTimeTimestamp);
        /* string avatar = 38; */
        if (message.avatar !== "")
            writer.tag(38, WireType.LengthDelimited).string(message.avatar);
        /* int64 kol_uid = 39; */
        if (message.kolUid !== 0n)
            writer.tag(39, WireType.Varint).int64(message.kolUid);
        /* repeated int64 product_ids = 40; */
        if (message.productIds.length) {
            writer.tag(40, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.productIds.length; i++)
                writer.int64(message.productIds[i]);
            writer.join();
        }
        /* int64 platform_sub_type = 41; */
        if (message.platformSubType !== 0n)
            writer.tag(41, WireType.Varint).int64(message.platformSubType);
        /* bool has_available_goods = 42; */
        if (message.hasAvailableGoods !== false)
            writer.tag(42, WireType.Varint).bool(message.hasAvailableGoods);
        /* string type_title = 43; */
        if (message.typeTitle !== "")
            writer.tag(43, WireType.LengthDelimited).string(message.typeTitle);
        /* int64 kol_user_tag = 45; */
        if (message.kolUserTag !== 0n)
            writer.tag(45, WireType.Varint).int64(message.kolUserTag);
        /* string type_icon = 46; */
        if (message.typeIcon !== "")
            writer.tag(46, WireType.LengthDelimited).string(message.typeIcon);
        /* int64 type_icon_width = 47; */
        if (message.typeIconWidth !== 0n)
            writer.tag(47, WireType.Varint).int64(message.typeIconWidth);
        /* int64 type_icon_height = 48; */
        if (message.typeIconHeight !== 0n)
            writer.tag(48, WireType.Varint).int64(message.typeIconHeight);
        /* string coupon_category = 49; */
        if (message.couponCategory !== "")
            writer.tag(49, WireType.LengthDelimited).string(message.couponCategory);
        /* string extra_data = 50; */
        if (message.extraData !== "")
            writer.tag(50, WireType.LengthDelimited).string(message.extraData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.CouponMetaInfoMessage
 */
export const CouponMetaInfoMessage = new CouponMetaInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponInfo$Type extends MessageType<CouponInfo> {
    constructor() {
        super("live.CouponInfo", [
            { no: 1, name: "meta_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "server_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "countdown", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "activity_json_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "coupon_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "activity_info", kind: "message", T: () => CouponActivityInfoMessage },
            { no: 7, name: "coupon_meta", kind: "message", T: () => CouponMetaInfoMessage },
            { no: 8, name: "meta_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CouponInfo>): CouponInfo {
        const message = { metaId: 0n, serverTime: 0n, countdown: 0n, activityJsonStr: "", couponType: 0, metaIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponInfo): CouponInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 meta_id */ 1:
                    message.metaId = reader.int64().toBigInt();
                    break;
                case /* int64 server_time */ 2:
                    message.serverTime = reader.int64().toBigInt();
                    break;
                case /* int64 countdown */ 3:
                    message.countdown = reader.int64().toBigInt();
                    break;
                case /* string activity_json_str */ 4:
                    message.activityJsonStr = reader.string();
                    break;
                case /* int32 coupon_type */ 5:
                    message.couponType = reader.int32();
                    break;
                case /* live.CouponActivityInfoMessage activity_info */ 6:
                    message.activityInfo = CouponActivityInfoMessage.internalBinaryRead(reader, reader.uint32(), options, message.activityInfo);
                    break;
                case /* live.CouponMetaInfoMessage coupon_meta */ 7:
                    message.couponMeta = CouponMetaInfoMessage.internalBinaryRead(reader, reader.uint32(), options, message.couponMeta);
                    break;
                case /* string meta_id_str */ 8:
                    message.metaIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 meta_id = 1; */
        if (message.metaId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.metaId);
        /* int64 server_time = 2; */
        if (message.serverTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.serverTime);
        /* int64 countdown = 3; */
        if (message.countdown !== 0n)
            writer.tag(3, WireType.Varint).int64(message.countdown);
        /* string activity_json_str = 4; */
        if (message.activityJsonStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.activityJsonStr);
        /* int32 coupon_type = 5; */
        if (message.couponType !== 0)
            writer.tag(5, WireType.Varint).int32(message.couponType);
        /* live.CouponActivityInfoMessage activity_info = 6; */
        if (message.activityInfo)
            CouponActivityInfoMessage.internalBinaryWrite(message.activityInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* live.CouponMetaInfoMessage coupon_meta = 7; */
        if (message.couponMeta)
            CouponMetaInfoMessage.internalBinaryWrite(message.couponMeta, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string meta_id_str = 8; */
        if (message.metaIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.metaIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.CouponInfo
 */
export const CouponInfo = new CouponInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrowseInfo$Type extends MessageType<BrowseInfo> {
    constructor() {
        super("live.BrowseInfo", [
            { no: 1, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "task_index", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stop_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BrowseInfo>): BrowseInfo {
        const message = { duration: 0, taskIndex: "", stopDuration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BrowseInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrowseInfo): BrowseInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 duration */ 1:
                    message.duration = reader.int32();
                    break;
                case /* string task_index */ 2:
                    message.taskIndex = reader.string();
                    break;
                case /* int32 stop_duration */ 3:
                    message.stopDuration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrowseInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 duration = 1; */
        if (message.duration !== 0)
            writer.tag(1, WireType.Varint).int32(message.duration);
        /* string task_index = 2; */
        if (message.taskIndex !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.taskIndex);
        /* int32 stop_duration = 3; */
        if (message.stopDuration !== 0)
            writer.tag(3, WireType.Varint).int32(message.stopDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.BrowseInfo
 */
export const BrowseInfo = new BrowseInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskInfo$Type extends MessageType<TaskInfo> {
    constructor() {
        super("live.TaskInfo", [
            { no: 1, name: "task_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "task_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "report_event", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "browse_task_info", kind: "message", T: () => BrowseInfo }
        ]);
    }
    create(value?: PartialMessage<TaskInfo>): TaskInfo {
        const message = { taskType: 0, taskStatus: 0, reportEvent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskInfo): TaskInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 task_type */ 1:
                    message.taskType = reader.int32();
                    break;
                case /* int32 task_status */ 2:
                    message.taskStatus = reader.int32();
                    break;
                case /* string report_event */ 3:
                    message.reportEvent = reader.string();
                    break;
                case /* live.BrowseInfo browse_task_info */ 4:
                    message.browseTaskInfo = BrowseInfo.internalBinaryRead(reader, reader.uint32(), options, message.browseTaskInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 task_type = 1; */
        if (message.taskType !== 0)
            writer.tag(1, WireType.Varint).int32(message.taskType);
        /* int32 task_status = 2; */
        if (message.taskStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.taskStatus);
        /* string report_event = 3; */
        if (message.reportEvent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reportEvent);
        /* live.BrowseInfo browse_task_info = 4; */
        if (message.browseTaskInfo)
            BrowseInfo.internalBinaryWrite(message.browseTaskInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.TaskInfo
 */
export const TaskInfo = new TaskInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveMarketingMessage$Type extends MessageType<LiveMarketingMessage> {
    constructor() {
        super("live.LiveMarketingMessage", [
            { no: 1, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "product_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "auction_success", kind: "message", T: () => AuctionSuccess },
            { no: 4, name: "auction_info", kind: "message", T: () => AuctionInfo },
            { no: 5, name: "redpack_activity_info", kind: "message", T: () => RedpackActivityInfo },
            { no: 6, name: "win_lotteryinfo", kind: "message", T: () => WinLotteryInfo },
            { no: 7, name: "lottery_info_list", kind: "message", T: () => LotteryInfoList },
            { no: 8, name: "coupon_info", kind: "message", T: () => CouponInfo },
            { no: 9, name: "task_info", kind: "message", T: () => TaskInfo }
        ]);
    }
    create(value?: PartialMessage<LiveMarketingMessage>): LiveMarketingMessage {
        const message = { msgType: 0, productIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveMarketingMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveMarketingMessage): LiveMarketingMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 msg_type */ 1:
                    message.msgType = reader.int32();
                    break;
                case /* repeated int64 product_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.productIds.push(reader.int64().toBigInt());
                    else
                        message.productIds.push(reader.int64().toBigInt());
                    break;
                case /* live.AuctionSuccess auction_success */ 3:
                    message.auctionSuccess = AuctionSuccess.internalBinaryRead(reader, reader.uint32(), options, message.auctionSuccess);
                    break;
                case /* live.AuctionInfo auction_info */ 4:
                    message.auctionInfo = AuctionInfo.internalBinaryRead(reader, reader.uint32(), options, message.auctionInfo);
                    break;
                case /* live.RedpackActivityInfo redpack_activity_info */ 5:
                    message.redpackActivityInfo = RedpackActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.redpackActivityInfo);
                    break;
                case /* live.WinLotteryInfo win_lotteryinfo */ 6:
                    message.winLotteryinfo = WinLotteryInfo.internalBinaryRead(reader, reader.uint32(), options, message.winLotteryinfo);
                    break;
                case /* live.LotteryInfoList lottery_info_list */ 7:
                    message.lotteryInfoList = LotteryInfoList.internalBinaryRead(reader, reader.uint32(), options, message.lotteryInfoList);
                    break;
                case /* live.CouponInfo coupon_info */ 8:
                    message.couponInfo = CouponInfo.internalBinaryRead(reader, reader.uint32(), options, message.couponInfo);
                    break;
                case /* live.TaskInfo task_info */ 9:
                    message.taskInfo = TaskInfo.internalBinaryRead(reader, reader.uint32(), options, message.taskInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveMarketingMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 msg_type = 1; */
        if (message.msgType !== 0)
            writer.tag(1, WireType.Varint).int32(message.msgType);
        /* repeated int64 product_ids = 2; */
        if (message.productIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.productIds.length; i++)
                writer.int64(message.productIds[i]);
            writer.join();
        }
        /* live.AuctionSuccess auction_success = 3; */
        if (message.auctionSuccess)
            AuctionSuccess.internalBinaryWrite(message.auctionSuccess, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* live.AuctionInfo auction_info = 4; */
        if (message.auctionInfo)
            AuctionInfo.internalBinaryWrite(message.auctionInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* live.RedpackActivityInfo redpack_activity_info = 5; */
        if (message.redpackActivityInfo)
            RedpackActivityInfo.internalBinaryWrite(message.redpackActivityInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* live.WinLotteryInfo win_lotteryinfo = 6; */
        if (message.winLotteryinfo)
            WinLotteryInfo.internalBinaryWrite(message.winLotteryinfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* live.LotteryInfoList lottery_info_list = 7; */
        if (message.lotteryInfoList)
            LotteryInfoList.internalBinaryWrite(message.lotteryInfoList, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* live.CouponInfo coupon_info = 8; */
        if (message.couponInfo)
            CouponInfo.internalBinaryWrite(message.couponInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* live.TaskInfo task_info = 9; */
        if (message.taskInfo)
            TaskInfo.internalBinaryWrite(message.taskInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.LiveMarketingMessage
 */
export const LiveMarketingMessage = new LiveMarketingMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopProductInfo$Type extends MessageType<PopProductInfo> {
    constructor() {
        super("live.PopProductInfo", [
            { no: 1, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "explain_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PopProductInfo>): PopProductInfo {
        const message = { promotionId: 0n, productId: 0n, explainTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopProductInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopProductInfo): PopProductInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 promotion_id */ 1:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* int64 product_id */ 2:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int64 explain_time */ 3:
                    message.explainTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopProductInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 promotion_id = 1; */
        if (message.promotionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.promotionId);
        /* int64 product_id = 2; */
        if (message.productId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.productId);
        /* int64 explain_time = 3; */
        if (message.explainTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.explainTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.PopProductInfo
 */
export const PopProductInfo = new PopProductInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LivePopMessage$Type extends MessageType<LivePopMessage> {
    constructor() {
        super("live.LivePopMessage", [
            { no: 1, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "bubble_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "hot_atmosphere", kind: "message", T: () => HotAtmosphere },
            { no: 5, name: "delay_param", kind: "message", T: () => DelayParam },
            { no: 6, name: "product_info", kind: "message", T: () => PopProductInfo }
        ]);
    }
    create(value?: PartialMessage<LivePopMessage>): LivePopMessage {
        const message = { msgType: 0, bubbleType: 0, promotionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LivePopMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LivePopMessage): LivePopMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 msg_type */ 1:
                    message.msgType = reader.int32();
                    break;
                case /* int32 bubble_type */ 2:
                    message.bubbleType = reader.int32();
                    break;
                case /* int64 promotion_id */ 3:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* live.HotAtmosphere hot_atmosphere */ 4:
                    message.hotAtmosphere = HotAtmosphere.internalBinaryRead(reader, reader.uint32(), options, message.hotAtmosphere);
                    break;
                case /* live.DelayParam delay_param */ 5:
                    message.delayParam = DelayParam.internalBinaryRead(reader, reader.uint32(), options, message.delayParam);
                    break;
                case /* live.PopProductInfo product_info */ 6:
                    message.productInfo = PopProductInfo.internalBinaryRead(reader, reader.uint32(), options, message.productInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LivePopMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 msg_type = 1; */
        if (message.msgType !== 0)
            writer.tag(1, WireType.Varint).int32(message.msgType);
        /* int32 bubble_type = 2; */
        if (message.bubbleType !== 0)
            writer.tag(2, WireType.Varint).int32(message.bubbleType);
        /* int64 promotion_id = 3; */
        if (message.promotionId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.promotionId);
        /* live.HotAtmosphere hot_atmosphere = 4; */
        if (message.hotAtmosphere)
            HotAtmosphere.internalBinaryWrite(message.hotAtmosphere, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* live.DelayParam delay_param = 5; */
        if (message.delayParam)
            DelayParam.internalBinaryWrite(message.delayParam, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* live.PopProductInfo product_info = 6; */
        if (message.productInfo)
            PopProductInfo.internalBinaryWrite(message.productInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.LivePopMessage
 */
export const LivePopMessage = new LivePopMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryRefreshMessage$Type extends MessageType<CategoryRefreshMessage> {
    constructor() {
        super("live.CategoryRefreshMessage", [
            { no: 1, name: "category_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CategoryRefreshMessage_CategoryInfo },
            { no: 2, name: "update_ts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryRefreshMessage>): CategoryRefreshMessage {
        const message = { categoryInfo: [], updateTs: 0n, updateToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CategoryRefreshMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryRefreshMessage): CategoryRefreshMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated live.CategoryRefreshMessage.CategoryInfo category_info */ 1:
                    message.categoryInfo.push(CategoryRefreshMessage_CategoryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 update_ts */ 2:
                    message.updateTs = reader.int64().toBigInt();
                    break;
                case /* string update_toast */ 3:
                    message.updateToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryRefreshMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated live.CategoryRefreshMessage.CategoryInfo category_info = 1; */
        for (let i = 0; i < message.categoryInfo.length; i++)
            CategoryRefreshMessage_CategoryInfo.internalBinaryWrite(message.categoryInfo[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 update_ts = 2; */
        if (message.updateTs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.updateTs);
        /* string update_toast = 3; */
        if (message.updateToast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.updateToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.CategoryRefreshMessage
 */
export const CategoryRefreshMessage = new CategoryRefreshMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryRefreshMessage_CategoryInfo$Type extends MessageType<CategoryRefreshMessage_CategoryInfo> {
    constructor() {
        super("live.CategoryRefreshMessage.CategoryInfo", [
            { no: 1, name: "unique_index", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "category_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "category_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "need_reload", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryRefreshMessage_CategoryInfo>): CategoryRefreshMessage_CategoryInfo {
        const message = { uniqueIndex: "", name: "", categoryId: 0n, categoryType: 0n, needReload: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CategoryRefreshMessage_CategoryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryRefreshMessage_CategoryInfo): CategoryRefreshMessage_CategoryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string unique_index */ 1:
                    message.uniqueIndex = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 category_id */ 3:
                    message.categoryId = reader.int64().toBigInt();
                    break;
                case /* int64 category_type */ 4:
                    message.categoryType = reader.int64().toBigInt();
                    break;
                case /* bool need_reload */ 5:
                    message.needReload = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryRefreshMessage_CategoryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string unique_index = 1; */
        if (message.uniqueIndex !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uniqueIndex);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 category_id = 3; */
        if (message.categoryId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.categoryId);
        /* int64 category_type = 4; */
        if (message.categoryType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.categoryType);
        /* bool need_reload = 5; */
        if (message.needReload !== false)
            writer.tag(5, WireType.Varint).bool(message.needReload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.CategoryRefreshMessage.CategoryInfo
 */
export const CategoryRefreshMessage_CategoryInfo = new CategoryRefreshMessage_CategoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductListRefreshMessage$Type extends MessageType<ProductListRefreshMessage> {
    constructor() {
        super("live.ProductListRefreshMessage", [
            { no: 1, name: "update_ts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "update_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProductListRefreshMessage>): ProductListRefreshMessage {
        const message = { updateTs: 0n, updateToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductListRefreshMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductListRefreshMessage): ProductListRefreshMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 update_ts */ 1:
                    message.updateTs = reader.int64().toBigInt();
                    break;
                case /* string update_toast */ 2:
                    message.updateToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductListRefreshMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 update_ts = 1; */
        if (message.updateTs !== 0n)
            writer.tag(1, WireType.Varint).int64(message.updateTs);
        /* string update_toast = 2; */
        if (message.updateToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.updateToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.ProductListRefreshMessage
 */
export const ProductListRefreshMessage = new ProductListRefreshMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductListUpdateMessage$Type extends MessageType<ProductListUpdateMessage> {
    constructor() {
        super("live.ProductListUpdateMessage", [
            { no: 1, name: "update_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "update_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "update_product_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProductInfo },
            { no: 4, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "update_category_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CategoryInfo },
            { no: 6, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProductListUpdateMessage>): ProductListUpdateMessage {
        const message = { updateTimestamp: 0n, updateToast: "", updateProductInfo: [], total: 0n, updateCategoryInfo: [], msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductListUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductListUpdateMessage): ProductListUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 update_timestamp */ 1:
                    message.updateTimestamp = reader.int64().toBigInt();
                    break;
                case /* string update_toast */ 2:
                    message.updateToast = reader.string();
                    break;
                case /* repeated live.ProductInfo update_product_info */ 3:
                    message.updateProductInfo.push(ProductInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total */ 4:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* repeated live.CategoryInfo update_category_info */ 5:
                    message.updateCategoryInfo.push(CategoryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 msg_type */ 6:
                    message.msgType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductListUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 update_timestamp = 1; */
        if (message.updateTimestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.updateTimestamp);
        /* string update_toast = 2; */
        if (message.updateToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.updateToast);
        /* repeated live.ProductInfo update_product_info = 3; */
        for (let i = 0; i < message.updateProductInfo.length; i++)
            ProductInfo.internalBinaryWrite(message.updateProductInfo[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 total = 4; */
        if (message.total !== 0n)
            writer.tag(4, WireType.Varint).int64(message.total);
        /* repeated live.CategoryInfo update_category_info = 5; */
        for (let i = 0; i < message.updateCategoryInfo.length; i++)
            CategoryInfo.internalBinaryWrite(message.updateCategoryInfo[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 6; */
        if (message.msgType !== 0)
            writer.tag(6, WireType.Varint).int32(message.msgType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.ProductListUpdateMessage
 */
export const ProductListUpdateMessage = new ProductListUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductInfo$Type extends MessageType<ProductInfo> {
    constructor() {
        super("live.ProductInfo", [
            { no: 1, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "target_flash_uids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "explain_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ProductInfo>): ProductInfo {
        const message = { promotionId: 0n, index: 0, targetFlashUids: [], explainType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductInfo): ProductInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 promotion_id */ 1:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* int32 index */ 2:
                    message.index = reader.int32();
                    break;
                case /* repeated int64 target_flash_uids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.targetFlashUids.push(reader.int64().toBigInt());
                    else
                        message.targetFlashUids.push(reader.int64().toBigInt());
                    break;
                case /* int64 explain_type */ 4:
                    message.explainType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 promotion_id = 1; */
        if (message.promotionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.promotionId);
        /* int32 index = 2; */
        if (message.index !== 0)
            writer.tag(2, WireType.Varint).int32(message.index);
        /* repeated int64 target_flash_uids = 3; */
        if (message.targetFlashUids.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.targetFlashUids.length; i++)
                writer.int64(message.targetFlashUids[i]);
            writer.join();
        }
        /* int64 explain_type = 4; */
        if (message.explainType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.explainType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.ProductInfo
 */
export const ProductInfo = new ProductInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryInfo$Type extends MessageType<CategoryInfo> {
    constructor() {
        super("live.CategoryInfo", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "promotion_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "unique_index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryInfo>): CategoryInfo {
        const message = { id: 0, name: "", promotionIds: [], type: "", uniqueIndex: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CategoryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryInfo): CategoryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated string promotion_ids */ 3:
                    message.promotionIds.push(reader.string());
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                case /* string unique_index */ 5:
                    message.uniqueIndex = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated string promotion_ids = 3; */
        for (let i = 0; i < message.promotionIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.promotionIds[i]);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* string unique_index = 5; */
        if (message.uniqueIndex !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.uniqueIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.CategoryInfo
 */
export const CategoryInfo = new CategoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductRefreshMessage$Type extends MessageType<ProductRefreshMessage> {
    constructor() {
        super("live.ProductRefreshMessage", [
            { no: 1, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "channel_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "update_ts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "product_info", kind: "message", T: () => ProductRefreshMessage_ProductInfo }
        ]);
    }
    create(value?: PartialMessage<ProductRefreshMessage>): ProductRefreshMessage {
        const message = { promotionId: 0n, productId: 0n, channelType: 0n, channelId: 0n, updateTs: 0n, actionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductRefreshMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductRefreshMessage): ProductRefreshMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 promotion_id */ 1:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* int64 product_id */ 2:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int64 channel_type */ 3:
                    message.channelType = reader.int64().toBigInt();
                    break;
                case /* int64 channel_id */ 4:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 update_ts */ 5:
                    message.updateTs = reader.int64().toBigInt();
                    break;
                case /* int32 action_type */ 6:
                    message.actionType = reader.int32();
                    break;
                case /* live.ProductRefreshMessage.ProductInfo product_info */ 8:
                    message.productInfo = ProductRefreshMessage_ProductInfo.internalBinaryRead(reader, reader.uint32(), options, message.productInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductRefreshMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 promotion_id = 1; */
        if (message.promotionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.promotionId);
        /* int64 product_id = 2; */
        if (message.productId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.productId);
        /* int64 channel_type = 3; */
        if (message.channelType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.channelType);
        /* int64 channel_id = 4; */
        if (message.channelId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.channelId);
        /* int64 update_ts = 5; */
        if (message.updateTs !== 0n)
            writer.tag(5, WireType.Varint).int64(message.updateTs);
        /* int32 action_type = 6; */
        if (message.actionType !== 0)
            writer.tag(6, WireType.Varint).int32(message.actionType);
        /* live.ProductRefreshMessage.ProductInfo product_info = 8; */
        if (message.productInfo)
            ProductRefreshMessage_ProductInfo.internalBinaryWrite(message.productInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.ProductRefreshMessage
 */
export const ProductRefreshMessage = new ProductRefreshMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductRefreshMessage_ProductInfo$Type extends MessageType<ProductRefreshMessage_ProductInfo> {
    constructor() {
        super("live.ProductRefreshMessage.ProductInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProductRefreshMessage_ProductInfo>): ProductRefreshMessage_ProductInfo {
        const message = { title: "", cover: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductRefreshMessage_ProductInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductRefreshMessage_ProductInfo): ProductRefreshMessage_ProductInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string cover */ 2:
                    message.cover = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductRefreshMessage_ProductInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string cover = 2; */
        if (message.cover !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cover);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.ProductRefreshMessage.ProductInfo
 */
export const ProductRefreshMessage_ProductInfo = new ProductRefreshMessage_ProductInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductUpdateMessage$Type extends MessageType<ProductUpdateMessage> {
    constructor() {
        super("live.ProductUpdateMessage", [
            { no: 1, name: "updated_product_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "updated_product_info", kind: "message", T: () => UpdatedProductInfo },
            { no: 5, name: "sold_out", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "updated_coupon_info", kind: "message", T: () => UpdatedCouponInfo },
            { no: 7, name: "updated_campaign_info", kind: "message", T: () => UpdatedCampaignInfo },
            { no: 8, name: "update_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "update_sku_info", kind: "message", T: () => UpdatedSkuInfo },
            { no: 10, name: "updated_commentary_video_info", kind: "message", T: () => UpdatedCommentaryVideoInfo },
            { no: 11, name: "updated_group_info", kind: "message", T: () => UpdatedGroupInfo },
            { no: 12, name: "hot_atmosphere", kind: "message", T: () => HotAtmosphere },
            { no: 13, name: "can_sold", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ProductUpdateMessage>): ProductUpdateMessage {
        const message = { updatedProductIds: [], updateType: 0, promotionId: 0n, soldOut: false, updateTimestamp: 0n, canSold: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductUpdateMessage): ProductUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 updated_product_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.updatedProductIds.push(reader.int64().toBigInt());
                    else
                        message.updatedProductIds.push(reader.int64().toBigInt());
                    break;
                case /* int32 update_type */ 2:
                    message.updateType = reader.int32();
                    break;
                case /* int64 promotion_id */ 3:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* live.UpdatedProductInfo updated_product_info */ 4:
                    message.updatedProductInfo = UpdatedProductInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedProductInfo);
                    break;
                case /* bool sold_out */ 5:
                    message.soldOut = reader.bool();
                    break;
                case /* live.UpdatedCouponInfo updated_coupon_info */ 6:
                    message.updatedCouponInfo = UpdatedCouponInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedCouponInfo);
                    break;
                case /* live.UpdatedCampaignInfo updated_campaign_info */ 7:
                    message.updatedCampaignInfo = UpdatedCampaignInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedCampaignInfo);
                    break;
                case /* int64 update_timestamp */ 8:
                    message.updateTimestamp = reader.int64().toBigInt();
                    break;
                case /* live.UpdatedSkuInfo update_sku_info */ 9:
                    message.updateSkuInfo = UpdatedSkuInfo.internalBinaryRead(reader, reader.uint32(), options, message.updateSkuInfo);
                    break;
                case /* live.UpdatedCommentaryVideoInfo updated_commentary_video_info */ 10:
                    message.updatedCommentaryVideoInfo = UpdatedCommentaryVideoInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedCommentaryVideoInfo);
                    break;
                case /* live.UpdatedGroupInfo updated_group_info */ 11:
                    message.updatedGroupInfo = UpdatedGroupInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedGroupInfo);
                    break;
                case /* live.HotAtmosphere hot_atmosphere */ 12:
                    message.hotAtmosphere = HotAtmosphere.internalBinaryRead(reader, reader.uint32(), options, message.hotAtmosphere);
                    break;
                case /* bool can_sold */ 13:
                    message.canSold = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 updated_product_ids = 1; */
        if (message.updatedProductIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.updatedProductIds.length; i++)
                writer.int64(message.updatedProductIds[i]);
            writer.join();
        }
        /* int32 update_type = 2; */
        if (message.updateType !== 0)
            writer.tag(2, WireType.Varint).int32(message.updateType);
        /* int64 promotion_id = 3; */
        if (message.promotionId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.promotionId);
        /* live.UpdatedProductInfo updated_product_info = 4; */
        if (message.updatedProductInfo)
            UpdatedProductInfo.internalBinaryWrite(message.updatedProductInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool sold_out = 5; */
        if (message.soldOut !== false)
            writer.tag(5, WireType.Varint).bool(message.soldOut);
        /* live.UpdatedCouponInfo updated_coupon_info = 6; */
        if (message.updatedCouponInfo)
            UpdatedCouponInfo.internalBinaryWrite(message.updatedCouponInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* live.UpdatedCampaignInfo updated_campaign_info = 7; */
        if (message.updatedCampaignInfo)
            UpdatedCampaignInfo.internalBinaryWrite(message.updatedCampaignInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 update_timestamp = 8; */
        if (message.updateTimestamp !== 0n)
            writer.tag(8, WireType.Varint).int64(message.updateTimestamp);
        /* live.UpdatedSkuInfo update_sku_info = 9; */
        if (message.updateSkuInfo)
            UpdatedSkuInfo.internalBinaryWrite(message.updateSkuInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* live.UpdatedCommentaryVideoInfo updated_commentary_video_info = 10; */
        if (message.updatedCommentaryVideoInfo)
            UpdatedCommentaryVideoInfo.internalBinaryWrite(message.updatedCommentaryVideoInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* live.UpdatedGroupInfo updated_group_info = 11; */
        if (message.updatedGroupInfo)
            UpdatedGroupInfo.internalBinaryWrite(message.updatedGroupInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* live.HotAtmosphere hot_atmosphere = 12; */
        if (message.hotAtmosphere)
            HotAtmosphere.internalBinaryWrite(message.hotAtmosphere, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bool can_sold = 13; */
        if (message.canSold !== false)
            writer.tag(13, WireType.Varint).bool(message.canSold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.ProductUpdateMessage
 */
export const ProductUpdateMessage = new ProductUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedProductInfo$Type extends MessageType<UpdatedProductInfo> {
    constructor() {
        super("live.UpdatedProductInfo", [
            { no: 1, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "pop_upicon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedProductInfo>): UpdatedProductInfo {
        const message = { price: 0n, title: "", cover: "", status: 0n, popUpicon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedProductInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedProductInfo): UpdatedProductInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 price */ 1:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* int64 status */ 4:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string pop_upicon */ 5:
                    message.popUpicon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedProductInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 price = 1; */
        if (message.price !== 0n)
            writer.tag(1, WireType.Varint).int64(message.price);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* int64 status = 4; */
        if (message.status !== 0n)
            writer.tag(4, WireType.Varint).int64(message.status);
        /* string pop_upicon = 5; */
        if (message.popUpicon !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.popUpicon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.UpdatedProductInfo
 */
export const UpdatedProductInfo = new UpdatedProductInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedCouponInfo$Type extends MessageType<UpdatedCouponInfo> {
    constructor() {
        super("live.UpdatedCouponInfo", [
            { no: 1, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "coupon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "coupon_applet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "coupon_meta_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedCouponInfo>): UpdatedCouponInfo {
        const message = { tag: "", couponUrl: "", couponApplet: "", isValid: false, couponMetaId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedCouponInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedCouponInfo): UpdatedCouponInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tag */ 1:
                    message.tag = reader.string();
                    break;
                case /* string coupon_url */ 2:
                    message.couponUrl = reader.string();
                    break;
                case /* string coupon_applet */ 3:
                    message.couponApplet = reader.string();
                    break;
                case /* bool is_valid */ 4:
                    message.isValid = reader.bool();
                    break;
                case /* string coupon_meta_id */ 5:
                    message.couponMetaId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedCouponInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tag = 1; */
        if (message.tag !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tag);
        /* string coupon_url = 2; */
        if (message.couponUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.couponUrl);
        /* string coupon_applet = 3; */
        if (message.couponApplet !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.couponApplet);
        /* bool is_valid = 4; */
        if (message.isValid !== false)
            writer.tag(4, WireType.Varint).bool(message.isValid);
        /* string coupon_meta_id = 5; */
        if (message.couponMetaId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.couponMetaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.UpdatedCouponInfo
 */
export const UpdatedCouponInfo = new UpdatedCouponInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedCampaignInfo$Type extends MessageType<UpdatedCampaignInfo> {
    constructor() {
        super("live.UpdatedCampaignInfo", [
            { no: 1, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "end_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "time_start_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "time_end_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "user_limit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "is_preheat", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "campaign_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedCampaignInfo>): UpdatedCampaignInfo {
        const message = { isValid: false, label: "", price: "", pic: "", startTime: "", endTime: "", timeStartLabel: "", timeEndLabel: "", userLimit: "", isPreheat: "", campaignId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedCampaignInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedCampaignInfo): UpdatedCampaignInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_valid */ 1:
                    message.isValid = reader.bool();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* string price */ 3:
                    message.price = reader.string();
                    break;
                case /* string pic */ 4:
                    message.pic = reader.string();
                    break;
                case /* string start_time */ 5:
                    message.startTime = reader.string();
                    break;
                case /* string end_time */ 6:
                    message.endTime = reader.string();
                    break;
                case /* string time_start_label */ 7:
                    message.timeStartLabel = reader.string();
                    break;
                case /* string time_end_label */ 8:
                    message.timeEndLabel = reader.string();
                    break;
                case /* string user_limit */ 9:
                    message.userLimit = reader.string();
                    break;
                case /* string is_preheat */ 10:
                    message.isPreheat = reader.string();
                    break;
                case /* string campaign_id */ 11:
                    message.campaignId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedCampaignInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_valid = 1; */
        if (message.isValid !== false)
            writer.tag(1, WireType.Varint).bool(message.isValid);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* string price = 3; */
        if (message.price !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.price);
        /* string pic = 4; */
        if (message.pic !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pic);
        /* string start_time = 5; */
        if (message.startTime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.startTime);
        /* string end_time = 6; */
        if (message.endTime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.endTime);
        /* string time_start_label = 7; */
        if (message.timeStartLabel !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.timeStartLabel);
        /* string time_end_label = 8; */
        if (message.timeEndLabel !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.timeEndLabel);
        /* string user_limit = 9; */
        if (message.userLimit !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.userLimit);
        /* string is_preheat = 10; */
        if (message.isPreheat !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.isPreheat);
        /* string campaign_id = 11; */
        if (message.campaignId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.campaignId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.UpdatedCampaignInfo
 */
export const UpdatedCampaignInfo = new UpdatedCampaignInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedSkuInfo$Type extends MessageType<UpdatedSkuInfo> {
    constructor() {
        super("live.UpdatedSkuInfo", [
            { no: 2, name: "min_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "max_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "unuse_min_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "coupon_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedSkuInfo>): UpdatedSkuInfo {
        const message = { minPrice: 0n, maxPrice: 0n, unuseMinPrice: 0n, couponPrice: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedSkuInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedSkuInfo): UpdatedSkuInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 min_price */ 2:
                    message.minPrice = reader.int64().toBigInt();
                    break;
                case /* int64 max_price */ 3:
                    message.maxPrice = reader.int64().toBigInt();
                    break;
                case /* int64 unuse_min_price */ 4:
                    message.unuseMinPrice = reader.int64().toBigInt();
                    break;
                case /* int64 coupon_price */ 5:
                    message.couponPrice = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedSkuInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 min_price = 2; */
        if (message.minPrice !== 0n)
            writer.tag(2, WireType.Varint).int64(message.minPrice);
        /* int64 max_price = 3; */
        if (message.maxPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.maxPrice);
        /* int64 unuse_min_price = 4; */
        if (message.unuseMinPrice !== 0n)
            writer.tag(4, WireType.Varint).int64(message.unuseMinPrice);
        /* int64 coupon_price = 5; */
        if (message.couponPrice !== 0n)
            writer.tag(5, WireType.Varint).int64(message.couponPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.UpdatedSkuInfo
 */
export const UpdatedSkuInfo = new UpdatedSkuInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkuInfo$Type extends MessageType<SkuInfo> {
    constructor() {
        super("live.SkuInfo", [
            { no: 1, name: "sku_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stock_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "coupon_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SkuInfo>): SkuInfo {
        const message = { skuId: "", stockNum: 0n, price: 0n, couponPrice: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkuInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkuInfo): SkuInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sku_id */ 1:
                    message.skuId = reader.string();
                    break;
                case /* int64 stock_num */ 2:
                    message.stockNum = reader.int64().toBigInt();
                    break;
                case /* int64 price */ 3:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int64 coupon_price */ 4:
                    message.couponPrice = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkuInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sku_id = 1; */
        if (message.skuId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.skuId);
        /* int64 stock_num = 2; */
        if (message.stockNum !== 0n)
            writer.tag(2, WireType.Varint).int64(message.stockNum);
        /* int64 price = 3; */
        if (message.price !== 0n)
            writer.tag(3, WireType.Varint).int64(message.price);
        /* int64 coupon_price = 4; */
        if (message.couponPrice !== 0n)
            writer.tag(4, WireType.Varint).int64(message.couponPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.SkuInfo
 */
export const SkuInfo = new SkuInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedGroupInfo$Type extends MessageType<UpdatedGroupInfo> {
    constructor() {
        super("live.UpdatedGroupInfo", [
            { no: 1, name: "avatar_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "joined", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "group_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "persent", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedGroupInfo>): UpdatedGroupInfo {
        const message = { avatarList: [], joined: 0n, groupSize: 0n, persent: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedGroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedGroupInfo): UpdatedGroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string avatar_list */ 1:
                    message.avatarList.push(reader.string());
                    break;
                case /* int64 joined */ 2:
                    message.joined = reader.int64().toBigInt();
                    break;
                case /* int64 group_size */ 3:
                    message.groupSize = reader.int64().toBigInt();
                    break;
                case /* int64 persent */ 4:
                    message.persent = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedGroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string avatar_list = 1; */
        for (let i = 0; i < message.avatarList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.avatarList[i]);
        /* int64 joined = 2; */
        if (message.joined !== 0n)
            writer.tag(2, WireType.Varint).int64(message.joined);
        /* int64 group_size = 3; */
        if (message.groupSize !== 0n)
            writer.tag(3, WireType.Varint).int64(message.groupSize);
        /* int64 persent = 4; */
        if (message.persent !== 0n)
            writer.tag(4, WireType.Varint).int64(message.persent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.UpdatedGroupInfo
 */
export const UpdatedGroupInfo = new UpdatedGroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedCommentaryVideoInfo$Type extends MessageType<UpdatedCommentaryVideoInfo> {
    constructor() {
        super("live.UpdatedCommentaryVideoInfo", [
            { no: 1, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedCommentaryVideoInfo>): UpdatedCommentaryVideoInfo {
        const message = { action: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedCommentaryVideoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedCommentaryVideoInfo): UpdatedCommentaryVideoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 action */ 1:
                    message.action = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedCommentaryVideoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 action = 1; */
        if (message.action !== 0n)
            writer.tag(1, WireType.Varint).int64(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.UpdatedCommentaryVideoInfo
 */
export const UpdatedCommentaryVideoInfo = new UpdatedCommentaryVideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveSellerMessage$Type extends MessageType<LiveSellerMessage> {
    constructor() {
        super("live.LiveSellerMessage", [
            { no: 1, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "author_order_limit_info", kind: "message", T: () => AuthorOrderLimitInfo },
            { no: 3, name: "list_room_stats_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StatsData }
        ]);
    }
    create(value?: PartialMessage<LiveSellerMessage>): LiveSellerMessage {
        const message = { msgType: 0, listRoomStatsData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveSellerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveSellerMessage): LiveSellerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 msg_type */ 1:
                    message.msgType = reader.int32();
                    break;
                case /* live.AuthorOrderLimitInfo author_order_limit_info */ 2:
                    message.authorOrderLimitInfo = AuthorOrderLimitInfo.internalBinaryRead(reader, reader.uint32(), options, message.authorOrderLimitInfo);
                    break;
                case /* repeated live.StatsData list_room_stats_data */ 3:
                    message.listRoomStatsData.push(StatsData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveSellerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 msg_type = 1; */
        if (message.msgType !== 0)
            writer.tag(1, WireType.Varint).int32(message.msgType);
        /* live.AuthorOrderLimitInfo author_order_limit_info = 2; */
        if (message.authorOrderLimitInfo)
            AuthorOrderLimitInfo.internalBinaryWrite(message.authorOrderLimitInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated live.StatsData list_room_stats_data = 3; */
        for (let i = 0; i < message.listRoomStatsData.length; i++)
            StatsData.internalBinaryWrite(message.listRoomStatsData[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.LiveSellerMessage
 */
export const LiveSellerMessage = new LiveSellerMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorOrderLimitInfo$Type extends MessageType<AuthorOrderLimitInfo> {
    constructor() {
        super("live.AuthorOrderLimitInfo", [
            { no: 1, name: "icon", kind: "message", T: () => ICON },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "button", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorOrderLimitInfo>): AuthorOrderLimitInfo {
        const message = { title: "", content: "", button: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorOrderLimitInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorOrderLimitInfo): AuthorOrderLimitInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* live.ICON icon */ 1:
                    message.icon = ICON.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string button */ 4:
                    message.button = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorOrderLimitInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* live.ICON icon = 1; */
        if (message.icon)
            ICON.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string button = 4; */
        if (message.button !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.button);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.AuthorOrderLimitInfo
 */
export const AuthorOrderLimitInfo = new AuthorOrderLimitInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ICON$Type extends MessageType<ICON> {
    constructor() {
        super("live.ICON", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ICON>): ICON {
        const message = { urlList: [], width: 0, height: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ICON>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ICON): ICON {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* int32 width */ 2:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 3:
                    message.height = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ICON, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* int32 width = 2; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).int32(message.width);
        /* int32 height = 3; */
        if (message.height !== 0)
            writer.tag(3, WireType.Varint).int32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.ICON
 */
export const ICON = new ICON$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsData$Type extends MessageType<StatsData> {
    constructor() {
        super("live.StatsData", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StatsData>): StatsData {
        const message = { value: "", unit: "", type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatsData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatsData): StatsData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                case /* string unit */ 2:
                    message.unit = reader.string();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatsData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        /* string unit = 2; */
        if (message.unit !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.unit);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message live.StatsData
 */
export const StatsData = new StatsData$Type();
