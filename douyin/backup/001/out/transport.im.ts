// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "transport.im.proto" (package "im", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message im.PushHeader
 */
export interface PushHeader {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message im.PushFrame
 */
export interface PushFrame {
    /**
     * @generated from protobuf field: uint64 SeqID = 1 [json_name = "SeqID"];
     */
    seqID: bigint;
    /**
     * @generated from protobuf field: uint64 LogID = 2 [json_name = "LogID"];
     */
    logID: bigint;
    /**
     * @generated from protobuf field: int32 service = 3;
     */
    service: number;
    /**
     * @generated from protobuf field: int32 method = 4;
     */
    method: number;
    /**
     * @generated from protobuf field: repeated im.PushHeader headers = 5;
     */
    headers: PushHeader[];
    /**
     * @generated from protobuf field: string payload_encoding = 6;
     */
    payloadEncoding: string;
    /**
     * @generated from protobuf field: string payload_type = 7;
     */
    payloadType: string;
    /**
     * @generated from protobuf field: bytes payload = 8;
     */
    payload: Uint8Array;
    /**
     * @generated from protobuf field: string LodIDNew = 9 [json_name = "LodIDNew"];
     */
    lodIDNew: string;
}
/**
 * @generated from protobuf message im.PayloadInIm
 */
export interface PayloadInIm {
    /**
     * @generated from protobuf field: int32 CompressType = 2 [json_name = "CompressType"];
     */
    compressType: number;
}
/**
 * @generated from protobuf message im.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: repeated im.Message messages = 1;
     */
    messages: Message[];
    /**
     * @generated from protobuf field: string cursor = 2;
     */
    cursor: string;
    /**
     * @generated from protobuf field: int64 fetch_interval = 3;
     */
    fetchInterval: bigint;
    /**
     * @generated from protobuf field: int64 now = 4;
     */
    now: bigint;
    /**
     * @generated from protobuf field: string internal_ext = 5;
     */
    internalExt: string;
    /**
     * @generated from protobuf field: int32 fetch_type = 6;
     */
    fetchType: number;
    /**
     * @generated from protobuf field: int64 heartbeat_duration = 8;
     */
    heartbeatDuration: bigint;
    /**
     * @generated from protobuf field: bool need_ack = 9;
     */
    needAck: boolean;
    /**
     * @generated from protobuf field: string push_server = 10;
     */
    pushServer: string;
    /**
     * @generated from protobuf field: string live_cursor = 11;
     */
    liveCursor: string;
    /**
     * @generated from protobuf field: bool history_no_more = 12;
     */
    historyNoMore: boolean;
    /**
     * @generated from protobuf field: string proxy_server = 13;
     */
    proxyServer: string;
}
/**
 * @generated from protobuf message im.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: string method = 1;
     */
    method: string;
    /**
     * @generated from protobuf field: bytes payload = 2;
     */
    payload: Uint8Array;
    /**
     * @generated from protobuf field: int64 msg_id = 3;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: int32 msg_type = 4;
     */
    msgType: number;
    /**
     * @generated from protobuf field: int64 offset = 5;
     */
    offset: bigint;
    /**
     * @generated from protobuf field: bool need_wrds_store = 6;
     */
    needWrdsStore: boolean;
    /**
     * @generated from protobuf field: int64 wrds_version = 7;
     */
    wrdsVersion: bigint;
    /**
     * @generated from protobuf field: string wrds_sub_key = 8;
     */
    wrdsSubKey: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PushHeader$Type extends MessageType<PushHeader> {
    constructor() {
        super("im.PushHeader", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PushHeader>): PushHeader {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PushHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushHeader): PushHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PushHeader
 */
export const PushHeader = new PushHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushFrame$Type extends MessageType<PushFrame> {
    constructor() {
        super("im.PushFrame", [
            { no: 1, name: "SeqID", kind: "scalar", jsonName: "SeqID", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "LogID", kind: "scalar", jsonName: "LogID", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "service", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "method", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "headers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PushHeader },
            { no: 6, name: "payload_encoding", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "payload_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "LodIDNew", kind: "scalar", jsonName: "LodIDNew", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PushFrame>): PushFrame {
        const message = { seqID: 0n, logID: 0n, service: 0, method: 0, headers: [], payloadEncoding: "", payloadType: "", payload: new Uint8Array(0), lodIDNew: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PushFrame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushFrame): PushFrame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 SeqID = 1 [json_name = "SeqID"];*/ 1:
                    message.seqID = reader.uint64().toBigInt();
                    break;
                case /* uint64 LogID = 2 [json_name = "LogID"];*/ 2:
                    message.logID = reader.uint64().toBigInt();
                    break;
                case /* int32 service */ 3:
                    message.service = reader.int32();
                    break;
                case /* int32 method */ 4:
                    message.method = reader.int32();
                    break;
                case /* repeated im.PushHeader headers */ 5:
                    message.headers.push(PushHeader.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string payload_encoding */ 6:
                    message.payloadEncoding = reader.string();
                    break;
                case /* string payload_type */ 7:
                    message.payloadType = reader.string();
                    break;
                case /* bytes payload */ 8:
                    message.payload = reader.bytes();
                    break;
                case /* string LodIDNew = 9 [json_name = "LodIDNew"];*/ 9:
                    message.lodIDNew = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushFrame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 SeqID = 1 [json_name = "SeqID"]; */
        if (message.seqID !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.seqID);
        /* uint64 LogID = 2 [json_name = "LogID"]; */
        if (message.logID !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.logID);
        /* int32 service = 3; */
        if (message.service !== 0)
            writer.tag(3, WireType.Varint).int32(message.service);
        /* int32 method = 4; */
        if (message.method !== 0)
            writer.tag(4, WireType.Varint).int32(message.method);
        /* repeated im.PushHeader headers = 5; */
        for (let i = 0; i < message.headers.length; i++)
            PushHeader.internalBinaryWrite(message.headers[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string payload_encoding = 6; */
        if (message.payloadEncoding !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.payloadEncoding);
        /* string payload_type = 7; */
        if (message.payloadType !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.payloadType);
        /* bytes payload = 8; */
        if (message.payload.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.payload);
        /* string LodIDNew = 9 [json_name = "LodIDNew"]; */
        if (message.lodIDNew !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.lodIDNew);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PushFrame
 */
export const PushFrame = new PushFrame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayloadInIm$Type extends MessageType<PayloadInIm> {
    constructor() {
        super("im.PayloadInIm", [
            { no: 2, name: "CompressType", kind: "scalar", jsonName: "CompressType", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PayloadInIm>): PayloadInIm {
        const message = { compressType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PayloadInIm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayloadInIm): PayloadInIm {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 CompressType = 2 [json_name = "CompressType"];*/ 2:
                    message.compressType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PayloadInIm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 CompressType = 2 [json_name = "CompressType"]; */
        if (message.compressType !== 0)
            writer.tag(2, WireType.Varint).int32(message.compressType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PayloadInIm
 */
export const PayloadInIm = new PayloadInIm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("im.Response", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message },
            { no: 2, name: "cursor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fetch_interval", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "now", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "internal_ext", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "fetch_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "heartbeat_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "need_ack", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "push_server", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "live_cursor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "history_no_more", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "proxy_server", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = { messages: [], cursor: "", fetchInterval: 0n, now: 0n, internalExt: "", fetchType: 0, heartbeatDuration: 0n, needAck: false, pushServer: "", liveCursor: "", historyNoMore: false, proxyServer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string cursor */ 2:
                    message.cursor = reader.string();
                    break;
                case /* int64 fetch_interval */ 3:
                    message.fetchInterval = reader.int64().toBigInt();
                    break;
                case /* int64 now */ 4:
                    message.now = reader.int64().toBigInt();
                    break;
                case /* string internal_ext */ 5:
                    message.internalExt = reader.string();
                    break;
                case /* int32 fetch_type */ 6:
                    message.fetchType = reader.int32();
                    break;
                case /* int64 heartbeat_duration */ 8:
                    message.heartbeatDuration = reader.int64().toBigInt();
                    break;
                case /* bool need_ack */ 9:
                    message.needAck = reader.bool();
                    break;
                case /* string push_server */ 10:
                    message.pushServer = reader.string();
                    break;
                case /* string live_cursor */ 11:
                    message.liveCursor = reader.string();
                    break;
                case /* bool history_no_more */ 12:
                    message.historyNoMore = reader.bool();
                    break;
                case /* string proxy_server */ 13:
                    message.proxyServer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string cursor = 2; */
        if (message.cursor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cursor);
        /* int64 fetch_interval = 3; */
        if (message.fetchInterval !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fetchInterval);
        /* int64 now = 4; */
        if (message.now !== 0n)
            writer.tag(4, WireType.Varint).int64(message.now);
        /* string internal_ext = 5; */
        if (message.internalExt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.internalExt);
        /* int32 fetch_type = 6; */
        if (message.fetchType !== 0)
            writer.tag(6, WireType.Varint).int32(message.fetchType);
        /* int64 heartbeat_duration = 8; */
        if (message.heartbeatDuration !== 0n)
            writer.tag(8, WireType.Varint).int64(message.heartbeatDuration);
        /* bool need_ack = 9; */
        if (message.needAck !== false)
            writer.tag(9, WireType.Varint).bool(message.needAck);
        /* string push_server = 10; */
        if (message.pushServer !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.pushServer);
        /* string live_cursor = 11; */
        if (message.liveCursor !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.liveCursor);
        /* bool history_no_more = 12; */
        if (message.historyNoMore !== false)
            writer.tag(12, WireType.Varint).bool(message.historyNoMore);
        /* string proxy_server = 13; */
        if (message.proxyServer !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.proxyServer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("im.Message", [
            { no: 1, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "need_wrds_store", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "wrds_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "wrds_sub_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = { method: "", payload: new Uint8Array(0), msgId: 0n, msgType: 0, offset: 0n, needWrdsStore: false, wrdsVersion: 0n, wrdsSubKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string method */ 1:
                    message.method = reader.string();
                    break;
                case /* bytes payload */ 2:
                    message.payload = reader.bytes();
                    break;
                case /* int64 msg_id */ 3:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* int32 msg_type */ 4:
                    message.msgType = reader.int32();
                    break;
                case /* int64 offset */ 5:
                    message.offset = reader.int64().toBigInt();
                    break;
                case /* bool need_wrds_store */ 6:
                    message.needWrdsStore = reader.bool();
                    break;
                case /* int64 wrds_version */ 7:
                    message.wrdsVersion = reader.int64().toBigInt();
                    break;
                case /* string wrds_sub_key */ 8:
                    message.wrdsSubKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string method = 1; */
        if (message.method !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.method);
        /* bytes payload = 2; */
        if (message.payload.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
        /* int64 msg_id = 3; */
        if (message.msgId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.msgId);
        /* int32 msg_type = 4; */
        if (message.msgType !== 0)
            writer.tag(4, WireType.Varint).int32(message.msgType);
        /* int64 offset = 5; */
        if (message.offset !== 0n)
            writer.tag(5, WireType.Varint).int64(message.offset);
        /* bool need_wrds_store = 6; */
        if (message.needWrdsStore !== false)
            writer.tag(6, WireType.Varint).bool(message.needWrdsStore);
        /* int64 wrds_version = 7; */
        if (message.wrdsVersion !== 0n)
            writer.tag(7, WireType.Varint).int64(message.wrdsVersion);
        /* string wrds_sub_key = 8; */
        if (message.wrdsSubKey !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.wrdsSubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Message
 */
export const Message = new Message$Type();
