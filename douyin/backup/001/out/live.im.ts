// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "live.im.proto" (package "im", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MoreLiveEntrance } from "./live.data";
import { MidiSkinDressInfo } from "./live.data";
import { User_AuthenticationInfo } from "./live.data";
import { GiftAudienceReceiverItem } from "./live.data";
import { WelfareProjectInfo } from "./live.data";
import { AppUserInfo } from "./live.data";
import { VSLinkInfo } from "./live.data";
import { BusinessConfigure } from "./live.data";
import { UpperRightWidgetData } from "./live.data";
import { TaskRecord } from "./live.data";
import { TreasureDetail } from "./live.data";
import { TouchPositionMeta } from "./live.data";
import { VSCameraInfo } from "./live.data";
import { CommentMedal } from "./live.data";
import { ShortTouchArea } from "./live.data";
import { UnionLiveInfo } from "./live.data";
import { RoomIntroLabel } from "./live.data";
import { RoomChannelInfo } from "./live.data";
import { RanklistHourEntrance } from "./live.data";
import { RankEnterInfo } from "./live.data";
import { Quiz } from "./live.data";
import { AnchorHistoryItem } from "./live.data";
import { PropsBGData } from "./live.data";
import { ProfitInteractionSetting } from "./live.data";
import { VoteSetting } from "./live.data";
import { PrivilegeInfo } from "./live.data";
import { MysteryRankUserItem } from "./live.data";
import { MysteryUserInfo } from "./live.data";
import { EpisodeHighLight } from "./live.data";
import { CollectionItem } from "./live.data";
import { Against } from "./live.data";
import { BattleStarActivityGradeMedal } from "./live.data";
import { PropSummary } from "./live.data";
import { UserVIPInfo } from "./live.data";
import { ShelfInfo } from "./live.data";
import { GameCardInfo } from "./live.data";
import { CustomizedCardInfo } from "./live.data";
import { AudienceEntranceInfo } from "./live.data";
import { StampInfo } from "./live.data";
import { ChatIdentity } from "./live.data";
import { BetOption } from "./live.data";
import { Portal } from "./live.data";
import { LotteryInfo as LotteryInfo$ } from "./live.data";
import { GlobalCustomIcons } from "./live.data";
import { CartHorizontal } from "./live.data";
import { CartVertical } from "./live.data";
import { ThemedCompetitionInfo } from "./live.data";
import { LinkmicTeamfightInfo } from "./live.data";
import { LinkmicGameInfo } from "./live.data";
import { InteractiveScreenCastInfo } from "./live.data";
import { BidPaidLinkmicContent } from "./live.data";
import { NormalPaidLinkmicInfo } from "./live.data";
import { BidPaidLinkmicDealInfo } from "./live.data";
import { BidPaidLinkmicBidRecord } from "./live.data";
import { BidPaidLinkmicBidInfo } from "./live.data";
import { ChatMatchGroupInfo } from "./live.data";
import { KtvSongStruct } from "./live.data";
import { AdventureCardInfo } from "./live.data";
import { AdventureUserInfo } from "./live.data";
import { AdventurePlayModeInfo } from "./live.data";
import { AdventurePairInfo } from "./live.data";
import { LinkmicSetting } from "./live.data";
import { LinkmicAudienceEmoji } from "./live.data";
import { CurrentOrderSingItemV2 } from "./live.data";
import { AudienceActionSource } from "./live.data";
import { MCUContent } from "./live.data";
import { LinkmicMediaInfo } from "./live.data";
import { GameInviteInfo } from "./live.data";
import { JoinTeamfightInfo } from "./live.data";
import { AnchorLinkmicInfo } from "./live.data";
import { RivalExtraInfo } from "./live.data";
import { PaidLinkmicExplainCardInfo } from "./live.data";
import { BattleBarConfig } from "./live.data";
import { BattleTitleConfig } from "./live.data";
import { BattleSkinConfig } from "./live.data";
import { BreakthroughInfo } from "./live.data";
import { OperationalPlay } from "./live.data";
import { BattleScore } from "./live.data";
import { BattleArmy } from "./live.data";
import { BattleContributorsRankListV2 } from "./live.data";
import { LinkmicMediaParam } from "./live.data";
import { MultiPKModeInfo } from "./live.data";
import { RoomBattleProcessInfo } from "./live.data";
import { CrossRoomLinkReplyGuestInfo } from "./live.data";
import { RoomBattleMode } from "./live.data";
import { InviteRoomInfo } from "./live.data";
import { ChangePlayModeData } from "./live.data";
import { LinkPhaseConfig } from "./live.data";
import { LinkPhase } from "./live.data";
import { SwitchSceneData } from "./live.data";
import { LinkmicPositionItem } from "./live.data";
import { BanUser } from "./live.data";
import { LinkIconConfig } from "./live.data";
import { MsgBoardItemInfo } from "./live.data";
import { AnchorLinkmicChannelInfo } from "./live.data";
import { PreRTCInfo } from "./live.data";
import { ListUser } from "./live.data";
import { MultiChannelInfo } from "./live.data";
import { LinkmicInfo as LinkmicInfo$ } from "./live.data";
import { MultiLiveCoreInfo } from "./live.data";
import { MultiRtcInfo } from "./live.data";
import { LinkerBaseInfo } from "./live.data";
import { LinkmicQuickInteract } from "./live.data";
import { ChannelListUser } from "./live.data";
import { AddDressPrompt } from "./live.data";
import { KtvAtmosphereVideoInfo } from "./live.data";
import { ShareItemStyle } from "./live.data";
import { ChatImageGuideInfo } from "./live.data";
import { ChatEmojiGuideInfo } from "./live.data";
import { LikeIconInfo } from "./live.data";
import { BannerData } from "./live.data";
import { HotRoomInfo } from "./live.data";
import { GuestBattleInfo } from "./live.data";
import { GrowthTaskContributorRank } from "./live.data";
import { GrowthTask } from "./live.data";
import { GroupShowInfo } from "./live.data";
import { ExtraEffect } from "./live.data";
import { SendTogether } from "./live.data";
import { AnchorGiftData } from "./live.data";
import { AssetEffectMixInfo } from "./live.data";
import { GiftStruct } from "./live.data";
import { GiftVoteResult } from "./live.data";
import { PlayTeamMember } from "./live.data";
import { GameImageBundler } from "./live.data";
import { InvitationSwitch } from "./live.data";
import { GameInvite } from "./live.data";
import { FreeGift } from "./live.data";
import { GiftTrayInfo } from "./live.data";
import { OfficialRoomInfo } from "./live.data";
import { DecotationDetail } from "./live.data";
import { BottomRightCardArea } from "./live.data";
import { CommentaryRoomInfo } from "./live.data";
import { ChorusSongInfo } from "./live.data";
import { ChorusInfo } from "./live.data";
import { CombinedText } from "./live.data";
import { ItemCardInfo } from "./live.data";
import { TeamTask } from "./live.data";
import { BattleRivalTag } from "./live.data";
import { BattleConfigSetting } from "./live.data";
import { PanelTitle } from "./live.data";
import { FeedbackCard } from "./live.data";
import { AudioBGData } from "./live.data";
import { GiftIMPriority } from "./live.data";
import { ChatReplyRespInfo } from "./live.data";
import { Image } from "./live.data";
import { Room } from "./live.data";
import { User } from "./live.data";
import { Text } from "./live.data";
import { BorderInfo } from "./live.data";
/**
 * @generated from protobuf message im.RoomBorderMessage
 */
export interface RoomBorderMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.BorderInfo border_info = 2;
     */
    borderInfo?: BorderInfo;
}
/**
 * @generated from protobuf message im.Common
 */
export interface Common {
    /**
     * @generated from protobuf field: string method = 1;
     */
    method: string;
    /**
     * @generated from protobuf field: int64 msg_id = 2;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 3;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 create_time = 4;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int32 monitor = 5;
     */
    monitor: number;
    /**
     * @generated from protobuf field: bool is_show_msg = 6;
     */
    isShowMsg: boolean;
    /**
     * @generated from protobuf field: string describe = 7;
     */
    describe: string;
    /**
     * @generated from protobuf field: data.Text display_text = 8;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: int64 fold_type = 9;
     */
    foldType: bigint;
    /**
     * @generated from protobuf field: int64 anchor_fold_type = 10;
     */
    anchorFoldType: bigint;
    /**
     * @generated from protobuf field: int64 priority_score = 11;
     */
    priorityScore: bigint;
    /**
     * @generated from protobuf field: string log_id = 12;
     */
    logId: string;
    /**
     * @generated from protobuf field: string msg_process_filter_k = 13;
     */
    msgProcessFilterK: string;
    /**
     * @generated from protobuf field: string msg_process_filter_v = 14;
     */
    msgProcessFilterV: string;
    /**
     * @generated from protobuf field: data.User user = 15;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.Room room = 16;
     */
    room?: Room;
    /**
     * @generated from protobuf field: int64 anchor_fold_type_v2 = 17;
     */
    anchorFoldTypeV2: bigint;
    /**
     * @generated from protobuf field: int64 process_at_sei_time_ms = 18;
     */
    processAtSeiTimeMs: bigint;
    /**
     * @generated from protobuf field: int64 random_dispatch_ms = 19;
     */
    randomDispatchMs: bigint;
    /**
     * @generated from protobuf field: bool is_dispatch = 20;
     */
    isDispatch: boolean;
    /**
     * @generated from protobuf field: int64 channel_id = 21;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 diff_sei2abs_second = 22 [json_name = "diffSei2absSecond"];
     */
    diffSei2AbsSecond: bigint;
    /**
     * @generated from protobuf field: int64 anchor_fold_duration = 23;
     */
    anchorFoldDuration: bigint;
    /**
     * @generated from protobuf field: int64 app_id = 24;
     */
    appId: bigint;
}
/**
 * @generated from protobuf message im.PublicAreaCommon
 */
export interface PublicAreaCommon {
    /**
     * @generated from protobuf field: data.Image user_label = 1;
     */
    userLabel?: Image;
    /**
     * @generated from protobuf field: int64 user_consume_in_room = 2;
     */
    userConsumeInRoom: bigint;
    /**
     * @generated from protobuf field: int64 user_send_gift_cnt_in_room = 3;
     */
    userSendGiftCntInRoom: bigint;
    /**
     * @generated from protobuf field: int64 individual_priority = 4;
     */
    individualPriority: bigint;
    /**
     * @generated from protobuf field: int64 support_pin = 6;
     */
    supportPin: bigint;
    /**
     * @generated from protobuf field: im.SuffixText suffix_text = 7;
     */
    suffixText?: SuffixText;
    /**
     * @generated from protobuf field: int32 im_action = 8;
     */
    imAction: number;
    /**
     * @generated from protobuf field: bool forbidden_profile = 9;
     */
    forbiddenProfile: boolean;
    /**
     * @generated from protobuf field: data.ChatReplyRespInfo reply_resp = 10;
     */
    replyResp?: ChatReplyRespInfo;
}
/**
 * @generated from protobuf message im.SuffixText
 */
export interface SuffixText {
    /**
     * @generated from protobuf field: int64 biz_type = 1;
     */
    bizType: bigint;
    /**
     * @generated from protobuf field: data.Text text = 2;
     */
    text?: Text;
}
/**
 * @generated from protobuf message im.LandscapeAreaCommon
 */
export interface LandscapeAreaCommon {
    /**
     * @generated from protobuf field: bool show_head = 1;
     */
    showHead: boolean;
    /**
     * @generated from protobuf field: bool show_nickname = 2;
     */
    showNickname: boolean;
    /**
     * @generated from protobuf field: bool show_font_color = 3;
     */
    showFontColor: boolean;
    /**
     * @generated from protobuf field: repeated string color_value = 4;
     */
    colorValue: string[];
    /**
     * @generated from protobuf field: repeated int32 comment_type_tags = 5;
     */
    commentTypeTags: number[];
}
/**
 * @generated from protobuf message im.FlexImageStruct
 */
export interface FlexImageStruct {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
    /**
     * @generated from protobuf field: repeated int64 flex_setting = 3;
     */
    flexSetting: bigint[];
    /**
     * @generated from protobuf field: repeated int64 text_setting = 4;
     */
    textSetting: bigint[];
    /**
     * @generated from protobuf field: int64 top_border_height = 5;
     */
    topBorderHeight: bigint;
}
/**
 * @generated from protobuf message im.CommonBubbleConfig
 */
export interface CommonBubbleConfig {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: data.Text rich_text = 3;
     */
    richText?: Text;
    /**
     * @generated from protobuf field: string scheme_url = 4;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: im.FlexImageStruct background_image = 5;
     */
    backgroundImage?: FlexImageStruct;
    /**
     * @generated from protobuf field: data.Image arrow_image = 6;
     */
    arrowImage?: Image;
    /**
     * @generated from protobuf field: int32 message_type = 7;
     */
    messageType: number;
    /**
     * @generated from protobuf field: int32 arrow_position = 8;
     */
    arrowPosition: number;
}
/**
 * @generated from protobuf message im.ActivityInteractiveMessage
 */
export interface ActivityInteractiveMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string extra = 2;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.ActivityMagicAsianGamesMessage
 */
export interface ActivityMagicAsianGamesMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string push_id = 2;
     */
    pushId: string;
    /**
     * @generated from protobuf field: string push_content = 3;
     */
    pushContent: string;
    /**
     * @generated from protobuf field: int32 platform = 4;
     */
    platform: number;
    /**
     * @generated from protobuf field: im.VideoCardPushModule video_card = 5;
     */
    videoCard?: VideoCardPushModule;
    /**
     * @generated from protobuf field: im.MedalRankListModule medal_list = 6;
     */
    medalList?: MedalRankListModule;
    /**
     * @generated from protobuf field: im.CollectModule collect = 7;
     */
    collect?: CollectModule;
    /**
     * @generated from protobuf field: im.ScheduleModule popular_star = 8;
     */
    popularStar?: ScheduleModule;
    /**
     * @generated from protobuf field: im.LatestNewsModule hot_live = 9;
     */
    hotLive?: LatestNewsModule;
}
/**
 * @generated from protobuf message im.LinkInfo
 */
export interface LinkInfo {
    /**
     * @generated from protobuf field: int32 link_type = 1;
     */
    linkType: number;
    /**
     * @generated from protobuf field: string link_url = 2;
     */
    linkUrl: string;
}
/**
 * @generated from protobuf message im.PageFilter
 */
export interface PageFilter {
    /**
     * @generated from protobuf field: string highlight_group_name = 1;
     */
    highlightGroupName: string;
}
/**
 * @generated from protobuf message im.VideoCardSize
 */
export interface VideoCardSize {
    /**
     * @generated from protobuf field: int64 height = 1;
     */
    height: bigint;
    /**
     * @generated from protobuf field: int64 width = 2;
     */
    width: bigint;
}
/**
 * @generated from protobuf message im.StatsParam
 */
export interface StatsParam {
    /**
     * @generated from protobuf field: int64 ep_id = 1;
     */
    epId: bigint;
    /**
     * @generated from protobuf field: int64 sec_id = 2;
     */
    secId: bigint;
    /**
     * @generated from protobuf field: int64 r_id = 3;
     */
    rId: bigint;
}
/**
 * @generated from protobuf message im.VideoCardPushModule
 */
export interface VideoCardPushModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: repeated im.VideoBigCard update_list = 3;
     */
    updateList: VideoBigCard[];
    /**
     * @generated from protobuf field: repeated string delete_list = 4;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.MedalRankListModule
 */
export interface MedalRankListModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: repeated im.RankItem update_list = 3;
     */
    updateList: RankItem[];
    /**
     * @generated from protobuf field: repeated string delete_list = 4;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.CollectModule
 */
export interface CollectModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: repeated im.Highlight update_list = 3;
     */
    updateList: Highlight[];
    /**
     * @generated from protobuf field: repeated string delete_list = 4;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.ScheduleModule
 */
export interface ScheduleModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: repeated im.Match update_list = 3;
     */
    updateList: Match[];
    /**
     * @generated from protobuf field: repeated string delete_list = 4;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.LatestNewsModule
 */
export interface LatestNewsModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: repeated im.News update_list = 3;
     */
    updateList: News[];
    /**
     * @generated from protobuf field: repeated string delete_list = 4;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.VideoBigCard
 */
export interface VideoBigCard {
    /**
     * @generated from protobuf field: int32 card_type = 1;
     */
    cardType: number;
    /**
     * @generated from protobuf field: string cover_url = 2;
     */
    coverUrl: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 4;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: im.VideoBigCard.CornerMark corner_mark = 5;
     */
    cornerMark?: VideoBigCard_CornerMark;
    /**
     * @generated from protobuf field: im.VideoCardSize video_size = 6;
     */
    videoSize?: VideoCardSize;
    /**
     * @generated from protobuf field: string background_url = 7;
     */
    backgroundUrl: string;
    /**
     * @generated from protobuf field: string unique_id = 8;
     */
    uniqueId: string;
    /**
     * @generated from protobuf field: im.StatsParam stats_param = 9;
     */
    statsParam?: StatsParam;
    /**
     * @generated from protobuf field: string video_source = 10;
     */
    videoSource: string;
    /**
     * @generated from protobuf field: bool is_match = 11;
     */
    isMatch: boolean;
    /**
     * @generated from protobuf field: im.LinkInfo link_info = 12;
     */
    linkInfo?: LinkInfo;
    /**
     * @generated from protobuf field: string extra = 255;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.VideoBigCard.CornerMark
 */
export interface VideoBigCard_CornerMark {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: bool show = 2;
     */
    show: boolean;
}
/**
 * @generated from protobuf message im.RankItem
 */
export interface RankItem {
    /**
     * @generated from protobuf field: int64 rank = 1;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: string country = 2;
     */
    country: string;
    /**
     * @generated from protobuf field: string country_img_url = 3;
     */
    countryImgUrl: string;
    /**
     * @generated from protobuf field: int64 gold_medal = 4;
     */
    goldMedal: bigint;
    /**
     * @generated from protobuf field: int64 silver_medal = 5;
     */
    silverMedal: bigint;
    /**
     * @generated from protobuf field: int64 copper_medal = 6;
     */
    copperMedal: bigint;
    /**
     * @generated from protobuf field: int64 total_medal = 7;
     */
    totalMedal: bigint;
    /**
     * @generated from protobuf field: string unique_id = 8;
     */
    uniqueId: string;
    /**
     * @generated from protobuf field: string extra = 255;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.Highlight
 */
export interface Highlight {
    /**
     * @generated from protobuf field: int32 highlight_type = 1;
     */
    highlightType: number;
    /**
     * @generated from protobuf field: string item_id = 2;
     */
    itemId: string;
    /**
     * @generated from protobuf field: string replay_id = 3;
     */
    replayId: string;
    /**
     * @generated from protobuf field: string video_source = 4;
     */
    videoSource: string;
    /**
     * @generated from protobuf field: string unique_id = 5;
     */
    uniqueId: string;
    /**
     * @generated from protobuf field: string cover_img_url = 6;
     */
    coverImgUrl: string;
    /**
     * @generated from protobuf field: int64 play_time_ms = 7;
     */
    playTimeMs: bigint;
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string group_name = 9;
     */
    groupName: string;
}
/**
 * @generated from protobuf message im.AGMatchInfo
 */
export interface AGMatchInfo {
    /**
     * @generated from protobuf field: string l_country = 1;
     */
    lCountry: string;
    /**
     * @generated from protobuf field: string r_country = 2;
     */
    rCountry: string;
    /**
     * @generated from protobuf field: int64 l_score = 3;
     */
    lScore: bigint;
    /**
     * @generated from protobuf field: int64 r_score = 4;
     */
    rScore: bigint;
    /**
     * @generated from protobuf field: string l_country_img_url = 5;
     */
    lCountryImgUrl: string;
    /**
     * @generated from protobuf field: string r_country_img_url = 6;
     */
    rCountryImgUrl: string;
}
/**
 * @generated from protobuf message im.MatchLive
 */
export interface MatchLive {
    /**
     * @generated from protobuf field: int32 ag_live_status = 1;
     */
    agLiveStatus: number;
    /**
     * @generated from protobuf field: string appointment_id = 2;
     */
    appointmentId: string;
    /**
     * @generated from protobuf field: string room_id = 3;
     */
    roomId: string;
    /**
     * @generated from protobuf field: bool has_subscribe = 4;
     */
    hasSubscribe: boolean;
    /**
     * @generated from protobuf field: string camera_id = 5;
     */
    cameraId: string;
}
/**
 * @generated from protobuf message im.Match
 */
export interface Match {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 start_time_ms = 2;
     */
    startTimeMs: bigint;
    /**
     * @generated from protobuf field: string focus = 3;
     */
    focus: string;
    /**
     * @generated from protobuf field: int32 tag_type = 4;
     */
    tagType: number;
    /**
     * @generated from protobuf field: im.AGMatchInfo ag_match_info = 5;
     */
    agMatchInfo?: AGMatchInfo;
    /**
     * @generated from protobuf field: im.MatchLive match_live = 6;
     */
    matchLive?: MatchLive;
    /**
     * @generated from protobuf field: string unique_id = 7;
     */
    uniqueId: string;
}
/**
 * @generated from protobuf message im.News
 */
export interface News {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 update_time_ms = 2;
     */
    updateTimeMs: bigint;
    /**
     * @generated from protobuf field: im.LinkInfo link_info = 3;
     */
    linkInfo?: LinkInfo;
    /**
     * @generated from protobuf field: string unique_id = 4;
     */
    uniqueId: string;
}
/**
 * @generated from protobuf message im.MagicGestureActivityMessage
 */
export interface MagicGestureActivityMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: string effect_id = 3;
     */
    effectId: string;
    /**
     * @generated from protobuf field: int32 action_type = 4;
     */
    actionType: number;
    /**
     * @generated from protobuf field: string action_schema = 5;
     */
    actionSchema: string;
    /**
     * @generated from protobuf field: string biz_id = 6;
     */
    bizId: string;
}
/**
 * @generated from protobuf message im.ActivityMagicMessage
 */
export interface ActivityMagicMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string push_id = 2;
     */
    pushId: string;
    /**
     * @generated from protobuf field: string push_content = 3;
     */
    pushContent: string;
}
/**
 * @generated from protobuf message im.PixActivityMessage
 */
export interface PixActivityMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 current_level = 2;
     */
    currentLevel: number;
    /**
     * @generated from protobuf field: bool can_change_prop = 3;
     */
    canChangeProp: boolean;
}
/**
 * @generated from protobuf message im.PrizeNoticeMessage
 */
export interface PrizeNoticeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 asset_id = 2;
     */
    assetId: bigint;
    /**
     * @generated from protobuf field: im.ImageInfo image_info = 3;
     */
    imageInfo?: ImageInfo;
    /**
     * @generated from protobuf field: data.Image landscape_bg_img = 4;
     */
    landscapeBgImg?: Image;
    /**
     * @generated from protobuf field: string landscape_content = 5;
     */
    landscapeContent: string;
    /**
     * @generated from protobuf field: int64 scene_context_id = 6;
     */
    sceneContextId: bigint;
    /**
     * @generated from protobuf field: int32 landscape_height = 7;
     */
    landscapeHeight: number;
    /**
     * @generated from protobuf field: int32 play_priority = 8;
     */
    playPriority: number;
    /**
     * @generated from protobuf field: bool use_separate_player = 10;
     */
    useSeparatePlayer: boolean;
}
/**
 * @generated from protobuf message im.ImageInfo
 */
export interface ImageInfo {
    /**
     * @generated from protobuf field: data.Image img = 1;
     */
    img?: Image;
    /**
     * @generated from protobuf field: int32 start = 2;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 duration = 3;
     */
    duration: number;
    /**
     * @generated from protobuf field: int32 x = 4;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 5;
     */
    y: number;
    /**
     * @generated from protobuf field: int32 width = 6;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 7;
     */
    height: number;
    /**
     * @generated from protobuf field: bool need_circle = 8;
     */
    needCircle: boolean;
}
/**
 * @generated from protobuf message im.AdminPrivilegeMessage
 */
export interface AdminPrivilegeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.AdminPrivilegeStruct data = 2;
     */
    data?: AdminPrivilegeStruct;
}
/**
 * @generated from protobuf message im.AdminPrivilegeStruct
 */
export interface AdminPrivilegeStruct {
    /**
     * @generated from protobuf field: int32 privilege = 1;
     */
    privilege: number;
    /**
     * @generated from protobuf field: int64 op = 2;
     */
    op: bigint;
}
/**
 * @generated from protobuf message im.AdminRecordHandleMessage
 */
export interface AdminRecordHandleMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 handle_type = 2;
     */
    handleType: number;
}
/**
 * @generated from protobuf message im.AdminData
 */
export interface AdminData {
    /**
     * @generated from protobuf field: int64 uid = 1;
     */
    uid: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message im.TextExtraItem
 */
export interface TextExtraItem {
    /**
     * @generated from protobuf field: int32 start = 1;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 stop = 2;
     */
    stop: number;
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number;
    /**
     * @generated from protobuf field: string user_id = 4;
     */
    userId: string;
    /**
     * @generated from protobuf field: string hashtag_name = 5;
     */
    hashtagName: string;
    /**
     * @generated from protobuf field: string hashtag_id = 6;
     */
    hashtagId: string;
    /**
     * @generated from protobuf field: bool is_commerce = 7;
     */
    isCommerce: boolean;
    /**
     * @generated from protobuf field: string aweme_id = 8;
     */
    awemeId: string;
    /**
     * @generated from protobuf field: int32 sub_type = 9;
     */
    subType: number;
}
/**
 * @generated from protobuf message im.AdminRecordMessage
 */
export interface AdminRecordMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.AdminData admin = 2;
     */
    admin?: AdminData;
    /**
     * @generated from protobuf field: int64 item_id = 3;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: int64 draft_id = 4;
     */
    draftId: bigint;
    /**
     * @generated from protobuf field: string video_text = 5;
     */
    videoText: string;
    /**
     * @generated from protobuf field: repeated im.TextExtraItem video_text_extra = 6;
     */
    videoTextExtra: TextExtraItem[];
}
/**
 * @generated from protobuf message im.AnchorBoostMessage
 */
export interface AnchorBoostMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.AnchorBoost data = 2;
     */
    data?: AnchorBoost;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 3;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.AnchorBoost
 */
export interface AnchorBoost {
    /**
     * @generated from protobuf field: int64 event_name = 1;
     */
    eventName: bigint;
    /**
     * @generated from protobuf field: int64 anchor_id = 2;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: int32 live_id = 3;
     */
    liveId: number;
    /**
     * @generated from protobuf field: int32 event_type = 4;
     */
    eventType: number;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
}
/**
 * @generated from protobuf message im.AnswerReviewMessage
 */
export interface AnswerReviewMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 answerReviewMsgTypeEnum = 2;
     */
    answerReviewMsgTypeEnum: number;
    /**
     * @generated from protobuf field: int64 answer_id = 3;
     */
    answerId: bigint;
    /**
     * @generated from protobuf field: int64 chat_id = 4;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: int32 answerReviewResTypeEnum = 5;
     */
    answerReviewResTypeEnum: number;
    /**
     * @generated from protobuf field: int64 video_pin_id = 6;
     */
    videoPinId: bigint;
    /**
     * @generated from protobuf field: int64 original_msg_id = 7;
     */
    originalMsgId: bigint;
    /**
     * @generated from protobuf field: int64 pin_id = 8;
     */
    pinId: bigint;
}
/**
 * @generated from protobuf message im.AssetEffectUtilMessage
 */
export interface AssetEffectUtilMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 asset_id = 2;
     */
    assetId: bigint;
    /**
     * @generated from protobuf field: int64 priority = 3;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: int64 price = 4;
     */
    price: bigint;
    /**
     * @generated from protobuf field: data.Text text = 5;
     */
    text?: Text;
    /**
     * @generated from protobuf field: int64 text_width = 6;
     */
    textWidth: bigint;
    /**
     * @generated from protobuf field: int64 text_heitht = 7;
     */
    textHeitht: bigint;
    /**
     * @generated from protobuf field: string tracking = 8;
     */
    tracking: string;
    /**
     * @generated from protobuf field: string dress_id = 9;
     */
    dressId: string;
    /**
     * @generated from protobuf field: repeated im.EffectUtilImageInfo images = 10;
     */
    images: EffectUtilImageInfo[];
    /**
     * @generated from protobuf field: repeated im.EffectUtilTextInfo texts = 20;
     */
    texts: EffectUtilTextInfo[];
    /**
     * @generated from protobuf field: string finish_self_schema = 21;
     */
    finishSelfSchema: string;
}
/**
 * @generated from protobuf message im.EffectUtilImageInfo
 */
export interface EffectUtilImageInfo {
    /**
     * @generated from protobuf field: string placeholder_key = 1;
     */
    placeholderKey: string;
    /**
     * @generated from protobuf field: data.Image mix_image = 2;
     */
    mixImage?: Image;
}
/**
 * @generated from protobuf message im.EffectUtilTextInfo
 */
export interface EffectUtilTextInfo {
    /**
     * @generated from protobuf field: string placeholder_key = 1;
     */
    placeholderKey: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 font_size = 3;
     */
    fontSize: bigint;
    /**
     * @generated from protobuf field: string font_color = 4;
     */
    fontColor: string;
}
/**
 * @generated from protobuf message im.AssetMessage
 */
export interface AssetMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 asset_id = 2;
     */
    assetId: bigint;
    /**
     * @generated from protobuf field: data.Text panel_display_text = 3;
     */
    panelDisplayText?: Text;
    /**
     * @generated from protobuf field: bool show_message = 4;
     */
    showMessage: boolean;
    /**
     * @generated from protobuf field: bool show_panel = 5;
     */
    showPanel: boolean;
    /**
     * @generated from protobuf field: data.User user = 6;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.User to_user = 7;
     */
    toUser?: User;
    /**
     * @generated from protobuf field: data.GiftIMPriority priority = 8;
     */
    priority?: GiftIMPriority;
    /**
     * @generated from protobuf field: string log_id = 9;
     */
    logId: string;
    /**
     * @generated from protobuf field: int32 play_priority = 10;
     */
    playPriority: number;
}
/**
 * @generated from protobuf message im.AudioBGImgMessage
 */
export interface AudioBGImgMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.AudioBGData bg_list = 2;
     */
    bgList?: AudioBGData;
    /**
     * @generated from protobuf field: int32 ReviewPass = 3 [json_name = "ReviewPass"];
     */
    reviewPass: number;
    /**
     * @generated from protobuf field: int32 bg_type = 4;
     */
    bgType: number;
    /**
     * @generated from protobuf field: string show_text = 5;
     */
    showText: string;
}
/**
 * @generated from protobuf message im.AudioChatMessage
 */
export interface AudioChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string audio_url = 4;
     */
    audioUrl: string;
    /**
     * @generated from protobuf field: int64 audio_duration = 5;
     */
    audioDuration: bigint;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 6;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.AuthorizationNotifyMessage
 */
export interface AuthorizationNotifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string from = 2;
     */
    from: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string style = 4;
     */
    style: string;
    /**
     * @generated from protobuf field: im.AuthorizationNotifyMessage.ContentBlock user_content = 6;
     */
    userContent?: AuthorizationNotifyMessage_ContentBlock;
    /**
     * @generated from protobuf field: im.AuthorizationNotifyMessage.RelationBlock user_relation = 7;
     */
    userRelation?: AuthorizationNotifyMessage_RelationBlock;
}
/**
 * @generated from protobuf message im.AuthorizationNotifyMessage.ContentBlock
 */
export interface AuthorizationNotifyMessage_ContentBlock {
    /**
     * @generated from protobuf field: bool show = 1;
     */
    show: boolean;
    /**
     * @generated from protobuf field: bool is_authorized = 2;
     */
    isAuthorized: boolean;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: string detail = 5;
     */
    detail: string;
}
/**
 * @generated from protobuf message im.AuthorizationNotifyMessage.RelationBlock
 */
export interface AuthorizationNotifyMessage_RelationBlock {
    /**
     * @generated from protobuf field: bool show = 1;
     */
    show: boolean;
    /**
     * @generated from protobuf field: bool is_authorized = 2;
     */
    isAuthorized: boolean;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: string detail = 5;
     */
    detail: string;
}
/**
 * @generated from protobuf message im.AutoCoverMessage
 */
export interface AutoCoverMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Image image = 2;
     */
    image?: Image;
}
/**
 * @generated from protobuf message im.AwemeShopExplainMessage
 */
export interface AwemeShopExplainMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.AwemeShopExplainMessage.Extra extra = 2;
     */
    extra?: AwemeShopExplainMessage_Extra;
}
/**
 * @generated from protobuf message im.AwemeShopExplainMessage.Extra
 */
export interface AwemeShopExplainMessage_Extra {
    /**
     * @generated from protobuf field: int64 promotion_id = 1;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: bool active = 2;
     */
    active: boolean;
}
/**
 * @generated from protobuf message im.BackRecordVideoMessage
 */
export interface BackRecordVideoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string m3u8_url = 2 [json_name = "m3u8Url"];
     */
    m3U8Url: string;
    /**
     * @generated from protobuf field: repeated string ts_urls = 3;
     */
    tsUrls: string[];
    /**
     * @generated from protobuf field: string execution_id = 4;
     */
    executionId: string;
    /**
     * @generated from protobuf field: bool succeed = 5;
     */
    succeed: boolean;
    /**
     * @generated from protobuf field: int64 start_time = 6;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 7;
     */
    endTime: bigint;
}
/**
 * @generated from protobuf message im.BattleAutoMatchMessage
 */
export interface BattleAutoMatchMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.BattleAutoMatchMessage.ResponseData data = 2;
     */
    data?: BattleAutoMatchMessage_ResponseData;
}
/**
 * @generated from protobuf message im.BattleAutoMatchMessage.RivalInfo
 */
export interface BattleAutoMatchMessage_RivalInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Room room = 2;
     */
    room?: Room;
}
/**
 * @generated from protobuf message im.BattleAutoMatchMessage.PreviewUser
 */
export interface BattleAutoMatchMessage_PreviewUser {
    /**
     * @generated from protobuf field: string nickname = 1;
     */
    nickname: string;
    /**
     * @generated from protobuf field: data.Image avatar = 2;
     */
    avatar?: Image;
}
/**
 * @generated from protobuf message im.BattleAutoMatchMessage.ResponseData
 */
export interface BattleAutoMatchMessage_ResponseData {
    /**
     * @generated from protobuf field: string default_content = 1;
     */
    defaultContent: string;
    /**
     * @generated from protobuf field: data.Image default_avatar = 2;
     */
    defaultAvatar?: Image;
    /**
     * @generated from protobuf field: int64 rival_user_id = 3;
     */
    rivalUserId: bigint;
    /**
     * @generated from protobuf field: data.Room rival_room = 4;
     */
    rivalRoom?: Room;
    /**
     * @generated from protobuf field: repeated im.BattleAutoMatchMessage.PreviewUser preview_user_list = 5;
     */
    previewUserList: BattleAutoMatchMessage_PreviewUser[];
    /**
     * @generated from protobuf field: int64 expect_time = 6;
     */
    expectTime: bigint;
    /**
     * @generated from protobuf field: string rival_user_id_str = 7;
     */
    rivalUserIdStr: string;
    /**
     * @generated from protobuf field: bool can_high_way = 8;
     */
    canHighWay: boolean;
    /**
     * @generated from protobuf field: int64 max_wait_time = 9;
     */
    maxWaitTime: bigint;
    /**
     * @generated from protobuf field: string sign_extra = 10;
     */
    signExtra: string;
    /**
     * @generated from protobuf field: repeated im.BattleAutoMatchMessage.RivalInfo rivals = 11;
     */
    rivals: BattleAutoMatchMessage_RivalInfo[];
    /**
     * @generated from protobuf field: string battle_attached_info = 19;
     */
    battleAttachedInfo: string;
    /**
     * @generated from protobuf field: string channel_id_str = 20;
     */
    channelIdStr: string;
    /**
     * @generated from protobuf field: int64 match_type = 21;
     */
    matchType: bigint;
}
/**
 * @generated from protobuf message im.BattleCancelMessage
 */
export interface BattleCancelMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 channel_id = 2;
     */
    channelId: bigint;
}
/**
 * @generated from protobuf message im.BattleFeedBackCardMessage
 */
export interface BattleFeedBackCardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 rival_uid = 2;
     */
    rivalUid: bigint;
    /**
     * @generated from protobuf field: int32 feedback_card_type = 3;
     */
    feedbackCardType: number;
    /**
     * @generated from protobuf field: data.FeedbackCard feedback_card = 4;
     */
    feedbackCard?: FeedbackCard;
    /**
     * @generated from protobuf field: int64 battle_id = 5;
     */
    battleId: bigint;
    /**
     * @generated from protobuf field: int64 channel_id = 6;
     */
    channelId: bigint;
}
/**
 * @generated from protobuf message im.BattleFrontRankMessage
 */
export interface BattleFrontRankMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.BattleInviteMessage
 */
export interface BattleInviteMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 invite_type = 2;
     */
    inviteType: number;
    /**
     * @generated from protobuf field: int64 channel_id = 3;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: string sign_extra = 4;
     */
    signExtra: string;
    /**
     * @generated from protobuf field: int64 invite_uid = 5;
     */
    inviteUid: bigint;
    /**
     * @generated from protobuf field: int64 battle_id = 6;
     */
    battleId: bigint;
    /**
     * @generated from protobuf field: string multiple_again_prompts = 7;
     */
    multipleAgainPrompts: string;
    /**
     * @generated from protobuf field: data.PanelTitle panel_title = 8;
     */
    panelTitle?: PanelTitle;
    /**
     * @generated from protobuf field: int32 scene = 9;
     */
    scene: number;
    /**
     * @generated from protobuf field: string invite_title = 10;
     */
    inviteTitle: string;
    /**
     * @generated from protobuf field: string invite_sub_title = 11;
     */
    inviteSubTitle: string;
    /**
     * @generated from protobuf field: int64 wait_sec = 12;
     */
    waitSec: bigint;
    /**
     * @generated from protobuf field: data.BattleConfigSetting battle_config_setting = 14;
     */
    battleConfigSetting?: BattleConfigSetting;
    /**
     * @generated from protobuf field: int64 duration_time = 15;
     */
    durationTime: bigint;
    /**
     * @generated from protobuf field: int32 multi_pk_mode = 16;
     */
    multiPkMode: number;
    /**
     * @generated from protobuf field: string client_attached_info = 17;
     */
    clientAttachedInfo: string;
}
/**
 * @generated from protobuf message im.BattleModeMessage
 */
export interface BattleModeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 mode = 2;
     */
    mode: bigint;
    /**
     * @generated from protobuf field: im.BattleModeMessage.StealTowerData steal_tower_data = 3;
     */
    stealTowerData?: BattleModeMessage_StealTowerData;
    /**
     * @generated from protobuf field: int64 now = 4;
     */
    now: bigint;
}
/**
 * @generated from protobuf message im.BattleModeMessage.StealTowerData
 */
export interface BattleModeMessage_StealTowerData {
    /**
     * @generated from protobuf field: int64 start_time = 1;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 finish_time = 2;
     */
    finishTime: bigint;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 target_score = 4;
     */
    targetScore: bigint;
    /**
     * @generated from protobuf field: int64 attacker_id = 5;
     */
    attackerId: bigint;
    /**
     * @generated from protobuf field: bool finish = 6;
     */
    finish: boolean;
    /**
     * @generated from protobuf field: int64 win = 7;
     */
    win: bigint;
    /**
     * @generated from protobuf field: int64 open_score = 8;
     */
    openScore: bigint;
    /**
     * @generated from protobuf field: int64 count = 9;
     */
    count: bigint;
}
/**
 * @generated from protobuf message im.BattleMultiMatchMessage
 */
export interface BattleMultiMatchMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 match_status = 2;
     */
    matchStatus: number;
    /**
     * @generated from protobuf field: int64 expect_time = 3;
     */
    expectTime: bigint;
    /**
     * @generated from protobuf field: repeated im.BattleMultiMatchMessage.PreviewUser preview_user_list = 4;
     */
    previewUserList: BattleMultiMatchMessage_PreviewUser[];
    /**
     * @generated from protobuf field: int64 default_wait_limit = 5;
     */
    defaultWaitLimit: bigint;
    /**
     * @generated from protobuf field: int64 invite_limit_sec = 6;
     */
    inviteLimitSec: bigint;
    /**
     * @generated from protobuf field: int64 match_type = 7;
     */
    matchType: bigint;
}
/**
 * @generated from protobuf message im.BattleMultiMatchMessage.PreviewUser
 */
export interface BattleMultiMatchMessage_PreviewUser {
    /**
     * @generated from protobuf field: string nickname = 1;
     */
    nickname: string;
    /**
     * @generated from protobuf field: data.Image avatar = 2;
     */
    avatar?: Image;
}
/**
 * @generated from protobuf message im.BattleNotifyMessage
 */
export interface BattleNotifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 notify_type = 3;
     */
    notifyType: number;
    /**
     * @generated from protobuf field: int64 continue_seconds = 4;
     */
    continueSeconds: bigint;
}
/**
 * @generated from protobuf message im.PrecisionMatch
 */
export interface PrecisionMatch {
    /**
     * @generated from protobuf field: int64 sponsor_id = 1;
     */
    sponsorId: bigint;
    /**
     * @generated from protobuf field: repeated im.PrecisionMatch.Matcher matchers = 2;
     */
    matchers: PrecisionMatch_Matcher[];
    /**
     * @generated from protobuf field: string match_reason = 3;
     */
    matchReason: string;
    /**
     * @generated from protobuf field: int64 wait_seconds = 4;
     */
    waitSeconds: bigint;
    /**
     * @generated from protobuf field: int64 precision_match_id = 5;
     */
    precisionMatchId: bigint;
    /**
     * @generated from protobuf field: string activity_name = 6;
     */
    activityName: string;
    /**
     * @generated from protobuf field: string recommend_reason = 7;
     */
    recommendReason: string;
    /**
     * @generated from protobuf field: int32 source = 9;
     */
    source: number;
    /**
     * @generated from protobuf field: string not_disturb_text = 10;
     */
    notDisturbText: string;
    /**
     * @generated from protobuf field: int64 flex_activity_id = 11;
     */
    flexActivityId: bigint;
    /**
     * @generated from protobuf field: int64 duration = 12;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string battle_attached_info = 13;
     */
    battleAttachedInfo: string;
    /**
     * @generated from protobuf field: string sign_extra = 8;
     */
    signExtra: string;
}
/**
 * @generated from protobuf message im.PrecisionMatch.Matcher
 */
export interface PrecisionMatch_Matcher {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Room room = 2;
     */
    room?: Room;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated data.BattleRivalTag tags = 4;
     */
    tags: BattleRivalTag[];
    /**
     * @generated from protobuf field: string desc_text = 5;
     */
    descText: string;
}
/**
 * @generated from protobuf message im.BattlePrecisionMatchMessage
 */
export interface BattlePrecisionMatchMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.PrecisionMatch precision_match = 2;
     */
    precisionMatch?: PrecisionMatch;
}
/**
 * @generated from protobuf message im.BattleRejectMessage
 */
export interface BattleRejectMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 channel_id = 2;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 battle_id = 3;
     */
    battleId: bigint;
    /**
     * @generated from protobuf field: int64 reject_uid = 4;
     */
    rejectUid: bigint;
    /**
     * @generated from protobuf field: string multiple_again_prompts = 5;
     */
    multipleAgainPrompts: string;
    /**
     * @generated from protobuf field: int32 invite_type = 6;
     */
    inviteType: number;
}
/**
 * @generated from protobuf message im.BattleSeasonPKResultMessage
 */
export interface BattleSeasonPKResultMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.BattleSeasonPKResultMessage.PKResult pk_result = 2;
     */
    pkResult?: BattleSeasonPKResultMessage_PKResult;
    /**
     * @generated from protobuf field: im.BattleSeasonPKResultMessage.UpgradeResult upgrade_result = 3;
     */
    upgradeResult?: BattleSeasonPKResultMessage_UpgradeResult;
}
/**
 * @generated from protobuf message im.BattleSeasonPKResultMessage.PKResult
 */
export interface BattleSeasonPKResultMessage_PKResult {
    /**
     * @generated from protobuf field: data.Image result_img = 1;
     */
    resultImg?: Image;
    /**
     * @generated from protobuf field: data.Image bg_img = 2;
     */
    bgImg?: Image;
    /**
     * @generated from protobuf field: string result_str = 3;
     */
    resultStr: string;
}
/**
 * @generated from protobuf message im.BattleSeasonPKResultMessage.UpgradeResult
 */
export interface BattleSeasonPKResultMessage_UpgradeResult {
    /**
     * @generated from protobuf field: data.Image grade_img = 1;
     */
    gradeImg?: Image;
    /**
     * @generated from protobuf field: data.Image upgrade_img = 2;
     */
    upgradeImg?: Image;
    /**
     * @generated from protobuf field: string upgrade_desc = 3;
     */
    upgradeDesc: string;
    /**
     * @generated from protobuf field: data.Image desc_bg_img = 4;
     */
    descBgImg?: Image;
}
/**
 * @generated from protobuf message im.BattleTeamTaskAskMessage
 */
export interface BattleTeamTaskAskMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string team_task_json = 2;
     */
    teamTaskJson: string;
}
/**
 * @generated from protobuf message im.BattleTeamTaskMessage
 */
export interface BattleTeamTaskMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.TeamTask team_task = 2;
     */
    teamTask?: TeamTask;
    /**
     * @generated from protobuf field: string team_task_json = 3;
     */
    teamTaskJson: string;
}
/**
 * @generated from protobuf message im.BattleUseCardMessage
 */
export interface BattleUseCardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.ItemCardInfo info = 2;
     */
    info?: ItemCardInfo;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.BeginnerGuideMessage
 */
export interface BeginnerGuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 message_type = 2;
     */
    messageType: number;
    /**
     * @generated from protobuf field: string prompts = 3;
     */
    prompts: string;
}
/**
 * @generated from protobuf message im.LinkmicBigEventMessage
 */
export interface LinkmicBigEventMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.InitLinkmicContent init_linkmic_content = 3;
     */
    initLinkmicContent?: InitLinkmicContent;
    /**
     * @generated from protobuf field: im.SwitchSceneContent switch_scene_content = 4;
     */
    switchSceneContent?: SwitchSceneContent;
    /**
     * @generated from protobuf field: im.SwitchEarphoneMonitorContent switch_earphone_monitor_content = 5;
     */
    switchEarphoneMonitorContent?: SwitchEarphoneMonitorContent;
    /**
     * @generated from protobuf field: im.SwitchKtvModeContent switch_ktv_mode_content = 6;
     */
    switchKtvModeContent?: SwitchKtvModeContent;
    /**
     * @generated from protobuf field: im.SwitchLyricStatusContent switch_lyric_status_content = 7;
     */
    switchLyricStatusContent?: SwitchLyricStatusContent;
    /**
     * @generated from protobuf field: im.SwitchFullSongStatusContent switch_full_song_status_content = 8;
     */
    switchFullSongStatusContent?: SwitchFullSongStatusContent;
    /**
     * @generated from protobuf field: im.SwitchTuningEffectContent switch_tuning_effect_content = 9;
     */
    switchTuningEffectContent?: SwitchTuningEffectContent;
}
/**
 * @generated from protobuf message im.InitLinkmicContent
 */
export interface InitLinkmicContent {
    /**
     * @generated from protobuf field: int32 target_mode = 1;
     */
    targetMode: number;
}
/**
 * @generated from protobuf message im.SwitchSceneContent
 */
export interface SwitchSceneContent {
    /**
     * @generated from protobuf field: int32 target_mode = 1;
     */
    targetMode: number;
}
/**
 * @generated from protobuf message im.SwitchEarphoneMonitorContent
 */
export interface SwitchEarphoneMonitorContent {
    /**
     * @generated from protobuf field: int32 to_status = 1;
     */
    toStatus: number;
}
/**
 * @generated from protobuf message im.SwitchKtvModeContent
 */
export interface SwitchKtvModeContent {
    /**
     * @generated from protobuf field: int32 ktv_mode = 1;
     */
    ktvMode: number;
}
/**
 * @generated from protobuf message im.SwitchLyricStatusContent
 */
export interface SwitchLyricStatusContent {
    /**
     * @generated from protobuf field: int32 to_status = 1;
     */
    toStatus: number;
}
/**
 * @generated from protobuf message im.SwitchFullSongStatusContent
 */
export interface SwitchFullSongStatusContent {
    /**
     * @generated from protobuf field: int32 to_status = 1;
     */
    toStatus: number;
}
/**
 * @generated from protobuf message im.SwitchTuningEffectContent
 */
export interface SwitchTuningEffectContent {
    /**
     * @generated from protobuf field: string to_effect_name = 1;
     */
    toEffectName: string;
}
/**
 * @generated from protobuf message im.BridgeData
 */
export interface BridgeData {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string bridge_message_json = 2;
     */
    bridgeMessageJson: string;
}
/**
 * @generated from protobuf message im.BridgeMessage
 */
export interface BridgeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.BridgeData bridge = 2;
     */
    bridge?: BridgeData;
}
/**
 * @generated from protobuf message im.BrotherhoodMessage
 */
export interface BrotherhoodMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.CarBallShowMessage
 */
export interface CarBallShowMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool is_show = 2;
     */
    isShow: boolean;
}
/**
 * @generated from protobuf message im.CarSeriesInfoMessage
 */
export interface CarSeriesInfoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 action_type = 2;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: int64 series_id = 3;
     */
    seriesId: bigint;
    /**
     * @generated from protobuf field: string series_name = 4;
     */
    seriesName: string;
    /**
     * @generated from protobuf field: string official_price = 5;
     */
    officialPrice: string;
    /**
     * @generated from protobuf field: string image_url = 6;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: string open_url = 7;
     */
    openUrl: string;
}
/**
 * @generated from protobuf message im.CarnivalMessage
 */
export interface CarnivalMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.CombinedText text = 2;
     */
    text?: CombinedText;
    /**
     * @generated from protobuf field: int64 carnival_seq_id = 3;
     */
    carnivalSeqId: bigint;
    /**
     * @generated from protobuf field: int64 danmaku_style_type = 4;
     */
    danmakuStyleType: bigint;
    /**
     * @generated from protobuf field: int32 special_mark = 5;
     */
    specialMark: number;
    /**
     * @generated from protobuf field: int64 priority = 6;
     */
    priority: bigint;
}
/**
 * @generated from protobuf message im.CategoryChangeMessage
 */
export interface CategoryChangeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string category_id = 2;
     */
    categoryId: string;
    /**
     * @generated from protobuf field: string category_name = 3;
     */
    categoryName: string;
    /**
     * @generated from protobuf field: string challenge_id = 4;
     */
    challengeId: string;
    /**
     * @generated from protobuf field: string challenge_name = 5;
     */
    challengeName: string;
}
/**
 * @generated from protobuf message im.ChatCarnivalMessage
 */
export interface ChatCarnivalMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 notify_type = 2;
     */
    notifyType: bigint;
    /**
     * @generated from protobuf field: int64 anchor_start_timestamp = 3;
     */
    anchorStartTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 anchor_start_second = 4;
     */
    anchorStartSecond: bigint;
    /**
     * @generated from protobuf field: int64 user_start_timestamp = 5;
     */
    userStartTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 user_start_second = 6;
     */
    userStartSecond: bigint;
    /**
     * @generated from protobuf field: int64 duration = 7;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string background_color = 8;
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: data.Image title_image = 9;
     */
    titleImage?: Image;
    /**
     * @generated from protobuf field: string pre_content = 10;
     */
    preContent: string;
    /**
     * @generated from protobuf field: string content = 11;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 orientations = 12;
     */
    orientations: bigint;
    /**
     * @generated from protobuf field: int64 move_speed = 13;
     */
    moveSpeed: bigint;
    /**
     * @generated from protobuf field: repeated im.ChatItem chat_style = 14;
     */
    chatStyle: ChatItem[];
    /**
     * @generated from protobuf field: repeated im.EggItem egg_style = 15;
     */
    eggStyle: EggItem[];
    /**
     * @generated from protobuf field: int64 word_orientation = 16;
     */
    wordOrientation: bigint;
    /**
     * @generated from protobuf field: int64 move_direction = 17;
     */
    moveDirection: bigint;
    /**
     * @generated from protobuf field: repeated int64 egg_show_range = 18;
     */
    eggShowRange: bigint[];
    /**
     * @generated from protobuf field: repeated int64 size_and_alpha = 19;
     */
    sizeAndAlpha: bigint[];
    /**
     * @generated from protobuf field: repeated int64 vertical_offset = 20;
     */
    verticalOffset: bigint[];
    /**
     * @generated from protobuf field: int64 path = 21;
     */
    path: bigint;
    /**
     * @generated from protobuf field: string word_color = 22;
     */
    wordColor: string;
    /**
     * @generated from protobuf field: int64 show_webp = 23;
     */
    showWebp: bigint;
    /**
     * @generated from protobuf field: int64 use_privilege_region = 24;
     */
    usePrivilegeRegion: bigint;
    /**
     * @generated from protobuf field: int64 can_open_contour = 25;
     */
    canOpenContour: bigint;
    /**
     * @generated from protobuf field: int64 support_show_type = 26;
     */
    supportShowType: bigint;
}
/**
 * @generated from protobuf message im.EggItem
 */
export interface EggItem {
    /**
     * @generated from protobuf field: data.Image background = 1;
     */
    background?: Image;
    /**
     * @generated from protobuf field: int64 background_hight = 2;
     */
    backgroundHight: bigint;
    /**
     * @generated from protobuf field: int64 background_width = 3;
     */
    backgroundWidth: bigint;
    /**
     * @generated from protobuf field: int64 use_rate = 4;
     */
    useRate: bigint;
    /**
     * @generated from protobuf field: int64 is_dynamic_egg = 5;
     */
    isDynamicEgg: bigint;
}
/**
 * @generated from protobuf message im.ChatItem
 */
export interface ChatItem {
    /**
     * @generated from protobuf field: int64 head_size = 1;
     */
    headSize: bigint;
    /**
     * @generated from protobuf field: int64 content_size = 2;
     */
    contentSize: bigint;
    /**
     * @generated from protobuf field: string content_color = 3;
     */
    contentColor: string;
    /**
     * @generated from protobuf field: im.FlexImageStruct background = 4;
     */
    background?: FlexImageStruct;
    /**
     * @generated from protobuf field: int64 background_hight = 5;
     */
    backgroundHight: bigint;
    /**
     * @generated from protobuf field: int64 background_width = 6;
     */
    backgroundWidth: bigint;
    /**
     * @generated from protobuf field: int64 use_rate = 7;
     */
    useRate: bigint;
}
/**
 * @generated from protobuf message im.ChatMessage
 */
export interface ChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: bool visible_to_sender = 4;
     */
    visibleToSender: boolean;
    /**
     * @generated from protobuf field: data.Image background_image = 5;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: string full_screen_text_color = 6;
     */
    fullScreenTextColor: string;
    /**
     * @generated from protobuf field: data.Image background_image_v2 = 7;
     */
    backgroundImageV2?: Image;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 9;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: data.Image gift_image = 10;
     */
    giftImage?: Image;
    /**
     * @generated from protobuf field: int64 agree_msg_id = 11;
     */
    agreeMsgId: bigint;
    /**
     * @generated from protobuf field: int32 priority_level = 12;
     */
    priorityLevel: number;
    /**
     * @generated from protobuf field: im.LandscapeAreaCommon landscape_area_common = 13;
     */
    landscapeAreaCommon?: LandscapeAreaCommon;
    /**
     * @generated from protobuf field: int64 event_time = 15;
     */
    eventTime: bigint;
    /**
     * @generated from protobuf field: bool send_review = 16;
     */
    sendReview: boolean;
    /**
     * @generated from protobuf field: bool from_intercom = 17;
     */
    fromIntercom: boolean;
    /**
     * @generated from protobuf field: bool intercom_hide_user_card = 18;
     */
    intercomHideUserCard: boolean;
    /**
     * @generated from protobuf field: repeated int32 chat_tags = 19;
     */
    chatTags: number[];
    /**
     * @generated from protobuf field: int64 chat_by = 20;
     */
    chatBy: bigint;
    /**
     * @generated from protobuf field: int32 individual_chat_priority = 21;
     */
    individualChatPriority: number;
    /**
     * @generated from protobuf field: data.Text rtf_content = 40;
     */
    rtfContent?: Text;
    /**
     * @generated from protobuf field: data.Text rtf_content_v2 = 41;
     */
    rtfContentV2?: Text;
}
/**
 * @generated from protobuf message im.EmojiChatMessage
 */
export interface EmojiChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 emoji_id = 3;
     */
    emojiId: bigint;
    /**
     * @generated from protobuf field: data.Text emoji_content = 4;
     */
    emojiContent?: Text;
    /**
     * @generated from protobuf field: string default_content = 5;
     */
    defaultContent: string;
    /**
     * @generated from protobuf field: data.Image background_image = 6;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: bool from_intercom = 7;
     */
    fromIntercom: boolean;
    /**
     * @generated from protobuf field: bool intercom_hide_user_card = 8;
     */
    intercomHideUserCard: boolean;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 9;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.FriendChatMessage
 */
export interface FriendChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
}
/**
 * @generated from protobuf message im.ChorusMessage
 */
export interface ChorusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.OpenChorusContent open_chorus_content = 100;
     */
    openChorusContent?: OpenChorusContent;
    /**
     * @generated from protobuf field: im.CloseChorusContent close_chorus_content = 101;
     */
    closeChorusContent?: CloseChorusContent;
    /**
     * @generated from protobuf field: im.ChorusOrderedSongListChangeContent chorus_ordered_song_list_change_content = 102;
     */
    chorusOrderedSongListChangeContent?: ChorusOrderedSongListChangeContent;
}
/**
 * @generated from protobuf message im.OpenChorusContent
 */
export interface OpenChorusContent {
    /**
     * @generated from protobuf field: data.ChorusInfo chorus_info = 1;
     */
    chorusInfo?: ChorusInfo;
    /**
     * @generated from protobuf field: string sub_singer_toast = 2;
     */
    subSingerToast: string;
}
/**
 * @generated from protobuf message im.CloseChorusContent
 */
export interface CloseChorusContent {
    /**
     * @generated from protobuf field: data.ChorusInfo chorus_info = 1;
     */
    chorusInfo?: ChorusInfo;
    /**
     * @generated from protobuf field: int64 close_user_id = 2;
     */
    closeUserId: bigint;
    /**
     * @generated from protobuf field: string close_toast = 3;
     */
    closeToast: string;
    /**
     * @generated from protobuf field: int32 close_reason = 4;
     */
    closeReason: number;
}
/**
 * @generated from protobuf message im.ChorusOrderedSongListChangeContent
 */
export interface ChorusOrderedSongListChangeContent {
    /**
     * @generated from protobuf field: repeated data.ChorusSongInfo list_info = 1;
     */
    listInfo: ChorusSongInfo[];
}
/**
 * @generated from protobuf message im.CNYReward
 */
export interface CNYReward {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string award_content = 2;
     */
    awardContent: string;
    /**
     * @generated from protobuf field: string banner_content = 3;
     */
    bannerContent: string;
}
/**
 * @generated from protobuf message im.CNYATaskMessage
 */
export interface CNYATaskMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 watch_duration = 2;
     */
    watchDuration: bigint;
    /**
     * @generated from protobuf field: int64 watch_total = 3;
     */
    watchTotal: bigint;
    /**
     * @generated from protobuf field: int32 current_round = 7;
     */
    currentRound: number;
    /**
     * @generated from protobuf field: int32 pct = 8;
     */
    pct: number;
    /**
     * @generated from protobuf field: repeated int64 round_target = 9;
     */
    roundTarget: bigint[];
}
/**
 * @generated from protobuf message im.CommentaryChangeMessage
 */
export interface CommentaryChangeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.CommentaryRoomInfo commentary_room_info = 2;
     */
    commentaryRoomInfo?: CommentaryRoomInfo;
    /**
     * @generated from protobuf field: int32 operation = 3;
     */
    operation: number;
}
/**
 * @generated from protobuf message im.CommentsMessage
 */
export interface CommentsMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string color = 4;
     */
    color: string;
    /**
     * @generated from protobuf field: data.Image back_ground = 5;
     */
    backGround?: Image;
    /**
     * @generated from protobuf field: int64 action_type = 6;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: string action_content = 7;
     */
    actionContent: string;
}
/**
 * @generated from protobuf message im.CommerceSaleMessage
 */
export interface CommerceSaleMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool has_commerce_sale = 2;
     */
    hasCommerceSale: boolean;
}
/**
 * @generated from protobuf message im.CommerceMessage
 */
export interface CommerceMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
}
/**
 * @generated from protobuf message im.CommonCardAreaMessage
 */
export interface CommonCardAreaMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 message_type = 2;
     */
    messageType: number;
    /**
     * @generated from protobuf field: data.BottomRightCardArea bottom_right_card_data = 3;
     */
    bottomRightCardData?: BottomRightCardArea;
}
/**
 * @generated from protobuf message im.ComplexContent
 */
export interface ComplexContent {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: string font_color = 3;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: int64 font_size = 4;
     */
    fontSize: bigint;
    /**
     * @generated from protobuf field: int64 weight = 5;
     */
    weight: bigint;
    /**
     * @generated from protobuf field: data.Image img = 6;
     */
    img?: Image;
}
/**
 * @generated from protobuf message im.CommonGuideMessage
 */
export interface CommonGuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: data.Text main_content = 3;
     */
    mainContent?: Text;
    /**
     * @generated from protobuf field: repeated im.ComplexContent secondary_content = 4;
     */
    secondaryContent: ComplexContent[];
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: data.Text button_content = 6;
     */
    buttonContent?: Text;
    /**
     * @generated from protobuf field: string button_action_schema = 7;
     */
    buttonActionSchema: string;
    /**
     * @generated from protobuf field: data.Image button_icon = 8;
     */
    buttonIcon?: Image;
    /**
     * @generated from protobuf field: int64 duration = 9;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: bool is_rounded_icon = 10;
     */
    isRoundedIcon: boolean;
}
/**
 * @generated from protobuf message im.CommonLuckyMoneyMessage
 */
export interface CommonLuckyMoneyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 diamond_count = 2;
     */
    diamondCount: bigint;
    /**
     * @generated from protobuf field: int64 luckymoney_id = 3;
     */
    luckymoneyId: bigint;
    /**
     * @generated from protobuf field: int64 send_time = 4;
     */
    sendTime: bigint;
    /**
     * @generated from protobuf field: int64 delay_time = 5;
     */
    delayTime: bigint;
    /**
     * @generated from protobuf field: data.User user = 6;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 style = 7;
     */
    style: bigint;
    /**
     * @generated from protobuf field: im.CommonLuckyMoneyMessage.LuckyIcon lucky_icon = 8;
     */
    luckyIcon?: CommonLuckyMoneyMessage_LuckyIcon;
    /**
     * @generated from protobuf field: data.Image background = 9;
     */
    background?: Image;
    /**
     * @generated from protobuf field: bool is_official = 10;
     */
    isOfficial: boolean;
}
/**
 * @generated from protobuf message im.CommonLuckyMoneyMessage.LuckyIcon
 */
export interface CommonLuckyMoneyMessage_LuckyIcon {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
}
/**
 * @generated from protobuf message im.TaskPanelMessage
 */
export interface TaskPanelMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.TaskPanel data = 2;
     */
    data?: TaskPanel;
}
/**
 * @generated from protobuf message im.TaskPanel
 */
export interface TaskPanel {
    /**
     * @generated from protobuf field: int32 task_id = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: int32 task_type = 2;
     */
    taskType: number;
    /**
     * @generated from protobuf field: int32 watch_time = 3;
     */
    watchTime: number;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 5;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string tag_icon_url = 6;
     */
    tagIconUrl: string;
    /**
     * @generated from protobuf field: string tag_text = 7;
     */
    tagText: string;
    /**
     * @generated from protobuf field: string tag_text_color = 8;
     */
    tagTextColor: string;
    /**
     * @generated from protobuf field: string button_name = 9;
     */
    buttonName: string;
    /**
     * @generated from protobuf field: string schema = 10;
     */
    schema: string;
    /**
     * @generated from protobuf field: int64 expire_at = 11;
     */
    expireAt: bigint;
    /**
     * @generated from protobuf field: int32 status = 12;
     */
    status: number;
    /**
     * @generated from protobuf field: int32 expire_after = 13;
     */
    expireAfter: number;
    /**
     * @generated from protobuf field: int32 reward_type = 14;
     */
    rewardType: number;
    /**
     * @generated from protobuf field: string panel_title = 15;
     */
    panelTitle: string;
    /**
     * @generated from protobuf field: string sub_title_color = 16;
     */
    subTitleColor: string;
}
/**
 * @generated from protobuf message im.TaskRewardToastMessage
 */
export interface TaskRewardToastMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.TaskRewardToast data = 2;
     */
    data?: TaskRewardToast;
}
/**
 * @generated from protobuf message im.TaskRewardToast
 */
export interface TaskRewardToast {
    /**
     * @generated from protobuf field: int32 task_id = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: int32 task_type = 2;
     */
    taskType: number;
    /**
     * @generated from protobuf field: int32 reward_type = 3;
     */
    rewardType: number;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 5;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string icon_url = 6;
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: string bg_pic_url = 7;
     */
    bgPicUrl: string;
}
/**
 * @generated from protobuf message im.CommonPopupMessage
 */
export interface CommonPopupMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string schema_url = 2;
     */
    schemaUrl: string;
    /**
     * @generated from protobuf field: bool anchor_pop_up = 3;
     */
    anchorPopUp: boolean;
}
/**
 * @generated from protobuf message im.CommonTextMessage
 */
export interface CommonTextMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string scene = 3;
     */
    scene: string;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 4;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.CommonToastMessage
 */
export interface CommonToastMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool discardable = 2;
     */
    discardable: boolean;
    /**
     * @generated from protobuf field: bool immediate = 3;
     */
    immediate: boolean;
    /**
     * @generated from protobuf field: int64 duration = 4;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string text_color = 5;
     */
    textColor: string;
    /**
     * @generated from protobuf field: string background_color_start = 6;
     */
    backgroundColorStart: string;
    /**
     * @generated from protobuf field: string background_color_end = 7;
     */
    backgroundColorEnd: string;
    /**
     * @generated from protobuf field: int64 position = 8;
     */
    position: bigint;
    /**
     * @generated from protobuf field: data.Image top_img = 9;
     */
    topImg?: Image;
    /**
     * @generated from protobuf field: int64 top_img_width = 10;
     */
    topImgWidth: bigint;
    /**
     * @generated from protobuf field: int64 top_img_height = 11;
     */
    topImgHeight: bigint;
    /**
     * @generated from protobuf field: bool show_mongolia_layer = 12;
     */
    showMongoliaLayer: boolean;
}
/**
 * @generated from protobuf message im.ControlMessage
 */
export interface ControlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 action = 2;
     */
    action: bigint;
    /**
     * @generated from protobuf field: string tips = 3;
     */
    tips: string;
    /**
     * @generated from protobuf field: im.ControlMessage.Extra extra = 4;
     */
    extra?: ControlMessage_Extra;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 5;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.ControlMessage.Extra
 */
export interface ControlMessage_Extra {
    /**
     * @generated from protobuf field: string ban_info_url = 1;
     */
    banInfoUrl: string;
    /**
     * @generated from protobuf field: int64 reason_no = 2;
     */
    reasonNo: bigint;
    /**
     * @generated from protobuf field: data.Text title = 3;
     */
    title?: Text;
    /**
     * @generated from protobuf field: data.Text violation_reason = 4;
     */
    violationReason?: Text;
    /**
     * @generated from protobuf field: data.Text content = 5;
     */
    content?: Text;
    /**
     * @generated from protobuf field: data.Text got_it_button = 6;
     */
    gotItButton?: Text;
    /**
     * @generated from protobuf field: data.Text ban_detail_button = 7;
     */
    banDetailButton?: Text;
    /**
     * @generated from protobuf field: string source = 8;
     */
    source: string;
}
/**
 * @generated from protobuf message im.WebcastLifeLotteryDrawResultEventMessage
 */
export interface WebcastLifeLotteryDrawResultEventMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 lottery_id = 2;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: repeated int64 user_ids = 3;
     */
    userIds: bigint[];
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.DataLifeLiveMessage
 */
export interface DataLifeLiveMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: string body = 3;
     */
    body: string;
}
/**
 * @generated from protobuf message im.DecorationModifyMessage
 */
export interface DecorationModifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string extra = 2;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.DecorationUpdateMessage
 */
export interface DecorationUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.DecotationDetail detai = 2;
     */
    detai?: DecotationDetail;
}
/**
 * @generated from protobuf message im.DiggMessage
 */
export interface DiggMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 digg_count = 2;
     */
    diggCount: bigint;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 color = 4;
     */
    color: bigint;
    /**
     * @generated from protobuf field: data.User user = 5;
     */
    user?: User;
    /**
     * @generated from protobuf field: string icon = 6;
     */
    icon: string;
}
/**
 * @generated from protobuf message im.DLiveMessage
 */
export interface DLiveMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated string rooms = 2;
     */
    rooms: string[];
    /**
     * @generated from protobuf field: int64 max_push_delay_time = 3;
     */
    maxPushDelayTime: bigint;
}
/**
 * @generated from protobuf message im.OfficialRoomMessage
 */
export interface OfficialRoomMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.OfficialRoomInfo official_room_info = 2;
     */
    officialRoomInfo?: OfficialRoomInfo;
}
/**
 * @generated from protobuf message im.CeremonyMessage
 */
export interface CeremonyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.UserRoom items = 2;
     */
    items: UserRoom[];
    /**
     * @generated from protobuf field: int64 max_push_delay_time = 3;
     */
    maxPushDelayTime: bigint;
}
/**
 * @generated from protobuf message im.UserRoom
 */
export interface UserRoom {
    /**
     * @generated from protobuf field: int64 type = 1;
     */
    type: bigint;
    /**
     * @generated from protobuf field: string room = 2;
     */
    room: string;
    /**
     * @generated from protobuf field: string user = 3;
     */
    user: string;
}
/**
 * @generated from protobuf message im.RcmdUser
 */
export interface RcmdUser {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: string text_before_action = 2;
     */
    textBeforeAction: string;
    /**
     * @generated from protobuf field: string text_after_action = 3;
     */
    textAfterAction: string;
    /**
     * @generated from protobuf field: string authentication_info = 4;
     */
    authenticationInfo: string;
    /**
     * @generated from protobuf field: string edit_script = 5;
     */
    editScript: string;
}
/**
 * @generated from protobuf message im.RecommendUsersMessage
 */
export interface RecommendUsersMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string list_title = 2;
     */
    listTitle: string;
    /**
     * @generated from protobuf field: repeated im.RcmdUser users = 3;
     */
    users: RcmdUser[];
    /**
     * @generated from protobuf field: data.Image img_vertical = 4;
     */
    imgVertical?: Image;
    /**
     * @generated from protobuf field: data.Image img_horizontal = 5;
     */
    imgHorizontal?: Image;
    /**
     * @generated from protobuf field: int64 display_time = 6;
     */
    displayTime: bigint;
    /**
     * @generated from protobuf field: int64 max_push_delay_time = 7;
     */
    maxPushDelayTime: bigint;
    /**
     * @generated from protobuf field: bool check_alive = 8;
     */
    checkAlive: boolean;
}
/**
 * @generated from protobuf message im.DolphinSettingUpdateMessage
 */
export interface DolphinSettingUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 settingVersion = 2;
     */
    settingVersion: bigint;
}
/**
 * @generated from protobuf message im.DonationMessage
 */
export interface DonationMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 total = 2;
     */
    total: bigint;
    /**
     * @generated from protobuf field: string currency = 3;
     */
    currency: string;
    /**
     * @generated from protobuf field: repeated data.User sponsor = 4;
     */
    sponsor: User[];
    /**
     * @generated from protobuf field: repeated data.User user = 5;
     */
    user: User[];
}
/**
 * @generated from protobuf message im.DoodleGiftMessage
 */
export interface DoodleGiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 gift_id = 2;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 fan_ticket_count = 3;
     */
    fanTicketCount: bigint;
    /**
     * @generated from protobuf field: data.User user = 4;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.User to_user = 5;
     */
    toUser?: User;
    /**
     * @generated from protobuf field: string compose = 6;
     */
    compose: string;
    /**
     * @generated from protobuf field: int64 room_fan_ticket_count = 7;
     */
    roomFanTicketCount: bigint;
    /**
     * @generated from protobuf field: data.GiftIMPriority priority = 8;
     */
    priority?: GiftIMPriority;
    /**
     * @generated from protobuf field: string log_id = 9;
     */
    logId: string;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 10;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: data.Text tray_display_text = 11;
     */
    trayDisplayText?: Text;
    /**
     * @generated from protobuf field: data.GiftTrayInfo tray_info = 12;
     */
    trayInfo?: GiftTrayInfo;
}
/**
 * @generated from protobuf message im.LikeUserDetail
 */
export interface LikeUserDetail {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: bigint;
}
/**
 * @generated from protobuf message im.DoubleLikeHeartMessage
 */
export interface DoubleLikeHeartMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.DoubleLikeDetail double_like_detail = 2;
     */
    doubleLikeDetail?: DoubleLikeDetail;
    /**
     * @generated from protobuf field: data.Text self_display_text = 3;
     */
    selfDisplayText?: Text;
    /**
     * @generated from protobuf field: data.Text normal_display_text = 4;
     */
    normalDisplayText?: Text;
    /**
     * @generated from protobuf field: repeated im.LikeUserDetail like_user_list = 5;
     */
    likeUserList: LikeUserDetail[];
}
/**
 * @generated from protobuf message im.DoubleLikeTopUserMessage
 */
export interface DoubleLikeTopUserMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.LikeUserDetail like_user_list = 2;
     */
    likeUserList: LikeUserDetail[];
}
/**
 * @generated from protobuf message im.PicoDisplayInfo
 */
export interface PicoDisplayInfo {
    /**
     * @generated from protobuf field: int64 combo_sum_count = 1;
     */
    comboSumCount: bigint;
    /**
     * @generated from protobuf field: string emoji = 2;
     */
    emoji: string;
    /**
     * @generated from protobuf field: data.Image emoji_icon = 3;
     */
    emojiIcon?: Image;
    /**
     * @generated from protobuf field: string emoji_text = 4;
     */
    emojiText: string;
}
/**
 * @generated from protobuf message im.DoubleLikeDetail
 */
export interface DoubleLikeDetail {
    /**
     * @generated from protobuf field: bool double_flag = 1;
     */
    doubleFlag: boolean;
    /**
     * @generated from protobuf field: int32 seq_id = 2;
     */
    seqId: number;
    /**
     * @generated from protobuf field: int32 renewals_num = 3;
     */
    renewalsNum: number;
    /**
     * @generated from protobuf field: int32 triggers_num = 4;
     */
    triggersNum: number;
}
/**
 * @generated from protobuf message im.DisplayControlInfo
 */
export interface DisplayControlInfo {
    /**
     * @generated from protobuf field: bool show_text = 1;
     */
    showText: boolean;
    /**
     * @generated from protobuf field: bool show_icons = 2;
     */
    showIcons: boolean;
}
/**
 * @generated from protobuf message im.LikeMessage
 */
export interface LikeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: bigint;
    /**
     * @generated from protobuf field: int64 total = 3;
     */
    total: bigint;
    /**
     * @generated from protobuf field: int64 color = 4;
     */
    color: bigint;
    /**
     * @generated from protobuf field: data.User user = 5;
     */
    user?: User;
    /**
     * @generated from protobuf field: string icon = 6;
     */
    icon: string;
    /**
     * @generated from protobuf field: im.DoubleLikeDetail double_like_detail = 7;
     */
    doubleLikeDetail?: DoubleLikeDetail;
    /**
     * @generated from protobuf field: im.DisplayControlInfo display_control_info = 8;
     */
    displayControlInfo?: DisplayControlInfo;
    /**
     * @generated from protobuf field: int64 linkmic_guest_uid = 9;
     */
    linkmicGuestUid: bigint;
    /**
     * @generated from protobuf field: string scene = 10;
     */
    scene: string;
    /**
     * @generated from protobuf field: im.PicoDisplayInfo pico_display_info = 11;
     */
    picoDisplayInfo?: PicoDisplayInfo;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 12;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.DouplusIndicatorMessage
 */
export interface DouplusIndicatorMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 number = 2;
     */
    number: bigint;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string toast = 4;
     */
    toast: string;
    /**
     * @generated from protobuf field: string buyer_nickname = 5;
     */
    buyerNickname: string;
}
/**
 * @generated from protobuf message im.DouplusMessage
 */
export interface DouplusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 promotion = 2;
     */
    promotion: bigint;
}
/**
 * @generated from protobuf message im.DressAssetMessage
 */
export interface DressAssetMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated string dress_id = 2;
     */
    dressId: string[];
}
/**
 * @generated from protobuf message im.DriveGiftMessage
 */
export interface DriveGiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 new_count = 2;
     */
    newCount: bigint;
    /**
     * @generated from protobuf field: string popup_url = 3;
     */
    popupUrl: string;
}
/**
 * @generated from protobuf message im.DrumMessage
 */
export interface DrumMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 drum_result = 2;
     */
    drumResult: number;
    /**
     * @generated from protobuf field: int32 dump_msg_type = 3;
     */
    dumpMsgType: number;
    /**
     * @generated from protobuf field: int64 drum_count = 4;
     */
    drumCount: bigint;
    /**
     * @generated from protobuf field: int64 report_time_gap = 5;
     */
    reportTimeGap: bigint;
    /**
     * @generated from protobuf field: int64 push_id = 6;
     */
    pushId: bigint;
    /**
     * @generated from protobuf field: string push_id_str = 7;
     */
    pushIdStr: string;
    /**
     * @generated from protobuf field: repeated im.DrumMessage.User users = 8;
     */
    users: DrumMessage_User[];
}
/**
 * @generated from protobuf message im.DrumMessage.User
 */
export interface DrumMessage_User {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string nick_name = 2;
     */
    nickName: string;
    /**
     * @generated from protobuf field: string avatar = 3;
     */
    avatar: string;
    /**
     * @generated from protobuf field: string user_id_str = 4;
     */
    userIdStr: string;
}
/**
 * @generated from protobuf message im.ProjectDModifyH5
 */
export interface ProjectDModifyH5 {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string top_left = 2;
     */
    topLeft: string;
    /**
     * @generated from protobuf field: string buttom_right = 3;
     */
    buttomRight: string;
}
/**
 * @generated from protobuf message im.ProjectDTaskInfo
 */
export interface ProjectDTaskInfo {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 atype = 2;
     */
    atype: number;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string count = 4;
     */
    count: string;
    /**
     * @generated from protobuf field: string fallback_context = 5;
     */
    fallbackContext: string;
    /**
     * @generated from protobuf field: string award_url = 6;
     */
    awardUrl: string;
    /**
     * @generated from protobuf field: int64 left_task_count = 7;
     */
    leftTaskCount: bigint;
    /**
     * @generated from protobuf field: int64 sub_task_id = 8;
     */
    subTaskId: bigint;
}
/**
 * @generated from protobuf message im.DutyGiftMessage
 */
export interface DutyGiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 speedy_gift_id = 5;
     */
    speedyGiftId: number;
    /**
     * @generated from protobuf field: int32 target_score = 6;
     */
    targetScore: number;
    /**
     * @generated from protobuf field: int32 stage_count = 7;
     */
    stageCount: number;
    /**
     * @generated from protobuf field: int32 status = 8;
     */
    status: number;
    /**
     * @generated from protobuf field: int32 score = 9;
     */
    score: number;
    /**
     * @generated from protobuf field: data.User contribute_most = 10;
     */
    contributeMost?: User;
    /**
     * @generated from protobuf field: int32 contribute_most_score = 11;
     */
    contributeMostScore: number;
    /**
     * @generated from protobuf field: int64 duty_id = 12;
     */
    dutyId: bigint;
}
/**
 * @generated from protobuf message im.EasterEggMessage
 */
export interface EasterEggMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.EasterEggMessageData data = 2;
     */
    data?: EasterEggMessageData;
}
/**
 * @generated from protobuf message im.EasterEggMessageData
 */
export interface EasterEggMessageData {
    /**
     * @generated from protobuf field: bool has_easter_egg = 1;
     */
    hasEasterEgg: boolean;
    /**
     * @generated from protobuf field: int64 stage = 2;
     */
    stage: bigint;
    /**
     * @generated from protobuf field: int64 total_stage = 3;
     */
    totalStage: bigint;
    /**
     * @generated from protobuf field: int64 effects_num = 4;
     */
    effectsNum: bigint;
    /**
     * @generated from protobuf field: int64 start_count = 5;
     */
    startCount: bigint;
    /**
     * @generated from protobuf field: int64 end_count = 6;
     */
    endCount: bigint;
    /**
     * @generated from protobuf field: int64 count = 7;
     */
    count: bigint;
}
/**
 * @generated from protobuf message im.EcomFansClubMessage
 */
export interface EcomFansClubMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 action = 2;
     */
    action: number;
    /**
     * @generated from protobuf field: im.UserInfo user = 3;
     */
    user?: UserInfo;
}
/**
 * @generated from protobuf message im.UserInfo
 */
export interface UserInfo {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int32 level = 2;
     */
    level: number;
}
/**
 * @generated from protobuf message im.CornerReachMessage
 */
export interface CornerReachMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 elem_type = 3;
     */
    elemType: bigint;
}
/**
 * @generated from protobuf message im.TempStateAreaReachMessage
 */
export interface TempStateAreaReachMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 elem_type = 2;
     */
    elemType: bigint;
    /**
     * @generated from protobuf field: int64 elem_id = 3;
     */
    elemId: bigint;
    /**
     * @generated from protobuf field: int64 item_id = 4;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: int64 status = 5;
     */
    status: bigint;
    /**
     * @generated from protobuf field: im.TempStateAreaReachMessage.Resource resource = 6;
     */
    resource?: TempStateAreaReachMessage_Resource;
}
/**
 * @generated from protobuf message im.TempStateAreaReachMessage.Resource
 */
export interface TempStateAreaReachMessage_Resource {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string icon = 2;
     */
    icon: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.EpisodeChatMessage
 */
export interface EpisodeChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: bool visible_to_sender = 4;
     */
    visibleToSender: boolean;
    /**
     * @generated from protobuf field: data.Image background_image = 5;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 6;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: data.Image gift_image = 7;
     */
    giftImage?: Image;
    /**
     * @generated from protobuf field: int64 agree_msg_id = 8;
     */
    agreeMsgId: bigint;
    /**
     * @generated from protobuf field: repeated string color_value = 9;
     */
    colorValue: string[];
}
/**
 * @generated from protobuf message im.FansGroupGuideMessage
 */
export interface FansGroupGuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 auto_record_duration_ms = 5;
     */
    autoRecordDurationMs: bigint;
    /**
     * @generated from protobuf field: data.Text rich_text = 6;
     */
    richText?: Text;
    /**
     * @generated from protobuf field: string scheme_url = 7;
     */
    schemeUrl: string;
}
/**
 * @generated from protobuf message im.FansclubStatisticsMessage
 */
export interface FansclubStatisticsMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 fans_count = 3;
     */
    fansCount: bigint;
}
/**
 * @generated from protobuf message im.FansclubMessage
 */
export interface FansclubMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 action = 2;
     */
    action: number;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: data.User user = 4;
     */
    user?: User;
    /**
     * @generated from protobuf field: im.FansclubMessage.UpgradePrivilege upgrade_privilege = 5;
     */
    upgradePrivilege?: FansclubMessage_UpgradePrivilege;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 6;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.FansclubMessage.UpgradePrivilege
 */
export interface FansclubMessage_UpgradePrivilege {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: int32 button_type = 3;
     */
    buttonType: number;
}
/**
 * @generated from protobuf message im.FansclubReviewMessage
 */
export interface FansclubReviewMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 action = 2;
     */
    action: number;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
}
/**
 * @generated from protobuf message im.FansclubGuideMessage
 */
export interface FansclubGuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Text title = 2;
     */
    title?: Text;
    /**
     * @generated from protobuf field: data.Text sub_title = 3;
     */
    subTitle?: Text;
}
/**
 * @generated from protobuf message im.FeedbackActionMessage
 */
export interface FeedbackActionMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 action_id = 2;
     */
    actionId: bigint;
}
/**
 * @generated from protobuf message im.FeedbackCardMessage
 */
export interface FeedbackCardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 questionnaire_id = 2;
     */
    questionnaireId: bigint;
    /**
     * @generated from protobuf field: int64 scatterMills = 3;
     */
    scatterMills: bigint;
}
/**
 * @generated from protobuf message im.FireworkMessage
 */
export interface FireworkMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: bigint;
    /**
     * @generated from protobuf field: int64 report_time_gap = 3;
     */
    reportTimeGap: bigint;
    /**
     * @generated from protobuf field: int64 push_id = 4;
     */
    pushId: bigint;
    /**
     * @generated from protobuf field: string push_id_str = 5;
     */
    pushIdStr: string;
    /**
     * @generated from protobuf field: repeated im.FireworkMessage.User users = 6;
     */
    users: FireworkMessage_User[];
}
/**
 * @generated from protobuf message im.FireworkMessage.User
 */
export interface FireworkMessage_User {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string nick_name = 2;
     */
    nickName: string;
    /**
     * @generated from protobuf field: string avatar = 3;
     */
    avatar: string;
    /**
     * @generated from protobuf field: string user_id_str = 4;
     */
    userIdStr: string;
}
/**
 * @generated from protobuf message im.FireworkMultiMessage
 */
export interface FireworkMultiMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bytes biz_msg = 2;
     */
    bizMsg: Uint8Array;
}
/**
 * @generated from protobuf message im.FollowGuideMessage
 */
export interface FollowGuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Image avatarUrl = 2;
     */
    avatarUrl?: Image;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string hourRankInfo = 4;
     */
    hourRankInfo: string;
    /**
     * @generated from protobuf field: int64 giftId = 5;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 duration = 6;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string popupReason = 7;
     */
    popupReason: string;
}
/**
 * @generated from protobuf message im.BrokerNotifyMessage
 */
export interface BrokerNotifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 msg_type = 2;
     */
    msgType: bigint;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 timestamp = 4;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: int64 msg_sub_type = 5;
     */
    msgSubType: bigint;
    /**
     * @generated from protobuf field: int64 msg_id = 6;
     */
    msgId: bigint;
}
/**
 * @generated from protobuf message im.FreeCellGiftMessage
 */
export interface FreeCellGiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 gift_id = 2;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 fan_ticket_count = 3;
     */
    fanTicketCount: bigint;
    /**
     * @generated from protobuf field: int64 group_count = 4;
     */
    groupCount: bigint;
    /**
     * @generated from protobuf field: int64 repeat_count = 5;
     */
    repeatCount: bigint;
    /**
     * @generated from protobuf field: int64 combo_count = 6;
     */
    comboCount: bigint;
    /**
     * @generated from protobuf field: data.User user = 7;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.User to_user = 8;
     */
    toUser?: User;
    /**
     * @generated from protobuf field: im.FreeCellGiftMessage.FreeCellData free_cell = 9;
     */
    freeCell?: FreeCellGiftMessage_FreeCellData;
    /**
     * @generated from protobuf field: int64 room_fan_ticket_count = 10;
     */
    roomFanTicketCount: bigint;
    /**
     * @generated from protobuf field: string log_id = 11;
     */
    logId: string;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 12;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.FreeCellGiftMessage.FreeCellData
 */
export interface FreeCellGiftMessage_FreeCellData {
    /**
     * @generated from protobuf field: int64 time_now_ms = 1;
     */
    timeNowMs: bigint;
    /**
     * @generated from protobuf field: int64 time_start_ms = 2;
     */
    timeStartMs: bigint;
    /**
     * @generated from protobuf field: int64 time_freeze_end_ms = 3;
     */
    timeFreezeEndMs: bigint;
    /**
     * @generated from protobuf field: int64 time_double_end_ms = 4;
     */
    timeDoubleEndMs: bigint;
    /**
     * @generated from protobuf field: int64 time_end_ms = 5;
     */
    timeEndMs: bigint;
    /**
     * @generated from protobuf field: int64 free_cell_length = 6;
     */
    freeCellLength: bigint;
    /**
     * @generated from protobuf field: bool is_freeze = 7;
     */
    isFreeze: boolean;
    /**
     * @generated from protobuf field: bool is_double = 8;
     */
    isDouble: boolean;
    /**
     * @generated from protobuf field: data.User contribute_most_user = 9;
     */
    contributeMostUser?: User;
    /**
     * @generated from protobuf field: int64 contribute_most_coins = 10;
     */
    contributeMostCoins: bigint;
    /**
     * @generated from protobuf field: int64 distance_from_previous_one = 11;
     */
    distanceFromPreviousOne: bigint;
    /**
     * @generated from protobuf field: int64 index_in_day_ranklist = 12;
     */
    indexInDayRanklist: bigint;
}
/**
 * @generated from protobuf message im.FreeGiftMessage
 */
export interface FreeGiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.FreeGift free_gift = 3;
     */
    freeGift?: FreeGift;
}
/**
 * @generated from protobuf message im.GamblingStatusChangedMessage
 */
export interface GamblingStatusChangedMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 prev_status = 2;
     */
    prevStatus: bigint;
    /**
     * @generated from protobuf field: im.GamblingStatusChangedMessage.GameQuizInfo game_quiz_info = 3;
     */
    gameQuizInfo?: GamblingStatusChangedMessage_GameQuizInfo;
}
/**
 * @generated from protobuf message im.GamblingStatusChangedMessage.GameQuizInfo
 */
export interface GamblingStatusChangedMessage_GameQuizInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 2;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
}
/**
 * @generated from protobuf message im.GameChannelMessage
 */
export interface GameChannelMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 message_type = 3;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
    /**
     * @generated from protobuf field: data.User user = 5;
     */
    user?: User;
}
/**
 * @generated from protobuf message im.HostVersion
 */
export interface HostVersion {
    /**
     * @generated from protobuf field: int64 host_id = 1;
     */
    hostId: bigint;
    /**
     * @generated from protobuf field: string min_version = 2;
     */
    minVersion: string;
    /**
     * @generated from protobuf field: string max_version = 3;
     */
    maxVersion: string;
}
/**
 * @generated from protobuf message im.GameAncAudEntranceMessage
 */
export interface GameAncAudEntranceMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 game_kind = 3;
     */
    gameKind: bigint;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
    /**
     * @generated from protobuf field: bool show_audience_float_entrance = 5;
     */
    showAudienceFloatEntrance: boolean;
    /**
     * @generated from protobuf field: repeated im.HostVersion version_range = 6;
     */
    versionRange: HostVersion[];
    /**
     * @generated from protobuf field: string app_id = 7;
     */
    appId: string;
    /**
     * @generated from protobuf field: string meta_version = 8;
     */
    metaVersion: string;
    /**
     * @generated from protobuf field: string name = 9;
     */
    name: string;
    /**
     * @generated from protobuf field: string icon_url = 10;
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: int64 start_id = 11;
     */
    startId: bigint;
}
/**
 * @generated from protobuf message im.GameAncAudStatusMessage
 */
export interface GameAncAudStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 send_type = 3;
     */
    sendType: bigint;
    /**
     * @generated from protobuf field: int64 game_status = 4;
     */
    gameStatus: bigint;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GameAncAudPanelCtrlMessage
 */
export interface GameAncAudPanelCtrlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 send_type = 3;
     */
    sendType: bigint;
    /**
     * @generated from protobuf field: int64 panel_type = 4;
     */
    panelType: bigint;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GameAncAudDataFromAncMessage
 */
export interface GameAncAudDataFromAncMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 send_type = 3;
     */
    sendType: bigint;
    /**
     * @generated from protobuf field: string data = 4;
     */
    data: string;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GameAncAudDataFromAudMessage
 */
export interface GameAncAudDataFromAudMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: string data = 3;
     */
    data: string;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GameDevelopMessage
 */
export interface GameDevelopMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int32 develop = 3;
     */
    develop: number;
    /**
     * @generated from protobuf field: string app_id = 4;
     */
    appId: string;
    /**
     * @generated from protobuf field: string sign = 5;
     */
    sign: string;
}
/**
 * @generated from protobuf message im.GameGiftMessage
 */
export interface GameGiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 gift_id = 2;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 fan_ticket_count = 3;
     */
    fanTicketCount: bigint;
    /**
     * @generated from protobuf field: data.User user = 4;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.User to_user = 5;
     */
    toUser?: User;
    /**
     * @generated from protobuf field: string normalContent = 6;
     */
    normalContent: string;
    /**
     * @generated from protobuf field: im.GameGiftMessage.MonkeyData monkey_data = 8;
     */
    monkeyData?: GameGiftMessage_MonkeyData;
    /**
     * @generated from protobuf field: string log_id = 9;
     */
    logId: string;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 10;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.GameGiftMessage.MonkeyData
 */
export interface GameGiftMessage_MonkeyData {
    /**
     * @generated from protobuf field: int32 score = 1;
     */
    score: number;
    /**
     * @generated from protobuf field: bool break_record = 2;
     */
    breakRecord: boolean;
    /**
     * @generated from protobuf field: bool need_popup = 3;
     */
    needPopup: boolean;
    /**
     * @generated from protobuf field: string popup_content = 4;
     */
    popupContent: string;
}
/**
 * @generated from protobuf message im.GameGiftStatusMessage
 */
export interface GameGiftStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GameStatusMessage
 */
export interface GameStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 gameID = 2;
     */
    gameID: bigint;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: string config_extra = 4;
     */
    configExtra: string;
}
/**
 * @generated from protobuf message im.GameInviteMessage
 */
export interface GameInviteMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.GameInvite invite_item = 2;
     */
    inviteItem?: GameInvite;
    /**
     * @generated from protobuf field: data.InvitationSwitch invitation_switch = 3;
     */
    invitationSwitch?: InvitationSwitch;
    /**
     * @generated from protobuf field: string config_extra = 4;
     */
    configExtra: string;
}
/**
 * @generated from protobuf message im.GameInviteReplyMessage
 */
export interface GameInviteReplyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 reply = 2;
     */
    reply: number;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GamePVPMessage
 */
export interface GamePVPMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GameStatusUpdateMessage
 */
export interface GameStatusUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 anchor_id = 2;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 3;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int32 game_kind = 4;
     */
    gameKind: number;
    /**
     * @generated from protobuf field: int64 game_id = 5;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 round_id = 6;
     */
    roundId: bigint;
    /**
     * @generated from protobuf field: int32 event_time = 7;
     */
    eventTime: number;
    /**
     * @generated from protobuf field: int32 present_msg_type = 8;
     */
    presentMsgType: number;
    /**
     * @generated from protobuf field: string config_extra = 9;
     */
    configExtra: string;
    /**
     * @generated from protobuf field: int64 play_kind = 10;
     */
    playKind: bigint;
    /**
     * @generated from protobuf field: int64 switch_id = 11;
     */
    switchId: bigint;
}
/**
 * @generated from protobuf message im.GameCPAnchorPromoteInfoMessage
 */
export interface GameCPAnchorPromoteInfoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.SimpleGameInfo game_info = 2;
     */
    gameInfo: SimpleGameInfo[];
}
/**
 * @generated from protobuf message im.SimpleGameInfo
 */
export interface SimpleGameInfo {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: int32 stage = 2;
     */
    stage: number;
    /**
     * @generated from protobuf field: int32 biz_type = 3;
     */
    bizType: number;
    /**
     * @generated from protobuf field: string biz_id = 4;
     */
    bizId: string;
    /**
     * @generated from protobuf field: string biz_mode = 5;
     */
    bizMode: string;
    /**
     * @generated from protobuf field: string biz_extra = 6;
     */
    bizExtra: string;
    /**
     * @generated from protobuf field: string game_attr = 7;
     */
    gameAttr: string;
    /**
     * @generated from protobuf field: string component_extra = 8;
     */
    componentExtra: string;
    /**
     * @generated from protobuf field: bool is_introduce = 9;
     */
    isIntroduce: boolean;
}
/**
 * @generated from protobuf message im.GameCPBaseMessage
 */
export interface GameCPBaseMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.GameCPShowMessage show_info = 2;
     */
    showInfo?: GameCPShowMessage;
}
/**
 * @generated from protobuf message im.GameCPShowMessage
 */
export interface GameCPShowMessage {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: data.Text introduce_download_info = 2;
     */
    introduceDownloadInfo?: Text;
    /**
     * @generated from protobuf field: string game_image = 3;
     */
    gameImage: string;
    /**
     * @generated from protobuf field: string game_name = 4;
     */
    gameName: string;
    /**
     * @generated from protobuf field: string game_download_url = 5;
     */
    gameDownloadUrl: string;
    /**
     * @generated from protobuf field: string game_trace_info = 6;
     */
    gameTraceInfo: string;
    /**
     * @generated from protobuf field: repeated string game_tag_names = 7;
     */
    gameTagNames: string[];
    /**
     * @generated from protobuf field: string game_background_color = 8;
     */
    gameBackgroundColor: string;
    /**
     * @generated from protobuf field: int32 introduce_time_limit = 9;
     */
    introduceTimeLimit: number;
    /**
     * @generated from protobuf field: int64 introduce_start_time = 10;
     */
    introduceStartTime: bigint;
    /**
     * @generated from protobuf field: int32 introduce_stop_type = 11;
     */
    introduceStopType: number;
    /**
     * @generated from protobuf field: data.Text introduce_stop_message = 12;
     */
    introduceStopMessage?: Text;
    /**
     * @generated from protobuf field: string game_id = 13;
     */
    gameId: string;
    /**
     * @generated from protobuf field: bool audit_result = 14;
     */
    auditResult: boolean;
    /**
     * @generated from protobuf field: string ios_app_id = 15;
     */
    iosAppId: string;
    /**
     * @generated from protobuf field: string company_name = 16;
     */
    companyName: string;
    /**
     * @generated from protobuf field: string download_extra = 17;
     */
    downloadExtra: string;
    /**
     * @generated from protobuf field: string android_privacy_url = 18;
     */
    androidPrivacyUrl: string;
    /**
     * @generated from protobuf field: string android_authorization_url = 19;
     */
    androidAuthorizationUrl: string;
    /**
     * @generated from protobuf field: string ios_privacy_url = 20;
     */
    iosPrivacyUrl: string;
    /**
     * @generated from protobuf field: string ios_authorization_url = 21;
     */
    iosAuthorizationUrl: string;
    /**
     * @generated from protobuf field: string android_version = 22;
     */
    androidVersion: string;
    /**
     * @generated from protobuf field: string ios_version = 23;
     */
    iosVersion: string;
    /**
     * @generated from protobuf field: string active_link = 24;
     */
    activeLink: string;
    /**
     * @generated from protobuf field: int64 download_count = 25;
     */
    downloadCount: bigint;
    /**
     * @generated from protobuf field: bool is_show_animate = 26;
     */
    isShowAnimate: boolean;
    /**
     * @generated from protobuf field: int64 animate_start_time = 27;
     */
    animateStartTime: bigint;
    /**
     * @generated from protobuf field: int64 animate_duration = 28;
     */
    animateDuration: bigint;
    /**
     * @generated from protobuf field: string anti_hijack_content = 29;
     */
    antiHijackContent: string;
    /**
     * @generated from protobuf field: string anti_hijack_image = 30;
     */
    antiHijackImage: string;
    /**
     * @generated from protobuf field: string ios_sale_point = 31;
     */
    iosSalePoint: string;
    /**
     * @generated from protobuf field: bool is_forbid_jump_ios_app = 32;
     */
    isForbidJumpIosApp: boolean;
    /**
     * @generated from protobuf field: bool has_platform_gift = 33;
     */
    hasPlatformGift: boolean;
    /**
     * @generated from protobuf field: string open_game_url = 44;
     */
    openGameUrl: string;
    /**
     * @generated from protobuf field: string prop_icon = 45;
     */
    propIcon: string;
    /**
     * @generated from protobuf field: string prop_name = 46;
     */
    propName: string;
    /**
     * @generated from protobuf field: string prop_id = 47;
     */
    propId: string;
    /**
     * @generated from protobuf field: int64 market_price = 48;
     */
    marketPrice: bigint;
    /**
     * @generated from protobuf field: int64 selling_price = 49;
     */
    sellingPrice: bigint;
    /**
     * @generated from protobuf field: int64 prop_sku_id = 50;
     */
    propSkuId: bigint;
    /**
     * @generated from protobuf field: im.ReserveItem reserve_item = 51;
     */
    reserveItem?: ReserveItem;
    /**
     * @generated from protobuf field: int64 prop_type = 52;
     */
    propType: bigint;
    /**
     * @generated from protobuf field: int64 game_access_type = 53;
     */
    gameAccessType: bigint;
    /**
     * @generated from protobuf field: bool is_prop_exp_game = 54;
     */
    isPropExpGame: boolean;
    /**
     * @generated from protobuf field: repeated string component_ids = 55;
     */
    componentIds: string[];
    /**
     * @generated from protobuf field: int32 biz_type = 56;
     */
    bizType: number;
    /**
     * @generated from protobuf field: int64 install_user_count = 57;
     */
    installUserCount: bigint;
    /**
     * @generated from protobuf field: string android_sale_point = 58;
     */
    androidSalePoint: string;
    /**
     * @generated from protobuf field: im.MiniGameMeta mini_game_meta = 59;
     */
    miniGameMeta?: MiniGameMeta;
    /**
     * @generated from protobuf field: int64 support_platforms = 60;
     */
    supportPlatforms: bigint;
    /**
     * @generated from protobuf field: im.MiniPlayMeta mini_play_meta = 61;
     */
    miniPlayMeta?: MiniPlayMeta;
    /**
     * @generated from protobuf field: string play_introduce = 62;
     */
    playIntroduce: string;
    /**
     * @generated from protobuf field: string small_icon = 63;
     */
    smallIcon: string;
    /**
     * @generated from protobuf field: string game_introduction_url = 64;
     */
    gameIntroductionUrl: string;
    /**
     * @generated from protobuf field: data.GameImageBundler game_icon = 65;
     */
    gameIcon?: GameImageBundler;
}
/**
 * @generated from protobuf message im.MiniGameMeta
 */
export interface MiniGameMeta {
    /**
     * @generated from protobuf field: string schema = 1;
     */
    schema: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
}
/**
 * @generated from protobuf message im.MiniPlayMeta
 */
export interface MiniPlayMeta {
    /**
     * @generated from protobuf field: string schema = 1;
     */
    schema: string;
    /**
     * @generated from protobuf field: string game_name = 2;
     */
    gameName: string;
    /**
     * @generated from protobuf field: string icon = 3;
     */
    icon: string;
    /**
     * @generated from protobuf field: string game_id = 4;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string app_id = 5;
     */
    appId: string;
    /**
     * @generated from protobuf field: repeated int64 support_live_scene = 6;
     */
    supportLiveScene: bigint[];
    /**
     * @generated from protobuf field: string version = 7;
     */
    version: string;
    /**
     * @generated from protobuf field: int32 game_type = 8;
     */
    gameType: number;
    /**
     * @generated from protobuf field: string developer = 9;
     */
    developer: string;
    /**
     * @generated from protobuf field: string extra = 10;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.ReserveItem
 */
export interface ReserveItem {
    /**
     * @generated from protobuf field: string reserve_today_num = 1;
     */
    reserveTodayNum: string;
    /**
     * @generated from protobuf field: string reserve_total_num = 2;
     */
    reserveTotalNum: string;
    /**
     * @generated from protobuf field: int32 reserve_status = 3;
     */
    reserveStatus: number;
}
/**
 * @generated from protobuf message im.GameCPUserDownloadMessage
 */
export interface GameCPUserDownloadMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string user_nick_name = 2;
     */
    userNickName: string;
    /**
     * @generated from protobuf field: int64 user_download_count = 3;
     */
    userDownloadCount: bigint;
    /**
     * @generated from protobuf field: string user_download_content = 4;
     */
    userDownloadContent: string;
    /**
     * @generated from protobuf field: string download_game_name = 5;
     */
    downloadGameName: string;
    /**
     * @generated from protobuf field: int32 type = 6;
     */
    type: number;
}
/**
 * @generated from protobuf message im.GameCPAnchorReminderMessage
 */
export interface GameCPAnchorReminderMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: string game_id = 3;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string game_name = 5;
     */
    gameName: string;
    /**
     * @generated from protobuf field: string game_icon_url = 6;
     */
    gameIconUrl: string;
}
/**
 * @generated from protobuf message im.GameCPUserRoomMetaMessage
 */
export interface GameCPUserRoomMetaMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 oper = 2;
     */
    oper: bigint;
    /**
     * @generated from protobuf field: im.UserIntroduceCardStatus user_introduce_card_status = 3;
     */
    userIntroduceCardStatus?: UserIntroduceCardStatus;
    /**
     * @generated from protobuf field: repeated im.UserGiftStatus user_gift_status = 4;
     */
    userGiftStatus: UserGiftStatus[];
}
/**
 * @generated from protobuf message im.UserIntroduceCardStatus
 */
export interface UserIntroduceCardStatus {
    /**
     * @generated from protobuf field: bool is_show_card = 1;
     */
    isShowCard: boolean;
    /**
     * @generated from protobuf field: int64 introduce_duration = 2;
     */
    introduceDuration: bigint;
    /**
     * @generated from protobuf field: int64 timer_span = 3;
     */
    timerSpan: bigint;
    /**
     * @generated from protobuf field: int64 timer_loop_cnt = 4;
     */
    timerLoopCnt: bigint;
}
/**
 * @generated from protobuf message im.UserGiftStatus
 */
export interface UserGiftStatus {
    /**
     * @generated from protobuf field: string play_id = 1;
     */
    playId: string;
    /**
     * @generated from protobuf field: string game_id = 2;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string hint = 3;
     */
    hint: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: int32 focus_index = 5;
     */
    focusIndex: number;
    /**
     * @generated from protobuf field: int32 login_days = 6;
     */
    loginDays: number;
}
/**
 * @generated from protobuf message im.CloudGamingPodMessage
 */
export interface CloudGamingPodMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 remain_seconds = 4;
     */
    remainSeconds: bigint;
}
/**
 * @generated from protobuf message im.GamePlayTeamStatusMessage
 */
export interface GamePlayTeamStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.PlayTeamMember member_list = 2;
     */
    memberList: PlayTeamMember[];
    /**
     * @generated from protobuf field: int32 total_num = 3;
     */
    totalNum: number;
    /**
     * @generated from protobuf field: int64 play_id = 4;
     */
    playId: bigint;
    /**
     * @generated from protobuf field: string toast = 5;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.GamePlayInviteMessage
 */
export interface GamePlayInviteMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string schema = 2;
     */
    schema: string;
    /**
     * @generated from protobuf field: int64 play_id = 3;
     */
    playId: bigint;
}
/**
 * @generated from protobuf message im.GamePlayStatusMessage
 */
export interface GamePlayStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 play_id = 3;
     */
    playId: bigint;
    /**
     * @generated from protobuf field: string audit_deny_toast = 4;
     */
    auditDenyToast: string;
    /**
     * @generated from protobuf field: string toast = 5;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.LynxParam
 */
export interface LynxParam {
    /**
     * @generated from protobuf field: int32 style = 1;
     */
    style: number;
    /**
     * @generated from protobuf field: string main_text = 2;
     */
    mainText: string;
    /**
     * @generated from protobuf field: string expire_day_text = 3;
     */
    expireDayText: string;
    /**
     * @generated from protobuf field: string sub_text = 4;
     */
    subText: string;
}
/**
 * @generated from protobuf message im.GiftConsumeRemindMessage
 */
export interface GiftConsumeRemindMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string lynx_schema = 2;
     */
    lynxSchema: string;
    /**
     * @generated from protobuf field: im.LynxParam lynx_param = 3;
     */
    lynxParam?: LynxParam;
    /**
     * @generated from protobuf field: int32 remind_type = 4;
     */
    remindType: number;
}
/**
 * @generated from protobuf message im.GiftCycleReleaseMessage
 */
export interface GiftCycleReleaseMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 release_id = 2;
     */
    releaseId: bigint;
    /**
     * @generated from protobuf field: im.GiftCycleReleaseMessage.GiftIcon gift_icon = 3;
     */
    giftIcon?: GiftCycleReleaseMessage_GiftIcon;
    /**
     * @generated from protobuf field: repeated int64 gift_ids = 4;
     */
    giftIds: bigint[];
}
/**
 * @generated from protobuf message im.GiftCycleReleaseMessage.GiftIcon
 */
export interface GiftCycleReleaseMessage_GiftIcon {
    /**
     * @generated from protobuf field: int64 gift_id = 1;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: data.Image icon = 2;
     */
    icon?: Image;
}
/**
 * @generated from protobuf message im.ExhibitionTopLeftMessage
 */
export interface ExhibitionTopLeftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Text display_text = 2;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: string top_title = 3;
     */
    topTitle: string;
    /**
     * @generated from protobuf field: data.Image gift_icon = 4;
     */
    giftIcon?: Image;
    /**
     * @generated from protobuf field: string exhibition_entrance_url = 5;
     */
    exhibitionEntranceUrl: string;
}
/**
 * @generated from protobuf message im.ExhibitionChatMessage
 */
export interface ExhibitionChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Text display_text = 2;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: int32 unlighted_item = 3;
     */
    unlightedItem: number;
    /**
     * @generated from protobuf field: int32 lighted_item = 4;
     */
    lightedItem: number;
    /**
     * @generated from protobuf field: int32 biz_type = 5;
     */
    bizType: number;
    /**
     * @generated from protobuf field: int32 app_id = 6;
     */
    appId: number;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 7;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.GiftIconFlashMessage
 */
export interface GiftIconFlashMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated int64 user_ids = 2;
     */
    userIds: bigint[];
    /**
     * @generated from protobuf field: int64 recommend_time = 3;
     */
    recommendTime: bigint;
    /**
     * @generated from protobuf field: int64 not_flash_after = 4;
     */
    notFlashAfter: bigint;
}
/**
 * @generated from protobuf message im.GiftUpdateMessage
 */
export interface GiftUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 update_type = 2;
     */
    updateType: number;
    /**
     * @generated from protobuf field: repeated int64 update_gift_ids = 3;
     */
    updateGiftIds: bigint[];
    /**
     * @generated from protobuf field: repeated int64 update_asset_ids = 4;
     */
    updateAssetIds: bigint[];
}
/**
 * @generated from protobuf message im.GiftVoteMessage
 */
export interface GiftVoteMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 msg_type = 2;
     */
    msgType: bigint;
    /**
     * @generated from protobuf field: int64 vote_id = 3;
     */
    voteId: bigint;
    /**
     * @generated from protobuf field: repeated data.GiftVoteResult results = 4;
     */
    results: GiftVoteResult[];
    /**
     * @generated from protobuf field: int64 finish_time = 5;
     */
    finishTime: bigint;
    /**
     * @generated from protobuf field: int64 current_time = 6;
     */
    currentTime: bigint;
    /**
     * @generated from protobuf field: int64 vote_type = 7;
     */
    voteType: bigint;
    /**
     * @generated from protobuf field: string extra = 8;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.GiftVoteMessage.Result
 */
export interface GiftVoteMessage_Result {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: bigint;
    /**
     * @generated from protobuf field: data.Image icon = 3;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 gift_id = 4;
     */
    giftId: bigint;
}
/**
 * @generated from protobuf message im.GiftMessage
 */
export interface GiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 gift_id = 2;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: int64 fan_ticket_count = 3;
     */
    fanTicketCount: bigint;
    /**
     * @generated from protobuf field: int64 group_count = 4;
     */
    groupCount: bigint;
    /**
     * @generated from protobuf field: int64 repeat_count = 5;
     */
    repeatCount: bigint;
    /**
     * @generated from protobuf field: int64 combo_count = 6;
     */
    comboCount: bigint;
    /**
     * @generated from protobuf field: data.User user = 7;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.User to_user = 8;
     */
    toUser?: User;
    /**
     * @generated from protobuf field: int32 repeat_end = 9;
     */
    repeatEnd: number;
    /**
     * @generated from protobuf field: im.GiftMessage.TextEffect text_effect = 10;
     */
    textEffect?: GiftMessage_TextEffect;
    /**
     * @generated from protobuf field: int64 group_id = 11;
     */
    groupId: bigint;
    /**
     * @generated from protobuf field: int64 income_taskgifts = 12;
     */
    incomeTaskgifts: bigint;
    /**
     * @generated from protobuf field: int64 room_fan_ticket_count = 13;
     */
    roomFanTicketCount: bigint;
    /**
     * @generated from protobuf field: data.GiftIMPriority priority = 14;
     */
    priority?: GiftIMPriority;
    /**
     * @generated from protobuf field: data.GiftStruct gift = 15;
     */
    gift?: GiftStruct;
    /**
     * @generated from protobuf field: string log_id = 16;
     */
    logId: string;
    /**
     * @generated from protobuf field: int64 send_type = 17;
     */
    sendType: bigint;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 18;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: data.Text tray_display_text = 19;
     */
    trayDisplayText?: Text;
    /**
     * @generated from protobuf field: int64 banned_display_effects = 20;
     */
    bannedDisplayEffects: bigint;
    /**
     * @generated from protobuf field: data.GiftTrayInfo tray_info = 21;
     */
    trayInfo?: GiftTrayInfo;
    /**
     * @generated from protobuf field: data.AssetEffectMixInfo asset_effect_mix_info = 24;
     */
    assetEffectMixInfo?: AssetEffectMixInfo;
    /**
     * @generated from protobuf field: bool display_for_self = 25;
     */
    displayForSelf: boolean;
    /**
     * @generated from protobuf field: string interact_gift_info = 26;
     */
    interactGiftInfo: string;
    /**
     * @generated from protobuf field: string diy_item_info = 27;
     */
    diyItemInfo: string;
    /**
     * @generated from protobuf field: repeated int64 min_asset_set = 28;
     */
    minAssetSet: bigint[];
    /**
     * @generated from protobuf field: int64 total_count = 29;
     */
    totalCount: bigint;
    /**
     * @generated from protobuf field: int32 client_gift_source = 30;
     */
    clientGiftSource: number;
    /**
     * @generated from protobuf field: data.AnchorGiftData anchor_gift = 31;
     */
    anchorGift?: AnchorGiftData;
    /**
     * @generated from protobuf field: repeated int64 to_user_ids = 32;
     */
    toUserIds: bigint[];
    /**
     * @generated from protobuf field: int64 send_time = 33;
     */
    sendTime: bigint;
    /**
     * @generated from protobuf field: int64 force_display_effects = 34;
     */
    forceDisplayEffects: bigint;
    /**
     * @generated from protobuf field: string trace_id = 35;
     */
    traceId: string;
    /**
     * @generated from protobuf field: int64 effect_display_ts = 36;
     */
    effectDisplayTs: bigint;
    /**
     * @generated from protobuf field: data.SendTogether send_together = 37;
     */
    sendTogether?: SendTogether;
    /**
     * @generated from protobuf field: data.ExtraEffect extra_effect = 38;
     */
    extraEffect?: ExtraEffect;
    /**
     * @generated from protobuf field: im.RoomHotInfo room_hot_info = 39;
     */
    roomHotInfo?: RoomHotInfo;
    /**
     * @generated from protobuf field: string GiftPlayParam = 40 [json_name = "GiftPlayParam"];
     */
    giftPlayParam: string;
    /**
     * @generated from protobuf field: int32 multi_send_effect_level = 41;
     */
    multiSendEffectLevel: number;
}
/**
 * @generated from protobuf message im.GiftMessage.TextEffect
 */
export interface GiftMessage_TextEffect {
    /**
     * @generated from protobuf field: im.GiftMessage.TextEffect.Detail portrait = 1;
     */
    portrait?: GiftMessage_TextEffect_Detail;
    /**
     * @generated from protobuf field: im.GiftMessage.TextEffect.Detail landscape = 2;
     */
    landscape?: GiftMessage_TextEffect_Detail;
}
/**
 * @generated from protobuf message im.GiftMessage.TextEffect.Detail
 */
export interface GiftMessage_TextEffect_Detail {
    /**
     * @generated from protobuf field: data.Text text = 1;
     */
    text?: Text;
    /**
     * @generated from protobuf field: int32 text_font_size = 2;
     */
    textFontSize: number;
    /**
     * @generated from protobuf field: data.Image background = 3;
     */
    background?: Image;
    /**
     * @generated from protobuf field: int32 start = 4;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 duration = 5;
     */
    duration: number;
    /**
     * @generated from protobuf field: int32 x = 6;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 7;
     */
    y: number;
    /**
     * @generated from protobuf field: int32 width = 8;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 9;
     */
    height: number;
    /**
     * @generated from protobuf field: int32 shadow_dx = 10;
     */
    shadowDx: number;
    /**
     * @generated from protobuf field: int32 shadow_dy = 11;
     */
    shadowDy: number;
    /**
     * @generated from protobuf field: int32 shadow_radius = 12;
     */
    shadowRadius: number;
    /**
     * @generated from protobuf field: string shadow_color = 13;
     */
    shadowColor: string;
    /**
     * @generated from protobuf field: string stroke_color = 14;
     */
    strokeColor: string;
    /**
     * @generated from protobuf field: int32 stroke_width = 15;
     */
    strokeWidth: number;
}
/**
 * @generated from protobuf message im.RoomHotInfo
 */
export interface RoomHotInfo {
    /**
     * @generated from protobuf field: int32 local_hot_strategy = 1;
     */
    localHotStrategy: number;
    /**
     * @generated from protobuf field: int32 public_area_level = 2;
     */
    publicAreaLevel: number;
    /**
     * @generated from protobuf field: int32 gift_level = 3;
     */
    giftLevel: number;
}
/**
 * @generated from protobuf message im.BindingGiftMessage
 */
export interface BindingGiftMessage {
    /**
     * @generated from protobuf field: im.GiftMessage msg = 1;
     */
    msg?: GiftMessage;
    /**
     * @generated from protobuf field: im.Common common = 2;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.GradeBuffAnchorShareMessage
 */
export interface GradeBuffAnchorShareMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string scheme_url = 2;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: data.Text content = 3;
     */
    content?: Text;
    /**
     * @generated from protobuf field: int64 score = 4;
     */
    score: bigint;
}
/**
 * @generated from protobuf message im.GroupShowUserUpdateMessage
 */
export interface GroupShowUserUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.GroupShowInfo info = 2;
     */
    info?: GroupShowInfo;
}
/**
 * @generated from protobuf message im.GrowthTaskMessage
 */
export interface GrowthTaskMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.GrowthTask task = 2;
     */
    task?: GrowthTask;
    /**
     * @generated from protobuf field: int32 action = 3;
     */
    action: number;
    /**
     * @generated from protobuf field: im.GrowthTaskMessage.CurrentContribution current_contribution = 4;
     */
    currentContribution?: GrowthTaskMessage_CurrentContribution;
    /**
     * @generated from protobuf field: repeated data.GrowthTaskContributorRank contributors = 5;
     */
    contributors: GrowthTaskContributorRank[];
}
/**
 * @generated from protobuf message im.GrowthTaskMessage.CurrentContribution
 */
export interface GrowthTaskMessage_CurrentContribution {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message im.GuestBattleScoreMessage
 */
export interface GuestBattleScoreMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.GuestBattleInfo battle_info = 2;
     */
    battleInfo?: GuestBattleInfo;
    /**
     * @generated from protobuf field: bool crown_upgrade = 3;
     */
    crownUpgrade: boolean;
}
/**
 * @generated from protobuf message im.GuestBattleMessage
 */
export interface GuestBattleMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 msg_type = 2;
     */
    msgType: bigint;
    /**
     * @generated from protobuf field: data.GuestBattleInfo battle_info = 3;
     */
    battleInfo?: GuestBattleInfo;
    /**
     * @generated from protobuf field: string finish_toast = 4;
     */
    finishToast: string;
    /**
     * @generated from protobuf field: im.GuestBattleUpdateContent update_content = 100;
     */
    updateContent?: GuestBattleUpdateContent;
    /**
     * @generated from protobuf field: im.GuestBattleFinishContent finish_content = 101;
     */
    finishContent?: GuestBattleFinishContent;
}
/**
 * @generated from protobuf message im.GuestBattleUpdateContent
 */
export interface GuestBattleUpdateContent {
    /**
     * @generated from protobuf field: bool crown_upgrade = 1;
     */
    crownUpgrade: boolean;
}
/**
 * @generated from protobuf message im.GuestBattleFinishContent
 */
export interface GuestBattleFinishContent {
    /**
     * @generated from protobuf field: int32 reason = 1;
     */
    reason: number;
    /**
     * @generated from protobuf field: int64 finish_user_id = 2;
     */
    finishUserId: bigint;
}
/**
 * @generated from protobuf message im.GuideMessage
 */
export interface GuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 guide_type = 2;
     */
    guideType: bigint;
    /**
     * @generated from protobuf field: int64 gift_id = 3;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: int64 duration = 5;
     */
    duration: bigint;
}
/**
 * @generated from protobuf message im.HighlightCommentPosition
 */
export interface HighlightCommentPosition {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 event_time = 3;
     */
    eventTime: bigint;
    /**
     * @generated from protobuf field: double x = 4;
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 5;
     */
    y: number;
}
/**
 * @generated from protobuf message im.HighlightComment
 */
export interface HighlightComment {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 id = 2;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 event_time = 3;
     */
    eventTime: bigint;
    /**
     * @generated from protobuf field: int64 comment_msg_id = 4;
     */
    commentMsgId: bigint;
    /**
     * @generated from protobuf field: int32 review_result = 5;
     */
    reviewResult: number;
    /**
     * @generated from protobuf field: string review_comment = 6;
     */
    reviewComment: string;
    /**
     * @generated from protobuf field: string content = 7;
     */
    content: string;
    /**
     * @generated from protobuf field: data.User user = 8;
     */
    user?: User;
    /**
     * @generated from protobuf field: int32 action_type = 9;
     */
    actionType: number;
    /**
     * @generated from protobuf field: int64 msg_time = 10;
     */
    msgTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 11;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 countdown_style = 12;
     */
    countdownStyle: number;
    /**
     * @generated from protobuf field: int32 trigger = 13;
     */
    trigger: number;
    /**
     * @generated from protobuf field: int64 operator_id = 14;
     */
    operatorId: bigint;
    /**
     * @generated from protobuf field: string operator_nickname = 15;
     */
    operatorNickname: string;
}
/**
 * @generated from protobuf message im.HotChatMessage
 */
export interface HotChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: repeated int64 num = 4;
     */
    num: bigint[];
    /**
     * @generated from protobuf field: int64 duration = 5;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: repeated int64 show_duration = 6;
     */
    showDuration: bigint[];
    /**
     * @generated from protobuf field: int64 sequence_id = 7;
     */
    sequenceId: bigint;
    /**
     * @generated from protobuf field: repeated string hot_list = 8;
     */
    hotList: string[];
}
/**
 * @generated from protobuf message im.HotRoomMessage
 */
export interface HotRoomMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.HotRoomInfo info = 2;
     */
    info?: HotRoomInfo;
}
/**
 * @generated from protobuf message im.ImDeleteMessage
 */
export interface ImDeleteMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated int64 delete_msg_ids = 2;
     */
    deleteMsgIds: bigint[];
}
/**
 * @generated from protobuf message im.InRoomBannerRedPoint
 */
export interface InRoomBannerRedPoint {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 count = 2;
     */
    count: bigint;
    /**
     * @generated from protobuf field: int64 banner_id = 3;
     */
    bannerId: bigint;
    /**
     * @generated from protobuf field: int64 show_type = 4;
     */
    showType: bigint;
}
/**
 * @generated from protobuf message im.InRoomBannerRefreshMessage
 */
export interface InRoomBannerRefreshMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 max_delay_seconds = 2;
     */
    maxDelaySeconds: bigint;
    /**
     * @generated from protobuf field: int32 position = 3;
     */
    position: number;
}
/**
 * @generated from protobuf message im.InRoomBannerMessage
 */
export interface InRoomBannerMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string extra = 2;
     */
    extra: string;
    /**
     * @generated from protobuf field: int32 position = 3;
     */
    position: number;
    /**
     * @generated from protobuf field: int32 action_type = 4;
     */
    actionType: number;
    /**
     * @generated from protobuf field: string container_url = 5;
     */
    containerUrl: string;
    /**
     * @generated from protobuf field: string lynx_container_url = 6;
     */
    lynxContainerUrl: string;
    /**
     * @generated from protobuf field: int32 container_type = 7;
     */
    containerType: number;
    /**
     * @generated from protobuf field: int32 op_type = 8;
     */
    opType: number;
}
/**
 * @generated from protobuf message im.InRoomBannerEvent
 */
export interface InRoomBannerEvent {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 position = 2;
     */
    position: number;
    /**
     * @generated from protobuf field: data.BannerData data = 3;
     */
    data?: BannerData;
}
/**
 * @generated from protobuf message im.OpenSchemaCommand
 */
export interface OpenSchemaCommand {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message im.InstantCommandMessage
 */
export interface InstantCommandMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 command_type = 2;
     */
    commandType: number;
    /**
     * @generated from protobuf field: im.OpenSchemaCommand open_schema_command = 11;
     */
    openSchemaCommand?: OpenSchemaCommand;
}
/**
 * @generated from protobuf message im.PopBoxContent
 */
export interface PopBoxContent {
    /**
     * @generated from protobuf field: int32 large_type = 1;
     */
    largeType: number;
    /**
     * @generated from protobuf field: int32 icon_type = 2;
     */
    iconType: number;
    /**
     * @generated from protobuf field: string control_type = 3;
     */
    controlType: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: string url = 6;
     */
    url: string;
    /**
     * @generated from protobuf field: int32 count_down_sec = 7;
     */
    countDownSec: number;
    /**
     * @generated from protobuf field: string button_desc = 8;
     */
    buttonDesc: string;
}
/**
 * @generated from protobuf message im.ClientOperation
 */
export interface ClientOperation {
    /**
     * @generated from protobuf field: string app_id = 1;
     */
    appId: string;
    /**
     * @generated from protobuf field: int32 operation_type = 2;
     */
    operationType: number;
    /**
     * @generated from protobuf field: im.PopBoxContent pop_box_content = 3;
     */
    popBoxContent?: PopBoxContent;
    /**
     * @generated from protobuf field: int32 show_time = 4;
     */
    showTime: number;
}
/**
 * @generated from protobuf message im.InteractControlMessage
 */
export interface InteractControlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string room_id = 2;
     */
    roomId: string;
    /**
     * @generated from protobuf field: string time_stamp = 3;
     */
    timeStamp: string;
    /**
     * @generated from protobuf field: repeated im.ClientOperation anchor_operation = 4;
     */
    anchorOperation: ClientOperation[];
    /**
     * @generated from protobuf field: repeated im.ClientOperation audience_operation = 5;
     */
    audienceOperation: ClientOperation[];
}
/**
 * @generated from protobuf message im.InteractOpenDevelopMessage
 */
export interface InteractOpenDevelopMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string app_id = 2;
     */
    appId: string;
    /**
     * @generated from protobuf field: int32 develop = 3;
     */
    develop: number;
    /**
     * @generated from protobuf field: string sign = 4;
     */
    sign: string;
    /**
     * @generated from protobuf field: int64 game_id = 5;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: int64 app_kind = 6;
     */
    appKind: bigint;
}
/**
 * @generated from protobuf message im.InteractionInfoMessage
 */
export interface InteractionInfoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.LikeIconInfo like_icon_info = 2;
     */
    likeIconInfo?: LikeIconInfo;
    /**
     * @generated from protobuf field: data.ChatEmojiGuideInfo chat_emoji_guide_info = 3;
     */
    chatEmojiGuideInfo?: ChatEmojiGuideInfo;
    /**
     * @generated from protobuf field: data.ChatImageGuideInfo chat_image_guide_info = 4;
     */
    chatImageGuideInfo?: ChatImageGuideInfo;
    /**
     * @generated from protobuf field: repeated int32 update_info_type = 50;
     */
    updateInfoType: number[];
}
/**
 * @generated from protobuf message im.IntercomInviteMessage
 */
export interface IntercomInviteMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 channel_id = 2;
     */
    channelId: bigint;
}
/**
 * @generated from protobuf message im.IntercomReplyMessage
 */
export interface IntercomReplyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 channel_id = 2;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 reply_status = 3;
     */
    replyStatus: bigint;
    /**
     * @generated from protobuf field: string toast = 4;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.ItemShareMessage
 */
export interface ItemShareMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.ShareItemStyle item_style = 2;
     */
    itemStyle?: ShareItemStyle;
    /**
     * @generated from protobuf field: data.Text share_text = 3;
     */
    shareText?: Text;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 4;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.JackfruitMessage
 */
export interface JackfruitMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bytes biz_msg = 2;
     */
    bizMsg: Uint8Array;
}
/**
 * @generated from protobuf message im.EcomBuyIntentionMessage
 */
export interface EcomBuyIntentionMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.EcomBuyIntentionMessage.Count counts = 2;
     */
    counts: EcomBuyIntentionMessage_Count[];
    /**
     * @generated from protobuf field: int64 unix_time = 3;
     */
    unixTime: bigint;
}
/**
 * @generated from protobuf message im.EcomBuyIntentionMessage.Count
 */
export interface EcomBuyIntentionMessage_Count {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 count = 3;
     */
    count: bigint;
}
/**
 * @generated from protobuf message im.KtvAtmosphereVideoMessage
 */
export interface KtvAtmosphereVideoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.KtvAtmosphereVideoContent ktv_atmosphere_video_content = 2;
     */
    ktvAtmosphereVideoContent?: KtvAtmosphereVideoContent;
}
/**
 * @generated from protobuf message im.KtvAtmosphereVideoContent
 */
export interface KtvAtmosphereVideoContent {
    /**
     * @generated from protobuf field: int64 uid = 1;
     */
    uid: bigint;
    /**
     * @generated from protobuf field: int64 song_id = 2;
     */
    songId: bigint;
    /**
     * @generated from protobuf field: data.KtvAtmosphereVideoInfo video_info = 3;
     */
    videoInfo?: KtvAtmosphereVideoInfo;
}
/**
 * @generated from protobuf message im.KTVContestSupportMessage
 */
export interface KTVContestSupportMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 support_count = 2;
     */
    supportCount: bigint;
    /**
     * @generated from protobuf field: int64 supportee_id = 3;
     */
    supporteeId: bigint;
    /**
     * @generated from protobuf field: int64 supportor_id = 4;
     */
    supportorId: bigint;
    /**
     * @generated from protobuf field: int64 song_id = 5;
     */
    songId: bigint;
    /**
     * @generated from protobuf field: int64 song_unique_id = 6;
     */
    songUniqueId: bigint;
}
/**
 * @generated from protobuf message im.AddKTVDressContent
 */
export interface AddKTVDressContent {
    /**
     * @generated from protobuf field: data.AddDressPrompt add_dress_prompt = 1;
     */
    addDressPrompt?: AddDressPrompt;
}
/**
 * @generated from protobuf message im.ChangeKTVDressContent
 */
export interface ChangeKTVDressContent {
    /**
     * @generated from protobuf field: string change_global_dress_toast = 1;
     */
    changeGlobalDressToast: string;
}
/**
 * @generated from protobuf message im.KtvDressMessage
 */
export interface KtvDressMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 message_type = 2;
     */
    messageType: number;
    /**
     * @generated from protobuf field: im.AddKTVDressContent add_dress_content = 3;
     */
    addDressContent?: AddKTVDressContent;
    /**
     * @generated from protobuf field: im.ChangeKTVDressContent change_dress_content = 4;
     */
    changeDressContent?: ChangeKTVDressContent;
}
/**
 * @generated from protobuf message im.KtvGrabSongResultMessage
 */
export interface KtvGrabSongResultMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 song_id = 2;
     */
    songId: bigint;
    /**
     * @generated from protobuf field: int64 term_id = 3;
     */
    termId: bigint;
    /**
     * @generated from protobuf field: bool success = 4;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string prompt = 5;
     */
    prompt: string;
}
/**
 * @generated from protobuf message im.KTVPlayModeStartMessage
 */
export interface KTVPlayModeStartMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string prompt = 2;
     */
    prompt: string;
    /**
     * @generated from protobuf field: int32 play_mode_type = 3;
     */
    playModeType: number;
    /**
     * @generated from protobuf field: repeated int32 linkmic_play_modes = 4;
     */
    linkmicPlayModes: number[];
}
/**
 * @generated from protobuf message im.KTVShortVideoCreatedMessage
 */
export interface KTVShortVideoCreatedMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.KTVShortVideoCreatedMessage.ShortVideoStruct short_video_info = 2;
     */
    shortVideoInfo?: KTVShortVideoCreatedMessage_ShortVideoStruct;
}
/**
 * @generated from protobuf message im.KTVShortVideoCreatedMessage.ShortVideoStruct
 */
export interface KTVShortVideoCreatedMessage_ShortVideoStruct {
    /**
     * @generated from protobuf field: string short_video_url = 1;
     */
    shortVideoUrl: string;
}
/**
 * @generated from protobuf message im.KTVSingerHotRankPosMessage
 */
export interface KTVSingerHotRankPosMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 hot = 2;
     */
    hot: bigint;
    /**
     * @generated from protobuf field: int64 rank = 3;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: int64 singer = 4;
     */
    singer: bigint;
}
/**
 * @generated from protobuf message im.KtvChallengeConfigMessage
 */
export interface KtvChallengeConfigMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 switch_status = 2;
     */
    switchStatus: bigint;
    /**
     * @generated from protobuf field: int64 target_score = 3;
     */
    targetScore: bigint;
    /**
     * @generated from protobuf field: int64 target_duration_second = 4;
     */
    targetDurationSecond: bigint;
}
/**
 * @generated from protobuf message im.KTVChallengeRankMessage
 */
export interface KTVChallengeRankMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.KTVChallengeRankMessage.ChallengeRankUser user_list = 2;
     */
    userList: KTVChallengeRankMessage_ChallengeRankUser[];
    /**
     * @generated from protobuf field: int64 singer_id = 3;
     */
    singerId: bigint;
    /**
     * @generated from protobuf field: string singer_nickname = 4;
     */
    singerNickname: string;
    /**
     * @generated from protobuf field: data.Image singer_avatar_thumb = 5;
     */
    singerAvatarThumb?: Image;
}
/**
 * @generated from protobuf message im.KTVChallengeRankMessage.ChallengeRankUser
 */
export interface KTVChallengeRankMessage_ChallengeRankUser {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
    /**
     * @generated from protobuf field: int64 score = 3;
     */
    score: bigint;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 4;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_medium = 5;
     */
    avatarMedium?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_large = 6;
     */
    avatarLarge?: Image;
}
/**
 * @generated from protobuf message im.KTVChallengeStatusMessage
 */
export interface KTVChallengeStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 challenge_id = 2;
     */
    challengeId: bigint;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: int64 current_score = 4;
     */
    currentScore: bigint;
    /**
     * @generated from protobuf field: int64 target_score = 5;
     */
    targetScore: bigint;
    /**
     * @generated from protobuf field: int64 countdown_second = 6;
     */
    countdownSecond: bigint;
    /**
     * @generated from protobuf field: int64 target_duration_second = 7;
     */
    targetDurationSecond: bigint;
    /**
     * @generated from protobuf field: int64 increment_duration_second = 8;
     */
    incrementDurationSecond: bigint;
    /**
     * @generated from protobuf field: int32 gift_type = 9;
     */
    giftType: number;
    /**
     * @generated from protobuf field: int32 emoji_location = 10;
     */
    emojiLocation: number;
}
/**
 * @generated from protobuf message im.KTVStartGrabSongMessage
 */
export interface KTVStartGrabSongMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool isStart = 2;
     */
    isStart: boolean;
}
/**
 * @generated from protobuf message im.KTVUserSingingHotMessage
 */
export interface KTVUserSingingHotMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 hot = 2;
     */
    hot: bigint;
    /**
     * @generated from protobuf field: int32 hot_status = 3;
     */
    hotStatus: number;
    /**
     * @generated from protobuf field: int32 hot_level = 4;
     */
    hotLevel: number;
    /**
     * @generated from protobuf field: int64 song_id = 5;
     */
    songId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 6;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 level2_threshold = 7;
     */
    level2Threshold: bigint;
    /**
     * @generated from protobuf field: int64 level3_threshold = 8;
     */
    level3Threshold: bigint;
}
/**
 * @generated from protobuf message im.KtvMessage
 */
export interface KtvMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: im.SetSettingOrderSongContent set_setting_order_song_content = 3;
     */
    setSettingOrderSongContent?: SetSettingOrderSongContent;
    /**
     * @generated from protobuf field: im.AudienceOrderSongContent audience_order_song_content = 4;
     */
    audienceOrderSongContent?: AudienceOrderSongContent;
    /**
     * @generated from protobuf field: im.AudienceOrderSongChatContent audience_order_song_chat_content = 5;
     */
    audienceOrderSongChatContent?: AudienceOrderSongChatContent;
    /**
     * @generated from protobuf field: im.PausePlaySongContent pause_play_song_content = 6;
     */
    pausePlaySongContent?: PausePlaySongContent;
    /**
     * @generated from protobuf field: im.OpenKtvComponentContent open_ktv_component_content = 7;
     */
    openKtvComponentContent?: OpenKtvComponentContent;
    /**
     * @generated from protobuf field: im.AudienceAddSongSettingChangedContent audience_add_song_setting_changed = 9;
     */
    audienceAddSongSettingChanged?: AudienceAddSongSettingChangedContent;
    /**
     * @generated from protobuf field: im.SongWaitingListChangedContent song_waiting_list_changed = 10;
     */
    songWaitingListChanged?: SongWaitingListChangedContent;
    /**
     * @generated from protobuf field: im.WantToListenSongListChangedContent want_to_listen_song_list_changed = 11;
     */
    wantToListenSongListChanged?: WantToListenSongListChangedContent;
    /**
     * @generated from protobuf field: im.PermitWantToListenSongContent permit_want_to_listen_song = 12;
     */
    permitWantToListenSong?: PermitWantToListenSongContent;
    /**
     * @generated from protobuf field: im.WantToListenSongRemovedContent want_to_listen_song_removed = 13;
     */
    wantToListenSongRemoved?: WantToListenSongRemovedContent;
}
/**
 * @generated from protobuf message im.SetSettingOrderSongContent
 */
export interface SetSettingOrderSongContent {
    /**
     * @generated from protobuf field: bool can_order_song = 1;
     */
    canOrderSong: boolean;
}
/**
 * @generated from protobuf message im.AudienceOrderSongContent
 */
export interface AudienceOrderSongContent {
    /**
     * @generated from protobuf field: int64 order_song_count = 1;
     */
    orderSongCount: bigint;
}
/**
 * @generated from protobuf message im.AudienceOrderSongChatContent
 */
export interface AudienceOrderSongChatContent {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.Text display_text = 2;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: bool display_user_role = 3;
     */
    displayUserRole: boolean;
}
/**
 * @generated from protobuf message im.PausePlaySongContent
 */
export interface PausePlaySongContent {
    /**
     * @generated from protobuf field: int64 song_id = 1;
     */
    songId: bigint;
    /**
     * @generated from protobuf field: int32 action_type = 2;
     */
    actionType: number;
    /**
     * @generated from protobuf field: int64 from_user_id = 3;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 singer_id = 4;
     */
    singerId: bigint;
}
/**
 * @generated from protobuf message im.OpenKtvComponentContent
 */
export interface OpenKtvComponentContent {
    /**
     * @generated from protobuf field: bool open_audience_add_song_switch = 1;
     */
    openAudienceAddSongSwitch: boolean;
}
/**
 * @generated from protobuf message im.AudienceAddSongSettingChangedContent
 */
export interface AudienceAddSongSettingChangedContent {
    /**
     * @generated from protobuf field: bool open = 1;
     */
    open: boolean;
}
/**
 * @generated from protobuf message im.SongWaitingListChangedContent
 */
export interface SongWaitingListChangedContent {
    /**
     * @generated from protobuf field: int64 anchor_unread_count = 1;
     */
    anchorUnreadCount: bigint;
}
/**
 * @generated from protobuf message im.WantToListenSongListChangedContent
 */
export interface WantToListenSongListChangedContent {
    /**
     * @generated from protobuf field: int64 anchor_unread_count = 1;
     */
    anchorUnreadCount: bigint;
}
/**
 * @generated from protobuf message im.PermitWantToListenSongContent
 */
export interface PermitWantToListenSongContent {
    /**
     * @generated from protobuf field: repeated int64 song_id = 1;
     */
    songId: bigint[];
    /**
     * @generated from protobuf field: bool is_multi_add_song = 2;
     */
    isMultiAddSong: boolean;
    /**
     * @generated from protobuf field: string song_name = 3;
     */
    songName: string;
}
/**
 * @generated from protobuf message im.WantToListenSongRemovedContent
 */
export interface WantToListenSongRemovedContent {
    /**
     * @generated from protobuf field: repeated int64 song_id = 1;
     */
    songId: bigint[];
}
/**
 * @generated from protobuf message im.LevelUpMessage
 */
export interface LevelUpMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int32 pre_level = 3;
     */
    preLevel: number;
    /**
     * @generated from protobuf field: int32 current_level = 4;
     */
    currentLevel: number;
}
/**
 * @generated from protobuf message im.RoomChannelLinkMessage
 */
export interface RoomChannelLinkMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: int64 linker_id = 3;
     */
    linkerId: bigint;
    /**
     * @generated from protobuf field: int64 scene = 4;
     */
    scene: bigint;
    /**
     * @generated from protobuf field: im.ChannelLinkerCreateContent create_content = 5;
     */
    createContent?: ChannelLinkerCreateContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerCloseContent close_content = 6;
     */
    closeContent?: ChannelLinkerCloseContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerInviteContent invite_content = 7;
     */
    inviteContent?: ChannelLinkerInviteContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerReplyContent reply_content = 8;
     */
    replyContent?: ChannelLinkerReplyContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerPermitContent permit_content = 9;
     */
    permitContent?: ChannelLinkerPermitContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerEnterContent enter_content = 10;
     */
    enterContent?: ChannelLinkerEnterContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerLeaveContent leave_content = 11;
     */
    leaveContent?: ChannelLinkerLeaveContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerKickOutContent kick_out_content = 12;
     */
    kickOutContent?: ChannelLinkerKickOutContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerLinkedListChangeContent linked_list_change_content = 13;
     */
    linkedListChangeContent?: ChannelLinkerLinkedListChangeContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerSilenceContent silence_status_content = 14;
     */
    silenceStatusContent?: ChannelLinkerSilenceContent;
    /**
     * @generated from protobuf field: im.ChannelLinkerApplyContent apply_content = 15;
     */
    applyContent?: ChannelLinkerApplyContent;
}
/**
 * @generated from protobuf message im.ChannelLinkerApplyContent
 */
export interface ChannelLinkerApplyContent {
    /**
     * @generated from protobuf field: int64 applicant_user_id = 1;
     */
    applicantUserId: bigint;
    /**
     * @generated from protobuf field: string applicant_sec_user_id = 2;
     */
    applicantSecUserId: string;
    /**
     * @generated from protobuf field: data.User applicant_user = 3;
     */
    applicantUser?: User;
}
/**
 * @generated from protobuf message im.ChannelLinkerCreateContent
 */
export interface ChannelLinkerCreateContent {
    /**
     * @generated from protobuf field: int64 owner_id = 1;
     */
    ownerId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 2;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 link_type = 3;
     */
    linkType: bigint;
    /**
     * @generated from protobuf field: string sec_owner_id = 4;
     */
    secOwnerId: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerCloseContent
 */
export interface ChannelLinkerCloseContent {
    /**
     * @generated from protobuf field: int32 source = 1;
     */
    source: number;
}
/**
 * @generated from protobuf message im.ChannelLinkerInviteContent
 */
export interface ChannelLinkerInviteContent {
    /**
     * @generated from protobuf field: int64 inviter_user_id = 1;
     */
    inviterUserId: bigint;
    /**
     * @generated from protobuf field: int64 invitee_user_id = 2;
     */
    inviteeUserId: bigint;
    /**
     * @generated from protobuf field: string prompt = 3;
     */
    prompt: string;
    /**
     * @generated from protobuf field: string inviter_sec_user_id = 4;
     */
    inviterSecUserId: string;
    /**
     * @generated from protobuf field: string invitee_sec_user_id = 5;
     */
    inviteeSecUserId: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerReplyContent
 */
export interface ChannelLinkerReplyContent {
    /**
     * @generated from protobuf field: int64 inviter_user_id = 1;
     */
    inviterUserId: bigint;
    /**
     * @generated from protobuf field: int64 invitee_user_id = 2;
     */
    inviteeUserId: bigint;
    /**
     * @generated from protobuf field: int32 reply_result = 3;
     */
    replyResult: number;
    /**
     * @generated from protobuf field: string prompt = 4;
     */
    prompt: string;
    /**
     * @generated from protobuf field: string inviter_sec_user_id = 5;
     */
    inviterSecUserId: string;
    /**
     * @generated from protobuf field: string invitee_sec_user_id = 6;
     */
    inviteeSecUserId: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerPermitContent
 */
export interface ChannelLinkerPermitContent {
    /**
     * @generated from protobuf field: int64 applicant_user_id = 1;
     */
    applicantUserId: bigint;
    /**
     * @generated from protobuf field: int64 approver_user_id = 2;
     */
    approverUserId: bigint;
    /**
     * @generated from protobuf field: int32 permit_result = 3;
     */
    permitResult: number;
    /**
     * @generated from protobuf field: string prompt = 4;
     */
    prompt: string;
    /**
     * @generated from protobuf field: string applicant_sec_user_id = 5;
     */
    applicantSecUserId: string;
    /**
     * @generated from protobuf field: string approver_sec_user_id = 6;
     */
    approverSecUserId: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerEnterContent
 */
export interface ChannelLinkerEnterContent {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string sec_user_id = 2;
     */
    secUserId: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerLeaveContent
 */
export interface ChannelLinkerLeaveContent {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string sec_user_id = 2;
     */
    secUserId: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerKickOutContent
 */
export interface ChannelLinkerKickOutContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: string prompt = 2;
     */
    prompt: string;
    /**
     * @generated from protobuf field: string sec_from_user_id = 3;
     */
    secFromUserId: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerLinkedListChangeContent
 */
export interface ChannelLinkerLinkedListChangeContent {
    /**
     * @generated from protobuf field: repeated data.ChannelListUser channel_linkmic_users = 1;
     */
    channelLinkmicUsers: ChannelListUser[];
    /**
     * @generated from protobuf field: uint64 version = 2;
     */
    version: bigint;
    /**
     * @generated from protobuf field: string rtc_room_id_str = 3;
     */
    rtcRoomIdStr: string;
}
/**
 * @generated from protobuf message im.ChannelLinkerSilenceContent
 */
export interface ChannelLinkerSilenceContent {
    /**
     * @generated from protobuf field: int32 silence_status = 1;
     */
    silenceStatus: number;
    /**
     * @generated from protobuf field: int64 from_user_id = 2;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 3;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: string ack_message = 4;
     */
    ackMessage: string;
    /**
     * @generated from protobuf field: uint64 version = 5;
     */
    version: bigint;
    /**
     * @generated from protobuf field: string sec_from_user_id = 6;
     */
    secFromUserId: string;
    /**
     * @generated from protobuf field: string sec_to_user_id = 7;
     */
    secToUserId: string;
    /**
     * @generated from protobuf field: int32 silence_source = 8;
     */
    silenceSource: number;
}
/**
 * @generated from protobuf message im.UserContribute
 */
export interface UserContribute {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 rank = 2;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: int64 score = 3;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string nickname = 4;
     */
    nickname: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 5;
     */
    avatarThumb?: Image;
}
/**
 * @generated from protobuf message im.LinkerContributeMessage
 */
export interface LinkerContributeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 total_score = 3;
     */
    totalScore: bigint;
    /**
     * @generated from protobuf field: repeated im.UserContribute user_contribute_list = 4;
     */
    userContributeList: UserContribute[];
    /**
     * @generated from protobuf field: int64 micro_time_stamp = 5;
     */
    microTimeStamp: bigint;
    /**
     * @generated from protobuf field: int64 scene = 6;
     */
    scene: bigint;
    /**
     * @generated from protobuf field: string total_score_real_str = 7;
     */
    totalScoreRealStr: string;
    /**
     * @generated from protobuf field: string total_score_str = 8;
     */
    totalScoreStr: string;
    /**
     * @generated from protobuf field: data.LinkmicQuickInteract quick_interact = 9;
     */
    quickInteract?: LinkmicQuickInteract;
}
/**
 * @generated from protobuf message im.LinkMessage
 */
export interface LinkMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: int64 linker_id = 3;
     */
    linkerId: bigint;
    /**
     * @generated from protobuf field: int64 scene = 4;
     */
    scene: bigint;
    /**
     * @generated from protobuf field: im.LinkerInviteContent invite_content = 5;
     */
    inviteContent?: LinkerInviteContent;
    /**
     * @generated from protobuf field: im.LinkerReplyContent reply_content = 6;
     */
    replyContent?: LinkerReplyContent;
    /**
     * @generated from protobuf field: im.LinkerCreateContent create_content = 7;
     */
    createContent?: LinkerCreateContent;
    /**
     * @generated from protobuf field: im.LinkerCloseContent close_content = 8;
     */
    closeContent?: LinkerCloseContent;
    /**
     * @generated from protobuf field: im.LinkerEnterContent enter_content = 9;
     */
    enterContent?: LinkerEnterContent;
    /**
     * @generated from protobuf field: im.LinkerLeaveContent leave_content = 10;
     */
    leaveContent?: LinkerLeaveContent;
    /**
     * @generated from protobuf field: im.LinkerCancelContent cancel_content = 11;
     */
    cancelContent?: LinkerCancelContent;
    /**
     * @generated from protobuf field: im.LinkerKickOutContent kick_out_content = 12;
     */
    kickOutContent?: LinkerKickOutContent;
    /**
     * @generated from protobuf field: im.LinkerLinkedListChangeContent linked_list_change_content = 13;
     */
    linkedListChangeContent?: LinkerLinkedListChangeContent;
    /**
     * @generated from protobuf field: im.LinkerUpdateUserContent update_user_content = 14;
     */
    updateUserContent?: LinkerUpdateUserContent;
    /**
     * @generated from protobuf field: im.LinkerWaitingListChangeContent waiting_list_change_content = 15;
     */
    waitingListChangeContent?: LinkerWaitingListChangeContent;
    /**
     * @generated from protobuf field: im.LinkerBanContent ban_content = 16;
     */
    banContent?: LinkerBanContent;
    /**
     * @generated from protobuf field: im.LinkerItemContent item_content = 17;
     */
    itemContent?: LinkerItemContent;
    /**
     * @generated from protobuf field: im.LinkerViolationReminderContent violation_reminder_content = 18;
     */
    violationReminderContent?: LinkerViolationReminderContent;
    /**
     * @generated from protobuf field: im.LinkerUpdateLinkTypeApplyContent update_link_type_apply_content = 19;
     */
    updateLinkTypeApplyContent?: LinkerUpdateLinkTypeApplyContent;
    /**
     * @generated from protobuf field: im.LinkerUpdateLinkTypeReplyContent update_link_type_reply_content = 20;
     */
    updateLinkTypeReplyContent?: LinkerUpdateLinkTypeReplyContent;
    /**
     * @generated from protobuf field: im.LinkerAvatarAuditContent avatar_audit_content = 21;
     */
    avatarAuditContent?: LinkerAvatarAuditContent;
    /**
     * @generated from protobuf field: im.LinkerApplyExpiredContent apply_expired_content = 22;
     */
    applyExpiredContent?: LinkerApplyExpiredContent;
    /**
     * @generated from protobuf field: im.LinkerApplyStrongReminderContent apply_strong_reminder_content = 23;
     */
    applyStrongReminderContent?: LinkerApplyStrongReminderContent;
    /**
     * @generated from protobuf field: im.LinkerAnchorStreamSwitchContent anchor_stream_switch_content = 24;
     */
    anchorStreamSwitchContent?: LinkerAnchorStreamSwitchContent;
    /**
     * @generated from protobuf field: im.LinkerClickScreenContent click_screen_content = 25;
     */
    clickScreenContent?: LinkerClickScreenContent;
    /**
     * @generated from protobuf field: im.LinkerLockPositionContent lock_position_content = 26;
     */
    lockPositionContent?: LinkerLockPositionContent;
    /**
     * @generated from protobuf field: im.LinkerFollowStrongGuideContent follow_strong_guide_content = 27;
     */
    followStrongGuideContent?: LinkerFollowStrongGuideContent;
    /**
     * @generated from protobuf field: im.LinkerShareVideoImContent share_video_im_content = 28;
     */
    shareVideoImContent?: LinkerShareVideoImContent;
    /**
     * @generated from protobuf field: im.LinkerGuestInviteContent guest_invite_content = 29;
     */
    guestInviteContent?: LinkerGuestInviteContent;
    /**
     * @generated from protobuf field: im.LinkerGuestExitCastScreenContent exit_cast_screen_content = 30;
     */
    exitCastScreenContent?: LinkerGuestExitCastScreenContent;
    /**
     * @generated from protobuf field: im.LinkerSwitchSceneContent switch_scene_content = 31;
     */
    switchSceneContent?: LinkerSwitchSceneContent;
    /**
     * @generated from protobuf field: im.LinkPhaseEnterNextNotifyContent link_phase_enter_next_content = 32;
     */
    linkPhaseEnterNextContent?: LinkPhaseEnterNextNotifyContent;
    /**
     * @generated from protobuf field: im.LinkerChangePlayModeContent change_play_mode_content = 33;
     */
    changePlayModeContent?: LinkerChangePlayModeContent;
    /**
     * @generated from protobuf field: im.LinkerLowBalanceForPaidLinkmicContent low_balance_for_paid_linkmic_content = 34;
     */
    lowBalanceForPaidLinkmicContent?: LinkerLowBalanceForPaidLinkmicContent;
    /**
     * @generated from protobuf field: im.LinkerDegradeAlertContent degrade_alert_content = 35;
     */
    degradeAlertContent?: LinkerDegradeAlertContent;
    /**
     * @generated from protobuf field: im.LinkerEnlargeGuestInviteContent enlarge_guest_invite_content = 36;
     */
    enlargeGuestInviteContent?: LinkerEnlargeGuestInviteContent;
    /**
     * @generated from protobuf field: im.LinkerEnlargeGuestReplyContent enlarge_guest_reply_content = 37;
     */
    enlargeGuestReplyContent?: LinkerEnlargeGuestReplyContent;
    /**
     * @generated from protobuf field: im.LinkerEnlargeGuestApplyContent enlarge_guest_apply_content = 38;
     */
    enlargeGuestApplyContent?: LinkerEnlargeGuestApplyContent;
    /**
     * @generated from protobuf field: im.LinkPrepareApplyContent prepare_apply_content = 39;
     */
    prepareApplyContent?: LinkPrepareApplyContent;
    /**
     * @generated from protobuf field: im.LinkerCrossRoomUpdateContent cross_room_update_content = 40;
     */
    crossRoomUpdateContent?: LinkerCrossRoomUpdateContent;
    /**
     * @generated from protobuf field: im.LinkerChangeMultiPKTeamInfoContent change_multi_pk_team_info_content = 41;
     */
    changeMultiPkTeamInfoContent?: LinkerChangeMultiPKTeamInfoContent;
    /**
     * @generated from protobuf field: im.CrossRoomLinkInviteContent cross_room_link_invite_content = 42;
     */
    crossRoomLinkInviteContent?: CrossRoomLinkInviteContent;
    /**
     * @generated from protobuf field: im.CrossRoomLinkReplyContent cross_room_link_reply_content = 43;
     */
    crossRoomLinkReplyContent?: CrossRoomLinkReplyContent;
    /**
     * @generated from protobuf field: im.CrossRoomLinkCancelInviteContent cross_room_link_cancel_invite_content = 44;
     */
    crossRoomLinkCancelInviteContent?: CrossRoomLinkCancelInviteContent;
    /**
     * @generated from protobuf field: im.LinkerResumeAudienceContent linker_resume_audience_content = 45;
     */
    linkerResumeAudienceContent?: LinkerResumeAudienceContent;
    /**
     * @generated from protobuf field: im.LinkerBattleConnectContent linker_battle_connect_content = 46;
     */
    linkerBattleConnectContent?: LinkerBattleConnectContent;
    /**
     * @generated from protobuf field: im.LinkerResumeApplyContent linker_resume_apply_content = 47;
     */
    linkerResumeApplyContent?: LinkerResumeApplyContent;
    /**
     * @generated from protobuf field: im.CrossRoomRTCInfoContent cross_room_rtc_info_content = 48;
     */
    crossRoomRtcInfoContent?: CrossRoomRTCInfoContent;
    /**
     * @generated from protobuf field: im.AnchorUpdateLinkmicConfigContent anchor_update_linkmic_config_content = 49;
     */
    anchorUpdateLinkmicConfigContent?: AnchorUpdateLinkmicConfigContent;
    /**
     * @generated from protobuf field: im.AnchorUpdateLayoutContent anchor_update_layout_content = 50;
     */
    anchorUpdateLayoutContent?: AnchorUpdateLayoutContent;
    /**
     * @generated from protobuf field: im.LinkerApplyRankChangeContent apply_rank_change_content = 52;
     */
    applyRankChangeContent?: LinkerApplyRankChangeContent;
    /**
     * @generated from protobuf field: im.LinkerChangeMediaInfoContent change_media_content = 53;
     */
    changeMediaContent?: LinkerChangeMediaInfoContent;
    /**
     * @generated from protobuf field: im.LinkerUILayoutChangeContent linker_ui_layout_change_content = 54;
     */
    linkerUiLayoutChangeContent?: LinkerUILayoutChangeContent;
    /**
     * @generated from protobuf field: im.LinkerUpdateWaitingUserOffsetContent linker_update_waiting_user_offset_content = 55;
     */
    linkerUpdateWaitingUserOffsetContent?: LinkerUpdateWaitingUserOffsetContent;
    /**
     * @generated from protobuf field: im.LinkerRemoveWaitingUserContent linker_remove_waiting_user_content = 56;
     */
    linkerRemoveWaitingUserContent?: LinkerRemoveWaitingUserContent;
    /**
     * @generated from protobuf field: im.LinkerSysKickOutContent sys_kick_out_content = 101;
     */
    sysKickOutContent?: LinkerSysKickOutContent;
    /**
     * @generated from protobuf field: int64 fallback_scene = 199;
     */
    fallbackScene: bigint;
    /**
     * @generated from protobuf field: string extra = 200;
     */
    extra: string;
    /**
     * @generated from protobuf field: data.LinkerBaseInfo linker_base_info = 201;
     */
    linkerBaseInfo?: LinkerBaseInfo;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 202;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.LinkmicInfo
 */
export interface LinkmicInfo {
    /**
     * @generated from protobuf field: string access_key = 1;
     */
    accessKey: string;
    /**
     * @generated from protobuf field: int64 link_mic_id = 2;
     */
    linkMicId: bigint;
    /**
     * @generated from protobuf field: bool joinable = 3;
     */
    joinable: boolean;
    /**
     * @generated from protobuf field: int32 confluence_type = 4;
     */
    confluenceType: number;
    /**
     * @generated from protobuf field: string rtc_ext_info = 5;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string rtc_app_id = 6;
     */
    rtcAppId: string;
    /**
     * @generated from protobuf field: string rtc_app_sign = 7;
     */
    rtcAppSign: string;
    /**
     * @generated from protobuf field: string linkmic_id_str = 8;
     */
    linkmicIdStr: string;
    /**
     * @generated from protobuf field: int64 vendor = 9;
     */
    vendor: bigint;
    /**
     * @generated from protobuf field: string live_core_ext_info = 10;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: data.MultiRtcInfo multi_rtc_info = 11;
     */
    multiRtcInfo?: MultiRtcInfo;
    /**
     * @generated from protobuf field: data.MultiLiveCoreInfo multi_live_core_info = 12;
     */
    multiLiveCoreInfo?: MultiLiveCoreInfo;
}
/**
 * @generated from protobuf message im.LinkerSetting
 */
export interface LinkerSetting {
    /**
     * @generated from protobuf field: int64 max_member_limit = 1;
     */
    maxMemberLimit: bigint;
    /**
     * @generated from protobuf field: int64 link_type = 2;
     */
    linkType: bigint;
    /**
     * @generated from protobuf field: int64 scene = 3;
     */
    scene: bigint;
    /**
     * @generated from protobuf field: int64 owner_user_id = 4;
     */
    ownerUserId: bigint;
    /**
     * @generated from protobuf field: int64 owner_room_id = 5;
     */
    ownerRoomId: bigint;
    /**
     * @generated from protobuf field: int64 vendor = 6;
     */
    vendor: bigint;
}
/**
 * @generated from protobuf message im.LinkerInviteContent
 */
export interface LinkerInviteContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 from_room_id = 2;
     */
    fromRoomId: bigint;
    /**
     * @generated from protobuf field: string to_rtc_ext_info = 3;
     */
    toRtcExtInfo: string;
    /**
     * @generated from protobuf field: bool rtc_join_channel = 4;
     */
    rtcJoinChannel: boolean;
    /**
     * @generated from protobuf field: int64 vendor = 5;
     */
    vendor: bigint;
    /**
     * @generated from protobuf field: string sec_from_user_id = 6;
     */
    secFromUserId: string;
    /**
     * @generated from protobuf field: string to_linkmic_id_str = 7;
     */
    toLinkmicIdStr: string;
    /**
     * @generated from protobuf field: bool rtc_push_stream = 8;
     */
    rtcPushStream: boolean;
    /**
     * @generated from protobuf field: string sign_extra = 9;
     */
    signExtra: string;
    /**
     * @generated from protobuf field: int32 invite_source = 10;
     */
    inviteSource: number;
    /**
     * @generated from protobuf field: im.LinkmicInfo from_user_linkmic_info = 11;
     */
    fromUserLinkmicInfo?: LinkmicInfo;
    /**
     * @generated from protobuf field: data.MultiRtcInfo multi_rtc_info = 12;
     */
    multiRtcInfo?: MultiRtcInfo;
    /**
     * @generated from protobuf field: data.MultiLiveCoreInfo multi_live_core_info = 13;
     */
    multiLiveCoreInfo?: MultiLiveCoreInfo;
    /**
     * @generated from protobuf field: int32 multi_pk_mode = 14;
     */
    multiPkMode: number;
    /**
     * @generated from protobuf field: bool support_multi_pk_team_mode = 15;
     */
    supportMultiPkTeamMode: boolean;
    /**
     * @generated from protobuf field: data.LinkmicInfo to_user_linkmic_info = 16;
     */
    toUserLinkmicInfo?: LinkmicInfo$;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 17;
     */
    multiChannelInfo?: MultiChannelInfo;
    /**
     * @generated from protobuf field: string invite_reject_temporary_text = 18;
     */
    inviteRejectTemporaryText: string;
    /**
     * @generated from protobuf field: string audience_linker_description = 19;
     */
    audienceLinkerDescription: string;
    /**
     * @generated from protobuf field: bool inviter_with_audience = 20;
     */
    inviterWithAudience: boolean;
    /**
     * @generated from protobuf field: repeated data.ListUser invitee_followed_users = 21;
     */
    inviteeFollowedUsers: ListUser[];
    /**
     * @generated from protobuf field: repeated data.ListUser inviter_users = 22;
     */
    inviterUsers: ListUser[];
    /**
     * @generated from protobuf field: int64 to_user_id = 23;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_room_id = 24;
     */
    toRoomId: bigint;
    /**
     * @generated from protobuf field: data.ListUser applied_user = 25;
     */
    appliedUser?: ListUser;
    /**
     * @generated from protobuf field: data.PreRTCInfo pre_rtc_info = 26;
     */
    preRtcInfo?: PreRTCInfo;
    /**
     * @generated from protobuf field: bool support_multi_invite = 27;
     */
    supportMultiInvite: boolean;
    /**
     * @generated from protobuf field: int64 cur_invite_num = 28;
     */
    curInviteNum: bigint;
    /**
     * @generated from protobuf field: int64 wait_sec = 29;
     */
    waitSec: bigint;
    /**
     * @generated from protobuf field: repeated data.BattleRivalTag tags = 30;
     */
    tags: BattleRivalTag[];
    /**
     * @generated from protobuf field: data.ListUser invite_user = 31;
     */
    inviteUser?: ListUser;
    /**
     * @generated from protobuf field: string client_attached_info = 32;
     */
    clientAttachedInfo: string;
}
/**
 * @generated from protobuf message im.LinkPrepareApplyContent
 */
export interface LinkPrepareApplyContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 from_room_id = 2;
     */
    fromRoomId: bigint;
    /**
     * @generated from protobuf field: int64 vendor = 3;
     */
    vendor: bigint;
    /**
     * @generated from protobuf field: string sec_from_user_id = 4;
     */
    secFromUserId: string;
    /**
     * @generated from protobuf field: int64 count = 5;
     */
    count: bigint;
}
/**
 * @generated from protobuf message im.LinkerReplyContent
 */
export interface LinkerReplyContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 from_room_id = 2;
     */
    fromRoomId: bigint;
    /**
     * @generated from protobuf field: im.LinkmicInfo from_user_linkmic_info = 3;
     */
    fromUserLinkmicInfo?: LinkmicInfo;
    /**
     * @generated from protobuf field: int64 to_user_id = 4;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: im.LinkmicInfo to_user_linkmic_info = 5;
     */
    toUserLinkmicInfo?: LinkmicInfo;
    /**
     * @generated from protobuf field: int64 link_type = 6;
     */
    linkType: bigint;
    /**
     * @generated from protobuf field: int64 reply_status = 7;
     */
    replyStatus: bigint;
    /**
     * @generated from protobuf field: im.LinkerSetting linker_setting = 8;
     */
    linkerSetting?: LinkerSetting;
    /**
     * @generated from protobuf field: bool biz_join_channel = 9;
     */
    bizJoinChannel: boolean;
    /**
     * @generated from protobuf field: int32 multi_pk_mode = 10;
     */
    multiPkMode: number;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 11;
     */
    multiChannelInfo?: MultiChannelInfo;
    /**
     * @generated from protobuf field: string toast = 12;
     */
    toast: string;
    /**
     * @generated from protobuf field: data.AnchorLinkmicChannelInfo backup_linkmic_info = 14;
     */
    backupLinkmicInfo?: AnchorLinkmicChannelInfo;
    /**
     * @generated from protobuf field: string kicked_users_unique_id = 15;
     */
    kickedUsersUniqueId: string;
    /**
     * @generated from protobuf field: int64 match_type = 16;
     */
    matchType: bigint;
    /**
     * @generated from protobuf field: int64 version = 17;
     */
    version: bigint;
    /**
     * @generated from protobuf field: int64 anchor_ui_layout = 18;
     */
    anchorUiLayout: bigint;
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 19;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: int32 switch_to_scene = 20;
     */
    switchToScene: number;
    /**
     * @generated from protobuf field: string battle_config_setting = 21;
     */
    battleConfigSetting: string;
}
/**
 * @generated from protobuf message im.LinkerCreateContent
 */
export interface LinkerCreateContent {
    /**
     * @generated from protobuf field: int64 owner_id = 1;
     */
    ownerId: bigint;
    /**
     * @generated from protobuf field: int64 owner_room_id = 2;
     */
    ownerRoomId: bigint;
    /**
     * @generated from protobuf field: int64 link_type = 3;
     */
    linkType: bigint;
}
/**
 * @generated from protobuf message im.MatchEffect
 */
export interface MatchEffect {
    /**
     * @generated from protobuf field: bool show_effect = 1;
     */
    showEffect: boolean;
    /**
     * @generated from protobuf field: data.Image effect_resource = 2;
     */
    effectResource?: Image;
}
/**
 * @generated from protobuf message im.CityEffect
 */
export interface CityEffect {
    /**
     * @generated from protobuf field: data.Image effect_resource = 1;
     */
    effectResource?: Image;
    /**
     * @generated from protobuf field: string city = 2;
     */
    city: string;
    /**
     * @generated from protobuf field: repeated int64 show_effect_user_id_list = 3;
     */
    showEffectUserIdList: bigint[];
}
/**
 * @generated from protobuf message im.LinkerEnterContent
 */
export interface LinkerEnterContent {
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 1;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int32 apply_type = 3;
     */
    applyType: number;
    /**
     * @generated from protobuf field: repeated data.ListUser pre_link_users = 4;
     */
    preLinkUsers: ListUser[];
    /**
     * @generated from protobuf field: im.MatchEffect match_effect = 5;
     */
    matchEffect?: MatchEffect;
    /**
     * @generated from protobuf field: im.CityEffect city_effect = 6;
     */
    cityEffect?: CityEffect;
    /**
     * @generated from protobuf field: uint64 version = 7;
     */
    version: bigint;
    /**
     * @generated from protobuf field: data.MsgBoardItemInfo msg_board_item = 9;
     */
    msgBoardItem?: MsgBoardItemInfo;
    /**
     * @generated from protobuf field: data.LinkIconConfig link_icon_config = 10;
     */
    linkIconConfig?: LinkIconConfig;
}
/**
 * @generated from protobuf message im.LinkerViolationReminderContent
 */
export interface LinkerViolationReminderContent {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.LinkerCloseContent
 */
export interface LinkerCloseContent {
    /**
     * @generated from protobuf field: int32 source = 1;
     */
    source: number;
    /**
     * @generated from protobuf field: data.BanUser ban_anchor_info = 2;
     */
    banAnchorInfo?: BanUser;
}
/**
 * @generated from protobuf message im.LinkerLeaveContent
 */
export interface LinkerLeaveContent {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 2;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: data.ListUser user = 3;
     */
    user?: ListUser;
    /**
     * @generated from protobuf field: repeated data.ListUser pre_link_users = 4;
     */
    preLinkUsers: ListUser[];
    /**
     * @generated from protobuf field: uint64 version = 5;
     */
    version: bigint;
    /**
     * @generated from protobuf field: int32 leave_source = 7;
     */
    leaveSource: number;
    /**
     * @generated from protobuf field: data.PreRTCInfo pre_rtc_info = 8;
     */
    preRtcInfo?: PreRTCInfo;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 9;
     */
    multiChannelInfo?: MultiChannelInfo;
    /**
     * @generated from protobuf field: repeated data.ListUser list_users = 10;
     */
    listUsers: ListUser[];
    /**
     * @generated from protobuf field: int64 pre_rtc_version = 11;
     */
    preRtcVersion: bigint;
}
/**
 * @generated from protobuf message im.LinkerCancelContent
 */
export interface LinkerCancelContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int64 cancel_type = 3;
     */
    cancelType: bigint;
    /**
     * @generated from protobuf field: int32 invite_source = 4;
     */
    inviteSource: number;
}
/**
 * @generated from protobuf message im.LinkerKickOutContent
 */
export interface LinkerKickOutContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int32 control_type = 2;
     */
    controlType: number;
    /**
     * @generated from protobuf field: int64 paid_count = 3;
     */
    paidCount: bigint;
    /**
     * @generated from protobuf field: int64 link_duration = 4;
     */
    linkDuration: bigint;
    /**
     * @generated from protobuf field: int32 kick_out_source = 5;
     */
    kickOutSource: number;
}
/**
 * @generated from protobuf message im.LinkerSysKickOutContent
 */
export interface LinkerSysKickOutContent {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string linkmic_id_str = 2;
     */
    linkmicIdStr: string;
    /**
     * @generated from protobuf field: string toast_msg = 3;
     */
    toastMsg: string;
}
/**
 * @generated from protobuf message im.LinkerWaitingListChangeContent
 */
export interface LinkerWaitingListChangeContent {
    /**
     * @generated from protobuf field: data.PreRTCInfo pre_rtc_info = 1;
     */
    preRtcInfo?: PreRTCInfo;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 2;
     */
    multiChannelInfo?: MultiChannelInfo;
    /**
     * @generated from protobuf field: repeated data.ListUser list_users = 3;
     */
    listUsers: ListUser[];
    /**
     * @generated from protobuf field: int64 version = 4;
     */
    version: bigint;
}
/**
 * @generated from protobuf message im.LinkerLinkedListChangeContent
 */
export interface LinkerLinkedListChangeContent {
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 1;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: repeated data.ListUser pre_link_users = 2;
     */
    preLinkUsers: ListUser[];
    /**
     * @generated from protobuf field: uint64 version = 3;
     */
    version: bigint;
    /**
     * @generated from protobuf field: int32 push_type = 4;
     */
    pushType: number;
    /**
     * @generated from protobuf field: int32 update_mode = 6;
     */
    updateMode: number;
}
/**
 * @generated from protobuf message im.LinkerBanContent
 */
export interface LinkerBanContent {
    /**
     * @generated from protobuf field: repeated data.BanUser ban_users = 1;
     */
    banUsers: BanUser[];
}
/**
 * @generated from protobuf message im.LinkerUpdateUserContent
 */
export interface LinkerUpdateUserContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 4;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
    /**
     * @generated from protobuf field: uint64 version = 6;
     */
    version: bigint;
    /**
     * @generated from protobuf field: string ack_message = 8;
     */
    ackMessage: string;
}
/**
 * @generated from protobuf message im.ChannelNoticeContent
 */
export interface ChannelNoticeContent {
    /**
     * @generated from protobuf field: int64 channel_id = 1;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int32 action = 2;
     */
    action: number;
    /**
     * @generated from protobuf field: string extra_info = 3;
     */
    extraInfo: string;
}
/**
 * @generated from protobuf message im.LinkerItemContent
 */
export interface LinkerItemContent {
    /**
     * @generated from protobuf field: int64 item_id = 1;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: int64 author_id = 2;
     */
    authorId: bigint;
    /**
     * @generated from protobuf field: string author_name = 3;
     */
    authorName: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 4;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_medium = 5;
     */
    avatarMedium?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_large = 6;
     */
    avatarLarge?: Image;
    /**
     * @generated from protobuf field: string item_description = 7;
     */
    itemDescription: string;
    /**
     * @generated from protobuf field: string music_id = 8;
     */
    musicId: string;
    /**
     * @generated from protobuf field: string music_title = 9;
     */
    musicTitle: string;
    /**
     * @generated from protobuf field: string music_author = 10;
     */
    musicAuthor: string;
    /**
     * @generated from protobuf field: string music_url = 11;
     */
    musicUrl: string;
    /**
     * @generated from protobuf field: int64 comment_count = 12;
     */
    commentCount: bigint;
}
/**
 * @generated from protobuf message im.LinkerUpdateLinkTypeApplyContent
 */
export interface LinkerUpdateLinkTypeApplyContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 link_type = 3;
     */
    linkType: number;
    /**
     * @generated from protobuf field: int32 source = 4;
     */
    source: number;
    /**
     * @generated from protobuf field: string ack_message = 5;
     */
    ackMessage: string;
}
/**
 * @generated from protobuf message im.LinkerUpdateLinkTypeReplyContent
 */
export interface LinkerUpdateLinkTypeReplyContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 reply_type = 3;
     */
    replyType: number;
    /**
     * @generated from protobuf field: string reply_prompts = 4;
     */
    replyPrompts: string;
}
/**
 * @generated from protobuf message im.LinkerAvatarAuditContent
 */
export interface LinkerAvatarAuditContent {
    /**
     * @generated from protobuf field: int32 audit_res = 1;
     */
    auditRes: number;
    /**
     * @generated from protobuf field: string reason = 2;
     */
    reason: string;
    /**
     * @generated from protobuf field: int64 review_id = 3;
     */
    reviewId: bigint;
}
/**
 * @generated from protobuf message im.LinkerApplyExpiredContent
 */
export interface LinkerApplyExpiredContent {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message im.LinkerApplyStrongReminderContent
 */
export interface LinkerApplyStrongReminderContent {
    /**
     * @generated from protobuf field: int32 source = 1;
     */
    source: number;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
}
/**
 * @generated from protobuf message im.LinkerAnchorStreamSwitchContent
 */
export interface LinkerAnchorStreamSwitchContent {
    /**
     * @generated from protobuf field: bool use_backup_stream = 1;
     */
    useBackupStream: boolean;
    /**
     * @generated from protobuf field: int64 anchor_user_id = 2;
     */
    anchorUserId: bigint;
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 3;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: uint64 version = 4;
     */
    version: bigint;
}
/**
 * @generated from protobuf message im.LinkerClickScreenContent
 */
export interface LinkerClickScreenContent {
    /**
     * @generated from protobuf field: int64 device_width = 1;
     */
    deviceWidth: bigint;
    /**
     * @generated from protobuf field: int64 device_height = 2;
     */
    deviceHeight: bigint;
    /**
     * @generated from protobuf field: int64 point_x = 3;
     */
    pointX: bigint;
    /**
     * @generated from protobuf field: int64 point_y = 4;
     */
    pointY: bigint;
    /**
     * @generated from protobuf field: int64 from_user_id = 5;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: data.Image avatar_medium = 6;
     */
    avatarMedium?: Image;
}
/**
 * @generated from protobuf message im.LinkerFollowStrongGuideContent
 */
export interface LinkerFollowStrongGuideContent {
    /**
     * @generated from protobuf field: data.User from_user = 1;
     */
    fromUser?: User;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 from_user_type = 3;
     */
    fromUserType: number;
}
/**
 * @generated from protobuf message im.LinkerLockPositionContent
 */
export interface LinkerLockPositionContent {
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem locked_positions = 1;
     */
    lockedPositions: LinkmicPositionItem[];
}
/**
 * @generated from protobuf message im.LinkerShareVideoImContent
 */
export interface LinkerShareVideoImContent {
    /**
     * @generated from protobuf field: string im_content = 1;
     */
    imContent: string;
}
/**
 * @generated from protobuf message im.LinkerGuestInviteContent
 */
export interface LinkerGuestInviteContent {
    /**
     * @generated from protobuf field: data.Text invite_content = 1;
     */
    inviteContent?: Text;
}
/**
 * @generated from protobuf message im.LinkerGuestExitCastScreenContent
 */
export interface LinkerGuestExitCastScreenContent {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message im.LinkerSwitchSceneContent
 */
export interface LinkerSwitchSceneContent {
    /**
     * @generated from protobuf field: data.SwitchSceneData switch_scene_data = 1;
     */
    switchSceneData?: SwitchSceneData;
}
/**
 * @generated from protobuf message im.LinkPhaseEnterNextNotifyContent
 */
export interface LinkPhaseEnterNextNotifyContent {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: data.User anchor_user = 2;
     */
    anchorUser?: User;
    /**
     * @generated from protobuf field: data.User link_user = 3;
     */
    linkUser?: User;
    /**
     * @generated from protobuf field: data.LinkPhase next_phase = 4;
     */
    nextPhase?: LinkPhase;
    /**
     * @generated from protobuf field: int32 current_phase_id = 5;
     */
    currentPhaseId: number;
    /**
     * @generated from protobuf field: int32 current_linktime_seconds = 6;
     */
    currentLinktimeSeconds: number;
    /**
     * @generated from protobuf field: data.LinkPhaseConfig phase_config = 7;
     */
    phaseConfig?: LinkPhaseConfig;
}
/**
 * @generated from protobuf message im.LinkerChangePlayModeContent
 */
export interface LinkerChangePlayModeContent {
    /**
     * @generated from protobuf field: data.ChangePlayModeData change_play_mode_data = 1;
     */
    changePlayModeData?: ChangePlayModeData;
}
/**
 * @generated from protobuf message im.LinkerLowBalanceForPaidLinkmicContent
 */
export interface LinkerLowBalanceForPaidLinkmicContent {
    /**
     * @generated from protobuf field: string toast = 1;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.LinkerDegradeAlertContent
 */
export interface LinkerDegradeAlertContent {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string degrade_content = 2;
     */
    degradeContent: string;
}
/**
 * @generated from protobuf message im.LinkerEnlargeGuestInviteContent
 */
export interface LinkerEnlargeGuestInviteContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 invite_type = 3;
     */
    inviteType: number;
}
/**
 * @generated from protobuf message im.LinkerEnlargeGuestReplyContent
 */
export interface LinkerEnlargeGuestReplyContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 reply_type = 3;
     */
    replyType: number;
    /**
     * @generated from protobuf field: string reply_prompts = 4;
     */
    replyPrompts: string;
}
/**
 * @generated from protobuf message im.LinkerEnlargeGuestApplyContent
 */
export interface LinkerEnlargeGuestApplyContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: string apply_prompts = 2;
     */
    applyPrompts: string;
}
/**
 * @generated from protobuf message im.CrossRoomLinkInviteContent
 */
export interface CrossRoomLinkInviteContent {
    /**
     * @generated from protobuf field: data.User inviter = 1;
     */
    inviter?: User;
    /**
     * @generated from protobuf field: data.InviteRoomInfo room_info = 2;
     */
    roomInfo?: InviteRoomInfo;
    /**
     * @generated from protobuf field: string invite_tips = 3;
     */
    inviteTips: string;
    /**
     * @generated from protobuf field: int32 inviter_room_join_status = 4;
     */
    inviterRoomJoinStatus: number;
    /**
     * @generated from protobuf field: data.RoomBattleMode room_battle_mode = 5;
     */
    roomBattleMode?: RoomBattleMode;
}
/**
 * @generated from protobuf message im.CrossRoomLinkReplyContent
 */
export interface CrossRoomLinkReplyContent {
    /**
     * @generated from protobuf field: int32 reply_type = 1;
     */
    replyType: number;
    /**
     * @generated from protobuf field: int64 invitee_room_id = 2;
     */
    inviteeRoomId: bigint;
    /**
     * @generated from protobuf field: int32 cross_type = 3;
     */
    crossType: number;
    /**
     * @generated from protobuf field: repeated data.CrossRoomLinkReplyGuestInfo guest_infos = 4;
     */
    guestInfos: CrossRoomLinkReplyGuestInfo[];
    /**
     * @generated from protobuf field: int64 invitee_anchor_id = 5;
     */
    inviteeAnchorId: bigint;
    /**
     * @generated from protobuf field: int64 follow_status = 6;
     */
    followStatus: bigint;
    /**
     * @generated from protobuf field: int64 invite_source = 7;
     */
    inviteSource: bigint;
    /**
     * @generated from protobuf field: int64 reply_user_id = 8;
     */
    replyUserId: bigint;
    /**
     * @generated from protobuf field: string reply_toast = 9;
     */
    replyToast: string;
    /**
     * @generated from protobuf field: int32 reply_operate = 10;
     */
    replyOperate: number;
    /**
     * @generated from protobuf field: data.RoomBattleProcessInfo process_info = 11;
     */
    processInfo?: RoomBattleProcessInfo;
}
/**
 * @generated from protobuf message im.CrossRoomLinkCancelInviteContent
 */
export interface CrossRoomLinkCancelInviteContent {
    /**
     * @generated from protobuf field: int64 canceller_room_id = 1;
     */
    cancellerRoomId: bigint;
}
/**
 * @generated from protobuf message im.LinkerCrossRoomUpdateContent
 */
export interface LinkerCrossRoomUpdateContent {
    /**
     * @generated from protobuf field: int64 from_room_id = 1;
     */
    fromRoomId: bigint;
    /**
     * @generated from protobuf field: int64 to_room_id = 2;
     */
    toRoomId: bigint;
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 4;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: uint64 version = 5;
     */
    version: bigint;
}
/**
 * @generated from protobuf message im.LinkerChangeMultiPKTeamInfoContent
 */
export interface LinkerChangeMultiPKTeamInfoContent {
    /**
     * @generated from protobuf field: data.MultiPKModeInfo multi_pk_mode_info = 1;
     */
    multiPkModeInfo?: MultiPKModeInfo;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.LinkerResumeAudienceContent
 */
export interface LinkerResumeAudienceContent {
    /**
     * @generated from protobuf field: string rtc_ext_info = 1;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_ext_info = 2;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 3;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: uint64 version = 4;
     */
    version: bigint;
}
/**
 * @generated from protobuf message im.LinkerBattleConnectContent
 */
export interface LinkerBattleConnectContent {
    /**
     * @generated from protobuf field: string live_core_ext_info = 1;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: string rtc_ext_info = 2;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 4;
     */
    multiChannelInfo?: MultiChannelInfo;
    /**
     * @generated from protobuf field: uint64 version = 5;
     */
    version: bigint;
    /**
     * @generated from protobuf field: repeated data.ListUser anchor_user_list = 6;
     */
    anchorUserList: ListUser[];
}
/**
 * @generated from protobuf message im.LinkerResumeApplyContent
 */
export interface LinkerResumeApplyContent {
    /**
     * @generated from protobuf field: im.LinkerResumeApplyContent.ApplyParam param = 1;
     */
    param?: LinkerResumeApplyContent_ApplyParam;
    /**
     * @generated from protobuf field: int64 apply_user = 2;
     */
    applyUser: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 3;
     */
    roomId: bigint;
}
/**
 * @generated from protobuf message im.LinkerResumeApplyContent.ApplyParam
 */
export interface LinkerResumeApplyContent_ApplyParam {
    /**
     * @generated from protobuf field: int32 apply_type = 1;
     */
    applyType: number;
}
/**
 * @generated from protobuf message im.CrossRoomRTCInfoContent
 */
export interface CrossRoomRTCInfoContent {
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 1;
     */
    multiChannelInfo?: MultiChannelInfo;
}
/**
 * @generated from protobuf message im.AnchorUpdateLinkmicConfigContent
 */
export interface AnchorUpdateLinkmicConfigContent {
    /**
     * @generated from protobuf field: bool forbid_invite_by_general = 1;
     */
    forbidInviteByGeneral: boolean;
    /**
     * @generated from protobuf field: bool forbid_apply_from_other = 2;
     */
    forbidApplyFromOther: boolean;
}
/**
 * @generated from protobuf message im.AnchorUpdateLayoutContent
 */
export interface AnchorUpdateLayoutContent {
    /**
     * @generated from protobuf field: int32 layout_type = 1;
     */
    layoutType: number;
    /**
     * @generated from protobuf field: int64 update_user_id = 2;
     */
    updateUserId: bigint;
    /**
     * @generated from protobuf field: int32 anchor_ui_layout = 3;
     */
    anchorUiLayout: number;
    /**
     * @generated from protobuf field: int32 anchor_layout_range = 4;
     */
    anchorLayoutRange: number;
    /**
     * @generated from protobuf field: int64 operator_id = 5;
     */
    operatorId: bigint;
}
/**
 * @generated from protobuf message im.LinkerApplyRankChangeContent
 */
export interface LinkerApplyRankChangeContent {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
}
/**
 * @generated from protobuf message im.LinkerChangeMediaInfoContent
 */
export interface LinkerChangeMediaInfoContent {
    /**
     * @generated from protobuf field: repeated int32 scene_list = 1;
     */
    sceneList: number[];
    /**
     * @generated from protobuf field: repeated int32 play_mode_list = 2;
     */
    playModeList: number[];
    /**
     * @generated from protobuf field: data.LinkmicMediaParam linkmic_media_param = 3;
     */
    linkmicMediaParam?: LinkmicMediaParam;
}
/**
 * @generated from protobuf message im.LinkerUILayoutChangeContent
 */
export interface LinkerUILayoutChangeContent {
    /**
     * @generated from protobuf field: int64 ui_layout = 1;
     */
    uiLayout: bigint;
    /**
     * @generated from protobuf field: string rtc_ext_info = 2;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_ext_info = 3;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: data.MultiRtcInfo multi_rtc_info = 4;
     */
    multiRtcInfo?: MultiRtcInfo;
    /**
     * @generated from protobuf field: data.MultiLiveCoreInfo multi_live_core_info = 5;
     */
    multiLiveCoreInfo?: MultiLiveCoreInfo;
}
/**
 * @generated from protobuf message im.LinkerUpdateWaitingUserOffsetContent
 */
export interface LinkerUpdateWaitingUserOffsetContent {
    /**
     * @generated from protobuf field: int64 offset = 1;
     */
    offset: bigint;
    /**
     * @generated from protobuf field: int32 sort_strategy = 2;
     */
    sortStrategy: number;
    /**
     * @generated from protobuf field: int64 total_count = 3;
     */
    totalCount: bigint;
}
/**
 * @generated from protobuf message im.LinkerRemoveWaitingUserContent
 */
export interface LinkerRemoveWaitingUserContent {
    /**
     * @generated from protobuf field: string waiting_user_toast = 1;
     */
    waitingUserToast: string;
}
/**
 * @generated from protobuf message im.LinkMicArmies
 */
export interface LinkMicArmies {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.LinkMicArmies.UserArmies user_armies_list = 3;
     */
    userArmiesList: LinkMicArmies_UserArmies[];
    /**
     * @generated from protobuf field: data.BattleContributorsRankListV2 rank_list_v2 = 4;
     */
    rankListV2?: BattleContributorsRankListV2;
}
/**
 * @generated from protobuf message im.LinkMicArmies.UserArmies
 */
export interface LinkMicArmies_UserArmies {
    /**
     * @generated from protobuf field: repeated im.LinkMicArmies.UserArmies.UserArmy user_armies = 1;
     */
    userArmies: LinkMicArmies_UserArmies_UserArmy[];
}
/**
 * @generated from protobuf message im.LinkMicArmies.UserArmies.UserArmy
 */
export interface LinkMicArmies_UserArmies_UserArmy {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
    /**
     * @generated from protobuf field: string nickname = 3;
     */
    nickname: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 4;
     */
    avatarThumb?: Image;
}
/**
 * @generated from protobuf message im.LinkMicBattleFinish
 */
export interface LinkMicBattleFinish {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.BattleSettings battle_settings = 2;
     */
    battleSettings?: BattleSettings;
    /**
     * @generated from protobuf field: repeated data.BattleArmy battle_armies = 3;
     */
    battleArmies: BattleArmy[];
    /**
     * @generated from protobuf field: repeated data.BattleScore battle_scores = 4;
     */
    battleScores: BattleScore[];
    /**
     * @generated from protobuf field: repeated data.User anchors = 5;
     */
    anchors: User[];
    /**
     * @generated from protobuf field: data.OperationalPlay operational_play = 7;
     */
    operationalPlay?: OperationalPlay;
    /**
     * @generated from protobuf field: int32 end_reason = 8;
     */
    endReason: number;
    /**
     * @generated from protobuf field: string cut_short_prompt = 9;
     */
    cutShortPrompt: string;
    /**
     * @generated from protobuf field: string cut_short_toast = 10;
     */
    cutShortToast: string;
    /**
     * @generated from protobuf field: bool cut_short_win = 11;
     */
    cutShortWin: boolean;
    /**
     * @generated from protobuf field: int32 kill_finish_type = 13;
     */
    killFinishType: number;
    /**
     * @generated from protobuf field: data.BreakthroughInfo breakthrough_info = 14;
     */
    breakthroughInfo?: BreakthroughInfo;
    /**
     * @generated from protobuf field: data.BattleSkinConfig skin_config = 15;
     */
    skinConfig?: BattleSkinConfig;
    /**
     * @generated from protobuf field: int32 skin_type = 16;
     */
    skinType: number;
}
/**
 * @generated from protobuf message im.BattleMode
 */
export interface BattleMode {
    /**
     * @generated from protobuf field: int32 mode = 1;
     */
    mode: number;
    /**
     * @generated from protobuf field: im.BattleMode.StealTowerData steal_tower_data = 2;
     */
    stealTowerData?: BattleMode_StealTowerData;
}
/**
 * @generated from protobuf message im.BattleMode.StealTowerData
 */
export interface BattleMode_StealTowerData {
    /**
     * @generated from protobuf field: int64 trigger_time = 1;
     */
    triggerTime: bigint;
}
/**
 * @generated from protobuf message im.BattleSettings
 */
export interface BattleSettings {
    /**
     * @generated from protobuf field: int64 battle_id = 2;
     */
    battleId: bigint;
    /**
     * @generated from protobuf field: int64 start_time_ms = 3;
     */
    startTimeMs: bigint;
    /**
     * @generated from protobuf field: int64 duration = 4;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string theme = 5;
     */
    theme: string;
    /**
     * @generated from protobuf field: int64 channel_id = 6;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 match_type = 7;
     */
    matchType: bigint;
    /**
     * @generated from protobuf field: string banner_url = 8;
     */
    bannerUrl: string;
    /**
     * @generated from protobuf field: int64 sub_type = 9;
     */
    subType: bigint;
    /**
     * @generated from protobuf field: int32 mode = 10;
     */
    mode: number;
    /**
     * @generated from protobuf field: string config = 11;
     */
    config: string;
    /**
     * @generated from protobuf field: string notify_scheme_url = 12;
     */
    notifySchemeUrl: string;
    /**
     * @generated from protobuf field: string hotsoon_notify_scheme_url = 13;
     */
    hotsoonNotifySchemeUrl: string;
    /**
     * @generated from protobuf field: data.Image unknwon_field1 = 14;
     */
    unknwonField1?: Image;
    /**
     * @generated from protobuf field: string unknwon_field2 = 15;
     */
    unknwonField2: string;
    /**
     * @generated from protobuf field: string unknwon_field3 = 16;
     */
    unknwonField3: string;
    /**
     * @generated from protobuf field: data.BattleTitleConfig title_config = 17;
     */
    titleConfig?: BattleTitleConfig;
    /**
     * @generated from protobuf field: data.BattleTitleConfig punish_config = 18;
     */
    punishConfig?: BattleTitleConfig;
    /**
     * @generated from protobuf field: int64 punish_duration = 19;
     */
    punishDuration: bigint;
    /**
     * @generated from protobuf field: int64 punish_start_time_ms = 20;
     */
    punishStartTimeMs: bigint;
    /**
     * @generated from protobuf field: int32 optimize_version = 21;
     */
    optimizeVersion: number;
    /**
     * @generated from protobuf field: bool punish_optimize_on = 22;
     */
    punishOptimizeOn: boolean;
    /**
     * @generated from protobuf field: int64 blood_display_duration = 23;
     */
    bloodDisplayDuration: bigint;
    /**
     * @generated from protobuf field: int64 status_display_duration = 24;
     */
    statusDisplayDuration: bigint;
    /**
     * @generated from protobuf field: string toast = 25;
     */
    toast: string;
    /**
     * @generated from protobuf field: bool need_close_linkmic = 26;
     */
    needCloseLinkmic: boolean;
    /**
     * @generated from protobuf field: bool display_last_result = 27;
     */
    displayLastResult: boolean;
    /**
     * @generated from protobuf field: string normal_activity_name = 28;
     */
    normalActivityName: string;
    /**
     * @generated from protobuf field: int32 invite_type = 29;
     */
    inviteType: number;
    /**
     * @generated from protobuf field: data.BattleConfigSetting battle_config_setting = 31;
     */
    battleConfigSetting?: BattleConfigSetting;
    /**
     * @generated from protobuf field: data.BattleBarConfig bar_config = 32;
     */
    barConfig?: BattleBarConfig;
    /**
     * @generated from protobuf field: data.BattleBarConfig hotsoon_bar_config = 33;
     */
    hotsoonBarConfig?: BattleBarConfig;
    /**
     * @generated from protobuf field: int64 initiator_id = 34;
     */
    initiatorId: bigint;
    /**
     * @generated from protobuf field: int32 battle_type = 35;
     */
    battleType: number;
    /**
     * @generated from protobuf field: int64 finished = 36;
     */
    finished: bigint;
}
/**
 * @generated from protobuf message im.BattleTask
 */
export interface BattleTask {
    /**
     * @generated from protobuf field: bool enable_task = 1;
     */
    enableTask: boolean;
}
/**
 * @generated from protobuf message im.LinkMicBattle
 */
export interface LinkMicBattle {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.BattleSettings battle_settings = 2;
     */
    battleSettings?: BattleSettings;
    /**
     * @generated from protobuf field: im.BattleMode battle_mode = 3;
     */
    battleMode?: BattleMode;
    /**
     * @generated from protobuf field: im.BattleTask battle_task = 4;
     */
    battleTask?: BattleTask;
    /**
     * @generated from protobuf field: int32 skin_type = 5;
     */
    skinType: number;
    /**
     * @generated from protobuf field: data.OperationalPlay operational_play = 7;
     */
    operationalPlay?: OperationalPlay;
    /**
     * @generated from protobuf field: int32 battle_type = 8;
     */
    battleType: number;
    /**
     * @generated from protobuf field: bool relative_score = 9;
     */
    relativeScore: boolean;
    /**
     * @generated from protobuf field: bool normal_to_multiple = 10;
     */
    normalToMultiple: boolean;
    /**
     * @generated from protobuf field: data.BattleSkinConfig skin_config = 11;
     */
    skinConfig?: BattleSkinConfig;
    /**
     * @generated from protobuf field: data.LinkIconConfig link_icon_config = 12;
     */
    linkIconConfig?: LinkIconConfig;
}
/**
 * @generated from protobuf message im.PunishEffect
 */
export interface PunishEffect {
    /**
     * @generated from protobuf field: int64 effect_id = 1;
     */
    effectId: bigint;
    /**
     * @generated from protobuf field: string effect_name = 2;
     */
    effectName: string;
    /**
     * @generated from protobuf field: data.Image effect_image = 3;
     */
    effectImage?: Image;
    /**
     * @generated from protobuf field: int64 lowest_score = 4;
     */
    lowestScore: bigint;
    /**
     * @generated from protobuf field: int64 duration = 5;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 need_medicine_count = 6;
     */
    needMedicineCount: bigint;
    /**
     * @generated from protobuf field: bool usable = 7;
     */
    usable: boolean;
    /**
     * @generated from protobuf field: int32 level = 8;
     */
    level: number;
}
/**
 * @generated from protobuf message im.LinkMicBattlePunish
 */
export interface LinkMicBattlePunish {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: repeated im.PunishEffect punish_effect_list = 3;
     */
    punishEffectList: PunishEffect[];
    /**
     * @generated from protobuf field: string prompts = 4;
     */
    prompts: string;
    /**
     * @generated from protobuf field: data.User mvp = 5;
     */
    mvp?: User;
    /**
     * @generated from protobuf field: int64 medicine_count = 6;
     */
    medicineCount: bigint;
    /**
     * @generated from protobuf field: im.PunishEffect target_effect = 7;
     */
    targetEffect?: PunishEffect;
    /**
     * @generated from protobuf field: int64 start_time = 8;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: data.User target_user = 9;
     */
    targetUser?: User;
    /**
     * @generated from protobuf field: int64 speedy_gift_id = 11;
     */
    speedyGiftId: bigint;
    /**
     * @generated from protobuf field: int64 duration = 12;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 channel_id = 13;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 battle_id = 14;
     */
    battleId: bigint;
}
/**
 * @generated from protobuf message im.LinkMicBattleTaskMessage
 */
export interface LinkMicBattleTaskMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.ChijiNoticeMessage
 */
export interface ChijiNoticeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 message_type = 2;
     */
    messageType: number;
    /**
     * @generated from protobuf field: string banner_url = 3;
     */
    bannerUrl: string;
}
/**
 * @generated from protobuf message im.LinkMicEnterNoticeMessage
 */
export interface LinkMicEnterNoticeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.BattleSettings battle_settings = 2;
     */
    battleSettings?: BattleSettings;
}
/**
 * @generated from protobuf message im.LinkMicFriendOnlineMessage
 */
export interface LinkMicFriendOnlineMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User friend = 2;
     */
    friend?: User;
    /**
     * @generated from protobuf field: bool in_room = 3;
     */
    inRoom: boolean;
}
/**
 * @generated from protobuf message im.LinkMicGuideMessage
 */
export interface LinkMicGuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.LinkMicGuideMessage.AnchorInfo anchor_info = 2;
     */
    anchorInfo?: LinkMicGuideMessage_AnchorInfo;
    /**
     * @generated from protobuf field: int64 cue_threshold = 3;
     */
    cueThreshold: bigint;
    /**
     * @generated from protobuf field: int64 guideline_type = 4;
     */
    guidelineType: bigint;
    /**
     * @generated from protobuf field: im.LinkMicGuideMessage.FastMatchGuideline fast_match_guideline = 5;
     */
    fastMatchGuideline?: LinkMicGuideMessage_FastMatchGuideline;
    /**
     * @generated from protobuf field: im.CallToLinkmicContent call_to_linkmic_content = 20;
     */
    callToLinkmicContent?: CallToLinkmicContent;
    /**
     * @generated from protobuf field: im.KtvAddSongGuideContent ktv_add_song_guide_content = 21;
     */
    ktvAddSongGuideContent?: KtvAddSongGuideContent;
    /**
     * @generated from protobuf field: im.CreateGroupChatGuideContent create_group_chat_guide_content = 22;
     */
    createGroupChatGuideContent?: CreateGroupChatGuideContent;
    /**
     * @generated from protobuf field: im.JoinGroupChatGuideContent join_group_chat_guide_content = 23;
     */
    joinGroupChatGuideContent?: JoinGroupChatGuideContent;
    /**
     * @generated from protobuf field: im.GuestBattleBubbleGuideContent guest_battle_bubble_guide_content = 24;
     */
    guestBattleBubbleGuideContent?: GuestBattleBubbleGuideContent;
    /**
     * @generated from protobuf field: im.CreateTeamfightGuideContent create_teamfight_guide_content = 25;
     */
    createTeamfightGuideContent?: CreateTeamfightGuideContent;
    /**
     * @generated from protobuf field: im.NormalPaidLinkmicExplainCardContent normal_paid_linkmic_explain_card_content = 26;
     */
    normalPaidLinkmicExplainCardContent?: NormalPaidLinkmicExplainCardContent;
    /**
     * @generated from protobuf field: im.NormalPaidLinkmicMigrateToPlayContent normal_paid_linkmic_migrate_to_play_content = 27;
     */
    normalPaidLinkmicMigrateToPlayContent?: NormalPaidLinkmicMigrateToPlayContent;
    /**
     * @generated from protobuf field: im.LinkmicFollowEffectContent linkmic_follow_effect_content = 28;
     */
    linkmicFollowEffectContent?: LinkmicFollowEffectContent;
    /**
     * @generated from protobuf field: im.PKLinkBubbleContent pk_link_bubble_content = 29;
     */
    pkLinkBubbleContent?: PKLinkBubbleContent;
    /**
     * @generated from protobuf field: im.PlayModeGuideBubbleContent play_mode_guide_bubble_content = 30;
     */
    playModeGuideBubbleContent?: PlayModeGuideBubbleContent;
}
/**
 * @generated from protobuf message im.LinkMicGuideMessage.AnchorInfo
 */
export interface LinkMicGuideMessage_AnchorInfo {
    /**
     * @generated from protobuf field: repeated im.LinkMicGuideMessage.AnchorInfo.InfoItem infoList = 1;
     */
    infoList: LinkMicGuideMessage_AnchorInfo_InfoItem[];
}
/**
 * @generated from protobuf message im.LinkMicGuideMessage.AnchorInfo.InfoItem
 */
export interface LinkMicGuideMessage_AnchorInfo_InfoItem {
    /**
     * @generated from protobuf field: data.Image icon = 1;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.LinkMicGuideMessage.FastMatchGuideline
 */
export interface LinkMicGuideMessage_FastMatchGuideline {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string subtitle = 2;
     */
    subtitle: string;
}
/**
 * @generated from protobuf message im.LinkmicFollowEffectContent
 */
export interface LinkmicFollowEffectContent {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 from_user_id = 2;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: repeated im.LinkmicFollowEffectContent.FollowInfo follow_infos = 3;
     */
    followInfos: LinkmicFollowEffectContent_FollowInfo[];
}
/**
 * @generated from protobuf message im.LinkmicFollowEffectContent.FollowInfo
 */
export interface LinkmicFollowEffectContent_FollowInfo {
    /**
     * @generated from protobuf field: int64 target_user_id = 1;
     */
    targetUserId: bigint;
    /**
     * @generated from protobuf field: int64 follow_status = 2;
     */
    followStatus: bigint;
}
/**
 * @generated from protobuf message im.GuestBattleBubbleGuideContent
 */
export interface GuestBattleBubbleGuideContent {
    /**
     * @generated from protobuf field: data.Text text = 1;
     */
    text?: Text;
}
/**
 * @generated from protobuf message im.CallToLinkmicContent
 */
export interface CallToLinkmicContent {
    /**
     * @generated from protobuf field: data.Text text = 1;
     */
    text?: Text;
}
/**
 * @generated from protobuf message im.KtvAddSongGuideContent
 */
export interface KtvAddSongGuideContent {
    /**
     * @generated from protobuf field: data.Text text = 1;
     */
    text?: Text;
}
/**
 * @generated from protobuf message im.CreateGroupChatGuideContent
 */
export interface CreateGroupChatGuideContent {
    /**
     * @generated from protobuf field: int64 anchor_id = 1;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: string header_text = 2;
     */
    headerText: string;
    /**
     * @generated from protobuf field: string body_text = 3;
     */
    bodyText: string;
}
/**
 * @generated from protobuf message im.JoinGroupChatGuideContent
 */
export interface JoinGroupChatGuideContent {
    /**
     * @generated from protobuf field: int64 group_id = 1;
     */
    groupId: bigint;
    /**
     * @generated from protobuf field: string conversation_id = 2;
     */
    conversationId: string;
    /**
     * @generated from protobuf field: string header_text = 3;
     */
    headerText: string;
    /**
     * @generated from protobuf field: string body_text = 4;
     */
    bodyText: string;
    /**
     * @generated from protobuf field: repeated data.Image icons = 5;
     */
    icons: Image[];
    /**
     * @generated from protobuf field: int32 group_type = 6;
     */
    groupType: number;
    /**
     * @generated from protobuf field: int32 guide_source = 7;
     */
    guideSource: number;
}
/**
 * @generated from protobuf message im.CreateTeamfightGuideContent
 */
export interface CreateTeamfightGuideContent {
    /**
     * @generated from protobuf field: data.Text toast_text = 4;
     */
    toastText?: Text;
}
/**
 * @generated from protobuf message im.NormalPaidLinkmicExplainCardContent
 */
export interface NormalPaidLinkmicExplainCardContent {
    /**
     * @generated from protobuf field: data.PaidLinkmicExplainCardInfo explain_card_info = 1;
     */
    explainCardInfo?: PaidLinkmicExplainCardInfo;
}
/**
 * @generated from protobuf message im.NormalPaidLinkmicMigrateToPlayContent
 */
export interface NormalPaidLinkmicMigrateToPlayContent {
    /**
     * @generated from protobuf field: string toast = 1;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.PKLinkBubbleContent
 */
export interface PKLinkBubbleContent {
    /**
     * @generated from protobuf field: string toast = 1;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.PlayModeGuideBubbleContent
 */
export interface PlayModeGuideBubbleContent {
    /**
     * @generated from protobuf field: int32 play_mode = 1;
     */
    playMode: number;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
    /**
     * @generated from protobuf field: int32 play_mode_enhance_type = 3;
     */
    playModeEnhanceType: number;
    /**
     * @generated from protobuf field: data.Text text = 4;
     */
    text?: Text;
    /**
     * @generated from protobuf field: string schema = 5;
     */
    schema: string;
}
/**
 * @generated from protobuf message im.LinkMicHostModifyMsg
 */
export interface LinkMicHostModifyMsg {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated int64 host_uids = 2;
     */
    hostUids: bigint[];
}
/**
 * @generated from protobuf message im.LinkMicKtvBeatRankMessage
 */
export interface LinkMicKtvBeatRankMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.User user_list = 2;
     */
    userList: User[];
    /**
     * @generated from protobuf field: data.User singer = 3;
     */
    singer?: User;
    /**
     * @generated from protobuf field: int64 song_id = 4;
     */
    songId: bigint;
}
/**
 * @generated from protobuf message im.LinkMicKtvEffectMessage
 */
export interface LinkMicKtvEffectMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User from_user = 2;
     */
    fromUser?: User;
    /**
     * @generated from protobuf field: data.User singer = 3;
     */
    singer?: User;
    /**
     * @generated from protobuf field: int64 song_id = 4;
     */
    songId: bigint;
}
/**
 * @generated from protobuf message im.LinkMicMethod
 */
export interface LinkMicMethod {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: string access_key = 3;
     */
    accessKey: string;
    /**
     * @generated from protobuf field: int64 anchor_linkmic_id = 4;
     */
    anchorLinkmicId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 5;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 fan_ticket = 6;
     */
    fanTicket: bigint;
    /**
     * @generated from protobuf field: int64 total_linkmic_fan_ticket = 7;
     */
    totalLinkmicFanTicket: bigint;
    /**
     * @generated from protobuf field: int64 channel_id = 8;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 layout = 9;
     */
    layout: bigint;
    /**
     * @generated from protobuf field: int64 vendor = 10;
     */
    vendor: bigint;
    /**
     * @generated from protobuf field: int64 dimension = 11;
     */
    dimension: bigint;
    /**
     * @generated from protobuf field: string theme = 12;
     */
    theme: string;
    /**
     * @generated from protobuf field: int64 invite_uid = 13;
     */
    inviteUid: bigint;
    /**
     * @generated from protobuf field: int64 answer = 14;
     */
    answer: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 15;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 duration = 16;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: repeated im.LinkMicMethod.UserScores user_scores = 17;
     */
    userScores: LinkMicMethod_UserScores[];
    /**
     * @generated from protobuf field: int64 match_type = 18;
     */
    matchType: bigint;
    /**
     * @generated from protobuf field: bool win = 19;
     */
    win: boolean;
    /**
     * @generated from protobuf field: string prompts = 20;
     */
    prompts: string;
    /**
     * @generated from protobuf field: int64 to_user_id = 21;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int64 linkmic_layout = 23;
     */
    linkmicLayout: bigint;
    /**
     * @generated from protobuf field: int64 from_user_id = 24;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: string tips = 25;
     */
    tips: string;
    /**
     * @generated from protobuf field: int64 start_time_ms = 26;
     */
    startTimeMs: bigint;
    /**
     * @generated from protobuf field: int32 confluence_type = 27;
     */
    confluenceType: number;
    /**
     * @generated from protobuf field: int64 from_room_id = 28;
     */
    fromRoomId: bigint;
    /**
     * @generated from protobuf field: int64 invite_type = 29;
     */
    inviteType: bigint;
    /**
     * @generated from protobuf field: int64 sub_type = 30;
     */
    subType: bigint;
    /**
     * @generated from protobuf field: data.RivalExtraInfo inviter_rival_extra = 31;
     */
    inviterRivalExtra?: RivalExtraInfo;
    /**
     * @generated from protobuf field: string rtc_ext_info = 32;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string rtc_app_id = 33;
     */
    rtcAppId: string;
    /**
     * @generated from protobuf field: string app_id = 34;
     */
    appId: string;
    /**
     * @generated from protobuf field: string app_sign = 35;
     */
    appSign: string;
    /**
     * @generated from protobuf field: string rtc_app_sign = 36;
     */
    rtcAppSign: string;
    /**
     * @generated from protobuf field: string anchor_linkmic_id_str = 37;
     */
    anchorLinkmicIdStr: string;
    /**
     * @generated from protobuf field: int64 rival_anchor_id = 38;
     */
    rivalAnchorId: bigint;
    /**
     * @generated from protobuf field: int64 rival_linkmic_id = 39;
     */
    rivalLinkmicId: bigint;
    /**
     * @generated from protobuf field: string rival_linkmic_id_str = 40;
     */
    rivalLinkmicIdStr: string;
    /**
     * @generated from protobuf field: bool show_popup = 41;
     */
    showPopup: boolean;
    /**
     * @generated from protobuf field: int64 sec_invite_uid = 42;
     */
    secInviteUid: bigint;
    /**
     * @generated from protobuf field: int64 scene = 43;
     */
    scene: bigint;
    /**
     * @generated from protobuf field: int64 sec_apply_uid = 44;
     */
    secApplyUid: bigint;
    /**
     * @generated from protobuf field: repeated data.User linked_users = 45;
     */
    linkedUsers: User[];
    /**
     * @generated from protobuf field: string sec_from_user_id = 46;
     */
    secFromUserId: string;
    /**
     * @generated from protobuf field: int32 reply_type = 47;
     */
    replyType: number;
    /**
     * @generated from protobuf field: string reply_prompts = 48;
     */
    replyPrompts: string;
    /**
     * @generated from protobuf field: string sec_to_user_id = 49;
     */
    secToUserId: string;
    /**
     * @generated from protobuf field: im.LinkMicMethod.InvitorInfo invitor_info = 50;
     */
    invitorInfo?: LinkMicMethod_InvitorInfo;
    /**
     * @generated from protobuf field: bool rtc_join_channel = 51;
     */
    rtcJoinChannel: boolean;
    /**
     * @generated from protobuf field: int32 sub_scene = 52;
     */
    subScene: number;
    /**
     * @generated from protobuf field: bool support_update_link_type = 53;
     */
    supportUpdateLinkType: boolean;
    /**
     * @generated from protobuf field: int32 link_type = 54;
     */
    linkType: number;
    /**
     * @generated from protobuf field: int32 source = 55;
     */
    source: number;
    /**
     * @generated from protobuf field: data.AnchorLinkmicInfo backup_anchor_linkmic_info = 56;
     */
    backupAnchorLinkmicInfo?: AnchorLinkmicInfo;
    /**
     * @generated from protobuf field: repeated int32 play_modes = 57;
     */
    playModes: number[];
    /**
     * @generated from protobuf field: repeated data.ListUser linked_list_users = 58;
     */
    linkedListUsers: ListUser[];
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem locked_positions = 59;
     */
    lockedPositions: LinkmicPositionItem[];
    /**
     * @generated from protobuf field: int32 end_reason = 60;
     */
    endReason: number;
    /**
     * @generated from protobuf field: data.MultiRtcInfo multi_rtc_info = 61;
     */
    multiRtcInfo?: MultiRtcInfo;
    /**
     * @generated from protobuf field: data.MultiLiveCoreInfo multi_live_core_info = 62;
     */
    multiLiveCoreInfo?: MultiLiveCoreInfo;
    /**
     * @generated from protobuf field: int32 layout_config_version = 63;
     */
    layoutConfigVersion: number;
    /**
     * @generated from protobuf field: int32 control_type = 64;
     */
    controlType: number;
    /**
     * @generated from protobuf field: data.BanUser ban_anchor_info = 65;
     */
    banAnchorInfo?: BanUser;
    /**
     * @generated from protobuf field: uint64 version = 66;
     */
    version: bigint;
    /**
     * @generated from protobuf field: data.JoinTeamfightInfo join_teamfight_info = 67;
     */
    joinTeamfightInfo?: JoinTeamfightInfo;
    /**
     * @generated from protobuf field: int64 paid_count = 68;
     */
    paidCount: bigint;
    /**
     * @generated from protobuf field: int64 link_duration = 69;
     */
    linkDuration: bigint;
    /**
     * @generated from protobuf field: string live_core_ext_info = 70;
     */
    liveCoreExtInfo: string;
    /**
     * @generated from protobuf field: data.GameInviteInfo game_invite_info = 71;
     */
    gameInviteInfo?: GameInviteInfo;
    /**
     * @generated from protobuf field: int32 ui_layout = 72;
     */
    uiLayout: number;
    /**
     * @generated from protobuf field: data.Text invite_message = 73;
     */
    inviteMessage?: Text;
    /**
     * @generated from protobuf field: data.MultiChannelInfo multi_channel_info = 74;
     */
    multiChannelInfo?: MultiChannelInfo;
    /**
     * @generated from protobuf field: int32 kick_out_source = 75;
     */
    kickOutSource: number;
    /**
     * @generated from protobuf field: string function_type = 77;
     */
    functionType: string;
    /**
     * @generated from protobuf field: data.MsgBoardItemInfo msg_board_item = 78;
     */
    msgBoardItem?: MsgBoardItemInfo;
    /**
     * @generated from protobuf field: string from_user_linkmic_id_str = 79;
     */
    fromUserLinkmicIdStr: string;
    /**
     * @generated from protobuf field: string ack_message = 80;
     */
    ackMessage: string;
    /**
     * @generated from protobuf field: string init_source = 81;
     */
    initSource: string;
    /**
     * @generated from protobuf field: string score_update_log_id = 82;
     */
    scoreUpdateLogId: string;
    /**
     * @generated from protobuf field: int32 switch_play_mode = 83;
     */
    switchPlayMode: number;
    /**
     * @generated from protobuf field: int32 update_message_from = 84;
     */
    updateMessageFrom: number;
    /**
     * @generated from protobuf field: data.LinkmicMediaInfo guest_linkmic_info = 85;
     */
    guestLinkmicInfo?: LinkmicMediaInfo;
    /**
     * @generated from protobuf field: data.MCUContent mcu_content = 86;
     */
    mcuContent?: MCUContent;
    /**
     * @generated from protobuf field: data.BreakthroughInfo breakthrough_info = 87;
     */
    breakthroughInfo?: BreakthroughInfo;
    /**
     * @generated from protobuf field: data.LinkerBaseInfo linker_base_info = 88;
     */
    linkerBaseInfo?: LinkerBaseInfo;
    /**
     * @generated from protobuf field: data.AudienceActionSource action_source = 89;
     */
    actionSource?: AudienceActionSource;
}
/**
 * @generated from protobuf message im.LinkMicMethod.UserScores
 */
export interface LinkMicMethod_UserScores {
    /**
     * @generated from protobuf field: int64 score = 1;
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 weekly_rank = 3;
     */
    weeklyRank: bigint;
    /**
     * @generated from protobuf field: string score_relative_text = 4;
     */
    scoreRelativeText: string;
    /**
     * @generated from protobuf field: bool is_large_pk_score = 5;
     */
    isLargePkScore: boolean;
    /**
     * @generated from protobuf field: bool room_like_trigger = 6;
     */
    roomLikeTrigger: boolean;
    /**
     * @generated from protobuf field: string score_blur_text = 7;
     */
    scoreBlurText: string;
    /**
     * @generated from protobuf field: int64 battle_rank = 8;
     */
    battleRank: bigint;
    /**
     * @generated from protobuf field: bool new_score_open = 9;
     */
    newScoreOpen: boolean;
    /**
     * @generated from protobuf field: string multi_pk_team_score_text = 10;
     */
    multiPkTeamScoreText: string;
    /**
     * @generated from protobuf field: int64 multi_pk_team_score = 11;
     */
    multiPkTeamScore: bigint;
    /**
     * @generated from protobuf field: int64 multi_pk_team_rank = 12;
     */
    multiPkTeamRank: bigint;
    /**
     * @generated from protobuf field: bool is_multi_pk_relative_text = 13;
     */
    isMultiPkRelativeText: boolean;
}
/**
 * @generated from protobuf message im.LinkMicMethod.Contributor
 */
export interface LinkMicMethod_Contributor {
    /**
     * @generated from protobuf field: int64 score = 1;
     */
    score: bigint;
    /**
     * @generated from protobuf field: int64 rank = 2;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.User user = 4;
     */
    user?: User;
}
/**
 * @generated from protobuf message im.LinkMicMethod.ContributorList
 */
export interface LinkMicMethod_ContributorList {
    /**
     * @generated from protobuf field: repeated im.LinkMicMethod.Contributor contributor_list = 1;
     */
    contributorList: LinkMicMethod_Contributor[];
}
/**
 * @generated from protobuf message im.LinkMicMethod.InvitorInfo
 */
export interface LinkMicMethod_InvitorInfo {
    /**
     * @generated from protobuf field: string invitor_nick_name = 1;
     */
    invitorNickName: string;
    /**
     * @generated from protobuf field: data.Image invitor_avatar = 2;
     */
    invitorAvatar?: Image;
}
/**
 * @generated from protobuf message im.LinkMicOChannelKickOutMsg
 */
export interface LinkMicOChannelKickOutMsg {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 kick_out_uid = 2;
     */
    kickOutUid: bigint;
    /**
     * @generated from protobuf field: string toast_msg = 3;
     */
    toastMsg: string;
}
/**
 * @generated from protobuf message im.LinkMicOChannelNotifyMsg
 */
export interface LinkMicOChannelNotifyMsg {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: string toast_msg = 3;
     */
    toastMsg: string;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingListMessage
 */
export interface LinkmicOrderSingListMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.LinkmicOrderSingListContent order_sing_list_content = 2;
     */
    orderSingListContent?: LinkmicOrderSingListContent;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingListContent
 */
export interface LinkmicOrderSingListContent {
    /**
     * @generated from protobuf field: repeated im.OrderSingItemByPosition user_list = 1;
     */
    userList: OrderSingItemByPosition[];
}
/**
 * @generated from protobuf message im.OrderSingItemByPosition
 */
export interface OrderSingItemByPosition {
    /**
     * @generated from protobuf field: repeated string order_sing_item_str_list = 1;
     */
    orderSingItemStrList: string[];
    /**
     * @generated from protobuf field: int64 wait_for_start_item_num = 2;
     */
    waitForStartItemNum: bigint;
    /**
     * @generated from protobuf field: data.User order_user = 3;
     */
    orderUser?: User;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingMessage
 */
export interface LinkmicOrderSingMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: im.LinkmicOrderSingCreateContent order_sing_create_content = 3;
     */
    orderSingCreateContent?: LinkmicOrderSingCreateContent;
    /**
     * @generated from protobuf field: im.LinkmicOrderSingFinishContent order_sing_finish_content = 4;
     */
    orderSingFinishContent?: LinkmicOrderSingFinishContent;
    /**
     * @generated from protobuf field: im.LinkmicOrderSingActionToastContent order_sing_action_toast_content = 5;
     */
    orderSingActionToastContent?: LinkmicOrderSingActionToastContent;
    /**
     * @generated from protobuf field: im.LinkmicOrderSingActionContent order_sing_action_content = 6;
     */
    orderSingActionContent?: LinkmicOrderSingActionContent;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingCreateContent
 */
export interface LinkmicOrderSingCreateContent {
    /**
     * @generated from protobuf field: string open_order_sing_toast = 1;
     */
    openOrderSingToast: string;
    /**
     * @generated from protobuf field: int64 gift_id = 2;
     */
    giftId: bigint;
    /**
     * @generated from protobuf field: bool auto_enlarge = 3;
     */
    autoEnlarge: boolean;
    /**
     * @generated from protobuf field: repeated int64 gift_ids = 4;
     */
    giftIds: bigint[];
}
/**
 * @generated from protobuf message im.LinkmicOrderSingFinishContent
 */
export interface LinkmicOrderSingFinishContent {
    /**
     * @generated from protobuf field: string close_order_sing_toast = 1;
     */
    closeOrderSingToast: string;
    /**
     * @generated from protobuf field: bool auto_enlarge = 2;
     */
    autoEnlarge: boolean;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingActionToastContent
 */
export interface LinkmicOrderSingActionToastContent {
    /**
     * @generated from protobuf field: string start_sing_toast = 1;
     */
    startSingToast: string;
    /**
     * @generated from protobuf field: string finish_sing_toast = 2;
     */
    finishSingToast: string;
    /**
     * @generated from protobuf field: string oder_sing_toast = 3;
     */
    oderSingToast: string;
    /**
     * @generated from protobuf field: string order_sing_action_toast = 4;
     */
    orderSingActionToast: string;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingActionContent
 */
export interface LinkmicOrderSingActionContent {
    /**
     * @generated from protobuf field: string order_sing_item_id = 1;
     */
    orderSingItemId: string;
    /**
     * @generated from protobuf field: int32 order_sing_item_action = 2;
     */
    orderSingItemAction: number;
    /**
     * @generated from protobuf field: data.User order_user = 3;
     */
    orderUser?: User;
    /**
     * @generated from protobuf field: int64 timestamp = 4;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: data.CurrentOrderSingItemV2 current_order_sing_item = 5;
     */
    currentOrderSingItem?: CurrentOrderSingItemV2;
    /**
     * @generated from protobuf field: data.Image order_sing_gift_icon = 6;
     */
    orderSingGiftIcon?: Image;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingScoreMessage
 */
export interface LinkmicOrderSingScoreMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.LinkmicOrderSingScoreContent order_sing_score_content = 2;
     */
    orderSingScoreContent?: LinkmicOrderSingScoreContent;
}
/**
 * @generated from protobuf message im.LinkmicOrderSingScoreContent
 */
export interface LinkmicOrderSingScoreContent {
    /**
     * @generated from protobuf field: im.OrderSingUserScore user_score = 1;
     */
    userScore?: OrderSingUserScore;
}
/**
 * @generated from protobuf message im.OrderSingUserScore
 */
export interface OrderSingUserScore {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 silver_microphone_num = 2;
     */
    silverMicrophoneNum: bigint;
    /**
     * @generated from protobuf field: int64 golden_microphone_num = 3;
     */
    goldenMicrophoneNum: bigint;
    /**
     * @generated from protobuf field: int32 current_task_microphone_type = 4;
     */
    currentTaskMicrophoneType: number;
    /**
     * @generated from protobuf field: int64 current_score = 5;
     */
    currentScore: bigint;
    /**
     * @generated from protobuf field: int64 need_score_to_next = 6;
     */
    needScoreToNext: bigint;
    /**
     * @generated from protobuf field: int32 order_sing_stage = 7;
     */
    orderSingStage: number;
    /**
     * @generated from protobuf field: int64 current_round_mic_count = 8;
     */
    currentRoundMicCount: bigint;
}
/**
 * @generated from protobuf message im.LinkMicPositionMessage
 */
export interface LinkMicPositionMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 message_type = 2;
     */
    messageType: number;
    /**
     * @generated from protobuf field: im.LinkMicPositionListChangeContent list_change_content = 3;
     */
    listChangeContent?: LinkMicPositionListChangeContent;
    /**
     * @generated from protobuf field: im.LinkMicPositionVerifyContent verify_content = 4;
     */
    verifyContent?: LinkMicPositionVerifyContent;
}
/**
 * @generated from protobuf message im.LinkMicPositionListChangeContent
 */
export interface LinkMicPositionListChangeContent {
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem positions = 1;
     */
    positions: LinkmicPositionItem[];
}
/**
 * @generated from protobuf message im.LinkMicPositionVerifyItem
 */
export interface LinkMicPositionVerifyItem {
    /**
     * @generated from protobuf field: int64 position = 1;
     */
    position: bigint;
    /**
     * @generated from protobuf field: string position_name = 2;
     */
    positionName: string;
    /**
     * @generated from protobuf field: int32 verify_status = 3;
     */
    verifyStatus: number;
    /**
     * @generated from protobuf field: int32 position_type = 4;
     */
    positionType: number;
}
/**
 * @generated from protobuf message im.LinkMicPositionVerifyContent
 */
export interface LinkMicPositionVerifyContent {
    /**
     * @generated from protobuf field: int64 current_verify_position = 1;
     */
    currentVerifyPosition: bigint;
    /**
     * @generated from protobuf field: repeated im.LinkMicPositionVerifyItem verify_position_items = 2;
     */
    verifyPositionItems: LinkMicPositionVerifyItem[];
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem final_position_items = 3;
     */
    finalPositionItems: LinkmicPositionItem[];
}
/**
 * @generated from protobuf message im.LinkMicSendEmojiMessage
 */
export interface LinkMicSendEmojiMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User from_user = 2;
     */
    fromUser?: User;
    /**
     * @generated from protobuf field: data.LinkmicAudienceEmoji emoji = 3;
     */
    emoji?: LinkmicAudienceEmoji;
    /**
     * @generated from protobuf field: data.Image emoji_image_result = 4;
     */
    emojiImageResult?: Image;
    /**
     * @generated from protobuf field: data.User to_user = 5;
     */
    toUser?: User;
    /**
     * @generated from protobuf field: string source = 6;
     */
    source: string;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 7;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.LinkSettingNotifyMessage
 */
export interface LinkSettingNotifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.LinkmicSetting settings = 2;
     */
    settings: LinkmicSetting[];
    /**
     * @generated from protobuf field: im.PaiedOrTimeLimitChangeContent paied_or_time_limit_change_content = 10;
     */
    paiedOrTimeLimitChangeContent?: PaiedOrTimeLimitChangeContent;
}
/**
 * @generated from protobuf message im.PaiedOrTimeLimitChangeContent
 */
export interface PaiedOrTimeLimitChangeContent {
    /**
     * @generated from protobuf field: bool need_leave = 1;
     */
    needLeave: boolean;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.LinkMicSignalingMethod
 */
export interface LinkMicSignalingMethod {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.LinkMicAdventureScoreMessage
 */
export interface LinkMicAdventureScoreMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.AdventurePairInfo pair_list = 2;
     */
    pairList: AdventurePairInfo[];
}
/**
 * @generated from protobuf message im.LinkMicAdventureMessage
 */
export interface LinkMicAdventureMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.LinkMicAdventureStartContent start_content = 100;
     */
    startContent?: LinkMicAdventureStartContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventureFinishContent finish_content = 101;
     */
    finishContent?: LinkMicAdventureFinishContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventureInviteContent invite_content = 102;
     */
    inviteContent?: LinkMicAdventureInviteContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventureReplyContent reply_content = 103;
     */
    replyContent?: LinkMicAdventureReplyContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventureCardContent card_content = 105;
     */
    cardContent?: LinkMicAdventureCardContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventureCallInviteContent call_invite_content = 106;
     */
    callInviteContent?: LinkMicAdventureCallInviteContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventureCallReplyContent call_reply_content = 107;
     */
    callReplyContent?: LinkMicAdventureCallReplyContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventurePlayModeInfoChangeContent play_mode_info_change = 108;
     */
    playModeInfoChange?: LinkMicAdventurePlayModeInfoChangeContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventurePairInfoChangeContent pair_info_change = 109;
     */
    pairInfoChange?: LinkMicAdventurePairInfoChangeContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventurePairFinishContent pair_finish_content = 110;
     */
    pairFinishContent?: LinkMicAdventurePairFinishContent;
    /**
     * @generated from protobuf field: im.LinkMicAdventureCallCancelContent call_cancel_content = 111;
     */
    callCancelContent?: LinkMicAdventureCallCancelContent;
}
/**
 * @generated from protobuf message im.LinkMicAdventurePairFinishContent
 */
export interface LinkMicAdventurePairFinishContent {
    /**
     * @generated from protobuf field: data.AdventurePairInfo pair_info = 1;
     */
    pairInfo?: AdventurePairInfo;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
    /**
     * @generated from protobuf field: int32 finish_reason = 3;
     */
    finishReason: number;
}
/**
 * @generated from protobuf message im.LinkMicAdventurePairInfoChangeContent
 */
export interface LinkMicAdventurePairInfoChangeContent {
    /**
     * @generated from protobuf field: data.AdventurePairInfo pair_info = 1;
     */
    pairInfo?: AdventurePairInfo;
}
/**
 * @generated from protobuf message im.LinkMicAdventurePlayModeInfoChangeContent
 */
export interface LinkMicAdventurePlayModeInfoChangeContent {
    /**
     * @generated from protobuf field: data.AdventurePlayModeInfo play_mode_info = 1;
     */
    playModeInfo?: AdventurePlayModeInfo;
}
/**
 * @generated from protobuf message im.LinkMicAdventureCallReplyContent
 */
export interface LinkMicAdventureCallReplyContent {
    /**
     * @generated from protobuf field: int64 to_user_id = 1;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: data.AdventurePairInfo pair_info = 3;
     */
    pairInfo?: AdventurePairInfo;
    /**
     * @generated from protobuf field: int64 next_call_time = 4;
     */
    nextCallTime: bigint;
    /**
     * @generated from protobuf field: string inviter_rtc_ext_info = 5;
     */
    inviterRtcExtInfo: string;
    /**
     * @generated from protobuf field: string inviter_live_core_info = 6;
     */
    inviterLiveCoreInfo: string;
}
/**
 * @generated from protobuf message im.LinkMicAdventureCallInviteContent
 */
export interface LinkMicAdventureCallInviteContent {
    /**
     * @generated from protobuf field: int64 to_user_id = 1;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int64 invite_timeout_duration_s = 2;
     */
    inviteTimeoutDurationS: bigint;
    /**
     * @generated from protobuf field: int64 inviter_id = 3;
     */
    inviterId: bigint;
}
/**
 * @generated from protobuf message im.LinkMicAdventureCardContent
 */
export interface LinkMicAdventureCardContent {
    /**
     * @generated from protobuf field: data.AdventureUserInfo from_user = 1;
     */
    fromUser?: AdventureUserInfo;
    /**
     * @generated from protobuf field: data.AdventureUserInfo to_user = 2;
     */
    toUser?: AdventureUserInfo;
    /**
     * @generated from protobuf field: repeated data.AdventureCardInfo card_list = 3;
     */
    cardList: AdventureCardInfo[];
}
/**
 * @generated from protobuf message im.LinkMicAdventureReplyContent
 */
export interface LinkMicAdventureReplyContent {
    /**
     * @generated from protobuf field: int64 to_user_id = 1;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: data.AdventurePairInfo pair_info = 3;
     */
    pairInfo?: AdventurePairInfo;
    /**
     * @generated from protobuf field: string invite_source = 4;
     */
    inviteSource: string;
}
/**
 * @generated from protobuf message im.LinkMicAdventureInviteContent
 */
export interface LinkMicAdventureInviteContent {
    /**
     * @generated from protobuf field: int64 to_user_id = 1;
     */
    toUserId: bigint;
}
/**
 * @generated from protobuf message im.LinkMicAdventureStartContent
 */
export interface LinkMicAdventureStartContent {
    /**
     * @generated from protobuf field: data.AdventurePlayModeInfo play_mode_info = 2;
     */
    playModeInfo?: AdventurePlayModeInfo;
}
/**
 * @generated from protobuf message im.LinkMicAdventureFinishContent
 */
export interface LinkMicAdventureFinishContent {
    /**
     * @generated from protobuf field: int64 duration = 1;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 pair_count = 2;
     */
    pairCount: bigint;
    /**
     * @generated from protobuf field: int64 audience_join = 3;
     */
    audienceJoin: bigint;
    /**
     * @generated from protobuf field: data.AdventurePlayModeInfo play_mode_info = 4;
     */
    playModeInfo?: AdventurePlayModeInfo;
    /**
     * @generated from protobuf field: int64 operator_id = 5;
     */
    operatorId: bigint;
}
/**
 * @generated from protobuf message im.LinkMicAdventureCallCancelContent
 */
export interface LinkMicAdventureCallCancelContent {
    /**
     * @generated from protobuf field: int64 invitee_user_id = 1;
     */
    inviteeUserId: bigint;
    /**
     * @generated from protobuf field: int64 pair_id = 2;
     */
    pairId: bigint;
    /**
     * @generated from protobuf field: string pair_id_str = 4;
     */
    pairIdStr: string;
}
/**
 * @generated from protobuf message im.LinkMicAudienceKtvMessage
 */
export interface LinkMicAudienceKtvMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 message_type = 2;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: repeated im.LinkMicAudienceKtvMessage.ListInfo list_info = 3;
     */
    listInfo: LinkMicAudienceKtvMessage_ListInfo[];
    /**
     * @generated from protobuf field: int64 want_sing_count = 4;
     */
    wantSingCount: bigint;
    /**
     * @generated from protobuf field: int64 want_sing_song_threshold = 5;
     */
    wantSingSongThreshold: bigint;
    /**
     * @generated from protobuf field: int64 sung_song_count = 6;
     */
    sungSongCount: bigint;
}
/**
 * @generated from protobuf message im.LinkMicAudienceKtvMessage.ListInfo
 */
export interface LinkMicAudienceKtvMessage_ListInfo {
    /**
     * @generated from protobuf field: data.KtvSongStruct music = 1;
     */
    music?: KtvSongStruct;
    /**
     * @generated from protobuf field: bool is_self_seeing = 2;
     */
    isSelfSeeing: boolean;
}
/**
 * @generated from protobuf message im.LinkmicChatMatchMessage
 */
export interface LinkmicChatMatchMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.LinkmicChatMatchUserJoinContent chat_match_user_join_content = 21;
     */
    chatMatchUserJoinContent?: LinkmicChatMatchUserJoinContent;
    /**
     * @generated from protobuf field: im.LinkmicChatMatchUserLeaveContent chat_match_user_leave_content = 22;
     */
    chatMatchUserLeaveContent?: LinkmicChatMatchUserLeaveContent;
    /**
     * @generated from protobuf field: im.LinkmicChatMatchFinishGroupContent chat_match_finish_group_content = 23;
     */
    chatMatchFinishGroupContent?: LinkmicChatMatchFinishGroupContent;
    /**
     * @generated from protobuf field: im.LinkmicChatMatchResultContent chat_match_result_content = 24;
     */
    chatMatchResultContent?: LinkmicChatMatchResultContent;
    /**
     * @generated from protobuf field: im.LinkmicChatMatchStartCountDownContent chat_match_start_count_down_content = 25;
     */
    chatMatchStartCountDownContent?: LinkmicChatMatchStartCountDownContent;
}
/**
 * @generated from protobuf message im.LinkmicChatMatchUserJoinContent
 */
export interface LinkmicChatMatchUserJoinContent {
    /**
     * @generated from protobuf field: data.ChatMatchGroupInfo group_info = 1;
     */
    groupInfo?: ChatMatchGroupInfo;
}
/**
 * @generated from protobuf message im.LinkmicChatMatchUserLeaveContent
 */
export interface LinkmicChatMatchUserLeaveContent {
    /**
     * @generated from protobuf field: data.ChatMatchGroupInfo group_info = 1;
     */
    groupInfo?: ChatMatchGroupInfo;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string device_id = 3;
     */
    deviceId: string;
}
/**
 * @generated from protobuf message im.LinkmicChatMatchFinishGroupContent
 */
export interface LinkmicChatMatchFinishGroupContent {
    /**
     * @generated from protobuf field: string join_room_id = 1;
     */
    joinRoomId: string;
}
/**
 * @generated from protobuf message im.LinkmicChatMatchResultContent
 */
export interface LinkmicChatMatchResultContent {
    /**
     * @generated from protobuf field: data.ChatMatchGroupInfo group_info = 1;
     */
    groupInfo?: ChatMatchGroupInfo;
}
/**
 * @generated from protobuf message im.LinkmicChatMatchStartCountDownContent
 */
export interface LinkmicChatMatchStartCountDownContent {
    /**
     * @generated from protobuf field: int64 disband_time = 1;
     */
    disbandTime: bigint;
}
/**
 * @generated from protobuf message im.LinkmicEcologyMessage
 */
export interface LinkmicEcologyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.LiveMatrixEntranceChangeContent live_matrix_entrance_change_content = 3;
     */
    liveMatrixEntranceChangeContent?: LiveMatrixEntranceChangeContent;
    /**
     * @generated from protobuf field: im.LinkmicWebAntiCheatContent web_anti_cheat_content = 4;
     */
    webAntiCheatContent?: LinkmicWebAntiCheatContent;
}
/**
 * @generated from protobuf message im.LiveMatrixEntranceChangeContent
 */
export interface LiveMatrixEntranceChangeContent {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 matrix_id = 2;
     */
    matrixId: bigint;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: bool show = 4;
     */
    show: boolean;
}
/**
 * @generated from protobuf message im.LinkmicWebAntiCheatContent
 */
export interface LinkmicWebAntiCheatContent {
    /**
     * @generated from protobuf field: string auth_ticket = 1;
     */
    authTicket: string;
    /**
     * @generated from protobuf field: string entry_web_page_address = 2;
     */
    entryWebPageAddress: string;
    /**
     * @generated from protobuf field: string popup_text = 3;
     */
    popupText: string;
    /**
     * @generated from protobuf field: int64 web_page_display_duration = 4;
     */
    webPageDisplayDuration: bigint;
    /**
     * @generated from protobuf field: int32 face_verify_type = 5;
     */
    faceVerifyType: number;
    /**
     * @generated from protobuf field: bool authorization = 6;
     */
    authorization: boolean;
    /**
     * @generated from protobuf field: string request_source = 7;
     */
    requestSource: string;
}
/**
 * @generated from protobuf message im.LinkmicEnlargeGuestMessage
 */
export interface LinkmicEnlargeGuestMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: repeated int32 play_modes = 3;
     */
    playModes: number[];
    /**
     * @generated from protobuf field: im.LinkmicEnlargeGuestTurnOnContent turn_on_content = 21;
     */
    turnOnContent?: LinkmicEnlargeGuestTurnOnContent;
    /**
     * @generated from protobuf field: im.LinkmicEnlargeGuestTurnOffContent turn_off_content = 22;
     */
    turnOffContent?: LinkmicEnlargeGuestTurnOffContent;
    /**
     * @generated from protobuf field: im.LinkmicEnlargeGuestChangeUserContent change_user_content = 23;
     */
    changeUserContent?: LinkmicEnlargeGuestChangeUserContent;
}
/**
 * @generated from protobuf message im.LinkmicEnlargeGuestTurnOnContent
 */
export interface LinkmicEnlargeGuestTurnOnContent {
    /**
     * @generated from protobuf field: int64 enlarged_user_id = 1;
     */
    enlargedUserId: bigint;
    /**
     * @generated from protobuf field: int32 source = 2;
     */
    source: number;
}
/**
 * @generated from protobuf message im.LinkmicEnlargeGuestTurnOffContent
 */
export interface LinkmicEnlargeGuestTurnOffContent {
    /**
     * @generated from protobuf field: int32 source = 1;
     */
    source: number;
}
/**
 * @generated from protobuf message im.LinkmicEnlargeGuestChangeUserContent
 */
export interface LinkmicEnlargeGuestChangeUserContent {
    /**
     * @generated from protobuf field: int64 enlarged_user_id = 1;
     */
    enlargedUserId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicProfitMessage
 */
export interface LinkmicProfitMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.LinkmicProfitBidPaidLinkmicBidContent bid_paid_linkmic_bid_content = 21;
     */
    bidPaidLinkmicBidContent?: LinkmicProfitBidPaidLinkmicBidContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitBidPaidLinkmicDealContent bid_paid_linkmic_deal_content = 22;
     */
    bidPaidLinkmicDealContent?: LinkmicProfitBidPaidLinkmicDealContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitBidPaidLinkmicAbortContent bid_paid_linkmic_abort_content = 23;
     */
    bidPaidLinkmicAbortContent?: LinkmicProfitBidPaidLinkmicAbortContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitBidPaidLinkmicStartContent bid_paid_linkmic_start_content = 24;
     */
    bidPaidLinkmicStartContent?: LinkmicProfitBidPaidLinkmicStartContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitBidPaidLinkmicTerminateContent bid_paid_linkmic_terminate_content = 25;
     */
    bidPaidLinkmicTerminateContent?: LinkmicProfitBidPaidLinkmicTerminateContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitNormalPaidLinkmicOpenContent normal_paid_linkmic_open_content = 26;
     */
    normalPaidLinkmicOpenContent?: LinkmicProfitNormalPaidLinkmicOpenContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitNormalPaidLinkmicCloseContent normal_paid_linkmic_close_content = 27;
     */
    normalPaidLinkmicCloseContent?: LinkmicProfitNormalPaidLinkmicCloseContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitNormalPaidLinkmicConfigUpdateContent normal_paid_linkmic_config_update_content = 28;
     */
    normalPaidLinkmicConfigUpdateContent?: LinkmicProfitNormalPaidLinkmicConfigUpdateContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitBidPaidLinkmicTurnOnContent bid_paid_linkmic_turn_on_content = 29;
     */
    bidPaidLinkmicTurnOnContent?: LinkmicProfitBidPaidLinkmicTurnOnContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitBidPaidLinkmicTurnOffContent bid_paid_linkmic_turn_off_content = 30;
     */
    bidPaidLinkmicTurnOffContent?: LinkmicProfitBidPaidLinkmicTurnOffContent;
    /**
     * @generated from protobuf field: im.LinkmicRoomBattleInviteContent room_battle_invite_content = 31;
     */
    roomBattleInviteContent?: LinkmicRoomBattleInviteContent;
    /**
     * @generated from protobuf field: im.LinkmicRoomBattleReplyContent room_battle_reply_content = 32;
     */
    roomBattleReplyContent?: LinkmicRoomBattleReplyContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitNormalPaidLinkmicAddPriceContent normal_paid_linkmic_add_price_content = 33;
     */
    normalPaidLinkmicAddPriceContent?: LinkmicProfitNormalPaidLinkmicAddPriceContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitInteractiveScreenCastOpenContent interactive_screen_cast_open_content = 34;
     */
    interactiveScreenCastOpenContent?: LinkmicProfitInteractiveScreenCastOpenContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitInteractiveScreenCastCloseContent interactive_screen_cast_close_content = 35;
     */
    interactiveScreenCastCloseContent?: LinkmicProfitInteractiveScreenCastCloseContent;
    /**
     * @generated from protobuf field: im.LinkmicRoomBattleMatchSuccessContent room_battle_match_success_content = 36;
     */
    roomBattleMatchSuccessContent?: LinkmicRoomBattleMatchSuccessContent;
    /**
     * @generated from protobuf field: im.LinkmicGiftRecipientContent gift_recipient_content = 37;
     */
    giftRecipientContent?: LinkmicGiftRecipientContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitAudioSubtitleCheckInContent audio_subtitle_check_in_content = 38;
     */
    audioSubtitleCheckInContent?: LinkmicProfitAudioSubtitleCheckInContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitAudioSubtitleStartContent audio_subtitle_start_content = 39;
     */
    audioSubtitleStartContent?: LinkmicProfitAudioSubtitleStartContent;
    /**
     * @generated from protobuf field: im.LinkmicProfitAudioSubtitleCloseContent audio_subtitle_close_content = 40;
     */
    audioSubtitleCloseContent?: LinkmicProfitAudioSubtitleCloseContent;
    /**
     * @generated from protobuf field: im.LinkmicGameBarrageStartContent game_barrage_start_conetent = 41;
     */
    gameBarrageStartConetent?: LinkmicGameBarrageStartContent;
    /**
     * @generated from protobuf field: im.LinkmicGameBarrageStopContent game_barrage_stop_conetent = 42;
     */
    gameBarrageStopConetent?: LinkmicGameBarrageStopContent;
}
/**
 * @generated from protobuf message im.LinkmicProfitBidPaidLinkmicBidContent
 */
export interface LinkmicProfitBidPaidLinkmicBidContent {
    /**
     * @generated from protobuf field: data.BidPaidLinkmicBidInfo bid_info = 1;
     */
    bidInfo?: BidPaidLinkmicBidInfo;
    /**
     * @generated from protobuf field: repeated data.BidPaidLinkmicBidRecord bid_records = 2;
     */
    bidRecords: BidPaidLinkmicBidRecord[];
    /**
     * @generated from protobuf field: bool has_more = 3;
     */
    hasMore: boolean;
}
/**
 * @generated from protobuf message im.LinkmicProfitBidPaidLinkmicDealContent
 */
export interface LinkmicProfitBidPaidLinkmicDealContent {
    /**
     * @generated from protobuf field: data.BidPaidLinkmicDealInfo deal_info = 1;
     */
    dealInfo?: BidPaidLinkmicDealInfo;
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem positions = 2;
     */
    positions: LinkmicPositionItem[];
}
/**
 * @generated from protobuf message im.LinkmicProfitBidPaidLinkmicStartContent
 */
export interface LinkmicProfitBidPaidLinkmicStartContent {
    /**
     * @generated from protobuf field: string start_toast = 1;
     */
    startToast: string;
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem positions = 2;
     */
    positions: LinkmicPositionItem[];
    /**
     * @generated from protobuf field: bool waiting_user_need_leave = 3;
     */
    waitingUserNeedLeave: boolean;
    /**
     * @generated from protobuf field: string waiting_user_toast = 4;
     */
    waitingUserToast: string;
}
/**
 * @generated from protobuf message im.LinkmicProfitBidPaidLinkmicAbortContent
 */
export interface LinkmicProfitBidPaidLinkmicAbortContent {
    /**
     * @generated from protobuf field: int64 win_user_id = 1;
     */
    winUserId: bigint;
    /**
     * @generated from protobuf field: string anchor_toast = 2;
     */
    anchorToast: string;
    /**
     * @generated from protobuf field: string win_user_toast = 3;
     */
    winUserToast: string;
    /**
     * @generated from protobuf field: string other_bid_users_toast = 4;
     */
    otherBidUsersToast: string;
}
/**
 * @generated from protobuf message im.LinkmicProfitBidPaidLinkmicTerminateContent
 */
export interface LinkmicProfitBidPaidLinkmicTerminateContent {
    /**
     * @generated from protobuf field: string bid_user_toast = 1;
     */
    bidUserToast: string;
    /**
     * @generated from protobuf field: string other_bid_users_toast = 2;
     */
    otherBidUsersToast: string;
}
/**
 * @generated from protobuf message im.LinkmicProfitNormalPaidLinkmicOpenContent
 */
export interface LinkmicProfitNormalPaidLinkmicOpenContent {
    /**
     * @generated from protobuf field: data.NormalPaidLinkmicInfo normal_paid_linkmic_info = 1;
     */
    normalPaidLinkmicInfo?: NormalPaidLinkmicInfo;
    /**
     * @generated from protobuf field: bool waiting_user_need_leave = 2;
     */
    waitingUserNeedLeave: boolean;
    /**
     * @generated from protobuf field: string waiting_user_toast = 3;
     */
    waitingUserToast: string;
    /**
     * @generated from protobuf field: int32 source = 4;
     */
    source: number;
}
/**
 * @generated from protobuf message im.LinkmicProfitNormalPaidLinkmicCloseContent
 */
export interface LinkmicProfitNormalPaidLinkmicCloseContent {
    /**
     * @generated from protobuf field: bool waiting_user_need_leave = 1;
     */
    waitingUserNeedLeave: boolean;
    /**
     * @generated from protobuf field: string waiting_user_toast = 2;
     */
    waitingUserToast: string;
}
/**
 * @generated from protobuf message im.LinkmicProfitNormalPaidLinkmicConfigUpdateContent
 */
export interface LinkmicProfitNormalPaidLinkmicConfigUpdateContent {
    /**
     * @generated from protobuf field: bool waiting_user_need_leave = 1;
     */
    waitingUserNeedLeave: boolean;
    /**
     * @generated from protobuf field: string waiting_user_toast = 2;
     */
    waitingUserToast: string;
    /**
     * @generated from protobuf field: data.NormalPaidLinkmicInfo normal_paid_linkmic_info = 3;
     */
    normalPaidLinkmicInfo?: NormalPaidLinkmicInfo;
}
/**
 * @generated from protobuf message im.LinkmicProfitNormalPaidLinkmicAddPriceContent
 */
export interface LinkmicProfitNormalPaidLinkmicAddPriceContent {
    /**
     * @generated from protobuf field: int64 add_price_user_id = 1;
     */
    addPriceUserId: bigint;
    /**
     * @generated from protobuf field: int64 add_price_value = 2;
     */
    addPriceValue: bigint;
    /**
     * @generated from protobuf field: data.Text text = 3;
     */
    text?: Text;
}
/**
 * @generated from protobuf message im.LinkmicProfitBidPaidLinkmicTurnOnContent
 */
export interface LinkmicProfitBidPaidLinkmicTurnOnContent {
    /**
     * @generated from protobuf field: data.BidPaidLinkmicContent bid_paid_linkmic_info = 1;
     */
    bidPaidLinkmicInfo?: BidPaidLinkmicContent;
    /**
     * @generated from protobuf field: string prompts = 2;
     */
    prompts: string;
    /**
     * @generated from protobuf field: bool waiting_user_need_leave = 3;
     */
    waitingUserNeedLeave: boolean;
    /**
     * @generated from protobuf field: string waiting_user_toast = 4;
     */
    waitingUserToast: string;
}
/**
 * @generated from protobuf message im.LinkmicProfitBidPaidLinkmicTurnOffContent
 */
export interface LinkmicProfitBidPaidLinkmicTurnOffContent {
    /**
     * @generated from protobuf field: string prompts = 1;
     */
    prompts: string;
}
/**
 * @generated from protobuf message im.LinkmicRoomBattleInviteContent
 */
export interface LinkmicRoomBattleInviteContent {
    /**
     * @generated from protobuf field: data.User inviter = 1;
     */
    inviter?: User;
    /**
     * @generated from protobuf field: data.InviteRoomInfo room_info = 2;
     */
    roomInfo?: InviteRoomInfo;
    /**
     * @generated from protobuf field: int32 start_type = 3;
     */
    startType: number;
    /**
     * @generated from protobuf field: string invite_tips = 4;
     */
    inviteTips: string;
    /**
     * @generated from protobuf field: data.RoomBattleMode room_battle_mode = 5;
     */
    roomBattleMode?: RoomBattleMode;
}
/**
 * @generated from protobuf message im.LinkmicRoomBattleReplyContent
 */
export interface LinkmicRoomBattleReplyContent {
    /**
     * @generated from protobuf field: int32 reply_type = 1;
     */
    replyType: number;
    /**
     * @generated from protobuf field: int32 start_type = 2;
     */
    startType: number;
    /**
     * @generated from protobuf field: int64 invitee_room_id = 3;
     */
    inviteeRoomId: bigint;
    /**
     * @generated from protobuf field: int64 invitee_anchor_id = 4;
     */
    inviteeAnchorId: bigint;
    /**
     * @generated from protobuf field: int64 follow_status = 5;
     */
    followStatus: bigint;
    /**
     * @generated from protobuf field: int64 reply_user_id = 6;
     */
    replyUserId: bigint;
    /**
     * @generated from protobuf field: string reply_toast = 7;
     */
    replyToast: string;
    /**
     * @generated from protobuf field: int32 reply_operate = 8;
     */
    replyOperate: number;
}
/**
 * @generated from protobuf message im.LinkmicProfitInteractiveScreenCastOpenContent
 */
export interface LinkmicProfitInteractiveScreenCastOpenContent {
    /**
     * @generated from protobuf field: data.InteractiveScreenCastInfo screen_cast_info = 1;
     */
    screenCastInfo?: InteractiveScreenCastInfo;
    /**
     * @generated from protobuf field: string rtc_ext_info = 2;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_ext_info = 3;
     */
    liveCoreExtInfo: string;
}
/**
 * @generated from protobuf message im.LinkmicProfitInteractiveScreenCastCloseContent
 */
export interface LinkmicProfitInteractiveScreenCastCloseContent {
    /**
     * @generated from protobuf field: data.InteractiveScreenCastInfo screen_cast_info = 1;
     */
    screenCastInfo?: InteractiveScreenCastInfo;
    /**
     * @generated from protobuf field: string rtc_ext_info = 2;
     */
    rtcExtInfo: string;
    /**
     * @generated from protobuf field: string live_core_ext_info = 3;
     */
    liveCoreExtInfo: string;
}
/**
 * @generated from protobuf message im.LinkmicRoomBattleMatchSuccessContent
 */
export interface LinkmicRoomBattleMatchSuccessContent {
    /**
     * @generated from protobuf field: int32 match_type = 1;
     */
    matchType: number;
    /**
     * @generated from protobuf field: data.RoomBattleProcessInfo process_info = 2;
     */
    processInfo?: RoomBattleProcessInfo;
    /**
     * @generated from protobuf field: int64 rival_anchor_id = 3;
     */
    rivalAnchorId: bigint;
    /**
     * @generated from protobuf field: int64 rival_user_count = 4;
     */
    rivalUserCount: bigint;
    /**
     * @generated from protobuf field: int64 rival_chat_room_rank = 5;
     */
    rivalChatRoomRank: bigint;
    /**
     * @generated from protobuf field: int64 rival_follow_status = 6;
     */
    rivalFollowStatus: bigint;
    /**
     * @generated from protobuf field: int64 invite_source = 7;
     */
    inviteSource: bigint;
    /**
     * @generated from protobuf field: int64 operator_user_id = 8;
     */
    operatorUserId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicGiftRecipientContent
 */
export interface LinkmicGiftRecipientContent {
    /**
     * @generated from protobuf field: int64 gift_recipient_user_id = 1;
     */
    giftRecipientUserId: bigint;
    /**
     * @generated from protobuf field: int32 reason = 2;
     */
    reason: number;
}
/**
 * @generated from protobuf message im.LinkmicProfitAudioSubtitleCheckInContent
 */
export interface LinkmicProfitAudioSubtitleCheckInContent {
    /**
     * @generated from protobuf field: int64 version_id = 1;
     */
    versionId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicProfitAudioSubtitleStartContent
 */
export interface LinkmicProfitAudioSubtitleStartContent {
    /**
     * @generated from protobuf field: int64 version_id = 1;
     */
    versionId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicProfitAudioSubtitleCloseContent
 */
export interface LinkmicProfitAudioSubtitleCloseContent {
    /**
     * @generated from protobuf field: int64 version_id = 1;
     */
    versionId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicGameBarrageStartContent
 */
export interface LinkmicGameBarrageStartContent {
    /**
     * @generated from protobuf field: data.LinkmicGameInfo game_info = 1;
     */
    gameInfo?: LinkmicGameInfo;
    /**
     * @generated from protobuf field: string audience_toast = 2;
     */
    audienceToast: string;
    /**
     * @generated from protobuf field: repeated int64 kick_out_user_ids = 3;
     */
    kickOutUserIds: bigint[];
}
/**
 * @generated from protobuf message im.LinkmicGameBarrageStopContent
 */
export interface LinkmicGameBarrageStopContent {
    /**
     * @generated from protobuf field: data.LinkmicGameInfo game_info = 1;
     */
    gameInfo?: LinkmicGameInfo;
}
/**
 * @generated from protobuf message im.LinkmicReviewMessage
 */
export interface LinkmicReviewMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.LinkmicReviewNormalPaidDescContent normal_paid_desc_content = 21;
     */
    normalPaidDescContent?: LinkmicReviewNormalPaidDescContent;
}
/**
 * @generated from protobuf message im.LinkmicReviewNormalPaidDescContent
 */
export interface LinkmicReviewNormalPaidDescContent {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.SelfDisciplinePunchMessage
 */
export interface SelfDisciplinePunchMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: int64 to_user_id = 3;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 4;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 punch_duration = 5;
     */
    punchDuration: bigint;
    /**
     * @generated from protobuf field: string toast_text = 6;
     */
    toastText: string;
    /**
     * @generated from protobuf field: int32 punch_status = 7;
     */
    punchStatus: number;
}
/**
 * @generated from protobuf message im.LinkmicSelfDisciplineMessage
 */
export interface LinkmicSelfDisciplineMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.LinkmicSelfDisciplineConfigContent config_content = 21;
     */
    configContent?: LinkmicSelfDisciplineConfigContent;
    /**
     * @generated from protobuf field: im.LinkmicSelfDisciplineLikeContent like_content = 22;
     */
    likeContent?: LinkmicSelfDisciplineLikeContent;
}
/**
 * @generated from protobuf message im.LinkmicSelfDisciplineConfigContent
 */
export interface LinkmicSelfDisciplineConfigContent {
    /**
     * @generated from protobuf field: int32 switch_status = 1;
     */
    switchStatus: number;
    /**
     * @generated from protobuf field: string current_target = 2;
     */
    currentTarget: string;
    /**
     * @generated from protobuf field: string target_icon_uri = 3;
     */
    targetIconUri: string;
    /**
     * @generated from protobuf field: string text = 4;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 punch_duration = 5;
     */
    punchDuration: bigint;
    /**
     * @generated from protobuf field: string toast = 6;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.LinkmicSelfDisciplineLikeContent
 */
export interface LinkmicSelfDisciplineLikeContent {
    /**
     * @generated from protobuf field: int64 from_user_id = 1;
     */
    fromUserId: bigint;
    /**
     * @generated from protobuf field: int64 to_user_id = 2;
     */
    toUserId: bigint;
    /**
     * @generated from protobuf field: int32 source = 3;
     */
    source: number;
}
/**
 * @generated from protobuf message im.LinkmicTeamfightScoreMessage
 */
export interface LinkmicTeamfightScoreMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.LinkmicTeamfightInfo teamfight_info = 2;
     */
    teamfightInfo?: LinkmicTeamfightInfo;
    /**
     * @generated from protobuf field: data.LinkmicQuickInteract quick_interact = 3;
     */
    quickInteract?: LinkmicQuickInteract;
}
/**
 * @generated from protobuf message im.LinkmicTeamfightMessage
 */
export interface LinkmicTeamfightMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: data.LinkmicTeamfightInfo teamfight_info = 3;
     */
    teamfightInfo?: LinkmicTeamfightInfo;
    /**
     * @generated from protobuf field: im.LinkmicTeamfightFinishContent finish_content = 100;
     */
    finishContent?: LinkmicTeamfightFinishContent;
    /**
     * @generated from protobuf field: im.LinkmicTeamfightCreateContent create_content = 101;
     */
    createContent?: LinkmicTeamfightCreateContent;
    /**
     * @generated from protobuf field: im.LinkmicTeamfightSettleContent settle_content = 102;
     */
    settleContent?: LinkmicTeamfightSettleContent;
}
/**
 * @generated from protobuf message im.LinkmicTeamfightFinishContent
 */
export interface LinkmicTeamfightFinishContent {
    /**
     * @generated from protobuf field: string finish_toast = 1;
     */
    finishToast: string;
    /**
     * @generated from protobuf field: string guest_finish_toast = 2;
     */
    guestFinishToast: string;
    /**
     * @generated from protobuf field: int32 reason = 3;
     */
    reason: number;
    /**
     * @generated from protobuf field: int64 finish_room_id = 4;
     */
    finishRoomId: bigint;
    /**
     * @generated from protobuf field: int64 finish_user_id = 5;
     */
    finishUserId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicTeamfightCreateContent
 */
export interface LinkmicTeamfightCreateContent {
    /**
     * @generated from protobuf field: int32 reason = 3;
     */
    reason: number;
}
/**
 * @generated from protobuf message im.LinkmicTeamfightSettleContent
 */
export interface LinkmicTeamfightSettleContent {
    /**
     * @generated from protobuf field: string disable_show_toast = 1;
     */
    disableShowToast: string;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionMessage
 */
export interface LinkmicThemedCompetitionMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionStartContent start_content = 100;
     */
    startContent?: LinkmicThemedCompetitionStartContent;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionCloseContent close_content = 101;
     */
    closeContent?: LinkmicThemedCompetitionCloseContent;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionScoreChangeContent score_change_content = 102;
     */
    scoreChangeContent?: LinkmicThemedCompetitionScoreChangeContent;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionOnceMoreContent once_more_content = 103;
     */
    onceMoreContent?: LinkmicThemedCompetitionOnceMoreContent;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionShowTimeStartContent show_time_start_content = 104;
     */
    showTimeStartContent?: LinkmicThemedCompetitionShowTimeStartContent;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionShowTimeFinishContent show_time_finish_content = 105;
     */
    showTimeFinishContent?: LinkmicThemedCompetitionShowTimeFinishContent;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionBannerMessageForPC banner_message_for_pc = 106;
     */
    bannerMessageForPc?: LinkmicThemedCompetitionBannerMessageForPC;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionToastMessageForPC toast_message_for_pc = 107;
     */
    toastMessageForPc?: LinkmicThemedCompetitionToastMessageForPC;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionStartContent
 */
export interface LinkmicThemedCompetitionStartContent {
    /**
     * @generated from protobuf field: data.ThemedCompetitionInfo info = 1;
     */
    info?: ThemedCompetitionInfo;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionOnceMoreContent
 */
export interface LinkmicThemedCompetitionOnceMoreContent {
    /**
     * @generated from protobuf field: data.ThemedCompetitionInfo info = 1;
     */
    info?: ThemedCompetitionInfo;
    /**
     * @generated from protobuf field: int64 old_competition_id = 2;
     */
    oldCompetitionId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionCloseContent
 */
export interface LinkmicThemedCompetitionCloseContent {
    /**
     * @generated from protobuf field: int64 competition_id = 1;
     */
    competitionId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionScoreChangeContent
 */
export interface LinkmicThemedCompetitionScoreChangeContent {
    /**
     * @generated from protobuf field: data.ThemedCompetitionInfo info = 1;
     */
    info?: ThemedCompetitionInfo;
    /**
     * @generated from protobuf field: int64 score_change_user_id = 2;
     */
    scoreChangeUserId: bigint;
    /**
     * @generated from protobuf field: data.LinkmicQuickInteract quick_interact = 3;
     */
    quickInteract?: LinkmicQuickInteract;
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionScoreChangeContent.WinContent new_advance_user = 4;
     */
    newAdvanceUser?: LinkmicThemedCompetitionScoreChangeContent_WinContent;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionScoreChangeContent.WinContent
 */
export interface LinkmicThemedCompetitionScoreChangeContent_WinContent {
    /**
     * @generated from protobuf field: int64 rank = 1;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int32 win_type = 3;
     */
    winType: number;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionShowTimeStartContent
 */
export interface LinkmicThemedCompetitionShowTimeStartContent {
    /**
     * @generated from protobuf field: int64 competition_id = 1;
     */
    competitionId: bigint;
    /**
     * @generated from protobuf field: data.ThemedCompetitionInfo info = 2;
     */
    info?: ThemedCompetitionInfo;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionShowTimeFinishContent
 */
export interface LinkmicThemedCompetitionShowTimeFinishContent {
    /**
     * @generated from protobuf field: int64 competition_id = 1;
     */
    competitionId: bigint;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionBannerMessageForPC
 */
export interface LinkmicThemedCompetitionBannerMessageForPC {
    /**
     * @generated from protobuf field: im.LinkmicThemedCompetitionBannerMessageForPC.BannerContent content = 1;
     */
    content?: LinkmicThemedCompetitionBannerMessageForPC_BannerContent;
    /**
     * @generated from protobuf field: int32 refresh_type = 2;
     */
    refreshType: number;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionBannerMessageForPC.Content
 */
export interface LinkmicThemedCompetitionBannerMessageForPC_Content {
    /**
     * @generated from protobuf field: int64 rank = 1;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
    /**
     * @generated from protobuf field: int64 delta_score = 3;
     */
    deltaScore: bigint;
    /**
     * @generated from protobuf field: int32 win_type = 4;
     */
    winType: number;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionBannerMessageForPC.BannerContent
 */
export interface LinkmicThemedCompetitionBannerMessageForPC_BannerContent {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: data.User current_performer = 2;
     */
    currentPerformer?: User;
    /**
     * @generated from protobuf field: int64 rank = 3;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: int64 total_performer_count = 4;
     */
    totalPerformerCount: bigint;
    /**
     * @generated from protobuf field: int32 status = 5;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated im.LinkmicThemedCompetitionBannerMessageForPC.Content rotate_content = 6;
     */
    rotateContent: LinkmicThemedCompetitionBannerMessageForPC_Content[];
    /**
     * @generated from protobuf field: int64 version = 7;
     */
    version: bigint;
}
/**
 * @generated from protobuf message im.LinkmicThemedCompetitionToastMessageForPC
 */
export interface LinkmicThemedCompetitionToastMessageForPC {
    /**
     * @generated from protobuf field: string toast = 1;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.TraceTimeMetricV2
 */
export interface TraceTimeMetricV2 {
    /**
     * @generated from protobuf field: int64 op_timestamp = 1;
     */
    opTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 producer_duration = 2;
     */
    producerDuration: bigint;
    /**
     * @generated from protobuf field: int64 consumer_duration = 3;
     */
    consumerDuration: bigint;
    /**
     * @generated from protobuf field: int64 msg_send_timestamp = 4;
     */
    msgSendTimestamp: bigint;
}
/**
 * @generated from protobuf message im.LiveEcomGeneralMessage
 */
export interface LiveEcomGeneralMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content_type = 2;
     */
    contentType: string;
    /**
     * @generated from protobuf field: string content_format = 3;
     */
    contentFormat: string;
    /**
     * @generated from protobuf field: int64 logic_clock = 4;
     */
    logicClock: bigint;
    /**
     * @generated from protobuf field: im.TraceTimeMetricV2 trace_time_metric = 5;
     */
    traceTimeMetric?: TraceTimeMetricV2;
    /**
     * @generated from protobuf field: bytes data = 6;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message im.CouponActivityInfoMessage
 */
export interface CouponActivityInfoMessage {
    /**
     * @generated from protobuf field: int64 activity_type = 1;
     */
    activityType: bigint;
    /**
     * @generated from protobuf field: string before_text = 2;
     */
    beforeText: string;
    /**
     * @generated from protobuf field: string before_button = 3;
     */
    beforeButton: string;
    /**
     * @generated from protobuf field: string after_text = 4;
     */
    afterText: string;
    /**
     * @generated from protobuf field: string after_button = 5;
     */
    afterButton: string;
}
/**
 * @generated from protobuf message im.CouponMetaInfoMessage
 */
export interface CouponMetaInfoMessage {
    /**
     * @generated from protobuf field: string coupon_meta_id = 1;
     */
    couponMetaId: string;
    /**
     * @generated from protobuf field: string start_time = 2;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string expire_time = 3;
     */
    expireTime: string;
    /**
     * @generated from protobuf field: int64 period_type = 4;
     */
    periodType: bigint;
    /**
     * @generated from protobuf field: int64 valid_period = 5;
     */
    validPeriod: bigint;
    /**
     * @generated from protobuf field: string start_apply_time = 6;
     */
    startApplyTime: string;
    /**
     * @generated from protobuf field: string end_apply_time = 7;
     */
    endApplyTime: string;
    /**
     * @generated from protobuf field: string coupon_name = 8;
     */
    couponName: string;
    /**
     * @generated from protobuf field: string url = 9;
     */
    url: string;
    /**
     * @generated from protobuf field: int64 threshold = 10;
     */
    threshold: bigint;
    /**
     * @generated from protobuf field: int64 credit = 11;
     */
    credit: bigint;
    /**
     * @generated from protobuf field: int64 max_apply_times = 12;
     */
    maxApplyTimes: bigint;
    /**
     * @generated from protobuf field: int64 type = 13;
     */
    type: bigint;
    /**
     * @generated from protobuf field: string type_detail = 14;
     */
    typeDetail: string;
    /**
     * @generated from protobuf field: double discount = 15;
     */
    discount: number;
    /**
     * @generated from protobuf field: string shop_id = 16;
     */
    shopId: string;
    /**
     * @generated from protobuf field: int64 pay_type = 17;
     */
    payType: bigint;
    /**
     * @generated from protobuf field: int64 max_discount_limit = 18;
     */
    maxDiscountLimit: bigint;
    /**
     * @generated from protobuf field: string shop_name = 19;
     */
    shopName: string;
    /**
     * @generated from protobuf field: string type_string = 20;
     */
    typeString: string;
    /**
     * @generated from protobuf field: string what_coupon = 21;
     */
    whatCoupon: string;
    /**
     * @generated from protobuf field: string coupon_string = 22;
     */
    couponString: string;
    /**
     * @generated from protobuf field: int64 channel_id = 23;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 left_amount = 24;
     */
    leftAmount: bigint;
    /**
     * @generated from protobuf field: int64 has_applied = 25;
     */
    hasApplied: bigint;
    /**
     * @generated from protobuf field: int64 status = 26;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string shop_logo = 27;
     */
    shopLogo: string;
    /**
     * @generated from protobuf field: int64 is_show = 28;
     */
    isShow: bigint;
    /**
     * @generated from protobuf field: int64 total_amount = 29;
     */
    totalAmount: bigint;
    /**
     * @generated from protobuf field: int32 live_coupon_status = 30;
     */
    liveCouponStatus: number;
    /**
     * @generated from protobuf field: int32 coupon_source = 31;
     */
    couponSource: number;
    /**
     * @generated from protobuf field: int64 user_apply_times = 32;
     */
    userApplyTimes: bigint;
    /**
     * @generated from protobuf field: bool can_continue_apply = 33;
     */
    canContinueApply: boolean;
    /**
     * @generated from protobuf field: bool coupon_status = 34;
     */
    couponStatus: boolean;
    /**
     * @generated from protobuf field: bool coupon_reset = 35;
     */
    couponReset: boolean;
    /**
     * @generated from protobuf field: int64 start_time_timestamp = 36;
     */
    startTimeTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 expire_time_timestamp = 37;
     */
    expireTimeTimestamp: bigint;
    /**
     * @generated from protobuf field: string avatar = 38;
     */
    avatar: string;
    /**
     * @generated from protobuf field: int64 kol_uid = 39;
     */
    kolUid: bigint;
    /**
     * @generated from protobuf field: repeated int64 product_ids = 40;
     */
    productIds: bigint[];
    /**
     * @generated from protobuf field: int64 platform_sub_type = 41;
     */
    platformSubType: bigint;
    /**
     * @generated from protobuf field: bool has_available_goods = 42;
     */
    hasAvailableGoods: boolean;
    /**
     * @generated from protobuf field: string type_title = 43;
     */
    typeTitle: string;
    /**
     * @generated from protobuf field: int64 kol_user_tag = 45;
     */
    kolUserTag: bigint;
    /**
     * @generated from protobuf field: string type_icon = 46;
     */
    typeIcon: string;
    /**
     * @generated from protobuf field: int64 type_icon_width = 47;
     */
    typeIconWidth: bigint;
    /**
     * @generated from protobuf field: int64 type_icon_height = 48;
     */
    typeIconHeight: bigint;
    /**
     * @generated from protobuf field: string coupon_category = 49;
     */
    couponCategory: string;
    /**
     * @generated from protobuf field: string extra_data = 50;
     */
    extraData: string;
}
/**
 * @generated from protobuf message im.LiveEcomMessage
 */
export interface LiveEcomMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: string nick_name = 3;
     */
    nickName: string;
    /**
     * @generated from protobuf field: int64 purchase_cnt = 4;
     */
    purchaseCnt: bigint;
    /**
     * @generated from protobuf field: string text = 5;
     */
    text: string;
    /**
     * @generated from protobuf field: string icon = 6;
     */
    icon: string;
    /**
     * @generated from protobuf field: int64 meta_id = 7;
     */
    metaId: bigint;
    /**
     * @generated from protobuf field: int64 server_time = 8;
     */
    serverTime: bigint;
    /**
     * @generated from protobuf field: int64 countdown = 9;
     */
    countdown: bigint;
    /**
     * @generated from protobuf field: string activity_json_str = 10;
     */
    activityJsonStr: string;
    /**
     * @generated from protobuf field: int32 coupon_type = 11;
     */
    couponType: number;
    /**
     * @generated from protobuf field: im.CouponActivityInfoMessage activity_info = 12;
     */
    activityInfo?: CouponActivityInfoMessage;
    /**
     * @generated from protobuf field: im.CouponMetaInfoMessage coupon_meta = 13;
     */
    couponMeta?: CouponMetaInfoMessage;
    /**
     * @generated from protobuf field: string meta_id_str = 14;
     */
    metaIdStr: string;
}
/**
 * @generated from protobuf message im.LiveMateDemoteMessage
 */
export interface LiveMateDemoteMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool re_push = 2;
     */
    rePush: boolean;
}
/**
 * @generated from protobuf message im.ProductChangeMessage
 */
export interface ProductChangeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 update_timestamp = 2;
     */
    updateTimestamp: bigint;
    /**
     * @generated from protobuf field: string update_toast = 3;
     */
    updateToast: string;
    /**
     * @generated from protobuf field: repeated im.ProductInfo update_product_info = 4;
     */
    updateProductInfo: ProductInfo[];
    /**
     * @generated from protobuf field: int64 total = 5;
     */
    total: bigint;
    /**
     * @generated from protobuf field: repeated int64 target_uid = 6;
     */
    targetUid: bigint[];
    /**
     * @generated from protobuf field: repeated string sec_target_uid = 7;
     */
    secTargetUid: string[];
    /**
     * @generated from protobuf field: repeated im.CategoryInfo update_category_info = 8;
     */
    updateCategoryInfo: CategoryInfo[];
}
/**
 * @generated from protobuf message im.ProductInfo
 */
export interface ProductInfo {
    /**
     * @generated from protobuf field: int64 promotion_id = 1;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: int32 index = 2;
     */
    index: number;
    /**
     * @generated from protobuf field: repeated int64 target_flash_uids = 3;
     */
    targetFlashUids: bigint[];
    /**
     * @generated from protobuf field: int64 explain_type = 4;
     */
    explainType: bigint;
}
/**
 * @generated from protobuf message im.CategoryInfo
 */
export interface CategoryInfo {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string promotion_ids = 3;
     */
    promotionIds: string[];
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: string unique_index = 5;
     */
    uniqueIndex: string;
}
/**
 * @generated from protobuf message im.UpdatedProductInfo
 */
export interface UpdatedProductInfo {
    /**
     * @generated from protobuf field: int64 price = 1;
     */
    price: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string cover = 3;
     */
    cover: string;
    /**
     * @generated from protobuf field: int64 status = 4;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string pop_upicon = 5;
     */
    popUpicon: string;
}
/**
 * @generated from protobuf message im.UpdatedCouponInfo
 */
export interface UpdatedCouponInfo {
    /**
     * @generated from protobuf field: string tag = 1;
     */
    tag: string;
    /**
     * @generated from protobuf field: string coupon_url = 2;
     */
    couponUrl: string;
    /**
     * @generated from protobuf field: string coupon_applet = 3;
     */
    couponApplet: string;
    /**
     * @generated from protobuf field: bool is_valid = 4;
     */
    isValid: boolean;
    /**
     * @generated from protobuf field: string coupon_meta_id = 5;
     */
    couponMetaId: string;
}
/**
 * @generated from protobuf message im.UpdatedCampaignInfo
 */
export interface UpdatedCampaignInfo {
    /**
     * @generated from protobuf field: bool is_valid = 1;
     */
    isValid: boolean;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: string price = 3;
     */
    price: string;
    /**
     * @generated from protobuf field: string pic = 4;
     */
    pic: string;
    /**
     * @generated from protobuf field: string start_time = 5;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string end_time = 6;
     */
    endTime: string;
    /**
     * @generated from protobuf field: string time_start_label = 7;
     */
    timeStartLabel: string;
    /**
     * @generated from protobuf field: string time_end_label = 8;
     */
    timeEndLabel: string;
    /**
     * @generated from protobuf field: string user_limit = 9;
     */
    userLimit: string;
    /**
     * @generated from protobuf field: string is_preheat = 10;
     */
    isPreheat: string;
    /**
     * @generated from protobuf field: string campaign_id = 11;
     */
    campaignId: string;
}
/**
 * @generated from protobuf message im.SkuInfo
 */
export interface SkuInfo {
    /**
     * @generated from protobuf field: string sku_id = 1;
     */
    skuId: string;
    /**
     * @generated from protobuf field: int64 stock_num = 2;
     */
    stockNum: bigint;
    /**
     * @generated from protobuf field: int64 price = 3;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int64 coupon_price = 4;
     */
    couponPrice: bigint;
}
/**
 * @generated from protobuf message im.TraceTimeMetric
 */
export interface TraceTimeMetric {
    /**
     * @generated from protobuf field: int64 op_timestamp = 1;
     */
    opTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 producer_duration = 2;
     */
    producerDuration: bigint;
    /**
     * @generated from protobuf field: int64 consumer_duration = 3;
     */
    consumerDuration: bigint;
    /**
     * @generated from protobuf field: int64 msg_send_timestamp = 4;
     */
    msgSendTimestamp: bigint;
}
/**
 * @generated from protobuf message im.UpdatedSkuInfo
 */
export interface UpdatedSkuInfo {
    /**
     * @generated from protobuf field: int64 min_price = 2;
     */
    minPrice: bigint;
    /**
     * @generated from protobuf field: int64 max_price = 3;
     */
    maxPrice: bigint;
    /**
     * @generated from protobuf field: int64 unuse_min_price = 4;
     */
    unuseMinPrice: bigint;
    /**
     * @generated from protobuf field: int64 coupon_price = 5;
     */
    couponPrice: bigint;
}
/**
 * @generated from protobuf message im.UpdatedCommentaryVideoInfo
 */
export interface UpdatedCommentaryVideoInfo {
    /**
     * @generated from protobuf field: int64 action = 1;
     */
    action: bigint;
}
/**
 * @generated from protobuf message im.UpdatedGroupInfo
 */
export interface UpdatedGroupInfo {
    /**
     * @generated from protobuf field: repeated string avatar_list = 1;
     */
    avatarList: string[];
    /**
     * @generated from protobuf field: int64 joined = 2;
     */
    joined: bigint;
    /**
     * @generated from protobuf field: int64 group_size = 3;
     */
    groupSize: bigint;
    /**
     * @generated from protobuf field: int64 persent = 4;
     */
    persent: bigint;
}
/**
 * @generated from protobuf message im.UserBid
 */
export interface UserBid {
    /**
     * @generated from protobuf field: string pic = 1;
     */
    pic: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 price = 3;
     */
    price: bigint;
}
/**
 * @generated from protobuf message im.Img
 */
export interface Img {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: int32 height = 2;
     */
    height: number;
    /**
     * @generated from protobuf field: int32 width = 3;
     */
    width: number;
}
/**
 * @generated from protobuf message im.CurrentUserInfo
 */
export interface CurrentUserInfo {
    /**
     * @generated from protobuf field: im.Img user_pic = 1;
     */
    userPic?: Img;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message im.IncrPriceList
 */
export interface IncrPriceList {
    /**
     * @generated from protobuf field: int64 price = 1;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int64 range = 2;
     */
    range: bigint;
}
/**
 * @generated from protobuf message im.AuctionInfo
 */
export interface AuctionInfo {
    /**
     * @generated from protobuf field: int64 price = 1;
     */
    price: bigint;
    /**
     * @generated from protobuf field: string price_label = 2;
     */
    priceLabel: string;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: string jump_url = 4;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: im.CurrentUserInfo current_user_info = 5;
     */
    currentUserInfo?: CurrentUserInfo;
    /**
     * @generated from protobuf field: repeated im.IncrPriceList incr_price_lists = 6;
     */
    incrPriceLists: IncrPriceList[];
    /**
     * @generated from protobuf field: string button_label = 7;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: int64 product_id = 8;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 9;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 biz_id = 10;
     */
    bizId: number;
}
/**
 * @generated from protobuf message im.AuctionSuccess
 */
export interface AuctionSuccess {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 product_id = 2;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: string product_name = 3;
     */
    productName: string;
    /**
     * @generated from protobuf field: string product_pic = 4;
     */
    productPic: string;
    /**
     * @generated from protobuf field: int64 price = 5;
     */
    price: bigint;
    /**
     * @generated from protobuf field: int64 charge = 6;
     */
    charge: bigint;
    /**
     * @generated from protobuf field: int64 freight = 7;
     */
    freight: bigint;
    /**
     * @generated from protobuf field: int64 total = 8;
     */
    total: bigint;
    /**
     * @generated from protobuf field: string button_label = 9;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: string jump_url = 10;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: string freight_collect = 11;
     */
    freightCollect: string;
    /**
     * @generated from protobuf field: int64 left_payment_time = 12;
     */
    leftPaymentTime: bigint;
    /**
     * @generated from protobuf field: int32 biz_id = 13;
     */
    bizId: number;
    /**
     * @generated from protobuf field: string deposit_info = 14;
     */
    depositInfo: string;
}
/**
 * @generated from protobuf message im.RedpackActivityInfo
 */
export interface RedpackActivityInfo {
    /**
     * @generated from protobuf field: int64 redpack_type = 1;
     */
    redpackType: bigint;
    /**
     * @generated from protobuf field: string redpack_activity_id = 2;
     */
    redpackActivityId: string;
    /**
     * @generated from protobuf field: string redpack_activity_name = 3;
     */
    redpackActivityName: string;
    /**
     * @generated from protobuf field: int64 start_apply_time = 4;
     */
    startApplyTime: bigint;
    /**
     * @generated from protobuf field: int64 end_apply_time = 5;
     */
    endApplyTime: bigint;
    /**
     * @generated from protobuf field: int64 preheat_time = 6;
     */
    preheatTime: bigint;
    /**
     * @generated from protobuf field: int64 total_amount = 7;
     */
    totalAmount: bigint;
    /**
     * @generated from protobuf field: string author_avatar_url = 8;
     */
    authorAvatarUrl: string;
    /**
     * @generated from protobuf field: string author_name = 9;
     */
    authorName: string;
    /**
     * @generated from protobuf field: string pendant_background_url = 10;
     */
    pendantBackgroundUrl: string;
    /**
     * @generated from protobuf field: string redpack_front_background_url = 11;
     */
    redpackFrontBackgroundUrl: string;
    /**
     * @generated from protobuf field: string redpack_label = 12;
     */
    redpackLabel: string;
    /**
     * @generated from protobuf field: string redpack_after_background_url = 13;
     */
    redpackAfterBackgroundUrl: string;
    /**
     * @generated from protobuf field: string redpack_after_belt_url = 14;
     */
    redpackAfterBeltUrl: string;
    /**
     * @generated from protobuf field: int64 scatter_time = 15;
     */
    scatterTime: bigint;
    /**
     * @generated from protobuf field: int64 server_time = 16;
     */
    serverTime: bigint;
    /**
     * @generated from protobuf field: int64 max_amount = 17;
     */
    maxAmount: bigint;
    /**
     * @generated from protobuf field: int64 show_type = 18;
     */
    showType: bigint;
    /**
     * @generated from protobuf field: string shorttouch_pendant_background_url = 19;
     */
    shorttouchPendantBackgroundUrl: string;
    /**
     * @generated from protobuf field: string shorttouch_pendant_icon_url = 20;
     */
    shorttouchPendantIconUrl: string;
    /**
     * @generated from protobuf field: string shorttouch_lottie_url = 21;
     */
    shorttouchLottieUrl: string;
}
/**
 * @generated from protobuf message im.UpdatedCartInfo
 */
export interface UpdatedCartInfo {
    /**
     * @generated from protobuf field: data.CartVertical vertical = 1;
     */
    vertical?: CartVertical;
    /**
     * @generated from protobuf field: data.CartHorizontal horizontal = 2;
     */
    horizontal?: CartHorizontal;
    /**
     * @generated from protobuf field: data.GlobalCustomIcons global_custom_icons = 3;
     */
    globalCustomIcons?: GlobalCustomIcons;
}
/**
 * @generated from protobuf message im.LotteryProductShortInfo
 */
export interface LotteryProductShortInfo {
    /**
     * @generated from protobuf field: int64 product_id = 1;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: string img = 2;
     */
    img: string;
}
/**
 * @generated from protobuf message im.LotteryInfo
 */
export interface LotteryInfo {
    /**
     * @generated from protobuf field: int64 lottery_type = 1;
     */
    lotteryType: bigint;
    /**
     * @generated from protobuf field: string enter_icon = 2;
     */
    enterIcon: string;
    /**
     * @generated from protobuf field: string icon = 3;
     */
    icon: string;
    /**
     * @generated from protobuf field: string activity_id = 4;
     */
    activityId: string;
    /**
     * @generated from protobuf field: int64 open_time = 5;
     */
    openTime: bigint;
    /**
     * @generated from protobuf field: im.LotteryProductShortInfo product_info = 6;
     */
    productInfo?: LotteryProductShortInfo;
}
/**
 * @generated from protobuf message im.LotteryUnusualInfo
 */
export interface LotteryUnusualInfo {
    /**
     * @generated from protobuf field: string product_name = 1;
     */
    productName: string;
    /**
     * @generated from protobuf field: int64 open_time = 2;
     */
    openTime: bigint;
}
/**
 * @generated from protobuf message im.WinLotteryAlert
 */
export interface WinLotteryAlert {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string button_label = 3;
     */
    buttonLabel: string;
}
/**
 * @generated from protobuf message im.WinLotteryInfo
 */
export interface WinLotteryInfo {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string img = 3;
     */
    img: string;
    /**
     * @generated from protobuf field: string button_label = 4;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: string win_record_id = 5;
     */
    winRecordId: string;
    /**
     * @generated from protobuf field: string activity_id = 6;
     */
    activityId: string;
    /**
     * @generated from protobuf field: bool is_addressed = 7;
     */
    isAddressed: boolean;
    /**
     * @generated from protobuf field: im.WinLotteryAlert alert = 8;
     */
    alert?: WinLotteryAlert;
    /**
     * @generated from protobuf field: bool is_win = 9;
     */
    isWin: boolean;
    /**
     * @generated from protobuf field: string jump_url = 10;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: int64 product_id = 11;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: repeated int64 activity_price = 12;
     */
    activityPrice: bigint[];
    /**
     * @generated from protobuf field: int64 buy_time = 13;
     */
    buyTime: bigint;
    /**
     * @generated from protobuf field: int64 lottery_type = 14;
     */
    lotteryType: bigint;
    /**
     * @generated from protobuf field: string product_id_str = 15;
     */
    productIdStr: string;
}
/**
 * @generated from protobuf message im.BenefitLabel
 */
export interface BenefitLabel {
    /**
     * @generated from protobuf field: string LeftText = 1 [json_name = "LeftText"];
     */
    leftText: string;
    /**
     * @generated from protobuf field: string RightText = 2 [json_name = "RightText"];
     */
    rightText: string;
    /**
     * @generated from protobuf field: int32 TextStyle = 3 [json_name = "TextStyle"];
     */
    textStyle: number;
    /**
     * @generated from protobuf field: int32 ColorStyle = 4 [json_name = "ColorStyle"];
     */
    colorStyle: number;
    /**
     * @generated from protobuf field: int32 DivLine = 5 [json_name = "DivLine"];
     */
    divLine: number;
}
/**
 * @generated from protobuf message im.LotteryInfoList
 */
export interface LotteryInfoList {
    /**
     * @generated from protobuf field: string activity_id = 1;
     */
    activityId: string;
    /**
     * @generated from protobuf field: int64 task_type = 2;
     */
    taskType: bigint;
    /**
     * @generated from protobuf field: int64 open_time = 3;
     */
    openTime: bigint;
    /**
     * @generated from protobuf field: int64 user_activity_status = 4;
     */
    userActivityStatus: bigint;
    /**
     * @generated from protobuf field: string win_record_id = 5;
     */
    winRecordId: string;
    /**
     * @generated from protobuf field: string result_label = 6;
     */
    resultLabel: string;
    /**
     * @generated from protobuf field: string button_label = 7;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: repeated string text = 8;
     */
    text: string[];
    /**
     * @generated from protobuf field: string jump_url = 9;
     */
    jumpUrl: string;
    /**
     * @generated from protobuf field: int64 lottery_type = 10;
     */
    lotteryType: bigint;
    /**
     * @generated from protobuf field: string elastic_title = 11;
     */
    elasticTitle: string;
    /**
     * @generated from protobuf field: im.BenefitLabel benefit_label = 12;
     */
    benefitLabel?: BenefitLabel;
}
/**
 * @generated from protobuf message im.HotAtmosphere
 */
export interface HotAtmosphere {
    /**
     * @generated from protobuf field: string img = 1;
     */
    img: string;
    /**
     * @generated from protobuf field: string sale_num = 2;
     */
    saleNum: string;
    /**
     * @generated from protobuf field: int64 type = 3;
     */
    type: bigint;
    /**
     * @generated from protobuf field: string num = 4;
     */
    num: string;
    /**
     * @generated from protobuf field: string bg_color = 5;
     */
    bgColor: string;
    /**
     * @generated from protobuf field: string border_color = 6;
     */
    borderColor: string;
    /**
     * @generated from protobuf field: int64 left_margin = 7;
     */
    leftMargin: bigint;
    /**
     * @generated from protobuf field: int64 ui_type = 8;
     */
    uiType: bigint;
    /**
     * @generated from protobuf field: repeated string bg_colors = 9;
     */
    bgColors: string[];
    /**
     * @generated from protobuf field: repeated string border_colors = 10;
     */
    borderColors: string[];
    /**
     * @generated from protobuf field: string top_img = 11;
     */
    topImg: string;
}
/**
 * @generated from protobuf message im.UpIcon
 */
export interface UpIcon {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string up_icon = 2;
     */
    upIcon: string;
    /**
     * @generated from protobuf field: string up_desc = 3;
     */
    upDesc: string;
    /**
     * @generated from protobuf field: string public_screen_notice = 4;
     */
    publicScreenNotice: string;
}
/**
 * @generated from protobuf message im.FilterSwitchChangeData
 */
export interface FilterSwitchChangeData {
    /**
     * @generated from protobuf field: bool enable = 1;
     */
    enable: boolean;
    /**
     * @generated from protobuf field: im.UpIcon up_icon = 2;
     */
    upIcon?: UpIcon;
}
/**
 * @generated from protobuf message im.RoomTagOfflineInfo
 */
export interface RoomTagOfflineInfo {
    /**
     * @generated from protobuf field: int64 tag_type = 1;
     */
    tagType: bigint;
    /**
     * @generated from protobuf field: string user_toast = 2;
     */
    userToast: string;
}
/**
 * @generated from protobuf message im.InteractionData
 */
export interface InteractionData {
    /**
     * @generated from protobuf field: bool full = 1;
     */
    full: boolean;
    /**
     * @generated from protobuf field: repeated im.InteractionContent contents = 2;
     */
    contents: InteractionContent[];
}
/**
 * @generated from protobuf message im.InteractionContent
 */
export interface InteractionContent {
    /**
     * @generated from protobuf field: im.InteractionContentCheck check = 1;
     */
    check?: InteractionContentCheck;
    /**
     * @generated from protobuf field: int32 priority = 2;
     */
    priority: number;
    /**
     * @generated from protobuf field: int32 loop_count = 3;
     */
    loopCount: number;
    /**
     * @generated from protobuf field: repeated im.InteractionElement content = 4;
     */
    content: InteractionElement[];
}
/**
 * @generated from protobuf message im.InteractionContentCheck
 */
export interface InteractionContentCheck {
    /**
     * @generated from protobuf field: int64 product_id = 1;
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int32 index = 2;
     */
    index: number;
}
/**
 * @generated from protobuf message im.InteractionElement
 */
export interface InteractionElement {
    /**
     * @generated from protobuf field: int32 element_type = 1;
     */
    elementType: number;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: string text_color = 3;
     */
    textColor: string;
    /**
     * @generated from protobuf field: im.InteractionAvatar avatars = 4;
     */
    avatars?: InteractionAvatar;
    /**
     * @generated from protobuf field: int32 blank_width = 5;
     */
    blankWidth: number;
}
/**
 * @generated from protobuf message im.InteractionAvatar
 */
export interface InteractionAvatar {
    /**
     * @generated from protobuf field: repeated string url_list = 1;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: int32 width = 2;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 3;
     */
    height: number;
}
/**
 * @generated from protobuf message im.LiveShoppingMessage
 */
export interface LiveShoppingMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: int64 promotion_id = 3;
     */
    promotionId: bigint;
    /**
     * @generated from protobuf field: repeated int64 target_uid = 4;
     */
    targetUid: bigint[];
    /**
     * @generated from protobuf field: int32 bubble_type = 5;
     */
    bubbleType: number;
    /**
     * @generated from protobuf field: int64 screenshot_timestamp = 6;
     */
    screenshotTimestamp: bigint;
    /**
     * @generated from protobuf field: repeated string sec_target_uid = 7;
     */
    secTargetUid: string[];
    /**
     * @generated from protobuf field: string ecom_notice = 8;
     */
    ecomNotice: string;
    /**
     * @generated from protobuf field: repeated int64 updated_product_ids = 9;
     */
    updatedProductIds: bigint[];
    /**
     * @generated from protobuf field: int32 update_type = 10;
     */
    updateType: number;
    /**
     * @generated from protobuf field: im.UpdatedProductInfo updated_product_info = 11;
     */
    updatedProductInfo?: UpdatedProductInfo;
    /**
     * @generated from protobuf field: bool sold_out = 12;
     */
    soldOut: boolean;
    /**
     * @generated from protobuf field: im.UpdatedCouponInfo updated_coupon_info = 13;
     */
    updatedCouponInfo?: UpdatedCouponInfo;
    /**
     * @generated from protobuf field: im.UpdatedCampaignInfo updated_campaign_info = 14;
     */
    updatedCampaignInfo?: UpdatedCampaignInfo;
    /**
     * @generated from protobuf field: int64 update_timestamp = 15;
     */
    updateTimestamp: bigint;
    /**
     * @generated from protobuf field: string button_label = 16;
     */
    buttonLabel: string;
    /**
     * @generated from protobuf field: int64 promotions_num = 17;
     */
    promotionsNum: bigint;
    /**
     * @generated from protobuf field: im.UpdatedSkuInfo update_sku_info = 18;
     */
    updateSkuInfo?: UpdatedSkuInfo;
    /**
     * @generated from protobuf field: im.UpdatedCommentaryVideoInfo updated_commentary_video_info = 19;
     */
    updatedCommentaryVideoInfo?: UpdatedCommentaryVideoInfo;
    /**
     * @generated from protobuf field: im.UpdatedGroupInfo updated_group_info = 20;
     */
    updatedGroupInfo?: UpdatedGroupInfo;
    /**
     * @generated from protobuf field: string commerce_authority_change_toast = 21;
     */
    commerceAuthorityChangeToast: string;
    /**
     * @generated from protobuf field: im.TraceTimeMetric trace_time_metric = 22;
     */
    traceTimeMetric?: TraceTimeMetric;
    /**
     * @generated from protobuf field: im.AuctionSuccess auction_success = 23;
     */
    auctionSuccess?: AuctionSuccess;
    /**
     * @generated from protobuf field: im.AuctionInfo auction_info = 24;
     */
    auctionInfo?: AuctionInfo;
    /**
     * @generated from protobuf field: im.RedpackActivityInfo redpack_activity_info = 25;
     */
    redpackActivityInfo?: RedpackActivityInfo;
    /**
     * @generated from protobuf field: im.UpdatedCartInfo updated_cart_info = 26;
     */
    updatedCartInfo?: UpdatedCartInfo;
    /**
     * @generated from protobuf field: im.LotteryInfo lottery_info = 27;
     */
    lotteryInfo?: LotteryInfo;
    /**
     * @generated from protobuf field: im.WinLotteryInfo win_lotteryinfo = 28;
     */
    winLotteryinfo?: WinLotteryInfo;
    /**
     * @generated from protobuf field: im.LotteryInfoList lottery_info_list = 29;
     */
    lotteryInfoList?: LotteryInfoList;
    /**
     * @generated from protobuf field: im.HotAtmosphere hot_atmosphere = 30;
     */
    hotAtmosphere?: HotAtmosphere;
    /**
     * @generated from protobuf field: string update_toast = 31;
     */
    updateToast: string;
    /**
     * @generated from protobuf field: bool can_sold = 32;
     */
    canSold: boolean;
    /**
     * @generated from protobuf field: int64 logical_clock = 33;
     */
    logicalClock: bigint;
    /**
     * @generated from protobuf field: im.RoomTagOfflineInfo room_tag_offline_info = 34;
     */
    roomTagOfflineInfo?: RoomTagOfflineInfo;
    /**
     * @generated from protobuf field: im.FilterSwitchChangeData filter_switch_change_data = 35;
     */
    filterSwitchChangeData?: FilterSwitchChangeData;
    /**
     * @generated from protobuf field: im.InteractionData interaction_data = 36;
     */
    interactionData?: InteractionData;
}
/**
 * @generated from protobuf message im.LiveStreamControlMessage
 */
export interface LiveStreamControlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string control_params = 2;
     */
    controlParams: string;
}
/**
 * @generated from protobuf message im.LotteryBurstMessage
 */
export interface LotteryBurstMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 burst_time_remain_seconds = 2;
     */
    burstTimeRemainSeconds: bigint;
    /**
     * @generated from protobuf field: int64 multiple = 3;
     */
    multiple: bigint;
    /**
     * @generated from protobuf field: int64 property_definition_id = 4;
     */
    propertyDefinitionId: bigint;
    /**
     * @generated from protobuf field: data.Image property_icon = 5;
     */
    propertyIcon?: Image;
}
/**
 * @generated from protobuf message im.LotteryMessage
 */
export interface LotteryMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.XGLotteryMessage
 */
export interface XGLotteryMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.LotteryInfo lottery_info = 2;
     */
    lotteryInfo?: LotteryInfo$;
}
/**
 * @generated from protobuf message im.LotteryEventMessage
 */
export interface LotteryEventMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 lottery_id = 2;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: int32 lottery_status = 3;
     */
    lotteryStatus: number;
    /**
     * @generated from protobuf field: int64 lottery_start_time = 4;
     */
    lotteryStartTime: bigint;
    /**
     * @generated from protobuf field: int64 lottery_draw_time = 5;
     */
    lotteryDrawTime: bigint;
    /**
     * @generated from protobuf field: int64 lottery_current_time = 6;
     */
    lotteryCurrentTime: bigint;
    /**
     * @generated from protobuf field: string rule_page_scheme = 7;
     */
    rulePageScheme: string;
}
/**
 * @generated from protobuf message im.LotteryExpandEventMessage
 */
export interface LotteryExpandEventMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 expand_prize_type = 2;
     */
    expandPrizeType: bigint;
    /**
     * @generated from protobuf field: string extra = 3;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.LotteryEventNewMessage
 */
export interface LotteryEventNewMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 lottery_id = 2;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: int32 lottery_status = 3;
     */
    lotteryStatus: number;
    /**
     * @generated from protobuf field: int64 lottery_start_time = 4;
     */
    lotteryStartTime: bigint;
    /**
     * @generated from protobuf field: int64 lottery_draw_time = 5;
     */
    lotteryDrawTime: bigint;
    /**
     * @generated from protobuf field: int64 lottery_current_time = 6;
     */
    lotteryCurrentTime: bigint;
    /**
     * @generated from protobuf field: string rule_page_scheme = 7;
     */
    rulePageScheme: string;
    /**
     * @generated from protobuf field: int64 prize_type = 8;
     */
    prizeType: bigint;
    /**
     * @generated from protobuf field: string lottery_audit_failure_reason = 9;
     */
    lotteryAuditFailureReason: string;
    /**
     * @generated from protobuf field: repeated int32 conditions = 10;
     */
    conditions: number[];
    /**
     * @generated from protobuf field: bool use_new_draw_interaction = 12;
     */
    useNewDrawInteraction: boolean;
    /**
     * @generated from protobuf field: int64 prize_count = 13;
     */
    prizeCount: bigint;
    /**
     * @generated from protobuf field: int64 lucky_count = 14;
     */
    luckyCount: bigint;
}
/**
 * @generated from protobuf message im.LotteryCandidateEventMessage
 */
export interface LotteryCandidateEventMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 lottery_id = 2;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: bool participate_success = 4;
     */
    participateSuccess: boolean;
    /**
     * @generated from protobuf field: int64 version = 5;
     */
    version: bigint;
}
/**
 * @generated from protobuf message im.LotteryDrawResultEventMessage
 */
export interface LotteryDrawResultEventMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 lottery_id = 2;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: repeated int64 user_ids = 3;
     */
    userIds: bigint[];
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.LuckyBoxTempStatusMessage
 */
export interface LuckyBoxTempStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.LuckyBoxMessage
 */
export interface LuckyBoxMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 diamond_count = 2;
     */
    diamondCount: bigint;
    /**
     * @generated from protobuf field: int64 box_id = 3;
     */
    boxId: bigint;
    /**
     * @generated from protobuf field: int64 send_time = 4;
     */
    sendTime: bigint;
    /**
     * @generated from protobuf field: int64 delay_time = 5;
     */
    delayTime: bigint;
    /**
     * @generated from protobuf field: int64 box_type = 6;
     */
    boxType: bigint;
    /**
     * @generated from protobuf field: string title = 7;
     */
    title: string;
    /**
     * @generated from protobuf field: bool large = 8;
     */
    large: boolean;
    /**
     * @generated from protobuf field: data.Image background = 9;
     */
    background?: Image;
    /**
     * @generated from protobuf field: bool is_official = 10;
     */
    isOfficial: boolean;
    /**
     * @generated from protobuf field: int64 priority = 11;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: data.User user = 12;
     */
    user?: User;
    /**
     * @generated from protobuf field: repeated im.LuckyBoxMessage.ImgText description_list = 13;
     */
    descriptionList: LuckyBoxMessage_ImgText[];
    /**
     * @generated from protobuf field: data.Image lucky_icon = 14;
     */
    luckyIcon?: Image;
    /**
     * @generated from protobuf field: int64 display_duration = 15;
     */
    displayDuration: bigint;
    /**
     * @generated from protobuf field: int32 box_status = 16;
     */
    boxStatus: number;
    /**
     * @generated from protobuf field: int32 flat_duration = 17;
     */
    flatDuration: number;
    /**
     * @generated from protobuf field: int32 unpack_type = 18;
     */
    unpackType: number;
    /**
     * @generated from protobuf field: im.LuckyBoxMessage.BoxMeta meta = 19;
     */
    meta?: LuckyBoxMessage_BoxMeta;
    /**
     * @generated from protobuf field: im.LuckyBoxMessage.Extra extra = 20;
     */
    extra?: LuckyBoxMessage_Extra;
    /**
     * @generated from protobuf field: int64 business_type = 21;
     */
    businessType: bigint;
    /**
     * @generated from protobuf field: data.Image top_cover_image = 22;
     */
    topCoverImage?: Image;
    /**
     * @generated from protobuf field: data.Image bottom_cover_image = 23;
     */
    bottomCoverImage?: Image;
    /**
     * @generated from protobuf field: string box_id_str = 24;
     */
    boxIdStr: string;
    /**
     * @generated from protobuf field: im.LuckyBoxMessage.BottomCommentMsg bottom_comment_msg = 25;
     */
    bottomCommentMsg?: LuckyBoxMessage_BottomCommentMsg;
    /**
     * @generated from protobuf field: bool is_risky_owner = 26;
     */
    isRiskyOwner: boolean;
    /**
     * @generated from protobuf field: string activity_id = 27;
     */
    activityId: string;
    /**
     * @generated from protobuf field: im.LuckyBoxMessage.Dress dress = 28;
     */
    dress?: LuckyBoxMessage_Dress;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 29;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.LuckyBoxMessage.ImgText
 */
export interface LuckyBoxMessage_ImgText {
    /**
     * @generated from protobuf field: data.Image image = 1;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
}
/**
 * @generated from protobuf message im.LuckyBoxMessage.BoxMeta
 */
export interface LuckyBoxMessage_BoxMeta {
    /**
     * @generated from protobuf field: string title_desc = 1;
     */
    titleDesc: string;
    /**
     * @generated from protobuf field: string content_count_desc = 2;
     */
    contentCountDesc: string;
    /**
     * @generated from protobuf field: string content_amount_desc = 3;
     */
    contentAmountDesc: string;
    /**
     * @generated from protobuf field: string animation_desc = 4;
     */
    animationDesc: string;
    /**
     * @generated from protobuf field: string before_unpack_desc = 5;
     */
    beforeUnpackDesc: string;
    /**
     * @generated from protobuf field: string success_unpack_desc = 6;
     */
    successUnpackDesc: string;
    /**
     * @generated from protobuf field: string fail_unpack_desc = 7;
     */
    failUnpackDesc: string;
    /**
     * @generated from protobuf field: data.Image ad_image = 8;
     */
    adImage?: Image;
    /**
     * @generated from protobuf field: string im_desc = 9;
     */
    imDesc: string;
}
/**
 * @generated from protobuf message im.LuckyBoxMessage.Extra
 */
export interface LuckyBoxMessage_Extra {
    /**
     * @generated from protobuf field: int32 current_round = 3;
     */
    currentRound: number;
    /**
     * @generated from protobuf field: int32 pct = 4;
     */
    pct: number;
    /**
     * @generated from protobuf field: repeated int64 round_target = 5;
     */
    roundTarget: bigint[];
}
/**
 * @generated from protobuf message im.LuckyBoxMessage.BottomCommentMsg
 */
export interface LuckyBoxMessage_BottomCommentMsg {
    /**
     * @generated from protobuf field: data.Text text = 1;
     */
    text?: Text;
    /**
     * @generated from protobuf field: data.Image background = 2;
     */
    background?: Image;
    /**
     * @generated from protobuf field: data.Image left_icon = 3;
     */
    leftIcon?: Image;
    /**
     * @generated from protobuf field: data.Image right_icon = 4;
     */
    rightIcon?: Image;
}
/**
 * @generated from protobuf message im.LuckyBoxMessage.Dress
 */
export interface LuckyBoxMessage_Dress {
    /**
     * @generated from protobuf field: string dress_id = 1;
     */
    dressId: string;
    /**
     * @generated from protobuf field: int64 dress_offline_time = 2;
     */
    dressOfflineTime: bigint;
    /**
     * @generated from protobuf field: string jump_text = 3;
     */
    jumpText: string;
}
/**
 * @generated from protobuf message im.LuckyBoxEndMessage
 */
export interface LuckyBoxEndMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 box_id = 2;
     */
    boxId: bigint;
    /**
     * @generated from protobuf field: string box_id_str = 3;
     */
    boxIdStr: string;
}
/**
 * @generated from protobuf message im.LuckyMoneyMessage
 */
export interface LuckyMoneyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 luckymoney_id = 3;
     */
    luckymoneyId: bigint;
    /**
     * @generated from protobuf field: int64 diamond_count = 4;
     */
    diamondCount: bigint;
}
/**
 * @generated from protobuf message im.MagicBoxMessage
 */
export interface MagicBoxMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 diamond_count = 2;
     */
    diamondCount: bigint;
    /**
     * @generated from protobuf field: int64 magic_box_id = 3;
     */
    magicBoxId: bigint;
    /**
     * @generated from protobuf field: int64 send_time = 4;
     */
    sendTime: bigint;
    /**
     * @generated from protobuf field: int64 delay_time = 5;
     */
    delayTime: bigint;
    /**
     * @generated from protobuf field: int64 box_type = 6;
     */
    boxType: bigint;
    /**
     * @generated from protobuf field: string title = 7;
     */
    title: string;
    /**
     * @generated from protobuf field: bool large = 8;
     */
    large: boolean;
    /**
     * @generated from protobuf field: data.Image background = 9;
     */
    background?: Image;
    /**
     * @generated from protobuf field: bool is_official = 10;
     */
    isOfficial: boolean;
    /**
     * @generated from protobuf field: int64 priority = 11;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: data.User user = 12;
     */
    user?: User;
    /**
     * @generated from protobuf field: repeated im.MagicBoxMessage.ImgText description_list = 13;
     */
    descriptionList: MagicBoxMessage_ImgText[];
}
/**
 * @generated from protobuf message im.MagicBoxMessage.ImgText
 */
export interface MagicBoxMessage_ImgText {
    /**
     * @generated from protobuf field: data.Image image = 1;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
}
/**
 * @generated from protobuf message im.MediaLiveReplayVidMessage
 */
export interface MediaLiveReplayVidMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string vid = 2;
     */
    vid: string;
}
/**
 * @generated from protobuf message im.MemberMessage
 */
export interface MemberMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 member_count = 3;
     */
    memberCount: bigint;
    /**
     * @generated from protobuf field: data.User operator = 4;
     */
    operator?: User;
    /**
     * @generated from protobuf field: bool is_set_to_admin = 5;
     */
    isSetToAdmin: boolean;
    /**
     * @generated from protobuf field: bool is_top_user = 6;
     */
    isTopUser: boolean;
    /**
     * @generated from protobuf field: int64 rank_score = 7;
     */
    rankScore: bigint;
    /**
     * @generated from protobuf field: int64 top_user_no = 8;
     */
    topUserNo: bigint;
    /**
     * @generated from protobuf field: int64 enter_type = 9;
     */
    enterType: bigint;
    /**
     * @generated from protobuf field: int64 action = 10;
     */
    action: bigint;
    /**
     * @generated from protobuf field: string action_description = 11;
     */
    actionDescription: string;
    /**
     * @generated from protobuf field: int64 user_id = 12;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: im.MemberMessage.EffectConfig effect_config = 13;
     */
    effectConfig?: MemberMessage_EffectConfig;
    /**
     * @generated from protobuf field: string pop_str = 14;
     */
    popStr: string;
    /**
     * @generated from protobuf field: im.MemberMessage.EffectConfig enter_effect_config = 15;
     */
    enterEffectConfig?: MemberMessage_EffectConfig;
    /**
     * @generated from protobuf field: data.Image background_image = 16;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: data.Image background_image_v2 = 17;
     */
    backgroundImageV2?: Image;
    /**
     * @generated from protobuf field: data.Text anchor_display_text = 18;
     */
    anchorDisplayText?: Text;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 19;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: int64 user_enter_tip_type = 20;
     */
    userEnterTipType: bigint;
    /**
     * @generated from protobuf field: int64 anchor_enter_tip_type = 21;
     */
    anchorEnterTipType: bigint;
}
/**
 * @generated from protobuf message im.MemberMessage.EffectConfig
 */
export interface MemberMessage_EffectConfig {
    /**
     * @generated from protobuf field: int64 type = 1;
     */
    type: bigint;
    /**
     * @generated from protobuf field: data.Image icon = 2;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 avatar_pos = 3;
     */
    avatarPos: bigint;
    /**
     * @generated from protobuf field: data.Text text = 4;
     */
    text?: Text;
    /**
     * @generated from protobuf field: data.Image text_icon = 5;
     */
    textIcon?: Image;
    /**
     * @generated from protobuf field: int32 stay_time = 6;
     */
    stayTime: number;
    /**
     * @generated from protobuf field: int64 anim_asset_id = 7;
     */
    animAssetId: bigint;
    /**
     * @generated from protobuf field: data.Image badge = 8;
     */
    badge?: Image;
    /**
     * @generated from protobuf field: repeated int64 flex_setting_array = 9;
     */
    flexSettingArray: bigint[];
    /**
     * @generated from protobuf field: data.Image text_icon_overlay = 10;
     */
    textIconOverlay?: Image;
    /**
     * @generated from protobuf field: data.Image animated_badge = 11;
     */
    animatedBadge?: Image;
    /**
     * @generated from protobuf field: bool has_sweep_light = 12;
     */
    hasSweepLight: boolean;
    /**
     * @generated from protobuf field: repeated int64 text_flex_setting_array = 13;
     */
    textFlexSettingArray: bigint[];
    /**
     * @generated from protobuf field: int64 center_anim_asset_id = 14;
     */
    centerAnimAssetId: bigint;
    /**
     * @generated from protobuf field: data.Image dynamic_image = 15;
     */
    dynamicImage?: Image;
    /**
     * @generated from protobuf field: int64 mp4_anim_asset_id = 17;
     */
    mp4AnimAssetId: bigint;
    /**
     * @generated from protobuf field: int64 priority = 18;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: int64 max_wait_time = 19;
     */
    maxWaitTime: bigint;
    /**
     * @generated from protobuf field: string dress_id = 20;
     */
    dressId: string;
    /**
     * @generated from protobuf field: int64 alignment = 21;
     */
    alignment: bigint;
    /**
     * @generated from protobuf field: int64 alignment_offset = 22;
     */
    alignmentOffset: bigint;
    /**
     * @generated from protobuf field: string effect_scene = 23;
     */
    effectScene: string;
}
/**
 * @generated from protobuf message im.NabobImNoticeMessage
 */
export interface NabobImNoticeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.NobleEnterLeaveMessage
 */
export interface NobleEnterLeaveMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 noble_count = 2;
     */
    nobleCount: bigint;
}
/**
 * @generated from protobuf message im.NobleToastMessage
 */
export interface NobleToastMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.Image toast_icon = 3;
     */
    toastIcon?: Image;
}
/**
 * @generated from protobuf message im.NobleUpgradeMessage
 */
export interface NobleUpgradeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string open_url = 3;
     */
    openUrl: string;
    /**
     * @generated from protobuf field: data.Image background_pop = 4;
     */
    backgroundPop?: Image;
    /**
     * @generated from protobuf field: data.Image background_normal = 5;
     */
    backgroundNormal?: Image;
    /**
     * @generated from protobuf field: int32 display_style = 6;
     */
    displayStyle: number;
    /**
     * @generated from protobuf field: data.GiftIMPriority priority = 7;
     */
    priority?: GiftIMPriority;
}
/**
 * @generated from protobuf message im.NoticeMessage
 */
export interface NoticeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 notice_type = 3;
     */
    noticeType: bigint;
    /**
     * @generated from protobuf field: string style = 4;
     */
    style: string;
    /**
     * @generated from protobuf field: data.Text title = 5;
     */
    title?: Text;
    /**
     * @generated from protobuf field: data.Text violation_reason = 6;
     */
    violationReason?: Text;
    /**
     * @generated from protobuf field: data.Text display_text = 7;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: data.Text tips_title = 8;
     */
    tipsTitle?: Text;
    /**
     * @generated from protobuf field: string tips_url = 9;
     */
    tipsUrl: string;
    /**
     * @generated from protobuf field: data.Text notice_title = 10;
     */
    noticeTitle?: Text;
    /**
     * @generated from protobuf field: data.Text notice_content = 11;
     */
    noticeContent?: Text;
    /**
     * @generated from protobuf field: int64 notice_time = 12;
     */
    noticeTime: bigint;
    /**
     * @generated from protobuf field: string limit_notice_key = 13;
     */
    limitNoticeKey: string;
    /**
     * @generated from protobuf field: data.Text button_confirm = 14;
     */
    buttonConfirm?: Text;
    /**
     * @generated from protobuf field: data.Text button_cancel = 15;
     */
    buttonCancel?: Text;
    /**
     * @generated from protobuf field: string event_name = 16;
     */
    eventName: string;
    /**
     * @generated from protobuf field: string top_icon_url = 17;
     */
    topIconUrl: string;
    /**
     * @generated from protobuf field: string decoration_audited_content = 18;
     */
    decorationAuditedContent: string;
    /**
     * @generated from protobuf field: int64 punish_time = 19;
     */
    punishTime: bigint;
    /**
     * @generated from protobuf field: int64 countdown_time = 20;
     */
    countdownTime: bigint;
    /**
     * @generated from protobuf field: string education_url = 21;
     */
    educationUrl: string;
    /**
     * @generated from protobuf field: int64 education_task_record_id = 22;
     */
    educationTaskRecordId: bigint;
    /**
     * @generated from protobuf field: string log_extra = 23;
     */
    logExtra: string;
}
/**
 * @generated from protobuf message im.NotifyMessage
 */
export interface NotifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string schema = 2;
     */
    schema: string;
    /**
     * @generated from protobuf field: int64 notify_type = 3;
     */
    notifyType: bigint;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: data.User user = 5;
     */
    user?: User;
    /**
     * @generated from protobuf field: im.NotifyMessage.Extra extra = 6;
     */
    extra?: NotifyMessage_Extra;
    /**
     * @generated from protobuf field: int64 notify_class = 7;
     */
    notifyClass: bigint;
    /**
     * @generated from protobuf field: repeated int64 flex_setting = 8;
     */
    flexSetting: bigint[];
    /**
     * @generated from protobuf field: string biz_scene = 100;
     */
    bizScene: string;
}
/**
 * @generated from protobuf message im.NotifyMessage.Background
 */
export interface NotifyMessage_Background {
    /**
     * @generated from protobuf field: int32 width = 1;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 2;
     */
    height: number;
    /**
     * @generated from protobuf field: repeated string url_list = 3;
     */
    urlList: string[];
    /**
     * @generated from protobuf field: string uri = 4;
     */
    uri: string;
}
/**
 * @generated from protobuf message im.NotifyMessage.Content
 */
export interface NotifyMessage_Content {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: bool need_high_light = 2;
     */
    needHighLight: boolean;
}
/**
 * @generated from protobuf message im.NotifyMessage.ContentList
 */
export interface NotifyMessage_ContentList {
    /**
     * @generated from protobuf field: repeated im.NotifyMessage.Content contents = 1;
     */
    contents: NotifyMessage_Content[];
    /**
     * @generated from protobuf field: string high_light_color = 2;
     */
    highLightColor: string;
}
/**
 * @generated from protobuf message im.NotifyMessage.Extra
 */
export interface NotifyMessage_Extra {
    /**
     * @generated from protobuf field: int64 duration = 1;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: im.NotifyMessage.Background background = 2;
     */
    background?: NotifyMessage_Background;
    /**
     * @generated from protobuf field: im.NotifyMessage.ContentList content_list = 3;
     */
    contentList?: NotifyMessage_ContentList;
    /**
     * @generated from protobuf field: bool need_gift_frequency = 6;
     */
    needGiftFrequency: boolean;
}
/**
 * @generated from protobuf message im.OChannelAnchorMessage
 */
export interface OChannelAnchorMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 start_timestamp = 2;
     */
    startTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 end_timestamp = 3;
     */
    endTimestamp: bigint;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 room_id = 5;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: data.User channel_user = 6;
     */
    channelUser?: User;
}
/**
 * @generated from protobuf message im.OChannelUserMessage
 */
export interface OChannelUserMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 start_timestamp = 2;
     */
    startTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 end_timestamp = 3;
     */
    endTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 max_enter_time = 4;
     */
    maxEnterTime: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 5;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 max_next_time = 6;
     */
    maxNextTime: bigint;
}
/**
 * @generated from protobuf message im.OChannelModifyMessage
 */
export interface OChannelModifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 start_timestamp = 2;
     */
    startTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 end_timestamp = 3;
     */
    endTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 channel_uid = 4;
     */
    channelUid: bigint;
    /**
     * @generated from protobuf field: string showlist_schema = 5;
     */
    showlistSchema: string;
}
/**
 * @generated from protobuf message im.OChannelLastestShowMessage
 */
export interface OChannelLastestShowMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 start_ts = 2;
     */
    startTs: bigint;
    /**
     * @generated from protobuf field: string showlist_schema = 5;
     */
    showlistSchema: string;
}
/**
 * @generated from protobuf message im.OChannelGrabMicShowMessage
 */
export interface OChannelGrabMicShowMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 show_id = 2;
     */
    showId: bigint;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 start_timestamp = 4;
     */
    startTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 end_timestamp = 5;
     */
    endTimestamp: bigint;
    /**
     * @generated from protobuf field: data.User channel_user = 6;
     */
    channelUser?: User;
    /**
     * @generated from protobuf field: string showlist_name = 7;
     */
    showlistName: string;
}
/**
 * @generated from protobuf message im.PopularCardMessage
 */
export interface PopularCardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.PopularCardMessage.PopularCardInfo popular_card_info = 2;
     */
    popularCardInfo?: PopularCardMessage_PopularCardInfo;
}
/**
 * @generated from protobuf message im.PopularCardMessage.PopularCardInfo
 */
export interface PopularCardMessage_PopularCardInfo {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 3;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 enter_number = 4;
     */
    enterNumber: number;
}
/**
 * @generated from protobuf message im.PortalMessage
 */
export interface PortalMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 type = 2;
     */
    type: bigint;
    /**
     * @generated from protobuf field: int64 portal_id = 3;
     */
    portalId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 4;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: im.PortalBuy portal_buy = 5;
     */
    portalBuy?: PortalBuy;
    /**
     * @generated from protobuf field: im.PortalInvite portal_invite = 6;
     */
    portalInvite?: PortalInvite;
    /**
     * @generated from protobuf field: im.PortalFinish portal_finish = 7;
     */
    portalFinish?: PortalFinish;
    /**
     * @generated from protobuf field: data.Portal portal = 8;
     */
    portal?: Portal;
    /**
     * @generated from protobuf field: int64 next_ping_time = 9;
     */
    nextPingTime: bigint;
}
/**
 * @generated from protobuf message im.PortalBuy
 */
export interface PortalBuy {
    /**
     * @generated from protobuf field: data.User sugar_daddy = 1;
     */
    sugarDaddy?: User;
}
/**
 * @generated from protobuf message im.PortalInvite
 */
export interface PortalInvite {
    /**
     * @generated from protobuf field: int64 invite_count_down = 1;
     */
    inviteCountDown: bigint;
    /**
     * @generated from protobuf field: int64 reward_count_down = 2;
     */
    rewardCountDown: bigint;
    /**
     * @generated from protobuf field: data.User sugar_daddy = 3;
     */
    sugarDaddy?: User;
    /**
     * @generated from protobuf field: data.User anchor = 4;
     */
    anchor?: User;
    /**
     * @generated from protobuf field: data.Image cover = 5;
     */
    cover?: Image;
}
/**
 * @generated from protobuf message im.PortalFinish
 */
export interface PortalFinish {
    /**
     * @generated from protobuf field: data.User lucky_person = 1;
     */
    luckyPerson?: User;
}
/**
 * @generated from protobuf message im.PropertyNoticeMessage
 */
export interface PropertyNoticeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 property_event_type = 4;
     */
    propertyEventType: bigint;
}
/**
 * @generated from protobuf message im.PushMessage
 */
export interface PushMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: string traceid = 4;
     */
    traceid: string;
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string action_content = 6;
     */
    actionContent: string;
    /**
     * @generated from protobuf field: int64 action_type = 7;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: int64 push_message_display_time = 8;
     */
    pushMessageDisplayTime: bigint;
    /**
     * @generated from protobuf field: im.FlexImageStruct background_image = 9;
     */
    backgroundImage?: FlexImageStruct;
    /**
     * @generated from protobuf field: data.Image action_icon = 10;
     */
    actionIcon?: Image;
    /**
     * @generated from protobuf field: im.FlexImageStruct new_background_image = 11;
     */
    newBackgroundImage?: FlexImageStruct;
    /**
     * @generated from protobuf field: string source = 12;
     */
    source: string;
}
/**
 * @generated from protobuf message im.FansclubV1PushMessage
 */
export interface FansclubV1PushMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: string traceid = 4;
     */
    traceid: string;
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string action_content = 6;
     */
    actionContent: string;
    /**
     * @generated from protobuf field: int64 action_type = 7;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: int64 push_message_display_time = 8;
     */
    pushMessageDisplayTime: bigint;
    /**
     * @generated from protobuf field: im.FlexImageStruct background_image = 9;
     */
    backgroundImage?: FlexImageStruct;
    /**
     * @generated from protobuf field: data.Image action_icon = 10;
     */
    actionIcon?: Image;
    /**
     * @generated from protobuf field: im.FlexImageStruct new_background_image = 11;
     */
    newBackgroundImage?: FlexImageStruct;
    /**
     * @generated from protobuf field: string source = 12;
     */
    source: string;
}
/**
 * @generated from protobuf message im.QuizStartMessage
 */
export interface QuizStartMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Text display_text = 2;
     */
    displayText?: Text;
}
/**
 * @generated from protobuf message im.QuizResult
 */
export interface QuizResult {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: data.Text result = 2;
     */
    result?: Text;
    /**
     * @generated from protobuf field: data.Text gain = 3;
     */
    gain?: Text;
}
/**
 * @generated from protobuf message im.QuizResultMessage
 */
export interface QuizResultMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.QuizResult quiz_result = 3;
     */
    quizResult?: QuizResult;
}
/**
 * @generated from protobuf message im.QuizChangeData
 */
export interface QuizChangeData {
    /**
     * @generated from protobuf field: int64 quiz_id = 1;
     */
    quizId: bigint;
    /**
     * @generated from protobuf field: int64 status = 2;
     */
    status: bigint;
    /**
     * @generated from protobuf field: repeated data.BetOption options = 4;
     */
    options: BetOption[];
}
/**
 * @generated from protobuf message im.QuizChangeMessage
 */
export interface QuizChangeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.QuizChangeData quiz_change_data = 2;
     */
    quizChangeData: QuizChangeData[];
}
/**
 * @generated from protobuf message im.CreateRedPacketMessage
 */
export interface CreateRedPacketMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.RedPacket red_packets = 2;
     */
    redPackets: RedPacket[];
}
/**
 * @generated from protobuf message im.RushRedPacketMessage
 */
export interface RushRedPacketMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.RedPacketRushRecord red_packet_rush_records = 2;
     */
    redPacketRushRecords: RedPacketRushRecord[];
}
/**
 * @generated from protobuf message im.RedPacketRushRecord
 */
export interface RedPacketRushRecord {
    /**
     * @generated from protobuf field: int64 red_packet_group_id = 1;
     */
    redPacketGroupId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string user_name = 3;
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 bonus_count = 4;
     */
    bonusCount: bigint;
    /**
     * @generated from protobuf field: int64 bonus_type = 5;
     */
    bonusType: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 6;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: string im_text = 7;
     */
    imText: string;
    /**
     * @generated from protobuf field: int64 create_time = 8;
     */
    createTime: bigint;
}
/**
 * @generated from protobuf message im.RedPacket
 */
export interface RedPacket {
    /**
     * @generated from protobuf field: int64 red_packet_group_id = 1;
     */
    redPacketGroupId: bigint;
    /**
     * @generated from protobuf field: int64 bonus_type = 2;
     */
    bonusType: bigint;
    /**
     * @generated from protobuf field: int64 combo_count = 3;
     */
    comboCount: bigint;
    /**
     * @generated from protobuf field: int64 bonus_count = 4;
     */
    bonusCount: bigint;
    /**
     * @generated from protobuf field: int64 count_down = 5;
     */
    countDown: bigint;
    /**
     * @generated from protobuf field: int64 rush_time = 6;
     */
    rushTime: bigint;
    /**
     * @generated from protobuf field: string icon_url = 7;
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: int64 disappear_time = 8;
     */
    disappearTime: bigint;
    /**
     * @generated from protobuf field: data.User owner = 9;
     */
    owner?: User;
    /**
     * @generated from protobuf field: int64 total_count_down = 10;
     */
    totalCountDown: bigint;
    /**
     * @generated from protobuf field: string red_packet_source = 11;
     */
    redPacketSource: string;
}
/**
 * @generated from protobuf message im.PushRoomAdCard
 */
export interface PushRoomAdCard {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string action_content = 2;
     */
    actionContent: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 target_num = 4;
     */
    targetNum: bigint;
    /**
     * @generated from protobuf field: int64 show_num = 5;
     */
    showNum: bigint;
    /**
     * @generated from protobuf field: bool is_finished = 6;
     */
    isFinished: boolean;
    /**
     * @generated from protobuf field: int32 adcard_type = 7;
     */
    adcardType: number;
    /**
     * @generated from protobuf field: int32 hotvalue = 8;
     */
    hotvalue: number;
}
/**
 * @generated from protobuf message im.RoomAuthMessage
 */
export interface RoomAuthMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool show_user_card = 2;
     */
    showUserCard: boolean;
}
/**
 * @generated from protobuf message im.RoomBottomMessage
 */
export interface RoomBottomMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: string action_content = 6;
     */
    actionContent: string;
    /**
     * @generated from protobuf field: int64 action_type = 7;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: int64 push_message_display_time = 8;
     */
    pushMessageDisplayTime: bigint;
    /**
     * @generated from protobuf field: data.Image action_icon = 10;
     */
    actionIcon?: Image;
    /**
     * @generated from protobuf field: im.FlexImageStruct new_background_image = 11;
     */
    newBackgroundImage?: FlexImageStruct;
    /**
     * @generated from protobuf field: string source = 12;
     */
    source: string;
}
/**
 * @generated from protobuf message im.RoomChallengeMessage
 */
export interface RoomChallengeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string challenge_info = 2;
     */
    challengeInfo: string;
    /**
     * @generated from protobuf field: int64 notify_type = 3;
     */
    notifyType: bigint;
    /**
     * @generated from protobuf field: string toast_content = 4;
     */
    toastContent: string;
}
/**
 * @generated from protobuf message im.RoomHotSentenceMessage
 */
export interface RoomHotSentenceMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string hot_sentence_info = 2;
     */
    hotSentenceInfo: string;
}
/**
 * @generated from protobuf message im.RoomImgMessage
 */
export interface RoomImgMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 action = 3;
     */
    action: bigint;
    /**
     * @generated from protobuf field: string bg_img_url = 4;
     */
    bgImgUrl: string;
}
/**
 * @generated from protobuf message im.RoomManageMessage
 */
export interface RoomManageMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 action = 3;
     */
    action: bigint;
    /**
     * @generated from protobuf field: int64 member_count = 4;
     */
    memberCount: bigint;
    /**
     * @generated from protobuf field: int64 popularity = 5;
     */
    popularity: bigint;
    /**
     * @generated from protobuf field: string popularity_str = 6;
     */
    popularityStr: string;
    /**
     * @generated from protobuf field: int64 device_id = 7;
     */
    deviceId: bigint;
    /**
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
/**
 * @generated from protobuf message im.RoomStartMessage
 */
export interface RoomStartMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string image_url = 3;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: int32 instation_push_type = 4;
     */
    instationPushType: number;
}
/**
 * @generated from protobuf message im.RoomUserSeqMessage
 */
export interface RoomUserSeqMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.RoomUserSeqMessage.Contributor ranks = 2;
     */
    ranks: RoomUserSeqMessage_Contributor[];
    /**
     * @generated from protobuf field: int64 total = 3;
     */
    total: bigint;
    /**
     * @generated from protobuf field: string pop_str = 4;
     */
    popStr: string;
    /**
     * @generated from protobuf field: repeated im.RoomUserSeqMessage.Contributor seats = 5;
     */
    seats: RoomUserSeqMessage_Contributor[];
    /**
     * @generated from protobuf field: int64 popularity = 6;
     */
    popularity: bigint;
    /**
     * @generated from protobuf field: int64 total_user = 7;
     */
    totalUser: bigint;
    /**
     * @generated from protobuf field: string total_user_str = 8;
     */
    totalUserStr: string;
    /**
     * @generated from protobuf field: string total_str = 9;
     */
    totalStr: string;
    /**
     * @generated from protobuf field: string online_user_for_anchor = 10;
     */
    onlineUserForAnchor: string;
    /**
     * @generated from protobuf field: string total_pv_for_anchor = 11;
     */
    totalPvForAnchor: string;
    /**
     * @generated from protobuf field: string up_right_stats_str = 12;
     */
    upRightStatsStr: string;
    /**
     * @generated from protobuf field: string up_right_stats_str_complete = 13;
     */
    upRightStatsStrComplete: string;
}
/**
 * @generated from protobuf message im.RoomUserSeqMessage.Contributor
 */
export interface RoomUserSeqMessage_Contributor {
    /**
     * @generated from protobuf field: int64 score = 1;
     */
    score: bigint;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 rank = 3;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: int64 delta = 4;
     */
    delta: bigint;
    /**
     * @generated from protobuf field: bool is_hidden = 5;
     */
    isHidden: boolean;
    /**
     * @generated from protobuf field: string score_description = 6;
     */
    scoreDescription: string;
    /**
     * @generated from protobuf field: string exactly_score = 7;
     */
    exactlyScore: string;
}
/**
 * @generated from protobuf message im.RoomVerifyMessage
 */
export interface RoomVerifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 action = 2;
     */
    action: number;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 notice_type = 4;
     */
    noticeType: bigint;
    /**
     * @generated from protobuf field: bool close_room = 5;
     */
    closeRoom: boolean;
    /**
     * @generated from protobuf field: int32 unable_style = 6;
     */
    unableStyle: number;
    /**
     * @generated from protobuf field: string tip_content = 7;
     */
    tipContent: string;
    /**
     * @generated from protobuf field: int32 anchor_switch = 8;
     */
    anchorSwitch: number;
    /**
     * @generated from protobuf field: string switch_status_tip_msg = 9;
     */
    switchStatusTipMsg: string;
    /**
     * @generated from protobuf field: string switch_status_anchor_tip_msg = 10;
     */
    switchStatusAnchorTipMsg: string;
}
/**
 * @generated from protobuf message im.RoomMessage
 */
export interface RoomMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: bool supprot_landscape = 3;
     */
    supprotLandscape: boolean;
    /**
     * @generated from protobuf field: int32 roomMessageType = 4;
     */
    roomMessageType: number;
    /**
     * @generated from protobuf field: bool system_top_msg = 5;
     */
    systemTopMsg: boolean;
    /**
     * @generated from protobuf field: bool forced_guarantee = 6;
     */
    forcedGuarantee: boolean;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 7;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: string biz_scene = 20;
     */
    bizScene: string;
}
/**
 * @generated from protobuf message im.ScreenChatMessage
 */
export interface ScreenChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 screen_chat_type = 3;
     */
    screenChatType: bigint;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 priority = 5;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: im.ScreenChatMessage.Effect effect = 6;
     */
    effect?: ScreenChatMessage_Effect;
    /**
     * @generated from protobuf field: data.Image background_image = 7;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: im.ScreenChatMessage.Effect effect_v2 = 8;
     */
    effectV2?: ScreenChatMessage_Effect;
    /**
     * @generated from protobuf field: data.Image background_image_v2 = 9;
     */
    backgroundImageV2?: Image;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 10;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: im.ScreenChatMessage.OfficialCommentConfig official_comment_config = 11;
     */
    officialCommentConfig?: ScreenChatMessage_OfficialCommentConfig;
    /**
     * @generated from protobuf field: int64 event_time = 12;
     */
    eventTime: bigint;
    /**
     * @generated from protobuf field: bool send_review = 13;
     */
    sendReview: boolean;
    /**
     * @generated from protobuf field: data.ChatIdentity chat_identity_info = 14;
     */
    chatIdentityInfo?: ChatIdentity;
    /**
     * @generated from protobuf field: data.Text rtf_content = 30;
     */
    rtfContent?: Text;
    /**
     * @generated from protobuf field: bool public_area_does_not_display = 31;
     */
    publicAreaDoesNotDisplay: boolean;
    /**
     * @generated from protobuf field: data.Text rtf_content_v2 = 32;
     */
    rtfContentV2?: Text;
}
/**
 * @generated from protobuf message im.ScreenChatMessage.OfficialCommentConfig
 */
export interface ScreenChatMessage_OfficialCommentConfig {
    /**
     * @generated from protobuf field: bool official = 1;
     */
    official: boolean;
}
/**
 * @generated from protobuf message im.ScreenChatMessage.Effect
 */
export interface ScreenChatMessage_Effect {
    /**
     * @generated from protobuf field: im.FlexImageStruct icon = 1;
     */
    icon?: FlexImageStruct;
    /**
     * @generated from protobuf field: data.Image avatar_icon = 2;
     */
    avatarIcon?: Image;
    /**
     * @generated from protobuf field: string background_color = 3;
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message im.ShareGuideMessage
 */
export interface ShareGuideMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string share_channel = 2;
     */
    shareChannel: string;
}
/**
 * @generated from protobuf message im.SocialMessage
 */
export interface SocialMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 share_type = 3;
     */
    shareType: bigint;
    /**
     * @generated from protobuf field: int64 action = 4;
     */
    action: bigint;
    /**
     * @generated from protobuf field: string share_target = 5;
     */
    shareTarget: string;
    /**
     * @generated from protobuf field: int64 follow_count = 6;
     */
    followCount: bigint;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 7;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.SpecialPushMessage
 */
export interface SpecialPushMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: string traceid = 4;
     */
    traceid: string;
    /**
     * @generated from protobuf field: data.Image icon = 5;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string action_content = 6;
     */
    actionContent: string;
    /**
     * @generated from protobuf field: int64 action_type = 7;
     */
    actionType: bigint;
    /**
     * @generated from protobuf field: int64 push_message_display_time = 8;
     */
    pushMessageDisplayTime: bigint;
}
/**
 * @generated from protobuf message im.UpdateKoiRoomStatusMessage
 */
export interface UpdateKoiRoomStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Image director_icon = 2;
     */
    directorIcon?: Image;
    /**
     * @generated from protobuf field: int32 cur_round_index = 3;
     */
    curRoundIndex: number;
    /**
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
    /**
     * @generated from protobuf field: string director_schema_url = 5;
     */
    directorSchemaUrl: string;
}
/**
 * @generated from protobuf message im.StampMessage
 */
export interface StampMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.StampInfo stamps = 2;
     */
    stamps: StampInfo[];
}
/**
 * @generated from protobuf message im.AudienceEntranceMessage
 */
export interface AudienceEntranceMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.AudienceEntranceInfo entrances = 2;
     */
    entrances: AudienceEntranceInfo[];
}
/**
 * @generated from protobuf message im.CustomizedCardMessage
 */
export interface CustomizedCardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.CustomizedCardInfo card = 2;
     */
    card?: CustomizedCardInfo;
    /**
     * @generated from protobuf field: string app_id = 3;
     */
    appId: string;
    /**
     * @generated from protobuf field: string start_id = 4;
     */
    startId: string;
    /**
     * @generated from protobuf field: int32 scene_source = 5;
     */
    sceneSource: number;
}
/**
 * @generated from protobuf message im.GameCardMessage
 */
export interface GameCardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.GameCardInfo card = 2;
     */
    card?: GameCardInfo;
    /**
     * @generated from protobuf field: string app_id = 3;
     */
    appId: string;
    /**
     * @generated from protobuf field: string start_id = 4;
     */
    startId: string;
}
/**
 * @generated from protobuf message im.MicroAppShelfMessage
 */
export interface MicroAppShelfMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.ShelfInfo shelf_info = 2;
     */
    shelfInfo?: ShelfInfo;
}
/**
 * @generated from protobuf message im.SunDailyRankMessage
 */
export interface SunDailyRankMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: string after_content = 4;
     */
    afterContent: string;
    /**
     * @generated from protobuf field: int64 message_type = 5;
     */
    messageType: bigint;
    /**
     * @generated from protobuf field: string schema = 6;
     */
    schema: string;
    /**
     * @generated from protobuf field: string extra = 7;
     */
    extra: string;
    /**
     * @generated from protobuf field: string style = 8;
     */
    style: string;
    /**
     * @generated from protobuf field: data.Text after_display_text = 9;
     */
    afterDisplayText?: Text;
    /**
     * @generated from protobuf field: int64 rank = 10;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: string rich_content = 11;
     */
    richContent: string;
    /**
     * @generated from protobuf field: string user_side_content = 12;
     */
    userSideContent: string;
    /**
     * @generated from protobuf field: int64 content_type = 13;
     */
    contentType: bigint;
    /**
     * @generated from protobuf field: string city_code = 14;
     */
    cityCode: string;
    /**
     * @generated from protobuf field: int32 rank_stage = 15;
     */
    rankStage: number;
    /**
     * @generated from protobuf field: repeated im.SunDailyRankMessage.RankInfo ranks = 16;
     */
    ranks: SunDailyRankMessage_RankInfo[];
    /**
     * @generated from protobuf field: int64 begin_time = 17;
     */
    beginTime: bigint;
    /**
     * @generated from protobuf field: int64 delta_time = 18;
     */
    deltaTime: bigint;
    /**
     * @generated from protobuf field: data.Text entrance_appearing_text = 19;
     */
    entranceAppearingText?: Text;
    /**
     * @generated from protobuf field: data.Text display_text_v2 = 20;
     */
    displayTextV2?: Text;
    /**
     * @generated from protobuf field: data.Text after_display_text_v2 = 21;
     */
    afterDisplayTextV2?: Text;
    /**
     * @generated from protobuf field: int64 duration_v2 = 22;
     */
    durationV2: bigint;
}
/**
 * @generated from protobuf message im.SunDailyRankMessage.RankInfo
 */
export interface SunDailyRankMessage_RankInfo {
    /**
     * @generated from protobuf field: int64 rank_type = 1;
     */
    rankType: bigint;
    /**
     * @generated from protobuf field: int64 rank = 2;
     */
    rank: bigint;
}
/**
 * @generated from protobuf message im.SystemMessage
 */
export interface SystemMessage {
    /**
     * @generated from protobuf field: im.SystemMessage.Common common = 1;
     */
    common?: SystemMessage_Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.SystemMessage.Common
 */
export interface SystemMessage_Common {
    /**
     * @generated from protobuf field: string method = 1;
     */
    method: string;
    /**
     * @generated from protobuf field: int64 msg_id = 2;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 3;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: int64 create_time = 4;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int32 monitor = 5;
     */
    monitor: number;
}
/**
 * @generated from protobuf message im.BubbleConfig
 */
export interface BubbleConfig {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: data.Text rich_text = 3;
     */
    richText?: Text;
    /**
     * @generated from protobuf field: string scheme_url = 4;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: im.FlexImageStruct background_image = 5;
     */
    backgroundImage?: FlexImageStruct;
    /**
     * @generated from protobuf field: data.Image arrow_image = 6;
     */
    arrowImage?: Image;
}
/**
 * @generated from protobuf message im.ToolbarItemBehaviourParam
 */
export interface ToolbarItemBehaviourParam {
    /**
     * @generated from protobuf field: int32 behaviour_type = 1;
     */
    behaviourType: number;
    /**
     * @generated from protobuf field: string values = 2;
     */
    values: string;
}
/**
 * @generated from protobuf message im.ToolbarItemBehaviourParams
 */
export interface ToolbarItemBehaviourParams {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: repeated im.ToolbarItemBehaviourParam params = 2;
     */
    params: ToolbarItemBehaviourParam[];
}
/**
 * @generated from protobuf message im.ToolbarItemMessage
 */
export interface ToolbarItemMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 toolbar_item_id = 2;
     */
    toolbarItemId: number;
    /**
     * @generated from protobuf field: int32 action_type = 3;
     */
    actionType: number;
    /**
     * @generated from protobuf field: im.BubbleConfig bubble_config = 4;
     */
    bubbleConfig?: BubbleConfig;
    /**
     * @generated from protobuf field: int32 message_type = 6;
     */
    messageType: number;
    /**
     * @generated from protobuf field: im.ToolbarItemBehaviourParams behaviour_params = 7;
     */
    behaviourParams?: ToolbarItemBehaviourParams;
}
/**
 * @generated from protobuf message im.TurntableBurstMessage
 */
export interface TurntableBurstMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 burst_time_remain_seconds = 2;
     */
    burstTimeRemainSeconds: bigint;
    /**
     * @generated from protobuf field: int64 multiple = 3;
     */
    multiple: bigint;
    /**
     * @generated from protobuf field: int64 property_definition_id = 4;
     */
    propertyDefinitionId: bigint;
    /**
     * @generated from protobuf field: data.Image property_icon = 5;
     */
    propertyIcon?: Image;
}
/**
 * @generated from protobuf message im.UploadCoverMessage
 */
export interface UploadCoverMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 msg_type = 2;
     */
    msgType: bigint;
    /**
     * @generated from protobuf field: data.Text title = 3;
     */
    title?: Text;
    /**
     * @generated from protobuf field: data.Text content = 4;
     */
    content?: Text;
    /**
     * @generated from protobuf field: data.Text tips_title = 5;
     */
    tipsTitle?: Text;
    /**
     * @generated from protobuf field: string tips_url = 6;
     */
    tipsUrl: string;
    /**
     * @generated from protobuf field: int64 cover_type = 7;
     */
    coverType: bigint;
}
/**
 * @generated from protobuf message im.UserStatsMessage
 */
export interface UserStatsMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 action_type = 4;
     */
    actionType: bigint;
}
/**
 * @generated from protobuf message im.VerificationCodeMessage
 */
export interface VerificationCodeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 id = 2;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
}
/**
 * @generated from protobuf message im.VIPInfoMessage
 */
export interface VIPInfoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.UserVIPInfo user_vip_info = 2;
     */
    userVipInfo?: UserVIPInfo;
    /**
     * @generated from protobuf field: int64 action = 3;
     */
    action: bigint;
}
/**
 * @generated from protobuf message im.VIPSeatMessage
 */
export interface VIPSeatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.User top_users = 2;
     */
    topUsers: User[];
    /**
     * @generated from protobuf field: int64 total_count = 3;
     */
    totalCount: bigint;
}
/**
 * @generated from protobuf message im.WebcastBattleBonusMessage
 */
export interface WebcastBattleBonusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.WebcastBattleBonusMessage.MvpMessage mvp_info = 2;
     */
    mvpInfo?: WebcastBattleBonusMessage_MvpMessage;
    /**
     * @generated from protobuf field: repeated im.WebcastBattleBonusMessage.PlayerMessage player_list = 3;
     */
    playerList: WebcastBattleBonusMessage_PlayerMessage[];
}
/**
 * @generated from protobuf message im.WebcastBattleBonusMessage.MvpMessage
 */
export interface WebcastBattleBonusMessage_MvpMessage {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: data.PropSummary prop_info = 3;
     */
    propInfo?: PropSummary;
}
/**
 * @generated from protobuf message im.WebcastBattleBonusMessage.PlayerMessage
 */
export interface WebcastBattleBonusMessage_PlayerMessage {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 diamond_count = 3;
     */
    diamondCount: bigint;
}
/**
 * @generated from protobuf message im.WebcastBattlePropertyMessage
 */
export interface WebcastBattlePropertyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.WebcastBattlePropertyMessage.RoomPropDesc room_prop_list = 2;
     */
    roomPropList: WebcastBattlePropertyMessage_RoomPropDesc[];
}
/**
 * @generated from protobuf message im.WebcastBattlePropertyMessage.RoomPropDesc
 */
export interface WebcastBattlePropertyMessage_RoomPropDesc {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: repeated data.PropSummary prop_desc_list = 2;
     */
    propDescList: PropSummary[];
}
/**
 * @generated from protobuf message im.WebcastBattlePropertyMessage.RoomPropDesc.PropertyDesc
 */
export interface WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc {
    /**
     * @generated from protobuf field: data.PropSummary prop_info = 1;
     */
    propInfo?: PropSummary;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 from_user_id = 4;
     */
    fromUserId: bigint;
}
/**
 * @generated from protobuf message im.WebcastPopularCardMessage
 */
export interface WebcastPopularCardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.WebcastPopularCardMessage.PopularCardInfo popular_card_info = 2;
     */
    popularCardInfo?: WebcastPopularCardMessage_PopularCardInfo;
}
/**
 * @generated from protobuf message im.WebcastPopularCardMessage.PopularCardInfo
 */
export interface WebcastPopularCardMessage_PopularCardInfo {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 3;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int32 enter_number = 4;
     */
    enterNumber: number;
}
/**
 * @generated from protobuf message im.VideoLiveGoodsRcmdMessage
 */
export interface VideoLiveGoodsRcmdMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 rcmd_goods_id = 2;
     */
    rcmdGoodsId: bigint;
}
/**
 * @generated from protobuf message im.VideoLiveCouponRcmdMessage
 */
export interface VideoLiveCouponRcmdMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 rcmd_coupon_id = 2;
     */
    rcmdCouponId: bigint;
}
/**
 * @generated from protobuf message im.VideoLiveGoodsOrderMessage
 */
export interface VideoLiveGoodsOrderMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: im.VideoLiveGoodsOrderMessage.GoodsOrder goods_order = 3;
     */
    goodsOrder?: VideoLiveGoodsOrderMessage_GoodsOrder;
}
/**
 * @generated from protobuf message im.VideoLiveGoodsOrderMessage.GoodsOrder
 */
export interface VideoLiveGoodsOrderMessage_GoodsOrder {
    /**
     * @generated from protobuf field: int64 goods_room_order = 1;
     */
    goodsRoomOrder: bigint;
    /**
     * @generated from protobuf field: int64 order_num = 2;
     */
    orderNum: bigint;
    /**
     * @generated from protobuf field: int64 order_money = 3;
     */
    orderMoney: bigint;
    /**
     * @generated from protobuf field: string order_id = 4;
     */
    orderId: string;
}
/**
 * @generated from protobuf message im.RankListAwardMessage
 */
export interface RankListAwardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 asset_id = 2;
     */
    assetId: bigint;
    /**
     * @generated from protobuf field: bool effect_open = 3;
     */
    effectOpen: boolean;
    /**
     * @generated from protobuf field: int64 rank_type = 4;
     */
    rankType: bigint;
    /**
     * @generated from protobuf field: int64 rank = 5;
     */
    rank: bigint;
    /**
     * @generated from protobuf field: data.BattleStarActivityGradeMedal star_activity_grade_medal = 6;
     */
    starActivityGradeMedal?: BattleStarActivityGradeMedal;
    /**
     * @generated from protobuf field: string scheme_url = 7;
     */
    schemeUrl: string;
    /**
     * @generated from protobuf field: data.Image asset_image = 8;
     */
    assetImage?: Image;
    /**
     * @generated from protobuf field: int32 play_priority = 9;
     */
    playPriority: number;
    /**
     * @generated from protobuf field: data.Text text = 10;
     */
    text?: Text;
}
/**
 * @generated from protobuf message im.MatchAgainstScoreMessage
 */
export interface MatchAgainstScoreMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Against against = 2;
     */
    against?: Against;
    /**
     * @generated from protobuf field: int32 match_status = 3;
     */
    matchStatus: number;
    /**
     * @generated from protobuf field: int32 display_status = 4;
     */
    displayStatus: number;
    /**
     * @generated from protobuf field: int64 match_id = 5;
     */
    matchId: bigint;
    /**
     * @generated from protobuf field: string match_id_str = 6;
     */
    matchIdStr: string;
}
/**
 * @generated from protobuf message im.MatchCollectionMessage
 */
export interface MatchCollectionMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.CollectionItem collection_item = 2;
     */
    collectionItem?: CollectionItem;
}
/**
 * @generated from protobuf message im.MatchHighLightPointMessage
 */
export interface MatchHighLightPointMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.EpisodeHighLight points = 2;
     */
    points: EpisodeHighLight[];
}
/**
 * @generated from protobuf message im.MatchHostChangeMessage
 */
export interface MatchHostChangeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 team_id = 2;
     */
    teamId: bigint;
    /**
     * @generated from protobuf field: string team_name = 3;
     */
    teamName: string;
    /**
     * @generated from protobuf field: string schema_url = 4;
     */
    schemaUrl: string;
    /**
     * @generated from protobuf field: data.Image team_icon = 5;
     */
    teamIcon?: Image;
    /**
     * @generated from protobuf field: data.Image team_badge = 6;
     */
    teamBadge?: Image;
    /**
     * @generated from protobuf field: data.Image team_background = 7;
     */
    teamBackground?: Image;
    /**
     * @generated from protobuf field: string system_msg = 8;
     */
    systemMsg: string;
}
/**
 * @generated from protobuf message im.MatchHotMessage
 */
export interface MatchHotMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 msg_type = 2;
     */
    msgType: number;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 count = 4;
     */
    count: bigint;
    /**
     * @generated from protobuf field: int64 sequence_id = 5;
     */
    sequenceId: bigint;
    /**
     * @generated from protobuf field: int32 group = 6;
     */
    group: number;
    /**
     * @generated from protobuf field: int64 IconIndex = 7 [json_name = "IconIndex"];
     */
    iconIndex: bigint;
    /**
     * @generated from protobuf field: int64 TriggerTimestamp = 8 [json_name = "TriggerTimestamp"];
     */
    triggerTimestamp: bigint;
}
/**
 * @generated from protobuf message im.VideoSize
 */
export interface VideoSize {
    /**
     * @generated from protobuf field: int32 Height = 1 [json_name = "Height"];
     */
    height: number;
    /**
     * @generated from protobuf field: int32 Width = 2 [json_name = "Width"];
     */
    width: number;
}
/**
 * @generated from protobuf message im.Avatar
 */
export interface Avatar {
    /**
     * @generated from protobuf field: string url_big = 1;
     */
    urlBig: string;
    /**
     * @generated from protobuf field: string url_mid = 2;
     */
    urlMid: string;
    /**
     * @generated from protobuf field: string url_small = 3;
     */
    urlSmall: string;
}
/**
 * @generated from protobuf message im.Team
 */
export interface Team {
    /**
     * @generated from protobuf field: string team_name = 1;
     */
    teamName: string;
    /**
     * @generated from protobuf field: string country_code = 2;
     */
    countryCode: string;
    /**
     * @generated from protobuf field: int32 score = 3;
     */
    score: number;
    /**
     * @generated from protobuf field: string flag = 4;
     */
    flag: string;
    /**
     * @generated from protobuf field: string team_id = 5;
     */
    teamId: string;
    /**
     * @generated from protobuf field: int32 score_addition = 6;
     */
    scoreAddition: number;
}
/**
 * @generated from protobuf message im.VenueInfo
 */
export interface VenueInfo {
    /**
     * @generated from protobuf field: int32 stage = 1;
     */
    stage: number;
    /**
     * @generated from protobuf field: int64 target_time = 2;
     */
    targetTime: bigint;
    /**
     * @generated from protobuf field: int64 current_time = 3;
     */
    currentTime: bigint;
    /**
     * @generated from protobuf field: string room_id = 4;
     */
    roomId: string;
    /**
     * @generated from protobuf field: int64 polling_interval = 5;
     */
    pollingInterval: bigint;
    /**
     * @generated from protobuf field: int64 update_time = 6;
     */
    updateTime: bigint;
    /**
     * @generated from protobuf field: int64 distribute_time = 7;
     */
    distributeTime: bigint;
}
/**
 * @generated from protobuf message im.VideoCard
 */
export interface VideoCard {
    /**
     * @generated from protobuf field: int32 card_type = 1;
     */
    cardType: number;
    /**
     * @generated from protobuf field: string cover_url = 2;
     */
    coverUrl: string;
    /**
     * @generated from protobuf field: string schema = 3;
     */
    schema: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 5;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string uid = 6;
     */
    uid: string;
    /**
     * @generated from protobuf field: string rid = 7;
     */
    rid: string;
    /**
     * @generated from protobuf field: string epid = 8;
     */
    epid: string;
    /**
     * @generated from protobuf field: string tag = 9;
     */
    tag: string;
    /**
     * @generated from protobuf field: string creator_id = 10;
     */
    creatorId: string;
    /**
     * @generated from protobuf field: im.VideoSize size = 11;
     */
    size?: VideoSize;
    /**
     * @generated from protobuf field: string background_url = 12;
     */
    backgroundUrl: string;
    /**
     * @generated from protobuf field: string card_id = 13;
     */
    cardId: string;
    /**
     * @generated from protobuf field: string video_resource = 14;
     */
    videoResource: string;
    /**
     * @generated from protobuf field: int32 link_type = 15;
     */
    linkType: number;
}
/**
 * @generated from protobuf message im.MatchCard
 */
export interface MatchCard {
    /**
     * @generated from protobuf field: int32 match_type = 1;
     */
    matchType: number;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: string start_time = 5;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string uid = 6;
     */
    uid: string;
    /**
     * @generated from protobuf field: im.Team team_left = 7;
     */
    teamLeft?: Team;
    /**
     * @generated from protobuf field: im.Team team_right = 8;
     */
    teamRight?: Team;
    /**
     * @generated from protobuf field: bool reserved = 9;
     */
    reserved: boolean;
    /**
     * @generated from protobuf field: string schema = 10;
     */
    schema: string;
    /**
     * @generated from protobuf field: string epid = 11;
     */
    epid: string;
    /**
     * @generated from protobuf field: string reservation_id = 12;
     */
    reservationId: string;
    /**
     * @generated from protobuf field: string card_id = 13;
     */
    cardId: string;
    /**
     * @generated from protobuf field: string room_id = 14;
     */
    roomId: string;
    /**
     * @generated from protobuf field: string match_id = 15;
     */
    matchId: string;
}
/**
 * @generated from protobuf message im.Profile
 */
export interface Profile {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: im.Avatar avatar_url = 2;
     */
    avatarUrl?: Avatar;
    /**
     * @generated from protobuf field: string nick_name = 3;
     */
    nickName: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: bool followed = 5;
     */
    followed: boolean;
    /**
     * @generated from protobuf field: int64 start_time = 6;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: string room_id = 7;
     */
    roomId: string;
    /**
     * @generated from protobuf field: string uid = 8;
     */
    uid: string;
    /**
     * @generated from protobuf field: string reservation_id = 9;
     */
    reservationId: string;
    /**
     * @generated from protobuf field: string card_id = 10;
     */
    cardId: string;
    /**
     * @generated from protobuf field: int64 follow_count = 12;
     */
    followCount: bigint;
    /**
     * @generated from protobuf field: int32 color = 13;
     */
    color: number;
    /**
     * @generated from protobuf field: int64 src_id = 14;
     */
    srcId: bigint;
}
/**
 * @generated from protobuf message im.StarProfile
 */
export interface StarProfile {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: im.Avatar avatar_url = 2;
     */
    avatarUrl?: Avatar;
    /**
     * @generated from protobuf field: string nick_name = 3;
     */
    nickName: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: bool followed = 5;
     */
    followed: boolean;
    /**
     * @generated from protobuf field: string room_id = 6;
     */
    roomId: string;
    /**
     * @generated from protobuf field: string uid = 7;
     */
    uid: string;
    /**
     * @generated from protobuf field: int64 start_time = 8;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: string reservation_id = 9;
     */
    reservationId: string;
    /**
     * @generated from protobuf field: string card_id = 10;
     */
    cardId: string;
    /**
     * @generated from protobuf field: int64 follow_count = 11;
     */
    followCount: bigint;
    /**
     * @generated from protobuf field: int32 color = 12;
     */
    color: number;
}
/**
 * @generated from protobuf message im.HotVideoCard
 */
export interface HotVideoCard {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string cover_url = 2;
     */
    coverUrl: string;
    /**
     * @generated from protobuf field: string schema = 3;
     */
    schema: string;
    /**
     * @generated from protobuf field: string card_id = 4;
     */
    cardId: string;
    /**
     * @generated from protobuf field: string sub_title = 5;
     */
    subTitle: string;
}
/**
 * @generated from protobuf message im.VideoCardModule
 */
export interface VideoCardModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: int32 update_type = 3;
     */
    updateType: number;
    /**
     * @generated from protobuf field: repeated im.VideoCard update_list = 4;
     */
    updateList: VideoCard[];
    /**
     * @generated from protobuf field: repeated string delete_list = 5;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.MatchReservationModule
 */
export interface MatchReservationModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: int32 update_type = 3;
     */
    updateType: number;
    /**
     * @generated from protobuf field: repeated im.MatchCard update_list = 4;
     */
    updateList: MatchCard[];
    /**
     * @generated from protobuf field: repeated string delete_list = 5;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.FootballTalkingModule
 */
export interface FootballTalkingModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: int32 update_type = 3;
     */
    updateType: number;
    /**
     * @generated from protobuf field: repeated im.Profile update_list = 4;
     */
    updateList: Profile[];
    /**
     * @generated from protobuf field: repeated string delete_list = 5;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.PopularStarModule
 */
export interface PopularStarModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: int32 update_type = 3;
     */
    updateType: number;
    /**
     * @generated from protobuf field: repeated im.StarProfile update_list = 4;
     */
    updateList: StarProfile[];
    /**
     * @generated from protobuf field: repeated string delete_list = 5;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.HotLiveModule
 */
export interface HotLiveModule {
    /**
     * @generated from protobuf field: int64 module_id = 1;
     */
    moduleId: bigint;
    /**
     * @generated from protobuf field: int64 module_version = 2;
     */
    moduleVersion: bigint;
    /**
     * @generated from protobuf field: int32 update_type = 3;
     */
    updateType: number;
    /**
     * @generated from protobuf field: repeated im.HotVideoCard update_list = 4;
     */
    updateList: HotVideoCard[];
    /**
     * @generated from protobuf field: repeated string delete_list = 5;
     */
    deleteList: string[];
}
/**
 * @generated from protobuf message im.MatchVenueMessage
 */
export interface MatchVenueMessage {
    /**
     * @generated from protobuf field: im.VideoCardModule video_card = 1;
     */
    videoCard?: VideoCardModule;
    /**
     * @generated from protobuf field: im.MatchReservationModule match_reservation = 2;
     */
    matchReservation?: MatchReservationModule;
    /**
     * @generated from protobuf field: im.FootballTalkingModule football_talking = 3;
     */
    footballTalking?: FootballTalkingModule;
    /**
     * @generated from protobuf field: im.PopularStarModule popular_star = 4;
     */
    popularStar?: PopularStarModule;
    /**
     * @generated from protobuf field: im.HotLiveModule hot_live = 5;
     */
    hotLive?: HotLiveModule;
    /**
     * @generated from protobuf field: im.VenueInfo venue_info = 6;
     */
    venueInfo?: VenueInfo;
    /**
     * @generated from protobuf field: im.MatchReservationModule team_reservation = 7;
     */
    teamReservation?: MatchReservationModule;
    /**
     * @generated from protobuf field: im.Common common = 8;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.MediaRoomNoticeMessage
 */
export interface MediaRoomNoticeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string intro = 2;
     */
    intro: string;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: bool review_pass = 4;
     */
    reviewPass: boolean;
    /**
     * @generated from protobuf field: string review_fail_text = 5;
     */
    reviewFailText: string;
    /**
     * @generated from protobuf field: string notice_title = 6;
     */
    noticeTitle: string;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 7;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.MotorCustomMessage
 */
export interface MotorCustomMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string image = 4;
     */
    image: string;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
    /**
     * @generated from protobuf field: repeated im.MotorCustomMessage.Data data = 6;
     */
    data: MotorCustomMessage_Data[];
}
/**
 * @generated from protobuf message im.MotorCustomMessage.Data
 */
export interface MotorCustomMessage_Data {
    /**
     * @generated from protobuf field: string image = 1;
     */
    image: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.AuctionMessage
 */
export interface AuctionMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string extra = 2;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.AuctionPublicScreenMessageExtra
 */
export interface AuctionPublicScreenMessageExtra {
    /**
     * @generated from protobuf field: string im_type = 1;
     */
    imType: string;
    /**
     * @generated from protobuf field: repeated im.AuctionPublicScreenMessageExtra.AuctionIMBody core_data = 2;
     */
    coreData: AuctionPublicScreenMessageExtra_AuctionIMBody[];
}
/**
 * @generated from protobuf message im.AuctionPublicScreenMessageExtra.AuctionIMBody
 */
export interface AuctionPublicScreenMessageExtra_AuctionIMBody {
    /**
     * @generated from protobuf field: int64 role_type = 1;
     */
    roleType: bigint;
    /**
     * @generated from protobuf field: bool is_bid = 2;
     */
    isBid: boolean;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: data.MysteryUserInfo user_info = 4;
     */
    userInfo?: MysteryUserInfo;
}
/**
 * @generated from protobuf message im.AuctionRankMessageExtra
 */
export interface AuctionRankMessageExtra {
    /**
     * @generated from protobuf field: string im_type = 1;
     */
    imType: string;
    /**
     * @generated from protobuf field: repeated data.MysteryRankUserItem rank_user_items = 2;
     */
    rankUserItems: MysteryRankUserItem[];
    /**
     * @generated from protobuf field: int64 entry_price = 3;
     */
    entryPrice: bigint;
    /**
     * @generated from protobuf field: int64 total_score = 4;
     */
    totalScore: bigint;
}
/**
 * @generated from protobuf message im.AuctionStartMessageExtra
 */
export interface AuctionStartMessageExtra {
    /**
     * @generated from protobuf field: string im_type = 1;
     */
    imType: string;
}
/**
 * @generated from protobuf message im.AuctionSettleMessageExtra
 */
export interface AuctionSettleMessageExtra {
    /**
     * @generated from protobuf field: string im_type = 1;
     */
    imType: string;
    /**
     * @generated from protobuf field: repeated string top_user_ids = 2;
     */
    topUserIds: string[];
    /**
     * @generated from protobuf field: int64 entry_price = 3;
     */
    entryPrice: bigint;
    /**
     * @generated from protobuf field: int64 top_price = 4;
     */
    topPrice: bigint;
    /**
     * @generated from protobuf field: int64 participate_num = 5;
     */
    participateNum: bigint;
    /**
     * @generated from protobuf field: repeated im.AuctionSettleMessageExtra.RewardUserInfo reward_user_info = 6;
     */
    rewardUserInfo: AuctionSettleMessageExtra_RewardUserInfo[];
}
/**
 * @generated from protobuf message im.AuctionSettleMessageExtra.RewardUserInfo
 */
export interface AuctionSettleMessageExtra_RewardUserInfo {
    /**
     * @generated from protobuf field: data.MysteryUserInfo user_info = 1;
     */
    userInfo?: MysteryUserInfo;
    /**
     * @generated from protobuf field: int64 score = 2;
     */
    score: bigint;
}
/**
 * @generated from protobuf message im.NotifyEffectMessage
 */
export interface NotifyEffectMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.Image icons = 2;
     */
    icons: Image[];
    /**
     * @generated from protobuf field: data.Text text = 3;
     */
    text?: Text;
    /**
     * @generated from protobuf field: im.NotifyEffectMessage.Background background = 4;
     */
    background?: NotifyEffectMessage_Background;
    /**
     * @generated from protobuf field: im.NotifyEffectMessage.DynamicConfig dynamic_config = 5;
     */
    dynamicConfig?: NotifyEffectMessage_DynamicConfig;
    /**
     * @generated from protobuf field: data.CombinedText text_v2 = 6;
     */
    textV2?: CombinedText;
    /**
     * @generated from protobuf field: bool support_landscape = 7;
     */
    supportLandscape: boolean;
    /**
     * @generated from protobuf field: im.NotifyEffectMessage.SceneConfig scene_config = 10;
     */
    sceneConfig?: NotifyEffectMessage_SceneConfig;
}
/**
 * @generated from protobuf message im.NotifyEffectMessage.Background
 */
export interface NotifyEffectMessage_Background {
    /**
     * @generated from protobuf field: data.Image background_image = 1;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: string background_color = 10;
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message im.NotifyEffectMessage.DynamicConfig
 */
export interface NotifyEffectMessage_DynamicConfig {
    /**
     * @generated from protobuf field: int32 stay_time = 1;
     */
    stayTime: number;
    /**
     * @generated from protobuf field: int32 max_stay_time = 2;
     */
    maxStayTime: number;
    /**
     * @generated from protobuf field: int32 display_effect_type = 3;
     */
    displayEffectType: number;
}
/**
 * @generated from protobuf message im.NotifyEffectMessage.SceneConfig
 */
export interface NotifyEffectMessage_SceneConfig {
    /**
     * @generated from protobuf field: string scene = 1;
     */
    scene: string;
    /**
     * @generated from protobuf field: int64 priority = 2;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: bool need_aggregate = 3;
     */
    needAggregate: boolean;
    /**
     * @generated from protobuf field: int64 aggregate_num = 4;
     */
    aggregateNum: bigint;
    /**
     * @generated from protobuf field: data.Text aggregate_text = 5;
     */
    aggregateText?: Text;
    /**
     * @generated from protobuf field: string sub_scene = 6;
     */
    subScene: string;
    /**
     * @generated from protobuf field: int64 max_wait_time = 7;
     */
    maxWaitTime: bigint;
}
/**
 * @generated from protobuf message im.PaidLiveDataMessage
 */
export interface PaidLiveDataMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.PaidBusinessData paid_business_data = 2;
     */
    paidBusinessData?: PaidBusinessData;
}
/**
 * @generated from protobuf message im.PaidBusinessData
 */
export interface PaidBusinessData {
    /**
     * @generated from protobuf field: int64 ret_type = 1;
     */
    retType: bigint;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int32 delivery = 3;
     */
    delivery: number;
    /**
     * @generated from protobuf field: int64 id = 4;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int32 id_type = 5;
     */
    idType: number;
    /**
     * @generated from protobuf field: int64 ticket_id = 6;
     */
    ticketId: bigint;
    /**
     * @generated from protobuf field: int64 ticket_sku_id = 7;
     */
    ticketSkuId: bigint;
    /**
     * @generated from protobuf field: int32 purchase_paid_live_type = 9;
     */
    purchasePaidLiveType: number;
}
/**
 * @generated from protobuf message im.PaidLiveTypeModifyMessage
 */
export interface PaidLiveTypeModifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.PaidLiveTypeModifyData paid_live_type_modify_data = 2;
     */
    paidLiveTypeModifyData?: PaidLiveTypeModifyData;
}
/**
 * @generated from protobuf message im.PaidLiveTypeModifyData
 */
export interface PaidLiveTypeModifyData {
    /**
     * @generated from protobuf field: int64 room_id = 1;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: data.PrivilegeInfo data = 2;
     */
    data?: PrivilegeInfo;
    /**
     * @generated from protobuf field: int32 operator_type = 3;
     */
    operatorType: number;
}
/**
 * @generated from protobuf message im.PkActivePush
 */
export interface PkActivePush {
    /**
     * @generated from protobuf field: im.PkActivePush.Matcher matcher_r = 1;
     */
    matcherR?: PkActivePush_Matcher;
    /**
     * @generated from protobuf field: string match_reason = 2;
     */
    matchReason: string;
    /**
     * @generated from protobuf field: int64 wait_seconds = 3;
     */
    waitSeconds: bigint;
    /**
     * @generated from protobuf field: string sign_extra = 4;
     */
    signExtra: string;
    /**
     * @generated from protobuf field: data.VoteSetting vote_data = 5;
     */
    voteData?: VoteSetting;
    /**
     * @generated from protobuf field: string battle_attached_info = 19;
     */
    battleAttachedInfo: string;
}
/**
 * @generated from protobuf message im.PkActivePush.Matcher
 */
export interface PkActivePush_Matcher {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Room room = 2;
     */
    room?: Room;
    /**
     * @generated from protobuf field: repeated data.BattleRivalTag tags = 3;
     */
    tags: BattleRivalTag[];
}
/**
 * @generated from protobuf message im.PkActivePushMessage
 */
export interface PkActivePushMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.PkActivePush pk_active_push = 2;
     */
    pkActivePush?: PkActivePush;
}
/**
 * @generated from protobuf message im.PKIconBubbleMessage
 */
export interface PKIconBubbleMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.PKIconBubble bubble_info = 2;
     */
    bubbleInfo?: PKIconBubble;
}
/**
 * @generated from protobuf message im.PKIconBubble
 */
export interface PKIconBubble {
    /**
     * @generated from protobuf field: data.Image display_icon = 1;
     */
    displayIcon?: Image;
    /**
     * @generated from protobuf field: data.Text display_text = 2;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: string schema = 3;
     */
    schema: string;
    /**
     * @generated from protobuf field: int32 bubble_type = 4;
     */
    bubbleType: number;
    /**
     * @generated from protobuf field: string activity_name = 5;
     */
    activityName: string;
    /**
     * @generated from protobuf field: int64 show_time = 6;
     */
    showTime: bigint;
    /**
     * @generated from protobuf field: int64 show_count = 7;
     */
    showCount: bigint;
}
/**
 * @generated from protobuf message im.PlatformAdviseMessage
 */
export interface PlatformAdviseMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Text advise_text = 2;
     */
    adviseText?: Text;
    /**
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 priority = 4;
     */
    priority: bigint;
}
/**
 * @generated from protobuf message im.PrivilegeScreenChatMessage
 */
export interface PrivilegeScreenChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 4;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: int64 style = 5;
     */
    style: bigint;
    /**
     * @generated from protobuf field: int64 activity_danmu_background = 6;
     */
    activityDanmuBackground: bigint;
    /**
     * @generated from protobuf field: data.Text rtf_content = 7;
     */
    rtfContent?: Text;
    /**
     * @generated from protobuf field: data.Text rtf_content_v2 = 8;
     */
    rtfContentV2?: Text;
}
/**
 * @generated from protobuf message im.PrivilegeVoiceWaveMessage
 */
export interface PrivilegeVoiceWaveMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Image low_img = 3;
     */
    lowImg?: Image;
    /**
     * @generated from protobuf field: data.Image medium_img = 4;
     */
    mediumImg?: Image;
    /**
     * @generated from protobuf field: data.Image high_img = 5;
     */
    highImg?: Image;
    /**
     * @generated from protobuf field: int64 dress_id = 6;
     */
    dressId: bigint;
}
/**
 * @generated from protobuf message im.ProfileViewMessage
 */
export interface ProfileViewMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Text title = 2;
     */
    title?: Text;
    /**
     * @generated from protobuf field: data.Text sub_title = 3;
     */
    subTitle?: Text;
    /**
     * @generated from protobuf field: int64 show_duration = 4;
     */
    showDuration: bigint;
    /**
     * @generated from protobuf field: int32 source = 5;
     */
    source: number;
}
/**
 * @generated from protobuf message im.ProfitGameMessage
 */
export interface ProfitGameMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 game_id = 2;
     */
    gameId: bigint;
    /**
     * @generated from protobuf field: bytes frames = 3;
     */
    frames: Uint8Array;
}
/**
 * @generated from protobuf message im.ProfitInteractionScoreAnchorInfo
 */
export interface ProfitInteractionScoreAnchorInfo {
    /**
     * @generated from protobuf field: string score = 1;
     */
    score: string;
    /**
     * @generated from protobuf field: data.ProfitInteractionSetting interaction_setting = 2;
     */
    interactionSetting?: ProfitInteractionSetting;
    /**
     * @generated from protobuf field: bool reach_score_display_threshold = 3;
     */
    reachScoreDisplayThreshold: boolean;
}
/**
 * @generated from protobuf message im.ProfitInteractionScoreMessage
 */
export interface ProfitInteractionScoreMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 interaction_score_status = 3;
     */
    interactionScoreStatus: number;
    /**
     * @generated from protobuf field: int64 channel_id = 4;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 5;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int32 interaction_score_action = 6;
     */
    interactionScoreAction: number;
    /**
     * @generated from protobuf field: string extra = 7;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.VsProgrammeStateControlMessage
 */
export interface VsProgrammeStateControlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string pID = 2;
     */
    pID: string;
    /**
     * @generated from protobuf field: int32 state = 3;
     */
    state: number;
    /**
     * @generated from protobuf field: repeated im.VsProgrammeStateControlMessage.PlayBackInfo playBackInfo_list = 4;
     */
    playBackInfoList: VsProgrammeStateControlMessage_PlayBackInfo[];
}
/**
 * @generated from protobuf message im.VsProgrammeStateControlMessage.PlayBackInfo
 */
export interface VsProgrammeStateControlMessage_PlayBackInfo {
    /**
     * @generated from protobuf field: string pID = 1;
     */
    pID: string;
    /**
     * @generated from protobuf field: string StartTime = 2 [json_name = "StartTime"];
     */
    startTime: string;
}
/**
 * @generated from protobuf message im.PromptMessage
 */
export interface PromptMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: data.User user = 3;
     */
    user?: User;
    /**
     * @generated from protobuf field: int32 duration = 4;
     */
    duration: number;
}
/**
 * @generated from protobuf message im.PropsBGImgMessage
 */
export interface PropsBGImgMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.PropsBGData bg = 2;
     */
    bg?: PropsBGData;
    /**
     * @generated from protobuf field: int32 ReviewStatus = 3 [json_name = "ReviewStatus"];
     */
    reviewStatus: number;
    /**
     * @generated from protobuf field: string Prompts = 4 [json_name = "Prompts"];
     */
    prompts: string;
}
/**
 * @generated from protobuf message im.PullStreamUpdateMessage
 */
export interface PullStreamUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 push_stream_level = 2;
     */
    pushStreamLevel: number;
    /**
     * @generated from protobuf field: int32 random_seconds = 3;
     */
    randomSeconds: number;
}
/**
 * @generated from protobuf message im.Word
 */
export interface Word {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
}
/**
 * @generated from protobuf message im.QuickComment
 */
export interface QuickComment {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.Word words = 2;
     */
    words: Word[];
    /**
     * @generated from protobuf field: int32 duration = 3;
     */
    duration: number;
}
/**
 * @generated from protobuf message im.AllQuizInfo
 */
export interface AllQuizInfo {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 startTime = 3;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: int64 duration = 4;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 status = 5;
     */
    status: bigint;
}
/**
 * @generated from protobuf message im.QuizBeginMessage
 */
export interface QuizBeginMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 quizID = 2;
     */
    quizID: bigint;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated im.AllQuizInfo quizInfos = 4;
     */
    quizInfos: AllQuizInfo[];
    /**
     * @generated from protobuf field: int64 errorCode = 5;
     */
    errorCode: bigint;
    /**
     * @generated from protobuf field: string extra = 6;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.QuizBetMessage
 */
export interface QuizBetMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 quiz_id = 2;
     */
    quizId: bigint;
}
/**
 * @generated from protobuf message im.QuizAnchorStatusMessage
 */
export interface QuizAnchorStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.AnchorHistoryItem items = 2;
     */
    items: AnchorHistoryItem[];
}
/**
 * @generated from protobuf message im.QuizAudienceStatusMessage
 */
export interface QuizAudienceStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.Quiz quiz_list = 2;
     */
    quizList: Quiz[];
}
/**
 * @generated from protobuf message im.RankListHourEnterMessage
 */
export interface RankListHourEnterMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.RankEnterInfo hour_enter_info = 2;
     */
    hourEnterInfo?: RankEnterInfo;
}
/**
 * @generated from protobuf message im.RanklistHourEntranceMessage
 */
export interface RanklistHourEntranceMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.RanklistHourEntrance info = 2;
     */
    info?: RanklistHourEntrance;
}
/**
 * @generated from protobuf message im.RealTimePlayBackMessage
 */
export interface RealTimePlayBackMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool realtime_playback_enabled = 2;
     */
    realtimePlaybackEnabled: boolean;
    /**
     * @generated from protobuf field: string reason = 3;
     */
    reason: string;
    /**
     * @generated from protobuf field: string message_text = 4;
     */
    messageText: string;
}
/**
 * @generated from protobuf message im.RoomAppConfigMessage
 */
export interface RoomAppConfigMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.AnchorFaceConfig anchor_face_config = 2;
     */
    anchorFaceConfig?: AnchorFaceConfig;
}
/**
 * @generated from protobuf message im.AnchorFaceConfig
 */
export interface AnchorFaceConfig {
    /**
     * @generated from protobuf field: bool contour_enable = 1;
     */
    contourEnable: boolean;
    /**
     * @generated from protobuf field: int64 frequency = 2;
     */
    frequency: bigint;
    /**
     * @generated from protobuf field: int64 user_count = 3;
     */
    userCount: bigint;
}
/**
 * @generated from protobuf message im.RoomAuthInterventionVerifyMessage
 */
export interface RoomAuthInterventionVerifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: int32 unableStyle = 4;
     */
    unableStyle: number;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: string switch_status_tip_msg = 6;
     */
    switchStatusTipMsg: string;
    /**
     * @generated from protobuf field: string switch_status_anchor_tip_msg = 7;
     */
    switchStatusAnchorTipMsg: string;
}
/**
 * @generated from protobuf message im.RoomBackgroundMessage
 */
export interface RoomBackgroundMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Image room_background = 2;
     */
    roomBackground?: Image;
}
/**
 * @generated from protobuf message im.RoomChannelAccessMessage
 */
export interface RoomChannelAccessMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.User inviter = 3;
     */
    inviter?: User;
}
/**
 * @generated from protobuf message im.RoomChannelAssetMessage
 */
export interface RoomChannelAssetMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 asset_id = 2;
     */
    assetId: bigint;
}
/**
 * @generated from protobuf message im.RoomChannelChatMessage
 */
export interface RoomChannelChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: data.Text rtf_content = 4;
     */
    rtfContent?: Text;
    /**
     * @generated from protobuf field: int32 show_identity = 5;
     */
    showIdentity: number;
    /**
     * @generated from protobuf field: bool mention = 6;
     */
    mention: boolean;
    /**
     * @generated from protobuf field: data.Text rtf_content_v2 = 7;
     */
    rtfContentV2?: Text;
}
/**
 * @generated from protobuf message im.RoomChannelEmojiChatMessage
 */
export interface RoomChannelEmojiChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 emoji_id = 3;
     */
    emojiId: bigint;
    /**
     * @generated from protobuf field: data.Text emoji_content = 4;
     */
    emojiContent?: Text;
    /**
     * @generated from protobuf field: string default_content = 5;
     */
    defaultContent: string;
    /**
     * @generated from protobuf field: int32 show_identity = 6;
     */
    showIdentity: number;
}
/**
 * @generated from protobuf message im.RoomChannelInteractiveEmojiChatMessage
 */
export interface RoomChannelInteractiveEmojiChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string interactive_emoji_display_name = 3;
     */
    interactiveEmojiDisplayName: string;
    /**
     * @generated from protobuf field: string default_content = 4;
     */
    defaultContent: string;
    /**
     * @generated from protobuf field: int32 show_identity = 5;
     */
    showIdentity: number;
}
/**
 * @generated from protobuf message im.RoomChannelDisbandMessage
 */
export interface RoomChannelDisbandMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.RoomChannelGiftMessage
 */
export interface RoomChannelGiftMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: data.Text rtf_content = 3;
     */
    rtfContent?: Text;
}
/**
 * @generated from protobuf message im.RoomChannelKickOutMessage
 */
export interface RoomChannelKickOutMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
    /**
     * @generated from protobuf field: repeated data.RoomChannelInfo online_channel_list = 3;
     */
    onlineChannelList: RoomChannelInfo[];
}
/**
 * @generated from protobuf message im.ReplyRoomChannelMessage
 */
export interface ReplyRoomChannelMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool permit = 2;
     */
    permit: boolean;
    /**
     * @generated from protobuf field: data.RoomChannelInfo channel_info = 3;
     */
    channelInfo?: RoomChannelInfo;
    /**
     * @generated from protobuf field: string toast = 4;
     */
    toast: string;
}
/**
 * @generated from protobuf message im.RoomChannelSaveGroupMessage
 */
export interface RoomChannelSaveGroupMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string con_id = 2;
     */
    conId: string;
}
/**
 * @generated from protobuf message im.RoomChannelStateMessage
 */
export interface RoomChannelStateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 member_count = 2;
     */
    memberCount: bigint;
    /**
     * @generated from protobuf field: repeated data.User top_user_list = 3;
     */
    topUserList: User[];
    /**
     * @generated from protobuf field: string channel_name = 4;
     */
    channelName: string;
    /**
     * @generated from protobuf field: data.User need_approval_user = 5;
     */
    needApprovalUser?: User;
    /**
     * @generated from protobuf field: data.User owner = 6;
     */
    owner?: User;
}
/**
 * @generated from protobuf message im.RoomChannelSystemMessage
 */
export interface RoomChannelSystemMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.RoomChannelRoleMessage
 */
export interface RoomChannelRoleMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 new_role = 2;
     */
    newRole: number;
}
/**
 * @generated from protobuf message im.RoomConfigMessage
 */
export interface RoomConfigMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string config_info = 2;
     */
    configInfo: string;
    /**
     * @generated from protobuf field: int64 config_type = 3;
     */
    configType: bigint;
}
/**
 * @generated from protobuf message im.RoomDataSyncMessage
 */
export interface RoomDataSyncMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 roomID = 2;
     */
    roomID: bigint;
    /**
     * @generated from protobuf field: string syncKey = 3;
     */
    syncKey: string;
    /**
     * @generated from protobuf field: int64 version = 4;
     */
    version: bigint;
    /**
     * @generated from protobuf field: bytes payload = 5;
     */
    payload: Uint8Array;
    /**
     * @generated from protobuf field: string bizLogID = 6;
     */
    bizLogID: string;
}
/**
 * @generated from protobuf message im.RoomIntroMessage
 */
export interface RoomIntroMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 style = 3;
     */
    style: bigint;
    /**
     * @generated from protobuf field: string intro = 4;
     */
    intro: string;
    /**
     * @generated from protobuf field: repeated string label = 5;
     */
    label: string[];
    /**
     * @generated from protobuf field: int64 intro_video_item_id = 6;
     */
    introVideoItemId: bigint;
    /**
     * @generated from protobuf field: string intro_video_title = 7;
     */
    introVideoTitle: string;
    /**
     * @generated from protobuf field: repeated data.RoomIntroLabel selected_labels = 8;
     */
    selectedLabels: RoomIntroLabel[];
    /**
     * @generated from protobuf field: repeated data.RoomIntroLabel intro_labels = 9;
     */
    introLabels: RoomIntroLabel[];
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 10;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.RoomRankMessage
 */
export interface RoomRankMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.RoomRankMessage.RoomRank ranks = 2;
     */
    ranks: RoomRankMessage_RoomRank[];
}
/**
 * @generated from protobuf message im.RoomRankMessage.RoomRank
 */
export interface RoomRankMessage_RoomRank {
    /**
     * @generated from protobuf field: data.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string score_str = 2;
     */
    scoreStr: string;
    /**
     * @generated from protobuf field: bool profile_hidden = 3;
     */
    profileHidden: boolean;
}
/**
 * @generated from protobuf message im.RoomStatsMessage
 */
export interface RoomStatsMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string display_short = 2;
     */
    displayShort: string;
    /**
     * @generated from protobuf field: string display_middle = 3;
     */
    displayMiddle: string;
    /**
     * @generated from protobuf field: string display_long = 4;
     */
    displayLong: string;
    /**
     * @generated from protobuf field: int64 display_value = 5;
     */
    displayValue: bigint;
    /**
     * @generated from protobuf field: int64 display_version = 6;
     */
    displayVersion: bigint;
    /**
     * @generated from protobuf field: bool incremental = 7;
     */
    incremental: boolean;
    /**
     * @generated from protobuf field: bool is_hidden = 8;
     */
    isHidden: boolean;
    /**
     * @generated from protobuf field: int64 total = 9;
     */
    total: bigint;
    /**
     * @generated from protobuf field: int64 display_type = 10;
     */
    displayType: bigint;
}
/**
 * @generated from protobuf message im.RoomTicketMessage
 */
export interface RoomTicketMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 action_type = 2;
     */
    actionType: number;
    /**
     * @generated from protobuf field: int32 last_duration = 3;
     */
    lastDuration: number;
    /**
     * @generated from protobuf field: int64 ticket_id = 4;
     */
    ticketId: bigint;
    /**
     * @generated from protobuf field: string ticket_explanation_card_jump_url = 5;
     */
    ticketExplanationCardJumpUrl: string;
    /**
     * @generated from protobuf field: string ticket_panel_jump_url = 6;
     */
    ticketPanelJumpUrl: string;
    /**
     * @generated from protobuf field: string ticket_panel_6_jump_url = 7;
     */
    ticketPanel6JumpUrl: string;
    /**
     * @generated from protobuf field: string ticket_panel_9_jump_url = 8;
     */
    ticketPanel9JumpUrl: string;
    /**
     * @generated from protobuf field: int64 owner_id = 9;
     */
    ownerId: bigint;
}
/**
 * @generated from protobuf message im.RoomTopMessage
 */
export interface RoomTopMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Image action_icon = 2;
     */
    actionIcon?: Image;
    /**
     * @generated from protobuf field: im.Background background = 3;
     */
    background?: Background;
    /**
     * @generated from protobuf field: int64 fold_duration = 4;
     */
    foldDuration: bigint;
    /**
     * @generated from protobuf field: int64 display_duration = 5;
     */
    displayDuration: bigint;
    /**
     * @generated from protobuf field: data.Text first_title = 6;
     */
    firstTitle?: Text;
    /**
     * @generated from protobuf field: data.Text second_title = 7;
     */
    secondTitle?: Text;
}
/**
 * @generated from protobuf message im.Background
 */
export interface Background {
    /**
     * @generated from protobuf field: string background_color = 1;
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message im.RoomUnionLiveMessage
 */
export interface RoomUnionLiveMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.UnionLiveInfo union_live_info = 2;
     */
    unionLiveInfo?: UnionLiveInfo;
}
/**
 * @generated from protobuf message im.SharePosterMessage
 */
export interface SharePosterMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.SharePosterMessage.PosterData data = 2;
     */
    data?: SharePosterMessage_PosterData;
}
/**
 * @generated from protobuf message im.SharePosterMessage.PosterData
 */
export interface SharePosterMessage_PosterData {
    /**
     * @generated from protobuf field: repeated data.Image poster = 1;
     */
    poster: Image[];
    /**
     * @generated from protobuf field: repeated data.Image decorator = 2;
     */
    decorator: Image[];
}
/**
 * @generated from protobuf message im.ShortTouchAreaMessage
 */
export interface ShortTouchAreaMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 message_type = 2;
     */
    messageType: number;
    /**
     * @generated from protobuf field: data.ShortTouchArea short_touch_area_data = 3;
     */
    shortTouchAreaData?: ShortTouchArea;
}
/**
 * @generated from protobuf message im.ShowChatMessage
 */
export interface ShowChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 episode_id = 2;
     */
    episodeId: bigint;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 agree_msg_id = 4;
     */
    agreeMsgId: bigint;
    /**
     * @generated from protobuf field: bool visible_to_sender = 5;
     */
    visibleToSender: boolean;
    /**
     * @generated from protobuf field: int32 priority_level = 6;
     */
    priorityLevel: number;
    /**
     * @generated from protobuf field: int32 effect_type = 7;
     */
    effectType: number;
    /**
     * @generated from protobuf field: data.User user = 20;
     */
    user?: User;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 30;
     */
    publicAreaCommon?: PublicAreaCommon;
    /**
     * @generated from protobuf field: im.LandscapeAreaCommon landscape_area_common = 31;
     */
    landscapeAreaCommon?: LandscapeAreaCommon;
    /**
     * @generated from protobuf field: data.Image background_image = 40;
     */
    backgroundImage?: Image;
    /**
     * @generated from protobuf field: repeated string font_color_value = 41;
     */
    fontColorValue: string[];
    /**
     * @generated from protobuf field: data.Image gift_image = 42;
     */
    giftImage?: Image;
    /**
     * @generated from protobuf field: im.OfficialCommentConfig official_comment_config = 43;
     */
    officialCommentConfig?: OfficialCommentConfig;
    /**
     * @generated from protobuf field: im.CommentRoleConfig comment_role = 44;
     */
    commentRole?: CommentRoleConfig;
    /**
     * @generated from protobuf field: data.CommentMedal medal = 45;
     */
    medal?: CommentMedal;
    /**
     * @generated from protobuf field: int32 vs_message_type = 46;
     */
    vsMessageType: number;
}
/**
 * @generated from protobuf message im.OfficialCommentConfig
 */
export interface OfficialCommentConfig {
    /**
     * @generated from protobuf field: string background_color = 1;
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message im.CommentRoleConfig
 */
export interface CommentRoleConfig {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: data.Image avatar = 2;
     */
    avatar?: Image;
}
/**
 * @generated from protobuf message im.ShowDouPlusNotifyMessage
 */
export interface ShowDouPlusNotifyMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 event_type = 2;
     */
    eventType: number;
    /**
     * @generated from protobuf field: int64 order_id = 10;
     */
    orderId: bigint;
    /**
     * @generated from protobuf field: string order_wish_word = 11;
     */
    orderWishWord: string;
    /**
     * @generated from protobuf field: int64 enter_count = 30;
     */
    enterCount: bigint;
}
/**
 * @generated from protobuf message im.ShowEffectMessage
 */
export interface ShowEffectMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool flash_operating_place = 2;
     */
    flashOperatingPlace: boolean;
}
/**
 * @generated from protobuf message im.ShowLinkedLiveRoomsMessage
 */
export interface ShowLinkedLiveRoomsMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 episode_id = 2;
     */
    episodeId: bigint;
    /**
     * @generated from protobuf field: string entry_title = 3;
     */
    entryTitle: string;
    /**
     * @generated from protobuf field: repeated im.ShowLinkedLiveRoomsMessage.ShowLinkedLiveRoomInfo linked_live_rooms = 4;
     */
    linkedLiveRooms: ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo[];
}
/**
 * @generated from protobuf message im.ShowLinkedLiveRoomsMessage.ShowLinkedLiveRoomInfo
 */
export interface ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo {
    /**
     * @generated from protobuf field: int64 owner_user_id = 1;
     */
    ownerUserId: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 2;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: string room_title = 3;
     */
    roomTitle: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 4;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_medium = 5;
     */
    avatarMedium?: Image;
    /**
     * @generated from protobuf field: data.Image avatar_large = 6;
     */
    avatarLarge?: Image;
}
/**
 * @generated from protobuf message im.ShowMultiCameraChangeMessage
 */
export interface ShowMultiCameraChangeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.VSCameraInfo camera_infos = 2;
     */
    cameraInfos: VSCameraInfo[];
    /**
     * @generated from protobuf field: int64 randomly_break_up_time = 3;
     */
    randomlyBreakUpTime: bigint;
}
/**
 * @generated from protobuf message im.ShowWatchInfoMessage
 */
export interface ShowWatchInfoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string desc = 2;
     */
    desc: string;
    /**
     * @generated from protobuf field: string count = 3;
     */
    count: string;
    /**
     * @generated from protobuf field: string count_with_backup = 4;
     */
    countWithBackup: string;
    /**
     * @generated from protobuf field: string format_count = 5;
     */
    formatCount: string;
}
/**
 * @generated from protobuf message im.SkyEyeAnchorSetMessage
 */
export interface SkyEyeAnchorSetMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Image title_image = 2;
     */
    titleImage?: Image;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string top_tip = 4;
     */
    topTip: string;
    /**
     * @generated from protobuf field: string bottom_tip = 5;
     */
    bottomTip: string;
}
/**
 * @generated from protobuf message im.SportsRealTimeMatchDataMessage
 */
export interface SportsRealTimeMatchDataMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string sports_match_data = 2;
     */
    sportsMatchData: string;
}
/**
 * @generated from protobuf message im.SportsQuizOption
 */
export interface SportsQuizOption {
    /**
     * @generated from protobuf field: int64 option_id = 1;
     */
    optionId: bigint;
    /**
     * @generated from protobuf field: string option_desc = 2;
     */
    optionDesc: string;
    /**
     * @generated from protobuf field: int64 bet_amount = 3;
     */
    betAmount: bigint;
    /**
     * @generated from protobuf field: string bet_amount_str = 4;
     */
    betAmountStr: string;
    /**
     * @generated from protobuf field: double rate = 5;
     */
    rate: number;
    /**
     * @generated from protobuf field: string rate_str = 6;
     */
    rateStr: string;
}
/**
 * @generated from protobuf message im.SportsQuiz
 */
export interface SportsQuiz {
    /**
     * @generated from protobuf field: int64 quiz_id = 1;
     */
    quizId: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 quiz_status = 4;
     */
    quizStatus: number;
    /**
     * @generated from protobuf field: int64 total_reward = 5;
     */
    totalReward: bigint;
    /**
     * @generated from protobuf field: repeated im.SportsQuizOption options = 6;
     */
    options: SportsQuizOption[];
    /**
     * @generated from protobuf field: int64 win_option = 7;
     */
    winOption: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 8;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: int64 bet_gold_ball = 9;
     */
    betGoldBall: bigint;
    /**
     * @generated from protobuf field: int64 selected_option = 10;
     */
    selectedOption: bigint;
    /**
     * @generated from protobuf field: int64 bonus = 11;
     */
    bonus: bigint;
}
/**
 * @generated from protobuf message im.SportsQuizMessage
 */
export interface SportsQuizMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string match_id = 2;
     */
    matchId: string;
    /**
     * @generated from protobuf field: int32 quiz_msg_type = 3;
     */
    quizMsgType: number;
    /**
     * @generated from protobuf field: repeated im.SportsQuiz quiz = 4;
     */
    quiz: SportsQuiz[];
}
/**
 * @generated from protobuf message im.StreamControlMessage
 */
export interface StreamControlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string control_params = 2;
     */
    controlParams: string;
}
/**
 * @generated from protobuf message im.SubscribeInfoMessage
 */
export interface SubscribeInfoMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: bool is_member = 2;
     */
    isMember: boolean;
}
/**
 * @generated from protobuf message im.SubscribeAssetMessage
 */
export interface SubscribeAssetMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.SyncStreamInfoMessage
 */
export interface SyncStreamInfoMessage {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string info = 3;
     */
    info: string;
    /**
     * @generated from protobuf field: im.Common common = 4;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.SyncStreamMessage
 */
export interface SyncStreamMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.SyncStreamInfoMessage info_list = 2;
     */
    infoList: SyncStreamInfoMessage[];
}
/**
 * @generated from protobuf message im.TaskCenterCommonMessage
 */
export interface TaskCenterCommonMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 biz_type = 2;
     */
    bizType: bigint;
    /**
     * @generated from protobuf field: string data = 3;
     */
    data: string;
}
/**
 * @generated from protobuf message im.TaskCenterCommonPersonalMessage
 */
export interface TaskCenterCommonPersonalMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 biz_type = 2;
     */
    bizType: bigint;
    /**
     * @generated from protobuf field: string data = 3;
     */
    data: string;
}
/**
 * @generated from protobuf message im.TaskCenterEntranceMessage
 */
export interface TaskCenterEntranceMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.TouchPositionMeta meta = 2;
     */
    meta?: TouchPositionMeta;
    /**
     * @generated from protobuf field: data.TreasureDetail detail = 3;
     */
    detail?: TreasureDetail;
    /**
     * @generated from protobuf field: string extra = 4;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.TaskMessage
 */
export interface TaskMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.TaskRecord task_records = 2;
     */
    taskRecords: TaskRecord[];
    /**
     * @generated from protobuf field: int32 action = 3;
     */
    action: number;
}
/**
 * @generated from protobuf message im.ToastMessage
 */
export interface ToastMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.ToolBarControlMessage
 */
export interface ToolBarControlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 event_type = 2;
     */
    eventType: number;
    /**
     * @generated from protobuf field: int32 group_id = 3;
     */
    groupId: number;
    /**
     * @generated from protobuf field: int32 component_type = 4;
     */
    componentType: number;
    /**
     * @generated from protobuf field: int32 op_type = 5;
     */
    opType: number;
    /**
     * @generated from protobuf field: string text = 6;
     */
    text: string;
    /**
     * @generated from protobuf field: string schema_url = 7;
     */
    schemaUrl: string;
    /**
     * @generated from protobuf field: data.Image icon = 8;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: int64 show_type = 9;
     */
    showType: bigint;
    /**
     * @generated from protobuf field: string extra = 99;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.TopLeftBubbleMessage
 */
export interface TopLeftBubbleMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.CommonBubbleConfig bubble_config = 2;
     */
    bubbleConfig?: CommonBubbleConfig;
}
/**
 * @generated from protobuf message im.UnionAnchorMessage
 */
export interface UnionAnchorMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 duration = 4;
     */
    duration: number;
}
/**
 * @generated from protobuf message im.UnionGeneralMessage
 */
export interface UnionGeneralMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated int32 payload = 2;
     */
    payload: number[];
    /**
     * @generated from protobuf field: int64 timestamp = 3;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: int64 auth_type = 4;
     */
    authType: bigint;
}
/**
 * @generated from protobuf message im.AnchorAppointmentNumUpdateMessage
 */
export interface AnchorAppointmentNumUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.AnchorAppointmentNumUpdateMessage.Data data = 2;
     */
    data?: AnchorAppointmentNumUpdateMessage_Data;
}
/**
 * @generated from protobuf message im.AnchorAppointmentNumUpdateMessage.Data
 */
export interface AnchorAppointmentNumUpdateMessage_Data {
    /**
     * @generated from protobuf field: int64 CurrentNumber = 1 [json_name = "CurrentNumber"];
     */
    currentNumber: bigint;
    /**
     * @generated from protobuf field: int64 AnchorUID = 2 [json_name = "AnchorUID"];
     */
    anchorUID: bigint;
}
/**
 * @generated from protobuf message im.AppointmentNumberUpdateMessage
 */
export interface AppointmentNumberUpdateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: im.AppointmentNumberUpdateMessage.Data data = 2;
     */
    data?: AppointmentNumberUpdateMessage_Data;
}
/**
 * @generated from protobuf message im.AppointmentNumberUpdateMessage.Data
 */
export interface AppointmentNumberUpdateMessage_Data {
    /**
     * @generated from protobuf field: int64 CurrentNumber = 1 [json_name = "CurrentNumber"];
     */
    currentNumber: bigint;
    /**
     * @generated from protobuf field: int64 AnchorUID = 2 [json_name = "AnchorUID"];
     */
    anchorUID: bigint;
}
/**
 * @generated from protobuf message im.UpdateFanTicketMessage
 */
export interface UpdateFanTicketMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string room_fan_ticket_count_text = 2;
     */
    roomFanTicketCountText: string;
    /**
     * @generated from protobuf field: int64 room_fan_ticket_count = 3;
     */
    roomFanTicketCount: bigint;
    /**
     * @generated from protobuf field: bool force_update = 4;
     */
    forceUpdate: boolean;
}
/**
 * @generated from protobuf message im.CoverSuccessMessage
 */
export interface CoverSuccessMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 cover_type = 2;
     */
    coverType: bigint;
}
/**
 * @generated from protobuf message im.UpperRightWidgetDataMessage
 */
export interface UpperRightWidgetDataMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated data.UpperRightWidgetData upper_right_widget_data_list = 2;
     */
    upperRightWidgetDataList: UpperRightWidgetData[];
}
/**
 * @generated from protobuf message im.UserPrivilegeChangeMessage
 */
export interface UserPrivilegeChangeMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 user_privilege_type = 2;
     */
    userPrivilegeType: number;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: data.Image avatar_border = 4;
     */
    avatarBorder?: Image;
    /**
     * @generated from protobuf field: data.Image thumb_avatar_border = 5;
     */
    thumbAvatarBorder?: Image;
}
/**
 * @generated from protobuf message im.VerifyDecisionMessage
 */
export interface VerifyDecisionMessage {
    /**
     * @generated from protobuf field: string decision_conf = 1;
     */
    decisionConf: string;
    /**
     * @generated from protobuf field: string check_reason = 2;
     */
    checkReason: string;
    /**
     * @generated from protobuf field: im.Common common = 3;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 pop_time = 4;
     */
    popTime: bigint;
}
/**
 * @generated from protobuf message im.VideoShareMessage
 */
export interface VideoShareMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: int64 item_id = 3;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: string item_id_str = 4;
     */
    itemIdStr: string;
    /**
     * @generated from protobuf field: int64 item_type = 5;
     */
    itemType: bigint;
    /**
     * @generated from protobuf field: string item_type_str = 6;
     */
    itemTypeStr: string;
    /**
     * @generated from protobuf field: string title = 7;
     */
    title: string;
    /**
     * @generated from protobuf field: int64 author_id = 8;
     */
    authorId: bigint;
    /**
     * @generated from protobuf field: im.PublicAreaCommon public_area_common = 9;
     */
    publicAreaCommon?: PublicAreaCommon;
}
/**
 * @generated from protobuf message im.VirtualGameActorChatMessage
 */
export interface VirtualGameActorChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 actor_id = 3;
     */
    actorId: bigint;
    /**
     * @generated from protobuf field: string user_nick_name = 4;
     */
    userNickName: string;
    /**
     * @generated from protobuf field: int64 chat_request_time = 5;
     */
    chatRequestTime: bigint;
    /**
     * @generated from protobuf field: int64 room_id = 6;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: string content = 7;
     */
    content: string;
}
/**
 * @generated from protobuf message im.VirtualActorBatchCommandMessage
 */
export interface VirtualActorBatchCommandMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 room_id = 2;
     */
    roomId: bigint;
    /**
     * @generated from protobuf field: repeated im.VirtualGameActorCommandMessage command_message_list = 3;
     */
    commandMessageList: VirtualGameActorCommandMessage[];
}
/**
 * @generated from protobuf message im.VirtualGameActorCommandMessage
 */
export interface VirtualGameActorCommandMessage {
    /**
     * @generated from protobuf field: int64 command_id = 1;
     */
    commandId: bigint;
    /**
     * @generated from protobuf field: string command_type = 2;
     */
    commandType: string;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 actor_id = 4;
     */
    actorId: bigint;
    /**
     * @generated from protobuf field: string user_nick_name = 5;
     */
    userNickName: string;
    /**
     * @generated from protobuf field: int64 actor_create_time = 6;
     */
    actorCreateTime: bigint;
    /**
     * @generated from protobuf field: int64 actor_remove_time = 7;
     */
    actorRemoveTime: bigint;
    /**
     * @generated from protobuf field: int64 command_request_time = 8;
     */
    commandRequestTime: bigint;
}
/**
 * @generated from protobuf message im.VsBusinessConfigureMessage
 */
export interface VsBusinessConfigureMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.BusinessConfigure business_configure = 2;
     */
    businessConfigure?: BusinessConfigure;
    /**
     * @generated from protobuf field: bool all_info = 3;
     */
    allInfo: boolean;
    /**
     * @generated from protobuf field: int64 scatter_time = 4;
     */
    scatterTime: bigint;
}
/**
 * @generated from protobuf message im.VsInteractiveMessage
 */
export interface VsInteractiveMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string extra = 2;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.VSLinkRoomMessage
 */
export interface VSLinkRoomMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.VSLinkInfo link_info = 2;
     */
    linkInfo?: VSLinkInfo;
    /**
     * @generated from protobuf field: bool all_info = 3;
     */
    allInfo: boolean;
    /**
     * @generated from protobuf field: int64 scatter_time = 4;
     */
    scatterTime: bigint;
}
/**
 * @generated from protobuf message im.VsPanelMessage
 */
export interface VsPanelMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string extra = 2;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.VsScheduleMessage
 */
export interface VsScheduleMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 action = 2;
     */
    action: number;
    /**
     * @generated from protobuf field: int64 match_id = 3;
     */
    matchId: bigint;
    /**
     * @generated from protobuf field: repeated int64 event_ids = 4;
     */
    eventIds: bigint[];
    /**
     * @generated from protobuf field: int64 content_id = 5;
     */
    contentId: bigint;
    /**
     * @generated from protobuf field: string match_id_str = 6;
     */
    matchIdStr: string;
    /**
     * @generated from protobuf field: string content_id_str = 7;
     */
    contentIdStr: string;
    /**
     * @generated from protobuf field: repeated string event_ids_str = 8;
     */
    eventIdsStr: string[];
}
/**
 * @generated from protobuf message im.VsSwitchControlMessage
 */
export interface VsSwitchControlMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int32 switch = 2;
     */
    switch: number;
    /**
     * @generated from protobuf field: bool on = 3;
     */
    on: boolean;
    /**
     * @generated from protobuf field: string display_text = 4;
     */
    displayText: string;
    /**
     * @generated from protobuf field: string extra = 20;
     */
    extra: string;
}
/**
 * @generated from protobuf message im.FreshmanSupportMessage
 */
export interface FreshmanSupportMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 number = 2;
     */
    number: bigint;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string icon = 4;
     */
    icon: string;
}
/**
 * @generated from protobuf message im.MiniAppLineUpMessage
 */
export interface MiniAppLineUpMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string mini_app_id = 2;
     */
    miniAppId: string;
    /**
     * @generated from protobuf field: string mini_app_name = 3;
     */
    miniAppName: string;
    /**
     * @generated from protobuf field: int32 line_up_status = 4;
     */
    lineUpStatus: number;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 duration = 6;
     */
    duration: bigint;
}
/**
 * @generated from protobuf message im.InteractOpenAppStatusMessage
 */
export interface InteractOpenAppStatusMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string app_id = 2;
     */
    appId: string;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: string display_text = 4;
     */
    displayText: string;
    /**
     * @generated from protobuf field: string anchor_text = 5;
     */
    anchorText: string;
}
/**
 * @generated from protobuf message im.InteractOpenChatMessage
 */
export interface InteractOpenChatMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.InteractOpenChatMessage.ChatItem items = 2;
     */
    items: InteractOpenChatMessage_ChatItem[];
}
/**
 * @generated from protobuf message im.InteractOpenChatMessage.ChatItem
 */
export interface InteractOpenChatMessage_ChatItem {
    /**
     * @generated from protobuf field: repeated data.AppUserInfo app_user_info = 1;
     */
    appUserInfo: AppUserInfo[];
    /**
     * @generated from protobuf field: string sec_nick_name = 2;
     */
    secNickName: string;
    /**
     * @generated from protobuf field: string sec_avatar_url = 3;
     */
    secAvatarUrl: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 timestamp = 5;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message im.ActivityCouponInvalidMessage
 */
export interface ActivityCouponInvalidMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string room_id = 2;
     */
    roomId: string;
    /**
     * @generated from protobuf field: int32 invalid_type = 3;
     */
    invalidType: number;
    /**
     * @generated from protobuf field: string anchor_toast_content = 4;
     */
    anchorToastContent: string;
}
/**
 * @generated from protobuf message im.InteractOpenDiamondMessage
 */
export interface InteractOpenDiamondMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string app_id = 2;
     */
    appId: string;
    /**
     * @generated from protobuf field: int64 start_id = 3;
     */
    startId: bigint;
    /**
     * @generated from protobuf field: int32 diamonds = 4;
     */
    diamonds: number;
}
/**
 * @generated from protobuf message im.InteractOpenFollowingMessage
 */
export interface InteractOpenFollowingMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: repeated im.InteractOpenFollowingMessage.FollowItem items = 2;
     */
    items: InteractOpenFollowingMessage_FollowItem[];
}
/**
 * @generated from protobuf message im.InteractOpenFollowingMessage.FollowItem
 */
export interface InteractOpenFollowingMessage_FollowItem {
    /**
     * @generated from protobuf field: repeated data.AppUserInfo app_user_info = 1;
     */
    appUserInfo: AppUserInfo[];
    /**
     * @generated from protobuf field: string sec_nick_name = 2;
     */
    secNickName: string;
    /**
     * @generated from protobuf field: string sec_avatar_url = 3;
     */
    secAvatarUrl: string;
    /**
     * @generated from protobuf field: int32 action = 4;
     */
    action: number;
    /**
     * @generated from protobuf field: int32 timestamp = 5;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message im.PerformanceFinishMessage
 */
export interface PerformanceFinishMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string app_id = 2;
     */
    appId: string;
    /**
     * @generated from protobuf field: string task_id = 3;
     */
    taskId: string;
}
/**
 * @generated from protobuf message im.InteractOpenRewardMessage
 */
export interface InteractOpenRewardMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string app_id = 2;
     */
    appId: string;
    /**
     * @generated from protobuf field: int64 start_id = 3;
     */
    startId: bigint;
    /**
     * @generated from protobuf field: int32 reward_id = 4;
     */
    rewardId: number;
    /**
     * @generated from protobuf field: int32 reward_count = 5;
     */
    rewardCount: number;
    /**
     * @generated from protobuf field: int32 reward_diamonds = 6;
     */
    rewardDiamonds: number;
    /**
     * @generated from protobuf field: string reward_name = 7;
     */
    rewardName: string;
}
/**
 * @generated from protobuf message im.InteractScreenshotMessage
 */
export interface InteractScreenshotMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string app_id = 2;
     */
    appId: string;
    /**
     * @generated from protobuf field: int64 recall_id = 3;
     */
    recallId: bigint;
}
/**
 * @generated from protobuf message im.InteractOpenViolationMessage
 */
export interface InteractOpenViolationMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string room_id = 2;
     */
    roomId: string;
    /**
     * @generated from protobuf field: string app_id = 3;
     */
    appId: string;
    /**
     * @generated from protobuf field: int32 violation_type = 4;
     */
    violationType: number;
    /**
     * @generated from protobuf field: string anchor_tips_title = 5;
     */
    anchorTipsTitle: string;
    /**
     * @generated from protobuf field: string anchor_tips_content = 6;
     */
    anchorTipsContent: string;
    /**
     * @generated from protobuf field: string audience_tips_title = 7;
     */
    audienceTipsTitle: string;
    /**
     * @generated from protobuf field: string audience_tips_content = 8;
     */
    audienceTipsContent: string;
}
/**
 * @generated from protobuf message im.RoomIndicatorMessage
 */
export interface RoomIndicatorMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 biz_type = 2;
     */
    bizType: bigint;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: im.CommonBizInfo biz_info = 4;
     */
    bizInfo?: CommonBizInfo;
}
/**
 * @generated from protobuf message im.CommonBizInfo
 */
export interface CommonBizInfo {
    /**
     * @generated from protobuf field: string jump_schema = 1;
     */
    jumpSchema: string;
    /**
     * @generated from protobuf field: repeated im.BizContent contents = 2;
     */
    contents: BizContent[];
}
/**
 * @generated from protobuf message im.HotText
 */
export interface HotText {
    /**
     * @generated from protobuf field: int64 number = 1;
     */
    number: bigint;
    /**
     * @generated from protobuf field: string text_content = 2;
     */
    textContent: string;
}
/**
 * @generated from protobuf message im.BizContent
 */
export interface BizContent {
    /**
     * @generated from protobuf field: int32 content_type = 1;
     */
    contentType: number;
    /**
     * @generated from protobuf field: int64 number = 2;
     */
    number: bigint;
    /**
     * @generated from protobuf field: string text_content = 3;
     */
    textContent: string;
    /**
     * @generated from protobuf field: data.Image image_content = 4;
     */
    imageContent?: Image;
    /**
     * @generated from protobuf field: im.HotText hot_text_content = 5;
     */
    hotTextContent?: HotText;
}
/**
 * @generated from protobuf message im.TrafficSceneMessage
 */
export interface TrafficSceneMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 number = 2;
     */
    number: bigint;
    /**
     * @generated from protobuf field: int64 status = 3;
     */
    status: bigint;
    /**
     * @generated from protobuf field: string icon = 4;
     */
    icon: string;
    /**
     * @generated from protobuf field: int64 type = 5;
     */
    type: bigint;
    /**
     * @generated from protobuf field: bool is_keep = 6;
     */
    isKeep: boolean;
}
/**
 * @generated from protobuf message im.WelfareProjectOperateMessage
 */
export interface WelfareProjectOperateMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 op_type = 2;
     */
    opType: bigint;
    /**
     * @generated from protobuf field: data.WelfareProjectInfo project = 3;
     */
    project?: WelfareProjectInfo;
}
/**
 * @generated from protobuf message im.WishFinishMessage
 */
export interface WishFinishMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: data.Image gesture_image_single = 2;
     */
    gestureImageSingle?: Image;
    /**
     * @generated from protobuf field: data.Image gesture_image_double = 3;
     */
    gestureImageDouble?: Image;
    /**
     * @generated from protobuf field: int64 display_seconds = 4;
     */
    displaySeconds: bigint;
    /**
     * @generated from protobuf field: int64 effect_id = 5;
     */
    effectId: bigint;
}
/**
 * @generated from protobuf message im.AudienceGiftSyncData
 */
export interface AudienceGiftSyncData {
    /**
     * @generated from protobuf field: repeated data.GiftAudienceReceiverItem audience_receiver_list = 1;
     */
    audienceReceiverList: GiftAudienceReceiverItem[];
    /**
     * @generated from protobuf field: int64 sync_type = 2;
     */
    syncType: bigint;
}
/**
 * @generated from protobuf message im.CameraShareStateSyncData
 */
export interface CameraShareStateSyncData {
    /**
     * @generated from protobuf field: int32 share_state = 1;
     */
    shareState: number;
}
/**
 * @generated from protobuf message im.RoomChannelLinkMicSyncData
 */
export interface RoomChannelLinkMicSyncData {
    /**
     * @generated from protobuf field: repeated data.ChannelListUser channel_link_users = 1;
     */
    channelLinkUsers: ChannelListUser[];
    /**
     * @generated from protobuf field: int64 placeholder = 2;
     */
    placeholder: bigint;
    /**
     * @generated from protobuf field: string rtc_room_id_str = 3;
     */
    rtcRoomIdStr: string;
}
/**
 * @generated from protobuf message im.ChatCarnivalSyncData
 */
export interface ChatCarnivalSyncData {
    /**
     * @generated from protobuf field: im.ChatCarnivalMessage data = 1;
     */
    data?: ChatCarnivalMessage;
}
/**
 * @generated from protobuf message im.Comment
 */
export interface Comment {
    /**
     * @generated from protobuf field: int64 comment_id = 1;
     */
    commentId: bigint;
    /**
     * @generated from protobuf field: im.Comment.User comment_user = 2;
     */
    commentUser?: Comment_User;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 tag = 4;
     */
    tag: number;
    /**
     * @generated from protobuf field: bool public = 5;
     */
    public: boolean;
    /**
     * @generated from protobuf field: int64 create_timestamp = 6;
     */
    createTimestamp: bigint;
    /**
     * @generated from protobuf field: int32 thumbup_number = 7;
     */
    thumbupNumber: number;
    /**
     * @generated from protobuf field: repeated im.Comment children_comment = 8;
     */
    childrenComment: Comment[];
    /**
     * @generated from protobuf field: int32 audit = 9;
     */
    audit: number;
    /**
     * @generated from protobuf field: bool first_reply = 10;
     */
    firstReply: boolean;
    /**
     * @generated from protobuf field: im.Comment.DressInfo dress_info = 11;
     */
    dressInfo?: Comment_DressInfo;
}
/**
 * @generated from protobuf message im.Comment.User
 */
export interface Comment_User {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 short_id = 2;
     */
    shortId: bigint;
    /**
     * @generated from protobuf field: string nickname = 3;
     */
    nickname: string;
    /**
     * @generated from protobuf field: data.Image avatar_thumb = 5;
     */
    avatarThumb?: Image;
    /**
     * @generated from protobuf field: data.User.AuthenticationInfo authentication_info = 6;
     */
    authenticationInfo?: User_AuthenticationInfo;
}
/**
 * @generated from protobuf message im.Comment.DressInfo
 */
export interface Comment_DressInfo {
    /**
     * @generated from protobuf field: int64 cover_id = 1;
     */
    coverId: bigint;
    /**
     * @generated from protobuf field: int64 badge_id = 2;
     */
    badgeId: bigint;
}
/**
 * @generated from protobuf message im.CommentsSyncData
 */
export interface CommentsSyncData {
    /**
     * @generated from protobuf field: repeated string comments = 1;
     */
    comments: string[];
    /**
     * @generated from protobuf field: int64 next_timestamp = 2;
     */
    nextTimestamp: bigint;
    /**
     * @generated from protobuf field: int32 total_comment_number = 3;
     */
    totalCommentNumber: number;
}
/**
 * @generated from protobuf message im.DoubleLikeDetailV2
 */
export interface DoubleLikeDetailV2 {
    /**
     * @generated from protobuf field: bool double_flag = 1;
     */
    doubleFlag: boolean;
    /**
     * @generated from protobuf field: int32 seq_id = 2;
     */
    seqId: number;
    /**
     * @generated from protobuf field: int32 renewals_num = 3;
     */
    renewalsNum: number;
    /**
     * @generated from protobuf field: int32 triggers_num = 4;
     */
    triggersNum: number;
}
/**
 * @generated from protobuf message im.DoubleLikeSyncData
 */
export interface DoubleLikeSyncData {
    /**
     * @generated from protobuf field: im.DoubleLikeDetailV2 doubleLikeStatus = 1;
     */
    doubleLikeStatus?: DoubleLikeDetailV2;
    /**
     * @generated from protobuf field: data.Text self_display_text = 2;
     */
    selfDisplayText?: Text;
    /**
     * @generated from protobuf field: data.Text normal_display_text = 3;
     */
    normalDisplayText?: Text;
}
/**
 * @generated from protobuf message im.FastChatSyncData
 */
export interface FastChatSyncData {
    /**
     * @generated from protobuf field: int32 chat_support_type = 1;
     */
    chatSupportType: number;
    /**
     * @generated from protobuf field: string toast = 2;
     */
    toast: string;
    /**
     * @generated from protobuf field: string hint = 4;
     */
    hint: string;
    /**
     * @generated from protobuf field: string color = 5;
     */
    color: string;
    /**
     * @generated from protobuf field: repeated string fast_chat = 3;
     */
    fastChat: string[];
    /**
     * @generated from protobuf field: bool fast_chat_switch = 6;
     */
    fastChatSwitch: boolean;
}
/**
 * @generated from protobuf message im.FixedChatSyncData
 */
export interface FixedChatSyncData {
    /**
     * @generated from protobuf field: string hint = 1;
     */
    hint: string;
    /**
     * @generated from protobuf field: im.FastChatInfo fast_chat_info = 2;
     */
    fastChatInfo?: FastChatInfo;
    /**
     * @generated from protobuf field: im.FixedChatInfo fixed_chat_info = 3;
     */
    fixedChatInfo?: FixedChatInfo;
}
/**
 * @generated from protobuf message im.FastChatInfo
 */
export interface FastChatInfo {
    /**
     * @generated from protobuf field: bool fast_chat_switch = 1;
     */
    fastChatSwitch: boolean;
    /**
     * @generated from protobuf field: string bubble_color = 2;
     */
    bubbleColor: string;
    /**
     * @generated from protobuf field: repeated im.FastChatInfo.FastChatDetail fast_chat_list = 3;
     */
    fastChatList: FastChatInfo_FastChatDetail[];
}
/**
 * @generated from protobuf message im.FastChatInfo.FastChatDetail
 */
export interface FastChatInfo_FastChatDetail {
    /**
     * @generated from protobuf field: int64 type = 1;
     */
    type: bigint;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message im.FixedChatInfo
 */
export interface FixedChatInfo {
    /**
     * @generated from protobuf field: repeated string fixed_chat_list = 1;
     */
    fixedChatList: string[];
    /**
     * @generated from protobuf field: repeated im.FixedChatInfo.EmojiDetail fixed_emoji_list = 2;
     */
    fixedEmojiList: FixedChatInfo_EmojiDetail[];
    /**
     * @generated from protobuf field: string title_color = 3;
     */
    titleColor: string;
    /**
     * @generated from protobuf field: string text_default_color = 4;
     */
    textDefaultColor: string;
    /**
     * @generated from protobuf field: string text_selected_color = 5;
     */
    textSelectedColor: string;
    /**
     * @generated from protobuf field: data.Image cancel_icon = 6;
     */
    cancelIcon?: Image;
}
/**
 * @generated from protobuf message im.FixedChatInfo.EmojiDetail
 */
export interface FixedChatInfo_EmojiDetail {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: data.Image content = 2;
     */
    content?: Image;
}
/**
 * @generated from protobuf message im.GeneralCarnivalSyncData
 */
export interface GeneralCarnivalSyncData {
    /**
     * @generated from protobuf field: im.GeneralCarnivalMessage carnival_message = 1;
     */
    carnivalMessage?: GeneralCarnivalMessage;
    /**
     * @generated from protobuf field: int64 MillSecondTimeStamp = 2 [json_name = "MillSecondTimeStamp"];
     */
    millSecondTimeStamp: bigint;
}
/**
 * @generated from protobuf message im.GeneralCarnivalMessage
 */
export interface GeneralCarnivalMessage {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: int64 seq_id = 2;
     */
    seqId: bigint;
    /**
     * @generated from protobuf field: int64 user_start_timestamp_milliseconds = 3;
     */
    userStartTimestampMilliseconds: bigint;
    /**
     * @generated from protobuf field: int64 user_start_milliseconds = 4;
     */
    userStartMilliseconds: bigint;
    /**
     * @generated from protobuf field: int64 duration = 5;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 min_remaining_duration = 6;
     */
    minRemainingDuration: bigint;
    /**
     * @generated from protobuf field: string background_color = 7;
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: string word_color = 8;
     */
    wordColor: string;
    /**
     * @generated from protobuf field: data.Image title_image = 9;
     */
    titleImage?: Image;
    /**
     * @generated from protobuf field: int64 show_webp = 10;
     */
    showWebp: bigint;
    /**
     * @generated from protobuf field: string pre_content = 11;
     */
    preContent: string;
    /**
     * @generated from protobuf field: string content = 12;
     */
    content: string;
    /**
     * @generated from protobuf field: bool countdown_exit = 13;
     */
    countdownExit: boolean;
    /**
     * @generated from protobuf field: string exit_content = 14;
     */
    exitContent: string;
    /**
     * @generated from protobuf field: int64 exit_countdown_duration = 15;
     */
    exitCountdownDuration: bigint;
    /**
     * @generated from protobuf field: bool can_jump = 16;
     */
    canJump: boolean;
    /**
     * @generated from protobuf field: string schema = 17;
     */
    schema: string;
    /**
     * @generated from protobuf field: int64 move_speed = 18;
     */
    moveSpeed: bigint;
    /**
     * @generated from protobuf field: int64 use_privilege_region = 20;
     */
    usePrivilegeRegion: bigint;
    /**
     * @generated from protobuf field: repeated im.GeneralCarnivalMessage.CarnivalEggItem egg_style = 21;
     */
    eggStyle: GeneralCarnivalMessage_CarnivalEggItem[];
    /**
     * @generated from protobuf field: repeated int64 egg_show_range = 22;
     */
    eggShowRange: bigint[];
    /**
     * @generated from protobuf field: int64 can_open_contour = 23;
     */
    canOpenContour: bigint;
}
/**
 * @generated from protobuf message im.GeneralCarnivalMessage.CarnivalDanmakuItem
 */
export interface GeneralCarnivalMessage_CarnivalDanmakuItem {
    /**
     * @generated from protobuf field: string content_color = 1;
     */
    contentColor: string;
    /**
     * @generated from protobuf field: im.FlexImageStruct background = 2;
     */
    background?: FlexImageStruct;
    /**
     * @generated from protobuf field: int64 background_hight = 3;
     */
    backgroundHight: bigint;
    /**
     * @generated from protobuf field: int64 background_width = 4;
     */
    backgroundWidth: bigint;
    /**
     * @generated from protobuf field: int64 use_rate = 5;
     */
    useRate: bigint;
    /**
     * @generated from protobuf field: int64 font_size = 6;
     */
    fontSize: bigint;
}
/**
 * @generated from protobuf message im.GeneralCarnivalMessage.CarnivalDanmakuItemList
 */
export interface GeneralCarnivalMessage_CarnivalDanmakuItemList {
    /**
     * @generated from protobuf field: repeated im.GeneralCarnivalMessage.CarnivalDanmakuItem danmaku_item_list = 1;
     */
    danmakuItemList: GeneralCarnivalMessage_CarnivalDanmakuItem[];
}
/**
 * @generated from protobuf message im.GeneralCarnivalMessage.CarnivalEggItem
 */
export interface GeneralCarnivalMessage_CarnivalEggItem {
    /**
     * @generated from protobuf field: data.Image background = 1;
     */
    background?: Image;
    /**
     * @generated from protobuf field: int64 background_hight = 2;
     */
    backgroundHight: bigint;
    /**
     * @generated from protobuf field: int64 background_width = 3;
     */
    backgroundWidth: bigint;
    /**
     * @generated from protobuf field: int64 use_rate = 4;
     */
    useRate: bigint;
    /**
     * @generated from protobuf field: int64 is_dynamic_egg = 5;
     */
    isDynamicEgg: bigint;
    /**
     * @generated from protobuf field: bool show_alone = 6;
     */
    showAlone: boolean;
}
/**
 * @generated from protobuf message im.HighlightContainerSyncData
 */
export interface HighlightContainerSyncData {
    /**
     * @generated from protobuf field: repeated im.HighlightItem highlight_items = 1;
     */
    highlightItems: HighlightItem[];
    /**
     * @generated from protobuf field: int64 sync_version = 2;
     */
    syncVersion: bigint;
    /**
     * @generated from protobuf field: im.CarouselInfo carousel_info = 3;
     */
    carouselInfo?: CarouselInfo;
}
/**
 * @generated from protobuf message im.HighlightItem
 */
export interface HighlightItem {
    /**
     * @generated from protobuf field: int64 item_id = 1;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: int64 version = 2;
     */
    version: bigint;
    /**
     * @generated from protobuf field: int64 end_time = 3;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: im.Position position = 4;
     */
    position?: Position;
    /**
     * @generated from protobuf field: int32 data_type = 100;
     */
    dataType: number;
    /**
     * @generated from protobuf field: im.HighlightDataAppointment appointment_data = 102;
     */
    appointmentData?: HighlightDataAppointment;
    /**
     * @generated from protobuf field: im.HighlightDataAnswer answer_data = 103;
     */
    answerData?: HighlightDataAnswer;
    /**
     * @generated from protobuf field: im.HighlightDataComment comment_data = 104;
     */
    commentData?: HighlightDataComment;
    /**
     * @generated from protobuf field: im.HighlightDataVideo video_data = 105;
     */
    videoData?: HighlightDataVideo;
    /**
     * @generated from protobuf field: im.HighlightDataMicroApp micro_app_data = 106;
     */
    microAppData?: HighlightDataMicroApp;
    /**
     * @generated from protobuf field: im.HighlightDataImCommon im_common_data = 107;
     */
    imCommonData?: HighlightDataImCommon;
}
/**
 * @generated from protobuf message im.HighlightTempInfo
 */
export interface HighlightTempInfo {
    /**
     * @generated from protobuf field: string item_id = 1;
     */
    itemId: string;
    /**
     * @generated from protobuf field: string item_cover = 2;
     */
    itemCover: string;
    /**
     * @generated from protobuf field: string item_name = 3;
     */
    itemName: string;
    /**
     * @generated from protobuf field: string item_content = 4;
     */
    itemContent: string;
    /**
     * @generated from protobuf field: string schema = 5;
     */
    schema: string;
}
/**
 * @generated from protobuf message im.Position
 */
export interface Position {
    /**
     * @generated from protobuf field: double position_x = 1;
     */
    positionX: number;
    /**
     * @generated from protobuf field: double position_y = 2;
     */
    positionY: number;
}
/**
 * @generated from protobuf message im.CarouselInfo
 */
export interface CarouselInfo {
    /**
     * @generated from protobuf field: int64 time = 1;
     */
    time: bigint;
    /**
     * @generated from protobuf field: repeated int64 item_group = 2;
     */
    itemGroup: bigint[];
}
/**
 * @generated from protobuf message im.OperateInfo
 */
export interface OperateInfo {
    /**
     * @generated from protobuf field: data.Text creator_text = 1;
     */
    creatorText?: Text;
    /**
     * @generated from protobuf field: bool current_user_can_delete = 2;
     */
    currentUserCanDelete: boolean;
}
/**
 * @generated from protobuf message im.PinCommon
 */
export interface PinCommon {
    /**
     * @generated from protobuf field: data.Text top_title = 1;
     */
    topTitle?: Text;
    /**
     * @generated from protobuf field: im.OperateInfo operate_info = 2;
     */
    operateInfo?: OperateInfo;
}
/**
 * @generated from protobuf message im.HighlightDataAppointment
 */
export interface HighlightDataAppointment {
    /**
     * @generated from protobuf field: int64 appointment_timestamp = 1;
     */
    appointmentTimestamp: bigint;
    /**
     * @generated from protobuf field: bool demotion = 2;
     */
    demotion: boolean;
    /**
     * @generated from protobuf field: int64 anchor_uid = 3;
     */
    anchorUid: bigint;
    /**
     * @generated from protobuf field: int64 current_number = 4;
     */
    currentNumber: bigint;
    /**
     * @generated from protobuf field: string text = 5;
     */
    text: string;
    /**
     * @generated from protobuf field: int64 appointment_id = 6;
     */
    appointmentId: bigint;
    /**
     * @generated from protobuf field: int32 scheduled_time = 7;
     */
    scheduledTime: number;
    /**
     * @generated from protobuf field: int32 scheduled_date = 8;
     */
    scheduledDate: number;
    /**
     * @generated from protobuf field: repeated int32 scheduled_weekdays = 9;
     */
    scheduledWeekdays: number[];
    /**
     * @generated from protobuf field: int32 show_duration = 10;
     */
    showDuration: number;
    /**
     * @generated from protobuf field: string date_text = 11;
     */
    dateText: string;
    /**
     * @generated from protobuf field: string time_text = 12;
     */
    timeText: string;
}
/**
 * @generated from protobuf message im.HighlightDataAnswer
 */
export interface HighlightDataAnswer {
    /**
     * @generated from protobuf field: string scene = 1;
     */
    scene: string;
    /**
     * @generated from protobuf field: int64 answer_id = 2;
     */
    answerId: bigint;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * @generated from protobuf field: string answer = 4;
     */
    answer: string;
    /**
     * @generated from protobuf field: int64 audience_number = 5;
     */
    audienceNumber: bigint;
    /**
     * @generated from protobuf field: string audience_number_str = 6;
     */
    audienceNumberStr: string;
    /**
     * @generated from protobuf field: string nick_name = 7;
     */
    nickName: string;
    /**
     * @generated from protobuf field: int64 anchor_id = 8;
     */
    anchorId: bigint;
    /**
     * @generated from protobuf field: int64 commenter_id = 9;
     */
    commenterId: bigint;
    /**
     * @generated from protobuf field: int64 question_msg_id = 10;
     */
    questionMsgId: bigint;
    /**
     * @generated from protobuf field: int64 answer_msg_id = 11;
     */
    answerMsgId: bigint;
    /**
     * @generated from protobuf field: im.PinCommon pin_common = 255;
     */
    pinCommon?: PinCommon;
}
/**
 * @generated from protobuf message im.HighlightDataComment
 */
export interface HighlightDataComment {
    /**
     * @generated from protobuf field: string scene = 1;
     */
    scene: string;
    /**
     * @generated from protobuf field: int64 chat_id = 2;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string nick_name = 4;
     */
    nickName: string;
    /**
     * @generated from protobuf field: int64 commenter_id = 5;
     */
    commenterId: bigint;
    /**
     * @generated from protobuf field: int64 msg_id = 6;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: int64 pre_id = 7;
     */
    preId: bigint;
    /**
     * @generated from protobuf field: im.PinCommon pin_common = 255;
     */
    pinCommon?: PinCommon;
}
/**
 * @generated from protobuf message im.HighlightDataVideo
 */
export interface HighlightDataVideo {
    /**
     * @generated from protobuf field: string scene = 1;
     */
    scene: string;
    /**
     * @generated from protobuf field: int64 video_pin_id = 2;
     */
    videoPinId: bigint;
    /**
     * @generated from protobuf field: string url = 3;
     */
    url: string;
    /**
     * @generated from protobuf field: int64 item_id = 4;
     */
    itemId: bigint;
    /**
     * @generated from protobuf field: int64 item_type = 5;
     */
    itemType: bigint;
    /**
     * @generated from protobuf field: string title = 6;
     */
    title: string;
    /**
     * @generated from protobuf field: string nick_name = 7;
     */
    nickName: string;
    /**
     * @generated from protobuf field: int64 msg_id = 8;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: int64 role = 9;
     */
    role: bigint;
    /**
     * @generated from protobuf field: im.PinCommon pin_common = 255;
     */
    pinCommon?: PinCommon;
}
/**
 * @generated from protobuf message im.HighlightDataMicroApp
 */
export interface HighlightDataMicroApp {
    /**
     * @generated from protobuf field: string scene = 1;
     */
    scene: string;
    /**
     * @generated from protobuf field: int64 pin_id = 2;
     */
    pinId: bigint;
    /**
     * @generated from protobuf field: int64 msg_id = 3;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: string micro_app_id = 4;
     */
    microAppId: string;
    /**
     * @generated from protobuf field: string micro_app_avatar = 5;
     */
    microAppAvatar: string;
    /**
     * @generated from protobuf field: string micro_app_name = 6;
     */
    microAppName: string;
    /**
     * @generated from protobuf field: string micro_app_introduction = 7;
     */
    microAppIntroduction: string;
    /**
     * @generated from protobuf field: string schema = 8;
     */
    schema: string;
    /**
     * @generated from protobuf field: string nick_name = 9;
     */
    nickName: string;
    /**
     * @generated from protobuf field: im.PinCommon pin_common = 255;
     */
    pinCommon?: PinCommon;
}
/**
 * @generated from protobuf message im.HighlightDataImCommon
 */
export interface HighlightDataImCommon {
    /**
     * @generated from protobuf field: string scene = 1;
     */
    scene: string;
    /**
     * @generated from protobuf field: int64 pin_id = 2;
     */
    pinId: bigint;
    /**
     * @generated from protobuf field: int64 msg_id = 3;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: data.Text display_text = 5;
     */
    displayText?: Text;
    /**
     * @generated from protobuf field: im.PinCommon pin_common = 255;
     */
    pinCommon?: PinCommon;
}
/**
 * @generated from protobuf message im.InputPanelComponentSyncData
 */
export interface InputPanelComponentSyncData {
    /**
     * @generated from protobuf field: repeated im.PanelComponentItem data = 1;
     */
    data: PanelComponentItem[];
}
/**
 * @generated from protobuf message im.PanelComponentItem
 */
export interface PanelComponentItem {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number;
    /**
     * @generated from protobuf field: data.Image icon = 21;
     */
    icon?: Image;
    /**
     * @generated from protobuf field: string display_text = 22;
     */
    displayText: string;
    /**
     * @generated from protobuf field: string schema_url = 23;
     */
    schemaUrl: string;
}
/**
 * @generated from protobuf message im.WebcastInteractControlSyncData
 */
export interface WebcastInteractControlSyncData {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string room_id = 2;
     */
    roomId: string;
    /**
     * @generated from protobuf field: string time_stamp = 3;
     */
    timeStamp: string;
    /**
     * @generated from protobuf field: repeated im.ClientOperation anchor_operation = 4;
     */
    anchorOperation: ClientOperation[];
    /**
     * @generated from protobuf field: repeated im.ClientOperation audience_operation = 5;
     */
    audienceOperation: ClientOperation[];
}
/**
 * @generated from protobuf message im.IntercomChangeSyncData
 */
export interface IntercomChangeSyncData {
    /**
     * @generated from protobuf field: int64 intercom_status = 1;
     */
    intercomStatus: bigint;
    /**
     * @generated from protobuf field: int64 close_reason = 2;
     */
    closeReason: bigint;
}
/**
 * @generated from protobuf message im.KtvDressSyncData
 */
export interface KtvDressSyncData {
    /**
     * @generated from protobuf field: data.MidiSkinDressInfo dress_info = 1;
     */
    dressInfo?: MidiSkinDressInfo;
    /**
     * @generated from protobuf field: int64 song_id = 2;
     */
    songId: bigint;
    /**
     * @generated from protobuf field: int64 singer_id = 3;
     */
    singerId: bigint;
}
/**
 * @generated from protobuf message im.KtvStreamSingSyncData
 */
export interface KtvStreamSingSyncData {
    /**
     * @generated from protobuf field: data.KtvSongStruct song = 1;
     */
    song?: KtvSongStruct;
    /**
     * @generated from protobuf field: data.KtvAtmosphereVideoInfo video_info = 2;
     */
    videoInfo?: KtvAtmosphereVideoInfo;
    /**
     * @generated from protobuf field: int64 time_stamp = 3;
     */
    timeStamp: bigint;
    /**
     * @generated from protobuf field: int32 action = 4;
     */
    action: number;
}
/**
 * @generated from protobuf message im.LikeEggSyncData
 */
export interface LikeEggSyncData {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
    /**
     * @generated from protobuf field: im.LikeEggTrayColor trayColor = 2;
     */
    trayColor?: LikeEggTrayColor;
    /**
     * @generated from protobuf field: int64 user_start_timestamp = 3;
     */
    userStartTimestamp: bigint;
    /**
     * @generated from protobuf field: int64 user_start_second = 4;
     */
    userStartSecond: bigint;
    /**
     * @generated from protobuf field: int64 duration = 5;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: im.LikeEggJumpDetail jump_detail = 6;
     */
    jumpDetail?: LikeEggJumpDetail;
    /**
     * @generated from protobuf field: string prepare_content = 7;
     */
    prepareContent: string;
    /**
     * @generated from protobuf field: int64 prepare_duration = 8;
     */
    prepareDuration: bigint;
    /**
     * @generated from protobuf field: string finish_content = 9;
     */
    finishContent: string;
    /**
     * @generated from protobuf field: int64 finish_duration = 10;
     */
    finishDuration: bigint;
    /**
     * @generated from protobuf field: im.Common common = 255;
     */
    common?: Common;
}
/**
 * @generated from protobuf message im.LikeEggJumpDetail
 */
export interface LikeEggJumpDetail {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: im.GroupPhotoJumpDetail photo_jump_detail = 2;
     */
    photoJumpDetail?: GroupPhotoJumpDetail;
    /**
     * @generated from protobuf field: im.TemplatePhotoJumpDetail template_photo_jump_detail = 3;
     */
    templatePhotoJumpDetail?: TemplatePhotoJumpDetail;
}
/**
 * @generated from protobuf message im.GroupPhotoJumpDetail
 */
export interface GroupPhotoJumpDetail {
    /**
     * @generated from protobuf field: data.Image group_photo = 1;
     */
    groupPhoto?: Image;
    /**
     * @generated from protobuf field: repeated im.FieldLocation location_list = 2;
     */
    locationList: FieldLocation[];
    /**
     * @generated from protobuf field: int32 width = 4;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 5;
     */
    height: number;
    /**
     * @generated from protobuf field: string share_content = 6;
     */
    shareContent: string;
}
/**
 * @generated from protobuf message im.TemplatePhotoJumpDetail
 */
export interface TemplatePhotoJumpDetail {
    /**
     * @generated from protobuf field: repeated im.TemplateInfo template_list = 1;
     */
    templateList: TemplateInfo[];
    /**
     * @generated from protobuf field: string template_panel_title = 2;
     */
    templatePanelTitle: string;
    /**
     * @generated from protobuf field: string photo_panel_title = 3;
     */
    photoPanelTitle: string;
    /**
     * @generated from protobuf field: data.Image bg_photo = 4;
     */
    bgPhoto?: Image;
}
/**
 * @generated from protobuf message im.TemplateInfo
 */
export interface TemplateInfo {
    /**
     * @generated from protobuf field: string template_id = 1;
     */
    templateId: string;
    /**
     * @generated from protobuf field: data.Image template_photo = 2;
     */
    templatePhoto?: Image;
    /**
     * @generated from protobuf field: string author_name = 3;
     */
    authorName: string;
    /**
     * @generated from protobuf field: string template_title = 4;
     */
    templateTitle: string;
    /**
     * @generated from protobuf field: bool support_replace = 5;
     */
    supportReplace: boolean;
    /**
     * @generated from protobuf field: string replace_content = 6;
     */
    replaceContent: string;
}
/**
 * @generated from protobuf message im.LikeEggTrayColor
 */
export interface LikeEggTrayColor {
    /**
     * @generated from protobuf field: string background_color = 1;
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: string bar_color = 2;
     */
    barColor: string;
}
/**
 * @generated from protobuf message im.FieldLocation
 */
export interface FieldLocation {
    /**
     * @generated from protobuf field: int32 location_x = 1;
     */
    locationX: number;
    /**
     * @generated from protobuf field: int32 location_y = 2;
     */
    locationY: number;
}
/**
 * @generated from protobuf message im.RoomLinkMicSyncData
 */
export interface RoomLinkMicSyncData {
    /**
     * @generated from protobuf field: repeated data.ListUser linked_users = 1;
     */
    linkedUsers: ListUser[];
    /**
     * @generated from protobuf field: data.LinkerBaseInfo linker_base_info = 3;
     */
    linkerBaseInfo?: LinkerBaseInfo;
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem locked_positions = 4;
     */
    lockedPositions: LinkmicPositionItem[];
    /**
     * @generated from protobuf field: repeated data.LinkmicPositionItem positions = 5;
     */
    positions: LinkmicPositionItem[];
    /**
     * @generated from protobuf field: int64 placeholder = 6;
     */
    placeholder: bigint;
}
/**
 * @generated from protobuf message im.RoomLinkMicAnchorSettingsSyncData
 */
export interface RoomLinkMicAnchorSettingsSyncData {
    /**
     * @generated from protobuf field: repeated data.LinkmicSetting settings = 1;
     */
    settings: LinkmicSetting[];
}
/**
 * @generated from protobuf message im.LotteryInfoSyncData
 */
export interface LotteryInfoSyncData {
    /**
     * @generated from protobuf field: int64 lottery_id = 1;
     */
    lotteryId: bigint;
    /**
     * @generated from protobuf field: int64 lucky_count = 2;
     */
    luckyCount: bigint;
    /**
     * @generated from protobuf field: int64 candidate_total_count = 3;
     */
    candidateTotalCount: bigint;
    /**
     * @generated from protobuf field: int64 last_candidate_total_count_surge_timestamp = 4;
     */
    lastCandidateTotalCountSurgeTimestamp: bigint;
}
/**
 * @generated from protobuf message im.MatchDynamicIslandSyncData
 */
export interface MatchDynamicIslandSyncData {
    /**
     * @generated from protobuf field: im.Common common = 1;
     */
    common?: Common;
    /**
     * @generated from protobuf field: string data = 2;
     */
    data: string;
}
/**
 * @generated from protobuf message im.MicroAppStartSyncData
 */
export interface MicroAppStartSyncData {
    /**
     * @generated from protobuf field: string app_id = 1;
     */
    appId: string;
    /**
     * @generated from protobuf field: string audience_start_msg = 2;
     */
    audienceStartMsg: string;
    /**
     * @generated from protobuf field: string anchor_start_msg = 3;
     */
    anchorStartMsg: string;
}
/**
 * @generated from protobuf message im.MoreLiveSyncData
 */
export interface MoreLiveSyncData {
    /**
     * @generated from protobuf field: data.MoreLiveEntrance info = 1;
     */
    info?: MoreLiveEntrance;
}
/**
 * @generated from protobuf message im.OfChannelShowlistSyncData
 */
export interface OfChannelShowlistSyncData {
    /**
     * @generated from protobuf field: int64 channel_uid = 1;
     */
    channelUid: bigint;
    /**
     * @generated from protobuf field: int64 channel_anchor_id = 2;
     */
    channelAnchorId: bigint;
    /**
     * @generated from protobuf field: string showlist_text = 3;
     */
    showlistText: string;
    /**
     * @generated from protobuf field: string showlist_schema = 4;
     */
    showlistSchema: string;
    /**
     * @generated from protobuf field: string showlist_name = 5;
     */
    showlistName: string;
    /**
     * @generated from protobuf field: string channel_name = 6;
     */
    channelName: string;
    /**
     * @generated from protobuf field: int64 showlist_id = 7;
     */
    showlistId: bigint;
}
/**
 * @generated from protobuf message im.PermissionCheckTriggerSyncData
 */
export interface PermissionCheckTriggerSyncData {
    /**
     * @generated from protobuf field: int64 trigger = 1;
     */
    trigger: bigint;
    /**
     * @generated from protobuf field: int64 max_delay_time = 2;
     */
    maxDelayTime: bigint;
}
/**
 * @generated from protobuf message im.PreviewCommentSyncData
 */
export interface PreviewCommentSyncData {
    /**
     * @generated from protobuf field: string hot_comment = 1;
     */
    hotComment: string;
    /**
     * @generated from protobuf field: int64 hot_comment_time = 2;
     */
    hotCommentTime: bigint;
    /**
     * @generated from protobuf field: int64 hot_comment_sequence_id = 3;
     */
    hotCommentSequenceId: bigint;
}
/**
 * @generated from protobuf message im.PreviewControlSyncData
 */
export interface PreviewControlSyncData {
    /**
     * @generated from protobuf field: int64 action = 1;
     */
    action: bigint;
}
/**
 * @generated from protobuf message im.PreviewExtendAreaSyncData
 */
export interface PreviewExtendAreaSyncData {
    /**
     * @generated from protobuf field: data.Image extend_icon = 1;
     */
    extendIcon?: Image;
    /**
     * @generated from protobuf field: string extend_pre_text = 2;
     */
    extendPreText: string;
    /**
     * @generated from protobuf field: string extend_text = 3;
     */
    extendText: string;
    /**
     * @generated from protobuf field: int32 extend_type = 4;
     */
    extendType: number;
    /**
     * @generated from protobuf field: string extra = 5;
     */
    extra: string;
    /**
     * @generated from protobuf field: int32 use_marquee = 6;
     */
    useMarquee: number;
    /**
     * @generated from protobuf field: int32 icon_type = 7;
     */
    iconType: number;
    /**
     * @generated from protobuf field: repeated im.PreviewExtendAreaSyncData.Part right_part = 8;
     */
    rightPart: PreviewExtendAreaSyncData_Part[];
    /**
     * @generated from protobuf field: string button_part = 9;
     */
    buttonPart: string;
    /**
     * @generated from protobuf field: repeated im.PreviewExtendAreaSyncData.Part mid_part = 10;
     */
    midPart: PreviewExtendAreaSyncData_Part[];
    /**
     * @generated from protobuf field: bool need_delimiter = 11;
     */
    needDelimiter: boolean;
    /**
     * @generated from protobuf field: repeated im.PreviewExtendAreaSyncData.Part bottom_part = 12;
     */
    bottomPart: PreviewExtendAreaSyncData_Part[];
    /**
     * @generated from protobuf field: int32 ui_type = 13;
     */
    uiType: number;
    /**
     * @generated from protobuf field: int32 version = 14;
     */
    version: number;
    /**
     * @generated from protobuf field: im.PreviewExtendAreaSyncData.ActionConfig action_cfg = 17;
     */
    actionCfg?: PreviewExtendAreaSyncData_ActionConfig;
    /**
     * @generated from protobuf field: bool use_pass_through_extra_json = 18;
     */
    usePassThroughExtraJson: boolean;
    /**
     * @generated from protobuf field: string pass_through_extra_json = 19;
     */
    passThroughExtraJson: string;
    /**
     * @generated from protobuf field: string extra_business = 21;
     */
    extraBusiness: string;
}
/**
 * @generated from protobuf message im.PreviewExtendAreaSyncData.Part
 */
export interface PreviewExtendAreaSyncData_Part {
    /**
     * @generated from protobuf field: int32 fontSize = 1;
     */
    fontSize: number;
    /**
     * @generated from protobuf field: int32 interval = 2;
     */
    interval: number;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: bool cuttable = 4;
     */
    cuttable: boolean;
    /**
     * @generated from protobuf field: bool deleted = 5;
     */
    deleted: boolean;
    /**
     * @generated from protobuf field: string font_color = 6;
     */
    fontColor: string;
    /**
     * @generated from protobuf field: bool bold = 7;
     */
    bold: boolean;
}
/**
 * @generated from protobuf message im.PreviewExtendAreaSyncData.ActionConfig
 */
export interface PreviewExtendAreaSyncData_ActionConfig {
    /**
     * @generated from protobuf field: int32 areaAction = 1;
     */
    areaAction: number;
}
/**
 * @generated from protobuf message im.RiskAdviseSyncData
 */
export interface RiskAdviseSyncData {
    /**
     * @generated from protobuf field: int64 create_time = 1;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: data.Text advise_text = 2;
     */
    adviseText?: Text;
}
/**
 * @generated from protobuf message im.RoomChannelSettingsSyncData
 */
export interface RoomChannelSettingsSyncData {
    /**
     * @generated from protobuf field: int64 channel_id = 1;
     */
    channelId: bigint;
    /**
     * @generated from protobuf field: bool link_mic_switch = 2;
     */
    linkMicSwitch: boolean;
    /**
     * @generated from protobuf field: bool enter_approve_switch = 3;
     */
    enterApproveSwitch: boolean;
    /**
     * @generated from protobuf field: bool member_invite_switch = 4;
     */
    memberInviteSwitch: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class RoomBorderMessage$Type extends MessageType<RoomBorderMessage> {
    constructor() {
        super("im.RoomBorderMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "border_info", kind: "message", T: () => BorderInfo }
        ]);
    }
    create(value?: PartialMessage<RoomBorderMessage>): RoomBorderMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBorderMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBorderMessage): RoomBorderMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.BorderInfo border_info */ 2:
                    message.borderInfo = BorderInfo.internalBinaryRead(reader, reader.uint32(), options, message.borderInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBorderMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.BorderInfo border_info = 2; */
        if (message.borderInfo)
            BorderInfo.internalBinaryWrite(message.borderInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomBorderMessage
 */
export const RoomBorderMessage = new RoomBorderMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Common$Type extends MessageType<Common> {
    constructor() {
        super("im.Common", [
            { no: 1, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "monitor", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "is_show_msg", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "describe", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "display_text", kind: "message", T: () => Text },
            { no: 9, name: "fold_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "anchor_fold_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "priority_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "msg_process_filter_k", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "msg_process_filter_v", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "user", kind: "message", T: () => User },
            { no: 16, name: "room", kind: "message", T: () => Room },
            { no: 17, name: "anchor_fold_type_v2", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "process_at_sei_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "random_dispatch_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "is_dispatch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "diff_sei2abs_second", kind: "scalar", jsonName: "diffSei2absSecond", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "anchor_fold_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Common>): Common {
        const message = { method: "", msgId: 0n, roomId: 0n, createTime: 0n, monitor: 0, isShowMsg: false, describe: "", foldType: 0n, anchorFoldType: 0n, priorityScore: 0n, logId: "", msgProcessFilterK: "", msgProcessFilterV: "", anchorFoldTypeV2: 0n, processAtSeiTimeMs: 0n, randomDispatchMs: 0n, isDispatch: false, channelId: 0n, diffSei2AbsSecond: 0n, anchorFoldDuration: 0n, appId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Common>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Common): Common {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string method */ 1:
                    message.method = reader.string();
                    break;
                case /* int64 msg_id */ 2:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 3:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 create_time */ 4:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int32 monitor */ 5:
                    message.monitor = reader.int32();
                    break;
                case /* bool is_show_msg */ 6:
                    message.isShowMsg = reader.bool();
                    break;
                case /* string describe */ 7:
                    message.describe = reader.string();
                    break;
                case /* data.Text display_text */ 8:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* int64 fold_type */ 9:
                    message.foldType = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_fold_type */ 10:
                    message.anchorFoldType = reader.int64().toBigInt();
                    break;
                case /* int64 priority_score */ 11:
                    message.priorityScore = reader.int64().toBigInt();
                    break;
                case /* string log_id */ 12:
                    message.logId = reader.string();
                    break;
                case /* string msg_process_filter_k */ 13:
                    message.msgProcessFilterK = reader.string();
                    break;
                case /* string msg_process_filter_v */ 14:
                    message.msgProcessFilterV = reader.string();
                    break;
                case /* data.User user */ 15:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.Room room */ 16:
                    message.room = Room.internalBinaryRead(reader, reader.uint32(), options, message.room);
                    break;
                case /* int64 anchor_fold_type_v2 */ 17:
                    message.anchorFoldTypeV2 = reader.int64().toBigInt();
                    break;
                case /* int64 process_at_sei_time_ms */ 18:
                    message.processAtSeiTimeMs = reader.int64().toBigInt();
                    break;
                case /* int64 random_dispatch_ms */ 19:
                    message.randomDispatchMs = reader.int64().toBigInt();
                    break;
                case /* bool is_dispatch */ 20:
                    message.isDispatch = reader.bool();
                    break;
                case /* int64 channel_id */ 21:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 diff_sei2abs_second = 22 [json_name = "diffSei2absSecond"];*/ 22:
                    message.diffSei2AbsSecond = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_fold_duration */ 23:
                    message.anchorFoldDuration = reader.int64().toBigInt();
                    break;
                case /* int64 app_id */ 24:
                    message.appId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Common, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string method = 1; */
        if (message.method !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.method);
        /* int64 msg_id = 2; */
        if (message.msgId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgId);
        /* int64 room_id = 3; */
        if (message.roomId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.roomId);
        /* int64 create_time = 4; */
        if (message.createTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.createTime);
        /* int32 monitor = 5; */
        if (message.monitor !== 0)
            writer.tag(5, WireType.Varint).int32(message.monitor);
        /* bool is_show_msg = 6; */
        if (message.isShowMsg !== false)
            writer.tag(6, WireType.Varint).bool(message.isShowMsg);
        /* string describe = 7; */
        if (message.describe !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.describe);
        /* data.Text display_text = 8; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 fold_type = 9; */
        if (message.foldType !== 0n)
            writer.tag(9, WireType.Varint).int64(message.foldType);
        /* int64 anchor_fold_type = 10; */
        if (message.anchorFoldType !== 0n)
            writer.tag(10, WireType.Varint).int64(message.anchorFoldType);
        /* int64 priority_score = 11; */
        if (message.priorityScore !== 0n)
            writer.tag(11, WireType.Varint).int64(message.priorityScore);
        /* string log_id = 12; */
        if (message.logId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.logId);
        /* string msg_process_filter_k = 13; */
        if (message.msgProcessFilterK !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.msgProcessFilterK);
        /* string msg_process_filter_v = 14; */
        if (message.msgProcessFilterV !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.msgProcessFilterV);
        /* data.User user = 15; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* data.Room room = 16; */
        if (message.room)
            Room.internalBinaryWrite(message.room, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* int64 anchor_fold_type_v2 = 17; */
        if (message.anchorFoldTypeV2 !== 0n)
            writer.tag(17, WireType.Varint).int64(message.anchorFoldTypeV2);
        /* int64 process_at_sei_time_ms = 18; */
        if (message.processAtSeiTimeMs !== 0n)
            writer.tag(18, WireType.Varint).int64(message.processAtSeiTimeMs);
        /* int64 random_dispatch_ms = 19; */
        if (message.randomDispatchMs !== 0n)
            writer.tag(19, WireType.Varint).int64(message.randomDispatchMs);
        /* bool is_dispatch = 20; */
        if (message.isDispatch !== false)
            writer.tag(20, WireType.Varint).bool(message.isDispatch);
        /* int64 channel_id = 21; */
        if (message.channelId !== 0n)
            writer.tag(21, WireType.Varint).int64(message.channelId);
        /* int64 diff_sei2abs_second = 22 [json_name = "diffSei2absSecond"]; */
        if (message.diffSei2AbsSecond !== 0n)
            writer.tag(22, WireType.Varint).int64(message.diffSei2AbsSecond);
        /* int64 anchor_fold_duration = 23; */
        if (message.anchorFoldDuration !== 0n)
            writer.tag(23, WireType.Varint).int64(message.anchorFoldDuration);
        /* int64 app_id = 24; */
        if (message.appId !== 0n)
            writer.tag(24, WireType.Varint).int64(message.appId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Common
 */
export const Common = new Common$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublicAreaCommon$Type extends MessageType<PublicAreaCommon> {
    constructor() {
        super("im.PublicAreaCommon", [
            { no: 1, name: "user_label", kind: "message", T: () => Image },
            { no: 2, name: "user_consume_in_room", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_send_gift_cnt_in_room", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "individual_priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "support_pin", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "suffix_text", kind: "message", T: () => SuffixText },
            { no: 8, name: "im_action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "forbidden_profile", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "reply_resp", kind: "message", T: () => ChatReplyRespInfo }
        ]);
    }
    create(value?: PartialMessage<PublicAreaCommon>): PublicAreaCommon {
        const message = { userConsumeInRoom: 0n, userSendGiftCntInRoom: 0n, individualPriority: 0n, supportPin: 0n, imAction: 0, forbiddenProfile: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublicAreaCommon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublicAreaCommon): PublicAreaCommon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image user_label */ 1:
                    message.userLabel = Image.internalBinaryRead(reader, reader.uint32(), options, message.userLabel);
                    break;
                case /* int64 user_consume_in_room */ 2:
                    message.userConsumeInRoom = reader.int64().toBigInt();
                    break;
                case /* int64 user_send_gift_cnt_in_room */ 3:
                    message.userSendGiftCntInRoom = reader.int64().toBigInt();
                    break;
                case /* int64 individual_priority */ 4:
                    message.individualPriority = reader.int64().toBigInt();
                    break;
                case /* int64 support_pin */ 6:
                    message.supportPin = reader.int64().toBigInt();
                    break;
                case /* im.SuffixText suffix_text */ 7:
                    message.suffixText = SuffixText.internalBinaryRead(reader, reader.uint32(), options, message.suffixText);
                    break;
                case /* int32 im_action */ 8:
                    message.imAction = reader.int32();
                    break;
                case /* bool forbidden_profile */ 9:
                    message.forbiddenProfile = reader.bool();
                    break;
                case /* data.ChatReplyRespInfo reply_resp */ 10:
                    message.replyResp = ChatReplyRespInfo.internalBinaryRead(reader, reader.uint32(), options, message.replyResp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublicAreaCommon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image user_label = 1; */
        if (message.userLabel)
            Image.internalBinaryWrite(message.userLabel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_consume_in_room = 2; */
        if (message.userConsumeInRoom !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userConsumeInRoom);
        /* int64 user_send_gift_cnt_in_room = 3; */
        if (message.userSendGiftCntInRoom !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userSendGiftCntInRoom);
        /* int64 individual_priority = 4; */
        if (message.individualPriority !== 0n)
            writer.tag(4, WireType.Varint).int64(message.individualPriority);
        /* int64 support_pin = 6; */
        if (message.supportPin !== 0n)
            writer.tag(6, WireType.Varint).int64(message.supportPin);
        /* im.SuffixText suffix_text = 7; */
        if (message.suffixText)
            SuffixText.internalBinaryWrite(message.suffixText, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 im_action = 8; */
        if (message.imAction !== 0)
            writer.tag(8, WireType.Varint).int32(message.imAction);
        /* bool forbidden_profile = 9; */
        if (message.forbiddenProfile !== false)
            writer.tag(9, WireType.Varint).bool(message.forbiddenProfile);
        /* data.ChatReplyRespInfo reply_resp = 10; */
        if (message.replyResp)
            ChatReplyRespInfo.internalBinaryWrite(message.replyResp, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PublicAreaCommon
 */
export const PublicAreaCommon = new PublicAreaCommon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuffixText$Type extends MessageType<SuffixText> {
    constructor() {
        super("im.SuffixText", [
            { no: 1, name: "biz_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<SuffixText>): SuffixText {
        const message = { bizType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuffixText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuffixText): SuffixText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 biz_type */ 1:
                    message.bizType = reader.int64().toBigInt();
                    break;
                case /* data.Text text */ 2:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuffixText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 biz_type = 1; */
        if (message.bizType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.bizType);
        /* data.Text text = 2; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SuffixText
 */
export const SuffixText = new SuffixText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LandscapeAreaCommon$Type extends MessageType<LandscapeAreaCommon> {
    constructor() {
        super("im.LandscapeAreaCommon", [
            { no: 1, name: "show_head", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "show_nickname", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "show_font_color", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "color_value", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "comment_type_tags", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LandscapeAreaCommon>): LandscapeAreaCommon {
        const message = { showHead: false, showNickname: false, showFontColor: false, colorValue: [], commentTypeTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LandscapeAreaCommon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LandscapeAreaCommon): LandscapeAreaCommon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool show_head */ 1:
                    message.showHead = reader.bool();
                    break;
                case /* bool show_nickname */ 2:
                    message.showNickname = reader.bool();
                    break;
                case /* bool show_font_color */ 3:
                    message.showFontColor = reader.bool();
                    break;
                case /* repeated string color_value */ 4:
                    message.colorValue.push(reader.string());
                    break;
                case /* repeated int32 comment_type_tags */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.commentTypeTags.push(reader.int32());
                    else
                        message.commentTypeTags.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LandscapeAreaCommon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool show_head = 1; */
        if (message.showHead !== false)
            writer.tag(1, WireType.Varint).bool(message.showHead);
        /* bool show_nickname = 2; */
        if (message.showNickname !== false)
            writer.tag(2, WireType.Varint).bool(message.showNickname);
        /* bool show_font_color = 3; */
        if (message.showFontColor !== false)
            writer.tag(3, WireType.Varint).bool(message.showFontColor);
        /* repeated string color_value = 4; */
        for (let i = 0; i < message.colorValue.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.colorValue[i]);
        /* repeated int32 comment_type_tags = 5; */
        if (message.commentTypeTags.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.commentTypeTags.length; i++)
                writer.int32(message.commentTypeTags[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LandscapeAreaCommon
 */
export const LandscapeAreaCommon = new LandscapeAreaCommon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlexImageStruct$Type extends MessageType<FlexImageStruct> {
    constructor() {
        super("im.FlexImageStruct", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "flex_setting", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "text_setting", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "top_border_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FlexImageStruct>): FlexImageStruct {
        const message = { urlList: [], uri: "", flexSetting: [], textSetting: [], topBorderHeight: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlexImageStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlexImageStruct): FlexImageStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* repeated int64 flex_setting */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.flexSetting.push(reader.int64().toBigInt());
                    else
                        message.flexSetting.push(reader.int64().toBigInt());
                    break;
                case /* repeated int64 text_setting */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.textSetting.push(reader.int64().toBigInt());
                    else
                        message.textSetting.push(reader.int64().toBigInt());
                    break;
                case /* int64 top_border_height */ 5:
                    message.topBorderHeight = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlexImageStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* repeated int64 flex_setting = 3; */
        if (message.flexSetting.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.flexSetting.length; i++)
                writer.int64(message.flexSetting[i]);
            writer.join();
        }
        /* repeated int64 text_setting = 4; */
        if (message.textSetting.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.textSetting.length; i++)
                writer.int64(message.textSetting[i]);
            writer.join();
        }
        /* int64 top_border_height = 5; */
        if (message.topBorderHeight !== 0n)
            writer.tag(5, WireType.Varint).int64(message.topBorderHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FlexImageStruct
 */
export const FlexImageStruct = new FlexImageStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonBubbleConfig$Type extends MessageType<CommonBubbleConfig> {
    constructor() {
        super("im.CommonBubbleConfig", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rich_text", kind: "message", T: () => Text },
            { no: 4, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "background_image", kind: "message", T: () => FlexImageStruct },
            { no: 6, name: "arrow_image", kind: "message", T: () => Image },
            { no: 7, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "arrow_position", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommonBubbleConfig>): CommonBubbleConfig {
        const message = { content: "", duration: 0n, schemeUrl: "", messageType: 0, arrowPosition: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonBubbleConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonBubbleConfig): CommonBubbleConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* data.Text rich_text */ 3:
                    message.richText = Text.internalBinaryRead(reader, reader.uint32(), options, message.richText);
                    break;
                case /* string scheme_url */ 4:
                    message.schemeUrl = reader.string();
                    break;
                case /* im.FlexImageStruct background_image */ 5:
                    message.backgroundImage = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* data.Image arrow_image */ 6:
                    message.arrowImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.arrowImage);
                    break;
                case /* int32 message_type */ 7:
                    message.messageType = reader.int32();
                    break;
                case /* int32 arrow_position */ 8:
                    message.arrowPosition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonBubbleConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* data.Text rich_text = 3; */
        if (message.richText)
            Text.internalBinaryWrite(message.richText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string scheme_url = 4; */
        if (message.schemeUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.schemeUrl);
        /* im.FlexImageStruct background_image = 5; */
        if (message.backgroundImage)
            FlexImageStruct.internalBinaryWrite(message.backgroundImage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image arrow_image = 6; */
        if (message.arrowImage)
            Image.internalBinaryWrite(message.arrowImage, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 7; */
        if (message.messageType !== 0)
            writer.tag(7, WireType.Varint).int32(message.messageType);
        /* int32 arrow_position = 8; */
        if (message.arrowPosition !== 0)
            writer.tag(8, WireType.Varint).int32(message.arrowPosition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonBubbleConfig
 */
export const CommonBubbleConfig = new CommonBubbleConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityInteractiveMessage$Type extends MessageType<ActivityInteractiveMessage> {
    constructor() {
        super("im.ActivityInteractiveMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityInteractiveMessage>): ActivityInteractiveMessage {
        const message = { extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityInteractiveMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityInteractiveMessage): ActivityInteractiveMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string extra */ 2:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityInteractiveMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 2; */
        if (message.extra !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ActivityInteractiveMessage
 */
export const ActivityInteractiveMessage = new ActivityInteractiveMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityMagicAsianGamesMessage$Type extends MessageType<ActivityMagicAsianGamesMessage> {
    constructor() {
        super("im.ActivityMagicAsianGamesMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "push_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "push_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "platform", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "video_card", kind: "message", T: () => VideoCardPushModule },
            { no: 6, name: "medal_list", kind: "message", T: () => MedalRankListModule },
            { no: 7, name: "collect", kind: "message", T: () => CollectModule },
            { no: 8, name: "popular_star", kind: "message", T: () => ScheduleModule },
            { no: 9, name: "hot_live", kind: "message", T: () => LatestNewsModule }
        ]);
    }
    create(value?: PartialMessage<ActivityMagicAsianGamesMessage>): ActivityMagicAsianGamesMessage {
        const message = { pushId: "", pushContent: "", platform: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityMagicAsianGamesMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityMagicAsianGamesMessage): ActivityMagicAsianGamesMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string push_id */ 2:
                    message.pushId = reader.string();
                    break;
                case /* string push_content */ 3:
                    message.pushContent = reader.string();
                    break;
                case /* int32 platform */ 4:
                    message.platform = reader.int32();
                    break;
                case /* im.VideoCardPushModule video_card */ 5:
                    message.videoCard = VideoCardPushModule.internalBinaryRead(reader, reader.uint32(), options, message.videoCard);
                    break;
                case /* im.MedalRankListModule medal_list */ 6:
                    message.medalList = MedalRankListModule.internalBinaryRead(reader, reader.uint32(), options, message.medalList);
                    break;
                case /* im.CollectModule collect */ 7:
                    message.collect = CollectModule.internalBinaryRead(reader, reader.uint32(), options, message.collect);
                    break;
                case /* im.ScheduleModule popular_star */ 8:
                    message.popularStar = ScheduleModule.internalBinaryRead(reader, reader.uint32(), options, message.popularStar);
                    break;
                case /* im.LatestNewsModule hot_live */ 9:
                    message.hotLive = LatestNewsModule.internalBinaryRead(reader, reader.uint32(), options, message.hotLive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityMagicAsianGamesMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string push_id = 2; */
        if (message.pushId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pushId);
        /* string push_content = 3; */
        if (message.pushContent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pushContent);
        /* int32 platform = 4; */
        if (message.platform !== 0)
            writer.tag(4, WireType.Varint).int32(message.platform);
        /* im.VideoCardPushModule video_card = 5; */
        if (message.videoCard)
            VideoCardPushModule.internalBinaryWrite(message.videoCard, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.MedalRankListModule medal_list = 6; */
        if (message.medalList)
            MedalRankListModule.internalBinaryWrite(message.medalList, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.CollectModule collect = 7; */
        if (message.collect)
            CollectModule.internalBinaryWrite(message.collect, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.ScheduleModule popular_star = 8; */
        if (message.popularStar)
            ScheduleModule.internalBinaryWrite(message.popularStar, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* im.LatestNewsModule hot_live = 9; */
        if (message.hotLive)
            LatestNewsModule.internalBinaryWrite(message.hotLive, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ActivityMagicAsianGamesMessage
 */
export const ActivityMagicAsianGamesMessage = new ActivityMagicAsianGamesMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkInfo$Type extends MessageType<LinkInfo> {
    constructor() {
        super("im.LinkInfo", [
            { no: 1, name: "link_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "link_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkInfo>): LinkInfo {
        const message = { linkType: 0, linkUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkInfo): LinkInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 link_type */ 1:
                    message.linkType = reader.int32();
                    break;
                case /* string link_url */ 2:
                    message.linkUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 link_type = 1; */
        if (message.linkType !== 0)
            writer.tag(1, WireType.Varint).int32(message.linkType);
        /* string link_url = 2; */
        if (message.linkUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.linkUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkInfo
 */
export const LinkInfo = new LinkInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageFilter$Type extends MessageType<PageFilter> {
    constructor() {
        super("im.PageFilter", [
            { no: 1, name: "highlight_group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PageFilter>): PageFilter {
        const message = { highlightGroupName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PageFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageFilter): PageFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string highlight_group_name */ 1:
                    message.highlightGroupName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string highlight_group_name = 1; */
        if (message.highlightGroupName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.highlightGroupName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PageFilter
 */
export const PageFilter = new PageFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoCardSize$Type extends MessageType<VideoCardSize> {
    constructor() {
        super("im.VideoCardSize", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VideoCardSize>): VideoCardSize {
        const message = { height: 0n, width: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoCardSize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoCardSize): VideoCardSize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toBigInt();
                    break;
                case /* int64 width */ 2:
                    message.width = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoCardSize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 height = 1; */
        if (message.height !== 0n)
            writer.tag(1, WireType.Varint).int64(message.height);
        /* int64 width = 2; */
        if (message.width !== 0n)
            writer.tag(2, WireType.Varint).int64(message.width);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoCardSize
 */
export const VideoCardSize = new VideoCardSize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsParam$Type extends MessageType<StatsParam> {
    constructor() {
        super("im.StatsParam", [
            { no: 1, name: "ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sec_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "r_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StatsParam>): StatsParam {
        const message = { epId: 0n, secId: 0n, rId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatsParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatsParam): StatsParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ep_id */ 1:
                    message.epId = reader.int64().toBigInt();
                    break;
                case /* int64 sec_id */ 2:
                    message.secId = reader.int64().toBigInt();
                    break;
                case /* int64 r_id */ 3:
                    message.rId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatsParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 ep_id = 1; */
        if (message.epId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.epId);
        /* int64 sec_id = 2; */
        if (message.secId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.secId);
        /* int64 r_id = 3; */
        if (message.rId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.StatsParam
 */
export const StatsParam = new StatsParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoCardPushModule$Type extends MessageType<VideoCardPushModule> {
    constructor() {
        super("im.VideoCardPushModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoBigCard },
            { no: 4, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoCardPushModule>): VideoCardPushModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoCardPushModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoCardPushModule): VideoCardPushModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* repeated im.VideoBigCard update_list */ 3:
                    message.updateList.push(VideoBigCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 4:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoCardPushModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* repeated im.VideoBigCard update_list = 3; */
        for (let i = 0; i < message.updateList.length; i++)
            VideoBigCard.internalBinaryWrite(message.updateList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 4; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoCardPushModule
 */
export const VideoCardPushModule = new VideoCardPushModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MedalRankListModule$Type extends MessageType<MedalRankListModule> {
    constructor() {
        super("im.MedalRankListModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RankItem },
            { no: 4, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MedalRankListModule>): MedalRankListModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MedalRankListModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MedalRankListModule): MedalRankListModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* repeated im.RankItem update_list */ 3:
                    message.updateList.push(RankItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 4:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MedalRankListModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* repeated im.RankItem update_list = 3; */
        for (let i = 0; i < message.updateList.length; i++)
            RankItem.internalBinaryWrite(message.updateList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 4; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MedalRankListModule
 */
export const MedalRankListModule = new MedalRankListModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CollectModule$Type extends MessageType<CollectModule> {
    constructor() {
        super("im.CollectModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Highlight },
            { no: 4, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CollectModule>): CollectModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CollectModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollectModule): CollectModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* repeated im.Highlight update_list */ 3:
                    message.updateList.push(Highlight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 4:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollectModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* repeated im.Highlight update_list = 3; */
        for (let i = 0; i < message.updateList.length; i++)
            Highlight.internalBinaryWrite(message.updateList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 4; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CollectModule
 */
export const CollectModule = new CollectModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScheduleModule$Type extends MessageType<ScheduleModule> {
    constructor() {
        super("im.ScheduleModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Match },
            { no: 4, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ScheduleModule>): ScheduleModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScheduleModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScheduleModule): ScheduleModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* repeated im.Match update_list */ 3:
                    message.updateList.push(Match.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 4:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScheduleModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* repeated im.Match update_list = 3; */
        for (let i = 0; i < message.updateList.length; i++)
            Match.internalBinaryWrite(message.updateList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 4; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ScheduleModule
 */
export const ScheduleModule = new ScheduleModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LatestNewsModule$Type extends MessageType<LatestNewsModule> {
    constructor() {
        super("im.LatestNewsModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => News },
            { no: 4, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LatestNewsModule>): LatestNewsModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LatestNewsModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LatestNewsModule): LatestNewsModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* repeated im.News update_list */ 3:
                    message.updateList.push(News.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 4:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LatestNewsModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* repeated im.News update_list = 3; */
        for (let i = 0; i < message.updateList.length; i++)
            News.internalBinaryWrite(message.updateList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 4; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LatestNewsModule
 */
export const LatestNewsModule = new LatestNewsModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoBigCard$Type extends MessageType<VideoBigCard> {
    constructor() {
        super("im.VideoBigCard", [
            { no: 1, name: "card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "corner_mark", kind: "message", T: () => VideoBigCard_CornerMark },
            { no: 6, name: "video_size", kind: "message", T: () => VideoCardSize },
            { no: 7, name: "background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "stats_param", kind: "message", T: () => StatsParam },
            { no: 10, name: "video_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "is_match", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "link_info", kind: "message", T: () => LinkInfo },
            { no: 255, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoBigCard>): VideoBigCard {
        const message = { cardType: 0, coverUrl: "", title: "", subTitle: "", backgroundUrl: "", uniqueId: "", videoSource: "", isMatch: false, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoBigCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoBigCard): VideoBigCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 card_type */ 1:
                    message.cardType = reader.int32();
                    break;
                case /* string cover_url */ 2:
                    message.coverUrl = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 4:
                    message.subTitle = reader.string();
                    break;
                case /* im.VideoBigCard.CornerMark corner_mark */ 5:
                    message.cornerMark = VideoBigCard_CornerMark.internalBinaryRead(reader, reader.uint32(), options, message.cornerMark);
                    break;
                case /* im.VideoCardSize video_size */ 6:
                    message.videoSize = VideoCardSize.internalBinaryRead(reader, reader.uint32(), options, message.videoSize);
                    break;
                case /* string background_url */ 7:
                    message.backgroundUrl = reader.string();
                    break;
                case /* string unique_id */ 8:
                    message.uniqueId = reader.string();
                    break;
                case /* im.StatsParam stats_param */ 9:
                    message.statsParam = StatsParam.internalBinaryRead(reader, reader.uint32(), options, message.statsParam);
                    break;
                case /* string video_source */ 10:
                    message.videoSource = reader.string();
                    break;
                case /* bool is_match */ 11:
                    message.isMatch = reader.bool();
                    break;
                case /* im.LinkInfo link_info */ 12:
                    message.linkInfo = LinkInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkInfo);
                    break;
                case /* string extra */ 255:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoBigCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 card_type = 1; */
        if (message.cardType !== 0)
            writer.tag(1, WireType.Varint).int32(message.cardType);
        /* string cover_url = 2; */
        if (message.coverUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.coverUrl);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 4; */
        if (message.subTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subTitle);
        /* im.VideoBigCard.CornerMark corner_mark = 5; */
        if (message.cornerMark)
            VideoBigCard_CornerMark.internalBinaryWrite(message.cornerMark, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.VideoCardSize video_size = 6; */
        if (message.videoSize)
            VideoCardSize.internalBinaryWrite(message.videoSize, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string background_url = 7; */
        if (message.backgroundUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.backgroundUrl);
        /* string unique_id = 8; */
        if (message.uniqueId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.uniqueId);
        /* im.StatsParam stats_param = 9; */
        if (message.statsParam)
            StatsParam.internalBinaryWrite(message.statsParam, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string video_source = 10; */
        if (message.videoSource !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.videoSource);
        /* bool is_match = 11; */
        if (message.isMatch !== false)
            writer.tag(11, WireType.Varint).bool(message.isMatch);
        /* im.LinkInfo link_info = 12; */
        if (message.linkInfo)
            LinkInfo.internalBinaryWrite(message.linkInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 255; */
        if (message.extra !== "")
            writer.tag(255, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoBigCard
 */
export const VideoBigCard = new VideoBigCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoBigCard_CornerMark$Type extends MessageType<VideoBigCard_CornerMark> {
    constructor() {
        super("im.VideoBigCard.CornerMark", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VideoBigCard_CornerMark>): VideoBigCard_CornerMark {
        const message = { type: 0, show: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoBigCard_CornerMark>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoBigCard_CornerMark): VideoBigCard_CornerMark {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bool show */ 2:
                    message.show = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoBigCard_CornerMark, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bool show = 2; */
        if (message.show !== false)
            writer.tag(2, WireType.Varint).bool(message.show);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoBigCard.CornerMark
 */
export const VideoBigCard_CornerMark = new VideoBigCard_CornerMark$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankItem$Type extends MessageType<RankItem> {
    constructor() {
        super("im.RankItem", [
            { no: 1, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "country_img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gold_medal", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "silver_medal", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "copper_medal", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "total_medal", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 255, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RankItem>): RankItem {
        const message = { rank: 0n, country: "", countryImgUrl: "", goldMedal: 0n, silverMedal: 0n, copperMedal: 0n, totalMedal: 0n, uniqueId: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RankItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RankItem): RankItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 rank */ 1:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* string country */ 2:
                    message.country = reader.string();
                    break;
                case /* string country_img_url */ 3:
                    message.countryImgUrl = reader.string();
                    break;
                case /* int64 gold_medal */ 4:
                    message.goldMedal = reader.int64().toBigInt();
                    break;
                case /* int64 silver_medal */ 5:
                    message.silverMedal = reader.int64().toBigInt();
                    break;
                case /* int64 copper_medal */ 6:
                    message.copperMedal = reader.int64().toBigInt();
                    break;
                case /* int64 total_medal */ 7:
                    message.totalMedal = reader.int64().toBigInt();
                    break;
                case /* string unique_id */ 8:
                    message.uniqueId = reader.string();
                    break;
                case /* string extra */ 255:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RankItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 rank = 1; */
        if (message.rank !== 0n)
            writer.tag(1, WireType.Varint).int64(message.rank);
        /* string country = 2; */
        if (message.country !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.country);
        /* string country_img_url = 3; */
        if (message.countryImgUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.countryImgUrl);
        /* int64 gold_medal = 4; */
        if (message.goldMedal !== 0n)
            writer.tag(4, WireType.Varint).int64(message.goldMedal);
        /* int64 silver_medal = 5; */
        if (message.silverMedal !== 0n)
            writer.tag(5, WireType.Varint).int64(message.silverMedal);
        /* int64 copper_medal = 6; */
        if (message.copperMedal !== 0n)
            writer.tag(6, WireType.Varint).int64(message.copperMedal);
        /* int64 total_medal = 7; */
        if (message.totalMedal !== 0n)
            writer.tag(7, WireType.Varint).int64(message.totalMedal);
        /* string unique_id = 8; */
        if (message.uniqueId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.uniqueId);
        /* string extra = 255; */
        if (message.extra !== "")
            writer.tag(255, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RankItem
 */
export const RankItem = new RankItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Highlight$Type extends MessageType<Highlight> {
    constructor() {
        super("im.Highlight", [
            { no: 1, name: "highlight_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "replay_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "video_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cover_img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "play_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Highlight>): Highlight {
        const message = { highlightType: 0, itemId: "", replayId: "", videoSource: "", uniqueId: "", coverImgUrl: "", playTimeMs: 0n, title: "", groupName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Highlight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Highlight): Highlight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 highlight_type */ 1:
                    message.highlightType = reader.int32();
                    break;
                case /* string item_id */ 2:
                    message.itemId = reader.string();
                    break;
                case /* string replay_id */ 3:
                    message.replayId = reader.string();
                    break;
                case /* string video_source */ 4:
                    message.videoSource = reader.string();
                    break;
                case /* string unique_id */ 5:
                    message.uniqueId = reader.string();
                    break;
                case /* string cover_img_url */ 6:
                    message.coverImgUrl = reader.string();
                    break;
                case /* int64 play_time_ms */ 7:
                    message.playTimeMs = reader.int64().toBigInt();
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string group_name */ 9:
                    message.groupName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Highlight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 highlight_type = 1; */
        if (message.highlightType !== 0)
            writer.tag(1, WireType.Varint).int32(message.highlightType);
        /* string item_id = 2; */
        if (message.itemId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemId);
        /* string replay_id = 3; */
        if (message.replayId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.replayId);
        /* string video_source = 4; */
        if (message.videoSource !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.videoSource);
        /* string unique_id = 5; */
        if (message.uniqueId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.uniqueId);
        /* string cover_img_url = 6; */
        if (message.coverImgUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.coverImgUrl);
        /* int64 play_time_ms = 7; */
        if (message.playTimeMs !== 0n)
            writer.tag(7, WireType.Varint).int64(message.playTimeMs);
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string group_name = 9; */
        if (message.groupName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.groupName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Highlight
 */
export const Highlight = new Highlight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AGMatchInfo$Type extends MessageType<AGMatchInfo> {
    constructor() {
        super("im.AGMatchInfo", [
            { no: 1, name: "l_country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "r_country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "l_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "r_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "l_country_img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "r_country_img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AGMatchInfo>): AGMatchInfo {
        const message = { lCountry: "", rCountry: "", lScore: 0n, rScore: 0n, lCountryImgUrl: "", rCountryImgUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AGMatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AGMatchInfo): AGMatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string l_country */ 1:
                    message.lCountry = reader.string();
                    break;
                case /* string r_country */ 2:
                    message.rCountry = reader.string();
                    break;
                case /* int64 l_score */ 3:
                    message.lScore = reader.int64().toBigInt();
                    break;
                case /* int64 r_score */ 4:
                    message.rScore = reader.int64().toBigInt();
                    break;
                case /* string l_country_img_url */ 5:
                    message.lCountryImgUrl = reader.string();
                    break;
                case /* string r_country_img_url */ 6:
                    message.rCountryImgUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AGMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string l_country = 1; */
        if (message.lCountry !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.lCountry);
        /* string r_country = 2; */
        if (message.rCountry !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rCountry);
        /* int64 l_score = 3; */
        if (message.lScore !== 0n)
            writer.tag(3, WireType.Varint).int64(message.lScore);
        /* int64 r_score = 4; */
        if (message.rScore !== 0n)
            writer.tag(4, WireType.Varint).int64(message.rScore);
        /* string l_country_img_url = 5; */
        if (message.lCountryImgUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lCountryImgUrl);
        /* string r_country_img_url = 6; */
        if (message.rCountryImgUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rCountryImgUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AGMatchInfo
 */
export const AGMatchInfo = new AGMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchLive$Type extends MessageType<MatchLive> {
    constructor() {
        super("im.MatchLive", [
            { no: 1, name: "ag_live_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "appointment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "has_subscribe", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "camera_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchLive>): MatchLive {
        const message = { agLiveStatus: 0, appointmentId: "", roomId: "", hasSubscribe: false, cameraId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchLive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchLive): MatchLive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 ag_live_status */ 1:
                    message.agLiveStatus = reader.int32();
                    break;
                case /* string appointment_id */ 2:
                    message.appointmentId = reader.string();
                    break;
                case /* string room_id */ 3:
                    message.roomId = reader.string();
                    break;
                case /* bool has_subscribe */ 4:
                    message.hasSubscribe = reader.bool();
                    break;
                case /* string camera_id */ 5:
                    message.cameraId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchLive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 ag_live_status = 1; */
        if (message.agLiveStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.agLiveStatus);
        /* string appointment_id = 2; */
        if (message.appointmentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appointmentId);
        /* string room_id = 3; */
        if (message.roomId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.roomId);
        /* bool has_subscribe = 4; */
        if (message.hasSubscribe !== false)
            writer.tag(4, WireType.Varint).bool(message.hasSubscribe);
        /* string camera_id = 5; */
        if (message.cameraId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cameraId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchLive
 */
export const MatchLive = new MatchLive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Match$Type extends MessageType<Match> {
    constructor() {
        super("im.Match", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "focus", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tag_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "ag_match_info", kind: "message", T: () => AGMatchInfo },
            { no: 6, name: "match_live", kind: "message", T: () => MatchLive },
            { no: 7, name: "unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Match>): Match {
        const message = { title: "", startTimeMs: 0n, focus: "", tagType: 0, uniqueId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Match>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Match): Match {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* int64 start_time_ms */ 2:
                    message.startTimeMs = reader.int64().toBigInt();
                    break;
                case /* string focus */ 3:
                    message.focus = reader.string();
                    break;
                case /* int32 tag_type */ 4:
                    message.tagType = reader.int32();
                    break;
                case /* im.AGMatchInfo ag_match_info */ 5:
                    message.agMatchInfo = AGMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.agMatchInfo);
                    break;
                case /* im.MatchLive match_live */ 6:
                    message.matchLive = MatchLive.internalBinaryRead(reader, reader.uint32(), options, message.matchLive);
                    break;
                case /* string unique_id */ 7:
                    message.uniqueId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Match, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int64 start_time_ms = 2; */
        if (message.startTimeMs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTimeMs);
        /* string focus = 3; */
        if (message.focus !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.focus);
        /* int32 tag_type = 4; */
        if (message.tagType !== 0)
            writer.tag(4, WireType.Varint).int32(message.tagType);
        /* im.AGMatchInfo ag_match_info = 5; */
        if (message.agMatchInfo)
            AGMatchInfo.internalBinaryWrite(message.agMatchInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.MatchLive match_live = 6; */
        if (message.matchLive)
            MatchLive.internalBinaryWrite(message.matchLive, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string unique_id = 7; */
        if (message.uniqueId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.uniqueId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Match
 */
export const Match = new Match$Type();
// @generated message type with reflection information, may provide speed optimized methods
class News$Type extends MessageType<News> {
    constructor() {
        super("im.News", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "update_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "link_info", kind: "message", T: () => LinkInfo },
            { no: 4, name: "unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<News>): News {
        const message = { title: "", updateTimeMs: 0n, uniqueId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<News>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: News): News {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* int64 update_time_ms */ 2:
                    message.updateTimeMs = reader.int64().toBigInt();
                    break;
                case /* im.LinkInfo link_info */ 3:
                    message.linkInfo = LinkInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkInfo);
                    break;
                case /* string unique_id */ 4:
                    message.uniqueId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: News, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int64 update_time_ms = 2; */
        if (message.updateTimeMs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.updateTimeMs);
        /* im.LinkInfo link_info = 3; */
        if (message.linkInfo)
            LinkInfo.internalBinaryWrite(message.linkInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string unique_id = 4; */
        if (message.uniqueId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.uniqueId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.News
 */
export const News = new News$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MagicGestureActivityMessage$Type extends MessageType<MagicGestureActivityMessage> {
    constructor() {
        super("im.MagicGestureActivityMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "effect_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "action_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "biz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MagicGestureActivityMessage>): MagicGestureActivityMessage {
        const message = { status: 0, effectId: "", actionType: 0, actionSchema: "", bizId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MagicGestureActivityMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MagicGestureActivityMessage): MagicGestureActivityMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* string effect_id */ 3:
                    message.effectId = reader.string();
                    break;
                case /* int32 action_type */ 4:
                    message.actionType = reader.int32();
                    break;
                case /* string action_schema */ 5:
                    message.actionSchema = reader.string();
                    break;
                case /* string biz_id */ 6:
                    message.bizId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MagicGestureActivityMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* string effect_id = 3; */
        if (message.effectId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.effectId);
        /* int32 action_type = 4; */
        if (message.actionType !== 0)
            writer.tag(4, WireType.Varint).int32(message.actionType);
        /* string action_schema = 5; */
        if (message.actionSchema !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.actionSchema);
        /* string biz_id = 6; */
        if (message.bizId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.bizId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MagicGestureActivityMessage
 */
export const MagicGestureActivityMessage = new MagicGestureActivityMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityMagicMessage$Type extends MessageType<ActivityMagicMessage> {
    constructor() {
        super("im.ActivityMagicMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "push_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "push_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityMagicMessage>): ActivityMagicMessage {
        const message = { pushId: "", pushContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityMagicMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityMagicMessage): ActivityMagicMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string push_id */ 2:
                    message.pushId = reader.string();
                    break;
                case /* string push_content */ 3:
                    message.pushContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityMagicMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string push_id = 2; */
        if (message.pushId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pushId);
        /* string push_content = 3; */
        if (message.pushContent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pushContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ActivityMagicMessage
 */
export const ActivityMagicMessage = new ActivityMagicMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PixActivityMessage$Type extends MessageType<PixActivityMessage> {
    constructor() {
        super("im.PixActivityMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "current_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "can_change_prop", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PixActivityMessage>): PixActivityMessage {
        const message = { currentLevel: 0, canChangeProp: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PixActivityMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PixActivityMessage): PixActivityMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 current_level */ 2:
                    message.currentLevel = reader.int32();
                    break;
                case /* bool can_change_prop */ 3:
                    message.canChangeProp = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PixActivityMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 current_level = 2; */
        if (message.currentLevel !== 0)
            writer.tag(2, WireType.Varint).int32(message.currentLevel);
        /* bool can_change_prop = 3; */
        if (message.canChangeProp !== false)
            writer.tag(3, WireType.Varint).bool(message.canChangeProp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PixActivityMessage
 */
export const PixActivityMessage = new PixActivityMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrizeNoticeMessage$Type extends MessageType<PrizeNoticeMessage> {
    constructor() {
        super("im.PrizeNoticeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "image_info", kind: "message", T: () => ImageInfo },
            { no: 4, name: "landscape_bg_img", kind: "message", T: () => Image },
            { no: 5, name: "landscape_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "scene_context_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "landscape_height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "play_priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "use_separate_player", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PrizeNoticeMessage>): PrizeNoticeMessage {
        const message = { assetId: 0n, landscapeContent: "", sceneContextId: 0n, landscapeHeight: 0, playPriority: 0, useSeparatePlayer: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrizeNoticeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrizeNoticeMessage): PrizeNoticeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 asset_id */ 2:
                    message.assetId = reader.int64().toBigInt();
                    break;
                case /* im.ImageInfo image_info */ 3:
                    message.imageInfo = ImageInfo.internalBinaryRead(reader, reader.uint32(), options, message.imageInfo);
                    break;
                case /* data.Image landscape_bg_img */ 4:
                    message.landscapeBgImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.landscapeBgImg);
                    break;
                case /* string landscape_content */ 5:
                    message.landscapeContent = reader.string();
                    break;
                case /* int64 scene_context_id */ 6:
                    message.sceneContextId = reader.int64().toBigInt();
                    break;
                case /* int32 landscape_height */ 7:
                    message.landscapeHeight = reader.int32();
                    break;
                case /* int32 play_priority */ 8:
                    message.playPriority = reader.int32();
                    break;
                case /* bool use_separate_player */ 10:
                    message.useSeparatePlayer = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrizeNoticeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 asset_id = 2; */
        if (message.assetId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.assetId);
        /* im.ImageInfo image_info = 3; */
        if (message.imageInfo)
            ImageInfo.internalBinaryWrite(message.imageInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image landscape_bg_img = 4; */
        if (message.landscapeBgImg)
            Image.internalBinaryWrite(message.landscapeBgImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string landscape_content = 5; */
        if (message.landscapeContent !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.landscapeContent);
        /* int64 scene_context_id = 6; */
        if (message.sceneContextId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.sceneContextId);
        /* int32 landscape_height = 7; */
        if (message.landscapeHeight !== 0)
            writer.tag(7, WireType.Varint).int32(message.landscapeHeight);
        /* int32 play_priority = 8; */
        if (message.playPriority !== 0)
            writer.tag(8, WireType.Varint).int32(message.playPriority);
        /* bool use_separate_player = 10; */
        if (message.useSeparatePlayer !== false)
            writer.tag(10, WireType.Varint).bool(message.useSeparatePlayer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PrizeNoticeMessage
 */
export const PrizeNoticeMessage = new PrizeNoticeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageInfo$Type extends MessageType<ImageInfo> {
    constructor() {
        super("im.ImageInfo", [
            { no: 1, name: "img", kind: "message", T: () => Image },
            { no: 2, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "need_circle", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ImageInfo>): ImageInfo {
        const message = { start: 0, duration: 0, x: 0, y: 0, width: 0, height: 0, needCircle: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageInfo): ImageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image img */ 1:
                    message.img = Image.internalBinaryRead(reader, reader.uint32(), options, message.img);
                    break;
                case /* int32 start */ 2:
                    message.start = reader.int32();
                    break;
                case /* int32 duration */ 3:
                    message.duration = reader.int32();
                    break;
                case /* int32 x */ 4:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 5:
                    message.y = reader.int32();
                    break;
                case /* int32 width */ 6:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 7:
                    message.height = reader.int32();
                    break;
                case /* bool need_circle */ 8:
                    message.needCircle = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image img = 1; */
        if (message.img)
            Image.internalBinaryWrite(message.img, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 start = 2; */
        if (message.start !== 0)
            writer.tag(2, WireType.Varint).int32(message.start);
        /* int32 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int32(message.duration);
        /* int32 x = 4; */
        if (message.x !== 0)
            writer.tag(4, WireType.Varint).int32(message.x);
        /* int32 y = 5; */
        if (message.y !== 0)
            writer.tag(5, WireType.Varint).int32(message.y);
        /* int32 width = 6; */
        if (message.width !== 0)
            writer.tag(6, WireType.Varint).int32(message.width);
        /* int32 height = 7; */
        if (message.height !== 0)
            writer.tag(7, WireType.Varint).int32(message.height);
        /* bool need_circle = 8; */
        if (message.needCircle !== false)
            writer.tag(8, WireType.Varint).bool(message.needCircle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ImageInfo
 */
export const ImageInfo = new ImageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdminPrivilegeMessage$Type extends MessageType<AdminPrivilegeMessage> {
    constructor() {
        super("im.AdminPrivilegeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => AdminPrivilegeStruct }
        ]);
    }
    create(value?: PartialMessage<AdminPrivilegeMessage>): AdminPrivilegeMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdminPrivilegeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminPrivilegeMessage): AdminPrivilegeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.AdminPrivilegeStruct data */ 2:
                    message.data = AdminPrivilegeStruct.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminPrivilegeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.AdminPrivilegeStruct data = 2; */
        if (message.data)
            AdminPrivilegeStruct.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AdminPrivilegeMessage
 */
export const AdminPrivilegeMessage = new AdminPrivilegeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdminPrivilegeStruct$Type extends MessageType<AdminPrivilegeStruct> {
    constructor() {
        super("im.AdminPrivilegeStruct", [
            { no: 1, name: "privilege", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "op", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AdminPrivilegeStruct>): AdminPrivilegeStruct {
        const message = { privilege: 0, op: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdminPrivilegeStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminPrivilegeStruct): AdminPrivilegeStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 privilege */ 1:
                    message.privilege = reader.int32();
                    break;
                case /* int64 op */ 2:
                    message.op = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminPrivilegeStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 privilege = 1; */
        if (message.privilege !== 0)
            writer.tag(1, WireType.Varint).int32(message.privilege);
        /* int64 op = 2; */
        if (message.op !== 0n)
            writer.tag(2, WireType.Varint).int64(message.op);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AdminPrivilegeStruct
 */
export const AdminPrivilegeStruct = new AdminPrivilegeStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdminRecordHandleMessage$Type extends MessageType<AdminRecordHandleMessage> {
    constructor() {
        super("im.AdminRecordHandleMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "handle_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AdminRecordHandleMessage>): AdminRecordHandleMessage {
        const message = { handleType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdminRecordHandleMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminRecordHandleMessage): AdminRecordHandleMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 handle_type */ 2:
                    message.handleType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminRecordHandleMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 handle_type = 2; */
        if (message.handleType !== 0)
            writer.tag(2, WireType.Varint).int32(message.handleType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AdminRecordHandleMessage
 */
export const AdminRecordHandleMessage = new AdminRecordHandleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdminData$Type extends MessageType<AdminData> {
    constructor() {
        super("im.AdminData", [
            { no: 1, name: "uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdminData>): AdminData {
        const message = { uid: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdminData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminData): AdminData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 uid */ 1:
                    message.uid = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 uid = 1; */
        if (message.uid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.uid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AdminData
 */
export const AdminData = new AdminData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextExtraItem$Type extends MessageType<TextExtraItem> {
    constructor() {
        super("im.TextExtraItem", [
            { no: 1, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "stop", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "hashtag_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hashtag_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "is_commerce", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "aweme_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "sub_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TextExtraItem>): TextExtraItem {
        const message = { start: 0, stop: 0, type: 0, userId: "", hashtagName: "", hashtagId: "", isCommerce: false, awemeId: "", subType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextExtraItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextExtraItem): TextExtraItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 start */ 1:
                    message.start = reader.int32();
                    break;
                case /* int32 stop */ 2:
                    message.stop = reader.int32();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string user_id */ 4:
                    message.userId = reader.string();
                    break;
                case /* string hashtag_name */ 5:
                    message.hashtagName = reader.string();
                    break;
                case /* string hashtag_id */ 6:
                    message.hashtagId = reader.string();
                    break;
                case /* bool is_commerce */ 7:
                    message.isCommerce = reader.bool();
                    break;
                case /* string aweme_id */ 8:
                    message.awemeId = reader.string();
                    break;
                case /* int32 sub_type */ 9:
                    message.subType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextExtraItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).int32(message.start);
        /* int32 stop = 2; */
        if (message.stop !== 0)
            writer.tag(2, WireType.Varint).int32(message.stop);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string user_id = 4; */
        if (message.userId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userId);
        /* string hashtag_name = 5; */
        if (message.hashtagName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.hashtagName);
        /* string hashtag_id = 6; */
        if (message.hashtagId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.hashtagId);
        /* bool is_commerce = 7; */
        if (message.isCommerce !== false)
            writer.tag(7, WireType.Varint).bool(message.isCommerce);
        /* string aweme_id = 8; */
        if (message.awemeId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.awemeId);
        /* int32 sub_type = 9; */
        if (message.subType !== 0)
            writer.tag(9, WireType.Varint).int32(message.subType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TextExtraItem
 */
export const TextExtraItem = new TextExtraItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdminRecordMessage$Type extends MessageType<AdminRecordMessage> {
    constructor() {
        super("im.AdminRecordMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "admin", kind: "message", T: () => AdminData },
            { no: 3, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "draft_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "video_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "video_text_extra", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TextExtraItem }
        ]);
    }
    create(value?: PartialMessage<AdminRecordMessage>): AdminRecordMessage {
        const message = { itemId: 0n, draftId: 0n, videoText: "", videoTextExtra: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdminRecordMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminRecordMessage): AdminRecordMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.AdminData admin */ 2:
                    message.admin = AdminData.internalBinaryRead(reader, reader.uint32(), options, message.admin);
                    break;
                case /* int64 item_id */ 3:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* int64 draft_id */ 4:
                    message.draftId = reader.int64().toBigInt();
                    break;
                case /* string video_text */ 5:
                    message.videoText = reader.string();
                    break;
                case /* repeated im.TextExtraItem video_text_extra */ 6:
                    message.videoTextExtra.push(TextExtraItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminRecordMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.AdminData admin = 2; */
        if (message.admin)
            AdminData.internalBinaryWrite(message.admin, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 item_id = 3; */
        if (message.itemId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.itemId);
        /* int64 draft_id = 4; */
        if (message.draftId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.draftId);
        /* string video_text = 5; */
        if (message.videoText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.videoText);
        /* repeated im.TextExtraItem video_text_extra = 6; */
        for (let i = 0; i < message.videoTextExtra.length; i++)
            TextExtraItem.internalBinaryWrite(message.videoTextExtra[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AdminRecordMessage
 */
export const AdminRecordMessage = new AdminRecordMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorBoostMessage$Type extends MessageType<AnchorBoostMessage> {
    constructor() {
        super("im.AnchorBoostMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => AnchorBoost },
            { no: 3, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<AnchorBoostMessage>): AnchorBoostMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorBoostMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorBoostMessage): AnchorBoostMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.AnchorBoost data */ 2:
                    message.data = AnchorBoost.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 3:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorBoostMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.AnchorBoost data = 2; */
        if (message.data)
            AnchorBoost.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 3; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnchorBoostMessage
 */
export const AnchorBoostMessage = new AnchorBoostMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorBoost$Type extends MessageType<AnchorBoost> {
    constructor() {
        super("im.AnchorBoost", [
            { no: 1, name: "event_name", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "live_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "event_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorBoost>): AnchorBoost {
        const message = { eventName: 0n, anchorId: 0n, liveId: 0, eventType: 0, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorBoost>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorBoost): AnchorBoost {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 event_name */ 1:
                    message.eventName = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_id */ 2:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* int32 live_id */ 3:
                    message.liveId = reader.int32();
                    break;
                case /* int32 event_type */ 4:
                    message.eventType = reader.int32();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorBoost, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 event_name = 1; */
        if (message.eventName !== 0n)
            writer.tag(1, WireType.Varint).int64(message.eventName);
        /* int64 anchor_id = 2; */
        if (message.anchorId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.anchorId);
        /* int32 live_id = 3; */
        if (message.liveId !== 0)
            writer.tag(3, WireType.Varint).int32(message.liveId);
        /* int32 event_type = 4; */
        if (message.eventType !== 0)
            writer.tag(4, WireType.Varint).int32(message.eventType);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnchorBoost
 */
export const AnchorBoost = new AnchorBoost$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnswerReviewMessage$Type extends MessageType<AnswerReviewMessage> {
    constructor() {
        super("im.AnswerReviewMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "answerReviewMsgTypeEnum", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "answer_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "answerReviewResTypeEnum", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "video_pin_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "original_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "pin_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AnswerReviewMessage>): AnswerReviewMessage {
        const message = { answerReviewMsgTypeEnum: 0, answerId: 0n, chatId: 0n, answerReviewResTypeEnum: 0, videoPinId: 0n, originalMsgId: 0n, pinId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnswerReviewMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnswerReviewMessage): AnswerReviewMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 answerReviewMsgTypeEnum */ 2:
                    message.answerReviewMsgTypeEnum = reader.int32();
                    break;
                case /* int64 answer_id */ 3:
                    message.answerId = reader.int64().toBigInt();
                    break;
                case /* int64 chat_id */ 4:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int32 answerReviewResTypeEnum */ 5:
                    message.answerReviewResTypeEnum = reader.int32();
                    break;
                case /* int64 video_pin_id */ 6:
                    message.videoPinId = reader.int64().toBigInt();
                    break;
                case /* int64 original_msg_id */ 7:
                    message.originalMsgId = reader.int64().toBigInt();
                    break;
                case /* int64 pin_id */ 8:
                    message.pinId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnswerReviewMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 answerReviewMsgTypeEnum = 2; */
        if (message.answerReviewMsgTypeEnum !== 0)
            writer.tag(2, WireType.Varint).int32(message.answerReviewMsgTypeEnum);
        /* int64 answer_id = 3; */
        if (message.answerId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.answerId);
        /* int64 chat_id = 4; */
        if (message.chatId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.chatId);
        /* int32 answerReviewResTypeEnum = 5; */
        if (message.answerReviewResTypeEnum !== 0)
            writer.tag(5, WireType.Varint).int32(message.answerReviewResTypeEnum);
        /* int64 video_pin_id = 6; */
        if (message.videoPinId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.videoPinId);
        /* int64 original_msg_id = 7; */
        if (message.originalMsgId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.originalMsgId);
        /* int64 pin_id = 8; */
        if (message.pinId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.pinId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnswerReviewMessage
 */
export const AnswerReviewMessage = new AnswerReviewMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetEffectUtilMessage$Type extends MessageType<AssetEffectUtilMessage> {
    constructor() {
        super("im.AssetEffectUtilMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "text", kind: "message", T: () => Text },
            { no: 6, name: "text_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "text_heitht", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "tracking", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EffectUtilImageInfo },
            { no: 20, name: "texts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EffectUtilTextInfo },
            { no: 21, name: "finish_self_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AssetEffectUtilMessage>): AssetEffectUtilMessage {
        const message = { assetId: 0n, priority: 0n, price: 0n, textWidth: 0n, textHeitht: 0n, tracking: "", dressId: "", images: [], texts: [], finishSelfSchema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssetEffectUtilMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssetEffectUtilMessage): AssetEffectUtilMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 asset_id */ 2:
                    message.assetId = reader.int64().toBigInt();
                    break;
                case /* int64 priority */ 3:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* int64 price */ 4:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* data.Text text */ 5:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* int64 text_width */ 6:
                    message.textWidth = reader.int64().toBigInt();
                    break;
                case /* int64 text_heitht */ 7:
                    message.textHeitht = reader.int64().toBigInt();
                    break;
                case /* string tracking */ 8:
                    message.tracking = reader.string();
                    break;
                case /* string dress_id */ 9:
                    message.dressId = reader.string();
                    break;
                case /* repeated im.EffectUtilImageInfo images */ 10:
                    message.images.push(EffectUtilImageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated im.EffectUtilTextInfo texts */ 20:
                    message.texts.push(EffectUtilTextInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string finish_self_schema */ 21:
                    message.finishSelfSchema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssetEffectUtilMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 asset_id = 2; */
        if (message.assetId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.assetId);
        /* int64 priority = 3; */
        if (message.priority !== 0n)
            writer.tag(3, WireType.Varint).int64(message.priority);
        /* int64 price = 4; */
        if (message.price !== 0n)
            writer.tag(4, WireType.Varint).int64(message.price);
        /* data.Text text = 5; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 text_width = 6; */
        if (message.textWidth !== 0n)
            writer.tag(6, WireType.Varint).int64(message.textWidth);
        /* int64 text_heitht = 7; */
        if (message.textHeitht !== 0n)
            writer.tag(7, WireType.Varint).int64(message.textHeitht);
        /* string tracking = 8; */
        if (message.tracking !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.tracking);
        /* string dress_id = 9; */
        if (message.dressId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.dressId);
        /* repeated im.EffectUtilImageInfo images = 10; */
        for (let i = 0; i < message.images.length; i++)
            EffectUtilImageInfo.internalBinaryWrite(message.images[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.EffectUtilTextInfo texts = 20; */
        for (let i = 0; i < message.texts.length; i++)
            EffectUtilTextInfo.internalBinaryWrite(message.texts[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* string finish_self_schema = 21; */
        if (message.finishSelfSchema !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.finishSelfSchema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AssetEffectUtilMessage
 */
export const AssetEffectUtilMessage = new AssetEffectUtilMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffectUtilImageInfo$Type extends MessageType<EffectUtilImageInfo> {
    constructor() {
        super("im.EffectUtilImageInfo", [
            { no: 1, name: "placeholder_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mix_image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<EffectUtilImageInfo>): EffectUtilImageInfo {
        const message = { placeholderKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffectUtilImageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffectUtilImageInfo): EffectUtilImageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string placeholder_key */ 1:
                    message.placeholderKey = reader.string();
                    break;
                case /* data.Image mix_image */ 2:
                    message.mixImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.mixImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffectUtilImageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string placeholder_key = 1; */
        if (message.placeholderKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.placeholderKey);
        /* data.Image mix_image = 2; */
        if (message.mixImage)
            Image.internalBinaryWrite(message.mixImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EffectUtilImageInfo
 */
export const EffectUtilImageInfo = new EffectUtilImageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffectUtilTextInfo$Type extends MessageType<EffectUtilTextInfo> {
    constructor() {
        super("im.EffectUtilTextInfo", [
            { no: 1, name: "placeholder_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "font_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EffectUtilTextInfo>): EffectUtilTextInfo {
        const message = { placeholderKey: "", content: "", fontSize: 0n, fontColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffectUtilTextInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffectUtilTextInfo): EffectUtilTextInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string placeholder_key */ 1:
                    message.placeholderKey = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 font_size */ 3:
                    message.fontSize = reader.int64().toBigInt();
                    break;
                case /* string font_color */ 4:
                    message.fontColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffectUtilTextInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string placeholder_key = 1; */
        if (message.placeholderKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.placeholderKey);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 font_size = 3; */
        if (message.fontSize !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fontSize);
        /* string font_color = 4; */
        if (message.fontColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fontColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EffectUtilTextInfo
 */
export const EffectUtilTextInfo = new EffectUtilTextInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetMessage$Type extends MessageType<AssetMessage> {
    constructor() {
        super("im.AssetMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "panel_display_text", kind: "message", T: () => Text },
            { no: 4, name: "show_message", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "show_panel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "user", kind: "message", T: () => User },
            { no: 7, name: "to_user", kind: "message", T: () => User },
            { no: 8, name: "priority", kind: "message", T: () => GiftIMPriority },
            { no: 9, name: "log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "play_priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AssetMessage>): AssetMessage {
        const message = { assetId: 0n, showMessage: false, showPanel: false, logId: "", playPriority: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssetMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssetMessage): AssetMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 asset_id */ 2:
                    message.assetId = reader.int64().toBigInt();
                    break;
                case /* data.Text panel_display_text */ 3:
                    message.panelDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.panelDisplayText);
                    break;
                case /* bool show_message */ 4:
                    message.showMessage = reader.bool();
                    break;
                case /* bool show_panel */ 5:
                    message.showPanel = reader.bool();
                    break;
                case /* data.User user */ 6:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.User to_user */ 7:
                    message.toUser = User.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* data.GiftIMPriority priority */ 8:
                    message.priority = GiftIMPriority.internalBinaryRead(reader, reader.uint32(), options, message.priority);
                    break;
                case /* string log_id */ 9:
                    message.logId = reader.string();
                    break;
                case /* int32 play_priority */ 10:
                    message.playPriority = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssetMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 asset_id = 2; */
        if (message.assetId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.assetId);
        /* data.Text panel_display_text = 3; */
        if (message.panelDisplayText)
            Text.internalBinaryWrite(message.panelDisplayText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool show_message = 4; */
        if (message.showMessage !== false)
            writer.tag(4, WireType.Varint).bool(message.showMessage);
        /* bool show_panel = 5; */
        if (message.showPanel !== false)
            writer.tag(5, WireType.Varint).bool(message.showPanel);
        /* data.User user = 6; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.User to_user = 7; */
        if (message.toUser)
            User.internalBinaryWrite(message.toUser, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.GiftIMPriority priority = 8; */
        if (message.priority)
            GiftIMPriority.internalBinaryWrite(message.priority, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string log_id = 9; */
        if (message.logId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.logId);
        /* int32 play_priority = 10; */
        if (message.playPriority !== 0)
            writer.tag(10, WireType.Varint).int32(message.playPriority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AssetMessage
 */
export const AssetMessage = new AssetMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioBGImgMessage$Type extends MessageType<AudioBGImgMessage> {
    constructor() {
        super("im.AudioBGImgMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "bg_list", kind: "message", T: () => AudioBGData },
            { no: 3, name: "ReviewPass", kind: "scalar", jsonName: "ReviewPass", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "bg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "show_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AudioBGImgMessage>): AudioBGImgMessage {
        const message = { reviewPass: 0, bgType: 0, showText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioBGImgMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioBGImgMessage): AudioBGImgMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.AudioBGData bg_list */ 2:
                    message.bgList = AudioBGData.internalBinaryRead(reader, reader.uint32(), options, message.bgList);
                    break;
                case /* int32 ReviewPass = 3 [json_name = "ReviewPass"];*/ 3:
                    message.reviewPass = reader.int32();
                    break;
                case /* int32 bg_type */ 4:
                    message.bgType = reader.int32();
                    break;
                case /* string show_text */ 5:
                    message.showText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioBGImgMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.AudioBGData bg_list = 2; */
        if (message.bgList)
            AudioBGData.internalBinaryWrite(message.bgList, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 ReviewPass = 3 [json_name = "ReviewPass"]; */
        if (message.reviewPass !== 0)
            writer.tag(3, WireType.Varint).int32(message.reviewPass);
        /* int32 bg_type = 4; */
        if (message.bgType !== 0)
            writer.tag(4, WireType.Varint).int32(message.bgType);
        /* string show_text = 5; */
        if (message.showText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.showText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AudioBGImgMessage
 */
export const AudioBGImgMessage = new AudioBGImgMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioChatMessage$Type extends MessageType<AudioChatMessage> {
    constructor() {
        super("im.AudioChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "audio_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "audio_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<AudioChatMessage>): AudioChatMessage {
        const message = { content: "", audioUrl: "", audioDuration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioChatMessage): AudioChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string audio_url */ 4:
                    message.audioUrl = reader.string();
                    break;
                case /* int64 audio_duration */ 5:
                    message.audioDuration = reader.int64().toBigInt();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 6:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string audio_url = 4; */
        if (message.audioUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.audioUrl);
        /* int64 audio_duration = 5; */
        if (message.audioDuration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.audioDuration);
        /* im.PublicAreaCommon public_area_common = 6; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AudioChatMessage
 */
export const AudioChatMessage = new AudioChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationNotifyMessage$Type extends MessageType<AuthorizationNotifyMessage> {
    constructor() {
        super("im.AuthorizationNotifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "style", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "user_content", kind: "message", T: () => AuthorizationNotifyMessage_ContentBlock },
            { no: 7, name: "user_relation", kind: "message", T: () => AuthorizationNotifyMessage_RelationBlock }
        ]);
    }
    create(value?: PartialMessage<AuthorizationNotifyMessage>): AuthorizationNotifyMessage {
        const message = { from: "", content: "", style: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationNotifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationNotifyMessage): AuthorizationNotifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string from */ 2:
                    message.from = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string style */ 4:
                    message.style = reader.string();
                    break;
                case /* im.AuthorizationNotifyMessage.ContentBlock user_content */ 6:
                    message.userContent = AuthorizationNotifyMessage_ContentBlock.internalBinaryRead(reader, reader.uint32(), options, message.userContent);
                    break;
                case /* im.AuthorizationNotifyMessage.RelationBlock user_relation */ 7:
                    message.userRelation = AuthorizationNotifyMessage_RelationBlock.internalBinaryRead(reader, reader.uint32(), options, message.userRelation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationNotifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string from = 2; */
        if (message.from !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.from);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string style = 4; */
        if (message.style !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.style);
        /* im.AuthorizationNotifyMessage.ContentBlock user_content = 6; */
        if (message.userContent)
            AuthorizationNotifyMessage_ContentBlock.internalBinaryWrite(message.userContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.AuthorizationNotifyMessage.RelationBlock user_relation = 7; */
        if (message.userRelation)
            AuthorizationNotifyMessage_RelationBlock.internalBinaryWrite(message.userRelation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuthorizationNotifyMessage
 */
export const AuthorizationNotifyMessage = new AuthorizationNotifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationNotifyMessage_ContentBlock$Type extends MessageType<AuthorizationNotifyMessage_ContentBlock> {
    constructor() {
        super("im.AuthorizationNotifyMessage.ContentBlock", [
            { no: 1, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_authorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationNotifyMessage_ContentBlock>): AuthorizationNotifyMessage_ContentBlock {
        const message = { show: false, isAuthorized: false, title: "", content: "", detail: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationNotifyMessage_ContentBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationNotifyMessage_ContentBlock): AuthorizationNotifyMessage_ContentBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool show */ 1:
                    message.show = reader.bool();
                    break;
                case /* bool is_authorized */ 2:
                    message.isAuthorized = reader.bool();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string detail */ 5:
                    message.detail = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationNotifyMessage_ContentBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool show = 1; */
        if (message.show !== false)
            writer.tag(1, WireType.Varint).bool(message.show);
        /* bool is_authorized = 2; */
        if (message.isAuthorized !== false)
            writer.tag(2, WireType.Varint).bool(message.isAuthorized);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string detail = 5; */
        if (message.detail !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.detail);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuthorizationNotifyMessage.ContentBlock
 */
export const AuthorizationNotifyMessage_ContentBlock = new AuthorizationNotifyMessage_ContentBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationNotifyMessage_RelationBlock$Type extends MessageType<AuthorizationNotifyMessage_RelationBlock> {
    constructor() {
        super("im.AuthorizationNotifyMessage.RelationBlock", [
            { no: 1, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_authorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationNotifyMessage_RelationBlock>): AuthorizationNotifyMessage_RelationBlock {
        const message = { show: false, isAuthorized: false, title: "", content: "", detail: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationNotifyMessage_RelationBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationNotifyMessage_RelationBlock): AuthorizationNotifyMessage_RelationBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool show */ 1:
                    message.show = reader.bool();
                    break;
                case /* bool is_authorized */ 2:
                    message.isAuthorized = reader.bool();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string detail */ 5:
                    message.detail = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationNotifyMessage_RelationBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool show = 1; */
        if (message.show !== false)
            writer.tag(1, WireType.Varint).bool(message.show);
        /* bool is_authorized = 2; */
        if (message.isAuthorized !== false)
            writer.tag(2, WireType.Varint).bool(message.isAuthorized);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string detail = 5; */
        if (message.detail !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.detail);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuthorizationNotifyMessage.RelationBlock
 */
export const AuthorizationNotifyMessage_RelationBlock = new AuthorizationNotifyMessage_RelationBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutoCoverMessage$Type extends MessageType<AutoCoverMessage> {
    constructor() {
        super("im.AutoCoverMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<AutoCoverMessage>): AutoCoverMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AutoCoverMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutoCoverMessage): AutoCoverMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Image image */ 2:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutoCoverMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image image = 2; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AutoCoverMessage
 */
export const AutoCoverMessage = new AutoCoverMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AwemeShopExplainMessage$Type extends MessageType<AwemeShopExplainMessage> {
    constructor() {
        super("im.AwemeShopExplainMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "extra", kind: "message", T: () => AwemeShopExplainMessage_Extra }
        ]);
    }
    create(value?: PartialMessage<AwemeShopExplainMessage>): AwemeShopExplainMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AwemeShopExplainMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AwemeShopExplainMessage): AwemeShopExplainMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.AwemeShopExplainMessage.Extra extra */ 2:
                    message.extra = AwemeShopExplainMessage_Extra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AwemeShopExplainMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.AwemeShopExplainMessage.Extra extra = 2; */
        if (message.extra)
            AwemeShopExplainMessage_Extra.internalBinaryWrite(message.extra, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AwemeShopExplainMessage
 */
export const AwemeShopExplainMessage = new AwemeShopExplainMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AwemeShopExplainMessage_Extra$Type extends MessageType<AwemeShopExplainMessage_Extra> {
    constructor() {
        super("im.AwemeShopExplainMessage.Extra", [
            { no: 1, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AwemeShopExplainMessage_Extra>): AwemeShopExplainMessage_Extra {
        const message = { promotionId: 0n, active: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AwemeShopExplainMessage_Extra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AwemeShopExplainMessage_Extra): AwemeShopExplainMessage_Extra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 promotion_id */ 1:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* bool active */ 2:
                    message.active = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AwemeShopExplainMessage_Extra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 promotion_id = 1; */
        if (message.promotionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.promotionId);
        /* bool active = 2; */
        if (message.active !== false)
            writer.tag(2, WireType.Varint).bool(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AwemeShopExplainMessage.Extra
 */
export const AwemeShopExplainMessage_Extra = new AwemeShopExplainMessage_Extra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackRecordVideoMessage$Type extends MessageType<BackRecordVideoMessage> {
    constructor() {
        super("im.BackRecordVideoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "m3u8_url", kind: "scalar", jsonName: "m3u8Url", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ts_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "execution_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "succeed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BackRecordVideoMessage>): BackRecordVideoMessage {
        const message = { m3U8Url: "", tsUrls: [], executionId: "", succeed: false, startTime: 0n, endTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BackRecordVideoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackRecordVideoMessage): BackRecordVideoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string m3u8_url = 2 [json_name = "m3u8Url"];*/ 2:
                    message.m3U8Url = reader.string();
                    break;
                case /* repeated string ts_urls */ 3:
                    message.tsUrls.push(reader.string());
                    break;
                case /* string execution_id */ 4:
                    message.executionId = reader.string();
                    break;
                case /* bool succeed */ 5:
                    message.succeed = reader.bool();
                    break;
                case /* int64 start_time */ 6:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 7:
                    message.endTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackRecordVideoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string m3u8_url = 2 [json_name = "m3u8Url"]; */
        if (message.m3U8Url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.m3U8Url);
        /* repeated string ts_urls = 3; */
        for (let i = 0; i < message.tsUrls.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.tsUrls[i]);
        /* string execution_id = 4; */
        if (message.executionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.executionId);
        /* bool succeed = 5; */
        if (message.succeed !== false)
            writer.tag(5, WireType.Varint).bool(message.succeed);
        /* int64 start_time = 6; */
        if (message.startTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 7; */
        if (message.endTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BackRecordVideoMessage
 */
export const BackRecordVideoMessage = new BackRecordVideoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleAutoMatchMessage$Type extends MessageType<BattleAutoMatchMessage> {
    constructor() {
        super("im.BattleAutoMatchMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => BattleAutoMatchMessage_ResponseData }
        ]);
    }
    create(value?: PartialMessage<BattleAutoMatchMessage>): BattleAutoMatchMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleAutoMatchMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleAutoMatchMessage): BattleAutoMatchMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.BattleAutoMatchMessage.ResponseData data */ 2:
                    message.data = BattleAutoMatchMessage_ResponseData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleAutoMatchMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleAutoMatchMessage.ResponseData data = 2; */
        if (message.data)
            BattleAutoMatchMessage_ResponseData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleAutoMatchMessage
 */
export const BattleAutoMatchMessage = new BattleAutoMatchMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleAutoMatchMessage_RivalInfo$Type extends MessageType<BattleAutoMatchMessage_RivalInfo> {
    constructor() {
        super("im.BattleAutoMatchMessage.RivalInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room", kind: "message", T: () => Room }
        ]);
    }
    create(value?: PartialMessage<BattleAutoMatchMessage_RivalInfo>): BattleAutoMatchMessage_RivalInfo {
        const message = { userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleAutoMatchMessage_RivalInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleAutoMatchMessage_RivalInfo): BattleAutoMatchMessage_RivalInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Room room */ 2:
                    message.room = Room.internalBinaryRead(reader, reader.uint32(), options, message.room);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleAutoMatchMessage_RivalInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* data.Room room = 2; */
        if (message.room)
            Room.internalBinaryWrite(message.room, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleAutoMatchMessage.RivalInfo
 */
export const BattleAutoMatchMessage_RivalInfo = new BattleAutoMatchMessage_RivalInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleAutoMatchMessage_PreviewUser$Type extends MessageType<BattleAutoMatchMessage_PreviewUser> {
    constructor() {
        super("im.BattleAutoMatchMessage.PreviewUser", [
            { no: 1, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BattleAutoMatchMessage_PreviewUser>): BattleAutoMatchMessage_PreviewUser {
        const message = { nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleAutoMatchMessage_PreviewUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleAutoMatchMessage_PreviewUser): BattleAutoMatchMessage_PreviewUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nickname */ 1:
                    message.nickname = reader.string();
                    break;
                case /* data.Image avatar */ 2:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleAutoMatchMessage_PreviewUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nickname = 1; */
        if (message.nickname !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nickname);
        /* data.Image avatar = 2; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleAutoMatchMessage.PreviewUser
 */
export const BattleAutoMatchMessage_PreviewUser = new BattleAutoMatchMessage_PreviewUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleAutoMatchMessage_ResponseData$Type extends MessageType<BattleAutoMatchMessage_ResponseData> {
    constructor() {
        super("im.BattleAutoMatchMessage.ResponseData", [
            { no: 1, name: "default_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "default_avatar", kind: "message", T: () => Image },
            { no: 3, name: "rival_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "rival_room", kind: "message", T: () => Room },
            { no: 5, name: "preview_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleAutoMatchMessage_PreviewUser },
            { no: 6, name: "expect_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "rival_user_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "can_high_way", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "max_wait_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "sign_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "rivals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleAutoMatchMessage_RivalInfo },
            { no: 19, name: "battle_attached_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "channel_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleAutoMatchMessage_ResponseData>): BattleAutoMatchMessage_ResponseData {
        const message = { defaultContent: "", rivalUserId: 0n, previewUserList: [], expectTime: 0n, rivalUserIdStr: "", canHighWay: false, maxWaitTime: 0n, signExtra: "", rivals: [], battleAttachedInfo: "", channelIdStr: "", matchType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleAutoMatchMessage_ResponseData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleAutoMatchMessage_ResponseData): BattleAutoMatchMessage_ResponseData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string default_content */ 1:
                    message.defaultContent = reader.string();
                    break;
                case /* data.Image default_avatar */ 2:
                    message.defaultAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.defaultAvatar);
                    break;
                case /* int64 rival_user_id */ 3:
                    message.rivalUserId = reader.int64().toBigInt();
                    break;
                case /* data.Room rival_room */ 4:
                    message.rivalRoom = Room.internalBinaryRead(reader, reader.uint32(), options, message.rivalRoom);
                    break;
                case /* repeated im.BattleAutoMatchMessage.PreviewUser preview_user_list */ 5:
                    message.previewUserList.push(BattleAutoMatchMessage_PreviewUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 expect_time */ 6:
                    message.expectTime = reader.int64().toBigInt();
                    break;
                case /* string rival_user_id_str */ 7:
                    message.rivalUserIdStr = reader.string();
                    break;
                case /* bool can_high_way */ 8:
                    message.canHighWay = reader.bool();
                    break;
                case /* int64 max_wait_time */ 9:
                    message.maxWaitTime = reader.int64().toBigInt();
                    break;
                case /* string sign_extra */ 10:
                    message.signExtra = reader.string();
                    break;
                case /* repeated im.BattleAutoMatchMessage.RivalInfo rivals */ 11:
                    message.rivals.push(BattleAutoMatchMessage_RivalInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string battle_attached_info */ 19:
                    message.battleAttachedInfo = reader.string();
                    break;
                case /* string channel_id_str */ 20:
                    message.channelIdStr = reader.string();
                    break;
                case /* int64 match_type */ 21:
                    message.matchType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleAutoMatchMessage_ResponseData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string default_content = 1; */
        if (message.defaultContent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.defaultContent);
        /* data.Image default_avatar = 2; */
        if (message.defaultAvatar)
            Image.internalBinaryWrite(message.defaultAvatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 rival_user_id = 3; */
        if (message.rivalUserId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rivalUserId);
        /* data.Room rival_room = 4; */
        if (message.rivalRoom)
            Room.internalBinaryWrite(message.rivalRoom, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.BattleAutoMatchMessage.PreviewUser preview_user_list = 5; */
        for (let i = 0; i < message.previewUserList.length; i++)
            BattleAutoMatchMessage_PreviewUser.internalBinaryWrite(message.previewUserList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 expect_time = 6; */
        if (message.expectTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.expectTime);
        /* string rival_user_id_str = 7; */
        if (message.rivalUserIdStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rivalUserIdStr);
        /* bool can_high_way = 8; */
        if (message.canHighWay !== false)
            writer.tag(8, WireType.Varint).bool(message.canHighWay);
        /* int64 max_wait_time = 9; */
        if (message.maxWaitTime !== 0n)
            writer.tag(9, WireType.Varint).int64(message.maxWaitTime);
        /* string sign_extra = 10; */
        if (message.signExtra !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.signExtra);
        /* repeated im.BattleAutoMatchMessage.RivalInfo rivals = 11; */
        for (let i = 0; i < message.rivals.length; i++)
            BattleAutoMatchMessage_RivalInfo.internalBinaryWrite(message.rivals[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string battle_attached_info = 19; */
        if (message.battleAttachedInfo !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.battleAttachedInfo);
        /* string channel_id_str = 20; */
        if (message.channelIdStr !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.channelIdStr);
        /* int64 match_type = 21; */
        if (message.matchType !== 0n)
            writer.tag(21, WireType.Varint).int64(message.matchType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleAutoMatchMessage.ResponseData
 */
export const BattleAutoMatchMessage_ResponseData = new BattleAutoMatchMessage_ResponseData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleCancelMessage$Type extends MessageType<BattleCancelMessage> {
    constructor() {
        super("im.BattleCancelMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleCancelMessage>): BattleCancelMessage {
        const message = { channelId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleCancelMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleCancelMessage): BattleCancelMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 channel_id */ 2:
                    message.channelId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleCancelMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 channel_id = 2; */
        if (message.channelId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleCancelMessage
 */
export const BattleCancelMessage = new BattleCancelMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleFeedBackCardMessage$Type extends MessageType<BattleFeedBackCardMessage> {
    constructor() {
        super("im.BattleFeedBackCardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "rival_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "feedback_card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "feedback_card", kind: "message", T: () => FeedbackCard },
            { no: 5, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleFeedBackCardMessage>): BattleFeedBackCardMessage {
        const message = { rivalUid: 0n, feedbackCardType: 0, battleId: 0n, channelId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleFeedBackCardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleFeedBackCardMessage): BattleFeedBackCardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 rival_uid */ 2:
                    message.rivalUid = reader.int64().toBigInt();
                    break;
                case /* int32 feedback_card_type */ 3:
                    message.feedbackCardType = reader.int32();
                    break;
                case /* data.FeedbackCard feedback_card */ 4:
                    message.feedbackCard = FeedbackCard.internalBinaryRead(reader, reader.uint32(), options, message.feedbackCard);
                    break;
                case /* int64 battle_id */ 5:
                    message.battleId = reader.int64().toBigInt();
                    break;
                case /* int64 channel_id */ 6:
                    message.channelId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleFeedBackCardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 rival_uid = 2; */
        if (message.rivalUid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rivalUid);
        /* int32 feedback_card_type = 3; */
        if (message.feedbackCardType !== 0)
            writer.tag(3, WireType.Varint).int32(message.feedbackCardType);
        /* data.FeedbackCard feedback_card = 4; */
        if (message.feedbackCard)
            FeedbackCard.internalBinaryWrite(message.feedbackCard, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 battle_id = 5; */
        if (message.battleId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.battleId);
        /* int64 channel_id = 6; */
        if (message.channelId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleFeedBackCardMessage
 */
export const BattleFeedBackCardMessage = new BattleFeedBackCardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleFrontRankMessage$Type extends MessageType<BattleFrontRankMessage> {
    constructor() {
        super("im.BattleFrontRankMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<BattleFrontRankMessage>): BattleFrontRankMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleFrontRankMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleFrontRankMessage): BattleFrontRankMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleFrontRankMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleFrontRankMessage
 */
export const BattleFrontRankMessage = new BattleFrontRankMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleInviteMessage$Type extends MessageType<BattleInviteMessage> {
    constructor() {
        super("im.BattleInviteMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "invite_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "sign_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "invite_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "multiple_again_prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "panel_title", kind: "message", T: () => PanelTitle },
            { no: 9, name: "scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "invite_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "invite_sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "wait_sec", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "battle_config_setting", kind: "message", T: () => BattleConfigSetting },
            { no: 15, name: "duration_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "multi_pk_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "client_attached_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleInviteMessage>): BattleInviteMessage {
        const message = { inviteType: 0, channelId: 0n, signExtra: "", inviteUid: 0n, battleId: 0n, multipleAgainPrompts: "", scene: 0, inviteTitle: "", inviteSubTitle: "", waitSec: 0n, durationTime: 0n, multiPkMode: 0, clientAttachedInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleInviteMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleInviteMessage): BattleInviteMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 invite_type */ 2:
                    message.inviteType = reader.int32();
                    break;
                case /* int64 channel_id */ 3:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* string sign_extra */ 4:
                    message.signExtra = reader.string();
                    break;
                case /* int64 invite_uid */ 5:
                    message.inviteUid = reader.int64().toBigInt();
                    break;
                case /* int64 battle_id */ 6:
                    message.battleId = reader.int64().toBigInt();
                    break;
                case /* string multiple_again_prompts */ 7:
                    message.multipleAgainPrompts = reader.string();
                    break;
                case /* data.PanelTitle panel_title */ 8:
                    message.panelTitle = PanelTitle.internalBinaryRead(reader, reader.uint32(), options, message.panelTitle);
                    break;
                case /* int32 scene */ 9:
                    message.scene = reader.int32();
                    break;
                case /* string invite_title */ 10:
                    message.inviteTitle = reader.string();
                    break;
                case /* string invite_sub_title */ 11:
                    message.inviteSubTitle = reader.string();
                    break;
                case /* int64 wait_sec */ 12:
                    message.waitSec = reader.int64().toBigInt();
                    break;
                case /* data.BattleConfigSetting battle_config_setting */ 14:
                    message.battleConfigSetting = BattleConfigSetting.internalBinaryRead(reader, reader.uint32(), options, message.battleConfigSetting);
                    break;
                case /* int64 duration_time */ 15:
                    message.durationTime = reader.int64().toBigInt();
                    break;
                case /* int32 multi_pk_mode */ 16:
                    message.multiPkMode = reader.int32();
                    break;
                case /* string client_attached_info */ 17:
                    message.clientAttachedInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleInviteMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 invite_type = 2; */
        if (message.inviteType !== 0)
            writer.tag(2, WireType.Varint).int32(message.inviteType);
        /* int64 channel_id = 3; */
        if (message.channelId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.channelId);
        /* string sign_extra = 4; */
        if (message.signExtra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signExtra);
        /* int64 invite_uid = 5; */
        if (message.inviteUid !== 0n)
            writer.tag(5, WireType.Varint).int64(message.inviteUid);
        /* int64 battle_id = 6; */
        if (message.battleId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.battleId);
        /* string multiple_again_prompts = 7; */
        if (message.multipleAgainPrompts !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.multipleAgainPrompts);
        /* data.PanelTitle panel_title = 8; */
        if (message.panelTitle)
            PanelTitle.internalBinaryWrite(message.panelTitle, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 scene = 9; */
        if (message.scene !== 0)
            writer.tag(9, WireType.Varint).int32(message.scene);
        /* string invite_title = 10; */
        if (message.inviteTitle !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.inviteTitle);
        /* string invite_sub_title = 11; */
        if (message.inviteSubTitle !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.inviteSubTitle);
        /* int64 wait_sec = 12; */
        if (message.waitSec !== 0n)
            writer.tag(12, WireType.Varint).int64(message.waitSec);
        /* data.BattleConfigSetting battle_config_setting = 14; */
        if (message.battleConfigSetting)
            BattleConfigSetting.internalBinaryWrite(message.battleConfigSetting, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration_time = 15; */
        if (message.durationTime !== 0n)
            writer.tag(15, WireType.Varint).int64(message.durationTime);
        /* int32 multi_pk_mode = 16; */
        if (message.multiPkMode !== 0)
            writer.tag(16, WireType.Varint).int32(message.multiPkMode);
        /* string client_attached_info = 17; */
        if (message.clientAttachedInfo !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.clientAttachedInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleInviteMessage
 */
export const BattleInviteMessage = new BattleInviteMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleModeMessage$Type extends MessageType<BattleModeMessage> {
    constructor() {
        super("im.BattleModeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "steal_tower_data", kind: "message", T: () => BattleModeMessage_StealTowerData },
            { no: 4, name: "now", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleModeMessage>): BattleModeMessage {
        const message = { mode: 0n, now: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleModeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleModeMessage): BattleModeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 mode */ 2:
                    message.mode = reader.int64().toBigInt();
                    break;
                case /* im.BattleModeMessage.StealTowerData steal_tower_data */ 3:
                    message.stealTowerData = BattleModeMessage_StealTowerData.internalBinaryRead(reader, reader.uint32(), options, message.stealTowerData);
                    break;
                case /* int64 now */ 4:
                    message.now = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleModeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 mode = 2; */
        if (message.mode !== 0n)
            writer.tag(2, WireType.Varint).int64(message.mode);
        /* im.BattleModeMessage.StealTowerData steal_tower_data = 3; */
        if (message.stealTowerData)
            BattleModeMessage_StealTowerData.internalBinaryWrite(message.stealTowerData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 now = 4; */
        if (message.now !== 0n)
            writer.tag(4, WireType.Varint).int64(message.now);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleModeMessage
 */
export const BattleModeMessage = new BattleModeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleModeMessage_StealTowerData$Type extends MessageType<BattleModeMessage_StealTowerData> {
    constructor() {
        super("im.BattleModeMessage.StealTowerData", [
            { no: 1, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "finish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "target_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "attacker_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "finish", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "win", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "open_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleModeMessage_StealTowerData>): BattleModeMessage_StealTowerData {
        const message = { startTime: 0n, finishTime: 0n, duration: 0n, targetScore: 0n, attackerId: 0n, finish: false, win: 0n, openScore: 0n, count: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleModeMessage_StealTowerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleModeMessage_StealTowerData): BattleModeMessage_StealTowerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_time */ 1:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 finish_time */ 2:
                    message.finishTime = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 target_score */ 4:
                    message.targetScore = reader.int64().toBigInt();
                    break;
                case /* int64 attacker_id */ 5:
                    message.attackerId = reader.int64().toBigInt();
                    break;
                case /* bool finish */ 6:
                    message.finish = reader.bool();
                    break;
                case /* int64 win */ 7:
                    message.win = reader.int64().toBigInt();
                    break;
                case /* int64 open_score */ 8:
                    message.openScore = reader.int64().toBigInt();
                    break;
                case /* int64 count */ 9:
                    message.count = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleModeMessage_StealTowerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_time = 1; */
        if (message.startTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startTime);
        /* int64 finish_time = 2; */
        if (message.finishTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.finishTime);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* int64 target_score = 4; */
        if (message.targetScore !== 0n)
            writer.tag(4, WireType.Varint).int64(message.targetScore);
        /* int64 attacker_id = 5; */
        if (message.attackerId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.attackerId);
        /* bool finish = 6; */
        if (message.finish !== false)
            writer.tag(6, WireType.Varint).bool(message.finish);
        /* int64 win = 7; */
        if (message.win !== 0n)
            writer.tag(7, WireType.Varint).int64(message.win);
        /* int64 open_score = 8; */
        if (message.openScore !== 0n)
            writer.tag(8, WireType.Varint).int64(message.openScore);
        /* int64 count = 9; */
        if (message.count !== 0n)
            writer.tag(9, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleModeMessage.StealTowerData
 */
export const BattleModeMessage_StealTowerData = new BattleModeMessage_StealTowerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleMultiMatchMessage$Type extends MessageType<BattleMultiMatchMessage> {
    constructor() {
        super("im.BattleMultiMatchMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "match_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "expect_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "preview_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleMultiMatchMessage_PreviewUser },
            { no: 5, name: "default_wait_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "invite_limit_sec", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleMultiMatchMessage>): BattleMultiMatchMessage {
        const message = { matchStatus: 0, expectTime: 0n, previewUserList: [], defaultWaitLimit: 0n, inviteLimitSec: 0n, matchType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleMultiMatchMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleMultiMatchMessage): BattleMultiMatchMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 match_status */ 2:
                    message.matchStatus = reader.int32();
                    break;
                case /* int64 expect_time */ 3:
                    message.expectTime = reader.int64().toBigInt();
                    break;
                case /* repeated im.BattleMultiMatchMessage.PreviewUser preview_user_list */ 4:
                    message.previewUserList.push(BattleMultiMatchMessage_PreviewUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 default_wait_limit */ 5:
                    message.defaultWaitLimit = reader.int64().toBigInt();
                    break;
                case /* int64 invite_limit_sec */ 6:
                    message.inviteLimitSec = reader.int64().toBigInt();
                    break;
                case /* int64 match_type */ 7:
                    message.matchType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleMultiMatchMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 match_status = 2; */
        if (message.matchStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.matchStatus);
        /* int64 expect_time = 3; */
        if (message.expectTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.expectTime);
        /* repeated im.BattleMultiMatchMessage.PreviewUser preview_user_list = 4; */
        for (let i = 0; i < message.previewUserList.length; i++)
            BattleMultiMatchMessage_PreviewUser.internalBinaryWrite(message.previewUserList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 default_wait_limit = 5; */
        if (message.defaultWaitLimit !== 0n)
            writer.tag(5, WireType.Varint).int64(message.defaultWaitLimit);
        /* int64 invite_limit_sec = 6; */
        if (message.inviteLimitSec !== 0n)
            writer.tag(6, WireType.Varint).int64(message.inviteLimitSec);
        /* int64 match_type = 7; */
        if (message.matchType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.matchType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleMultiMatchMessage
 */
export const BattleMultiMatchMessage = new BattleMultiMatchMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleMultiMatchMessage_PreviewUser$Type extends MessageType<BattleMultiMatchMessage_PreviewUser> {
    constructor() {
        super("im.BattleMultiMatchMessage.PreviewUser", [
            { no: 1, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BattleMultiMatchMessage_PreviewUser>): BattleMultiMatchMessage_PreviewUser {
        const message = { nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleMultiMatchMessage_PreviewUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleMultiMatchMessage_PreviewUser): BattleMultiMatchMessage_PreviewUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nickname */ 1:
                    message.nickname = reader.string();
                    break;
                case /* data.Image avatar */ 2:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleMultiMatchMessage_PreviewUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nickname = 1; */
        if (message.nickname !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nickname);
        /* data.Image avatar = 2; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleMultiMatchMessage.PreviewUser
 */
export const BattleMultiMatchMessage_PreviewUser = new BattleMultiMatchMessage_PreviewUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleNotifyMessage$Type extends MessageType<BattleNotifyMessage> {
    constructor() {
        super("im.BattleNotifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notify_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "continue_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleNotifyMessage>): BattleNotifyMessage {
        const message = { content: "", notifyType: 0, continueSeconds: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleNotifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleNotifyMessage): BattleNotifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int32 notify_type */ 3:
                    message.notifyType = reader.int32();
                    break;
                case /* int64 continue_seconds */ 4:
                    message.continueSeconds = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleNotifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int32 notify_type = 3; */
        if (message.notifyType !== 0)
            writer.tag(3, WireType.Varint).int32(message.notifyType);
        /* int64 continue_seconds = 4; */
        if (message.continueSeconds !== 0n)
            writer.tag(4, WireType.Varint).int64(message.continueSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleNotifyMessage
 */
export const BattleNotifyMessage = new BattleNotifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrecisionMatch$Type extends MessageType<PrecisionMatch> {
    constructor() {
        super("im.PrecisionMatch", [
            { no: 1, name: "sponsor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "matchers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PrecisionMatch_Matcher },
            { no: 3, name: "match_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "wait_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "precision_match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "activity_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "recommend_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "not_disturb_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "flex_activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "battle_attached_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "sign_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrecisionMatch>): PrecisionMatch {
        const message = { sponsorId: 0n, matchers: [], matchReason: "", waitSeconds: 0n, precisionMatchId: 0n, activityName: "", recommendReason: "", source: 0, notDisturbText: "", flexActivityId: 0n, duration: 0n, battleAttachedInfo: "", signExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrecisionMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrecisionMatch): PrecisionMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sponsor_id */ 1:
                    message.sponsorId = reader.int64().toBigInt();
                    break;
                case /* repeated im.PrecisionMatch.Matcher matchers */ 2:
                    message.matchers.push(PrecisionMatch_Matcher.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string match_reason */ 3:
                    message.matchReason = reader.string();
                    break;
                case /* int64 wait_seconds */ 4:
                    message.waitSeconds = reader.int64().toBigInt();
                    break;
                case /* int64 precision_match_id */ 5:
                    message.precisionMatchId = reader.int64().toBigInt();
                    break;
                case /* string activity_name */ 6:
                    message.activityName = reader.string();
                    break;
                case /* string recommend_reason */ 7:
                    message.recommendReason = reader.string();
                    break;
                case /* int32 source */ 9:
                    message.source = reader.int32();
                    break;
                case /* string not_disturb_text */ 10:
                    message.notDisturbText = reader.string();
                    break;
                case /* int64 flex_activity_id */ 11:
                    message.flexActivityId = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 12:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string battle_attached_info */ 13:
                    message.battleAttachedInfo = reader.string();
                    break;
                case /* string sign_extra */ 8:
                    message.signExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrecisionMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 sponsor_id = 1; */
        if (message.sponsorId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sponsorId);
        /* repeated im.PrecisionMatch.Matcher matchers = 2; */
        for (let i = 0; i < message.matchers.length; i++)
            PrecisionMatch_Matcher.internalBinaryWrite(message.matchers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string match_reason = 3; */
        if (message.matchReason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.matchReason);
        /* int64 wait_seconds = 4; */
        if (message.waitSeconds !== 0n)
            writer.tag(4, WireType.Varint).int64(message.waitSeconds);
        /* int64 precision_match_id = 5; */
        if (message.precisionMatchId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.precisionMatchId);
        /* string activity_name = 6; */
        if (message.activityName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.activityName);
        /* string recommend_reason = 7; */
        if (message.recommendReason !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.recommendReason);
        /* int32 source = 9; */
        if (message.source !== 0)
            writer.tag(9, WireType.Varint).int32(message.source);
        /* string not_disturb_text = 10; */
        if (message.notDisturbText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.notDisturbText);
        /* int64 flex_activity_id = 11; */
        if (message.flexActivityId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.flexActivityId);
        /* int64 duration = 12; */
        if (message.duration !== 0n)
            writer.tag(12, WireType.Varint).int64(message.duration);
        /* string battle_attached_info = 13; */
        if (message.battleAttachedInfo !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.battleAttachedInfo);
        /* string sign_extra = 8; */
        if (message.signExtra !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.signExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PrecisionMatch
 */
export const PrecisionMatch = new PrecisionMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrecisionMatch_Matcher$Type extends MessageType<PrecisionMatch_Matcher> {
    constructor() {
        super("im.PrecisionMatch.Matcher", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room", kind: "message", T: () => Room },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleRivalTag },
            { no: 5, name: "desc_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrecisionMatch_Matcher>): PrecisionMatch_Matcher {
        const message = { userId: 0n, status: 0, tags: [], descText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrecisionMatch_Matcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrecisionMatch_Matcher): PrecisionMatch_Matcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Room room */ 2:
                    message.room = Room.internalBinaryRead(reader, reader.uint32(), options, message.room);
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* repeated data.BattleRivalTag tags */ 4:
                    message.tags.push(BattleRivalTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string desc_text */ 5:
                    message.descText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrecisionMatch_Matcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* data.Room room = 2; */
        if (message.room)
            Room.internalBinaryWrite(message.room, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* repeated data.BattleRivalTag tags = 4; */
        for (let i = 0; i < message.tags.length; i++)
            BattleRivalTag.internalBinaryWrite(message.tags[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string desc_text = 5; */
        if (message.descText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.descText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PrecisionMatch.Matcher
 */
export const PrecisionMatch_Matcher = new PrecisionMatch_Matcher$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePrecisionMatchMessage$Type extends MessageType<BattlePrecisionMatchMessage> {
    constructor() {
        super("im.BattlePrecisionMatchMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "precision_match", kind: "message", T: () => PrecisionMatch }
        ]);
    }
    create(value?: PartialMessage<BattlePrecisionMatchMessage>): BattlePrecisionMatchMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePrecisionMatchMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePrecisionMatchMessage): BattlePrecisionMatchMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.PrecisionMatch precision_match */ 2:
                    message.precisionMatch = PrecisionMatch.internalBinaryRead(reader, reader.uint32(), options, message.precisionMatch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePrecisionMatchMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.PrecisionMatch precision_match = 2; */
        if (message.precisionMatch)
            PrecisionMatch.internalBinaryWrite(message.precisionMatch, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattlePrecisionMatchMessage
 */
export const BattlePrecisionMatchMessage = new BattlePrecisionMatchMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleRejectMessage$Type extends MessageType<BattleRejectMessage> {
    constructor() {
        super("im.BattleRejectMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "reject_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "multiple_again_prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "invite_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattleRejectMessage>): BattleRejectMessage {
        const message = { channelId: 0n, battleId: 0n, rejectUid: 0n, multipleAgainPrompts: "", inviteType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleRejectMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleRejectMessage): BattleRejectMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 channel_id */ 2:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 battle_id */ 3:
                    message.battleId = reader.int64().toBigInt();
                    break;
                case /* int64 reject_uid */ 4:
                    message.rejectUid = reader.int64().toBigInt();
                    break;
                case /* string multiple_again_prompts */ 5:
                    message.multipleAgainPrompts = reader.string();
                    break;
                case /* int32 invite_type */ 6:
                    message.inviteType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleRejectMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 channel_id = 2; */
        if (message.channelId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.channelId);
        /* int64 battle_id = 3; */
        if (message.battleId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.battleId);
        /* int64 reject_uid = 4; */
        if (message.rejectUid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.rejectUid);
        /* string multiple_again_prompts = 5; */
        if (message.multipleAgainPrompts !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.multipleAgainPrompts);
        /* int32 invite_type = 6; */
        if (message.inviteType !== 0)
            writer.tag(6, WireType.Varint).int32(message.inviteType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleRejectMessage
 */
export const BattleRejectMessage = new BattleRejectMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSeasonPKResultMessage$Type extends MessageType<BattleSeasonPKResultMessage> {
    constructor() {
        super("im.BattleSeasonPKResultMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "pk_result", kind: "message", T: () => BattleSeasonPKResultMessage_PKResult },
            { no: 3, name: "upgrade_result", kind: "message", T: () => BattleSeasonPKResultMessage_UpgradeResult }
        ]);
    }
    create(value?: PartialMessage<BattleSeasonPKResultMessage>): BattleSeasonPKResultMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSeasonPKResultMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSeasonPKResultMessage): BattleSeasonPKResultMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.BattleSeasonPKResultMessage.PKResult pk_result */ 2:
                    message.pkResult = BattleSeasonPKResultMessage_PKResult.internalBinaryRead(reader, reader.uint32(), options, message.pkResult);
                    break;
                case /* im.BattleSeasonPKResultMessage.UpgradeResult upgrade_result */ 3:
                    message.upgradeResult = BattleSeasonPKResultMessage_UpgradeResult.internalBinaryRead(reader, reader.uint32(), options, message.upgradeResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSeasonPKResultMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleSeasonPKResultMessage.PKResult pk_result = 2; */
        if (message.pkResult)
            BattleSeasonPKResultMessage_PKResult.internalBinaryWrite(message.pkResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleSeasonPKResultMessage.UpgradeResult upgrade_result = 3; */
        if (message.upgradeResult)
            BattleSeasonPKResultMessage_UpgradeResult.internalBinaryWrite(message.upgradeResult, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleSeasonPKResultMessage
 */
export const BattleSeasonPKResultMessage = new BattleSeasonPKResultMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSeasonPKResultMessage_PKResult$Type extends MessageType<BattleSeasonPKResultMessage_PKResult> {
    constructor() {
        super("im.BattleSeasonPKResultMessage.PKResult", [
            { no: 1, name: "result_img", kind: "message", T: () => Image },
            { no: 2, name: "bg_img", kind: "message", T: () => Image },
            { no: 3, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleSeasonPKResultMessage_PKResult>): BattleSeasonPKResultMessage_PKResult {
        const message = { resultStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSeasonPKResultMessage_PKResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSeasonPKResultMessage_PKResult): BattleSeasonPKResultMessage_PKResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image result_img */ 1:
                    message.resultImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.resultImg);
                    break;
                case /* data.Image bg_img */ 2:
                    message.bgImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgImg);
                    break;
                case /* string result_str */ 3:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSeasonPKResultMessage_PKResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image result_img = 1; */
        if (message.resultImg)
            Image.internalBinaryWrite(message.resultImg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image bg_img = 2; */
        if (message.bgImg)
            Image.internalBinaryWrite(message.bgImg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string result_str = 3; */
        if (message.resultStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleSeasonPKResultMessage.PKResult
 */
export const BattleSeasonPKResultMessage_PKResult = new BattleSeasonPKResultMessage_PKResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSeasonPKResultMessage_UpgradeResult$Type extends MessageType<BattleSeasonPKResultMessage_UpgradeResult> {
    constructor() {
        super("im.BattleSeasonPKResultMessage.UpgradeResult", [
            { no: 1, name: "grade_img", kind: "message", T: () => Image },
            { no: 2, name: "upgrade_img", kind: "message", T: () => Image },
            { no: 3, name: "upgrade_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "desc_bg_img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BattleSeasonPKResultMessage_UpgradeResult>): BattleSeasonPKResultMessage_UpgradeResult {
        const message = { upgradeDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSeasonPKResultMessage_UpgradeResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSeasonPKResultMessage_UpgradeResult): BattleSeasonPKResultMessage_UpgradeResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image grade_img */ 1:
                    message.gradeImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.gradeImg);
                    break;
                case /* data.Image upgrade_img */ 2:
                    message.upgradeImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.upgradeImg);
                    break;
                case /* string upgrade_desc */ 3:
                    message.upgradeDesc = reader.string();
                    break;
                case /* data.Image desc_bg_img */ 4:
                    message.descBgImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.descBgImg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSeasonPKResultMessage_UpgradeResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image grade_img = 1; */
        if (message.gradeImg)
            Image.internalBinaryWrite(message.gradeImg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image upgrade_img = 2; */
        if (message.upgradeImg)
            Image.internalBinaryWrite(message.upgradeImg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string upgrade_desc = 3; */
        if (message.upgradeDesc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.upgradeDesc);
        /* data.Image desc_bg_img = 4; */
        if (message.descBgImg)
            Image.internalBinaryWrite(message.descBgImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleSeasonPKResultMessage.UpgradeResult
 */
export const BattleSeasonPKResultMessage_UpgradeResult = new BattleSeasonPKResultMessage_UpgradeResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleTeamTaskAskMessage$Type extends MessageType<BattleTeamTaskAskMessage> {
    constructor() {
        super("im.BattleTeamTaskAskMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "team_task_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleTeamTaskAskMessage>): BattleTeamTaskAskMessage {
        const message = { teamTaskJson: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleTeamTaskAskMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleTeamTaskAskMessage): BattleTeamTaskAskMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string team_task_json */ 2:
                    message.teamTaskJson = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleTeamTaskAskMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string team_task_json = 2; */
        if (message.teamTaskJson !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.teamTaskJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleTeamTaskAskMessage
 */
export const BattleTeamTaskAskMessage = new BattleTeamTaskAskMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleTeamTaskMessage$Type extends MessageType<BattleTeamTaskMessage> {
    constructor() {
        super("im.BattleTeamTaskMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "team_task", kind: "message", T: () => TeamTask },
            { no: 3, name: "team_task_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleTeamTaskMessage>): BattleTeamTaskMessage {
        const message = { teamTaskJson: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleTeamTaskMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleTeamTaskMessage): BattleTeamTaskMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.TeamTask team_task */ 2:
                    message.teamTask = TeamTask.internalBinaryRead(reader, reader.uint32(), options, message.teamTask);
                    break;
                case /* string team_task_json */ 3:
                    message.teamTaskJson = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleTeamTaskMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.TeamTask team_task = 2; */
        if (message.teamTask)
            TeamTask.internalBinaryWrite(message.teamTask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string team_task_json = 3; */
        if (message.teamTaskJson !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.teamTaskJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleTeamTaskMessage
 */
export const BattleTeamTaskMessage = new BattleTeamTaskMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleUseCardMessage$Type extends MessageType<BattleUseCardMessage> {
    constructor() {
        super("im.BattleUseCardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "info", kind: "message", T: () => ItemCardInfo },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattleUseCardMessage>): BattleUseCardMessage {
        const message = { extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleUseCardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleUseCardMessage): BattleUseCardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.ItemCardInfo info */ 2:
                    message.info = ItemCardInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleUseCardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.ItemCardInfo info = 2; */
        if (message.info)
            ItemCardInfo.internalBinaryWrite(message.info, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleUseCardMessage
 */
export const BattleUseCardMessage = new BattleUseCardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BeginnerGuideMessage$Type extends MessageType<BeginnerGuideMessage> {
    constructor() {
        super("im.BeginnerGuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BeginnerGuideMessage>): BeginnerGuideMessage {
        const message = { messageType: 0, prompts: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BeginnerGuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeginnerGuideMessage): BeginnerGuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 message_type */ 2:
                    message.messageType = reader.int32();
                    break;
                case /* string prompts */ 3:
                    message.prompts = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BeginnerGuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 2; */
        if (message.messageType !== 0)
            writer.tag(2, WireType.Varint).int32(message.messageType);
        /* string prompts = 3; */
        if (message.prompts !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.prompts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BeginnerGuideMessage
 */
export const BeginnerGuideMessage = new BeginnerGuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicBigEventMessage$Type extends MessageType<LinkmicBigEventMessage> {
    constructor() {
        super("im.LinkmicBigEventMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "init_linkmic_content", kind: "message", T: () => InitLinkmicContent },
            { no: 4, name: "switch_scene_content", kind: "message", T: () => SwitchSceneContent },
            { no: 5, name: "switch_earphone_monitor_content", kind: "message", T: () => SwitchEarphoneMonitorContent },
            { no: 6, name: "switch_ktv_mode_content", kind: "message", T: () => SwitchKtvModeContent },
            { no: 7, name: "switch_lyric_status_content", kind: "message", T: () => SwitchLyricStatusContent },
            { no: 8, name: "switch_full_song_status_content", kind: "message", T: () => SwitchFullSongStatusContent },
            { no: 9, name: "switch_tuning_effect_content", kind: "message", T: () => SwitchTuningEffectContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicBigEventMessage>): LinkmicBigEventMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicBigEventMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicBigEventMessage): LinkmicBigEventMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.InitLinkmicContent init_linkmic_content */ 3:
                    message.initLinkmicContent = InitLinkmicContent.internalBinaryRead(reader, reader.uint32(), options, message.initLinkmicContent);
                    break;
                case /* im.SwitchSceneContent switch_scene_content */ 4:
                    message.switchSceneContent = SwitchSceneContent.internalBinaryRead(reader, reader.uint32(), options, message.switchSceneContent);
                    break;
                case /* im.SwitchEarphoneMonitorContent switch_earphone_monitor_content */ 5:
                    message.switchEarphoneMonitorContent = SwitchEarphoneMonitorContent.internalBinaryRead(reader, reader.uint32(), options, message.switchEarphoneMonitorContent);
                    break;
                case /* im.SwitchKtvModeContent switch_ktv_mode_content */ 6:
                    message.switchKtvModeContent = SwitchKtvModeContent.internalBinaryRead(reader, reader.uint32(), options, message.switchKtvModeContent);
                    break;
                case /* im.SwitchLyricStatusContent switch_lyric_status_content */ 7:
                    message.switchLyricStatusContent = SwitchLyricStatusContent.internalBinaryRead(reader, reader.uint32(), options, message.switchLyricStatusContent);
                    break;
                case /* im.SwitchFullSongStatusContent switch_full_song_status_content */ 8:
                    message.switchFullSongStatusContent = SwitchFullSongStatusContent.internalBinaryRead(reader, reader.uint32(), options, message.switchFullSongStatusContent);
                    break;
                case /* im.SwitchTuningEffectContent switch_tuning_effect_content */ 9:
                    message.switchTuningEffectContent = SwitchTuningEffectContent.internalBinaryRead(reader, reader.uint32(), options, message.switchTuningEffectContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicBigEventMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.InitLinkmicContent init_linkmic_content = 3; */
        if (message.initLinkmicContent)
            InitLinkmicContent.internalBinaryWrite(message.initLinkmicContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.SwitchSceneContent switch_scene_content = 4; */
        if (message.switchSceneContent)
            SwitchSceneContent.internalBinaryWrite(message.switchSceneContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.SwitchEarphoneMonitorContent switch_earphone_monitor_content = 5; */
        if (message.switchEarphoneMonitorContent)
            SwitchEarphoneMonitorContent.internalBinaryWrite(message.switchEarphoneMonitorContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.SwitchKtvModeContent switch_ktv_mode_content = 6; */
        if (message.switchKtvModeContent)
            SwitchKtvModeContent.internalBinaryWrite(message.switchKtvModeContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.SwitchLyricStatusContent switch_lyric_status_content = 7; */
        if (message.switchLyricStatusContent)
            SwitchLyricStatusContent.internalBinaryWrite(message.switchLyricStatusContent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.SwitchFullSongStatusContent switch_full_song_status_content = 8; */
        if (message.switchFullSongStatusContent)
            SwitchFullSongStatusContent.internalBinaryWrite(message.switchFullSongStatusContent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* im.SwitchTuningEffectContent switch_tuning_effect_content = 9; */
        if (message.switchTuningEffectContent)
            SwitchTuningEffectContent.internalBinaryWrite(message.switchTuningEffectContent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicBigEventMessage
 */
export const LinkmicBigEventMessage = new LinkmicBigEventMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitLinkmicContent$Type extends MessageType<InitLinkmicContent> {
    constructor() {
        super("im.InitLinkmicContent", [
            { no: 1, name: "target_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InitLinkmicContent>): InitLinkmicContent {
        const message = { targetMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitLinkmicContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitLinkmicContent): InitLinkmicContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 target_mode */ 1:
                    message.targetMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitLinkmicContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 target_mode = 1; */
        if (message.targetMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.targetMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InitLinkmicContent
 */
export const InitLinkmicContent = new InitLinkmicContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchSceneContent$Type extends MessageType<SwitchSceneContent> {
    constructor() {
        super("im.SwitchSceneContent", [
            { no: 1, name: "target_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchSceneContent>): SwitchSceneContent {
        const message = { targetMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchSceneContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchSceneContent): SwitchSceneContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 target_mode */ 1:
                    message.targetMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchSceneContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 target_mode = 1; */
        if (message.targetMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.targetMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SwitchSceneContent
 */
export const SwitchSceneContent = new SwitchSceneContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchEarphoneMonitorContent$Type extends MessageType<SwitchEarphoneMonitorContent> {
    constructor() {
        super("im.SwitchEarphoneMonitorContent", [
            { no: 1, name: "to_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchEarphoneMonitorContent>): SwitchEarphoneMonitorContent {
        const message = { toStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchEarphoneMonitorContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchEarphoneMonitorContent): SwitchEarphoneMonitorContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 to_status */ 1:
                    message.toStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchEarphoneMonitorContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 to_status = 1; */
        if (message.toStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.toStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SwitchEarphoneMonitorContent
 */
export const SwitchEarphoneMonitorContent = new SwitchEarphoneMonitorContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchKtvModeContent$Type extends MessageType<SwitchKtvModeContent> {
    constructor() {
        super("im.SwitchKtvModeContent", [
            { no: 1, name: "ktv_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchKtvModeContent>): SwitchKtvModeContent {
        const message = { ktvMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchKtvModeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchKtvModeContent): SwitchKtvModeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 ktv_mode */ 1:
                    message.ktvMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchKtvModeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 ktv_mode = 1; */
        if (message.ktvMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.ktvMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SwitchKtvModeContent
 */
export const SwitchKtvModeContent = new SwitchKtvModeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchLyricStatusContent$Type extends MessageType<SwitchLyricStatusContent> {
    constructor() {
        super("im.SwitchLyricStatusContent", [
            { no: 1, name: "to_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchLyricStatusContent>): SwitchLyricStatusContent {
        const message = { toStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchLyricStatusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchLyricStatusContent): SwitchLyricStatusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 to_status */ 1:
                    message.toStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchLyricStatusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 to_status = 1; */
        if (message.toStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.toStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SwitchLyricStatusContent
 */
export const SwitchLyricStatusContent = new SwitchLyricStatusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchFullSongStatusContent$Type extends MessageType<SwitchFullSongStatusContent> {
    constructor() {
        super("im.SwitchFullSongStatusContent", [
            { no: 1, name: "to_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchFullSongStatusContent>): SwitchFullSongStatusContent {
        const message = { toStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchFullSongStatusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchFullSongStatusContent): SwitchFullSongStatusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 to_status */ 1:
                    message.toStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchFullSongStatusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 to_status = 1; */
        if (message.toStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.toStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SwitchFullSongStatusContent
 */
export const SwitchFullSongStatusContent = new SwitchFullSongStatusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchTuningEffectContent$Type extends MessageType<SwitchTuningEffectContent> {
    constructor() {
        super("im.SwitchTuningEffectContent", [
            { no: 1, name: "to_effect_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SwitchTuningEffectContent>): SwitchTuningEffectContent {
        const message = { toEffectName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SwitchTuningEffectContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchTuningEffectContent): SwitchTuningEffectContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string to_effect_name */ 1:
                    message.toEffectName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchTuningEffectContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string to_effect_name = 1; */
        if (message.toEffectName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toEffectName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SwitchTuningEffectContent
 */
export const SwitchTuningEffectContent = new SwitchTuningEffectContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BridgeData$Type extends MessageType<BridgeData> {
    constructor() {
        super("im.BridgeData", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "bridge_message_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BridgeData>): BridgeData {
        const message = { bridgeMessageJson: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BridgeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BridgeData): BridgeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string bridge_message_json */ 2:
                    message.bridgeMessageJson = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BridgeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string bridge_message_json = 2; */
        if (message.bridgeMessageJson !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bridgeMessageJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BridgeData
 */
export const BridgeData = new BridgeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BridgeMessage$Type extends MessageType<BridgeMessage> {
    constructor() {
        super("im.BridgeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "bridge", kind: "message", T: () => BridgeData }
        ]);
    }
    create(value?: PartialMessage<BridgeMessage>): BridgeMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BridgeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BridgeMessage): BridgeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.BridgeData bridge */ 2:
                    message.bridge = BridgeData.internalBinaryRead(reader, reader.uint32(), options, message.bridge);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BridgeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.BridgeData bridge = 2; */
        if (message.bridge)
            BridgeData.internalBinaryWrite(message.bridge, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BridgeMessage
 */
export const BridgeMessage = new BridgeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrotherhoodMessage$Type extends MessageType<BrotherhoodMessage> {
    constructor() {
        super("im.BrotherhoodMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrotherhoodMessage>): BrotherhoodMessage {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BrotherhoodMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrotherhoodMessage): BrotherhoodMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrotherhoodMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BrotherhoodMessage
 */
export const BrotherhoodMessage = new BrotherhoodMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarBallShowMessage$Type extends MessageType<CarBallShowMessage> {
    constructor() {
        super("im.CarBallShowMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "is_show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CarBallShowMessage>): CarBallShowMessage {
        const message = { isShow: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CarBallShowMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarBallShowMessage): CarBallShowMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool is_show */ 2:
                    message.isShow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarBallShowMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_show = 2; */
        if (message.isShow !== false)
            writer.tag(2, WireType.Varint).bool(message.isShow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CarBallShowMessage
 */
export const CarBallShowMessage = new CarBallShowMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarSeriesInfoMessage$Type extends MessageType<CarSeriesInfoMessage> {
    constructor() {
        super("im.CarSeriesInfoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "series_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "series_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "official_price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "open_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CarSeriesInfoMessage>): CarSeriesInfoMessage {
        const message = { actionType: 0n, seriesId: 0n, seriesName: "", officialPrice: "", imageUrl: "", openUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CarSeriesInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarSeriesInfoMessage): CarSeriesInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 action_type */ 2:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* int64 series_id */ 3:
                    message.seriesId = reader.int64().toBigInt();
                    break;
                case /* string series_name */ 4:
                    message.seriesName = reader.string();
                    break;
                case /* string official_price */ 5:
                    message.officialPrice = reader.string();
                    break;
                case /* string image_url */ 6:
                    message.imageUrl = reader.string();
                    break;
                case /* string open_url */ 7:
                    message.openUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarSeriesInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 action_type = 2; */
        if (message.actionType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.actionType);
        /* int64 series_id = 3; */
        if (message.seriesId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.seriesId);
        /* string series_name = 4; */
        if (message.seriesName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.seriesName);
        /* string official_price = 5; */
        if (message.officialPrice !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.officialPrice);
        /* string image_url = 6; */
        if (message.imageUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.imageUrl);
        /* string open_url = 7; */
        if (message.openUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.openUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CarSeriesInfoMessage
 */
export const CarSeriesInfoMessage = new CarSeriesInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarnivalMessage$Type extends MessageType<CarnivalMessage> {
    constructor() {
        super("im.CarnivalMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "text", kind: "message", T: () => CombinedText },
            { no: 3, name: "carnival_seq_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "danmaku_style_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "special_mark", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CarnivalMessage>): CarnivalMessage {
        const message = { carnivalSeqId: 0n, danmakuStyleType: 0n, specialMark: 0, priority: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CarnivalMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarnivalMessage): CarnivalMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.CombinedText text */ 2:
                    message.text = CombinedText.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* int64 carnival_seq_id */ 3:
                    message.carnivalSeqId = reader.int64().toBigInt();
                    break;
                case /* int64 danmaku_style_type */ 4:
                    message.danmakuStyleType = reader.int64().toBigInt();
                    break;
                case /* int32 special_mark */ 5:
                    message.specialMark = reader.int32();
                    break;
                case /* int64 priority */ 6:
                    message.priority = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarnivalMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.CombinedText text = 2; */
        if (message.text)
            CombinedText.internalBinaryWrite(message.text, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 carnival_seq_id = 3; */
        if (message.carnivalSeqId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.carnivalSeqId);
        /* int64 danmaku_style_type = 4; */
        if (message.danmakuStyleType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.danmakuStyleType);
        /* int32 special_mark = 5; */
        if (message.specialMark !== 0)
            writer.tag(5, WireType.Varint).int32(message.specialMark);
        /* int64 priority = 6; */
        if (message.priority !== 0n)
            writer.tag(6, WireType.Varint).int64(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CarnivalMessage
 */
export const CarnivalMessage = new CarnivalMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryChangeMessage$Type extends MessageType<CategoryChangeMessage> {
    constructor() {
        super("im.CategoryChangeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "category_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "category_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "challenge_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "challenge_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryChangeMessage>): CategoryChangeMessage {
        const message = { categoryId: "", categoryName: "", challengeId: "", challengeName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CategoryChangeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryChangeMessage): CategoryChangeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string category_id */ 2:
                    message.categoryId = reader.string();
                    break;
                case /* string category_name */ 3:
                    message.categoryName = reader.string();
                    break;
                case /* string challenge_id */ 4:
                    message.challengeId = reader.string();
                    break;
                case /* string challenge_name */ 5:
                    message.challengeName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryChangeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string category_id = 2; */
        if (message.categoryId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.categoryId);
        /* string category_name = 3; */
        if (message.categoryName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.categoryName);
        /* string challenge_id = 4; */
        if (message.challengeId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.challengeId);
        /* string challenge_name = 5; */
        if (message.challengeName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.challengeName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CategoryChangeMessage
 */
export const CategoryChangeMessage = new CategoryChangeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatCarnivalMessage$Type extends MessageType<ChatCarnivalMessage> {
    constructor() {
        super("im.ChatCarnivalMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "notify_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "anchor_start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "anchor_start_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user_start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_start_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "title_image", kind: "message", T: () => Image },
            { no: 10, name: "pre_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "orientations", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "move_speed", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "chat_style", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatItem },
            { no: 15, name: "egg_style", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EggItem },
            { no: 16, name: "word_orientation", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "move_direction", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "egg_show_range", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "size_and_alpha", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "vertical_offset", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "path", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "word_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "show_webp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "use_privilege_region", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "can_open_contour", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "support_show_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChatCarnivalMessage>): ChatCarnivalMessage {
        const message = { notifyType: 0n, anchorStartTimestamp: 0n, anchorStartSecond: 0n, userStartTimestamp: 0n, userStartSecond: 0n, duration: 0n, backgroundColor: "", preContent: "", content: "", orientations: 0n, moveSpeed: 0n, chatStyle: [], eggStyle: [], wordOrientation: 0n, moveDirection: 0n, eggShowRange: [], sizeAndAlpha: [], verticalOffset: [], path: 0n, wordColor: "", showWebp: 0n, usePrivilegeRegion: 0n, canOpenContour: 0n, supportShowType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatCarnivalMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatCarnivalMessage): ChatCarnivalMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 notify_type */ 2:
                    message.notifyType = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_start_timestamp */ 3:
                    message.anchorStartTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_start_second */ 4:
                    message.anchorStartSecond = reader.int64().toBigInt();
                    break;
                case /* int64 user_start_timestamp */ 5:
                    message.userStartTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 user_start_second */ 6:
                    message.userStartSecond = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 7:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string background_color */ 8:
                    message.backgroundColor = reader.string();
                    break;
                case /* data.Image title_image */ 9:
                    message.titleImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.titleImage);
                    break;
                case /* string pre_content */ 10:
                    message.preContent = reader.string();
                    break;
                case /* string content */ 11:
                    message.content = reader.string();
                    break;
                case /* int64 orientations */ 12:
                    message.orientations = reader.int64().toBigInt();
                    break;
                case /* int64 move_speed */ 13:
                    message.moveSpeed = reader.int64().toBigInt();
                    break;
                case /* repeated im.ChatItem chat_style */ 14:
                    message.chatStyle.push(ChatItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated im.EggItem egg_style */ 15:
                    message.eggStyle.push(EggItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 word_orientation */ 16:
                    message.wordOrientation = reader.int64().toBigInt();
                    break;
                case /* int64 move_direction */ 17:
                    message.moveDirection = reader.int64().toBigInt();
                    break;
                case /* repeated int64 egg_show_range */ 18:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.eggShowRange.push(reader.int64().toBigInt());
                    else
                        message.eggShowRange.push(reader.int64().toBigInt());
                    break;
                case /* repeated int64 size_and_alpha */ 19:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sizeAndAlpha.push(reader.int64().toBigInt());
                    else
                        message.sizeAndAlpha.push(reader.int64().toBigInt());
                    break;
                case /* repeated int64 vertical_offset */ 20:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.verticalOffset.push(reader.int64().toBigInt());
                    else
                        message.verticalOffset.push(reader.int64().toBigInt());
                    break;
                case /* int64 path */ 21:
                    message.path = reader.int64().toBigInt();
                    break;
                case /* string word_color */ 22:
                    message.wordColor = reader.string();
                    break;
                case /* int64 show_webp */ 23:
                    message.showWebp = reader.int64().toBigInt();
                    break;
                case /* int64 use_privilege_region */ 24:
                    message.usePrivilegeRegion = reader.int64().toBigInt();
                    break;
                case /* int64 can_open_contour */ 25:
                    message.canOpenContour = reader.int64().toBigInt();
                    break;
                case /* int64 support_show_type */ 26:
                    message.supportShowType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatCarnivalMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 notify_type = 2; */
        if (message.notifyType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.notifyType);
        /* int64 anchor_start_timestamp = 3; */
        if (message.anchorStartTimestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.anchorStartTimestamp);
        /* int64 anchor_start_second = 4; */
        if (message.anchorStartSecond !== 0n)
            writer.tag(4, WireType.Varint).int64(message.anchorStartSecond);
        /* int64 user_start_timestamp = 5; */
        if (message.userStartTimestamp !== 0n)
            writer.tag(5, WireType.Varint).int64(message.userStartTimestamp);
        /* int64 user_start_second = 6; */
        if (message.userStartSecond !== 0n)
            writer.tag(6, WireType.Varint).int64(message.userStartSecond);
        /* int64 duration = 7; */
        if (message.duration !== 0n)
            writer.tag(7, WireType.Varint).int64(message.duration);
        /* string background_color = 8; */
        if (message.backgroundColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.backgroundColor);
        /* data.Image title_image = 9; */
        if (message.titleImage)
            Image.internalBinaryWrite(message.titleImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string pre_content = 10; */
        if (message.preContent !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.preContent);
        /* string content = 11; */
        if (message.content !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.content);
        /* int64 orientations = 12; */
        if (message.orientations !== 0n)
            writer.tag(12, WireType.Varint).int64(message.orientations);
        /* int64 move_speed = 13; */
        if (message.moveSpeed !== 0n)
            writer.tag(13, WireType.Varint).int64(message.moveSpeed);
        /* repeated im.ChatItem chat_style = 14; */
        for (let i = 0; i < message.chatStyle.length; i++)
            ChatItem.internalBinaryWrite(message.chatStyle[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.EggItem egg_style = 15; */
        for (let i = 0; i < message.eggStyle.length; i++)
            EggItem.internalBinaryWrite(message.eggStyle[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* int64 word_orientation = 16; */
        if (message.wordOrientation !== 0n)
            writer.tag(16, WireType.Varint).int64(message.wordOrientation);
        /* int64 move_direction = 17; */
        if (message.moveDirection !== 0n)
            writer.tag(17, WireType.Varint).int64(message.moveDirection);
        /* repeated int64 egg_show_range = 18; */
        if (message.eggShowRange.length) {
            writer.tag(18, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.eggShowRange.length; i++)
                writer.int64(message.eggShowRange[i]);
            writer.join();
        }
        /* repeated int64 size_and_alpha = 19; */
        if (message.sizeAndAlpha.length) {
            writer.tag(19, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sizeAndAlpha.length; i++)
                writer.int64(message.sizeAndAlpha[i]);
            writer.join();
        }
        /* repeated int64 vertical_offset = 20; */
        if (message.verticalOffset.length) {
            writer.tag(20, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.verticalOffset.length; i++)
                writer.int64(message.verticalOffset[i]);
            writer.join();
        }
        /* int64 path = 21; */
        if (message.path !== 0n)
            writer.tag(21, WireType.Varint).int64(message.path);
        /* string word_color = 22; */
        if (message.wordColor !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.wordColor);
        /* int64 show_webp = 23; */
        if (message.showWebp !== 0n)
            writer.tag(23, WireType.Varint).int64(message.showWebp);
        /* int64 use_privilege_region = 24; */
        if (message.usePrivilegeRegion !== 0n)
            writer.tag(24, WireType.Varint).int64(message.usePrivilegeRegion);
        /* int64 can_open_contour = 25; */
        if (message.canOpenContour !== 0n)
            writer.tag(25, WireType.Varint).int64(message.canOpenContour);
        /* int64 support_show_type = 26; */
        if (message.supportShowType !== 0n)
            writer.tag(26, WireType.Varint).int64(message.supportShowType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChatCarnivalMessage
 */
export const ChatCarnivalMessage = new ChatCarnivalMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EggItem$Type extends MessageType<EggItem> {
    constructor() {
        super("im.EggItem", [
            { no: 1, name: "background", kind: "message", T: () => Image },
            { no: 2, name: "background_hight", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "background_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "use_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "is_dynamic_egg", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EggItem>): EggItem {
        const message = { backgroundHight: 0n, backgroundWidth: 0n, useRate: 0n, isDynamicEgg: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EggItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EggItem): EggItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image background */ 1:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int64 background_hight */ 2:
                    message.backgroundHight = reader.int64().toBigInt();
                    break;
                case /* int64 background_width */ 3:
                    message.backgroundWidth = reader.int64().toBigInt();
                    break;
                case /* int64 use_rate */ 4:
                    message.useRate = reader.int64().toBigInt();
                    break;
                case /* int64 is_dynamic_egg */ 5:
                    message.isDynamicEgg = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EggItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image background = 1; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 background_hight = 2; */
        if (message.backgroundHight !== 0n)
            writer.tag(2, WireType.Varint).int64(message.backgroundHight);
        /* int64 background_width = 3; */
        if (message.backgroundWidth !== 0n)
            writer.tag(3, WireType.Varint).int64(message.backgroundWidth);
        /* int64 use_rate = 4; */
        if (message.useRate !== 0n)
            writer.tag(4, WireType.Varint).int64(message.useRate);
        /* int64 is_dynamic_egg = 5; */
        if (message.isDynamicEgg !== 0n)
            writer.tag(5, WireType.Varint).int64(message.isDynamicEgg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EggItem
 */
export const EggItem = new EggItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatItem$Type extends MessageType<ChatItem> {
    constructor() {
        super("im.ChatItem", [
            { no: 1, name: "head_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "content_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "background", kind: "message", T: () => FlexImageStruct },
            { no: 5, name: "background_hight", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "background_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "use_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChatItem>): ChatItem {
        const message = { headSize: 0n, contentSize: 0n, contentColor: "", backgroundHight: 0n, backgroundWidth: 0n, useRate: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatItem): ChatItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 head_size */ 1:
                    message.headSize = reader.int64().toBigInt();
                    break;
                case /* int64 content_size */ 2:
                    message.contentSize = reader.int64().toBigInt();
                    break;
                case /* string content_color */ 3:
                    message.contentColor = reader.string();
                    break;
                case /* im.FlexImageStruct background */ 4:
                    message.background = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int64 background_hight */ 5:
                    message.backgroundHight = reader.int64().toBigInt();
                    break;
                case /* int64 background_width */ 6:
                    message.backgroundWidth = reader.int64().toBigInt();
                    break;
                case /* int64 use_rate */ 7:
                    message.useRate = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 head_size = 1; */
        if (message.headSize !== 0n)
            writer.tag(1, WireType.Varint).int64(message.headSize);
        /* int64 content_size = 2; */
        if (message.contentSize !== 0n)
            writer.tag(2, WireType.Varint).int64(message.contentSize);
        /* string content_color = 3; */
        if (message.contentColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentColor);
        /* im.FlexImageStruct background = 4; */
        if (message.background)
            FlexImageStruct.internalBinaryWrite(message.background, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 background_hight = 5; */
        if (message.backgroundHight !== 0n)
            writer.tag(5, WireType.Varint).int64(message.backgroundHight);
        /* int64 background_width = 6; */
        if (message.backgroundWidth !== 0n)
            writer.tag(6, WireType.Varint).int64(message.backgroundWidth);
        /* int64 use_rate = 7; */
        if (message.useRate !== 0n)
            writer.tag(7, WireType.Varint).int64(message.useRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChatItem
 */
export const ChatItem = new ChatItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessage$Type extends MessageType<ChatMessage> {
    constructor() {
        super("im.ChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "visible_to_sender", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "background_image", kind: "message", T: () => Image },
            { no: 6, name: "full_screen_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "background_image_v2", kind: "message", T: () => Image },
            { no: 9, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 10, name: "gift_image", kind: "message", T: () => Image },
            { no: 11, name: "agree_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "priority_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "landscape_area_common", kind: "message", T: () => LandscapeAreaCommon },
            { no: 15, name: "event_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "send_review", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "from_intercom", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "intercom_hide_user_card", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "chat_tags", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "chat_by", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "individual_chat_priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 40, name: "rtf_content", kind: "message", T: () => Text },
            { no: 41, name: "rtf_content_v2", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<ChatMessage>): ChatMessage {
        const message = { content: "", visibleToSender: false, fullScreenTextColor: "", agreeMsgId: 0n, priorityLevel: 0, eventTime: 0n, sendReview: false, fromIntercom: false, intercomHideUserCard: false, chatTags: [], chatBy: 0n, individualChatPriority: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessage): ChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* bool visible_to_sender */ 4:
                    message.visibleToSender = reader.bool();
                    break;
                case /* data.Image background_image */ 5:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* string full_screen_text_color */ 6:
                    message.fullScreenTextColor = reader.string();
                    break;
                case /* data.Image background_image_v2 */ 7:
                    message.backgroundImageV2 = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImageV2);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 9:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* data.Image gift_image */ 10:
                    message.giftImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.giftImage);
                    break;
                case /* int64 agree_msg_id */ 11:
                    message.agreeMsgId = reader.int64().toBigInt();
                    break;
                case /* int32 priority_level */ 12:
                    message.priorityLevel = reader.int32();
                    break;
                case /* im.LandscapeAreaCommon landscape_area_common */ 13:
                    message.landscapeAreaCommon = LandscapeAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.landscapeAreaCommon);
                    break;
                case /* int64 event_time */ 15:
                    message.eventTime = reader.int64().toBigInt();
                    break;
                case /* bool send_review */ 16:
                    message.sendReview = reader.bool();
                    break;
                case /* bool from_intercom */ 17:
                    message.fromIntercom = reader.bool();
                    break;
                case /* bool intercom_hide_user_card */ 18:
                    message.intercomHideUserCard = reader.bool();
                    break;
                case /* repeated int32 chat_tags */ 19:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chatTags.push(reader.int32());
                    else
                        message.chatTags.push(reader.int32());
                    break;
                case /* int64 chat_by */ 20:
                    message.chatBy = reader.int64().toBigInt();
                    break;
                case /* int32 individual_chat_priority */ 21:
                    message.individualChatPriority = reader.int32();
                    break;
                case /* data.Text rtf_content */ 40:
                    message.rtfContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContent);
                    break;
                case /* data.Text rtf_content_v2 */ 41:
                    message.rtfContentV2 = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContentV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* bool visible_to_sender = 4; */
        if (message.visibleToSender !== false)
            writer.tag(4, WireType.Varint).bool(message.visibleToSender);
        /* data.Image background_image = 5; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string full_screen_text_color = 6; */
        if (message.fullScreenTextColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fullScreenTextColor);
        /* data.Image background_image_v2 = 7; */
        if (message.backgroundImageV2)
            Image.internalBinaryWrite(message.backgroundImageV2, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 9; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image gift_image = 10; */
        if (message.giftImage)
            Image.internalBinaryWrite(message.giftImage, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int64 agree_msg_id = 11; */
        if (message.agreeMsgId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.agreeMsgId);
        /* int32 priority_level = 12; */
        if (message.priorityLevel !== 0)
            writer.tag(12, WireType.Varint).int32(message.priorityLevel);
        /* im.LandscapeAreaCommon landscape_area_common = 13; */
        if (message.landscapeAreaCommon)
            LandscapeAreaCommon.internalBinaryWrite(message.landscapeAreaCommon, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* int64 event_time = 15; */
        if (message.eventTime !== 0n)
            writer.tag(15, WireType.Varint).int64(message.eventTime);
        /* bool send_review = 16; */
        if (message.sendReview !== false)
            writer.tag(16, WireType.Varint).bool(message.sendReview);
        /* bool from_intercom = 17; */
        if (message.fromIntercom !== false)
            writer.tag(17, WireType.Varint).bool(message.fromIntercom);
        /* bool intercom_hide_user_card = 18; */
        if (message.intercomHideUserCard !== false)
            writer.tag(18, WireType.Varint).bool(message.intercomHideUserCard);
        /* repeated int32 chat_tags = 19; */
        if (message.chatTags.length) {
            writer.tag(19, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chatTags.length; i++)
                writer.int32(message.chatTags[i]);
            writer.join();
        }
        /* int64 chat_by = 20; */
        if (message.chatBy !== 0n)
            writer.tag(20, WireType.Varint).int64(message.chatBy);
        /* int32 individual_chat_priority = 21; */
        if (message.individualChatPriority !== 0)
            writer.tag(21, WireType.Varint).int32(message.individualChatPriority);
        /* data.Text rtf_content = 40; */
        if (message.rtfContent)
            Text.internalBinaryWrite(message.rtfContent, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* data.Text rtf_content_v2 = 41; */
        if (message.rtfContentV2)
            Text.internalBinaryWrite(message.rtfContentV2, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChatMessage
 */
export const ChatMessage = new ChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmojiChatMessage$Type extends MessageType<EmojiChatMessage> {
    constructor() {
        super("im.EmojiChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "emoji_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "emoji_content", kind: "message", T: () => Text },
            { no: 5, name: "default_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "background_image", kind: "message", T: () => Image },
            { no: 7, name: "from_intercom", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "intercom_hide_user_card", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<EmojiChatMessage>): EmojiChatMessage {
        const message = { emojiId: 0n, defaultContent: "", fromIntercom: false, intercomHideUserCard: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmojiChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmojiChatMessage): EmojiChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 emoji_id */ 3:
                    message.emojiId = reader.int64().toBigInt();
                    break;
                case /* data.Text emoji_content */ 4:
                    message.emojiContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.emojiContent);
                    break;
                case /* string default_content */ 5:
                    message.defaultContent = reader.string();
                    break;
                case /* data.Image background_image */ 6:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* bool from_intercom */ 7:
                    message.fromIntercom = reader.bool();
                    break;
                case /* bool intercom_hide_user_card */ 8:
                    message.intercomHideUserCard = reader.bool();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 9:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmojiChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 emoji_id = 3; */
        if (message.emojiId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.emojiId);
        /* data.Text emoji_content = 4; */
        if (message.emojiContent)
            Text.internalBinaryWrite(message.emojiContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string default_content = 5; */
        if (message.defaultContent !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.defaultContent);
        /* data.Image background_image = 6; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool from_intercom = 7; */
        if (message.fromIntercom !== false)
            writer.tag(7, WireType.Varint).bool(message.fromIntercom);
        /* bool intercom_hide_user_card = 8; */
        if (message.intercomHideUserCard !== false)
            writer.tag(8, WireType.Varint).bool(message.intercomHideUserCard);
        /* im.PublicAreaCommon public_area_common = 9; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EmojiChatMessage
 */
export const EmojiChatMessage = new EmojiChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FriendChatMessage$Type extends MessageType<FriendChatMessage> {
    constructor() {
        super("im.FriendChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FriendChatMessage>): FriendChatMessage {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FriendChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FriendChatMessage): FriendChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FriendChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FriendChatMessage
 */
export const FriendChatMessage = new FriendChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChorusMessage$Type extends MessageType<ChorusMessage> {
    constructor() {
        super("im.ChorusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 100, name: "open_chorus_content", kind: "message", T: () => OpenChorusContent },
            { no: 101, name: "close_chorus_content", kind: "message", T: () => CloseChorusContent },
            { no: 102, name: "chorus_ordered_song_list_change_content", kind: "message", T: () => ChorusOrderedSongListChangeContent }
        ]);
    }
    create(value?: PartialMessage<ChorusMessage>): ChorusMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChorusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChorusMessage): ChorusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.OpenChorusContent open_chorus_content */ 100:
                    message.openChorusContent = OpenChorusContent.internalBinaryRead(reader, reader.uint32(), options, message.openChorusContent);
                    break;
                case /* im.CloseChorusContent close_chorus_content */ 101:
                    message.closeChorusContent = CloseChorusContent.internalBinaryRead(reader, reader.uint32(), options, message.closeChorusContent);
                    break;
                case /* im.ChorusOrderedSongListChangeContent chorus_ordered_song_list_change_content */ 102:
                    message.chorusOrderedSongListChangeContent = ChorusOrderedSongListChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.chorusOrderedSongListChangeContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChorusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.OpenChorusContent open_chorus_content = 100; */
        if (message.openChorusContent)
            OpenChorusContent.internalBinaryWrite(message.openChorusContent, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* im.CloseChorusContent close_chorus_content = 101; */
        if (message.closeChorusContent)
            CloseChorusContent.internalBinaryWrite(message.closeChorusContent, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* im.ChorusOrderedSongListChangeContent chorus_ordered_song_list_change_content = 102; */
        if (message.chorusOrderedSongListChangeContent)
            ChorusOrderedSongListChangeContent.internalBinaryWrite(message.chorusOrderedSongListChangeContent, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChorusMessage
 */
export const ChorusMessage = new ChorusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenChorusContent$Type extends MessageType<OpenChorusContent> {
    constructor() {
        super("im.OpenChorusContent", [
            { no: 1, name: "chorus_info", kind: "message", T: () => ChorusInfo },
            { no: 2, name: "sub_singer_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OpenChorusContent>): OpenChorusContent {
        const message = { subSingerToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenChorusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenChorusContent): OpenChorusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ChorusInfo chorus_info */ 1:
                    message.chorusInfo = ChorusInfo.internalBinaryRead(reader, reader.uint32(), options, message.chorusInfo);
                    break;
                case /* string sub_singer_toast */ 2:
                    message.subSingerToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenChorusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ChorusInfo chorus_info = 1; */
        if (message.chorusInfo)
            ChorusInfo.internalBinaryWrite(message.chorusInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string sub_singer_toast = 2; */
        if (message.subSingerToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subSingerToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OpenChorusContent
 */
export const OpenChorusContent = new OpenChorusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloseChorusContent$Type extends MessageType<CloseChorusContent> {
    constructor() {
        super("im.CloseChorusContent", [
            { no: 1, name: "chorus_info", kind: "message", T: () => ChorusInfo },
            { no: 2, name: "close_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "close_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "close_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CloseChorusContent>): CloseChorusContent {
        const message = { closeUserId: 0n, closeToast: "", closeReason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CloseChorusContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CloseChorusContent): CloseChorusContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ChorusInfo chorus_info */ 1:
                    message.chorusInfo = ChorusInfo.internalBinaryRead(reader, reader.uint32(), options, message.chorusInfo);
                    break;
                case /* int64 close_user_id */ 2:
                    message.closeUserId = reader.int64().toBigInt();
                    break;
                case /* string close_toast */ 3:
                    message.closeToast = reader.string();
                    break;
                case /* int32 close_reason */ 4:
                    message.closeReason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CloseChorusContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ChorusInfo chorus_info = 1; */
        if (message.chorusInfo)
            ChorusInfo.internalBinaryWrite(message.chorusInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 close_user_id = 2; */
        if (message.closeUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.closeUserId);
        /* string close_toast = 3; */
        if (message.closeToast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.closeToast);
        /* int32 close_reason = 4; */
        if (message.closeReason !== 0)
            writer.tag(4, WireType.Varint).int32(message.closeReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CloseChorusContent
 */
export const CloseChorusContent = new CloseChorusContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChorusOrderedSongListChangeContent$Type extends MessageType<ChorusOrderedSongListChangeContent> {
    constructor() {
        super("im.ChorusOrderedSongListChangeContent", [
            { no: 1, name: "list_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChorusSongInfo }
        ]);
    }
    create(value?: PartialMessage<ChorusOrderedSongListChangeContent>): ChorusOrderedSongListChangeContent {
        const message = { listInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChorusOrderedSongListChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChorusOrderedSongListChangeContent): ChorusOrderedSongListChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ChorusSongInfo list_info */ 1:
                    message.listInfo.push(ChorusSongInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChorusOrderedSongListChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ChorusSongInfo list_info = 1; */
        for (let i = 0; i < message.listInfo.length; i++)
            ChorusSongInfo.internalBinaryWrite(message.listInfo[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChorusOrderedSongListChangeContent
 */
export const ChorusOrderedSongListChangeContent = new ChorusOrderedSongListChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CNYReward$Type extends MessageType<CNYReward> {
    constructor() {
        super("im.CNYReward", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "award_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "banner_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CNYReward>): CNYReward {
        const message = { awardContent: "", bannerContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CNYReward>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CNYReward): CNYReward {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string award_content */ 2:
                    message.awardContent = reader.string();
                    break;
                case /* string banner_content */ 3:
                    message.bannerContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CNYReward, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string award_content = 2; */
        if (message.awardContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.awardContent);
        /* string banner_content = 3; */
        if (message.bannerContent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bannerContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CNYReward
 */
export const CNYReward = new CNYReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CNYATaskMessage$Type extends MessageType<CNYATaskMessage> {
    constructor() {
        super("im.CNYATaskMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "watch_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "watch_total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "current_round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pct", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "round_target", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CNYATaskMessage>): CNYATaskMessage {
        const message = { watchDuration: 0n, watchTotal: 0n, currentRound: 0, pct: 0, roundTarget: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CNYATaskMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CNYATaskMessage): CNYATaskMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 watch_duration */ 2:
                    message.watchDuration = reader.int64().toBigInt();
                    break;
                case /* int64 watch_total */ 3:
                    message.watchTotal = reader.int64().toBigInt();
                    break;
                case /* int32 current_round */ 7:
                    message.currentRound = reader.int32();
                    break;
                case /* int32 pct */ 8:
                    message.pct = reader.int32();
                    break;
                case /* repeated int64 round_target */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roundTarget.push(reader.int64().toBigInt());
                    else
                        message.roundTarget.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CNYATaskMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 watch_duration = 2; */
        if (message.watchDuration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.watchDuration);
        /* int64 watch_total = 3; */
        if (message.watchTotal !== 0n)
            writer.tag(3, WireType.Varint).int64(message.watchTotal);
        /* int32 current_round = 7; */
        if (message.currentRound !== 0)
            writer.tag(7, WireType.Varint).int32(message.currentRound);
        /* int32 pct = 8; */
        if (message.pct !== 0)
            writer.tag(8, WireType.Varint).int32(message.pct);
        /* repeated int64 round_target = 9; */
        if (message.roundTarget.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.roundTarget.length; i++)
                writer.int64(message.roundTarget[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CNYATaskMessage
 */
export const CNYATaskMessage = new CNYATaskMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentaryChangeMessage$Type extends MessageType<CommentaryChangeMessage> {
    constructor() {
        super("im.CommentaryChangeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "commentary_room_info", kind: "message", T: () => CommentaryRoomInfo },
            { no: 3, name: "operation", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommentaryChangeMessage>): CommentaryChangeMessage {
        const message = { operation: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentaryChangeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentaryChangeMessage): CommentaryChangeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.CommentaryRoomInfo commentary_room_info */ 2:
                    message.commentaryRoomInfo = CommentaryRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.commentaryRoomInfo);
                    break;
                case /* int32 operation */ 3:
                    message.operation = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentaryChangeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.CommentaryRoomInfo commentary_room_info = 2; */
        if (message.commentaryRoomInfo)
            CommentaryRoomInfo.internalBinaryWrite(message.commentaryRoomInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 operation = 3; */
        if (message.operation !== 0)
            writer.tag(3, WireType.Varint).int32(message.operation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommentaryChangeMessage
 */
export const CommentaryChangeMessage = new CommentaryChangeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentsMessage$Type extends MessageType<CommentsMessage> {
    constructor() {
        super("im.CommentsMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "back_ground", kind: "message", T: () => Image },
            { no: 6, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "action_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommentsMessage>): CommentsMessage {
        const message = { content: "", color: "", actionType: 0n, actionContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentsMessage): CommentsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string color */ 4:
                    message.color = reader.string();
                    break;
                case /* data.Image back_ground */ 5:
                    message.backGround = Image.internalBinaryRead(reader, reader.uint32(), options, message.backGround);
                    break;
                case /* int64 action_type */ 6:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* string action_content */ 7:
                    message.actionContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string color = 4; */
        if (message.color !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.color);
        /* data.Image back_ground = 5; */
        if (message.backGround)
            Image.internalBinaryWrite(message.backGround, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 action_type = 6; */
        if (message.actionType !== 0n)
            writer.tag(6, WireType.Varint).int64(message.actionType);
        /* string action_content = 7; */
        if (message.actionContent !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.actionContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommentsMessage
 */
export const CommentsMessage = new CommentsMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommerceSaleMessage$Type extends MessageType<CommerceSaleMessage> {
    constructor() {
        super("im.CommerceSaleMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "has_commerce_sale", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CommerceSaleMessage>): CommerceSaleMessage {
        const message = { hasCommerceSale: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommerceSaleMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommerceSaleMessage): CommerceSaleMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool has_commerce_sale */ 2:
                    message.hasCommerceSale = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommerceSaleMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool has_commerce_sale = 2; */
        if (message.hasCommerceSale !== false)
            writer.tag(2, WireType.Varint).bool(message.hasCommerceSale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommerceSaleMessage
 */
export const CommerceSaleMessage = new CommerceSaleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommerceMessage$Type extends MessageType<CommerceMessage> {
    constructor() {
        super("im.CommerceMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommerceMessage>): CommerceMessage {
        const message = { messageType: 0n, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommerceMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommerceMessage): CommerceMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommerceMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommerceMessage
 */
export const CommerceMessage = new CommerceMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonCardAreaMessage$Type extends MessageType<CommonCardAreaMessage> {
    constructor() {
        super("im.CommonCardAreaMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "bottom_right_card_data", kind: "message", T: () => BottomRightCardArea }
        ]);
    }
    create(value?: PartialMessage<CommonCardAreaMessage>): CommonCardAreaMessage {
        const message = { messageType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonCardAreaMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonCardAreaMessage): CommonCardAreaMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 message_type */ 2:
                    message.messageType = reader.int32();
                    break;
                case /* data.BottomRightCardArea bottom_right_card_data */ 3:
                    message.bottomRightCardData = BottomRightCardArea.internalBinaryRead(reader, reader.uint32(), options, message.bottomRightCardData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonCardAreaMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 2; */
        if (message.messageType !== 0)
            writer.tag(2, WireType.Varint).int32(message.messageType);
        /* data.BottomRightCardArea bottom_right_card_data = 3; */
        if (message.bottomRightCardData)
            BottomRightCardArea.internalBinaryWrite(message.bottomRightCardData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonCardAreaMessage
 */
export const CommonCardAreaMessage = new CommonCardAreaMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComplexContent$Type extends MessageType<ComplexContent> {
    constructor() {
        super("im.ComplexContent", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "font_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "weight", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "img", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<ComplexContent>): ComplexContent {
        const message = { type: "", text: "", fontColor: "", fontSize: 0n, weight: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ComplexContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComplexContent): ComplexContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string font_color */ 3:
                    message.fontColor = reader.string();
                    break;
                case /* int64 font_size */ 4:
                    message.fontSize = reader.int64().toBigInt();
                    break;
                case /* int64 weight */ 5:
                    message.weight = reader.int64().toBigInt();
                    break;
                case /* data.Image img */ 6:
                    message.img = Image.internalBinaryRead(reader, reader.uint32(), options, message.img);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComplexContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string font_color = 3; */
        if (message.fontColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fontColor);
        /* int64 font_size = 4; */
        if (message.fontSize !== 0n)
            writer.tag(4, WireType.Varint).int64(message.fontSize);
        /* int64 weight = 5; */
        if (message.weight !== 0n)
            writer.tag(5, WireType.Varint).int64(message.weight);
        /* data.Image img = 6; */
        if (message.img)
            Image.internalBinaryWrite(message.img, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ComplexContent
 */
export const ComplexContent = new ComplexContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonGuideMessage$Type extends MessageType<CommonGuideMessage> {
    constructor() {
        super("im.CommonGuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "main_content", kind: "message", T: () => Text },
            { no: 4, name: "secondary_content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ComplexContent },
            { no: 5, name: "icon", kind: "message", T: () => Image },
            { no: 6, name: "button_content", kind: "message", T: () => Text },
            { no: 7, name: "button_action_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "button_icon", kind: "message", T: () => Image },
            { no: 9, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "is_rounded_icon", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CommonGuideMessage>): CommonGuideMessage {
        const message = { messageType: 0n, secondaryContent: [], buttonActionSchema: "", duration: 0n, isRoundedIcon: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonGuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonGuideMessage): CommonGuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* data.Text main_content */ 3:
                    message.mainContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.mainContent);
                    break;
                case /* repeated im.ComplexContent secondary_content */ 4:
                    message.secondaryContent.push(ComplexContent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* data.Text button_content */ 6:
                    message.buttonContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.buttonContent);
                    break;
                case /* string button_action_schema */ 7:
                    message.buttonActionSchema = reader.string();
                    break;
                case /* data.Image button_icon */ 8:
                    message.buttonIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.buttonIcon);
                    break;
                case /* int64 duration */ 9:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* bool is_rounded_icon */ 10:
                    message.isRoundedIcon = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonGuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* data.Text main_content = 3; */
        if (message.mainContent)
            Text.internalBinaryWrite(message.mainContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.ComplexContent secondary_content = 4; */
        for (let i = 0; i < message.secondaryContent.length; i++)
            ComplexContent.internalBinaryWrite(message.secondaryContent[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Text button_content = 6; */
        if (message.buttonContent)
            Text.internalBinaryWrite(message.buttonContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string button_action_schema = 7; */
        if (message.buttonActionSchema !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.buttonActionSchema);
        /* data.Image button_icon = 8; */
        if (message.buttonIcon)
            Image.internalBinaryWrite(message.buttonIcon, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 9; */
        if (message.duration !== 0n)
            writer.tag(9, WireType.Varint).int64(message.duration);
        /* bool is_rounded_icon = 10; */
        if (message.isRoundedIcon !== false)
            writer.tag(10, WireType.Varint).bool(message.isRoundedIcon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonGuideMessage
 */
export const CommonGuideMessage = new CommonGuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonLuckyMoneyMessage$Type extends MessageType<CommonLuckyMoneyMessage> {
    constructor() {
        super("im.CommonLuckyMoneyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "luckymoney_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "send_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "delay_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user", kind: "message", T: () => User },
            { no: 7, name: "style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "lucky_icon", kind: "message", T: () => CommonLuckyMoneyMessage_LuckyIcon },
            { no: 9, name: "background", kind: "message", T: () => Image },
            { no: 10, name: "is_official", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CommonLuckyMoneyMessage>): CommonLuckyMoneyMessage {
        const message = { diamondCount: 0n, luckymoneyId: 0n, sendTime: 0n, delayTime: 0n, style: 0n, isOfficial: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonLuckyMoneyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonLuckyMoneyMessage): CommonLuckyMoneyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 diamond_count */ 2:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                case /* int64 luckymoney_id */ 3:
                    message.luckymoneyId = reader.int64().toBigInt();
                    break;
                case /* int64 send_time */ 4:
                    message.sendTime = reader.int64().toBigInt();
                    break;
                case /* int64 delay_time */ 5:
                    message.delayTime = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 6:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 style */ 7:
                    message.style = reader.int64().toBigInt();
                    break;
                case /* im.CommonLuckyMoneyMessage.LuckyIcon lucky_icon */ 8:
                    message.luckyIcon = CommonLuckyMoneyMessage_LuckyIcon.internalBinaryRead(reader, reader.uint32(), options, message.luckyIcon);
                    break;
                case /* data.Image background */ 9:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* bool is_official */ 10:
                    message.isOfficial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonLuckyMoneyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 diamond_count = 2; */
        if (message.diamondCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.diamondCount);
        /* int64 luckymoney_id = 3; */
        if (message.luckymoneyId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.luckymoneyId);
        /* int64 send_time = 4; */
        if (message.sendTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.sendTime);
        /* int64 delay_time = 5; */
        if (message.delayTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.delayTime);
        /* data.User user = 6; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 style = 7; */
        if (message.style !== 0n)
            writer.tag(7, WireType.Varint).int64(message.style);
        /* im.CommonLuckyMoneyMessage.LuckyIcon lucky_icon = 8; */
        if (message.luckyIcon)
            CommonLuckyMoneyMessage_LuckyIcon.internalBinaryWrite(message.luckyIcon, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background = 9; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool is_official = 10; */
        if (message.isOfficial !== false)
            writer.tag(10, WireType.Varint).bool(message.isOfficial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonLuckyMoneyMessage
 */
export const CommonLuckyMoneyMessage = new CommonLuckyMoneyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonLuckyMoneyMessage_LuckyIcon$Type extends MessageType<CommonLuckyMoneyMessage_LuckyIcon> {
    constructor() {
        super("im.CommonLuckyMoneyMessage.LuckyIcon", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommonLuckyMoneyMessage_LuckyIcon>): CommonLuckyMoneyMessage_LuckyIcon {
        const message = { urlList: [], uri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonLuckyMoneyMessage_LuckyIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonLuckyMoneyMessage_LuckyIcon): CommonLuckyMoneyMessage_LuckyIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonLuckyMoneyMessage_LuckyIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonLuckyMoneyMessage.LuckyIcon
 */
export const CommonLuckyMoneyMessage_LuckyIcon = new CommonLuckyMoneyMessage_LuckyIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskPanelMessage$Type extends MessageType<TaskPanelMessage> {
    constructor() {
        super("im.TaskPanelMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => TaskPanel }
        ]);
    }
    create(value?: PartialMessage<TaskPanelMessage>): TaskPanelMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskPanelMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskPanelMessage): TaskPanelMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.TaskPanel data */ 2:
                    message.data = TaskPanel.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskPanelMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.TaskPanel data = 2; */
        if (message.data)
            TaskPanel.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskPanelMessage
 */
export const TaskPanelMessage = new TaskPanelMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskPanel$Type extends MessageType<TaskPanel> {
    constructor() {
        super("im.TaskPanel", [
            { no: 1, name: "task_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "task_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "watch_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "tag_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tag_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "tag_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "button_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "expire_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "expire_after", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "reward_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "panel_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "sub_title_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskPanel>): TaskPanel {
        const message = { taskId: 0, taskType: 0, watchTime: 0, title: "", subTitle: "", tagIconUrl: "", tagText: "", tagTextColor: "", buttonName: "", schema: "", expireAt: 0n, status: 0, expireAfter: 0, rewardType: 0, panelTitle: "", subTitleColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskPanel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskPanel): TaskPanel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 task_id */ 1:
                    message.taskId = reader.int32();
                    break;
                case /* int32 task_type */ 2:
                    message.taskType = reader.int32();
                    break;
                case /* int32 watch_time */ 3:
                    message.watchTime = reader.int32();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 5:
                    message.subTitle = reader.string();
                    break;
                case /* string tag_icon_url */ 6:
                    message.tagIconUrl = reader.string();
                    break;
                case /* string tag_text */ 7:
                    message.tagText = reader.string();
                    break;
                case /* string tag_text_color */ 8:
                    message.tagTextColor = reader.string();
                    break;
                case /* string button_name */ 9:
                    message.buttonName = reader.string();
                    break;
                case /* string schema */ 10:
                    message.schema = reader.string();
                    break;
                case /* int64 expire_at */ 11:
                    message.expireAt = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 12:
                    message.status = reader.int32();
                    break;
                case /* int32 expire_after */ 13:
                    message.expireAfter = reader.int32();
                    break;
                case /* int32 reward_type */ 14:
                    message.rewardType = reader.int32();
                    break;
                case /* string panel_title */ 15:
                    message.panelTitle = reader.string();
                    break;
                case /* string sub_title_color */ 16:
                    message.subTitleColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskPanel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 task_id = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).int32(message.taskId);
        /* int32 task_type = 2; */
        if (message.taskType !== 0)
            writer.tag(2, WireType.Varint).int32(message.taskType);
        /* int32 watch_time = 3; */
        if (message.watchTime !== 0)
            writer.tag(3, WireType.Varint).int32(message.watchTime);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 5; */
        if (message.subTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subTitle);
        /* string tag_icon_url = 6; */
        if (message.tagIconUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.tagIconUrl);
        /* string tag_text = 7; */
        if (message.tagText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.tagText);
        /* string tag_text_color = 8; */
        if (message.tagTextColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.tagTextColor);
        /* string button_name = 9; */
        if (message.buttonName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.buttonName);
        /* string schema = 10; */
        if (message.schema !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.schema);
        /* int64 expire_at = 11; */
        if (message.expireAt !== 0n)
            writer.tag(11, WireType.Varint).int64(message.expireAt);
        /* int32 status = 12; */
        if (message.status !== 0)
            writer.tag(12, WireType.Varint).int32(message.status);
        /* int32 expire_after = 13; */
        if (message.expireAfter !== 0)
            writer.tag(13, WireType.Varint).int32(message.expireAfter);
        /* int32 reward_type = 14; */
        if (message.rewardType !== 0)
            writer.tag(14, WireType.Varint).int32(message.rewardType);
        /* string panel_title = 15; */
        if (message.panelTitle !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.panelTitle);
        /* string sub_title_color = 16; */
        if (message.subTitleColor !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.subTitleColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskPanel
 */
export const TaskPanel = new TaskPanel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskRewardToastMessage$Type extends MessageType<TaskRewardToastMessage> {
    constructor() {
        super("im.TaskRewardToastMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => TaskRewardToast }
        ]);
    }
    create(value?: PartialMessage<TaskRewardToastMessage>): TaskRewardToastMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskRewardToastMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskRewardToastMessage): TaskRewardToastMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.TaskRewardToast data */ 2:
                    message.data = TaskRewardToast.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskRewardToastMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.TaskRewardToast data = 2; */
        if (message.data)
            TaskRewardToast.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskRewardToastMessage
 */
export const TaskRewardToastMessage = new TaskRewardToastMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskRewardToast$Type extends MessageType<TaskRewardToast> {
    constructor() {
        super("im.TaskRewardToast", [
            { no: 1, name: "task_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "task_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "reward_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bg_pic_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskRewardToast>): TaskRewardToast {
        const message = { taskId: 0, taskType: 0, rewardType: 0, title: "", subTitle: "", iconUrl: "", bgPicUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskRewardToast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskRewardToast): TaskRewardToast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 task_id */ 1:
                    message.taskId = reader.int32();
                    break;
                case /* int32 task_type */ 2:
                    message.taskType = reader.int32();
                    break;
                case /* int32 reward_type */ 3:
                    message.rewardType = reader.int32();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 5:
                    message.subTitle = reader.string();
                    break;
                case /* string icon_url */ 6:
                    message.iconUrl = reader.string();
                    break;
                case /* string bg_pic_url */ 7:
                    message.bgPicUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskRewardToast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 task_id = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).int32(message.taskId);
        /* int32 task_type = 2; */
        if (message.taskType !== 0)
            writer.tag(2, WireType.Varint).int32(message.taskType);
        /* int32 reward_type = 3; */
        if (message.rewardType !== 0)
            writer.tag(3, WireType.Varint).int32(message.rewardType);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 5; */
        if (message.subTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subTitle);
        /* string icon_url = 6; */
        if (message.iconUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.iconUrl);
        /* string bg_pic_url = 7; */
        if (message.bgPicUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bgPicUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskRewardToast
 */
export const TaskRewardToast = new TaskRewardToast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonPopupMessage$Type extends MessageType<CommonPopupMessage> {
    constructor() {
        super("im.CommonPopupMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "anchor_pop_up", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CommonPopupMessage>): CommonPopupMessage {
        const message = { schemaUrl: "", anchorPopUp: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonPopupMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonPopupMessage): CommonPopupMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string schema_url */ 2:
                    message.schemaUrl = reader.string();
                    break;
                case /* bool anchor_pop_up */ 3:
                    message.anchorPopUp = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonPopupMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string schema_url = 2; */
        if (message.schemaUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schemaUrl);
        /* bool anchor_pop_up = 3; */
        if (message.anchorPopUp !== false)
            writer.tag(3, WireType.Varint).bool(message.anchorPopUp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonPopupMessage
 */
export const CommonPopupMessage = new CommonPopupMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonTextMessage$Type extends MessageType<CommonTextMessage> {
    constructor() {
        super("im.CommonTextMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<CommonTextMessage>): CommonTextMessage {
        const message = { scene: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonTextMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonTextMessage): CommonTextMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string scene */ 3:
                    message.scene = reader.string();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 4:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonTextMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string scene = 3; */
        if (message.scene !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.scene);
        /* im.PublicAreaCommon public_area_common = 4; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonTextMessage
 */
export const CommonTextMessage = new CommonTextMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonToastMessage$Type extends MessageType<CommonToastMessage> {
    constructor() {
        super("im.CommonToastMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "discardable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "immediate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "background_color_start", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "background_color_end", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "top_img", kind: "message", T: () => Image },
            { no: 10, name: "top_img_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "top_img_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "show_mongolia_layer", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CommonToastMessage>): CommonToastMessage {
        const message = { discardable: false, immediate: false, duration: 0n, textColor: "", backgroundColorStart: "", backgroundColorEnd: "", position: 0n, topImgWidth: 0n, topImgHeight: 0n, showMongoliaLayer: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonToastMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonToastMessage): CommonToastMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool discardable */ 2:
                    message.discardable = reader.bool();
                    break;
                case /* bool immediate */ 3:
                    message.immediate = reader.bool();
                    break;
                case /* int64 duration */ 4:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string text_color */ 5:
                    message.textColor = reader.string();
                    break;
                case /* string background_color_start */ 6:
                    message.backgroundColorStart = reader.string();
                    break;
                case /* string background_color_end */ 7:
                    message.backgroundColorEnd = reader.string();
                    break;
                case /* int64 position */ 8:
                    message.position = reader.int64().toBigInt();
                    break;
                case /* data.Image top_img */ 9:
                    message.topImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.topImg);
                    break;
                case /* int64 top_img_width */ 10:
                    message.topImgWidth = reader.int64().toBigInt();
                    break;
                case /* int64 top_img_height */ 11:
                    message.topImgHeight = reader.int64().toBigInt();
                    break;
                case /* bool show_mongolia_layer */ 12:
                    message.showMongoliaLayer = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonToastMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool discardable = 2; */
        if (message.discardable !== false)
            writer.tag(2, WireType.Varint).bool(message.discardable);
        /* bool immediate = 3; */
        if (message.immediate !== false)
            writer.tag(3, WireType.Varint).bool(message.immediate);
        /* int64 duration = 4; */
        if (message.duration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.duration);
        /* string text_color = 5; */
        if (message.textColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textColor);
        /* string background_color_start = 6; */
        if (message.backgroundColorStart !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.backgroundColorStart);
        /* string background_color_end = 7; */
        if (message.backgroundColorEnd !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.backgroundColorEnd);
        /* int64 position = 8; */
        if (message.position !== 0n)
            writer.tag(8, WireType.Varint).int64(message.position);
        /* data.Image top_img = 9; */
        if (message.topImg)
            Image.internalBinaryWrite(message.topImg, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 top_img_width = 10; */
        if (message.topImgWidth !== 0n)
            writer.tag(10, WireType.Varint).int64(message.topImgWidth);
        /* int64 top_img_height = 11; */
        if (message.topImgHeight !== 0n)
            writer.tag(11, WireType.Varint).int64(message.topImgHeight);
        /* bool show_mongolia_layer = 12; */
        if (message.showMongoliaLayer !== false)
            writer.tag(12, WireType.Varint).bool(message.showMongoliaLayer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonToastMessage
 */
export const CommonToastMessage = new CommonToastMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControlMessage$Type extends MessageType<ControlMessage> {
    constructor() {
        super("im.ControlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "tips", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra", kind: "message", T: () => ControlMessage_Extra },
            { no: 5, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<ControlMessage>): ControlMessage {
        const message = { action: 0n, tips: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ControlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControlMessage): ControlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 action */ 2:
                    message.action = reader.int64().toBigInt();
                    break;
                case /* string tips */ 3:
                    message.tips = reader.string();
                    break;
                case /* im.ControlMessage.Extra extra */ 4:
                    message.extra = ControlMessage_Extra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 5:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 action = 2; */
        if (message.action !== 0n)
            writer.tag(2, WireType.Varint).int64(message.action);
        /* string tips = 3; */
        if (message.tips !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tips);
        /* im.ControlMessage.Extra extra = 4; */
        if (message.extra)
            ControlMessage_Extra.internalBinaryWrite(message.extra, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 5; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ControlMessage
 */
export const ControlMessage = new ControlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControlMessage_Extra$Type extends MessageType<ControlMessage_Extra> {
    constructor() {
        super("im.ControlMessage.Extra", [
            { no: 1, name: "ban_info_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reason_no", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "message", T: () => Text },
            { no: 4, name: "violation_reason", kind: "message", T: () => Text },
            { no: 5, name: "content", kind: "message", T: () => Text },
            { no: 6, name: "got_it_button", kind: "message", T: () => Text },
            { no: 7, name: "ban_detail_button", kind: "message", T: () => Text },
            { no: 8, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControlMessage_Extra>): ControlMessage_Extra {
        const message = { banInfoUrl: "", reasonNo: 0n, source: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ControlMessage_Extra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControlMessage_Extra): ControlMessage_Extra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ban_info_url */ 1:
                    message.banInfoUrl = reader.string();
                    break;
                case /* int64 reason_no */ 2:
                    message.reasonNo = reader.int64().toBigInt();
                    break;
                case /* data.Text title */ 3:
                    message.title = Text.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* data.Text violation_reason */ 4:
                    message.violationReason = Text.internalBinaryRead(reader, reader.uint32(), options, message.violationReason);
                    break;
                case /* data.Text content */ 5:
                    message.content = Text.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* data.Text got_it_button */ 6:
                    message.gotItButton = Text.internalBinaryRead(reader, reader.uint32(), options, message.gotItButton);
                    break;
                case /* data.Text ban_detail_button */ 7:
                    message.banDetailButton = Text.internalBinaryRead(reader, reader.uint32(), options, message.banDetailButton);
                    break;
                case /* string source */ 8:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControlMessage_Extra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ban_info_url = 1; */
        if (message.banInfoUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.banInfoUrl);
        /* int64 reason_no = 2; */
        if (message.reasonNo !== 0n)
            writer.tag(2, WireType.Varint).int64(message.reasonNo);
        /* data.Text title = 3; */
        if (message.title)
            Text.internalBinaryWrite(message.title, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Text violation_reason = 4; */
        if (message.violationReason)
            Text.internalBinaryWrite(message.violationReason, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Text content = 5; */
        if (message.content)
            Text.internalBinaryWrite(message.content, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Text got_it_button = 6; */
        if (message.gotItButton)
            Text.internalBinaryWrite(message.gotItButton, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Text ban_detail_button = 7; */
        if (message.banDetailButton)
            Text.internalBinaryWrite(message.banDetailButton, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string source = 8; */
        if (message.source !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ControlMessage.Extra
 */
export const ControlMessage_Extra = new ControlMessage_Extra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastLifeLotteryDrawResultEventMessage$Type extends MessageType<WebcastLifeLotteryDrawResultEventMessage> {
    constructor() {
        super("im.WebcastLifeLotteryDrawResultEventMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebcastLifeLotteryDrawResultEventMessage>): WebcastLifeLotteryDrawResultEventMessage {
        const message = { lotteryId: 0n, userIds: [], extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastLifeLotteryDrawResultEventMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastLifeLotteryDrawResultEventMessage): WebcastLifeLotteryDrawResultEventMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 lottery_id */ 2:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 user_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int64().toBigInt());
                    else
                        message.userIds.push(reader.int64().toBigInt());
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastLifeLotteryDrawResultEventMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 lottery_id = 2; */
        if (message.lotteryId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lotteryId);
        /* repeated int64 user_ids = 3; */
        if (message.userIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int64(message.userIds[i]);
            writer.join();
        }
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastLifeLotteryDrawResultEventMessage
 */
export const WebcastLifeLotteryDrawResultEventMessage = new WebcastLifeLotteryDrawResultEventMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataLifeLiveMessage$Type extends MessageType<DataLifeLiveMessage> {
    constructor() {
        super("im.DataLifeLiveMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DataLifeLiveMessage>): DataLifeLiveMessage {
        const message = { type: 0, body: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DataLifeLiveMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataLifeLiveMessage): DataLifeLiveMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string body */ 3:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataLifeLiveMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string body = 3; */
        if (message.body !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DataLifeLiveMessage
 */
export const DataLifeLiveMessage = new DataLifeLiveMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecorationModifyMessage$Type extends MessageType<DecorationModifyMessage> {
    constructor() {
        super("im.DecorationModifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DecorationModifyMessage>): DecorationModifyMessage {
        const message = { extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DecorationModifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecorationModifyMessage): DecorationModifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string extra */ 2:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecorationModifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 2; */
        if (message.extra !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DecorationModifyMessage
 */
export const DecorationModifyMessage = new DecorationModifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecorationUpdateMessage$Type extends MessageType<DecorationUpdateMessage> {
    constructor() {
        super("im.DecorationUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "detai", kind: "message", T: () => DecotationDetail }
        ]);
    }
    create(value?: PartialMessage<DecorationUpdateMessage>): DecorationUpdateMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DecorationUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecorationUpdateMessage): DecorationUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.DecotationDetail detai */ 2:
                    message.detai = DecotationDetail.internalBinaryRead(reader, reader.uint32(), options, message.detai);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecorationUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.DecotationDetail detai = 2; */
        if (message.detai)
            DecotationDetail.internalBinaryWrite(message.detai, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DecorationUpdateMessage
 */
export const DecorationUpdateMessage = new DecorationUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiggMessage$Type extends MessageType<DiggMessage> {
    constructor() {
        super("im.DiggMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "digg_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "color", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user", kind: "message", T: () => User },
            { no: 6, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiggMessage>): DiggMessage {
        const message = { diggCount: 0n, duration: 0n, color: 0n, icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DiggMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiggMessage): DiggMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 digg_count */ 2:
                    message.diggCount = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 color */ 4:
                    message.color = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 5:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string icon */ 6:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiggMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 digg_count = 2; */
        if (message.diggCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.diggCount);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* int64 color = 4; */
        if (message.color !== 0n)
            writer.tag(4, WireType.Varint).int64(message.color);
        /* data.User user = 5; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string icon = 6; */
        if (message.icon !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DiggMessage
 */
export const DiggMessage = new DiggMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DLiveMessage$Type extends MessageType<DLiveMessage> {
    constructor() {
        super("im.DLiveMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "rooms", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "max_push_delay_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DLiveMessage>): DLiveMessage {
        const message = { rooms: [], maxPushDelayTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DLiveMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DLiveMessage): DLiveMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated string rooms */ 2:
                    message.rooms.push(reader.string());
                    break;
                case /* int64 max_push_delay_time */ 3:
                    message.maxPushDelayTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DLiveMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string rooms = 2; */
        for (let i = 0; i < message.rooms.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.rooms[i]);
        /* int64 max_push_delay_time = 3; */
        if (message.maxPushDelayTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.maxPushDelayTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DLiveMessage
 */
export const DLiveMessage = new DLiveMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialRoomMessage$Type extends MessageType<OfficialRoomMessage> {
    constructor() {
        super("im.OfficialRoomMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "official_room_info", kind: "message", T: () => OfficialRoomInfo }
        ]);
    }
    create(value?: PartialMessage<OfficialRoomMessage>): OfficialRoomMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfficialRoomMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfficialRoomMessage): OfficialRoomMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.OfficialRoomInfo official_room_info */ 2:
                    message.officialRoomInfo = OfficialRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.officialRoomInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfficialRoomMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.OfficialRoomInfo official_room_info = 2; */
        if (message.officialRoomInfo)
            OfficialRoomInfo.internalBinaryWrite(message.officialRoomInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OfficialRoomMessage
 */
export const OfficialRoomMessage = new OfficialRoomMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CeremonyMessage$Type extends MessageType<CeremonyMessage> {
    constructor() {
        super("im.CeremonyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserRoom },
            { no: 3, name: "max_push_delay_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CeremonyMessage>): CeremonyMessage {
        const message = { items: [], maxPushDelayTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CeremonyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CeremonyMessage): CeremonyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.UserRoom items */ 2:
                    message.items.push(UserRoom.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 max_push_delay_time */ 3:
                    message.maxPushDelayTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CeremonyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.UserRoom items = 2; */
        for (let i = 0; i < message.items.length; i++)
            UserRoom.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 max_push_delay_time = 3; */
        if (message.maxPushDelayTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.maxPushDelayTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CeremonyMessage
 */
export const CeremonyMessage = new CeremonyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserRoom$Type extends MessageType<UserRoom> {
    constructor() {
        super("im.UserRoom", [
            { no: 1, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserRoom>): UserRoom {
        const message = { type: 0n, room: "", user: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserRoom>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserRoom): UserRoom {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 type */ 1:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* string room */ 2:
                    message.room = reader.string();
                    break;
                case /* string user */ 3:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserRoom, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 type = 1; */
        if (message.type !== 0n)
            writer.tag(1, WireType.Varint).int64(message.type);
        /* string room = 2; */
        if (message.room !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.room);
        /* string user = 3; */
        if (message.user !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserRoom
 */
export const UserRoom = new UserRoom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RcmdUser$Type extends MessageType<RcmdUser> {
    constructor() {
        super("im.RcmdUser", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_before_action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_after_action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "authentication_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "edit_script", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RcmdUser>): RcmdUser {
        const message = { user: "", textBeforeAction: "", textAfterAction: "", authenticationInfo: "", editScript: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RcmdUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RcmdUser): RcmdUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* string text_before_action */ 2:
                    message.textBeforeAction = reader.string();
                    break;
                case /* string text_after_action */ 3:
                    message.textAfterAction = reader.string();
                    break;
                case /* string authentication_info */ 4:
                    message.authenticationInfo = reader.string();
                    break;
                case /* string edit_script */ 5:
                    message.editScript = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RcmdUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* string text_before_action = 2; */
        if (message.textBeforeAction !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textBeforeAction);
        /* string text_after_action = 3; */
        if (message.textAfterAction !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textAfterAction);
        /* string authentication_info = 4; */
        if (message.authenticationInfo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.authenticationInfo);
        /* string edit_script = 5; */
        if (message.editScript !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.editScript);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RcmdUser
 */
export const RcmdUser = new RcmdUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecommendUsersMessage$Type extends MessageType<RecommendUsersMessage> {
    constructor() {
        super("im.RecommendUsersMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "list_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RcmdUser },
            { no: 4, name: "img_vertical", kind: "message", T: () => Image },
            { no: 5, name: "img_horizontal", kind: "message", T: () => Image },
            { no: 6, name: "display_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "max_push_delay_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "check_alive", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RecommendUsersMessage>): RecommendUsersMessage {
        const message = { listTitle: "", users: [], displayTime: 0n, maxPushDelayTime: 0n, checkAlive: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RecommendUsersMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecommendUsersMessage): RecommendUsersMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string list_title */ 2:
                    message.listTitle = reader.string();
                    break;
                case /* repeated im.RcmdUser users */ 3:
                    message.users.push(RcmdUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image img_vertical */ 4:
                    message.imgVertical = Image.internalBinaryRead(reader, reader.uint32(), options, message.imgVertical);
                    break;
                case /* data.Image img_horizontal */ 5:
                    message.imgHorizontal = Image.internalBinaryRead(reader, reader.uint32(), options, message.imgHorizontal);
                    break;
                case /* int64 display_time */ 6:
                    message.displayTime = reader.int64().toBigInt();
                    break;
                case /* int64 max_push_delay_time */ 7:
                    message.maxPushDelayTime = reader.int64().toBigInt();
                    break;
                case /* bool check_alive */ 8:
                    message.checkAlive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecommendUsersMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string list_title = 2; */
        if (message.listTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.listTitle);
        /* repeated im.RcmdUser users = 3; */
        for (let i = 0; i < message.users.length; i++)
            RcmdUser.internalBinaryWrite(message.users[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image img_vertical = 4; */
        if (message.imgVertical)
            Image.internalBinaryWrite(message.imgVertical, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image img_horizontal = 5; */
        if (message.imgHorizontal)
            Image.internalBinaryWrite(message.imgHorizontal, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 display_time = 6; */
        if (message.displayTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.displayTime);
        /* int64 max_push_delay_time = 7; */
        if (message.maxPushDelayTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.maxPushDelayTime);
        /* bool check_alive = 8; */
        if (message.checkAlive !== false)
            writer.tag(8, WireType.Varint).bool(message.checkAlive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RecommendUsersMessage
 */
export const RecommendUsersMessage = new RecommendUsersMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DolphinSettingUpdateMessage$Type extends MessageType<DolphinSettingUpdateMessage> {
    constructor() {
        super("im.DolphinSettingUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "settingVersion", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DolphinSettingUpdateMessage>): DolphinSettingUpdateMessage {
        const message = { settingVersion: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DolphinSettingUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DolphinSettingUpdateMessage): DolphinSettingUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 settingVersion */ 2:
                    message.settingVersion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DolphinSettingUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 settingVersion = 2; */
        if (message.settingVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.settingVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DolphinSettingUpdateMessage
 */
export const DolphinSettingUpdateMessage = new DolphinSettingUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DonationMessage$Type extends MessageType<DonationMessage> {
    constructor() {
        super("im.DonationMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sponsor", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 5, name: "user", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<DonationMessage>): DonationMessage {
        const message = { total: 0n, currency: "", sponsor: [], user: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DonationMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DonationMessage): DonationMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 total */ 2:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* string currency */ 3:
                    message.currency = reader.string();
                    break;
                case /* repeated data.User sponsor */ 4:
                    message.sponsor.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.User user */ 5:
                    message.user.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DonationMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 total = 2; */
        if (message.total !== 0n)
            writer.tag(2, WireType.Varint).int64(message.total);
        /* string currency = 3; */
        if (message.currency !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currency);
        /* repeated data.User sponsor = 4; */
        for (let i = 0; i < message.sponsor.length; i++)
            User.internalBinaryWrite(message.sponsor[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.User user = 5; */
        for (let i = 0; i < message.user.length; i++)
            User.internalBinaryWrite(message.user[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DonationMessage
 */
export const DonationMessage = new DonationMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoodleGiftMessage$Type extends MessageType<DoodleGiftMessage> {
    constructor() {
        super("im.DoodleGiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user", kind: "message", T: () => User },
            { no: 5, name: "to_user", kind: "message", T: () => User },
            { no: 6, name: "compose", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "room_fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "priority", kind: "message", T: () => GiftIMPriority },
            { no: 9, name: "log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 11, name: "tray_display_text", kind: "message", T: () => Text },
            { no: 12, name: "tray_info", kind: "message", T: () => GiftTrayInfo }
        ]);
    }
    create(value?: PartialMessage<DoodleGiftMessage>): DoodleGiftMessage {
        const message = { giftId: 0n, fanTicketCount: 0n, compose: "", roomFanTicketCount: 0n, logId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoodleGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoodleGiftMessage): DoodleGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 gift_id */ 2:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 fan_ticket_count */ 3:
                    message.fanTicketCount = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 4:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.User to_user */ 5:
                    message.toUser = User.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* string compose */ 6:
                    message.compose = reader.string();
                    break;
                case /* int64 room_fan_ticket_count */ 7:
                    message.roomFanTicketCount = reader.int64().toBigInt();
                    break;
                case /* data.GiftIMPriority priority */ 8:
                    message.priority = GiftIMPriority.internalBinaryRead(reader, reader.uint32(), options, message.priority);
                    break;
                case /* string log_id */ 9:
                    message.logId = reader.string();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 10:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* data.Text tray_display_text */ 11:
                    message.trayDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.trayDisplayText);
                    break;
                case /* data.GiftTrayInfo tray_info */ 12:
                    message.trayInfo = GiftTrayInfo.internalBinaryRead(reader, reader.uint32(), options, message.trayInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoodleGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 gift_id = 2; */
        if (message.giftId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.giftId);
        /* int64 fan_ticket_count = 3; */
        if (message.fanTicketCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fanTicketCount);
        /* data.User user = 4; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.User to_user = 5; */
        if (message.toUser)
            User.internalBinaryWrite(message.toUser, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string compose = 6; */
        if (message.compose !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.compose);
        /* int64 room_fan_ticket_count = 7; */
        if (message.roomFanTicketCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.roomFanTicketCount);
        /* data.GiftIMPriority priority = 8; */
        if (message.priority)
            GiftIMPriority.internalBinaryWrite(message.priority, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string log_id = 9; */
        if (message.logId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.logId);
        /* im.PublicAreaCommon public_area_common = 10; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Text tray_display_text = 11; */
        if (message.trayDisplayText)
            Text.internalBinaryWrite(message.trayDisplayText, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.GiftTrayInfo tray_info = 12; */
        if (message.trayInfo)
            GiftTrayInfo.internalBinaryWrite(message.trayInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DoodleGiftMessage
 */
export const DoodleGiftMessage = new DoodleGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeUserDetail$Type extends MessageType<LikeUserDetail> {
    constructor() {
        super("im.LikeUserDetail", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LikeUserDetail>): LikeUserDetail {
        const message = { count: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeUserDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeUserDetail): LikeUserDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeUserDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LikeUserDetail
 */
export const LikeUserDetail = new LikeUserDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleLikeHeartMessage$Type extends MessageType<DoubleLikeHeartMessage> {
    constructor() {
        super("im.DoubleLikeHeartMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "double_like_detail", kind: "message", T: () => DoubleLikeDetail },
            { no: 3, name: "self_display_text", kind: "message", T: () => Text },
            { no: 4, name: "normal_display_text", kind: "message", T: () => Text },
            { no: 5, name: "like_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LikeUserDetail }
        ]);
    }
    create(value?: PartialMessage<DoubleLikeHeartMessage>): DoubleLikeHeartMessage {
        const message = { likeUserList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoubleLikeHeartMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleLikeHeartMessage): DoubleLikeHeartMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.DoubleLikeDetail double_like_detail */ 2:
                    message.doubleLikeDetail = DoubleLikeDetail.internalBinaryRead(reader, reader.uint32(), options, message.doubleLikeDetail);
                    break;
                case /* data.Text self_display_text */ 3:
                    message.selfDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.selfDisplayText);
                    break;
                case /* data.Text normal_display_text */ 4:
                    message.normalDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.normalDisplayText);
                    break;
                case /* repeated im.LikeUserDetail like_user_list */ 5:
                    message.likeUserList.push(LikeUserDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleLikeHeartMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.DoubleLikeDetail double_like_detail = 2; */
        if (message.doubleLikeDetail)
            DoubleLikeDetail.internalBinaryWrite(message.doubleLikeDetail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text self_display_text = 3; */
        if (message.selfDisplayText)
            Text.internalBinaryWrite(message.selfDisplayText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Text normal_display_text = 4; */
        if (message.normalDisplayText)
            Text.internalBinaryWrite(message.normalDisplayText, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.LikeUserDetail like_user_list = 5; */
        for (let i = 0; i < message.likeUserList.length; i++)
            LikeUserDetail.internalBinaryWrite(message.likeUserList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DoubleLikeHeartMessage
 */
export const DoubleLikeHeartMessage = new DoubleLikeHeartMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleLikeTopUserMessage$Type extends MessageType<DoubleLikeTopUserMessage> {
    constructor() {
        super("im.DoubleLikeTopUserMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "like_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LikeUserDetail }
        ]);
    }
    create(value?: PartialMessage<DoubleLikeTopUserMessage>): DoubleLikeTopUserMessage {
        const message = { likeUserList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoubleLikeTopUserMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleLikeTopUserMessage): DoubleLikeTopUserMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.LikeUserDetail like_user_list */ 2:
                    message.likeUserList.push(LikeUserDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleLikeTopUserMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.LikeUserDetail like_user_list = 2; */
        for (let i = 0; i < message.likeUserList.length; i++)
            LikeUserDetail.internalBinaryWrite(message.likeUserList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DoubleLikeTopUserMessage
 */
export const DoubleLikeTopUserMessage = new DoubleLikeTopUserMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PicoDisplayInfo$Type extends MessageType<PicoDisplayInfo> {
    constructor() {
        super("im.PicoDisplayInfo", [
            { no: 1, name: "combo_sum_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "emoji_icon", kind: "message", T: () => Image },
            { no: 4, name: "emoji_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PicoDisplayInfo>): PicoDisplayInfo {
        const message = { comboSumCount: 0n, emoji: "", emojiText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PicoDisplayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PicoDisplayInfo): PicoDisplayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 combo_sum_count */ 1:
                    message.comboSumCount = reader.int64().toBigInt();
                    break;
                case /* string emoji */ 2:
                    message.emoji = reader.string();
                    break;
                case /* data.Image emoji_icon */ 3:
                    message.emojiIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.emojiIcon);
                    break;
                case /* string emoji_text */ 4:
                    message.emojiText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PicoDisplayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 combo_sum_count = 1; */
        if (message.comboSumCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.comboSumCount);
        /* string emoji = 2; */
        if (message.emoji !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.emoji);
        /* data.Image emoji_icon = 3; */
        if (message.emojiIcon)
            Image.internalBinaryWrite(message.emojiIcon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string emoji_text = 4; */
        if (message.emojiText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.emojiText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PicoDisplayInfo
 */
export const PicoDisplayInfo = new PicoDisplayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleLikeDetail$Type extends MessageType<DoubleLikeDetail> {
    constructor() {
        super("im.DoubleLikeDetail", [
            { no: 1, name: "double_flag", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "seq_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "renewals_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "triggers_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DoubleLikeDetail>): DoubleLikeDetail {
        const message = { doubleFlag: false, seqId: 0, renewalsNum: 0, triggersNum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoubleLikeDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleLikeDetail): DoubleLikeDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool double_flag */ 1:
                    message.doubleFlag = reader.bool();
                    break;
                case /* int32 seq_id */ 2:
                    message.seqId = reader.int32();
                    break;
                case /* int32 renewals_num */ 3:
                    message.renewalsNum = reader.int32();
                    break;
                case /* int32 triggers_num */ 4:
                    message.triggersNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleLikeDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool double_flag = 1; */
        if (message.doubleFlag !== false)
            writer.tag(1, WireType.Varint).bool(message.doubleFlag);
        /* int32 seq_id = 2; */
        if (message.seqId !== 0)
            writer.tag(2, WireType.Varint).int32(message.seqId);
        /* int32 renewals_num = 3; */
        if (message.renewalsNum !== 0)
            writer.tag(3, WireType.Varint).int32(message.renewalsNum);
        /* int32 triggers_num = 4; */
        if (message.triggersNum !== 0)
            writer.tag(4, WireType.Varint).int32(message.triggersNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DoubleLikeDetail
 */
export const DoubleLikeDetail = new DoubleLikeDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisplayControlInfo$Type extends MessageType<DisplayControlInfo> {
    constructor() {
        super("im.DisplayControlInfo", [
            { no: 1, name: "show_text", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "show_icons", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DisplayControlInfo>): DisplayControlInfo {
        const message = { showText: false, showIcons: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisplayControlInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisplayControlInfo): DisplayControlInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool show_text */ 1:
                    message.showText = reader.bool();
                    break;
                case /* bool show_icons */ 2:
                    message.showIcons = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisplayControlInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool show_text = 1; */
        if (message.showText !== false)
            writer.tag(1, WireType.Varint).bool(message.showText);
        /* bool show_icons = 2; */
        if (message.showIcons !== false)
            writer.tag(2, WireType.Varint).bool(message.showIcons);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DisplayControlInfo
 */
export const DisplayControlInfo = new DisplayControlInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeMessage$Type extends MessageType<LikeMessage> {
    constructor() {
        super("im.LikeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "color", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user", kind: "message", T: () => User },
            { no: 6, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "double_like_detail", kind: "message", T: () => DoubleLikeDetail },
            { no: 8, name: "display_control_info", kind: "message", T: () => DisplayControlInfo },
            { no: 9, name: "linkmic_guest_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "pico_display_info", kind: "message", T: () => PicoDisplayInfo },
            { no: 12, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<LikeMessage>): LikeMessage {
        const message = { count: 0n, total: 0n, color: 0n, icon: "", linkmicGuestUid: 0n, scene: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeMessage): LikeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* int64 total */ 3:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* int64 color */ 4:
                    message.color = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 5:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string icon */ 6:
                    message.icon = reader.string();
                    break;
                case /* im.DoubleLikeDetail double_like_detail */ 7:
                    message.doubleLikeDetail = DoubleLikeDetail.internalBinaryRead(reader, reader.uint32(), options, message.doubleLikeDetail);
                    break;
                case /* im.DisplayControlInfo display_control_info */ 8:
                    message.displayControlInfo = DisplayControlInfo.internalBinaryRead(reader, reader.uint32(), options, message.displayControlInfo);
                    break;
                case /* int64 linkmic_guest_uid */ 9:
                    message.linkmicGuestUid = reader.int64().toBigInt();
                    break;
                case /* string scene */ 10:
                    message.scene = reader.string();
                    break;
                case /* im.PicoDisplayInfo pico_display_info */ 11:
                    message.picoDisplayInfo = PicoDisplayInfo.internalBinaryRead(reader, reader.uint32(), options, message.picoDisplayInfo);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 12:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* int64 total = 3; */
        if (message.total !== 0n)
            writer.tag(3, WireType.Varint).int64(message.total);
        /* int64 color = 4; */
        if (message.color !== 0n)
            writer.tag(4, WireType.Varint).int64(message.color);
        /* data.User user = 5; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string icon = 6; */
        if (message.icon !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.icon);
        /* im.DoubleLikeDetail double_like_detail = 7; */
        if (message.doubleLikeDetail)
            DoubleLikeDetail.internalBinaryWrite(message.doubleLikeDetail, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.DisplayControlInfo display_control_info = 8; */
        if (message.displayControlInfo)
            DisplayControlInfo.internalBinaryWrite(message.displayControlInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 linkmic_guest_uid = 9; */
        if (message.linkmicGuestUid !== 0n)
            writer.tag(9, WireType.Varint).int64(message.linkmicGuestUid);
        /* string scene = 10; */
        if (message.scene !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.scene);
        /* im.PicoDisplayInfo pico_display_info = 11; */
        if (message.picoDisplayInfo)
            PicoDisplayInfo.internalBinaryWrite(message.picoDisplayInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 12; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LikeMessage
 */
export const LikeMessage = new LikeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DouplusIndicatorMessage$Type extends MessageType<DouplusIndicatorMessage> {
    constructor() {
        super("im.DouplusIndicatorMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "buyer_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DouplusIndicatorMessage>): DouplusIndicatorMessage {
        const message = { number: 0n, status: 0n, toast: "", buyerNickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DouplusIndicatorMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DouplusIndicatorMessage): DouplusIndicatorMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 number */ 2:
                    message.number = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string toast */ 4:
                    message.toast = reader.string();
                    break;
                case /* string buyer_nickname */ 5:
                    message.buyerNickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DouplusIndicatorMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 number = 2; */
        if (message.number !== 0n)
            writer.tag(2, WireType.Varint).int64(message.number);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* string toast = 4; */
        if (message.toast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toast);
        /* string buyer_nickname = 5; */
        if (message.buyerNickname !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.buyerNickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DouplusIndicatorMessage
 */
export const DouplusIndicatorMessage = new DouplusIndicatorMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DouplusMessage$Type extends MessageType<DouplusMessage> {
    constructor() {
        super("im.DouplusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "promotion", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DouplusMessage>): DouplusMessage {
        const message = { promotion: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DouplusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DouplusMessage): DouplusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 promotion */ 2:
                    message.promotion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DouplusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 promotion = 2; */
        if (message.promotion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.promotion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DouplusMessage
 */
export const DouplusMessage = new DouplusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DressAssetMessage$Type extends MessageType<DressAssetMessage> {
    constructor() {
        super("im.DressAssetMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "dress_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DressAssetMessage>): DressAssetMessage {
        const message = { dressId: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DressAssetMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DressAssetMessage): DressAssetMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated string dress_id */ 2:
                    message.dressId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DressAssetMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string dress_id = 2; */
        for (let i = 0; i < message.dressId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.dressId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DressAssetMessage
 */
export const DressAssetMessage = new DressAssetMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriveGiftMessage$Type extends MessageType<DriveGiftMessage> {
    constructor() {
        super("im.DriveGiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "new_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "popup_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DriveGiftMessage>): DriveGiftMessage {
        const message = { newCount: 0n, popupUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DriveGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriveGiftMessage): DriveGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 new_count */ 2:
                    message.newCount = reader.int64().toBigInt();
                    break;
                case /* string popup_url */ 3:
                    message.popupUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriveGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 new_count = 2; */
        if (message.newCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.newCount);
        /* string popup_url = 3; */
        if (message.popupUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.popupUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DriveGiftMessage
 */
export const DriveGiftMessage = new DriveGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DrumMessage$Type extends MessageType<DrumMessage> {
    constructor() {
        super("im.DrumMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "drum_result", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "dump_msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "drum_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "report_time_gap", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "push_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "push_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DrumMessage_User }
        ]);
    }
    create(value?: PartialMessage<DrumMessage>): DrumMessage {
        const message = { drumResult: 0, dumpMsgType: 0, drumCount: 0n, reportTimeGap: 0n, pushId: 0n, pushIdStr: "", users: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DrumMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DrumMessage): DrumMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 drum_result */ 2:
                    message.drumResult = reader.int32();
                    break;
                case /* int32 dump_msg_type */ 3:
                    message.dumpMsgType = reader.int32();
                    break;
                case /* int64 drum_count */ 4:
                    message.drumCount = reader.int64().toBigInt();
                    break;
                case /* int64 report_time_gap */ 5:
                    message.reportTimeGap = reader.int64().toBigInt();
                    break;
                case /* int64 push_id */ 6:
                    message.pushId = reader.int64().toBigInt();
                    break;
                case /* string push_id_str */ 7:
                    message.pushIdStr = reader.string();
                    break;
                case /* repeated im.DrumMessage.User users */ 8:
                    message.users.push(DrumMessage_User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DrumMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 drum_result = 2; */
        if (message.drumResult !== 0)
            writer.tag(2, WireType.Varint).int32(message.drumResult);
        /* int32 dump_msg_type = 3; */
        if (message.dumpMsgType !== 0)
            writer.tag(3, WireType.Varint).int32(message.dumpMsgType);
        /* int64 drum_count = 4; */
        if (message.drumCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.drumCount);
        /* int64 report_time_gap = 5; */
        if (message.reportTimeGap !== 0n)
            writer.tag(5, WireType.Varint).int64(message.reportTimeGap);
        /* int64 push_id = 6; */
        if (message.pushId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.pushId);
        /* string push_id_str = 7; */
        if (message.pushIdStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.pushIdStr);
        /* repeated im.DrumMessage.User users = 8; */
        for (let i = 0; i < message.users.length; i++)
            DrumMessage_User.internalBinaryWrite(message.users[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DrumMessage
 */
export const DrumMessage = new DrumMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DrumMessage_User$Type extends MessageType<DrumMessage_User> {
    constructor() {
        super("im.DrumMessage.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DrumMessage_User>): DrumMessage_User {
        const message = { userId: 0n, nickName: "", avatar: "", userIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DrumMessage_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DrumMessage_User): DrumMessage_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string nick_name */ 2:
                    message.nickName = reader.string();
                    break;
                case /* string avatar */ 3:
                    message.avatar = reader.string();
                    break;
                case /* string user_id_str */ 4:
                    message.userIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DrumMessage_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string nick_name = 2; */
        if (message.nickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickName);
        /* string avatar = 3; */
        if (message.avatar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatar);
        /* string user_id_str = 4; */
        if (message.userIdStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DrumMessage.User
 */
export const DrumMessage_User = new DrumMessage_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectDModifyH5$Type extends MessageType<ProjectDModifyH5> {
    constructor() {
        super("im.ProjectDModifyH5", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "top_left", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "buttom_right", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProjectDModifyH5>): ProjectDModifyH5 {
        const message = { topLeft: "", buttomRight: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProjectDModifyH5>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProjectDModifyH5): ProjectDModifyH5 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string top_left */ 2:
                    message.topLeft = reader.string();
                    break;
                case /* string buttom_right */ 3:
                    message.buttomRight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProjectDModifyH5, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string top_left = 2; */
        if (message.topLeft !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.topLeft);
        /* string buttom_right = 3; */
        if (message.buttomRight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.buttomRight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProjectDModifyH5
 */
export const ProjectDModifyH5 = new ProjectDModifyH5$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectDTaskInfo$Type extends MessageType<ProjectDTaskInfo> {
    constructor() {
        super("im.ProjectDTaskInfo", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "atype", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "fallback_context", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "award_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "left_task_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "sub_task_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ProjectDTaskInfo>): ProjectDTaskInfo {
        const message = { atype: 0, count: "", fallbackContext: "", awardUrl: "", leftTaskCount: 0n, subTaskId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProjectDTaskInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProjectDTaskInfo): ProjectDTaskInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 atype */ 2:
                    message.atype = reader.int32();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string count */ 4:
                    message.count = reader.string();
                    break;
                case /* string fallback_context */ 5:
                    message.fallbackContext = reader.string();
                    break;
                case /* string award_url */ 6:
                    message.awardUrl = reader.string();
                    break;
                case /* int64 left_task_count */ 7:
                    message.leftTaskCount = reader.int64().toBigInt();
                    break;
                case /* int64 sub_task_id */ 8:
                    message.subTaskId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProjectDTaskInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 atype = 2; */
        if (message.atype !== 0)
            writer.tag(2, WireType.Varint).int32(message.atype);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string count = 4; */
        if (message.count !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.count);
        /* string fallback_context = 5; */
        if (message.fallbackContext !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fallbackContext);
        /* string award_url = 6; */
        if (message.awardUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.awardUrl);
        /* int64 left_task_count = 7; */
        if (message.leftTaskCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.leftTaskCount);
        /* int64 sub_task_id = 8; */
        if (message.subTaskId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.subTaskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProjectDTaskInfo
 */
export const ProjectDTaskInfo = new ProjectDTaskInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DutyGiftMessage$Type extends MessageType<DutyGiftMessage> {
    constructor() {
        super("im.DutyGiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 5, name: "speedy_gift_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "target_score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "stage_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "contribute_most", kind: "message", T: () => User },
            { no: 11, name: "contribute_most_score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "duty_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DutyGiftMessage>): DutyGiftMessage {
        const message = { speedyGiftId: 0, targetScore: 0, stageCount: 0, status: 0, score: 0, contributeMostScore: 0, dutyId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DutyGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DutyGiftMessage): DutyGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 speedy_gift_id */ 5:
                    message.speedyGiftId = reader.int32();
                    break;
                case /* int32 target_score */ 6:
                    message.targetScore = reader.int32();
                    break;
                case /* int32 stage_count */ 7:
                    message.stageCount = reader.int32();
                    break;
                case /* int32 status */ 8:
                    message.status = reader.int32();
                    break;
                case /* int32 score */ 9:
                    message.score = reader.int32();
                    break;
                case /* data.User contribute_most */ 10:
                    message.contributeMost = User.internalBinaryRead(reader, reader.uint32(), options, message.contributeMost);
                    break;
                case /* int32 contribute_most_score */ 11:
                    message.contributeMostScore = reader.int32();
                    break;
                case /* int64 duty_id */ 12:
                    message.dutyId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DutyGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 speedy_gift_id = 5; */
        if (message.speedyGiftId !== 0)
            writer.tag(5, WireType.Varint).int32(message.speedyGiftId);
        /* int32 target_score = 6; */
        if (message.targetScore !== 0)
            writer.tag(6, WireType.Varint).int32(message.targetScore);
        /* int32 stage_count = 7; */
        if (message.stageCount !== 0)
            writer.tag(7, WireType.Varint).int32(message.stageCount);
        /* int32 status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* int32 score = 9; */
        if (message.score !== 0)
            writer.tag(9, WireType.Varint).int32(message.score);
        /* data.User contribute_most = 10; */
        if (message.contributeMost)
            User.internalBinaryWrite(message.contributeMost, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int32 contribute_most_score = 11; */
        if (message.contributeMostScore !== 0)
            writer.tag(11, WireType.Varint).int32(message.contributeMostScore);
        /* int64 duty_id = 12; */
        if (message.dutyId !== 0n)
            writer.tag(12, WireType.Varint).int64(message.dutyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DutyGiftMessage
 */
export const DutyGiftMessage = new DutyGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EasterEggMessage$Type extends MessageType<EasterEggMessage> {
    constructor() {
        super("im.EasterEggMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => EasterEggMessageData }
        ]);
    }
    create(value?: PartialMessage<EasterEggMessage>): EasterEggMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EasterEggMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EasterEggMessage): EasterEggMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.EasterEggMessageData data */ 2:
                    message.data = EasterEggMessageData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EasterEggMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.EasterEggMessageData data = 2; */
        if (message.data)
            EasterEggMessageData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EasterEggMessage
 */
export const EasterEggMessage = new EasterEggMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EasterEggMessageData$Type extends MessageType<EasterEggMessageData> {
    constructor() {
        super("im.EasterEggMessageData", [
            { no: 1, name: "has_easter_egg", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "stage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "total_stage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "effects_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "start_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "end_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EasterEggMessageData>): EasterEggMessageData {
        const message = { hasEasterEgg: false, stage: 0n, totalStage: 0n, effectsNum: 0n, startCount: 0n, endCount: 0n, count: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EasterEggMessageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EasterEggMessageData): EasterEggMessageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has_easter_egg */ 1:
                    message.hasEasterEgg = reader.bool();
                    break;
                case /* int64 stage */ 2:
                    message.stage = reader.int64().toBigInt();
                    break;
                case /* int64 total_stage */ 3:
                    message.totalStage = reader.int64().toBigInt();
                    break;
                case /* int64 effects_num */ 4:
                    message.effectsNum = reader.int64().toBigInt();
                    break;
                case /* int64 start_count */ 5:
                    message.startCount = reader.int64().toBigInt();
                    break;
                case /* int64 end_count */ 6:
                    message.endCount = reader.int64().toBigInt();
                    break;
                case /* int64 count */ 7:
                    message.count = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EasterEggMessageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool has_easter_egg = 1; */
        if (message.hasEasterEgg !== false)
            writer.tag(1, WireType.Varint).bool(message.hasEasterEgg);
        /* int64 stage = 2; */
        if (message.stage !== 0n)
            writer.tag(2, WireType.Varint).int64(message.stage);
        /* int64 total_stage = 3; */
        if (message.totalStage !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalStage);
        /* int64 effects_num = 4; */
        if (message.effectsNum !== 0n)
            writer.tag(4, WireType.Varint).int64(message.effectsNum);
        /* int64 start_count = 5; */
        if (message.startCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.startCount);
        /* int64 end_count = 6; */
        if (message.endCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.endCount);
        /* int64 count = 7; */
        if (message.count !== 0n)
            writer.tag(7, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EasterEggMessageData
 */
export const EasterEggMessageData = new EasterEggMessageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomFansClubMessage$Type extends MessageType<EcomFansClubMessage> {
    constructor() {
        super("im.EcomFansClubMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "user", kind: "message", T: () => UserInfo }
        ]);
    }
    create(value?: PartialMessage<EcomFansClubMessage>): EcomFansClubMessage {
        const message = { action: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomFansClubMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomFansClubMessage): EcomFansClubMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                case /* im.UserInfo user */ 3:
                    message.user = UserInfo.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomFansClubMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        /* im.UserInfo user = 3; */
        if (message.user)
            UserInfo.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EcomFansClubMessage
 */
export const EcomFansClubMessage = new EcomFansClubMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInfo$Type extends MessageType<UserInfo> {
    constructor() {
        super("im.UserInfo", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfo>): UserInfo {
        const message = { userId: 0n, level: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfo): UserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int32 level */ 2:
                    message.level = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* int32 level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).int32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserInfo
 */
export const UserInfo = new UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CornerReachMessage$Type extends MessageType<CornerReachMessage> {
    constructor() {
        super("im.CornerReachMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "elem_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CornerReachMessage>): CornerReachMessage {
        const message = { duration: 0n, elemType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CornerReachMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CornerReachMessage): CornerReachMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 elem_type */ 3:
                    message.elemType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CornerReachMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* int64 elem_type = 3; */
        if (message.elemType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.elemType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CornerReachMessage
 */
export const CornerReachMessage = new CornerReachMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TempStateAreaReachMessage$Type extends MessageType<TempStateAreaReachMessage> {
    constructor() {
        super("im.TempStateAreaReachMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "elem_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "elem_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "resource", kind: "message", T: () => TempStateAreaReachMessage_Resource }
        ]);
    }
    create(value?: PartialMessage<TempStateAreaReachMessage>): TempStateAreaReachMessage {
        const message = { elemType: 0n, elemId: 0n, itemId: 0n, status: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TempStateAreaReachMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TempStateAreaReachMessage): TempStateAreaReachMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 elem_type */ 2:
                    message.elemType = reader.int64().toBigInt();
                    break;
                case /* int64 elem_id */ 3:
                    message.elemId = reader.int64().toBigInt();
                    break;
                case /* int64 item_id */ 4:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 5:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* im.TempStateAreaReachMessage.Resource resource */ 6:
                    message.resource = TempStateAreaReachMessage_Resource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TempStateAreaReachMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 elem_type = 2; */
        if (message.elemType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.elemType);
        /* int64 elem_id = 3; */
        if (message.elemId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.elemId);
        /* int64 item_id = 4; */
        if (message.itemId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.itemId);
        /* int64 status = 5; */
        if (message.status !== 0n)
            writer.tag(5, WireType.Varint).int64(message.status);
        /* im.TempStateAreaReachMessage.Resource resource = 6; */
        if (message.resource)
            TempStateAreaReachMessage_Resource.internalBinaryWrite(message.resource, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TempStateAreaReachMessage
 */
export const TempStateAreaReachMessage = new TempStateAreaReachMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TempStateAreaReachMessage_Resource$Type extends MessageType<TempStateAreaReachMessage_Resource> {
    constructor() {
        super("im.TempStateAreaReachMessage.Resource", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TempStateAreaReachMessage_Resource>): TempStateAreaReachMessage_Resource {
        const message = { name: "", icon: "", description: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TempStateAreaReachMessage_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TempStateAreaReachMessage_Resource): TempStateAreaReachMessage_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TempStateAreaReachMessage_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TempStateAreaReachMessage.Resource
 */
export const TempStateAreaReachMessage_Resource = new TempStateAreaReachMessage_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpisodeChatMessage$Type extends MessageType<EpisodeChatMessage> {
    constructor() {
        super("im.EpisodeChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "visible_to_sender", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "background_image", kind: "message", T: () => Image },
            { no: 6, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 7, name: "gift_image", kind: "message", T: () => Image },
            { no: 8, name: "agree_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "color_value", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EpisodeChatMessage>): EpisodeChatMessage {
        const message = { content: "", visibleToSender: false, agreeMsgId: 0n, colorValue: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpisodeChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpisodeChatMessage): EpisodeChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* bool visible_to_sender */ 4:
                    message.visibleToSender = reader.bool();
                    break;
                case /* data.Image background_image */ 5:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 6:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* data.Image gift_image */ 7:
                    message.giftImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.giftImage);
                    break;
                case /* int64 agree_msg_id */ 8:
                    message.agreeMsgId = reader.int64().toBigInt();
                    break;
                case /* repeated string color_value */ 9:
                    message.colorValue.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpisodeChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* bool visible_to_sender = 4; */
        if (message.visibleToSender !== false)
            writer.tag(4, WireType.Varint).bool(message.visibleToSender);
        /* data.Image background_image = 5; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 6; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image gift_image = 7; */
        if (message.giftImage)
            Image.internalBinaryWrite(message.giftImage, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 agree_msg_id = 8; */
        if (message.agreeMsgId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.agreeMsgId);
        /* repeated string color_value = 9; */
        for (let i = 0; i < message.colorValue.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.colorValue[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EpisodeChatMessage
 */
export const EpisodeChatMessage = new EpisodeChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FansGroupGuideMessage$Type extends MessageType<FansGroupGuideMessage> {
    constructor() {
        super("im.FansGroupGuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "auto_record_duration_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "rich_text", kind: "message", T: () => Text },
            { no: 7, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FansGroupGuideMessage>): FansGroupGuideMessage {
        const message = { type: 0, title: "", content: "", autoRecordDurationMs: 0n, schemeUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FansGroupGuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FansGroupGuideMessage): FansGroupGuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* int64 auto_record_duration_ms */ 5:
                    message.autoRecordDurationMs = reader.int64().toBigInt();
                    break;
                case /* data.Text rich_text */ 6:
                    message.richText = Text.internalBinaryRead(reader, reader.uint32(), options, message.richText);
                    break;
                case /* string scheme_url */ 7:
                    message.schemeUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FansGroupGuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* int64 auto_record_duration_ms = 5; */
        if (message.autoRecordDurationMs !== 0n)
            writer.tag(5, WireType.Varint).int64(message.autoRecordDurationMs);
        /* data.Text rich_text = 6; */
        if (message.richText)
            Text.internalBinaryWrite(message.richText, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string scheme_url = 7; */
        if (message.schemeUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.schemeUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FansGroupGuideMessage
 */
export const FansGroupGuideMessage = new FansGroupGuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FansclubStatisticsMessage$Type extends MessageType<FansclubStatisticsMessage> {
    constructor() {
        super("im.FansclubStatisticsMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fans_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FansclubStatisticsMessage>): FansclubStatisticsMessage {
        const message = { name: "", fansCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FansclubStatisticsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FansclubStatisticsMessage): FansclubStatisticsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 fans_count */ 3:
                    message.fansCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FansclubStatisticsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 fans_count = 3; */
        if (message.fansCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fansCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FansclubStatisticsMessage
 */
export const FansclubStatisticsMessage = new FansclubStatisticsMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FansclubMessage$Type extends MessageType<FansclubMessage> {
    constructor() {
        super("im.FansclubMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user", kind: "message", T: () => User },
            { no: 5, name: "upgrade_privilege", kind: "message", T: () => FansclubMessage_UpgradePrivilege },
            { no: 6, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<FansclubMessage>): FansclubMessage {
        const message = { action: 0, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FansclubMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FansclubMessage): FansclubMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* data.User user */ 4:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* im.FansclubMessage.UpgradePrivilege upgrade_privilege */ 5:
                    message.upgradePrivilege = FansclubMessage_UpgradePrivilege.internalBinaryRead(reader, reader.uint32(), options, message.upgradePrivilege);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 6:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FansclubMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* data.User user = 4; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.FansclubMessage.UpgradePrivilege upgrade_privilege = 5; */
        if (message.upgradePrivilege)
            FansclubMessage_UpgradePrivilege.internalBinaryWrite(message.upgradePrivilege, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 6; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FansclubMessage
 */
export const FansclubMessage = new FansclubMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FansclubMessage_UpgradePrivilege$Type extends MessageType<FansclubMessage_UpgradePrivilege> {
    constructor() {
        super("im.FansclubMessage.UpgradePrivilege", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "button_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FansclubMessage_UpgradePrivilege>): FansclubMessage_UpgradePrivilege {
        const message = { content: "", description: "", buttonType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FansclubMessage_UpgradePrivilege>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FansclubMessage_UpgradePrivilege): FansclubMessage_UpgradePrivilege {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* int32 button_type */ 3:
                    message.buttonType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FansclubMessage_UpgradePrivilege, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* int32 button_type = 3; */
        if (message.buttonType !== 0)
            writer.tag(3, WireType.Varint).int32(message.buttonType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FansclubMessage.UpgradePrivilege
 */
export const FansclubMessage_UpgradePrivilege = new FansclubMessage_UpgradePrivilege$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FansclubReviewMessage$Type extends MessageType<FansclubReviewMessage> {
    constructor() {
        super("im.FansclubReviewMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FansclubReviewMessage>): FansclubReviewMessage {
        const message = { action: 0, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FansclubReviewMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FansclubReviewMessage): FansclubReviewMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FansclubReviewMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FansclubReviewMessage
 */
export const FansclubReviewMessage = new FansclubReviewMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FansclubGuideMessage$Type extends MessageType<FansclubGuideMessage> {
    constructor() {
        super("im.FansclubGuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "title", kind: "message", T: () => Text },
            { no: 3, name: "sub_title", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<FansclubGuideMessage>): FansclubGuideMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FansclubGuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FansclubGuideMessage): FansclubGuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Text title */ 2:
                    message.title = Text.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* data.Text sub_title */ 3:
                    message.subTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.subTitle);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FansclubGuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text title = 2; */
        if (message.title)
            Text.internalBinaryWrite(message.title, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text sub_title = 3; */
        if (message.subTitle)
            Text.internalBinaryWrite(message.subTitle, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FansclubGuideMessage
 */
export const FansclubGuideMessage = new FansclubGuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackActionMessage$Type extends MessageType<FeedbackActionMessage> {
    constructor() {
        super("im.FeedbackActionMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FeedbackActionMessage>): FeedbackActionMessage {
        const message = { actionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackActionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackActionMessage): FeedbackActionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 action_id */ 2:
                    message.actionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackActionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 action_id = 2; */
        if (message.actionId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.actionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FeedbackActionMessage
 */
export const FeedbackActionMessage = new FeedbackActionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedbackCardMessage$Type extends MessageType<FeedbackCardMessage> {
    constructor() {
        super("im.FeedbackCardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "questionnaire_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "scatterMills", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FeedbackCardMessage>): FeedbackCardMessage {
        const message = { questionnaireId: 0n, scatterMills: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeedbackCardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedbackCardMessage): FeedbackCardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 questionnaire_id */ 2:
                    message.questionnaireId = reader.int64().toBigInt();
                    break;
                case /* int64 scatterMills */ 3:
                    message.scatterMills = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedbackCardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 questionnaire_id = 2; */
        if (message.questionnaireId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.questionnaireId);
        /* int64 scatterMills = 3; */
        if (message.scatterMills !== 0n)
            writer.tag(3, WireType.Varint).int64(message.scatterMills);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FeedbackCardMessage
 */
export const FeedbackCardMessage = new FeedbackCardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworkMessage$Type extends MessageType<FireworkMessage> {
    constructor() {
        super("im.FireworkMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "report_time_gap", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "push_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "push_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FireworkMessage_User }
        ]);
    }
    create(value?: PartialMessage<FireworkMessage>): FireworkMessage {
        const message = { count: 0n, reportTimeGap: 0n, pushId: 0n, pushIdStr: "", users: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworkMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworkMessage): FireworkMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* int64 report_time_gap */ 3:
                    message.reportTimeGap = reader.int64().toBigInt();
                    break;
                case /* int64 push_id */ 4:
                    message.pushId = reader.int64().toBigInt();
                    break;
                case /* string push_id_str */ 5:
                    message.pushIdStr = reader.string();
                    break;
                case /* repeated im.FireworkMessage.User users */ 6:
                    message.users.push(FireworkMessage_User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworkMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* int64 report_time_gap = 3; */
        if (message.reportTimeGap !== 0n)
            writer.tag(3, WireType.Varint).int64(message.reportTimeGap);
        /* int64 push_id = 4; */
        if (message.pushId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.pushId);
        /* string push_id_str = 5; */
        if (message.pushIdStr !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.pushIdStr);
        /* repeated im.FireworkMessage.User users = 6; */
        for (let i = 0; i < message.users.length; i++)
            FireworkMessage_User.internalBinaryWrite(message.users[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FireworkMessage
 */
export const FireworkMessage = new FireworkMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworkMessage_User$Type extends MessageType<FireworkMessage_User> {
    constructor() {
        super("im.FireworkMessage.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FireworkMessage_User>): FireworkMessage_User {
        const message = { userId: 0n, nickName: "", avatar: "", userIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworkMessage_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworkMessage_User): FireworkMessage_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string nick_name */ 2:
                    message.nickName = reader.string();
                    break;
                case /* string avatar */ 3:
                    message.avatar = reader.string();
                    break;
                case /* string user_id_str */ 4:
                    message.userIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworkMessage_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string nick_name = 2; */
        if (message.nickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickName);
        /* string avatar = 3; */
        if (message.avatar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatar);
        /* string user_id_str = 4; */
        if (message.userIdStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FireworkMessage.User
 */
export const FireworkMessage_User = new FireworkMessage_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworkMultiMessage$Type extends MessageType<FireworkMultiMessage> {
    constructor() {
        super("im.FireworkMultiMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "biz_msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<FireworkMultiMessage>): FireworkMultiMessage {
        const message = { bizMsg: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworkMultiMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworkMultiMessage): FireworkMultiMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bytes biz_msg */ 2:
                    message.bizMsg = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworkMultiMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes biz_msg = 2; */
        if (message.bizMsg.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.bizMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FireworkMultiMessage
 */
export const FireworkMultiMessage = new FireworkMultiMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FollowGuideMessage$Type extends MessageType<FollowGuideMessage> {
    constructor() {
        super("im.FollowGuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "avatarUrl", kind: "message", T: () => Image },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hourRankInfo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "giftId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "popupReason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FollowGuideMessage>): FollowGuideMessage {
        const message = { content: "", hourRankInfo: "", giftId: 0n, duration: 0n, popupReason: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FollowGuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FollowGuideMessage): FollowGuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Image avatarUrl */ 2:
                    message.avatarUrl = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarUrl);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string hourRankInfo */ 4:
                    message.hourRankInfo = reader.string();
                    break;
                case /* int64 giftId */ 5:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 6:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string popupReason */ 7:
                    message.popupReason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FollowGuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatarUrl = 2; */
        if (message.avatarUrl)
            Image.internalBinaryWrite(message.avatarUrl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string hourRankInfo = 4; */
        if (message.hourRankInfo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hourRankInfo);
        /* int64 giftId = 5; */
        if (message.giftId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.giftId);
        /* int64 duration = 6; */
        if (message.duration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.duration);
        /* string popupReason = 7; */
        if (message.popupReason !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.popupReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FollowGuideMessage
 */
export const FollowGuideMessage = new FollowGuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrokerNotifyMessage$Type extends MessageType<BrokerNotifyMessage> {
    constructor() {
        super("im.BrokerNotifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "msg_sub_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BrokerNotifyMessage>): BrokerNotifyMessage {
        const message = { msgType: 0n, content: "", timestamp: 0n, msgSubType: 0n, msgId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BrokerNotifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrokerNotifyMessage): BrokerNotifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 msg_type */ 2:
                    message.msgType = reader.int64().toBigInt();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 timestamp */ 4:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* int64 msg_sub_type */ 5:
                    message.msgSubType = reader.int64().toBigInt();
                    break;
                case /* int64 msg_id */ 6:
                    message.msgId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrokerNotifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 msg_type = 2; */
        if (message.msgType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgType);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 timestamp = 4; */
        if (message.timestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.timestamp);
        /* int64 msg_sub_type = 5; */
        if (message.msgSubType !== 0n)
            writer.tag(5, WireType.Varint).int64(message.msgSubType);
        /* int64 msg_id = 6; */
        if (message.msgId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.msgId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BrokerNotifyMessage
 */
export const BrokerNotifyMessage = new BrokerNotifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FreeCellGiftMessage$Type extends MessageType<FreeCellGiftMessage> {
    constructor() {
        super("im.FreeCellGiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "group_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "repeat_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "combo_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user", kind: "message", T: () => User },
            { no: 8, name: "to_user", kind: "message", T: () => User },
            { no: 9, name: "free_cell", kind: "message", T: () => FreeCellGiftMessage_FreeCellData },
            { no: 10, name: "room_fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<FreeCellGiftMessage>): FreeCellGiftMessage {
        const message = { giftId: 0n, fanTicketCount: 0n, groupCount: 0n, repeatCount: 0n, comboCount: 0n, roomFanTicketCount: 0n, logId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FreeCellGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FreeCellGiftMessage): FreeCellGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 gift_id */ 2:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 fan_ticket_count */ 3:
                    message.fanTicketCount = reader.int64().toBigInt();
                    break;
                case /* int64 group_count */ 4:
                    message.groupCount = reader.int64().toBigInt();
                    break;
                case /* int64 repeat_count */ 5:
                    message.repeatCount = reader.int64().toBigInt();
                    break;
                case /* int64 combo_count */ 6:
                    message.comboCount = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 7:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.User to_user */ 8:
                    message.toUser = User.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* im.FreeCellGiftMessage.FreeCellData free_cell */ 9:
                    message.freeCell = FreeCellGiftMessage_FreeCellData.internalBinaryRead(reader, reader.uint32(), options, message.freeCell);
                    break;
                case /* int64 room_fan_ticket_count */ 10:
                    message.roomFanTicketCount = reader.int64().toBigInt();
                    break;
                case /* string log_id */ 11:
                    message.logId = reader.string();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 12:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FreeCellGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 gift_id = 2; */
        if (message.giftId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.giftId);
        /* int64 fan_ticket_count = 3; */
        if (message.fanTicketCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fanTicketCount);
        /* int64 group_count = 4; */
        if (message.groupCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.groupCount);
        /* int64 repeat_count = 5; */
        if (message.repeatCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.repeatCount);
        /* int64 combo_count = 6; */
        if (message.comboCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.comboCount);
        /* data.User user = 7; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.User to_user = 8; */
        if (message.toUser)
            User.internalBinaryWrite(message.toUser, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* im.FreeCellGiftMessage.FreeCellData free_cell = 9; */
        if (message.freeCell)
            FreeCellGiftMessage_FreeCellData.internalBinaryWrite(message.freeCell, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 room_fan_ticket_count = 10; */
        if (message.roomFanTicketCount !== 0n)
            writer.tag(10, WireType.Varint).int64(message.roomFanTicketCount);
        /* string log_id = 11; */
        if (message.logId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.logId);
        /* im.PublicAreaCommon public_area_common = 12; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FreeCellGiftMessage
 */
export const FreeCellGiftMessage = new FreeCellGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FreeCellGiftMessage_FreeCellData$Type extends MessageType<FreeCellGiftMessage_FreeCellData> {
    constructor() {
        super("im.FreeCellGiftMessage.FreeCellData", [
            { no: 1, name: "time_now_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "time_start_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "time_freeze_end_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "time_double_end_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "time_end_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "free_cell_length", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "is_freeze", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "is_double", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "contribute_most_user", kind: "message", T: () => User },
            { no: 10, name: "contribute_most_coins", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "distance_from_previous_one", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "index_in_day_ranklist", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FreeCellGiftMessage_FreeCellData>): FreeCellGiftMessage_FreeCellData {
        const message = { timeNowMs: 0n, timeStartMs: 0n, timeFreezeEndMs: 0n, timeDoubleEndMs: 0n, timeEndMs: 0n, freeCellLength: 0n, isFreeze: false, isDouble: false, contributeMostCoins: 0n, distanceFromPreviousOne: 0n, indexInDayRanklist: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FreeCellGiftMessage_FreeCellData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FreeCellGiftMessage_FreeCellData): FreeCellGiftMessage_FreeCellData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 time_now_ms */ 1:
                    message.timeNowMs = reader.int64().toBigInt();
                    break;
                case /* int64 time_start_ms */ 2:
                    message.timeStartMs = reader.int64().toBigInt();
                    break;
                case /* int64 time_freeze_end_ms */ 3:
                    message.timeFreezeEndMs = reader.int64().toBigInt();
                    break;
                case /* int64 time_double_end_ms */ 4:
                    message.timeDoubleEndMs = reader.int64().toBigInt();
                    break;
                case /* int64 time_end_ms */ 5:
                    message.timeEndMs = reader.int64().toBigInt();
                    break;
                case /* int64 free_cell_length */ 6:
                    message.freeCellLength = reader.int64().toBigInt();
                    break;
                case /* bool is_freeze */ 7:
                    message.isFreeze = reader.bool();
                    break;
                case /* bool is_double */ 8:
                    message.isDouble = reader.bool();
                    break;
                case /* data.User contribute_most_user */ 9:
                    message.contributeMostUser = User.internalBinaryRead(reader, reader.uint32(), options, message.contributeMostUser);
                    break;
                case /* int64 contribute_most_coins */ 10:
                    message.contributeMostCoins = reader.int64().toBigInt();
                    break;
                case /* int64 distance_from_previous_one */ 11:
                    message.distanceFromPreviousOne = reader.int64().toBigInt();
                    break;
                case /* int64 index_in_day_ranklist */ 12:
                    message.indexInDayRanklist = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FreeCellGiftMessage_FreeCellData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 time_now_ms = 1; */
        if (message.timeNowMs !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timeNowMs);
        /* int64 time_start_ms = 2; */
        if (message.timeStartMs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timeStartMs);
        /* int64 time_freeze_end_ms = 3; */
        if (message.timeFreezeEndMs !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timeFreezeEndMs);
        /* int64 time_double_end_ms = 4; */
        if (message.timeDoubleEndMs !== 0n)
            writer.tag(4, WireType.Varint).int64(message.timeDoubleEndMs);
        /* int64 time_end_ms = 5; */
        if (message.timeEndMs !== 0n)
            writer.tag(5, WireType.Varint).int64(message.timeEndMs);
        /* int64 free_cell_length = 6; */
        if (message.freeCellLength !== 0n)
            writer.tag(6, WireType.Varint).int64(message.freeCellLength);
        /* bool is_freeze = 7; */
        if (message.isFreeze !== false)
            writer.tag(7, WireType.Varint).bool(message.isFreeze);
        /* bool is_double = 8; */
        if (message.isDouble !== false)
            writer.tag(8, WireType.Varint).bool(message.isDouble);
        /* data.User contribute_most_user = 9; */
        if (message.contributeMostUser)
            User.internalBinaryWrite(message.contributeMostUser, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 contribute_most_coins = 10; */
        if (message.contributeMostCoins !== 0n)
            writer.tag(10, WireType.Varint).int64(message.contributeMostCoins);
        /* int64 distance_from_previous_one = 11; */
        if (message.distanceFromPreviousOne !== 0n)
            writer.tag(11, WireType.Varint).int64(message.distanceFromPreviousOne);
        /* int64 index_in_day_ranklist = 12; */
        if (message.indexInDayRanklist !== 0n)
            writer.tag(12, WireType.Varint).int64(message.indexInDayRanklist);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FreeCellGiftMessage.FreeCellData
 */
export const FreeCellGiftMessage_FreeCellData = new FreeCellGiftMessage_FreeCellData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FreeGiftMessage$Type extends MessageType<FreeGiftMessage> {
    constructor() {
        super("im.FreeGiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "free_gift", kind: "message", T: () => FreeGift }
        ]);
    }
    create(value?: PartialMessage<FreeGiftMessage>): FreeGiftMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FreeGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FreeGiftMessage): FreeGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.FreeGift free_gift */ 3:
                    message.freeGift = FreeGift.internalBinaryRead(reader, reader.uint32(), options, message.freeGift);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FreeGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.FreeGift free_gift = 3; */
        if (message.freeGift)
            FreeGift.internalBinaryWrite(message.freeGift, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FreeGiftMessage
 */
export const FreeGiftMessage = new FreeGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamblingStatusChangedMessage$Type extends MessageType<GamblingStatusChangedMessage> {
    constructor() {
        super("im.GamblingStatusChangedMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "prev_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "game_quiz_info", kind: "message", T: () => GamblingStatusChangedMessage_GameQuizInfo }
        ]);
    }
    create(value?: PartialMessage<GamblingStatusChangedMessage>): GamblingStatusChangedMessage {
        const message = { prevStatus: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GamblingStatusChangedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamblingStatusChangedMessage): GamblingStatusChangedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 prev_status */ 2:
                    message.prevStatus = reader.int64().toBigInt();
                    break;
                case /* im.GamblingStatusChangedMessage.GameQuizInfo game_quiz_info */ 3:
                    message.gameQuizInfo = GamblingStatusChangedMessage_GameQuizInfo.internalBinaryRead(reader, reader.uint32(), options, message.gameQuizInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamblingStatusChangedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 prev_status = 2; */
        if (message.prevStatus !== 0n)
            writer.tag(2, WireType.Varint).int64(message.prevStatus);
        /* im.GamblingStatusChangedMessage.GameQuizInfo game_quiz_info = 3; */
        if (message.gameQuizInfo)
            GamblingStatusChangedMessage_GameQuizInfo.internalBinaryWrite(message.gameQuizInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GamblingStatusChangedMessage
 */
export const GamblingStatusChangedMessage = new GamblingStatusChangedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamblingStatusChangedMessage_GameQuizInfo$Type extends MessageType<GamblingStatusChangedMessage_GameQuizInfo> {
    constructor() {
        super("im.GamblingStatusChangedMessage.GameQuizInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GamblingStatusChangedMessage_GameQuizInfo>): GamblingStatusChangedMessage_GameQuizInfo {
        const message = { id: 0n, roomId: 0n, status: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GamblingStatusChangedMessage_GameQuizInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamblingStatusChangedMessage_GameQuizInfo): GamblingStatusChangedMessage_GameQuizInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 2:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamblingStatusChangedMessage_GameQuizInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 room_id = 2; */
        if (message.roomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.roomId);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GamblingStatusChangedMessage.GameQuizInfo
 */
export const GamblingStatusChangedMessage_GameQuizInfo = new GamblingStatusChangedMessage_GameQuizInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameChannelMessage$Type extends MessageType<GameChannelMessage> {
    constructor() {
        super("im.GameChannelMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GameChannelMessage>): GameChannelMessage {
        const message = { gameId: 0n, messageType: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameChannelMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameChannelMessage): GameChannelMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 message_type */ 3:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                case /* data.User user */ 5:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameChannelMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* int64 message_type = 3; */
        if (message.messageType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.messageType);
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        /* data.User user = 5; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameChannelMessage
 */
export const GameChannelMessage = new GameChannelMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HostVersion$Type extends MessageType<HostVersion> {
    constructor() {
        super("im.HostVersion", [
            { no: 1, name: "host_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "min_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "max_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HostVersion>): HostVersion {
        const message = { hostId: 0n, minVersion: "", maxVersion: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HostVersion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HostVersion): HostVersion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 host_id */ 1:
                    message.hostId = reader.int64().toBigInt();
                    break;
                case /* string min_version */ 2:
                    message.minVersion = reader.string();
                    break;
                case /* string max_version */ 3:
                    message.maxVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HostVersion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 host_id = 1; */
        if (message.hostId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.hostId);
        /* string min_version = 2; */
        if (message.minVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.minVersion);
        /* string max_version = 3; */
        if (message.maxVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.maxVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HostVersion
 */
export const HostVersion = new HostVersion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameAncAudEntranceMessage$Type extends MessageType<GameAncAudEntranceMessage> {
    constructor() {
        super("im.GameAncAudEntranceMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "game_kind", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "show_audience_float_entrance", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "version_range", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HostVersion },
            { no: 7, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "meta_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "start_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GameAncAudEntranceMessage>): GameAncAudEntranceMessage {
        const message = { gameId: 0n, gameKind: 0n, extra: "", showAudienceFloatEntrance: false, versionRange: [], appId: "", metaVersion: "", name: "", iconUrl: "", startId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameAncAudEntranceMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameAncAudEntranceMessage): GameAncAudEntranceMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 game_kind */ 3:
                    message.gameKind = reader.int64().toBigInt();
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                case /* bool show_audience_float_entrance */ 5:
                    message.showAudienceFloatEntrance = reader.bool();
                    break;
                case /* repeated im.HostVersion version_range */ 6:
                    message.versionRange.push(HostVersion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string app_id */ 7:
                    message.appId = reader.string();
                    break;
                case /* string meta_version */ 8:
                    message.metaVersion = reader.string();
                    break;
                case /* string name */ 9:
                    message.name = reader.string();
                    break;
                case /* string icon_url */ 10:
                    message.iconUrl = reader.string();
                    break;
                case /* int64 start_id */ 11:
                    message.startId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameAncAudEntranceMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* int64 game_kind = 3; */
        if (message.gameKind !== 0n)
            writer.tag(3, WireType.Varint).int64(message.gameKind);
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        /* bool show_audience_float_entrance = 5; */
        if (message.showAudienceFloatEntrance !== false)
            writer.tag(5, WireType.Varint).bool(message.showAudienceFloatEntrance);
        /* repeated im.HostVersion version_range = 6; */
        for (let i = 0; i < message.versionRange.length; i++)
            HostVersion.internalBinaryWrite(message.versionRange[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 7; */
        if (message.appId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.appId);
        /* string meta_version = 8; */
        if (message.metaVersion !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.metaVersion);
        /* string name = 9; */
        if (message.name !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.name);
        /* string icon_url = 10; */
        if (message.iconUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.iconUrl);
        /* int64 start_id = 11; */
        if (message.startId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.startId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameAncAudEntranceMessage
 */
export const GameAncAudEntranceMessage = new GameAncAudEntranceMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameAncAudStatusMessage$Type extends MessageType<GameAncAudStatusMessage> {
    constructor() {
        super("im.GameAncAudStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "send_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "game_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameAncAudStatusMessage>): GameAncAudStatusMessage {
        const message = { gameId: 0n, sendType: 0n, gameStatus: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameAncAudStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameAncAudStatusMessage): GameAncAudStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 send_type */ 3:
                    message.sendType = reader.int64().toBigInt();
                    break;
                case /* int64 game_status */ 4:
                    message.gameStatus = reader.int64().toBigInt();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameAncAudStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* int64 send_type = 3; */
        if (message.sendType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.sendType);
        /* int64 game_status = 4; */
        if (message.gameStatus !== 0n)
            writer.tag(4, WireType.Varint).int64(message.gameStatus);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameAncAudStatusMessage
 */
export const GameAncAudStatusMessage = new GameAncAudStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameAncAudPanelCtrlMessage$Type extends MessageType<GameAncAudPanelCtrlMessage> {
    constructor() {
        super("im.GameAncAudPanelCtrlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "send_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "panel_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameAncAudPanelCtrlMessage>): GameAncAudPanelCtrlMessage {
        const message = { gameId: 0n, sendType: 0n, panelType: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameAncAudPanelCtrlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameAncAudPanelCtrlMessage): GameAncAudPanelCtrlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 send_type */ 3:
                    message.sendType = reader.int64().toBigInt();
                    break;
                case /* int64 panel_type */ 4:
                    message.panelType = reader.int64().toBigInt();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameAncAudPanelCtrlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* int64 send_type = 3; */
        if (message.sendType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.sendType);
        /* int64 panel_type = 4; */
        if (message.panelType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.panelType);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameAncAudPanelCtrlMessage
 */
export const GameAncAudPanelCtrlMessage = new GameAncAudPanelCtrlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameAncAudDataFromAncMessage$Type extends MessageType<GameAncAudDataFromAncMessage> {
    constructor() {
        super("im.GameAncAudDataFromAncMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "send_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameAncAudDataFromAncMessage>): GameAncAudDataFromAncMessage {
        const message = { gameId: 0n, sendType: 0n, data: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameAncAudDataFromAncMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameAncAudDataFromAncMessage): GameAncAudDataFromAncMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 send_type */ 3:
                    message.sendType = reader.int64().toBigInt();
                    break;
                case /* string data */ 4:
                    message.data = reader.string();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameAncAudDataFromAncMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* int64 send_type = 3; */
        if (message.sendType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.sendType);
        /* string data = 4; */
        if (message.data !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.data);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameAncAudDataFromAncMessage
 */
export const GameAncAudDataFromAncMessage = new GameAncAudDataFromAncMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameAncAudDataFromAudMessage$Type extends MessageType<GameAncAudDataFromAudMessage> {
    constructor() {
        super("im.GameAncAudDataFromAudMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameAncAudDataFromAudMessage>): GameAncAudDataFromAudMessage {
        const message = { gameId: 0n, data: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameAncAudDataFromAudMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameAncAudDataFromAudMessage): GameAncAudDataFromAudMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* string data */ 3:
                    message.data = reader.string();
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameAncAudDataFromAudMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* string data = 3; */
        if (message.data !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.data);
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameAncAudDataFromAudMessage
 */
export const GameAncAudDataFromAudMessage = new GameAncAudDataFromAudMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameDevelopMessage$Type extends MessageType<GameDevelopMessage> {
    constructor() {
        super("im.GameDevelopMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "develop", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameDevelopMessage>): GameDevelopMessage {
        const message = { gameId: 0n, develop: 0, appId: "", sign: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameDevelopMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameDevelopMessage): GameDevelopMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int32 develop */ 3:
                    message.develop = reader.int32();
                    break;
                case /* string app_id */ 4:
                    message.appId = reader.string();
                    break;
                case /* string sign */ 5:
                    message.sign = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameDevelopMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* int32 develop = 3; */
        if (message.develop !== 0)
            writer.tag(3, WireType.Varint).int32(message.develop);
        /* string app_id = 4; */
        if (message.appId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.appId);
        /* string sign = 5; */
        if (message.sign !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.sign);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameDevelopMessage
 */
export const GameDevelopMessage = new GameDevelopMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameGiftMessage$Type extends MessageType<GameGiftMessage> {
    constructor() {
        super("im.GameGiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user", kind: "message", T: () => User },
            { no: 5, name: "to_user", kind: "message", T: () => User },
            { no: 6, name: "normalContent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "monkey_data", kind: "message", T: () => GameGiftMessage_MonkeyData },
            { no: 9, name: "log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<GameGiftMessage>): GameGiftMessage {
        const message = { giftId: 0n, fanTicketCount: 0n, normalContent: "", logId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameGiftMessage): GameGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 gift_id */ 2:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 fan_ticket_count */ 3:
                    message.fanTicketCount = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 4:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.User to_user */ 5:
                    message.toUser = User.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* string normalContent */ 6:
                    message.normalContent = reader.string();
                    break;
                case /* im.GameGiftMessage.MonkeyData monkey_data */ 8:
                    message.monkeyData = GameGiftMessage_MonkeyData.internalBinaryRead(reader, reader.uint32(), options, message.monkeyData);
                    break;
                case /* string log_id */ 9:
                    message.logId = reader.string();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 10:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 gift_id = 2; */
        if (message.giftId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.giftId);
        /* int64 fan_ticket_count = 3; */
        if (message.fanTicketCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fanTicketCount);
        /* data.User user = 4; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.User to_user = 5; */
        if (message.toUser)
            User.internalBinaryWrite(message.toUser, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string normalContent = 6; */
        if (message.normalContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.normalContent);
        /* im.GameGiftMessage.MonkeyData monkey_data = 8; */
        if (message.monkeyData)
            GameGiftMessage_MonkeyData.internalBinaryWrite(message.monkeyData, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string log_id = 9; */
        if (message.logId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.logId);
        /* im.PublicAreaCommon public_area_common = 10; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameGiftMessage
 */
export const GameGiftMessage = new GameGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameGiftMessage_MonkeyData$Type extends MessageType<GameGiftMessage_MonkeyData> {
    constructor() {
        super("im.GameGiftMessage.MonkeyData", [
            { no: 1, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "break_record", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "need_popup", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "popup_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameGiftMessage_MonkeyData>): GameGiftMessage_MonkeyData {
        const message = { score: 0, breakRecord: false, needPopup: false, popupContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameGiftMessage_MonkeyData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameGiftMessage_MonkeyData): GameGiftMessage_MonkeyData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 score */ 1:
                    message.score = reader.int32();
                    break;
                case /* bool break_record */ 2:
                    message.breakRecord = reader.bool();
                    break;
                case /* bool need_popup */ 3:
                    message.needPopup = reader.bool();
                    break;
                case /* string popup_content */ 4:
                    message.popupContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameGiftMessage_MonkeyData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 score = 1; */
        if (message.score !== 0)
            writer.tag(1, WireType.Varint).int32(message.score);
        /* bool break_record = 2; */
        if (message.breakRecord !== false)
            writer.tag(2, WireType.Varint).bool(message.breakRecord);
        /* bool need_popup = 3; */
        if (message.needPopup !== false)
            writer.tag(3, WireType.Varint).bool(message.needPopup);
        /* string popup_content = 4; */
        if (message.popupContent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.popupContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameGiftMessage.MonkeyData
 */
export const GameGiftMessage_MonkeyData = new GameGiftMessage_MonkeyData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameGiftStatusMessage$Type extends MessageType<GameGiftStatusMessage> {
    constructor() {
        super("im.GameGiftStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameGiftStatusMessage>): GameGiftStatusMessage {
        const message = { gameId: 0n, status: 0, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameGiftStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameGiftStatusMessage): GameGiftStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameGiftStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameGiftStatusMessage
 */
export const GameGiftStatusMessage = new GameGiftStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameStatusMessage$Type extends MessageType<GameStatusMessage> {
    constructor() {
        super("im.GameStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "gameID", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "config_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameStatusMessage>): GameStatusMessage {
        const message = { gameID: 0n, status: 0, configExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameStatusMessage): GameStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 gameID */ 2:
                    message.gameID = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string config_extra */ 4:
                    message.configExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 gameID = 2; */
        if (message.gameID !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameID);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string config_extra = 4; */
        if (message.configExtra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.configExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameStatusMessage
 */
export const GameStatusMessage = new GameStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInviteMessage$Type extends MessageType<GameInviteMessage> {
    constructor() {
        super("im.GameInviteMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "invite_item", kind: "message", T: () => GameInvite },
            { no: 3, name: "invitation_switch", kind: "message", T: () => InvitationSwitch },
            { no: 4, name: "config_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameInviteMessage>): GameInviteMessage {
        const message = { configExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameInviteMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInviteMessage): GameInviteMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.GameInvite invite_item */ 2:
                    message.inviteItem = GameInvite.internalBinaryRead(reader, reader.uint32(), options, message.inviteItem);
                    break;
                case /* data.InvitationSwitch invitation_switch */ 3:
                    message.invitationSwitch = InvitationSwitch.internalBinaryRead(reader, reader.uint32(), options, message.invitationSwitch);
                    break;
                case /* string config_extra */ 4:
                    message.configExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInviteMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.GameInvite invite_item = 2; */
        if (message.inviteItem)
            GameInvite.internalBinaryWrite(message.inviteItem, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.InvitationSwitch invitation_switch = 3; */
        if (message.invitationSwitch)
            InvitationSwitch.internalBinaryWrite(message.invitationSwitch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string config_extra = 4; */
        if (message.configExtra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.configExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameInviteMessage
 */
export const GameInviteMessage = new GameInviteMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameInviteReplyMessage$Type extends MessageType<GameInviteReplyMessage> {
    constructor() {
        super("im.GameInviteReplyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "reply", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameInviteReplyMessage>): GameInviteReplyMessage {
        const message = { reply: 0, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameInviteReplyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInviteReplyMessage): GameInviteReplyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 reply */ 2:
                    message.reply = reader.int32();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInviteReplyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 reply = 2; */
        if (message.reply !== 0)
            writer.tag(2, WireType.Varint).int32(message.reply);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameInviteReplyMessage
 */
export const GameInviteReplyMessage = new GameInviteReplyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamePVPMessage$Type extends MessageType<GamePVPMessage> {
    constructor() {
        super("im.GamePVPMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GamePVPMessage>): GamePVPMessage {
        const message = { gameId: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GamePVPMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamePVPMessage): GamePVPMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamePVPMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GamePVPMessage
 */
export const GamePVPMessage = new GamePVPMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameStatusUpdateMessage$Type extends MessageType<GameStatusUpdateMessage> {
    constructor() {
        super("im.GameStatusUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "game_kind", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "round_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "event_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "present_msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "config_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "play_kind", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "switch_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GameStatusUpdateMessage>): GameStatusUpdateMessage {
        const message = { anchorId: 0n, roomId: 0n, gameKind: 0, gameId: 0n, roundId: 0n, eventTime: 0, presentMsgType: 0, configExtra: "", playKind: 0n, switchId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameStatusUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameStatusUpdateMessage): GameStatusUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 anchor_id */ 2:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 3:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int32 game_kind */ 4:
                    message.gameKind = reader.int32();
                    break;
                case /* int64 game_id */ 5:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 round_id */ 6:
                    message.roundId = reader.int64().toBigInt();
                    break;
                case /* int32 event_time */ 7:
                    message.eventTime = reader.int32();
                    break;
                case /* int32 present_msg_type */ 8:
                    message.presentMsgType = reader.int32();
                    break;
                case /* string config_extra */ 9:
                    message.configExtra = reader.string();
                    break;
                case /* int64 play_kind */ 10:
                    message.playKind = reader.int64().toBigInt();
                    break;
                case /* int64 switch_id */ 11:
                    message.switchId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameStatusUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 anchor_id = 2; */
        if (message.anchorId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.anchorId);
        /* int64 room_id = 3; */
        if (message.roomId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.roomId);
        /* int32 game_kind = 4; */
        if (message.gameKind !== 0)
            writer.tag(4, WireType.Varint).int32(message.gameKind);
        /* int64 game_id = 5; */
        if (message.gameId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.gameId);
        /* int64 round_id = 6; */
        if (message.roundId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.roundId);
        /* int32 event_time = 7; */
        if (message.eventTime !== 0)
            writer.tag(7, WireType.Varint).int32(message.eventTime);
        /* int32 present_msg_type = 8; */
        if (message.presentMsgType !== 0)
            writer.tag(8, WireType.Varint).int32(message.presentMsgType);
        /* string config_extra = 9; */
        if (message.configExtra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.configExtra);
        /* int64 play_kind = 10; */
        if (message.playKind !== 0n)
            writer.tag(10, WireType.Varint).int64(message.playKind);
        /* int64 switch_id = 11; */
        if (message.switchId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.switchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameStatusUpdateMessage
 */
export const GameStatusUpdateMessage = new GameStatusUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCPAnchorPromoteInfoMessage$Type extends MessageType<GameCPAnchorPromoteInfoMessage> {
    constructor() {
        super("im.GameCPAnchorPromoteInfoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SimpleGameInfo }
        ]);
    }
    create(value?: PartialMessage<GameCPAnchorPromoteInfoMessage>): GameCPAnchorPromoteInfoMessage {
        const message = { gameInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCPAnchorPromoteInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCPAnchorPromoteInfoMessage): GameCPAnchorPromoteInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.SimpleGameInfo game_info */ 2:
                    message.gameInfo.push(SimpleGameInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCPAnchorPromoteInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.SimpleGameInfo game_info = 2; */
        for (let i = 0; i < message.gameInfo.length; i++)
            SimpleGameInfo.internalBinaryWrite(message.gameInfo[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameCPAnchorPromoteInfoMessage
 */
export const GameCPAnchorPromoteInfoMessage = new GameCPAnchorPromoteInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimpleGameInfo$Type extends MessageType<SimpleGameInfo> {
    constructor() {
        super("im.SimpleGameInfo", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "biz_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "biz_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "biz_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "biz_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "game_attr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "component_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "is_introduce", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SimpleGameInfo>): SimpleGameInfo {
        const message = { gameId: "", stage: 0, bizType: 0, bizId: "", bizMode: "", bizExtra: "", gameAttr: "", componentExtra: "", isIntroduce: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimpleGameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleGameInfo): SimpleGameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* int32 stage */ 2:
                    message.stage = reader.int32();
                    break;
                case /* int32 biz_type */ 3:
                    message.bizType = reader.int32();
                    break;
                case /* string biz_id */ 4:
                    message.bizId = reader.string();
                    break;
                case /* string biz_mode */ 5:
                    message.bizMode = reader.string();
                    break;
                case /* string biz_extra */ 6:
                    message.bizExtra = reader.string();
                    break;
                case /* string game_attr */ 7:
                    message.gameAttr = reader.string();
                    break;
                case /* string component_extra */ 8:
                    message.componentExtra = reader.string();
                    break;
                case /* bool is_introduce */ 9:
                    message.isIntroduce = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimpleGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* int32 stage = 2; */
        if (message.stage !== 0)
            writer.tag(2, WireType.Varint).int32(message.stage);
        /* int32 biz_type = 3; */
        if (message.bizType !== 0)
            writer.tag(3, WireType.Varint).int32(message.bizType);
        /* string biz_id = 4; */
        if (message.bizId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bizId);
        /* string biz_mode = 5; */
        if (message.bizMode !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bizMode);
        /* string biz_extra = 6; */
        if (message.bizExtra !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.bizExtra);
        /* string game_attr = 7; */
        if (message.gameAttr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.gameAttr);
        /* string component_extra = 8; */
        if (message.componentExtra !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.componentExtra);
        /* bool is_introduce = 9; */
        if (message.isIntroduce !== false)
            writer.tag(9, WireType.Varint).bool(message.isIntroduce);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SimpleGameInfo
 */
export const SimpleGameInfo = new SimpleGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCPBaseMessage$Type extends MessageType<GameCPBaseMessage> {
    constructor() {
        super("im.GameCPBaseMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "show_info", kind: "message", T: () => GameCPShowMessage }
        ]);
    }
    create(value?: PartialMessage<GameCPBaseMessage>): GameCPBaseMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCPBaseMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCPBaseMessage): GameCPBaseMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.GameCPShowMessage show_info */ 2:
                    message.showInfo = GameCPShowMessage.internalBinaryRead(reader, reader.uint32(), options, message.showInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCPBaseMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.GameCPShowMessage show_info = 2; */
        if (message.showInfo)
            GameCPShowMessage.internalBinaryWrite(message.showInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameCPBaseMessage
 */
export const GameCPBaseMessage = new GameCPBaseMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCPShowMessage$Type extends MessageType<GameCPShowMessage> {
    constructor() {
        super("im.GameCPShowMessage", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "introduce_download_info", kind: "message", T: () => Text },
            { no: 3, name: "game_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "game_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "game_download_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "game_trace_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "game_tag_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "game_background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "introduce_time_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "introduce_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "introduce_stop_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "introduce_stop_message", kind: "message", T: () => Text },
            { no: 13, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "audit_result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "ios_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "download_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "android_privacy_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "android_authorization_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "ios_privacy_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "ios_authorization_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "android_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "ios_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "active_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "download_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "is_show_animate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "animate_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 28, name: "animate_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 29, name: "anti_hijack_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "anti_hijack_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "ios_sale_point", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "is_forbid_jump_ios_app", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 33, name: "has_platform_gift", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 44, name: "open_game_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "prop_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 46, name: "prop_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 47, name: "prop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 48, name: "market_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 49, name: "selling_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 50, name: "prop_sku_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 51, name: "reserve_item", kind: "message", T: () => ReserveItem },
            { no: 52, name: "prop_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 53, name: "game_access_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 54, name: "is_prop_exp_game", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 55, name: "component_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 56, name: "biz_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 57, name: "install_user_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 58, name: "android_sale_point", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 59, name: "mini_game_meta", kind: "message", T: () => MiniGameMeta },
            { no: 60, name: "support_platforms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 61, name: "mini_play_meta", kind: "message", T: () => MiniPlayMeta },
            { no: 62, name: "play_introduce", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 63, name: "small_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 64, name: "game_introduction_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 65, name: "game_icon", kind: "message", T: () => GameImageBundler }
        ]);
    }
    create(value?: PartialMessage<GameCPShowMessage>): GameCPShowMessage {
        const message = { type: 0, gameImage: "", gameName: "", gameDownloadUrl: "", gameTraceInfo: "", gameTagNames: [], gameBackgroundColor: "", introduceTimeLimit: 0, introduceStartTime: 0n, introduceStopType: 0, gameId: "", auditResult: false, iosAppId: "", companyName: "", downloadExtra: "", androidPrivacyUrl: "", androidAuthorizationUrl: "", iosPrivacyUrl: "", iosAuthorizationUrl: "", androidVersion: "", iosVersion: "", activeLink: "", downloadCount: 0n, isShowAnimate: false, animateStartTime: 0n, animateDuration: 0n, antiHijackContent: "", antiHijackImage: "", iosSalePoint: "", isForbidJumpIosApp: false, hasPlatformGift: false, openGameUrl: "", propIcon: "", propName: "", propId: "", marketPrice: 0n, sellingPrice: 0n, propSkuId: 0n, propType: 0n, gameAccessType: 0n, isPropExpGame: false, componentIds: [], bizType: 0, installUserCount: 0n, androidSalePoint: "", supportPlatforms: 0n, playIntroduce: "", smallIcon: "", gameIntroductionUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCPShowMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCPShowMessage): GameCPShowMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* data.Text introduce_download_info */ 2:
                    message.introduceDownloadInfo = Text.internalBinaryRead(reader, reader.uint32(), options, message.introduceDownloadInfo);
                    break;
                case /* string game_image */ 3:
                    message.gameImage = reader.string();
                    break;
                case /* string game_name */ 4:
                    message.gameName = reader.string();
                    break;
                case /* string game_download_url */ 5:
                    message.gameDownloadUrl = reader.string();
                    break;
                case /* string game_trace_info */ 6:
                    message.gameTraceInfo = reader.string();
                    break;
                case /* repeated string game_tag_names */ 7:
                    message.gameTagNames.push(reader.string());
                    break;
                case /* string game_background_color */ 8:
                    message.gameBackgroundColor = reader.string();
                    break;
                case /* int32 introduce_time_limit */ 9:
                    message.introduceTimeLimit = reader.int32();
                    break;
                case /* int64 introduce_start_time */ 10:
                    message.introduceStartTime = reader.int64().toBigInt();
                    break;
                case /* int32 introduce_stop_type */ 11:
                    message.introduceStopType = reader.int32();
                    break;
                case /* data.Text introduce_stop_message */ 12:
                    message.introduceStopMessage = Text.internalBinaryRead(reader, reader.uint32(), options, message.introduceStopMessage);
                    break;
                case /* string game_id */ 13:
                    message.gameId = reader.string();
                    break;
                case /* bool audit_result */ 14:
                    message.auditResult = reader.bool();
                    break;
                case /* string ios_app_id */ 15:
                    message.iosAppId = reader.string();
                    break;
                case /* string company_name */ 16:
                    message.companyName = reader.string();
                    break;
                case /* string download_extra */ 17:
                    message.downloadExtra = reader.string();
                    break;
                case /* string android_privacy_url */ 18:
                    message.androidPrivacyUrl = reader.string();
                    break;
                case /* string android_authorization_url */ 19:
                    message.androidAuthorizationUrl = reader.string();
                    break;
                case /* string ios_privacy_url */ 20:
                    message.iosPrivacyUrl = reader.string();
                    break;
                case /* string ios_authorization_url */ 21:
                    message.iosAuthorizationUrl = reader.string();
                    break;
                case /* string android_version */ 22:
                    message.androidVersion = reader.string();
                    break;
                case /* string ios_version */ 23:
                    message.iosVersion = reader.string();
                    break;
                case /* string active_link */ 24:
                    message.activeLink = reader.string();
                    break;
                case /* int64 download_count */ 25:
                    message.downloadCount = reader.int64().toBigInt();
                    break;
                case /* bool is_show_animate */ 26:
                    message.isShowAnimate = reader.bool();
                    break;
                case /* int64 animate_start_time */ 27:
                    message.animateStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 animate_duration */ 28:
                    message.animateDuration = reader.int64().toBigInt();
                    break;
                case /* string anti_hijack_content */ 29:
                    message.antiHijackContent = reader.string();
                    break;
                case /* string anti_hijack_image */ 30:
                    message.antiHijackImage = reader.string();
                    break;
                case /* string ios_sale_point */ 31:
                    message.iosSalePoint = reader.string();
                    break;
                case /* bool is_forbid_jump_ios_app */ 32:
                    message.isForbidJumpIosApp = reader.bool();
                    break;
                case /* bool has_platform_gift */ 33:
                    message.hasPlatformGift = reader.bool();
                    break;
                case /* string open_game_url */ 44:
                    message.openGameUrl = reader.string();
                    break;
                case /* string prop_icon */ 45:
                    message.propIcon = reader.string();
                    break;
                case /* string prop_name */ 46:
                    message.propName = reader.string();
                    break;
                case /* string prop_id */ 47:
                    message.propId = reader.string();
                    break;
                case /* int64 market_price */ 48:
                    message.marketPrice = reader.int64().toBigInt();
                    break;
                case /* int64 selling_price */ 49:
                    message.sellingPrice = reader.int64().toBigInt();
                    break;
                case /* int64 prop_sku_id */ 50:
                    message.propSkuId = reader.int64().toBigInt();
                    break;
                case /* im.ReserveItem reserve_item */ 51:
                    message.reserveItem = ReserveItem.internalBinaryRead(reader, reader.uint32(), options, message.reserveItem);
                    break;
                case /* int64 prop_type */ 52:
                    message.propType = reader.int64().toBigInt();
                    break;
                case /* int64 game_access_type */ 53:
                    message.gameAccessType = reader.int64().toBigInt();
                    break;
                case /* bool is_prop_exp_game */ 54:
                    message.isPropExpGame = reader.bool();
                    break;
                case /* repeated string component_ids */ 55:
                    message.componentIds.push(reader.string());
                    break;
                case /* int32 biz_type */ 56:
                    message.bizType = reader.int32();
                    break;
                case /* int64 install_user_count */ 57:
                    message.installUserCount = reader.int64().toBigInt();
                    break;
                case /* string android_sale_point */ 58:
                    message.androidSalePoint = reader.string();
                    break;
                case /* im.MiniGameMeta mini_game_meta */ 59:
                    message.miniGameMeta = MiniGameMeta.internalBinaryRead(reader, reader.uint32(), options, message.miniGameMeta);
                    break;
                case /* int64 support_platforms */ 60:
                    message.supportPlatforms = reader.int64().toBigInt();
                    break;
                case /* im.MiniPlayMeta mini_play_meta */ 61:
                    message.miniPlayMeta = MiniPlayMeta.internalBinaryRead(reader, reader.uint32(), options, message.miniPlayMeta);
                    break;
                case /* string play_introduce */ 62:
                    message.playIntroduce = reader.string();
                    break;
                case /* string small_icon */ 63:
                    message.smallIcon = reader.string();
                    break;
                case /* string game_introduction_url */ 64:
                    message.gameIntroductionUrl = reader.string();
                    break;
                case /* data.GameImageBundler game_icon */ 65:
                    message.gameIcon = GameImageBundler.internalBinaryRead(reader, reader.uint32(), options, message.gameIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCPShowMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* data.Text introduce_download_info = 2; */
        if (message.introduceDownloadInfo)
            Text.internalBinaryWrite(message.introduceDownloadInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string game_image = 3; */
        if (message.gameImage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gameImage);
        /* string game_name = 4; */
        if (message.gameName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.gameName);
        /* string game_download_url = 5; */
        if (message.gameDownloadUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.gameDownloadUrl);
        /* string game_trace_info = 6; */
        if (message.gameTraceInfo !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.gameTraceInfo);
        /* repeated string game_tag_names = 7; */
        for (let i = 0; i < message.gameTagNames.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.gameTagNames[i]);
        /* string game_background_color = 8; */
        if (message.gameBackgroundColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.gameBackgroundColor);
        /* int32 introduce_time_limit = 9; */
        if (message.introduceTimeLimit !== 0)
            writer.tag(9, WireType.Varint).int32(message.introduceTimeLimit);
        /* int64 introduce_start_time = 10; */
        if (message.introduceStartTime !== 0n)
            writer.tag(10, WireType.Varint).int64(message.introduceStartTime);
        /* int32 introduce_stop_type = 11; */
        if (message.introduceStopType !== 0)
            writer.tag(11, WireType.Varint).int32(message.introduceStopType);
        /* data.Text introduce_stop_message = 12; */
        if (message.introduceStopMessage)
            Text.internalBinaryWrite(message.introduceStopMessage, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string game_id = 13; */
        if (message.gameId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.gameId);
        /* bool audit_result = 14; */
        if (message.auditResult !== false)
            writer.tag(14, WireType.Varint).bool(message.auditResult);
        /* string ios_app_id = 15; */
        if (message.iosAppId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.iosAppId);
        /* string company_name = 16; */
        if (message.companyName !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.companyName);
        /* string download_extra = 17; */
        if (message.downloadExtra !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.downloadExtra);
        /* string android_privacy_url = 18; */
        if (message.androidPrivacyUrl !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.androidPrivacyUrl);
        /* string android_authorization_url = 19; */
        if (message.androidAuthorizationUrl !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.androidAuthorizationUrl);
        /* string ios_privacy_url = 20; */
        if (message.iosPrivacyUrl !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.iosPrivacyUrl);
        /* string ios_authorization_url = 21; */
        if (message.iosAuthorizationUrl !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.iosAuthorizationUrl);
        /* string android_version = 22; */
        if (message.androidVersion !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.androidVersion);
        /* string ios_version = 23; */
        if (message.iosVersion !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.iosVersion);
        /* string active_link = 24; */
        if (message.activeLink !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.activeLink);
        /* int64 download_count = 25; */
        if (message.downloadCount !== 0n)
            writer.tag(25, WireType.Varint).int64(message.downloadCount);
        /* bool is_show_animate = 26; */
        if (message.isShowAnimate !== false)
            writer.tag(26, WireType.Varint).bool(message.isShowAnimate);
        /* int64 animate_start_time = 27; */
        if (message.animateStartTime !== 0n)
            writer.tag(27, WireType.Varint).int64(message.animateStartTime);
        /* int64 animate_duration = 28; */
        if (message.animateDuration !== 0n)
            writer.tag(28, WireType.Varint).int64(message.animateDuration);
        /* string anti_hijack_content = 29; */
        if (message.antiHijackContent !== "")
            writer.tag(29, WireType.LengthDelimited).string(message.antiHijackContent);
        /* string anti_hijack_image = 30; */
        if (message.antiHijackImage !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.antiHijackImage);
        /* string ios_sale_point = 31; */
        if (message.iosSalePoint !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.iosSalePoint);
        /* bool is_forbid_jump_ios_app = 32; */
        if (message.isForbidJumpIosApp !== false)
            writer.tag(32, WireType.Varint).bool(message.isForbidJumpIosApp);
        /* bool has_platform_gift = 33; */
        if (message.hasPlatformGift !== false)
            writer.tag(33, WireType.Varint).bool(message.hasPlatformGift);
        /* string open_game_url = 44; */
        if (message.openGameUrl !== "")
            writer.tag(44, WireType.LengthDelimited).string(message.openGameUrl);
        /* string prop_icon = 45; */
        if (message.propIcon !== "")
            writer.tag(45, WireType.LengthDelimited).string(message.propIcon);
        /* string prop_name = 46; */
        if (message.propName !== "")
            writer.tag(46, WireType.LengthDelimited).string(message.propName);
        /* string prop_id = 47; */
        if (message.propId !== "")
            writer.tag(47, WireType.LengthDelimited).string(message.propId);
        /* int64 market_price = 48; */
        if (message.marketPrice !== 0n)
            writer.tag(48, WireType.Varint).int64(message.marketPrice);
        /* int64 selling_price = 49; */
        if (message.sellingPrice !== 0n)
            writer.tag(49, WireType.Varint).int64(message.sellingPrice);
        /* int64 prop_sku_id = 50; */
        if (message.propSkuId !== 0n)
            writer.tag(50, WireType.Varint).int64(message.propSkuId);
        /* im.ReserveItem reserve_item = 51; */
        if (message.reserveItem)
            ReserveItem.internalBinaryWrite(message.reserveItem, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* int64 prop_type = 52; */
        if (message.propType !== 0n)
            writer.tag(52, WireType.Varint).int64(message.propType);
        /* int64 game_access_type = 53; */
        if (message.gameAccessType !== 0n)
            writer.tag(53, WireType.Varint).int64(message.gameAccessType);
        /* bool is_prop_exp_game = 54; */
        if (message.isPropExpGame !== false)
            writer.tag(54, WireType.Varint).bool(message.isPropExpGame);
        /* repeated string component_ids = 55; */
        for (let i = 0; i < message.componentIds.length; i++)
            writer.tag(55, WireType.LengthDelimited).string(message.componentIds[i]);
        /* int32 biz_type = 56; */
        if (message.bizType !== 0)
            writer.tag(56, WireType.Varint).int32(message.bizType);
        /* int64 install_user_count = 57; */
        if (message.installUserCount !== 0n)
            writer.tag(57, WireType.Varint).int64(message.installUserCount);
        /* string android_sale_point = 58; */
        if (message.androidSalePoint !== "")
            writer.tag(58, WireType.LengthDelimited).string(message.androidSalePoint);
        /* im.MiniGameMeta mini_game_meta = 59; */
        if (message.miniGameMeta)
            MiniGameMeta.internalBinaryWrite(message.miniGameMeta, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* int64 support_platforms = 60; */
        if (message.supportPlatforms !== 0n)
            writer.tag(60, WireType.Varint).int64(message.supportPlatforms);
        /* im.MiniPlayMeta mini_play_meta = 61; */
        if (message.miniPlayMeta)
            MiniPlayMeta.internalBinaryWrite(message.miniPlayMeta, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* string play_introduce = 62; */
        if (message.playIntroduce !== "")
            writer.tag(62, WireType.LengthDelimited).string(message.playIntroduce);
        /* string small_icon = 63; */
        if (message.smallIcon !== "")
            writer.tag(63, WireType.LengthDelimited).string(message.smallIcon);
        /* string game_introduction_url = 64; */
        if (message.gameIntroductionUrl !== "")
            writer.tag(64, WireType.LengthDelimited).string(message.gameIntroductionUrl);
        /* data.GameImageBundler game_icon = 65; */
        if (message.gameIcon)
            GameImageBundler.internalBinaryWrite(message.gameIcon, writer.tag(65, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameCPShowMessage
 */
export const GameCPShowMessage = new GameCPShowMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MiniGameMeta$Type extends MessageType<MiniGameMeta> {
    constructor() {
        super("im.MiniGameMeta", [
            { no: 1, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MiniGameMeta>): MiniGameMeta {
        const message = { schema: "", version: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MiniGameMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MiniGameMeta): MiniGameMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema */ 1:
                    message.schema = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MiniGameMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema = 1; */
        if (message.schema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schema);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MiniGameMeta
 */
export const MiniGameMeta = new MiniGameMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MiniPlayMeta$Type extends MessageType<MiniPlayMeta> {
    constructor() {
        super("im.MiniPlayMeta", [
            { no: 1, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "support_live_scene", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "game_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "developer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MiniPlayMeta>): MiniPlayMeta {
        const message = { schema: "", gameName: "", icon: "", gameId: "", appId: "", supportLiveScene: [], version: "", gameType: 0, developer: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MiniPlayMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MiniPlayMeta): MiniPlayMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema */ 1:
                    message.schema = reader.string();
                    break;
                case /* string game_name */ 2:
                    message.gameName = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string game_id */ 4:
                    message.gameId = reader.string();
                    break;
                case /* string app_id */ 5:
                    message.appId = reader.string();
                    break;
                case /* repeated int64 support_live_scene */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.supportLiveScene.push(reader.int64().toBigInt());
                    else
                        message.supportLiveScene.push(reader.int64().toBigInt());
                    break;
                case /* string version */ 7:
                    message.version = reader.string();
                    break;
                case /* int32 game_type */ 8:
                    message.gameType = reader.int32();
                    break;
                case /* string developer */ 9:
                    message.developer = reader.string();
                    break;
                case /* string extra */ 10:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MiniPlayMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema = 1; */
        if (message.schema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schema);
        /* string game_name = 2; */
        if (message.gameName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameName);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string game_id = 4; */
        if (message.gameId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.gameId);
        /* string app_id = 5; */
        if (message.appId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.appId);
        /* repeated int64 support_live_scene = 6; */
        if (message.supportLiveScene.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.supportLiveScene.length; i++)
                writer.int64(message.supportLiveScene[i]);
            writer.join();
        }
        /* string version = 7; */
        if (message.version !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.version);
        /* int32 game_type = 8; */
        if (message.gameType !== 0)
            writer.tag(8, WireType.Varint).int32(message.gameType);
        /* string developer = 9; */
        if (message.developer !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.developer);
        /* string extra = 10; */
        if (message.extra !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MiniPlayMeta
 */
export const MiniPlayMeta = new MiniPlayMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveItem$Type extends MessageType<ReserveItem> {
    constructor() {
        super("im.ReserveItem", [
            { no: 1, name: "reserve_today_num", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reserve_total_num", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reserve_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReserveItem>): ReserveItem {
        const message = { reserveTodayNum: "", reserveTotalNum: "", reserveStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReserveItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReserveItem): ReserveItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reserve_today_num */ 1:
                    message.reserveTodayNum = reader.string();
                    break;
                case /* string reserve_total_num */ 2:
                    message.reserveTotalNum = reader.string();
                    break;
                case /* int32 reserve_status */ 3:
                    message.reserveStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReserveItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reserve_today_num = 1; */
        if (message.reserveTodayNum !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reserveTodayNum);
        /* string reserve_total_num = 2; */
        if (message.reserveTotalNum !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reserveTotalNum);
        /* int32 reserve_status = 3; */
        if (message.reserveStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.reserveStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ReserveItem
 */
export const ReserveItem = new ReserveItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCPUserDownloadMessage$Type extends MessageType<GameCPUserDownloadMessage> {
    constructor() {
        super("im.GameCPUserDownloadMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_download_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_download_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "download_game_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameCPUserDownloadMessage>): GameCPUserDownloadMessage {
        const message = { userNickName: "", userDownloadCount: 0n, userDownloadContent: "", downloadGameName: "", type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCPUserDownloadMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCPUserDownloadMessage): GameCPUserDownloadMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string user_nick_name */ 2:
                    message.userNickName = reader.string();
                    break;
                case /* int64 user_download_count */ 3:
                    message.userDownloadCount = reader.int64().toBigInt();
                    break;
                case /* string user_download_content */ 4:
                    message.userDownloadContent = reader.string();
                    break;
                case /* string download_game_name */ 5:
                    message.downloadGameName = reader.string();
                    break;
                case /* int32 type */ 6:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCPUserDownloadMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string user_nick_name = 2; */
        if (message.userNickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userNickName);
        /* int64 user_download_count = 3; */
        if (message.userDownloadCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userDownloadCount);
        /* string user_download_content = 4; */
        if (message.userDownloadContent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userDownloadContent);
        /* string download_game_name = 5; */
        if (message.downloadGameName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.downloadGameName);
        /* int32 type = 6; */
        if (message.type !== 0)
            writer.tag(6, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameCPUserDownloadMessage
 */
export const GameCPUserDownloadMessage = new GameCPUserDownloadMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCPAnchorReminderMessage$Type extends MessageType<GameCPAnchorReminderMessage> {
    constructor() {
        super("im.GameCPAnchorReminderMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "game_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "game_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameCPAnchorReminderMessage>): GameCPAnchorReminderMessage {
        const message = { type: 0, gameId: "", title: "", gameName: "", gameIconUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCPAnchorReminderMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCPAnchorReminderMessage): GameCPAnchorReminderMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string game_id */ 3:
                    message.gameId = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string game_name */ 5:
                    message.gameName = reader.string();
                    break;
                case /* string game_icon_url */ 6:
                    message.gameIconUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCPAnchorReminderMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string game_id = 3; */
        if (message.gameId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gameId);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string game_name = 5; */
        if (message.gameName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.gameName);
        /* string game_icon_url = 6; */
        if (message.gameIconUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.gameIconUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameCPAnchorReminderMessage
 */
export const GameCPAnchorReminderMessage = new GameCPAnchorReminderMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCPUserRoomMetaMessage$Type extends MessageType<GameCPUserRoomMetaMessage> {
    constructor() {
        super("im.GameCPUserRoomMetaMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "oper", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_introduce_card_status", kind: "message", T: () => UserIntroduceCardStatus },
            { no: 4, name: "user_gift_status", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserGiftStatus }
        ]);
    }
    create(value?: PartialMessage<GameCPUserRoomMetaMessage>): GameCPUserRoomMetaMessage {
        const message = { oper: 0n, userGiftStatus: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCPUserRoomMetaMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCPUserRoomMetaMessage): GameCPUserRoomMetaMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 oper */ 2:
                    message.oper = reader.int64().toBigInt();
                    break;
                case /* im.UserIntroduceCardStatus user_introduce_card_status */ 3:
                    message.userIntroduceCardStatus = UserIntroduceCardStatus.internalBinaryRead(reader, reader.uint32(), options, message.userIntroduceCardStatus);
                    break;
                case /* repeated im.UserGiftStatus user_gift_status */ 4:
                    message.userGiftStatus.push(UserGiftStatus.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCPUserRoomMetaMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 oper = 2; */
        if (message.oper !== 0n)
            writer.tag(2, WireType.Varint).int64(message.oper);
        /* im.UserIntroduceCardStatus user_introduce_card_status = 3; */
        if (message.userIntroduceCardStatus)
            UserIntroduceCardStatus.internalBinaryWrite(message.userIntroduceCardStatus, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.UserGiftStatus user_gift_status = 4; */
        for (let i = 0; i < message.userGiftStatus.length; i++)
            UserGiftStatus.internalBinaryWrite(message.userGiftStatus[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameCPUserRoomMetaMessage
 */
export const GameCPUserRoomMetaMessage = new GameCPUserRoomMetaMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserIntroduceCardStatus$Type extends MessageType<UserIntroduceCardStatus> {
    constructor() {
        super("im.UserIntroduceCardStatus", [
            { no: 1, name: "is_show_card", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "introduce_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "timer_span", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "timer_loop_cnt", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UserIntroduceCardStatus>): UserIntroduceCardStatus {
        const message = { isShowCard: false, introduceDuration: 0n, timerSpan: 0n, timerLoopCnt: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserIntroduceCardStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserIntroduceCardStatus): UserIntroduceCardStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_show_card */ 1:
                    message.isShowCard = reader.bool();
                    break;
                case /* int64 introduce_duration */ 2:
                    message.introduceDuration = reader.int64().toBigInt();
                    break;
                case /* int64 timer_span */ 3:
                    message.timerSpan = reader.int64().toBigInt();
                    break;
                case /* int64 timer_loop_cnt */ 4:
                    message.timerLoopCnt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserIntroduceCardStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_show_card = 1; */
        if (message.isShowCard !== false)
            writer.tag(1, WireType.Varint).bool(message.isShowCard);
        /* int64 introduce_duration = 2; */
        if (message.introduceDuration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.introduceDuration);
        /* int64 timer_span = 3; */
        if (message.timerSpan !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timerSpan);
        /* int64 timer_loop_cnt = 4; */
        if (message.timerLoopCnt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.timerLoopCnt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserIntroduceCardStatus
 */
export const UserIntroduceCardStatus = new UserIntroduceCardStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserGiftStatus$Type extends MessageType<UserGiftStatus> {
    constructor() {
        super("im.UserGiftStatus", [
            { no: 1, name: "play_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "focus_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "login_days", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserGiftStatus>): UserGiftStatus {
        const message = { playId: "", gameId: "", hint: "", title: "", focusIndex: 0, loginDays: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserGiftStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserGiftStatus): UserGiftStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string play_id */ 1:
                    message.playId = reader.string();
                    break;
                case /* string game_id */ 2:
                    message.gameId = reader.string();
                    break;
                case /* string hint */ 3:
                    message.hint = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* int32 focus_index */ 5:
                    message.focusIndex = reader.int32();
                    break;
                case /* int32 login_days */ 6:
                    message.loginDays = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserGiftStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string play_id = 1; */
        if (message.playId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.playId);
        /* string game_id = 2; */
        if (message.gameId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameId);
        /* string hint = 3; */
        if (message.hint !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.hint);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* int32 focus_index = 5; */
        if (message.focusIndex !== 0)
            writer.tag(5, WireType.Varint).int32(message.focusIndex);
        /* int32 login_days = 6; */
        if (message.loginDays !== 0)
            writer.tag(6, WireType.Varint).int32(message.loginDays);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserGiftStatus
 */
export const UserGiftStatus = new UserGiftStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloudGamingPodMessage$Type extends MessageType<CloudGamingPodMessage> {
    constructor() {
        super("im.CloudGamingPodMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "remain_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CloudGamingPodMessage>): CloudGamingPodMessage {
        const message = { msgType: 0, text: "", remainSeconds: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CloudGamingPodMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CloudGamingPodMessage): CloudGamingPodMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* int64 remain_seconds */ 4:
                    message.remainSeconds = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CloudGamingPodMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* int64 remain_seconds = 4; */
        if (message.remainSeconds !== 0n)
            writer.tag(4, WireType.Varint).int64(message.remainSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CloudGamingPodMessage
 */
export const CloudGamingPodMessage = new CloudGamingPodMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamePlayTeamStatusMessage$Type extends MessageType<GamePlayTeamStatusMessage> {
    constructor() {
        super("im.GamePlayTeamStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "member_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayTeamMember },
            { no: 3, name: "total_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "play_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GamePlayTeamStatusMessage>): GamePlayTeamStatusMessage {
        const message = { memberList: [], totalNum: 0, playId: 0n, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GamePlayTeamStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamePlayTeamStatusMessage): GamePlayTeamStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.PlayTeamMember member_list */ 2:
                    message.memberList.push(PlayTeamMember.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 total_num */ 3:
                    message.totalNum = reader.int32();
                    break;
                case /* int64 play_id */ 4:
                    message.playId = reader.int64().toBigInt();
                    break;
                case /* string toast */ 5:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamePlayTeamStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.PlayTeamMember member_list = 2; */
        for (let i = 0; i < message.memberList.length; i++)
            PlayTeamMember.internalBinaryWrite(message.memberList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 total_num = 3; */
        if (message.totalNum !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalNum);
        /* int64 play_id = 4; */
        if (message.playId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.playId);
        /* string toast = 5; */
        if (message.toast !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GamePlayTeamStatusMessage
 */
export const GamePlayTeamStatusMessage = new GamePlayTeamStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamePlayInviteMessage$Type extends MessageType<GamePlayInviteMessage> {
    constructor() {
        super("im.GamePlayInviteMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "play_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GamePlayInviteMessage>): GamePlayInviteMessage {
        const message = { schema: "", playId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GamePlayInviteMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamePlayInviteMessage): GamePlayInviteMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* int64 play_id */ 3:
                    message.playId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamePlayInviteMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* int64 play_id = 3; */
        if (message.playId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GamePlayInviteMessage
 */
export const GamePlayInviteMessage = new GamePlayInviteMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GamePlayStatusMessage$Type extends MessageType<GamePlayStatusMessage> {
    constructor() {
        super("im.GamePlayStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "play_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "audit_deny_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GamePlayStatusMessage>): GamePlayStatusMessage {
        const message = { status: 0, playId: 0n, auditDenyToast: "", toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GamePlayStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GamePlayStatusMessage): GamePlayStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int64 play_id */ 3:
                    message.playId = reader.int64().toBigInt();
                    break;
                case /* string audit_deny_toast */ 4:
                    message.auditDenyToast = reader.string();
                    break;
                case /* string toast */ 5:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GamePlayStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int64 play_id = 3; */
        if (message.playId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.playId);
        /* string audit_deny_toast = 4; */
        if (message.auditDenyToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.auditDenyToast);
        /* string toast = 5; */
        if (message.toast !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GamePlayStatusMessage
 */
export const GamePlayStatusMessage = new GamePlayStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LynxParam$Type extends MessageType<LynxParam> {
    constructor() {
        super("im.LynxParam", [
            { no: 1, name: "style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "main_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expire_day_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sub_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LynxParam>): LynxParam {
        const message = { style: 0, mainText: "", expireDayText: "", subText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LynxParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LynxParam): LynxParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 style */ 1:
                    message.style = reader.int32();
                    break;
                case /* string main_text */ 2:
                    message.mainText = reader.string();
                    break;
                case /* string expire_day_text */ 3:
                    message.expireDayText = reader.string();
                    break;
                case /* string sub_text */ 4:
                    message.subText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LynxParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 style = 1; */
        if (message.style !== 0)
            writer.tag(1, WireType.Varint).int32(message.style);
        /* string main_text = 2; */
        if (message.mainText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mainText);
        /* string expire_day_text = 3; */
        if (message.expireDayText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.expireDayText);
        /* string sub_text = 4; */
        if (message.subText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LynxParam
 */
export const LynxParam = new LynxParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftConsumeRemindMessage$Type extends MessageType<GiftConsumeRemindMessage> {
    constructor() {
        super("im.GiftConsumeRemindMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "lynx_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lynx_param", kind: "message", T: () => LynxParam },
            { no: 4, name: "remind_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiftConsumeRemindMessage>): GiftConsumeRemindMessage {
        const message = { lynxSchema: "", remindType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftConsumeRemindMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftConsumeRemindMessage): GiftConsumeRemindMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string lynx_schema */ 2:
                    message.lynxSchema = reader.string();
                    break;
                case /* im.LynxParam lynx_param */ 3:
                    message.lynxParam = LynxParam.internalBinaryRead(reader, reader.uint32(), options, message.lynxParam);
                    break;
                case /* int32 remind_type */ 4:
                    message.remindType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftConsumeRemindMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string lynx_schema = 2; */
        if (message.lynxSchema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lynxSchema);
        /* im.LynxParam lynx_param = 3; */
        if (message.lynxParam)
            LynxParam.internalBinaryWrite(message.lynxParam, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 remind_type = 4; */
        if (message.remindType !== 0)
            writer.tag(4, WireType.Varint).int32(message.remindType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftConsumeRemindMessage
 */
export const GiftConsumeRemindMessage = new GiftConsumeRemindMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftCycleReleaseMessage$Type extends MessageType<GiftCycleReleaseMessage> {
    constructor() {
        super("im.GiftCycleReleaseMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "release_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "gift_icon", kind: "message", T: () => GiftCycleReleaseMessage_GiftIcon },
            { no: 4, name: "gift_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GiftCycleReleaseMessage>): GiftCycleReleaseMessage {
        const message = { releaseId: 0n, giftIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftCycleReleaseMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftCycleReleaseMessage): GiftCycleReleaseMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 release_id */ 2:
                    message.releaseId = reader.int64().toBigInt();
                    break;
                case /* im.GiftCycleReleaseMessage.GiftIcon gift_icon */ 3:
                    message.giftIcon = GiftCycleReleaseMessage_GiftIcon.internalBinaryRead(reader, reader.uint32(), options, message.giftIcon);
                    break;
                case /* repeated int64 gift_ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.giftIds.push(reader.int64().toBigInt());
                    else
                        message.giftIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftCycleReleaseMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 release_id = 2; */
        if (message.releaseId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.releaseId);
        /* im.GiftCycleReleaseMessage.GiftIcon gift_icon = 3; */
        if (message.giftIcon)
            GiftCycleReleaseMessage_GiftIcon.internalBinaryWrite(message.giftIcon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 gift_ids = 4; */
        if (message.giftIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.giftIds.length; i++)
                writer.int64(message.giftIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftCycleReleaseMessage
 */
export const GiftCycleReleaseMessage = new GiftCycleReleaseMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftCycleReleaseMessage_GiftIcon$Type extends MessageType<GiftCycleReleaseMessage_GiftIcon> {
    constructor() {
        super("im.GiftCycleReleaseMessage.GiftIcon", [
            { no: 1, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<GiftCycleReleaseMessage_GiftIcon>): GiftCycleReleaseMessage_GiftIcon {
        const message = { giftId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftCycleReleaseMessage_GiftIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftCycleReleaseMessage_GiftIcon): GiftCycleReleaseMessage_GiftIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 gift_id */ 1:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* data.Image icon */ 2:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftCycleReleaseMessage_GiftIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 gift_id = 1; */
        if (message.giftId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.giftId);
        /* data.Image icon = 2; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftCycleReleaseMessage.GiftIcon
 */
export const GiftCycleReleaseMessage_GiftIcon = new GiftCycleReleaseMessage_GiftIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExhibitionTopLeftMessage$Type extends MessageType<ExhibitionTopLeftMessage> {
    constructor() {
        super("im.ExhibitionTopLeftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "display_text", kind: "message", T: () => Text },
            { no: 3, name: "top_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gift_icon", kind: "message", T: () => Image },
            { no: 5, name: "exhibition_entrance_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExhibitionTopLeftMessage>): ExhibitionTopLeftMessage {
        const message = { topTitle: "", exhibitionEntranceUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExhibitionTopLeftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExhibitionTopLeftMessage): ExhibitionTopLeftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Text display_text */ 2:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* string top_title */ 3:
                    message.topTitle = reader.string();
                    break;
                case /* data.Image gift_icon */ 4:
                    message.giftIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.giftIcon);
                    break;
                case /* string exhibition_entrance_url */ 5:
                    message.exhibitionEntranceUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExhibitionTopLeftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text display_text = 2; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string top_title = 3; */
        if (message.topTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.topTitle);
        /* data.Image gift_icon = 4; */
        if (message.giftIcon)
            Image.internalBinaryWrite(message.giftIcon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string exhibition_entrance_url = 5; */
        if (message.exhibitionEntranceUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.exhibitionEntranceUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ExhibitionTopLeftMessage
 */
export const ExhibitionTopLeftMessage = new ExhibitionTopLeftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExhibitionChatMessage$Type extends MessageType<ExhibitionChatMessage> {
    constructor() {
        super("im.ExhibitionChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "display_text", kind: "message", T: () => Text },
            { no: 3, name: "unlighted_item", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "lighted_item", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "biz_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "app_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<ExhibitionChatMessage>): ExhibitionChatMessage {
        const message = { unlightedItem: 0, lightedItem: 0, bizType: 0, appId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExhibitionChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExhibitionChatMessage): ExhibitionChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Text display_text */ 2:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* int32 unlighted_item */ 3:
                    message.unlightedItem = reader.int32();
                    break;
                case /* int32 lighted_item */ 4:
                    message.lightedItem = reader.int32();
                    break;
                case /* int32 biz_type */ 5:
                    message.bizType = reader.int32();
                    break;
                case /* int32 app_id */ 6:
                    message.appId = reader.int32();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 7:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExhibitionChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text display_text = 2; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 unlighted_item = 3; */
        if (message.unlightedItem !== 0)
            writer.tag(3, WireType.Varint).int32(message.unlightedItem);
        /* int32 lighted_item = 4; */
        if (message.lightedItem !== 0)
            writer.tag(4, WireType.Varint).int32(message.lightedItem);
        /* int32 biz_type = 5; */
        if (message.bizType !== 0)
            writer.tag(5, WireType.Varint).int32(message.bizType);
        /* int32 app_id = 6; */
        if (message.appId !== 0)
            writer.tag(6, WireType.Varint).int32(message.appId);
        /* im.PublicAreaCommon public_area_common = 7; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ExhibitionChatMessage
 */
export const ExhibitionChatMessage = new ExhibitionChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftIconFlashMessage$Type extends MessageType<GiftIconFlashMessage> {
    constructor() {
        super("im.GiftIconFlashMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "recommend_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "not_flash_after", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GiftIconFlashMessage>): GiftIconFlashMessage {
        const message = { userIds: [], recommendTime: 0n, notFlashAfter: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftIconFlashMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftIconFlashMessage): GiftIconFlashMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated int64 user_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int64().toBigInt());
                    else
                        message.userIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 recommend_time */ 3:
                    message.recommendTime = reader.int64().toBigInt();
                    break;
                case /* int64 not_flash_after */ 4:
                    message.notFlashAfter = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftIconFlashMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 user_ids = 2; */
        if (message.userIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int64(message.userIds[i]);
            writer.join();
        }
        /* int64 recommend_time = 3; */
        if (message.recommendTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.recommendTime);
        /* int64 not_flash_after = 4; */
        if (message.notFlashAfter !== 0n)
            writer.tag(4, WireType.Varint).int64(message.notFlashAfter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftIconFlashMessage
 */
export const GiftIconFlashMessage = new GiftIconFlashMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftUpdateMessage$Type extends MessageType<GiftUpdateMessage> {
    constructor() {
        super("im.GiftUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "update_gift_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "update_asset_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GiftUpdateMessage>): GiftUpdateMessage {
        const message = { updateType: 0, updateGiftIds: [], updateAssetIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftUpdateMessage): GiftUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 update_type */ 2:
                    message.updateType = reader.int32();
                    break;
                case /* repeated int64 update_gift_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.updateGiftIds.push(reader.int64().toBigInt());
                    else
                        message.updateGiftIds.push(reader.int64().toBigInt());
                    break;
                case /* repeated int64 update_asset_ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.updateAssetIds.push(reader.int64().toBigInt());
                    else
                        message.updateAssetIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 update_type = 2; */
        if (message.updateType !== 0)
            writer.tag(2, WireType.Varint).int32(message.updateType);
        /* repeated int64 update_gift_ids = 3; */
        if (message.updateGiftIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.updateGiftIds.length; i++)
                writer.int64(message.updateGiftIds[i]);
            writer.join();
        }
        /* repeated int64 update_asset_ids = 4; */
        if (message.updateAssetIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.updateAssetIds.length; i++)
                writer.int64(message.updateAssetIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftUpdateMessage
 */
export const GiftUpdateMessage = new GiftUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftVoteMessage$Type extends MessageType<GiftVoteMessage> {
    constructor() {
        super("im.GiftVoteMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "vote_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GiftVoteResult },
            { no: 5, name: "finish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "current_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "vote_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GiftVoteMessage>): GiftVoteMessage {
        const message = { msgType: 0n, voteId: 0n, results: [], finishTime: 0n, currentTime: 0n, voteType: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftVoteMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftVoteMessage): GiftVoteMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 msg_type */ 2:
                    message.msgType = reader.int64().toBigInt();
                    break;
                case /* int64 vote_id */ 3:
                    message.voteId = reader.int64().toBigInt();
                    break;
                case /* repeated data.GiftVoteResult results */ 4:
                    message.results.push(GiftVoteResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 finish_time */ 5:
                    message.finishTime = reader.int64().toBigInt();
                    break;
                case /* int64 current_time */ 6:
                    message.currentTime = reader.int64().toBigInt();
                    break;
                case /* int64 vote_type */ 7:
                    message.voteType = reader.int64().toBigInt();
                    break;
                case /* string extra */ 8:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftVoteMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 msg_type = 2; */
        if (message.msgType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgType);
        /* int64 vote_id = 3; */
        if (message.voteId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.voteId);
        /* repeated data.GiftVoteResult results = 4; */
        for (let i = 0; i < message.results.length; i++)
            GiftVoteResult.internalBinaryWrite(message.results[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 finish_time = 5; */
        if (message.finishTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.finishTime);
        /* int64 current_time = 6; */
        if (message.currentTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.currentTime);
        /* int64 vote_type = 7; */
        if (message.voteType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.voteType);
        /* string extra = 8; */
        if (message.extra !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftVoteMessage
 */
export const GiftVoteMessage = new GiftVoteMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftVoteMessage_Result$Type extends MessageType<GiftVoteMessage_Result> {
    constructor() {
        super("im.GiftVoteMessage.Result", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "icon", kind: "message", T: () => Image },
            { no: 4, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GiftVoteMessage_Result>): GiftVoteMessage_Result {
        const message = { text: "", count: 0n, giftId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftVoteMessage_Result>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftVoteMessage_Result): GiftVoteMessage_Result {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* data.Image icon */ 3:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 gift_id */ 4:
                    message.giftId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftVoteMessage_Result, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* data.Image icon = 3; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 gift_id = 4; */
        if (message.giftId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.giftId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftVoteMessage.Result
 */
export const GiftVoteMessage_Result = new GiftVoteMessage_Result$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftMessage$Type extends MessageType<GiftMessage> {
    constructor() {
        super("im.GiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "group_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "repeat_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "combo_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user", kind: "message", T: () => User },
            { no: 8, name: "to_user", kind: "message", T: () => User },
            { no: 9, name: "repeat_end", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "text_effect", kind: "message", T: () => GiftMessage_TextEffect },
            { no: 11, name: "group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "income_taskgifts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "room_fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "priority", kind: "message", T: () => GiftIMPriority },
            { no: 15, name: "gift", kind: "message", T: () => GiftStruct },
            { no: 16, name: "log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "send_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 19, name: "tray_display_text", kind: "message", T: () => Text },
            { no: 20, name: "banned_display_effects", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "tray_info", kind: "message", T: () => GiftTrayInfo },
            { no: 24, name: "asset_effect_mix_info", kind: "message", T: () => AssetEffectMixInfo },
            { no: 25, name: "display_for_self", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 26, name: "interact_gift_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "diy_item_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "min_asset_set", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 29, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "client_gift_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "anchor_gift", kind: "message", T: () => AnchorGiftData },
            { no: 32, name: "to_user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "send_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 34, name: "force_display_effects", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 35, name: "trace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 36, name: "effect_display_ts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 37, name: "send_together", kind: "message", T: () => SendTogether },
            { no: 38, name: "extra_effect", kind: "message", T: () => ExtraEffect },
            { no: 39, name: "room_hot_info", kind: "message", T: () => RoomHotInfo },
            { no: 40, name: "GiftPlayParam", kind: "scalar", jsonName: "GiftPlayParam", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "multi_send_effect_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiftMessage>): GiftMessage {
        const message = { giftId: 0n, fanTicketCount: 0n, groupCount: 0n, repeatCount: 0n, comboCount: 0n, repeatEnd: 0, groupId: 0n, incomeTaskgifts: 0n, roomFanTicketCount: 0n, logId: "", sendType: 0n, bannedDisplayEffects: 0n, displayForSelf: false, interactGiftInfo: "", diyItemInfo: "", minAssetSet: [], totalCount: 0n, clientGiftSource: 0, toUserIds: [], sendTime: 0n, forceDisplayEffects: 0n, traceId: "", effectDisplayTs: 0n, giftPlayParam: "", multiSendEffectLevel: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftMessage): GiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 gift_id */ 2:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* int64 fan_ticket_count */ 3:
                    message.fanTicketCount = reader.int64().toBigInt();
                    break;
                case /* int64 group_count */ 4:
                    message.groupCount = reader.int64().toBigInt();
                    break;
                case /* int64 repeat_count */ 5:
                    message.repeatCount = reader.int64().toBigInt();
                    break;
                case /* int64 combo_count */ 6:
                    message.comboCount = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 7:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.User to_user */ 8:
                    message.toUser = User.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* int32 repeat_end */ 9:
                    message.repeatEnd = reader.int32();
                    break;
                case /* im.GiftMessage.TextEffect text_effect */ 10:
                    message.textEffect = GiftMessage_TextEffect.internalBinaryRead(reader, reader.uint32(), options, message.textEffect);
                    break;
                case /* int64 group_id */ 11:
                    message.groupId = reader.int64().toBigInt();
                    break;
                case /* int64 income_taskgifts */ 12:
                    message.incomeTaskgifts = reader.int64().toBigInt();
                    break;
                case /* int64 room_fan_ticket_count */ 13:
                    message.roomFanTicketCount = reader.int64().toBigInt();
                    break;
                case /* data.GiftIMPriority priority */ 14:
                    message.priority = GiftIMPriority.internalBinaryRead(reader, reader.uint32(), options, message.priority);
                    break;
                case /* data.GiftStruct gift */ 15:
                    message.gift = GiftStruct.internalBinaryRead(reader, reader.uint32(), options, message.gift);
                    break;
                case /* string log_id */ 16:
                    message.logId = reader.string();
                    break;
                case /* int64 send_type */ 17:
                    message.sendType = reader.int64().toBigInt();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 18:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* data.Text tray_display_text */ 19:
                    message.trayDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.trayDisplayText);
                    break;
                case /* int64 banned_display_effects */ 20:
                    message.bannedDisplayEffects = reader.int64().toBigInt();
                    break;
                case /* data.GiftTrayInfo tray_info */ 21:
                    message.trayInfo = GiftTrayInfo.internalBinaryRead(reader, reader.uint32(), options, message.trayInfo);
                    break;
                case /* data.AssetEffectMixInfo asset_effect_mix_info */ 24:
                    message.assetEffectMixInfo = AssetEffectMixInfo.internalBinaryRead(reader, reader.uint32(), options, message.assetEffectMixInfo);
                    break;
                case /* bool display_for_self */ 25:
                    message.displayForSelf = reader.bool();
                    break;
                case /* string interact_gift_info */ 26:
                    message.interactGiftInfo = reader.string();
                    break;
                case /* string diy_item_info */ 27:
                    message.diyItemInfo = reader.string();
                    break;
                case /* repeated int64 min_asset_set */ 28:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.minAssetSet.push(reader.int64().toBigInt());
                    else
                        message.minAssetSet.push(reader.int64().toBigInt());
                    break;
                case /* int64 total_count */ 29:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                case /* int32 client_gift_source */ 30:
                    message.clientGiftSource = reader.int32();
                    break;
                case /* data.AnchorGiftData anchor_gift */ 31:
                    message.anchorGift = AnchorGiftData.internalBinaryRead(reader, reader.uint32(), options, message.anchorGift);
                    break;
                case /* repeated int64 to_user_ids */ 32:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.toUserIds.push(reader.int64().toBigInt());
                    else
                        message.toUserIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 send_time */ 33:
                    message.sendTime = reader.int64().toBigInt();
                    break;
                case /* int64 force_display_effects */ 34:
                    message.forceDisplayEffects = reader.int64().toBigInt();
                    break;
                case /* string trace_id */ 35:
                    message.traceId = reader.string();
                    break;
                case /* int64 effect_display_ts */ 36:
                    message.effectDisplayTs = reader.int64().toBigInt();
                    break;
                case /* data.SendTogether send_together */ 37:
                    message.sendTogether = SendTogether.internalBinaryRead(reader, reader.uint32(), options, message.sendTogether);
                    break;
                case /* data.ExtraEffect extra_effect */ 38:
                    message.extraEffect = ExtraEffect.internalBinaryRead(reader, reader.uint32(), options, message.extraEffect);
                    break;
                case /* im.RoomHotInfo room_hot_info */ 39:
                    message.roomHotInfo = RoomHotInfo.internalBinaryRead(reader, reader.uint32(), options, message.roomHotInfo);
                    break;
                case /* string GiftPlayParam = 40 [json_name = "GiftPlayParam"];*/ 40:
                    message.giftPlayParam = reader.string();
                    break;
                case /* int32 multi_send_effect_level */ 41:
                    message.multiSendEffectLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 gift_id = 2; */
        if (message.giftId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.giftId);
        /* int64 fan_ticket_count = 3; */
        if (message.fanTicketCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fanTicketCount);
        /* int64 group_count = 4; */
        if (message.groupCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.groupCount);
        /* int64 repeat_count = 5; */
        if (message.repeatCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.repeatCount);
        /* int64 combo_count = 6; */
        if (message.comboCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.comboCount);
        /* data.User user = 7; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.User to_user = 8; */
        if (message.toUser)
            User.internalBinaryWrite(message.toUser, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 repeat_end = 9; */
        if (message.repeatEnd !== 0)
            writer.tag(9, WireType.Varint).int32(message.repeatEnd);
        /* im.GiftMessage.TextEffect text_effect = 10; */
        if (message.textEffect)
            GiftMessage_TextEffect.internalBinaryWrite(message.textEffect, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int64 group_id = 11; */
        if (message.groupId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.groupId);
        /* int64 income_taskgifts = 12; */
        if (message.incomeTaskgifts !== 0n)
            writer.tag(12, WireType.Varint).int64(message.incomeTaskgifts);
        /* int64 room_fan_ticket_count = 13; */
        if (message.roomFanTicketCount !== 0n)
            writer.tag(13, WireType.Varint).int64(message.roomFanTicketCount);
        /* data.GiftIMPriority priority = 14; */
        if (message.priority)
            GiftIMPriority.internalBinaryWrite(message.priority, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* data.GiftStruct gift = 15; */
        if (message.gift)
            GiftStruct.internalBinaryWrite(message.gift, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string log_id = 16; */
        if (message.logId !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.logId);
        /* int64 send_type = 17; */
        if (message.sendType !== 0n)
            writer.tag(17, WireType.Varint).int64(message.sendType);
        /* im.PublicAreaCommon public_area_common = 18; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* data.Text tray_display_text = 19; */
        if (message.trayDisplayText)
            Text.internalBinaryWrite(message.trayDisplayText, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* int64 banned_display_effects = 20; */
        if (message.bannedDisplayEffects !== 0n)
            writer.tag(20, WireType.Varint).int64(message.bannedDisplayEffects);
        /* data.GiftTrayInfo tray_info = 21; */
        if (message.trayInfo)
            GiftTrayInfo.internalBinaryWrite(message.trayInfo, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* data.AssetEffectMixInfo asset_effect_mix_info = 24; */
        if (message.assetEffectMixInfo)
            AssetEffectMixInfo.internalBinaryWrite(message.assetEffectMixInfo, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* bool display_for_self = 25; */
        if (message.displayForSelf !== false)
            writer.tag(25, WireType.Varint).bool(message.displayForSelf);
        /* string interact_gift_info = 26; */
        if (message.interactGiftInfo !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.interactGiftInfo);
        /* string diy_item_info = 27; */
        if (message.diyItemInfo !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.diyItemInfo);
        /* repeated int64 min_asset_set = 28; */
        if (message.minAssetSet.length) {
            writer.tag(28, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.minAssetSet.length; i++)
                writer.int64(message.minAssetSet[i]);
            writer.join();
        }
        /* int64 total_count = 29; */
        if (message.totalCount !== 0n)
            writer.tag(29, WireType.Varint).int64(message.totalCount);
        /* int32 client_gift_source = 30; */
        if (message.clientGiftSource !== 0)
            writer.tag(30, WireType.Varint).int32(message.clientGiftSource);
        /* data.AnchorGiftData anchor_gift = 31; */
        if (message.anchorGift)
            AnchorGiftData.internalBinaryWrite(message.anchorGift, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 to_user_ids = 32; */
        if (message.toUserIds.length) {
            writer.tag(32, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.toUserIds.length; i++)
                writer.int64(message.toUserIds[i]);
            writer.join();
        }
        /* int64 send_time = 33; */
        if (message.sendTime !== 0n)
            writer.tag(33, WireType.Varint).int64(message.sendTime);
        /* int64 force_display_effects = 34; */
        if (message.forceDisplayEffects !== 0n)
            writer.tag(34, WireType.Varint).int64(message.forceDisplayEffects);
        /* string trace_id = 35; */
        if (message.traceId !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.traceId);
        /* int64 effect_display_ts = 36; */
        if (message.effectDisplayTs !== 0n)
            writer.tag(36, WireType.Varint).int64(message.effectDisplayTs);
        /* data.SendTogether send_together = 37; */
        if (message.sendTogether)
            SendTogether.internalBinaryWrite(message.sendTogether, writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* data.ExtraEffect extra_effect = 38; */
        if (message.extraEffect)
            ExtraEffect.internalBinaryWrite(message.extraEffect, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* im.RoomHotInfo room_hot_info = 39; */
        if (message.roomHotInfo)
            RoomHotInfo.internalBinaryWrite(message.roomHotInfo, writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* string GiftPlayParam = 40 [json_name = "GiftPlayParam"]; */
        if (message.giftPlayParam !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.giftPlayParam);
        /* int32 multi_send_effect_level = 41; */
        if (message.multiSendEffectLevel !== 0)
            writer.tag(41, WireType.Varint).int32(message.multiSendEffectLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftMessage
 */
export const GiftMessage = new GiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftMessage_TextEffect$Type extends MessageType<GiftMessage_TextEffect> {
    constructor() {
        super("im.GiftMessage.TextEffect", [
            { no: 1, name: "portrait", kind: "message", T: () => GiftMessage_TextEffect_Detail },
            { no: 2, name: "landscape", kind: "message", T: () => GiftMessage_TextEffect_Detail }
        ]);
    }
    create(value?: PartialMessage<GiftMessage_TextEffect>): GiftMessage_TextEffect {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftMessage_TextEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftMessage_TextEffect): GiftMessage_TextEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.GiftMessage.TextEffect.Detail portrait */ 1:
                    message.portrait = GiftMessage_TextEffect_Detail.internalBinaryRead(reader, reader.uint32(), options, message.portrait);
                    break;
                case /* im.GiftMessage.TextEffect.Detail landscape */ 2:
                    message.landscape = GiftMessage_TextEffect_Detail.internalBinaryRead(reader, reader.uint32(), options, message.landscape);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftMessage_TextEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.GiftMessage.TextEffect.Detail portrait = 1; */
        if (message.portrait)
            GiftMessage_TextEffect_Detail.internalBinaryWrite(message.portrait, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.GiftMessage.TextEffect.Detail landscape = 2; */
        if (message.landscape)
            GiftMessage_TextEffect_Detail.internalBinaryWrite(message.landscape, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftMessage.TextEffect
 */
export const GiftMessage_TextEffect = new GiftMessage_TextEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiftMessage_TextEffect_Detail$Type extends MessageType<GiftMessage_TextEffect_Detail> {
    constructor() {
        super("im.GiftMessage.TextEffect.Detail", [
            { no: 1, name: "text", kind: "message", T: () => Text },
            { no: 2, name: "text_font_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "background", kind: "message", T: () => Image },
            { no: 4, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "shadow_dx", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "shadow_dy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "shadow_radius", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "shadow_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "stroke_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "stroke_width", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiftMessage_TextEffect_Detail>): GiftMessage_TextEffect_Detail {
        const message = { textFontSize: 0, start: 0, duration: 0, x: 0, y: 0, width: 0, height: 0, shadowDx: 0, shadowDy: 0, shadowRadius: 0, shadowColor: "", strokeColor: "", strokeWidth: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiftMessage_TextEffect_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiftMessage_TextEffect_Detail): GiftMessage_TextEffect_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text text */ 1:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* int32 text_font_size */ 2:
                    message.textFontSize = reader.int32();
                    break;
                case /* data.Image background */ 3:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int32 start */ 4:
                    message.start = reader.int32();
                    break;
                case /* int32 duration */ 5:
                    message.duration = reader.int32();
                    break;
                case /* int32 x */ 6:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 7:
                    message.y = reader.int32();
                    break;
                case /* int32 width */ 8:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 9:
                    message.height = reader.int32();
                    break;
                case /* int32 shadow_dx */ 10:
                    message.shadowDx = reader.int32();
                    break;
                case /* int32 shadow_dy */ 11:
                    message.shadowDy = reader.int32();
                    break;
                case /* int32 shadow_radius */ 12:
                    message.shadowRadius = reader.int32();
                    break;
                case /* string shadow_color */ 13:
                    message.shadowColor = reader.string();
                    break;
                case /* string stroke_color */ 14:
                    message.strokeColor = reader.string();
                    break;
                case /* int32 stroke_width */ 15:
                    message.strokeWidth = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiftMessage_TextEffect_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text text = 1; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 text_font_size = 2; */
        if (message.textFontSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.textFontSize);
        /* data.Image background = 3; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 start = 4; */
        if (message.start !== 0)
            writer.tag(4, WireType.Varint).int32(message.start);
        /* int32 duration = 5; */
        if (message.duration !== 0)
            writer.tag(5, WireType.Varint).int32(message.duration);
        /* int32 x = 6; */
        if (message.x !== 0)
            writer.tag(6, WireType.Varint).int32(message.x);
        /* int32 y = 7; */
        if (message.y !== 0)
            writer.tag(7, WireType.Varint).int32(message.y);
        /* int32 width = 8; */
        if (message.width !== 0)
            writer.tag(8, WireType.Varint).int32(message.width);
        /* int32 height = 9; */
        if (message.height !== 0)
            writer.tag(9, WireType.Varint).int32(message.height);
        /* int32 shadow_dx = 10; */
        if (message.shadowDx !== 0)
            writer.tag(10, WireType.Varint).int32(message.shadowDx);
        /* int32 shadow_dy = 11; */
        if (message.shadowDy !== 0)
            writer.tag(11, WireType.Varint).int32(message.shadowDy);
        /* int32 shadow_radius = 12; */
        if (message.shadowRadius !== 0)
            writer.tag(12, WireType.Varint).int32(message.shadowRadius);
        /* string shadow_color = 13; */
        if (message.shadowColor !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.shadowColor);
        /* string stroke_color = 14; */
        if (message.strokeColor !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.strokeColor);
        /* int32 stroke_width = 15; */
        if (message.strokeWidth !== 0)
            writer.tag(15, WireType.Varint).int32(message.strokeWidth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GiftMessage.TextEffect.Detail
 */
export const GiftMessage_TextEffect_Detail = new GiftMessage_TextEffect_Detail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomHotInfo$Type extends MessageType<RoomHotInfo> {
    constructor() {
        super("im.RoomHotInfo", [
            { no: 1, name: "local_hot_strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "public_area_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "gift_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomHotInfo>): RoomHotInfo {
        const message = { localHotStrategy: 0, publicAreaLevel: 0, giftLevel: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomHotInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomHotInfo): RoomHotInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 local_hot_strategy */ 1:
                    message.localHotStrategy = reader.int32();
                    break;
                case /* int32 public_area_level */ 2:
                    message.publicAreaLevel = reader.int32();
                    break;
                case /* int32 gift_level */ 3:
                    message.giftLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomHotInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 local_hot_strategy = 1; */
        if (message.localHotStrategy !== 0)
            writer.tag(1, WireType.Varint).int32(message.localHotStrategy);
        /* int32 public_area_level = 2; */
        if (message.publicAreaLevel !== 0)
            writer.tag(2, WireType.Varint).int32(message.publicAreaLevel);
        /* int32 gift_level = 3; */
        if (message.giftLevel !== 0)
            writer.tag(3, WireType.Varint).int32(message.giftLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomHotInfo
 */
export const RoomHotInfo = new RoomHotInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BindingGiftMessage$Type extends MessageType<BindingGiftMessage> {
    constructor() {
        super("im.BindingGiftMessage", [
            { no: 1, name: "msg", kind: "message", T: () => GiftMessage },
            { no: 2, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<BindingGiftMessage>): BindingGiftMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BindingGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BindingGiftMessage): BindingGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.GiftMessage msg */ 1:
                    message.msg = GiftMessage.internalBinaryRead(reader, reader.uint32(), options, message.msg);
                    break;
                case /* im.Common common */ 2:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BindingGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.GiftMessage msg = 1; */
        if (message.msg)
            GiftMessage.internalBinaryWrite(message.msg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.Common common = 2; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BindingGiftMessage
 */
export const BindingGiftMessage = new BindingGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GradeBuffAnchorShareMessage$Type extends MessageType<GradeBuffAnchorShareMessage> {
    constructor() {
        super("im.GradeBuffAnchorShareMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "message", T: () => Text },
            { no: 4, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GradeBuffAnchorShareMessage>): GradeBuffAnchorShareMessage {
        const message = { schemeUrl: "", score: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GradeBuffAnchorShareMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GradeBuffAnchorShareMessage): GradeBuffAnchorShareMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string scheme_url */ 2:
                    message.schemeUrl = reader.string();
                    break;
                case /* data.Text content */ 3:
                    message.content = Text.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* int64 score */ 4:
                    message.score = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GradeBuffAnchorShareMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string scheme_url = 2; */
        if (message.schemeUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schemeUrl);
        /* data.Text content = 3; */
        if (message.content)
            Text.internalBinaryWrite(message.content, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 4; */
        if (message.score !== 0n)
            writer.tag(4, WireType.Varint).int64(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GradeBuffAnchorShareMessage
 */
export const GradeBuffAnchorShareMessage = new GradeBuffAnchorShareMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupShowUserUpdateMessage$Type extends MessageType<GroupShowUserUpdateMessage> {
    constructor() {
        super("im.GroupShowUserUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "info", kind: "message", T: () => GroupShowInfo }
        ]);
    }
    create(value?: PartialMessage<GroupShowUserUpdateMessage>): GroupShowUserUpdateMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupShowUserUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupShowUserUpdateMessage): GroupShowUserUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.GroupShowInfo info */ 2:
                    message.info = GroupShowInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupShowUserUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.GroupShowInfo info = 2; */
        if (message.info)
            GroupShowInfo.internalBinaryWrite(message.info, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GroupShowUserUpdateMessage
 */
export const GroupShowUserUpdateMessage = new GroupShowUserUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskMessage$Type extends MessageType<GrowthTaskMessage> {
    constructor() {
        super("im.GrowthTaskMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "task", kind: "message", T: () => GrowthTask },
            { no: 3, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "current_contribution", kind: "message", T: () => GrowthTaskMessage_CurrentContribution },
            { no: 5, name: "contributors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GrowthTaskContributorRank }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskMessage>): GrowthTaskMessage {
        const message = { action: 0, contributors: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskMessage): GrowthTaskMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.GrowthTask task */ 2:
                    message.task = GrowthTask.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                case /* int32 action */ 3:
                    message.action = reader.int32();
                    break;
                case /* im.GrowthTaskMessage.CurrentContribution current_contribution */ 4:
                    message.currentContribution = GrowthTaskMessage_CurrentContribution.internalBinaryRead(reader, reader.uint32(), options, message.currentContribution);
                    break;
                case /* repeated data.GrowthTaskContributorRank contributors */ 5:
                    message.contributors.push(GrowthTaskContributorRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.GrowthTask task = 2; */
        if (message.task)
            GrowthTask.internalBinaryWrite(message.task, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 action = 3; */
        if (message.action !== 0)
            writer.tag(3, WireType.Varint).int32(message.action);
        /* im.GrowthTaskMessage.CurrentContribution current_contribution = 4; */
        if (message.currentContribution)
            GrowthTaskMessage_CurrentContribution.internalBinaryWrite(message.currentContribution, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.GrowthTaskContributorRank contributors = 5; */
        for (let i = 0; i < message.contributors.length; i++)
            GrowthTaskContributorRank.internalBinaryWrite(message.contributors[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GrowthTaskMessage
 */
export const GrowthTaskMessage = new GrowthTaskMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrowthTaskMessage_CurrentContribution$Type extends MessageType<GrowthTaskMessage_CurrentContribution> {
    constructor() {
        super("im.GrowthTaskMessage.CurrentContribution", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GrowthTaskMessage_CurrentContribution>): GrowthTaskMessage_CurrentContribution {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrowthTaskMessage_CurrentContribution>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrowthTaskMessage_CurrentContribution): GrowthTaskMessage_CurrentContribution {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrowthTaskMessage_CurrentContribution, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GrowthTaskMessage.CurrentContribution
 */
export const GrowthTaskMessage_CurrentContribution = new GrowthTaskMessage_CurrentContribution$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleScoreMessage$Type extends MessageType<GuestBattleScoreMessage> {
    constructor() {
        super("im.GuestBattleScoreMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "battle_info", kind: "message", T: () => GuestBattleInfo },
            { no: 3, name: "crown_upgrade", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBattleScoreMessage>): GuestBattleScoreMessage {
        const message = { crownUpgrade: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleScoreMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleScoreMessage): GuestBattleScoreMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.GuestBattleInfo battle_info */ 2:
                    message.battleInfo = GuestBattleInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfo);
                    break;
                case /* bool crown_upgrade */ 3:
                    message.crownUpgrade = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleScoreMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.GuestBattleInfo battle_info = 2; */
        if (message.battleInfo)
            GuestBattleInfo.internalBinaryWrite(message.battleInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool crown_upgrade = 3; */
        if (message.crownUpgrade !== false)
            writer.tag(3, WireType.Varint).bool(message.crownUpgrade);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GuestBattleScoreMessage
 */
export const GuestBattleScoreMessage = new GuestBattleScoreMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleMessage$Type extends MessageType<GuestBattleMessage> {
    constructor() {
        super("im.GuestBattleMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "battle_info", kind: "message", T: () => GuestBattleInfo },
            { no: 4, name: "finish_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 100, name: "update_content", kind: "message", T: () => GuestBattleUpdateContent },
            { no: 101, name: "finish_content", kind: "message", T: () => GuestBattleFinishContent }
        ]);
    }
    create(value?: PartialMessage<GuestBattleMessage>): GuestBattleMessage {
        const message = { msgType: 0n, finishToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleMessage): GuestBattleMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 msg_type */ 2:
                    message.msgType = reader.int64().toBigInt();
                    break;
                case /* data.GuestBattleInfo battle_info */ 3:
                    message.battleInfo = GuestBattleInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfo);
                    break;
                case /* string finish_toast */ 4:
                    message.finishToast = reader.string();
                    break;
                case /* im.GuestBattleUpdateContent update_content */ 100:
                    message.updateContent = GuestBattleUpdateContent.internalBinaryRead(reader, reader.uint32(), options, message.updateContent);
                    break;
                case /* im.GuestBattleFinishContent finish_content */ 101:
                    message.finishContent = GuestBattleFinishContent.internalBinaryRead(reader, reader.uint32(), options, message.finishContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 msg_type = 2; */
        if (message.msgType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgType);
        /* data.GuestBattleInfo battle_info = 3; */
        if (message.battleInfo)
            GuestBattleInfo.internalBinaryWrite(message.battleInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string finish_toast = 4; */
        if (message.finishToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.finishToast);
        /* im.GuestBattleUpdateContent update_content = 100; */
        if (message.updateContent)
            GuestBattleUpdateContent.internalBinaryWrite(message.updateContent, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* im.GuestBattleFinishContent finish_content = 101; */
        if (message.finishContent)
            GuestBattleFinishContent.internalBinaryWrite(message.finishContent, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GuestBattleMessage
 */
export const GuestBattleMessage = new GuestBattleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleUpdateContent$Type extends MessageType<GuestBattleUpdateContent> {
    constructor() {
        super("im.GuestBattleUpdateContent", [
            { no: 1, name: "crown_upgrade", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBattleUpdateContent>): GuestBattleUpdateContent {
        const message = { crownUpgrade: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleUpdateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleUpdateContent): GuestBattleUpdateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool crown_upgrade */ 1:
                    message.crownUpgrade = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleUpdateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool crown_upgrade = 1; */
        if (message.crownUpgrade !== false)
            writer.tag(1, WireType.Varint).bool(message.crownUpgrade);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GuestBattleUpdateContent
 */
export const GuestBattleUpdateContent = new GuestBattleUpdateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleFinishContent$Type extends MessageType<GuestBattleFinishContent> {
    constructor() {
        super("im.GuestBattleFinishContent", [
            { no: 1, name: "reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "finish_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBattleFinishContent>): GuestBattleFinishContent {
        const message = { reason: 0, finishUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleFinishContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleFinishContent): GuestBattleFinishContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* int64 finish_user_id */ 2:
                    message.finishUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleFinishContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 reason = 1; */
        if (message.reason !== 0)
            writer.tag(1, WireType.Varint).int32(message.reason);
        /* int64 finish_user_id = 2; */
        if (message.finishUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.finishUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GuestBattleFinishContent
 */
export const GuestBattleFinishContent = new GuestBattleFinishContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuideMessage$Type extends MessageType<GuideMessage> {
    constructor() {
        super("im.GuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "guide_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GuideMessage>): GuideMessage {
        const message = { guideType: 0n, giftId: 0n, description: "", duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuideMessage): GuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 guide_type */ 2:
                    message.guideType = reader.int64().toBigInt();
                    break;
                case /* int64 gift_id */ 3:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* int64 duration */ 5:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 guide_type = 2; */
        if (message.guideType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.guideType);
        /* int64 gift_id = 3; */
        if (message.giftId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.giftId);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* int64 duration = 5; */
        if (message.duration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GuideMessage
 */
export const GuideMessage = new GuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightCommentPosition$Type extends MessageType<HighlightCommentPosition> {
    constructor() {
        super("im.HighlightCommentPosition", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 3, name: "event_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<HighlightCommentPosition>): HighlightCommentPosition {
        const message = { eventTime: 0n, x: 0, y: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightCommentPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightCommentPosition): HighlightCommentPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 event_time */ 3:
                    message.eventTime = reader.int64().toBigInt();
                    break;
                case /* double x */ 4:
                    message.x = reader.double();
                    break;
                case /* double y */ 5:
                    message.y = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightCommentPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 event_time = 3; */
        if (message.eventTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.eventTime);
        /* double x = 4; */
        if (message.x !== 0)
            writer.tag(4, WireType.Bit64).double(message.x);
        /* double y = 5; */
        if (message.y !== 0)
            writer.tag(5, WireType.Bit64).double(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightCommentPosition
 */
export const HighlightCommentPosition = new HighlightCommentPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightComment$Type extends MessageType<HighlightComment> {
    constructor() {
        super("im.HighlightComment", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "event_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "comment_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "review_result", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "review_comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "user", kind: "message", T: () => User },
            { no: 9, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "msg_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "countdown_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "trigger", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "operator_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "operator_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HighlightComment>): HighlightComment {
        const message = { id: 0n, eventTime: 0n, commentMsgId: 0n, reviewResult: 0, reviewComment: "", content: "", actionType: 0, msgTime: 0n, endTime: 0n, countdownStyle: 0, trigger: 0, operatorId: 0n, operatorNickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightComment): HighlightComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 event_time */ 3:
                    message.eventTime = reader.int64().toBigInt();
                    break;
                case /* int64 comment_msg_id */ 4:
                    message.commentMsgId = reader.int64().toBigInt();
                    break;
                case /* int32 review_result */ 5:
                    message.reviewResult = reader.int32();
                    break;
                case /* string review_comment */ 6:
                    message.reviewComment = reader.string();
                    break;
                case /* string content */ 7:
                    message.content = reader.string();
                    break;
                case /* data.User user */ 8:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int32 action_type */ 9:
                    message.actionType = reader.int32();
                    break;
                case /* int64 msg_time */ 10:
                    message.msgTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 11:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 countdown_style */ 12:
                    message.countdownStyle = reader.int32();
                    break;
                case /* int32 trigger */ 13:
                    message.trigger = reader.int32();
                    break;
                case /* int64 operator_id */ 14:
                    message.operatorId = reader.int64().toBigInt();
                    break;
                case /* string operator_nickname */ 15:
                    message.operatorNickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* int64 event_time = 3; */
        if (message.eventTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.eventTime);
        /* int64 comment_msg_id = 4; */
        if (message.commentMsgId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.commentMsgId);
        /* int32 review_result = 5; */
        if (message.reviewResult !== 0)
            writer.tag(5, WireType.Varint).int32(message.reviewResult);
        /* string review_comment = 6; */
        if (message.reviewComment !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.reviewComment);
        /* string content = 7; */
        if (message.content !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.content);
        /* data.User user = 8; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 action_type = 9; */
        if (message.actionType !== 0)
            writer.tag(9, WireType.Varint).int32(message.actionType);
        /* int64 msg_time = 10; */
        if (message.msgTime !== 0n)
            writer.tag(10, WireType.Varint).int64(message.msgTime);
        /* int64 end_time = 11; */
        if (message.endTime !== 0n)
            writer.tag(11, WireType.Varint).int64(message.endTime);
        /* int32 countdown_style = 12; */
        if (message.countdownStyle !== 0)
            writer.tag(12, WireType.Varint).int32(message.countdownStyle);
        /* int32 trigger = 13; */
        if (message.trigger !== 0)
            writer.tag(13, WireType.Varint).int32(message.trigger);
        /* int64 operator_id = 14; */
        if (message.operatorId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.operatorId);
        /* string operator_nickname = 15; */
        if (message.operatorNickname !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.operatorNickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightComment
 */
export const HighlightComment = new HighlightComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotChatMessage$Type extends MessageType<HotChatMessage> {
    constructor() {
        super("im.HotChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "num", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "show_duration", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "sequence_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "hot_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HotChatMessage>): HotChatMessage {
        const message = { title: "", content: "", num: [], duration: 0n, showDuration: [], sequenceId: 0n, hotList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotChatMessage): HotChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* repeated int64 num */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.num.push(reader.int64().toBigInt());
                    else
                        message.num.push(reader.int64().toBigInt());
                    break;
                case /* int64 duration */ 5:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* repeated int64 show_duration */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.showDuration.push(reader.int64().toBigInt());
                    else
                        message.showDuration.push(reader.int64().toBigInt());
                    break;
                case /* int64 sequence_id */ 7:
                    message.sequenceId = reader.int64().toBigInt();
                    break;
                case /* repeated string hot_list */ 8:
                    message.hotList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* repeated int64 num = 4; */
        if (message.num.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.num.length; i++)
                writer.int64(message.num[i]);
            writer.join();
        }
        /* int64 duration = 5; */
        if (message.duration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.duration);
        /* repeated int64 show_duration = 6; */
        if (message.showDuration.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.showDuration.length; i++)
                writer.int64(message.showDuration[i]);
            writer.join();
        }
        /* int64 sequence_id = 7; */
        if (message.sequenceId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.sequenceId);
        /* repeated string hot_list = 8; */
        for (let i = 0; i < message.hotList.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.hotList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HotChatMessage
 */
export const HotChatMessage = new HotChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotRoomMessage$Type extends MessageType<HotRoomMessage> {
    constructor() {
        super("im.HotRoomMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "info", kind: "message", T: () => HotRoomInfo }
        ]);
    }
    create(value?: PartialMessage<HotRoomMessage>): HotRoomMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotRoomMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotRoomMessage): HotRoomMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.HotRoomInfo info */ 2:
                    message.info = HotRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotRoomMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.HotRoomInfo info = 2; */
        if (message.info)
            HotRoomInfo.internalBinaryWrite(message.info, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HotRoomMessage
 */
export const HotRoomMessage = new HotRoomMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImDeleteMessage$Type extends MessageType<ImDeleteMessage> {
    constructor() {
        super("im.ImDeleteMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "delete_msg_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ImDeleteMessage>): ImDeleteMessage {
        const message = { deleteMsgIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImDeleteMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImDeleteMessage): ImDeleteMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated int64 delete_msg_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.deleteMsgIds.push(reader.int64().toBigInt());
                    else
                        message.deleteMsgIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImDeleteMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 delete_msg_ids = 2; */
        if (message.deleteMsgIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.deleteMsgIds.length; i++)
                writer.int64(message.deleteMsgIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ImDeleteMessage
 */
export const ImDeleteMessage = new ImDeleteMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InRoomBannerRedPoint$Type extends MessageType<InRoomBannerRedPoint> {
    constructor() {
        super("im.InRoomBannerRedPoint", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "banner_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "show_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InRoomBannerRedPoint>): InRoomBannerRedPoint {
        const message = { count: 0n, bannerId: 0n, showType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InRoomBannerRedPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InRoomBannerRedPoint): InRoomBannerRedPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* int64 banner_id */ 3:
                    message.bannerId = reader.int64().toBigInt();
                    break;
                case /* int64 show_type */ 4:
                    message.showType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InRoomBannerRedPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* int64 banner_id = 3; */
        if (message.bannerId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.bannerId);
        /* int64 show_type = 4; */
        if (message.showType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.showType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InRoomBannerRedPoint
 */
export const InRoomBannerRedPoint = new InRoomBannerRedPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InRoomBannerRefreshMessage$Type extends MessageType<InRoomBannerRefreshMessage> {
    constructor() {
        super("im.InRoomBannerRefreshMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "max_delay_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InRoomBannerRefreshMessage>): InRoomBannerRefreshMessage {
        const message = { maxDelaySeconds: 0n, position: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InRoomBannerRefreshMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InRoomBannerRefreshMessage): InRoomBannerRefreshMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 max_delay_seconds */ 2:
                    message.maxDelaySeconds = reader.int64().toBigInt();
                    break;
                case /* int32 position */ 3:
                    message.position = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InRoomBannerRefreshMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 max_delay_seconds = 2; */
        if (message.maxDelaySeconds !== 0n)
            writer.tag(2, WireType.Varint).int64(message.maxDelaySeconds);
        /* int32 position = 3; */
        if (message.position !== 0)
            writer.tag(3, WireType.Varint).int32(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InRoomBannerRefreshMessage
 */
export const InRoomBannerRefreshMessage = new InRoomBannerRefreshMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InRoomBannerMessage$Type extends MessageType<InRoomBannerMessage> {
    constructor() {
        super("im.InRoomBannerMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "container_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "lynx_container_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "container_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "op_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InRoomBannerMessage>): InRoomBannerMessage {
        const message = { extra: "", position: 0, actionType: 0, containerUrl: "", lynxContainerUrl: "", containerType: 0, opType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InRoomBannerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InRoomBannerMessage): InRoomBannerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string extra */ 2:
                    message.extra = reader.string();
                    break;
                case /* int32 position */ 3:
                    message.position = reader.int32();
                    break;
                case /* int32 action_type */ 4:
                    message.actionType = reader.int32();
                    break;
                case /* string container_url */ 5:
                    message.containerUrl = reader.string();
                    break;
                case /* string lynx_container_url */ 6:
                    message.lynxContainerUrl = reader.string();
                    break;
                case /* int32 container_type */ 7:
                    message.containerType = reader.int32();
                    break;
                case /* int32 op_type */ 8:
                    message.opType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InRoomBannerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 2; */
        if (message.extra !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extra);
        /* int32 position = 3; */
        if (message.position !== 0)
            writer.tag(3, WireType.Varint).int32(message.position);
        /* int32 action_type = 4; */
        if (message.actionType !== 0)
            writer.tag(4, WireType.Varint).int32(message.actionType);
        /* string container_url = 5; */
        if (message.containerUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.containerUrl);
        /* string lynx_container_url = 6; */
        if (message.lynxContainerUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.lynxContainerUrl);
        /* int32 container_type = 7; */
        if (message.containerType !== 0)
            writer.tag(7, WireType.Varint).int32(message.containerType);
        /* int32 op_type = 8; */
        if (message.opType !== 0)
            writer.tag(8, WireType.Varint).int32(message.opType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InRoomBannerMessage
 */
export const InRoomBannerMessage = new InRoomBannerMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InRoomBannerEvent$Type extends MessageType<InRoomBannerEvent> {
    constructor() {
        super("im.InRoomBannerEvent", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "data", kind: "message", T: () => BannerData }
        ]);
    }
    create(value?: PartialMessage<InRoomBannerEvent>): InRoomBannerEvent {
        const message = { position: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InRoomBannerEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InRoomBannerEvent): InRoomBannerEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 position */ 2:
                    message.position = reader.int32();
                    break;
                case /* data.BannerData data */ 3:
                    message.data = BannerData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InRoomBannerEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 position = 2; */
        if (message.position !== 0)
            writer.tag(2, WireType.Varint).int32(message.position);
        /* data.BannerData data = 3; */
        if (message.data)
            BannerData.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InRoomBannerEvent
 */
export const InRoomBannerEvent = new InRoomBannerEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenSchemaCommand$Type extends MessageType<OpenSchemaCommand> {
    constructor() {
        super("im.OpenSchemaCommand", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OpenSchemaCommand>): OpenSchemaCommand {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenSchemaCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenSchemaCommand): OpenSchemaCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenSchemaCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OpenSchemaCommand
 */
export const OpenSchemaCommand = new OpenSchemaCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstantCommandMessage$Type extends MessageType<InstantCommandMessage> {
    constructor() {
        super("im.InstantCommandMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "command_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "open_schema_command", kind: "message", T: () => OpenSchemaCommand }
        ]);
    }
    create(value?: PartialMessage<InstantCommandMessage>): InstantCommandMessage {
        const message = { commandType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstantCommandMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstantCommandMessage): InstantCommandMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 command_type */ 2:
                    message.commandType = reader.int32();
                    break;
                case /* im.OpenSchemaCommand open_schema_command */ 11:
                    message.openSchemaCommand = OpenSchemaCommand.internalBinaryRead(reader, reader.uint32(), options, message.openSchemaCommand);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstantCommandMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 command_type = 2; */
        if (message.commandType !== 0)
            writer.tag(2, WireType.Varint).int32(message.commandType);
        /* im.OpenSchemaCommand open_schema_command = 11; */
        if (message.openSchemaCommand)
            OpenSchemaCommand.internalBinaryWrite(message.openSchemaCommand, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InstantCommandMessage
 */
export const InstantCommandMessage = new InstantCommandMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopBoxContent$Type extends MessageType<PopBoxContent> {
    constructor() {
        super("im.PopBoxContent", [
            { no: 1, name: "large_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "icon_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "control_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "count_down_sec", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "button_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PopBoxContent>): PopBoxContent {
        const message = { largeType: 0, iconType: 0, controlType: "", title: "", description: "", url: "", countDownSec: 0, buttonDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopBoxContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopBoxContent): PopBoxContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 large_type */ 1:
                    message.largeType = reader.int32();
                    break;
                case /* int32 icon_type */ 2:
                    message.iconType = reader.int32();
                    break;
                case /* string control_type */ 3:
                    message.controlType = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* string url */ 6:
                    message.url = reader.string();
                    break;
                case /* int32 count_down_sec */ 7:
                    message.countDownSec = reader.int32();
                    break;
                case /* string button_desc */ 8:
                    message.buttonDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopBoxContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 large_type = 1; */
        if (message.largeType !== 0)
            writer.tag(1, WireType.Varint).int32(message.largeType);
        /* int32 icon_type = 2; */
        if (message.iconType !== 0)
            writer.tag(2, WireType.Varint).int32(message.iconType);
        /* string control_type = 3; */
        if (message.controlType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.controlType);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* string url = 6; */
        if (message.url !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.url);
        /* int32 count_down_sec = 7; */
        if (message.countDownSec !== 0)
            writer.tag(7, WireType.Varint).int32(message.countDownSec);
        /* string button_desc = 8; */
        if (message.buttonDesc !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.buttonDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PopBoxContent
 */
export const PopBoxContent = new PopBoxContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientOperation$Type extends MessageType<ClientOperation> {
    constructor() {
        super("im.ClientOperation", [
            { no: 1, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operation_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pop_box_content", kind: "message", T: () => PopBoxContent },
            { no: 4, name: "show_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientOperation>): ClientOperation {
        const message = { appId: "", operationType: 0, showTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientOperation): ClientOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string app_id */ 1:
                    message.appId = reader.string();
                    break;
                case /* int32 operation_type */ 2:
                    message.operationType = reader.int32();
                    break;
                case /* im.PopBoxContent pop_box_content */ 3:
                    message.popBoxContent = PopBoxContent.internalBinaryRead(reader, reader.uint32(), options, message.popBoxContent);
                    break;
                case /* int32 show_time */ 4:
                    message.showTime = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string app_id = 1; */
        if (message.appId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appId);
        /* int32 operation_type = 2; */
        if (message.operationType !== 0)
            writer.tag(2, WireType.Varint).int32(message.operationType);
        /* im.PopBoxContent pop_box_content = 3; */
        if (message.popBoxContent)
            PopBoxContent.internalBinaryWrite(message.popBoxContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 show_time = 4; */
        if (message.showTime !== 0)
            writer.tag(4, WireType.Varint).int32(message.showTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ClientOperation
 */
export const ClientOperation = new ClientOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractControlMessage$Type extends MessageType<InteractControlMessage> {
    constructor() {
        super("im.InteractControlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "time_stamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "anchor_operation", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientOperation },
            { no: 5, name: "audience_operation", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientOperation }
        ]);
    }
    create(value?: PartialMessage<InteractControlMessage>): InteractControlMessage {
        const message = { roomId: "", timeStamp: "", anchorOperation: [], audienceOperation: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractControlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractControlMessage): InteractControlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string room_id */ 2:
                    message.roomId = reader.string();
                    break;
                case /* string time_stamp */ 3:
                    message.timeStamp = reader.string();
                    break;
                case /* repeated im.ClientOperation anchor_operation */ 4:
                    message.anchorOperation.push(ClientOperation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated im.ClientOperation audience_operation */ 5:
                    message.audienceOperation.push(ClientOperation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractControlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string room_id = 2; */
        if (message.roomId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomId);
        /* string time_stamp = 3; */
        if (message.timeStamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timeStamp);
        /* repeated im.ClientOperation anchor_operation = 4; */
        for (let i = 0; i < message.anchorOperation.length; i++)
            ClientOperation.internalBinaryWrite(message.anchorOperation[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.ClientOperation audience_operation = 5; */
        for (let i = 0; i < message.audienceOperation.length; i++)
            ClientOperation.internalBinaryWrite(message.audienceOperation[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractControlMessage
 */
export const InteractControlMessage = new InteractControlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenDevelopMessage$Type extends MessageType<InteractOpenDevelopMessage> {
    constructor() {
        super("im.InteractOpenDevelopMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "develop", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "app_kind", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InteractOpenDevelopMessage>): InteractOpenDevelopMessage {
        const message = { appId: "", develop: 0, sign: "", gameId: 0n, appKind: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenDevelopMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenDevelopMessage): InteractOpenDevelopMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string app_id */ 2:
                    message.appId = reader.string();
                    break;
                case /* int32 develop */ 3:
                    message.develop = reader.int32();
                    break;
                case /* string sign */ 4:
                    message.sign = reader.string();
                    break;
                case /* int64 game_id */ 5:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* int64 app_kind */ 6:
                    message.appKind = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenDevelopMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 2; */
        if (message.appId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appId);
        /* int32 develop = 3; */
        if (message.develop !== 0)
            writer.tag(3, WireType.Varint).int32(message.develop);
        /* string sign = 4; */
        if (message.sign !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sign);
        /* int64 game_id = 5; */
        if (message.gameId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.gameId);
        /* int64 app_kind = 6; */
        if (message.appKind !== 0n)
            writer.tag(6, WireType.Varint).int64(message.appKind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenDevelopMessage
 */
export const InteractOpenDevelopMessage = new InteractOpenDevelopMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionInfoMessage$Type extends MessageType<InteractionInfoMessage> {
    constructor() {
        super("im.InteractionInfoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "like_icon_info", kind: "message", T: () => LikeIconInfo },
            { no: 3, name: "chat_emoji_guide_info", kind: "message", T: () => ChatEmojiGuideInfo },
            { no: 4, name: "chat_image_guide_info", kind: "message", T: () => ChatImageGuideInfo },
            { no: 50, name: "update_info_type", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractionInfoMessage>): InteractionInfoMessage {
        const message = { updateInfoType: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionInfoMessage): InteractionInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.LikeIconInfo like_icon_info */ 2:
                    message.likeIconInfo = LikeIconInfo.internalBinaryRead(reader, reader.uint32(), options, message.likeIconInfo);
                    break;
                case /* data.ChatEmojiGuideInfo chat_emoji_guide_info */ 3:
                    message.chatEmojiGuideInfo = ChatEmojiGuideInfo.internalBinaryRead(reader, reader.uint32(), options, message.chatEmojiGuideInfo);
                    break;
                case /* data.ChatImageGuideInfo chat_image_guide_info */ 4:
                    message.chatImageGuideInfo = ChatImageGuideInfo.internalBinaryRead(reader, reader.uint32(), options, message.chatImageGuideInfo);
                    break;
                case /* repeated int32 update_info_type */ 50:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.updateInfoType.push(reader.int32());
                    else
                        message.updateInfoType.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.LikeIconInfo like_icon_info = 2; */
        if (message.likeIconInfo)
            LikeIconInfo.internalBinaryWrite(message.likeIconInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.ChatEmojiGuideInfo chat_emoji_guide_info = 3; */
        if (message.chatEmojiGuideInfo)
            ChatEmojiGuideInfo.internalBinaryWrite(message.chatEmojiGuideInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.ChatImageGuideInfo chat_image_guide_info = 4; */
        if (message.chatImageGuideInfo)
            ChatImageGuideInfo.internalBinaryWrite(message.chatImageGuideInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 update_info_type = 50; */
        if (message.updateInfoType.length) {
            writer.tag(50, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.updateInfoType.length; i++)
                writer.int32(message.updateInfoType[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractionInfoMessage
 */
export const InteractionInfoMessage = new InteractionInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntercomInviteMessage$Type extends MessageType<IntercomInviteMessage> {
    constructor() {
        super("im.IntercomInviteMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<IntercomInviteMessage>): IntercomInviteMessage {
        const message = { channelId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IntercomInviteMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntercomInviteMessage): IntercomInviteMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 channel_id */ 2:
                    message.channelId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntercomInviteMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 channel_id = 2; */
        if (message.channelId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.IntercomInviteMessage
 */
export const IntercomInviteMessage = new IntercomInviteMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntercomReplyMessage$Type extends MessageType<IntercomReplyMessage> {
    constructor() {
        super("im.IntercomReplyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "reply_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntercomReplyMessage>): IntercomReplyMessage {
        const message = { channelId: 0n, replyStatus: 0n, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IntercomReplyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntercomReplyMessage): IntercomReplyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 channel_id */ 2:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 reply_status */ 3:
                    message.replyStatus = reader.int64().toBigInt();
                    break;
                case /* string toast */ 4:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntercomReplyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 channel_id = 2; */
        if (message.channelId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.channelId);
        /* int64 reply_status = 3; */
        if (message.replyStatus !== 0n)
            writer.tag(3, WireType.Varint).int64(message.replyStatus);
        /* string toast = 4; */
        if (message.toast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.IntercomReplyMessage
 */
export const IntercomReplyMessage = new IntercomReplyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemShareMessage$Type extends MessageType<ItemShareMessage> {
    constructor() {
        super("im.ItemShareMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "item_style", kind: "message", T: () => ShareItemStyle },
            { no: 3, name: "share_text", kind: "message", T: () => Text },
            { no: 4, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<ItemShareMessage>): ItemShareMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemShareMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemShareMessage): ItemShareMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.ShareItemStyle item_style */ 2:
                    message.itemStyle = ShareItemStyle.internalBinaryRead(reader, reader.uint32(), options, message.itemStyle);
                    break;
                case /* data.Text share_text */ 3:
                    message.shareText = Text.internalBinaryRead(reader, reader.uint32(), options, message.shareText);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 4:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemShareMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.ShareItemStyle item_style = 2; */
        if (message.itemStyle)
            ShareItemStyle.internalBinaryWrite(message.itemStyle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text share_text = 3; */
        if (message.shareText)
            Text.internalBinaryWrite(message.shareText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 4; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ItemShareMessage
 */
export const ItemShareMessage = new ItemShareMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JackfruitMessage$Type extends MessageType<JackfruitMessage> {
    constructor() {
        super("im.JackfruitMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "biz_msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<JackfruitMessage>): JackfruitMessage {
        const message = { bizMsg: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JackfruitMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JackfruitMessage): JackfruitMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bytes biz_msg */ 2:
                    message.bizMsg = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JackfruitMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes biz_msg = 2; */
        if (message.bizMsg.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.bizMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.JackfruitMessage
 */
export const JackfruitMessage = new JackfruitMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomBuyIntentionMessage$Type extends MessageType<EcomBuyIntentionMessage> {
    constructor() {
        super("im.EcomBuyIntentionMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "counts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EcomBuyIntentionMessage_Count },
            { no: 3, name: "unix_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EcomBuyIntentionMessage>): EcomBuyIntentionMessage {
        const message = { counts: [], unixTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomBuyIntentionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomBuyIntentionMessage): EcomBuyIntentionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.EcomBuyIntentionMessage.Count counts */ 2:
                    message.counts.push(EcomBuyIntentionMessage_Count.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 unix_time */ 3:
                    message.unixTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomBuyIntentionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.EcomBuyIntentionMessage.Count counts = 2; */
        for (let i = 0; i < message.counts.length; i++)
            EcomBuyIntentionMessage_Count.internalBinaryWrite(message.counts[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 unix_time = 3; */
        if (message.unixTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.unixTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EcomBuyIntentionMessage
 */
export const EcomBuyIntentionMessage = new EcomBuyIntentionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EcomBuyIntentionMessage_Count$Type extends MessageType<EcomBuyIntentionMessage_Count> {
    constructor() {
        super("im.EcomBuyIntentionMessage.Count", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EcomBuyIntentionMessage_Count>): EcomBuyIntentionMessage_Count {
        const message = { id: 0n, title: "", count: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EcomBuyIntentionMessage_Count>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EcomBuyIntentionMessage_Count): EcomBuyIntentionMessage_Count {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 count */ 3:
                    message.count = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EcomBuyIntentionMessage_Count, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 count = 3; */
        if (message.count !== 0n)
            writer.tag(3, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.EcomBuyIntentionMessage.Count
 */
export const EcomBuyIntentionMessage_Count = new EcomBuyIntentionMessage_Count$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvAtmosphereVideoMessage$Type extends MessageType<KtvAtmosphereVideoMessage> {
    constructor() {
        super("im.KtvAtmosphereVideoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "ktv_atmosphere_video_content", kind: "message", T: () => KtvAtmosphereVideoContent }
        ]);
    }
    create(value?: PartialMessage<KtvAtmosphereVideoMessage>): KtvAtmosphereVideoMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvAtmosphereVideoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvAtmosphereVideoMessage): KtvAtmosphereVideoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.KtvAtmosphereVideoContent ktv_atmosphere_video_content */ 2:
                    message.ktvAtmosphereVideoContent = KtvAtmosphereVideoContent.internalBinaryRead(reader, reader.uint32(), options, message.ktvAtmosphereVideoContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvAtmosphereVideoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.KtvAtmosphereVideoContent ktv_atmosphere_video_content = 2; */
        if (message.ktvAtmosphereVideoContent)
            KtvAtmosphereVideoContent.internalBinaryWrite(message.ktvAtmosphereVideoContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvAtmosphereVideoMessage
 */
export const KtvAtmosphereVideoMessage = new KtvAtmosphereVideoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvAtmosphereVideoContent$Type extends MessageType<KtvAtmosphereVideoContent> {
    constructor() {
        super("im.KtvAtmosphereVideoContent", [
            { no: 1, name: "uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "video_info", kind: "message", T: () => KtvAtmosphereVideoInfo }
        ]);
    }
    create(value?: PartialMessage<KtvAtmosphereVideoContent>): KtvAtmosphereVideoContent {
        const message = { uid: 0n, songId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvAtmosphereVideoContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvAtmosphereVideoContent): KtvAtmosphereVideoContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 uid */ 1:
                    message.uid = reader.int64().toBigInt();
                    break;
                case /* int64 song_id */ 2:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* data.KtvAtmosphereVideoInfo video_info */ 3:
                    message.videoInfo = KtvAtmosphereVideoInfo.internalBinaryRead(reader, reader.uint32(), options, message.videoInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvAtmosphereVideoContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 uid = 1; */
        if (message.uid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.uid);
        /* int64 song_id = 2; */
        if (message.songId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.songId);
        /* data.KtvAtmosphereVideoInfo video_info = 3; */
        if (message.videoInfo)
            KtvAtmosphereVideoInfo.internalBinaryWrite(message.videoInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvAtmosphereVideoContent
 */
export const KtvAtmosphereVideoContent = new KtvAtmosphereVideoContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVContestSupportMessage$Type extends MessageType<KTVContestSupportMessage> {
    constructor() {
        super("im.KTVContestSupportMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "support_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "supportee_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "supportor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "song_unique_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KTVContestSupportMessage>): KTVContestSupportMessage {
        const message = { supportCount: 0n, supporteeId: 0n, supportorId: 0n, songId: 0n, songUniqueId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVContestSupportMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVContestSupportMessage): KTVContestSupportMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 support_count */ 2:
                    message.supportCount = reader.int64().toBigInt();
                    break;
                case /* int64 supportee_id */ 3:
                    message.supporteeId = reader.int64().toBigInt();
                    break;
                case /* int64 supportor_id */ 4:
                    message.supportorId = reader.int64().toBigInt();
                    break;
                case /* int64 song_id */ 5:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* int64 song_unique_id */ 6:
                    message.songUniqueId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVContestSupportMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 support_count = 2; */
        if (message.supportCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.supportCount);
        /* int64 supportee_id = 3; */
        if (message.supporteeId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.supporteeId);
        /* int64 supportor_id = 4; */
        if (message.supportorId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.supportorId);
        /* int64 song_id = 5; */
        if (message.songId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.songId);
        /* int64 song_unique_id = 6; */
        if (message.songUniqueId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.songUniqueId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVContestSupportMessage
 */
export const KTVContestSupportMessage = new KTVContestSupportMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddKTVDressContent$Type extends MessageType<AddKTVDressContent> {
    constructor() {
        super("im.AddKTVDressContent", [
            { no: 1, name: "add_dress_prompt", kind: "message", T: () => AddDressPrompt }
        ]);
    }
    create(value?: PartialMessage<AddKTVDressContent>): AddKTVDressContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddKTVDressContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddKTVDressContent): AddKTVDressContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.AddDressPrompt add_dress_prompt */ 1:
                    message.addDressPrompt = AddDressPrompt.internalBinaryRead(reader, reader.uint32(), options, message.addDressPrompt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddKTVDressContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.AddDressPrompt add_dress_prompt = 1; */
        if (message.addDressPrompt)
            AddDressPrompt.internalBinaryWrite(message.addDressPrompt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AddKTVDressContent
 */
export const AddKTVDressContent = new AddKTVDressContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeKTVDressContent$Type extends MessageType<ChangeKTVDressContent> {
    constructor() {
        super("im.ChangeKTVDressContent", [
            { no: 1, name: "change_global_dress_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeKTVDressContent>): ChangeKTVDressContent {
        const message = { changeGlobalDressToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeKTVDressContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeKTVDressContent): ChangeKTVDressContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string change_global_dress_toast */ 1:
                    message.changeGlobalDressToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeKTVDressContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string change_global_dress_toast = 1; */
        if (message.changeGlobalDressToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.changeGlobalDressToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChangeKTVDressContent
 */
export const ChangeKTVDressContent = new ChangeKTVDressContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvDressMessage$Type extends MessageType<KtvDressMessage> {
    constructor() {
        super("im.KtvDressMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "add_dress_content", kind: "message", T: () => AddKTVDressContent },
            { no: 4, name: "change_dress_content", kind: "message", T: () => ChangeKTVDressContent }
        ]);
    }
    create(value?: PartialMessage<KtvDressMessage>): KtvDressMessage {
        const message = { messageType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvDressMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvDressMessage): KtvDressMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 message_type */ 2:
                    message.messageType = reader.int32();
                    break;
                case /* im.AddKTVDressContent add_dress_content */ 3:
                    message.addDressContent = AddKTVDressContent.internalBinaryRead(reader, reader.uint32(), options, message.addDressContent);
                    break;
                case /* im.ChangeKTVDressContent change_dress_content */ 4:
                    message.changeDressContent = ChangeKTVDressContent.internalBinaryRead(reader, reader.uint32(), options, message.changeDressContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvDressMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 2; */
        if (message.messageType !== 0)
            writer.tag(2, WireType.Varint).int32(message.messageType);
        /* im.AddKTVDressContent add_dress_content = 3; */
        if (message.addDressContent)
            AddKTVDressContent.internalBinaryWrite(message.addDressContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.ChangeKTVDressContent change_dress_content = 4; */
        if (message.changeDressContent)
            ChangeKTVDressContent.internalBinaryWrite(message.changeDressContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvDressMessage
 */
export const KtvDressMessage = new KtvDressMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvGrabSongResultMessage$Type extends MessageType<KtvGrabSongResultMessage> {
    constructor() {
        super("im.KtvGrabSongResultMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "term_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KtvGrabSongResultMessage>): KtvGrabSongResultMessage {
        const message = { songId: 0n, termId: 0n, success: false, prompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvGrabSongResultMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvGrabSongResultMessage): KtvGrabSongResultMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 song_id */ 2:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* int64 term_id */ 3:
                    message.termId = reader.int64().toBigInt();
                    break;
                case /* bool success */ 4:
                    message.success = reader.bool();
                    break;
                case /* string prompt */ 5:
                    message.prompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvGrabSongResultMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 song_id = 2; */
        if (message.songId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.songId);
        /* int64 term_id = 3; */
        if (message.termId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.termId);
        /* bool success = 4; */
        if (message.success !== false)
            writer.tag(4, WireType.Varint).bool(message.success);
        /* string prompt = 5; */
        if (message.prompt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.prompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvGrabSongResultMessage
 */
export const KtvGrabSongResultMessage = new KtvGrabSongResultMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVPlayModeStartMessage$Type extends MessageType<KTVPlayModeStartMessage> {
    constructor() {
        super("im.KTVPlayModeStartMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "play_mode_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "linkmic_play_modes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<KTVPlayModeStartMessage>): KTVPlayModeStartMessage {
        const message = { prompt: "", playModeType: 0, linkmicPlayModes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVPlayModeStartMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVPlayModeStartMessage): KTVPlayModeStartMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string prompt */ 2:
                    message.prompt = reader.string();
                    break;
                case /* int32 play_mode_type */ 3:
                    message.playModeType = reader.int32();
                    break;
                case /* repeated int32 linkmic_play_modes */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.linkmicPlayModes.push(reader.int32());
                    else
                        message.linkmicPlayModes.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVPlayModeStartMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string prompt = 2; */
        if (message.prompt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.prompt);
        /* int32 play_mode_type = 3; */
        if (message.playModeType !== 0)
            writer.tag(3, WireType.Varint).int32(message.playModeType);
        /* repeated int32 linkmic_play_modes = 4; */
        if (message.linkmicPlayModes.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.linkmicPlayModes.length; i++)
                writer.int32(message.linkmicPlayModes[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVPlayModeStartMessage
 */
export const KTVPlayModeStartMessage = new KTVPlayModeStartMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVShortVideoCreatedMessage$Type extends MessageType<KTVShortVideoCreatedMessage> {
    constructor() {
        super("im.KTVShortVideoCreatedMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "short_video_info", kind: "message", T: () => KTVShortVideoCreatedMessage_ShortVideoStruct }
        ]);
    }
    create(value?: PartialMessage<KTVShortVideoCreatedMessage>): KTVShortVideoCreatedMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVShortVideoCreatedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVShortVideoCreatedMessage): KTVShortVideoCreatedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.KTVShortVideoCreatedMessage.ShortVideoStruct short_video_info */ 2:
                    message.shortVideoInfo = KTVShortVideoCreatedMessage_ShortVideoStruct.internalBinaryRead(reader, reader.uint32(), options, message.shortVideoInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVShortVideoCreatedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.KTVShortVideoCreatedMessage.ShortVideoStruct short_video_info = 2; */
        if (message.shortVideoInfo)
            KTVShortVideoCreatedMessage_ShortVideoStruct.internalBinaryWrite(message.shortVideoInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVShortVideoCreatedMessage
 */
export const KTVShortVideoCreatedMessage = new KTVShortVideoCreatedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVShortVideoCreatedMessage_ShortVideoStruct$Type extends MessageType<KTVShortVideoCreatedMessage_ShortVideoStruct> {
    constructor() {
        super("im.KTVShortVideoCreatedMessage.ShortVideoStruct", [
            { no: 1, name: "short_video_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KTVShortVideoCreatedMessage_ShortVideoStruct>): KTVShortVideoCreatedMessage_ShortVideoStruct {
        const message = { shortVideoUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVShortVideoCreatedMessage_ShortVideoStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVShortVideoCreatedMessage_ShortVideoStruct): KTVShortVideoCreatedMessage_ShortVideoStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string short_video_url */ 1:
                    message.shortVideoUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVShortVideoCreatedMessage_ShortVideoStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string short_video_url = 1; */
        if (message.shortVideoUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.shortVideoUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVShortVideoCreatedMessage.ShortVideoStruct
 */
export const KTVShortVideoCreatedMessage_ShortVideoStruct = new KTVShortVideoCreatedMessage_ShortVideoStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVSingerHotRankPosMessage$Type extends MessageType<KTVSingerHotRankPosMessage> {
    constructor() {
        super("im.KTVSingerHotRankPosMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "hot", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "singer", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KTVSingerHotRankPosMessage>): KTVSingerHotRankPosMessage {
        const message = { hot: 0n, rank: 0n, singer: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVSingerHotRankPosMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVSingerHotRankPosMessage): KTVSingerHotRankPosMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 hot */ 2:
                    message.hot = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 3:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* int64 singer */ 4:
                    message.singer = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVSingerHotRankPosMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 hot = 2; */
        if (message.hot !== 0n)
            writer.tag(2, WireType.Varint).int64(message.hot);
        /* int64 rank = 3; */
        if (message.rank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rank);
        /* int64 singer = 4; */
        if (message.singer !== 0n)
            writer.tag(4, WireType.Varint).int64(message.singer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVSingerHotRankPosMessage
 */
export const KTVSingerHotRankPosMessage = new KTVSingerHotRankPosMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvChallengeConfigMessage$Type extends MessageType<KtvChallengeConfigMessage> {
    constructor() {
        super("im.KtvChallengeConfigMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "switch_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "target_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "target_duration_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KtvChallengeConfigMessage>): KtvChallengeConfigMessage {
        const message = { switchStatus: 0n, targetScore: 0n, targetDurationSecond: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvChallengeConfigMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvChallengeConfigMessage): KtvChallengeConfigMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 switch_status */ 2:
                    message.switchStatus = reader.int64().toBigInt();
                    break;
                case /* int64 target_score */ 3:
                    message.targetScore = reader.int64().toBigInt();
                    break;
                case /* int64 target_duration_second */ 4:
                    message.targetDurationSecond = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvChallengeConfigMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 switch_status = 2; */
        if (message.switchStatus !== 0n)
            writer.tag(2, WireType.Varint).int64(message.switchStatus);
        /* int64 target_score = 3; */
        if (message.targetScore !== 0n)
            writer.tag(3, WireType.Varint).int64(message.targetScore);
        /* int64 target_duration_second = 4; */
        if (message.targetDurationSecond !== 0n)
            writer.tag(4, WireType.Varint).int64(message.targetDurationSecond);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvChallengeConfigMessage
 */
export const KtvChallengeConfigMessage = new KtvChallengeConfigMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVChallengeRankMessage$Type extends MessageType<KTVChallengeRankMessage> {
    constructor() {
        super("im.KTVChallengeRankMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KTVChallengeRankMessage_ChallengeRankUser },
            { no: 3, name: "singer_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "singer_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "singer_avatar_thumb", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<KTVChallengeRankMessage>): KTVChallengeRankMessage {
        const message = { userList: [], singerId: 0n, singerNickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVChallengeRankMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVChallengeRankMessage): KTVChallengeRankMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.KTVChallengeRankMessage.ChallengeRankUser user_list */ 2:
                    message.userList.push(KTVChallengeRankMessage_ChallengeRankUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 singer_id */ 3:
                    message.singerId = reader.int64().toBigInt();
                    break;
                case /* string singer_nickname */ 4:
                    message.singerNickname = reader.string();
                    break;
                case /* data.Image singer_avatar_thumb */ 5:
                    message.singerAvatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.singerAvatarThumb);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVChallengeRankMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.KTVChallengeRankMessage.ChallengeRankUser user_list = 2; */
        for (let i = 0; i < message.userList.length; i++)
            KTVChallengeRankMessage_ChallengeRankUser.internalBinaryWrite(message.userList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 singer_id = 3; */
        if (message.singerId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.singerId);
        /* string singer_nickname = 4; */
        if (message.singerNickname !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.singerNickname);
        /* data.Image singer_avatar_thumb = 5; */
        if (message.singerAvatarThumb)
            Image.internalBinaryWrite(message.singerAvatarThumb, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVChallengeRankMessage
 */
export const KTVChallengeRankMessage = new KTVChallengeRankMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVChallengeRankMessage_ChallengeRankUser$Type extends MessageType<KTVChallengeRankMessage_ChallengeRankUser> {
    constructor() {
        super("im.KTVChallengeRankMessage.ChallengeRankUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 5, name: "avatar_medium", kind: "message", T: () => Image },
            { no: 6, name: "avatar_large", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<KTVChallengeRankMessage_ChallengeRankUser>): KTVChallengeRankMessage_ChallengeRankUser {
        const message = { userId: 0n, nickname: "", score: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVChallengeRankMessage_ChallengeRankUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVChallengeRankMessage_ChallengeRankUser): KTVChallengeRankMessage_ChallengeRankUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* int64 score */ 3:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* data.Image avatar_thumb */ 4:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* data.Image avatar_medium */ 5:
                    message.avatarMedium = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarMedium);
                    break;
                case /* data.Image avatar_large */ 6:
                    message.avatarLarge = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarLarge);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVChallengeRankMessage_ChallengeRankUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* int64 score = 3; */
        if (message.score !== 0n)
            writer.tag(3, WireType.Varint).int64(message.score);
        /* data.Image avatar_thumb = 4; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_medium = 5; */
        if (message.avatarMedium)
            Image.internalBinaryWrite(message.avatarMedium, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_large = 6; */
        if (message.avatarLarge)
            Image.internalBinaryWrite(message.avatarLarge, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVChallengeRankMessage.ChallengeRankUser
 */
export const KTVChallengeRankMessage_ChallengeRankUser = new KTVChallengeRankMessage_ChallengeRankUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVChallengeStatusMessage$Type extends MessageType<KTVChallengeStatusMessage> {
    constructor() {
        super("im.KTVChallengeStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "challenge_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "current_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "target_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "countdown_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "target_duration_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "increment_duration_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "gift_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "emoji_location", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<KTVChallengeStatusMessage>): KTVChallengeStatusMessage {
        const message = { challengeId: 0n, status: 0n, currentScore: 0n, targetScore: 0n, countdownSecond: 0n, targetDurationSecond: 0n, incrementDurationSecond: 0n, giftType: 0, emojiLocation: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVChallengeStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVChallengeStatusMessage): KTVChallengeStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 challenge_id */ 2:
                    message.challengeId = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* int64 current_score */ 4:
                    message.currentScore = reader.int64().toBigInt();
                    break;
                case /* int64 target_score */ 5:
                    message.targetScore = reader.int64().toBigInt();
                    break;
                case /* int64 countdown_second */ 6:
                    message.countdownSecond = reader.int64().toBigInt();
                    break;
                case /* int64 target_duration_second */ 7:
                    message.targetDurationSecond = reader.int64().toBigInt();
                    break;
                case /* int64 increment_duration_second */ 8:
                    message.incrementDurationSecond = reader.int64().toBigInt();
                    break;
                case /* int32 gift_type */ 9:
                    message.giftType = reader.int32();
                    break;
                case /* int32 emoji_location */ 10:
                    message.emojiLocation = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVChallengeStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 challenge_id = 2; */
        if (message.challengeId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.challengeId);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* int64 current_score = 4; */
        if (message.currentScore !== 0n)
            writer.tag(4, WireType.Varint).int64(message.currentScore);
        /* int64 target_score = 5; */
        if (message.targetScore !== 0n)
            writer.tag(5, WireType.Varint).int64(message.targetScore);
        /* int64 countdown_second = 6; */
        if (message.countdownSecond !== 0n)
            writer.tag(6, WireType.Varint).int64(message.countdownSecond);
        /* int64 target_duration_second = 7; */
        if (message.targetDurationSecond !== 0n)
            writer.tag(7, WireType.Varint).int64(message.targetDurationSecond);
        /* int64 increment_duration_second = 8; */
        if (message.incrementDurationSecond !== 0n)
            writer.tag(8, WireType.Varint).int64(message.incrementDurationSecond);
        /* int32 gift_type = 9; */
        if (message.giftType !== 0)
            writer.tag(9, WireType.Varint).int32(message.giftType);
        /* int32 emoji_location = 10; */
        if (message.emojiLocation !== 0)
            writer.tag(10, WireType.Varint).int32(message.emojiLocation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVChallengeStatusMessage
 */
export const KTVChallengeStatusMessage = new KTVChallengeStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVStartGrabSongMessage$Type extends MessageType<KTVStartGrabSongMessage> {
    constructor() {
        super("im.KTVStartGrabSongMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "isStart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<KTVStartGrabSongMessage>): KTVStartGrabSongMessage {
        const message = { isStart: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVStartGrabSongMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVStartGrabSongMessage): KTVStartGrabSongMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool isStart */ 2:
                    message.isStart = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVStartGrabSongMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool isStart = 2; */
        if (message.isStart !== false)
            writer.tag(2, WireType.Varint).bool(message.isStart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVStartGrabSongMessage
 */
export const KTVStartGrabSongMessage = new KTVStartGrabSongMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KTVUserSingingHotMessage$Type extends MessageType<KTVUserSingingHotMessage> {
    constructor() {
        super("im.KTVUserSingingHotMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "hot", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "hot_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "hot_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "level2_threshold", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "level3_threshold", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KTVUserSingingHotMessage>): KTVUserSingingHotMessage {
        const message = { hot: 0n, hotStatus: 0, hotLevel: 0, songId: 0n, userId: 0n, level2Threshold: 0n, level3Threshold: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KTVUserSingingHotMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KTVUserSingingHotMessage): KTVUserSingingHotMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 hot */ 2:
                    message.hot = reader.int64().toBigInt();
                    break;
                case /* int32 hot_status */ 3:
                    message.hotStatus = reader.int32();
                    break;
                case /* int32 hot_level */ 4:
                    message.hotLevel = reader.int32();
                    break;
                case /* int64 song_id */ 5:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 6:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 level2_threshold */ 7:
                    message.level2Threshold = reader.int64().toBigInt();
                    break;
                case /* int64 level3_threshold */ 8:
                    message.level3Threshold = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KTVUserSingingHotMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 hot = 2; */
        if (message.hot !== 0n)
            writer.tag(2, WireType.Varint).int64(message.hot);
        /* int32 hot_status = 3; */
        if (message.hotStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.hotStatus);
        /* int32 hot_level = 4; */
        if (message.hotLevel !== 0)
            writer.tag(4, WireType.Varint).int32(message.hotLevel);
        /* int64 song_id = 5; */
        if (message.songId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.songId);
        /* int64 user_id = 6; */
        if (message.userId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.userId);
        /* int64 level2_threshold = 7; */
        if (message.level2Threshold !== 0n)
            writer.tag(7, WireType.Varint).int64(message.level2Threshold);
        /* int64 level3_threshold = 8; */
        if (message.level3Threshold !== 0n)
            writer.tag(8, WireType.Varint).int64(message.level3Threshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KTVUserSingingHotMessage
 */
export const KTVUserSingingHotMessage = new KTVUserSingingHotMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvMessage$Type extends MessageType<KtvMessage> {
    constructor() {
        super("im.KtvMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "set_setting_order_song_content", kind: "message", T: () => SetSettingOrderSongContent },
            { no: 4, name: "audience_order_song_content", kind: "message", T: () => AudienceOrderSongContent },
            { no: 5, name: "audience_order_song_chat_content", kind: "message", T: () => AudienceOrderSongChatContent },
            { no: 6, name: "pause_play_song_content", kind: "message", T: () => PausePlaySongContent },
            { no: 7, name: "open_ktv_component_content", kind: "message", T: () => OpenKtvComponentContent },
            { no: 9, name: "audience_add_song_setting_changed", kind: "message", T: () => AudienceAddSongSettingChangedContent },
            { no: 10, name: "song_waiting_list_changed", kind: "message", T: () => SongWaitingListChangedContent },
            { no: 11, name: "want_to_listen_song_list_changed", kind: "message", T: () => WantToListenSongListChangedContent },
            { no: 12, name: "permit_want_to_listen_song", kind: "message", T: () => PermitWantToListenSongContent },
            { no: 13, name: "want_to_listen_song_removed", kind: "message", T: () => WantToListenSongRemovedContent }
        ]);
    }
    create(value?: PartialMessage<KtvMessage>): KtvMessage {
        const message = { messageType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvMessage): KtvMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* im.SetSettingOrderSongContent set_setting_order_song_content */ 3:
                    message.setSettingOrderSongContent = SetSettingOrderSongContent.internalBinaryRead(reader, reader.uint32(), options, message.setSettingOrderSongContent);
                    break;
                case /* im.AudienceOrderSongContent audience_order_song_content */ 4:
                    message.audienceOrderSongContent = AudienceOrderSongContent.internalBinaryRead(reader, reader.uint32(), options, message.audienceOrderSongContent);
                    break;
                case /* im.AudienceOrderSongChatContent audience_order_song_chat_content */ 5:
                    message.audienceOrderSongChatContent = AudienceOrderSongChatContent.internalBinaryRead(reader, reader.uint32(), options, message.audienceOrderSongChatContent);
                    break;
                case /* im.PausePlaySongContent pause_play_song_content */ 6:
                    message.pausePlaySongContent = PausePlaySongContent.internalBinaryRead(reader, reader.uint32(), options, message.pausePlaySongContent);
                    break;
                case /* im.OpenKtvComponentContent open_ktv_component_content */ 7:
                    message.openKtvComponentContent = OpenKtvComponentContent.internalBinaryRead(reader, reader.uint32(), options, message.openKtvComponentContent);
                    break;
                case /* im.AudienceAddSongSettingChangedContent audience_add_song_setting_changed */ 9:
                    message.audienceAddSongSettingChanged = AudienceAddSongSettingChangedContent.internalBinaryRead(reader, reader.uint32(), options, message.audienceAddSongSettingChanged);
                    break;
                case /* im.SongWaitingListChangedContent song_waiting_list_changed */ 10:
                    message.songWaitingListChanged = SongWaitingListChangedContent.internalBinaryRead(reader, reader.uint32(), options, message.songWaitingListChanged);
                    break;
                case /* im.WantToListenSongListChangedContent want_to_listen_song_list_changed */ 11:
                    message.wantToListenSongListChanged = WantToListenSongListChangedContent.internalBinaryRead(reader, reader.uint32(), options, message.wantToListenSongListChanged);
                    break;
                case /* im.PermitWantToListenSongContent permit_want_to_listen_song */ 12:
                    message.permitWantToListenSong = PermitWantToListenSongContent.internalBinaryRead(reader, reader.uint32(), options, message.permitWantToListenSong);
                    break;
                case /* im.WantToListenSongRemovedContent want_to_listen_song_removed */ 13:
                    message.wantToListenSongRemoved = WantToListenSongRemovedContent.internalBinaryRead(reader, reader.uint32(), options, message.wantToListenSongRemoved);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* im.SetSettingOrderSongContent set_setting_order_song_content = 3; */
        if (message.setSettingOrderSongContent)
            SetSettingOrderSongContent.internalBinaryWrite(message.setSettingOrderSongContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.AudienceOrderSongContent audience_order_song_content = 4; */
        if (message.audienceOrderSongContent)
            AudienceOrderSongContent.internalBinaryWrite(message.audienceOrderSongContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.AudienceOrderSongChatContent audience_order_song_chat_content = 5; */
        if (message.audienceOrderSongChatContent)
            AudienceOrderSongChatContent.internalBinaryWrite(message.audienceOrderSongChatContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.PausePlaySongContent pause_play_song_content = 6; */
        if (message.pausePlaySongContent)
            PausePlaySongContent.internalBinaryWrite(message.pausePlaySongContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.OpenKtvComponentContent open_ktv_component_content = 7; */
        if (message.openKtvComponentContent)
            OpenKtvComponentContent.internalBinaryWrite(message.openKtvComponentContent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.AudienceAddSongSettingChangedContent audience_add_song_setting_changed = 9; */
        if (message.audienceAddSongSettingChanged)
            AudienceAddSongSettingChangedContent.internalBinaryWrite(message.audienceAddSongSettingChanged, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* im.SongWaitingListChangedContent song_waiting_list_changed = 10; */
        if (message.songWaitingListChanged)
            SongWaitingListChangedContent.internalBinaryWrite(message.songWaitingListChanged, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* im.WantToListenSongListChangedContent want_to_listen_song_list_changed = 11; */
        if (message.wantToListenSongListChanged)
            WantToListenSongListChangedContent.internalBinaryWrite(message.wantToListenSongListChanged, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* im.PermitWantToListenSongContent permit_want_to_listen_song = 12; */
        if (message.permitWantToListenSong)
            PermitWantToListenSongContent.internalBinaryWrite(message.permitWantToListenSong, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* im.WantToListenSongRemovedContent want_to_listen_song_removed = 13; */
        if (message.wantToListenSongRemoved)
            WantToListenSongRemovedContent.internalBinaryWrite(message.wantToListenSongRemoved, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvMessage
 */
export const KtvMessage = new KtvMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSettingOrderSongContent$Type extends MessageType<SetSettingOrderSongContent> {
    constructor() {
        super("im.SetSettingOrderSongContent", [
            { no: 1, name: "can_order_song", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetSettingOrderSongContent>): SetSettingOrderSongContent {
        const message = { canOrderSong: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetSettingOrderSongContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSettingOrderSongContent): SetSettingOrderSongContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool can_order_song */ 1:
                    message.canOrderSong = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetSettingOrderSongContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool can_order_song = 1; */
        if (message.canOrderSong !== false)
            writer.tag(1, WireType.Varint).bool(message.canOrderSong);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SetSettingOrderSongContent
 */
export const SetSettingOrderSongContent = new SetSettingOrderSongContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceOrderSongContent$Type extends MessageType<AudienceOrderSongContent> {
    constructor() {
        super("im.AudienceOrderSongContent", [
            { no: 1, name: "order_song_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AudienceOrderSongContent>): AudienceOrderSongContent {
        const message = { orderSongCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceOrderSongContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceOrderSongContent): AudienceOrderSongContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 order_song_count */ 1:
                    message.orderSongCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceOrderSongContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 order_song_count = 1; */
        if (message.orderSongCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.orderSongCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AudienceOrderSongContent
 */
export const AudienceOrderSongContent = new AudienceOrderSongContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceOrderSongChatContent$Type extends MessageType<AudienceOrderSongChatContent> {
    constructor() {
        super("im.AudienceOrderSongChatContent", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "display_text", kind: "message", T: () => Text },
            { no: 3, name: "display_user_role", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AudienceOrderSongChatContent>): AudienceOrderSongChatContent {
        const message = { displayUserRole: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceOrderSongChatContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceOrderSongChatContent): AudienceOrderSongChatContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.Text display_text */ 2:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* bool display_user_role */ 3:
                    message.displayUserRole = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceOrderSongChatContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text display_text = 2; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool display_user_role = 3; */
        if (message.displayUserRole !== false)
            writer.tag(3, WireType.Varint).bool(message.displayUserRole);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AudienceOrderSongChatContent
 */
export const AudienceOrderSongChatContent = new AudienceOrderSongChatContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PausePlaySongContent$Type extends MessageType<PausePlaySongContent> {
    constructor() {
        super("im.PausePlaySongContent", [
            { no: 1, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "singer_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PausePlaySongContent>): PausePlaySongContent {
        const message = { songId: 0n, actionType: 0, fromUserId: 0n, singerId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PausePlaySongContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PausePlaySongContent): PausePlaySongContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 song_id */ 1:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* int32 action_type */ 2:
                    message.actionType = reader.int32();
                    break;
                case /* int64 from_user_id */ 3:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 singer_id */ 4:
                    message.singerId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PausePlaySongContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 song_id = 1; */
        if (message.songId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.songId);
        /* int32 action_type = 2; */
        if (message.actionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.actionType);
        /* int64 from_user_id = 3; */
        if (message.fromUserId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.fromUserId);
        /* int64 singer_id = 4; */
        if (message.singerId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.singerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PausePlaySongContent
 */
export const PausePlaySongContent = new PausePlaySongContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenKtvComponentContent$Type extends MessageType<OpenKtvComponentContent> {
    constructor() {
        super("im.OpenKtvComponentContent", [
            { no: 1, name: "open_audience_add_song_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OpenKtvComponentContent>): OpenKtvComponentContent {
        const message = { openAudienceAddSongSwitch: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenKtvComponentContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenKtvComponentContent): OpenKtvComponentContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool open_audience_add_song_switch */ 1:
                    message.openAudienceAddSongSwitch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenKtvComponentContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool open_audience_add_song_switch = 1; */
        if (message.openAudienceAddSongSwitch !== false)
            writer.tag(1, WireType.Varint).bool(message.openAudienceAddSongSwitch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OpenKtvComponentContent
 */
export const OpenKtvComponentContent = new OpenKtvComponentContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceAddSongSettingChangedContent$Type extends MessageType<AudienceAddSongSettingChangedContent> {
    constructor() {
        super("im.AudienceAddSongSettingChangedContent", [
            { no: 1, name: "open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AudienceAddSongSettingChangedContent>): AudienceAddSongSettingChangedContent {
        const message = { open: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceAddSongSettingChangedContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceAddSongSettingChangedContent): AudienceAddSongSettingChangedContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool open */ 1:
                    message.open = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceAddSongSettingChangedContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool open = 1; */
        if (message.open !== false)
            writer.tag(1, WireType.Varint).bool(message.open);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AudienceAddSongSettingChangedContent
 */
export const AudienceAddSongSettingChangedContent = new AudienceAddSongSettingChangedContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SongWaitingListChangedContent$Type extends MessageType<SongWaitingListChangedContent> {
    constructor() {
        super("im.SongWaitingListChangedContent", [
            { no: 1, name: "anchor_unread_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SongWaitingListChangedContent>): SongWaitingListChangedContent {
        const message = { anchorUnreadCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SongWaitingListChangedContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SongWaitingListChangedContent): SongWaitingListChangedContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 anchor_unread_count */ 1:
                    message.anchorUnreadCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SongWaitingListChangedContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 anchor_unread_count = 1; */
        if (message.anchorUnreadCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.anchorUnreadCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SongWaitingListChangedContent
 */
export const SongWaitingListChangedContent = new SongWaitingListChangedContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WantToListenSongListChangedContent$Type extends MessageType<WantToListenSongListChangedContent> {
    constructor() {
        super("im.WantToListenSongListChangedContent", [
            { no: 1, name: "anchor_unread_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WantToListenSongListChangedContent>): WantToListenSongListChangedContent {
        const message = { anchorUnreadCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WantToListenSongListChangedContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WantToListenSongListChangedContent): WantToListenSongListChangedContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 anchor_unread_count */ 1:
                    message.anchorUnreadCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WantToListenSongListChangedContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 anchor_unread_count = 1; */
        if (message.anchorUnreadCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.anchorUnreadCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WantToListenSongListChangedContent
 */
export const WantToListenSongListChangedContent = new WantToListenSongListChangedContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermitWantToListenSongContent$Type extends MessageType<PermitWantToListenSongContent> {
    constructor() {
        super("im.PermitWantToListenSongContent", [
            { no: 1, name: "song_id", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_multi_add_song", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "song_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PermitWantToListenSongContent>): PermitWantToListenSongContent {
        const message = { songId: [], isMultiAddSong: false, songName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PermitWantToListenSongContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermitWantToListenSongContent): PermitWantToListenSongContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 song_id */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.songId.push(reader.int64().toBigInt());
                    else
                        message.songId.push(reader.int64().toBigInt());
                    break;
                case /* bool is_multi_add_song */ 2:
                    message.isMultiAddSong = reader.bool();
                    break;
                case /* string song_name */ 3:
                    message.songName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PermitWantToListenSongContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 song_id = 1; */
        if (message.songId.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.songId.length; i++)
                writer.int64(message.songId[i]);
            writer.join();
        }
        /* bool is_multi_add_song = 2; */
        if (message.isMultiAddSong !== false)
            writer.tag(2, WireType.Varint).bool(message.isMultiAddSong);
        /* string song_name = 3; */
        if (message.songName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.songName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PermitWantToListenSongContent
 */
export const PermitWantToListenSongContent = new PermitWantToListenSongContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WantToListenSongRemovedContent$Type extends MessageType<WantToListenSongRemovedContent> {
    constructor() {
        super("im.WantToListenSongRemovedContent", [
            { no: 1, name: "song_id", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WantToListenSongRemovedContent>): WantToListenSongRemovedContent {
        const message = { songId: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WantToListenSongRemovedContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WantToListenSongRemovedContent): WantToListenSongRemovedContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 song_id */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.songId.push(reader.int64().toBigInt());
                    else
                        message.songId.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WantToListenSongRemovedContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 song_id = 1; */
        if (message.songId.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.songId.length; i++)
                writer.int64(message.songId[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WantToListenSongRemovedContent
 */
export const WantToListenSongRemovedContent = new WantToListenSongRemovedContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LevelUpMessage$Type extends MessageType<LevelUpMessage> {
    constructor() {
        super("im.LevelUpMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "pre_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "current_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LevelUpMessage>): LevelUpMessage {
        const message = { preLevel: 0, currentLevel: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LevelUpMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LevelUpMessage): LevelUpMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int32 pre_level */ 3:
                    message.preLevel = reader.int32();
                    break;
                case /* int32 current_level */ 4:
                    message.currentLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LevelUpMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 pre_level = 3; */
        if (message.preLevel !== 0)
            writer.tag(3, WireType.Varint).int32(message.preLevel);
        /* int32 current_level = 4; */
        if (message.currentLevel !== 0)
            writer.tag(4, WireType.Varint).int32(message.currentLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LevelUpMessage
 */
export const LevelUpMessage = new LevelUpMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelLinkMessage$Type extends MessageType<RoomChannelLinkMessage> {
    constructor() {
        super("im.RoomChannelLinkMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "linker_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "create_content", kind: "message", T: () => ChannelLinkerCreateContent },
            { no: 6, name: "close_content", kind: "message", T: () => ChannelLinkerCloseContent },
            { no: 7, name: "invite_content", kind: "message", T: () => ChannelLinkerInviteContent },
            { no: 8, name: "reply_content", kind: "message", T: () => ChannelLinkerReplyContent },
            { no: 9, name: "permit_content", kind: "message", T: () => ChannelLinkerPermitContent },
            { no: 10, name: "enter_content", kind: "message", T: () => ChannelLinkerEnterContent },
            { no: 11, name: "leave_content", kind: "message", T: () => ChannelLinkerLeaveContent },
            { no: 12, name: "kick_out_content", kind: "message", T: () => ChannelLinkerKickOutContent },
            { no: 13, name: "linked_list_change_content", kind: "message", T: () => ChannelLinkerLinkedListChangeContent },
            { no: 14, name: "silence_status_content", kind: "message", T: () => ChannelLinkerSilenceContent },
            { no: 15, name: "apply_content", kind: "message", T: () => ChannelLinkerApplyContent }
        ]);
    }
    create(value?: PartialMessage<RoomChannelLinkMessage>): RoomChannelLinkMessage {
        const message = { messageType: 0n, linkerId: 0n, scene: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelLinkMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelLinkMessage): RoomChannelLinkMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* int64 linker_id */ 3:
                    message.linkerId = reader.int64().toBigInt();
                    break;
                case /* int64 scene */ 4:
                    message.scene = reader.int64().toBigInt();
                    break;
                case /* im.ChannelLinkerCreateContent create_content */ 5:
                    message.createContent = ChannelLinkerCreateContent.internalBinaryRead(reader, reader.uint32(), options, message.createContent);
                    break;
                case /* im.ChannelLinkerCloseContent close_content */ 6:
                    message.closeContent = ChannelLinkerCloseContent.internalBinaryRead(reader, reader.uint32(), options, message.closeContent);
                    break;
                case /* im.ChannelLinkerInviteContent invite_content */ 7:
                    message.inviteContent = ChannelLinkerInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.inviteContent);
                    break;
                case /* im.ChannelLinkerReplyContent reply_content */ 8:
                    message.replyContent = ChannelLinkerReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.replyContent);
                    break;
                case /* im.ChannelLinkerPermitContent permit_content */ 9:
                    message.permitContent = ChannelLinkerPermitContent.internalBinaryRead(reader, reader.uint32(), options, message.permitContent);
                    break;
                case /* im.ChannelLinkerEnterContent enter_content */ 10:
                    message.enterContent = ChannelLinkerEnterContent.internalBinaryRead(reader, reader.uint32(), options, message.enterContent);
                    break;
                case /* im.ChannelLinkerLeaveContent leave_content */ 11:
                    message.leaveContent = ChannelLinkerLeaveContent.internalBinaryRead(reader, reader.uint32(), options, message.leaveContent);
                    break;
                case /* im.ChannelLinkerKickOutContent kick_out_content */ 12:
                    message.kickOutContent = ChannelLinkerKickOutContent.internalBinaryRead(reader, reader.uint32(), options, message.kickOutContent);
                    break;
                case /* im.ChannelLinkerLinkedListChangeContent linked_list_change_content */ 13:
                    message.linkedListChangeContent = ChannelLinkerLinkedListChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.linkedListChangeContent);
                    break;
                case /* im.ChannelLinkerSilenceContent silence_status_content */ 14:
                    message.silenceStatusContent = ChannelLinkerSilenceContent.internalBinaryRead(reader, reader.uint32(), options, message.silenceStatusContent);
                    break;
                case /* im.ChannelLinkerApplyContent apply_content */ 15:
                    message.applyContent = ChannelLinkerApplyContent.internalBinaryRead(reader, reader.uint32(), options, message.applyContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelLinkMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* int64 linker_id = 3; */
        if (message.linkerId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.linkerId);
        /* int64 scene = 4; */
        if (message.scene !== 0n)
            writer.tag(4, WireType.Varint).int64(message.scene);
        /* im.ChannelLinkerCreateContent create_content = 5; */
        if (message.createContent)
            ChannelLinkerCreateContent.internalBinaryWrite(message.createContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerCloseContent close_content = 6; */
        if (message.closeContent)
            ChannelLinkerCloseContent.internalBinaryWrite(message.closeContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerInviteContent invite_content = 7; */
        if (message.inviteContent)
            ChannelLinkerInviteContent.internalBinaryWrite(message.inviteContent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerReplyContent reply_content = 8; */
        if (message.replyContent)
            ChannelLinkerReplyContent.internalBinaryWrite(message.replyContent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerPermitContent permit_content = 9; */
        if (message.permitContent)
            ChannelLinkerPermitContent.internalBinaryWrite(message.permitContent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerEnterContent enter_content = 10; */
        if (message.enterContent)
            ChannelLinkerEnterContent.internalBinaryWrite(message.enterContent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerLeaveContent leave_content = 11; */
        if (message.leaveContent)
            ChannelLinkerLeaveContent.internalBinaryWrite(message.leaveContent, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerKickOutContent kick_out_content = 12; */
        if (message.kickOutContent)
            ChannelLinkerKickOutContent.internalBinaryWrite(message.kickOutContent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerLinkedListChangeContent linked_list_change_content = 13; */
        if (message.linkedListChangeContent)
            ChannelLinkerLinkedListChangeContent.internalBinaryWrite(message.linkedListChangeContent, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerSilenceContent silence_status_content = 14; */
        if (message.silenceStatusContent)
            ChannelLinkerSilenceContent.internalBinaryWrite(message.silenceStatusContent, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* im.ChannelLinkerApplyContent apply_content = 15; */
        if (message.applyContent)
            ChannelLinkerApplyContent.internalBinaryWrite(message.applyContent, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelLinkMessage
 */
export const RoomChannelLinkMessage = new RoomChannelLinkMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerApplyContent$Type extends MessageType<ChannelLinkerApplyContent> {
    constructor() {
        super("im.ChannelLinkerApplyContent", [
            { no: 1, name: "applicant_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "applicant_sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "applicant_user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerApplyContent>): ChannelLinkerApplyContent {
        const message = { applicantUserId: 0n, applicantSecUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerApplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerApplyContent): ChannelLinkerApplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 applicant_user_id */ 1:
                    message.applicantUserId = reader.int64().toBigInt();
                    break;
                case /* string applicant_sec_user_id */ 2:
                    message.applicantSecUserId = reader.string();
                    break;
                case /* data.User applicant_user */ 3:
                    message.applicantUser = User.internalBinaryRead(reader, reader.uint32(), options, message.applicantUser);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerApplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 applicant_user_id = 1; */
        if (message.applicantUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.applicantUserId);
        /* string applicant_sec_user_id = 2; */
        if (message.applicantSecUserId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.applicantSecUserId);
        /* data.User applicant_user = 3; */
        if (message.applicantUser)
            User.internalBinaryWrite(message.applicantUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerApplyContent
 */
export const ChannelLinkerApplyContent = new ChannelLinkerApplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerCreateContent$Type extends MessageType<ChannelLinkerCreateContent> {
    constructor() {
        super("im.ChannelLinkerCreateContent", [
            { no: 1, name: "owner_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "link_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "sec_owner_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerCreateContent>): ChannelLinkerCreateContent {
        const message = { ownerId: 0n, roomId: 0n, linkType: 0n, secOwnerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerCreateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerCreateContent): ChannelLinkerCreateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 owner_id */ 1:
                    message.ownerId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 2:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 link_type */ 3:
                    message.linkType = reader.int64().toBigInt();
                    break;
                case /* string sec_owner_id */ 4:
                    message.secOwnerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerCreateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 owner_id = 1; */
        if (message.ownerId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.ownerId);
        /* int64 room_id = 2; */
        if (message.roomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.roomId);
        /* int64 link_type = 3; */
        if (message.linkType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.linkType);
        /* string sec_owner_id = 4; */
        if (message.secOwnerId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.secOwnerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerCreateContent
 */
export const ChannelLinkerCreateContent = new ChannelLinkerCreateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerCloseContent$Type extends MessageType<ChannelLinkerCloseContent> {
    constructor() {
        super("im.ChannelLinkerCloseContent", [
            { no: 1, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerCloseContent>): ChannelLinkerCloseContent {
        const message = { source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerCloseContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerCloseContent): ChannelLinkerCloseContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 source */ 1:
                    message.source = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerCloseContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 source = 1; */
        if (message.source !== 0)
            writer.tag(1, WireType.Varint).int32(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerCloseContent
 */
export const ChannelLinkerCloseContent = new ChannelLinkerCloseContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerInviteContent$Type extends MessageType<ChannelLinkerInviteContent> {
    constructor() {
        super("im.ChannelLinkerInviteContent", [
            { no: 1, name: "inviter_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "invitee_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "inviter_sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "invitee_sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerInviteContent>): ChannelLinkerInviteContent {
        const message = { inviterUserId: 0n, inviteeUserId: 0n, prompt: "", inviterSecUserId: "", inviteeSecUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerInviteContent): ChannelLinkerInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 inviter_user_id */ 1:
                    message.inviterUserId = reader.int64().toBigInt();
                    break;
                case /* int64 invitee_user_id */ 2:
                    message.inviteeUserId = reader.int64().toBigInt();
                    break;
                case /* string prompt */ 3:
                    message.prompt = reader.string();
                    break;
                case /* string inviter_sec_user_id */ 4:
                    message.inviterSecUserId = reader.string();
                    break;
                case /* string invitee_sec_user_id */ 5:
                    message.inviteeSecUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 inviter_user_id = 1; */
        if (message.inviterUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.inviterUserId);
        /* int64 invitee_user_id = 2; */
        if (message.inviteeUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.inviteeUserId);
        /* string prompt = 3; */
        if (message.prompt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.prompt);
        /* string inviter_sec_user_id = 4; */
        if (message.inviterSecUserId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.inviterSecUserId);
        /* string invitee_sec_user_id = 5; */
        if (message.inviteeSecUserId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.inviteeSecUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerInviteContent
 */
export const ChannelLinkerInviteContent = new ChannelLinkerInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerReplyContent$Type extends MessageType<ChannelLinkerReplyContent> {
    constructor() {
        super("im.ChannelLinkerReplyContent", [
            { no: 1, name: "inviter_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "invitee_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "reply_result", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "inviter_sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "invitee_sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerReplyContent>): ChannelLinkerReplyContent {
        const message = { inviterUserId: 0n, inviteeUserId: 0n, replyResult: 0, prompt: "", inviterSecUserId: "", inviteeSecUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerReplyContent): ChannelLinkerReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 inviter_user_id */ 1:
                    message.inviterUserId = reader.int64().toBigInt();
                    break;
                case /* int64 invitee_user_id */ 2:
                    message.inviteeUserId = reader.int64().toBigInt();
                    break;
                case /* int32 reply_result */ 3:
                    message.replyResult = reader.int32();
                    break;
                case /* string prompt */ 4:
                    message.prompt = reader.string();
                    break;
                case /* string inviter_sec_user_id */ 5:
                    message.inviterSecUserId = reader.string();
                    break;
                case /* string invitee_sec_user_id */ 6:
                    message.inviteeSecUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 inviter_user_id = 1; */
        if (message.inviterUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.inviterUserId);
        /* int64 invitee_user_id = 2; */
        if (message.inviteeUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.inviteeUserId);
        /* int32 reply_result = 3; */
        if (message.replyResult !== 0)
            writer.tag(3, WireType.Varint).int32(message.replyResult);
        /* string prompt = 4; */
        if (message.prompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.prompt);
        /* string inviter_sec_user_id = 5; */
        if (message.inviterSecUserId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.inviterSecUserId);
        /* string invitee_sec_user_id = 6; */
        if (message.inviteeSecUserId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.inviteeSecUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerReplyContent
 */
export const ChannelLinkerReplyContent = new ChannelLinkerReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerPermitContent$Type extends MessageType<ChannelLinkerPermitContent> {
    constructor() {
        super("im.ChannelLinkerPermitContent", [
            { no: 1, name: "applicant_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "approver_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "permit_result", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "applicant_sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "approver_sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerPermitContent>): ChannelLinkerPermitContent {
        const message = { applicantUserId: 0n, approverUserId: 0n, permitResult: 0, prompt: "", applicantSecUserId: "", approverSecUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerPermitContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerPermitContent): ChannelLinkerPermitContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 applicant_user_id */ 1:
                    message.applicantUserId = reader.int64().toBigInt();
                    break;
                case /* int64 approver_user_id */ 2:
                    message.approverUserId = reader.int64().toBigInt();
                    break;
                case /* int32 permit_result */ 3:
                    message.permitResult = reader.int32();
                    break;
                case /* string prompt */ 4:
                    message.prompt = reader.string();
                    break;
                case /* string applicant_sec_user_id */ 5:
                    message.applicantSecUserId = reader.string();
                    break;
                case /* string approver_sec_user_id */ 6:
                    message.approverSecUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerPermitContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 applicant_user_id = 1; */
        if (message.applicantUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.applicantUserId);
        /* int64 approver_user_id = 2; */
        if (message.approverUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.approverUserId);
        /* int32 permit_result = 3; */
        if (message.permitResult !== 0)
            writer.tag(3, WireType.Varint).int32(message.permitResult);
        /* string prompt = 4; */
        if (message.prompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.prompt);
        /* string applicant_sec_user_id = 5; */
        if (message.applicantSecUserId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.applicantSecUserId);
        /* string approver_sec_user_id = 6; */
        if (message.approverSecUserId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.approverSecUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerPermitContent
 */
export const ChannelLinkerPermitContent = new ChannelLinkerPermitContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerEnterContent$Type extends MessageType<ChannelLinkerEnterContent> {
    constructor() {
        super("im.ChannelLinkerEnterContent", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerEnterContent>): ChannelLinkerEnterContent {
        const message = { userId: 0n, secUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerEnterContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerEnterContent): ChannelLinkerEnterContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string sec_user_id */ 2:
                    message.secUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerEnterContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string sec_user_id = 2; */
        if (message.secUserId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerEnterContent
 */
export const ChannelLinkerEnterContent = new ChannelLinkerEnterContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerLeaveContent$Type extends MessageType<ChannelLinkerLeaveContent> {
    constructor() {
        super("im.ChannelLinkerLeaveContent", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sec_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerLeaveContent>): ChannelLinkerLeaveContent {
        const message = { userId: 0n, secUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerLeaveContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerLeaveContent): ChannelLinkerLeaveContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string sec_user_id */ 2:
                    message.secUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerLeaveContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string sec_user_id = 2; */
        if (message.secUserId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerLeaveContent
 */
export const ChannelLinkerLeaveContent = new ChannelLinkerLeaveContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerKickOutContent$Type extends MessageType<ChannelLinkerKickOutContent> {
    constructor() {
        super("im.ChannelLinkerKickOutContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sec_from_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerKickOutContent>): ChannelLinkerKickOutContent {
        const message = { fromUserId: 0n, prompt: "", secFromUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerKickOutContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerKickOutContent): ChannelLinkerKickOutContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* string prompt */ 2:
                    message.prompt = reader.string();
                    break;
                case /* string sec_from_user_id */ 3:
                    message.secFromUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerKickOutContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* string prompt = 2; */
        if (message.prompt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.prompt);
        /* string sec_from_user_id = 3; */
        if (message.secFromUserId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.secFromUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerKickOutContent
 */
export const ChannelLinkerKickOutContent = new ChannelLinkerKickOutContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerLinkedListChangeContent$Type extends MessageType<ChannelLinkerLinkedListChangeContent> {
    constructor() {
        super("im.ChannelLinkerLinkedListChangeContent", [
            { no: 1, name: "channel_linkmic_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChannelListUser },
            { no: 2, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rtc_room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerLinkedListChangeContent>): ChannelLinkerLinkedListChangeContent {
        const message = { channelLinkmicUsers: [], version: 0n, rtcRoomIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerLinkedListChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerLinkedListChangeContent): ChannelLinkerLinkedListChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ChannelListUser channel_linkmic_users */ 1:
                    message.channelLinkmicUsers.push(ChannelListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 version */ 2:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* string rtc_room_id_str */ 3:
                    message.rtcRoomIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerLinkedListChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ChannelListUser channel_linkmic_users = 1; */
        for (let i = 0; i < message.channelLinkmicUsers.length; i++)
            ChannelListUser.internalBinaryWrite(message.channelLinkmicUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 2; */
        if (message.version !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.version);
        /* string rtc_room_id_str = 3; */
        if (message.rtcRoomIdStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rtcRoomIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerLinkedListChangeContent
 */
export const ChannelLinkerLinkedListChangeContent = new ChannelLinkerLinkedListChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelLinkerSilenceContent$Type extends MessageType<ChannelLinkerSilenceContent> {
    constructor() {
        super("im.ChannelLinkerSilenceContent", [
            { no: 1, name: "silence_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "ack_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "sec_from_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "sec_to_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "silence_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelLinkerSilenceContent>): ChannelLinkerSilenceContent {
        const message = { silenceStatus: 0, fromUserId: 0n, toUserId: 0n, ackMessage: "", version: 0n, secFromUserId: "", secToUserId: "", silenceSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelLinkerSilenceContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelLinkerSilenceContent): ChannelLinkerSilenceContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 silence_status */ 1:
                    message.silenceStatus = reader.int32();
                    break;
                case /* int64 from_user_id */ 2:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 3:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* string ack_message */ 4:
                    message.ackMessage = reader.string();
                    break;
                case /* uint64 version */ 5:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* string sec_from_user_id */ 6:
                    message.secFromUserId = reader.string();
                    break;
                case /* string sec_to_user_id */ 7:
                    message.secToUserId = reader.string();
                    break;
                case /* int32 silence_source */ 8:
                    message.silenceSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelLinkerSilenceContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 silence_status = 1; */
        if (message.silenceStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.silenceStatus);
        /* int64 from_user_id = 2; */
        if (message.fromUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 3; */
        if (message.toUserId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.toUserId);
        /* string ack_message = 4; */
        if (message.ackMessage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.ackMessage);
        /* uint64 version = 5; */
        if (message.version !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.version);
        /* string sec_from_user_id = 6; */
        if (message.secFromUserId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.secFromUserId);
        /* string sec_to_user_id = 7; */
        if (message.secToUserId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.secToUserId);
        /* int32 silence_source = 8; */
        if (message.silenceSource !== 0)
            writer.tag(8, WireType.Varint).int32(message.silenceSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelLinkerSilenceContent
 */
export const ChannelLinkerSilenceContent = new ChannelLinkerSilenceContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserContribute$Type extends MessageType<UserContribute> {
    constructor() {
        super("im.UserContribute", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "avatar_thumb", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<UserContribute>): UserContribute {
        const message = { userId: 0n, rank: 0n, score: 0n, nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserContribute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserContribute): UserContribute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 2:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* int64 score */ 3:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 4:
                    message.nickname = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 5:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserContribute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* int64 rank = 2; */
        if (message.rank !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rank);
        /* int64 score = 3; */
        if (message.score !== 0n)
            writer.tag(3, WireType.Varint).int64(message.score);
        /* string nickname = 4; */
        if (message.nickname !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nickname);
        /* data.Image avatar_thumb = 5; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserContribute
 */
export const UserContribute = new UserContribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerContributeMessage$Type extends MessageType<LinkerContributeMessage> {
    constructor() {
        super("im.LinkerContributeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "total_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_contribute_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserContribute },
            { no: 5, name: "micro_time_stamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "total_score_real_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "total_score_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "quick_interact", kind: "message", T: () => LinkmicQuickInteract }
        ]);
    }
    create(value?: PartialMessage<LinkerContributeMessage>): LinkerContributeMessage {
        const message = { userId: 0n, totalScore: 0n, userContributeList: [], microTimeStamp: 0n, scene: 0n, totalScoreRealStr: "", totalScoreStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerContributeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerContributeMessage): LinkerContributeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 total_score */ 3:
                    message.totalScore = reader.int64().toBigInt();
                    break;
                case /* repeated im.UserContribute user_contribute_list */ 4:
                    message.userContributeList.push(UserContribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 micro_time_stamp */ 5:
                    message.microTimeStamp = reader.int64().toBigInt();
                    break;
                case /* int64 scene */ 6:
                    message.scene = reader.int64().toBigInt();
                    break;
                case /* string total_score_real_str */ 7:
                    message.totalScoreRealStr = reader.string();
                    break;
                case /* string total_score_str */ 8:
                    message.totalScoreStr = reader.string();
                    break;
                case /* data.LinkmicQuickInteract quick_interact */ 9:
                    message.quickInteract = LinkmicQuickInteract.internalBinaryRead(reader, reader.uint32(), options, message.quickInteract);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerContributeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* int64 total_score = 3; */
        if (message.totalScore !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalScore);
        /* repeated im.UserContribute user_contribute_list = 4; */
        for (let i = 0; i < message.userContributeList.length; i++)
            UserContribute.internalBinaryWrite(message.userContributeList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 micro_time_stamp = 5; */
        if (message.microTimeStamp !== 0n)
            writer.tag(5, WireType.Varint).int64(message.microTimeStamp);
        /* int64 scene = 6; */
        if (message.scene !== 0n)
            writer.tag(6, WireType.Varint).int64(message.scene);
        /* string total_score_real_str = 7; */
        if (message.totalScoreRealStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.totalScoreRealStr);
        /* string total_score_str = 8; */
        if (message.totalScoreStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.totalScoreStr);
        /* data.LinkmicQuickInteract quick_interact = 9; */
        if (message.quickInteract)
            LinkmicQuickInteract.internalBinaryWrite(message.quickInteract, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerContributeMessage
 */
export const LinkerContributeMessage = new LinkerContributeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMessage$Type extends MessageType<LinkMessage> {
    constructor() {
        super("im.LinkMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "linker_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "invite_content", kind: "message", T: () => LinkerInviteContent },
            { no: 6, name: "reply_content", kind: "message", T: () => LinkerReplyContent },
            { no: 7, name: "create_content", kind: "message", T: () => LinkerCreateContent },
            { no: 8, name: "close_content", kind: "message", T: () => LinkerCloseContent },
            { no: 9, name: "enter_content", kind: "message", T: () => LinkerEnterContent },
            { no: 10, name: "leave_content", kind: "message", T: () => LinkerLeaveContent },
            { no: 11, name: "cancel_content", kind: "message", T: () => LinkerCancelContent },
            { no: 12, name: "kick_out_content", kind: "message", T: () => LinkerKickOutContent },
            { no: 13, name: "linked_list_change_content", kind: "message", T: () => LinkerLinkedListChangeContent },
            { no: 14, name: "update_user_content", kind: "message", T: () => LinkerUpdateUserContent },
            { no: 15, name: "waiting_list_change_content", kind: "message", T: () => LinkerWaitingListChangeContent },
            { no: 16, name: "ban_content", kind: "message", T: () => LinkerBanContent },
            { no: 17, name: "item_content", kind: "message", T: () => LinkerItemContent },
            { no: 18, name: "violation_reminder_content", kind: "message", T: () => LinkerViolationReminderContent },
            { no: 19, name: "update_link_type_apply_content", kind: "message", T: () => LinkerUpdateLinkTypeApplyContent },
            { no: 20, name: "update_link_type_reply_content", kind: "message", T: () => LinkerUpdateLinkTypeReplyContent },
            { no: 21, name: "avatar_audit_content", kind: "message", T: () => LinkerAvatarAuditContent },
            { no: 22, name: "apply_expired_content", kind: "message", T: () => LinkerApplyExpiredContent },
            { no: 23, name: "apply_strong_reminder_content", kind: "message", T: () => LinkerApplyStrongReminderContent },
            { no: 24, name: "anchor_stream_switch_content", kind: "message", T: () => LinkerAnchorStreamSwitchContent },
            { no: 25, name: "click_screen_content", kind: "message", T: () => LinkerClickScreenContent },
            { no: 26, name: "lock_position_content", kind: "message", T: () => LinkerLockPositionContent },
            { no: 27, name: "follow_strong_guide_content", kind: "message", T: () => LinkerFollowStrongGuideContent },
            { no: 28, name: "share_video_im_content", kind: "message", T: () => LinkerShareVideoImContent },
            { no: 29, name: "guest_invite_content", kind: "message", T: () => LinkerGuestInviteContent },
            { no: 30, name: "exit_cast_screen_content", kind: "message", T: () => LinkerGuestExitCastScreenContent },
            { no: 31, name: "switch_scene_content", kind: "message", T: () => LinkerSwitchSceneContent },
            { no: 32, name: "link_phase_enter_next_content", kind: "message", T: () => LinkPhaseEnterNextNotifyContent },
            { no: 33, name: "change_play_mode_content", kind: "message", T: () => LinkerChangePlayModeContent },
            { no: 34, name: "low_balance_for_paid_linkmic_content", kind: "message", T: () => LinkerLowBalanceForPaidLinkmicContent },
            { no: 35, name: "degrade_alert_content", kind: "message", T: () => LinkerDegradeAlertContent },
            { no: 36, name: "enlarge_guest_invite_content", kind: "message", T: () => LinkerEnlargeGuestInviteContent },
            { no: 37, name: "enlarge_guest_reply_content", kind: "message", T: () => LinkerEnlargeGuestReplyContent },
            { no: 38, name: "enlarge_guest_apply_content", kind: "message", T: () => LinkerEnlargeGuestApplyContent },
            { no: 39, name: "prepare_apply_content", kind: "message", T: () => LinkPrepareApplyContent },
            { no: 40, name: "cross_room_update_content", kind: "message", T: () => LinkerCrossRoomUpdateContent },
            { no: 41, name: "change_multi_pk_team_info_content", kind: "message", T: () => LinkerChangeMultiPKTeamInfoContent },
            { no: 42, name: "cross_room_link_invite_content", kind: "message", T: () => CrossRoomLinkInviteContent },
            { no: 43, name: "cross_room_link_reply_content", kind: "message", T: () => CrossRoomLinkReplyContent },
            { no: 44, name: "cross_room_link_cancel_invite_content", kind: "message", T: () => CrossRoomLinkCancelInviteContent },
            { no: 45, name: "linker_resume_audience_content", kind: "message", T: () => LinkerResumeAudienceContent },
            { no: 46, name: "linker_battle_connect_content", kind: "message", T: () => LinkerBattleConnectContent },
            { no: 47, name: "linker_resume_apply_content", kind: "message", T: () => LinkerResumeApplyContent },
            { no: 48, name: "cross_room_rtc_info_content", kind: "message", T: () => CrossRoomRTCInfoContent },
            { no: 49, name: "anchor_update_linkmic_config_content", kind: "message", T: () => AnchorUpdateLinkmicConfigContent },
            { no: 50, name: "anchor_update_layout_content", kind: "message", T: () => AnchorUpdateLayoutContent },
            { no: 52, name: "apply_rank_change_content", kind: "message", T: () => LinkerApplyRankChangeContent },
            { no: 53, name: "change_media_content", kind: "message", T: () => LinkerChangeMediaInfoContent },
            { no: 54, name: "linker_ui_layout_change_content", kind: "message", T: () => LinkerUILayoutChangeContent },
            { no: 55, name: "linker_update_waiting_user_offset_content", kind: "message", T: () => LinkerUpdateWaitingUserOffsetContent },
            { no: 56, name: "linker_remove_waiting_user_content", kind: "message", T: () => LinkerRemoveWaitingUserContent },
            { no: 101, name: "sys_kick_out_content", kind: "message", T: () => LinkerSysKickOutContent },
            { no: 199, name: "fallback_scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 200, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 201, name: "linker_base_info", kind: "message", T: () => LinkerBaseInfo },
            { no: 202, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<LinkMessage>): LinkMessage {
        const message = { messageType: 0n, linkerId: 0n, scene: 0n, fallbackScene: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMessage): LinkMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* int64 linker_id */ 3:
                    message.linkerId = reader.int64().toBigInt();
                    break;
                case /* int64 scene */ 4:
                    message.scene = reader.int64().toBigInt();
                    break;
                case /* im.LinkerInviteContent invite_content */ 5:
                    message.inviteContent = LinkerInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.inviteContent);
                    break;
                case /* im.LinkerReplyContent reply_content */ 6:
                    message.replyContent = LinkerReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.replyContent);
                    break;
                case /* im.LinkerCreateContent create_content */ 7:
                    message.createContent = LinkerCreateContent.internalBinaryRead(reader, reader.uint32(), options, message.createContent);
                    break;
                case /* im.LinkerCloseContent close_content */ 8:
                    message.closeContent = LinkerCloseContent.internalBinaryRead(reader, reader.uint32(), options, message.closeContent);
                    break;
                case /* im.LinkerEnterContent enter_content */ 9:
                    message.enterContent = LinkerEnterContent.internalBinaryRead(reader, reader.uint32(), options, message.enterContent);
                    break;
                case /* im.LinkerLeaveContent leave_content */ 10:
                    message.leaveContent = LinkerLeaveContent.internalBinaryRead(reader, reader.uint32(), options, message.leaveContent);
                    break;
                case /* im.LinkerCancelContent cancel_content */ 11:
                    message.cancelContent = LinkerCancelContent.internalBinaryRead(reader, reader.uint32(), options, message.cancelContent);
                    break;
                case /* im.LinkerKickOutContent kick_out_content */ 12:
                    message.kickOutContent = LinkerKickOutContent.internalBinaryRead(reader, reader.uint32(), options, message.kickOutContent);
                    break;
                case /* im.LinkerLinkedListChangeContent linked_list_change_content */ 13:
                    message.linkedListChangeContent = LinkerLinkedListChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.linkedListChangeContent);
                    break;
                case /* im.LinkerUpdateUserContent update_user_content */ 14:
                    message.updateUserContent = LinkerUpdateUserContent.internalBinaryRead(reader, reader.uint32(), options, message.updateUserContent);
                    break;
                case /* im.LinkerWaitingListChangeContent waiting_list_change_content */ 15:
                    message.waitingListChangeContent = LinkerWaitingListChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.waitingListChangeContent);
                    break;
                case /* im.LinkerBanContent ban_content */ 16:
                    message.banContent = LinkerBanContent.internalBinaryRead(reader, reader.uint32(), options, message.banContent);
                    break;
                case /* im.LinkerItemContent item_content */ 17:
                    message.itemContent = LinkerItemContent.internalBinaryRead(reader, reader.uint32(), options, message.itemContent);
                    break;
                case /* im.LinkerViolationReminderContent violation_reminder_content */ 18:
                    message.violationReminderContent = LinkerViolationReminderContent.internalBinaryRead(reader, reader.uint32(), options, message.violationReminderContent);
                    break;
                case /* im.LinkerUpdateLinkTypeApplyContent update_link_type_apply_content */ 19:
                    message.updateLinkTypeApplyContent = LinkerUpdateLinkTypeApplyContent.internalBinaryRead(reader, reader.uint32(), options, message.updateLinkTypeApplyContent);
                    break;
                case /* im.LinkerUpdateLinkTypeReplyContent update_link_type_reply_content */ 20:
                    message.updateLinkTypeReplyContent = LinkerUpdateLinkTypeReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.updateLinkTypeReplyContent);
                    break;
                case /* im.LinkerAvatarAuditContent avatar_audit_content */ 21:
                    message.avatarAuditContent = LinkerAvatarAuditContent.internalBinaryRead(reader, reader.uint32(), options, message.avatarAuditContent);
                    break;
                case /* im.LinkerApplyExpiredContent apply_expired_content */ 22:
                    message.applyExpiredContent = LinkerApplyExpiredContent.internalBinaryRead(reader, reader.uint32(), options, message.applyExpiredContent);
                    break;
                case /* im.LinkerApplyStrongReminderContent apply_strong_reminder_content */ 23:
                    message.applyStrongReminderContent = LinkerApplyStrongReminderContent.internalBinaryRead(reader, reader.uint32(), options, message.applyStrongReminderContent);
                    break;
                case /* im.LinkerAnchorStreamSwitchContent anchor_stream_switch_content */ 24:
                    message.anchorStreamSwitchContent = LinkerAnchorStreamSwitchContent.internalBinaryRead(reader, reader.uint32(), options, message.anchorStreamSwitchContent);
                    break;
                case /* im.LinkerClickScreenContent click_screen_content */ 25:
                    message.clickScreenContent = LinkerClickScreenContent.internalBinaryRead(reader, reader.uint32(), options, message.clickScreenContent);
                    break;
                case /* im.LinkerLockPositionContent lock_position_content */ 26:
                    message.lockPositionContent = LinkerLockPositionContent.internalBinaryRead(reader, reader.uint32(), options, message.lockPositionContent);
                    break;
                case /* im.LinkerFollowStrongGuideContent follow_strong_guide_content */ 27:
                    message.followStrongGuideContent = LinkerFollowStrongGuideContent.internalBinaryRead(reader, reader.uint32(), options, message.followStrongGuideContent);
                    break;
                case /* im.LinkerShareVideoImContent share_video_im_content */ 28:
                    message.shareVideoImContent = LinkerShareVideoImContent.internalBinaryRead(reader, reader.uint32(), options, message.shareVideoImContent);
                    break;
                case /* im.LinkerGuestInviteContent guest_invite_content */ 29:
                    message.guestInviteContent = LinkerGuestInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.guestInviteContent);
                    break;
                case /* im.LinkerGuestExitCastScreenContent exit_cast_screen_content */ 30:
                    message.exitCastScreenContent = LinkerGuestExitCastScreenContent.internalBinaryRead(reader, reader.uint32(), options, message.exitCastScreenContent);
                    break;
                case /* im.LinkerSwitchSceneContent switch_scene_content */ 31:
                    message.switchSceneContent = LinkerSwitchSceneContent.internalBinaryRead(reader, reader.uint32(), options, message.switchSceneContent);
                    break;
                case /* im.LinkPhaseEnterNextNotifyContent link_phase_enter_next_content */ 32:
                    message.linkPhaseEnterNextContent = LinkPhaseEnterNextNotifyContent.internalBinaryRead(reader, reader.uint32(), options, message.linkPhaseEnterNextContent);
                    break;
                case /* im.LinkerChangePlayModeContent change_play_mode_content */ 33:
                    message.changePlayModeContent = LinkerChangePlayModeContent.internalBinaryRead(reader, reader.uint32(), options, message.changePlayModeContent);
                    break;
                case /* im.LinkerLowBalanceForPaidLinkmicContent low_balance_for_paid_linkmic_content */ 34:
                    message.lowBalanceForPaidLinkmicContent = LinkerLowBalanceForPaidLinkmicContent.internalBinaryRead(reader, reader.uint32(), options, message.lowBalanceForPaidLinkmicContent);
                    break;
                case /* im.LinkerDegradeAlertContent degrade_alert_content */ 35:
                    message.degradeAlertContent = LinkerDegradeAlertContent.internalBinaryRead(reader, reader.uint32(), options, message.degradeAlertContent);
                    break;
                case /* im.LinkerEnlargeGuestInviteContent enlarge_guest_invite_content */ 36:
                    message.enlargeGuestInviteContent = LinkerEnlargeGuestInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.enlargeGuestInviteContent);
                    break;
                case /* im.LinkerEnlargeGuestReplyContent enlarge_guest_reply_content */ 37:
                    message.enlargeGuestReplyContent = LinkerEnlargeGuestReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.enlargeGuestReplyContent);
                    break;
                case /* im.LinkerEnlargeGuestApplyContent enlarge_guest_apply_content */ 38:
                    message.enlargeGuestApplyContent = LinkerEnlargeGuestApplyContent.internalBinaryRead(reader, reader.uint32(), options, message.enlargeGuestApplyContent);
                    break;
                case /* im.LinkPrepareApplyContent prepare_apply_content */ 39:
                    message.prepareApplyContent = LinkPrepareApplyContent.internalBinaryRead(reader, reader.uint32(), options, message.prepareApplyContent);
                    break;
                case /* im.LinkerCrossRoomUpdateContent cross_room_update_content */ 40:
                    message.crossRoomUpdateContent = LinkerCrossRoomUpdateContent.internalBinaryRead(reader, reader.uint32(), options, message.crossRoomUpdateContent);
                    break;
                case /* im.LinkerChangeMultiPKTeamInfoContent change_multi_pk_team_info_content */ 41:
                    message.changeMultiPkTeamInfoContent = LinkerChangeMultiPKTeamInfoContent.internalBinaryRead(reader, reader.uint32(), options, message.changeMultiPkTeamInfoContent);
                    break;
                case /* im.CrossRoomLinkInviteContent cross_room_link_invite_content */ 42:
                    message.crossRoomLinkInviteContent = CrossRoomLinkInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.crossRoomLinkInviteContent);
                    break;
                case /* im.CrossRoomLinkReplyContent cross_room_link_reply_content */ 43:
                    message.crossRoomLinkReplyContent = CrossRoomLinkReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.crossRoomLinkReplyContent);
                    break;
                case /* im.CrossRoomLinkCancelInviteContent cross_room_link_cancel_invite_content */ 44:
                    message.crossRoomLinkCancelInviteContent = CrossRoomLinkCancelInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.crossRoomLinkCancelInviteContent);
                    break;
                case /* im.LinkerResumeAudienceContent linker_resume_audience_content */ 45:
                    message.linkerResumeAudienceContent = LinkerResumeAudienceContent.internalBinaryRead(reader, reader.uint32(), options, message.linkerResumeAudienceContent);
                    break;
                case /* im.LinkerBattleConnectContent linker_battle_connect_content */ 46:
                    message.linkerBattleConnectContent = LinkerBattleConnectContent.internalBinaryRead(reader, reader.uint32(), options, message.linkerBattleConnectContent);
                    break;
                case /* im.LinkerResumeApplyContent linker_resume_apply_content */ 47:
                    message.linkerResumeApplyContent = LinkerResumeApplyContent.internalBinaryRead(reader, reader.uint32(), options, message.linkerResumeApplyContent);
                    break;
                case /* im.CrossRoomRTCInfoContent cross_room_rtc_info_content */ 48:
                    message.crossRoomRtcInfoContent = CrossRoomRTCInfoContent.internalBinaryRead(reader, reader.uint32(), options, message.crossRoomRtcInfoContent);
                    break;
                case /* im.AnchorUpdateLinkmicConfigContent anchor_update_linkmic_config_content */ 49:
                    message.anchorUpdateLinkmicConfigContent = AnchorUpdateLinkmicConfigContent.internalBinaryRead(reader, reader.uint32(), options, message.anchorUpdateLinkmicConfigContent);
                    break;
                case /* im.AnchorUpdateLayoutContent anchor_update_layout_content */ 50:
                    message.anchorUpdateLayoutContent = AnchorUpdateLayoutContent.internalBinaryRead(reader, reader.uint32(), options, message.anchorUpdateLayoutContent);
                    break;
                case /* im.LinkerApplyRankChangeContent apply_rank_change_content */ 52:
                    message.applyRankChangeContent = LinkerApplyRankChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.applyRankChangeContent);
                    break;
                case /* im.LinkerChangeMediaInfoContent change_media_content */ 53:
                    message.changeMediaContent = LinkerChangeMediaInfoContent.internalBinaryRead(reader, reader.uint32(), options, message.changeMediaContent);
                    break;
                case /* im.LinkerUILayoutChangeContent linker_ui_layout_change_content */ 54:
                    message.linkerUiLayoutChangeContent = LinkerUILayoutChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.linkerUiLayoutChangeContent);
                    break;
                case /* im.LinkerUpdateWaitingUserOffsetContent linker_update_waiting_user_offset_content */ 55:
                    message.linkerUpdateWaitingUserOffsetContent = LinkerUpdateWaitingUserOffsetContent.internalBinaryRead(reader, reader.uint32(), options, message.linkerUpdateWaitingUserOffsetContent);
                    break;
                case /* im.LinkerRemoveWaitingUserContent linker_remove_waiting_user_content */ 56:
                    message.linkerRemoveWaitingUserContent = LinkerRemoveWaitingUserContent.internalBinaryRead(reader, reader.uint32(), options, message.linkerRemoveWaitingUserContent);
                    break;
                case /* im.LinkerSysKickOutContent sys_kick_out_content */ 101:
                    message.sysKickOutContent = LinkerSysKickOutContent.internalBinaryRead(reader, reader.uint32(), options, message.sysKickOutContent);
                    break;
                case /* int64 fallback_scene */ 199:
                    message.fallbackScene = reader.int64().toBigInt();
                    break;
                case /* string extra */ 200:
                    message.extra = reader.string();
                    break;
                case /* data.LinkerBaseInfo linker_base_info */ 201:
                    message.linkerBaseInfo = LinkerBaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkerBaseInfo);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 202:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* int64 linker_id = 3; */
        if (message.linkerId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.linkerId);
        /* int64 scene = 4; */
        if (message.scene !== 0n)
            writer.tag(4, WireType.Varint).int64(message.scene);
        /* im.LinkerInviteContent invite_content = 5; */
        if (message.inviteContent)
            LinkerInviteContent.internalBinaryWrite(message.inviteContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerReplyContent reply_content = 6; */
        if (message.replyContent)
            LinkerReplyContent.internalBinaryWrite(message.replyContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerCreateContent create_content = 7; */
        if (message.createContent)
            LinkerCreateContent.internalBinaryWrite(message.createContent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerCloseContent close_content = 8; */
        if (message.closeContent)
            LinkerCloseContent.internalBinaryWrite(message.closeContent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerEnterContent enter_content = 9; */
        if (message.enterContent)
            LinkerEnterContent.internalBinaryWrite(message.enterContent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerLeaveContent leave_content = 10; */
        if (message.leaveContent)
            LinkerLeaveContent.internalBinaryWrite(message.leaveContent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerCancelContent cancel_content = 11; */
        if (message.cancelContent)
            LinkerCancelContent.internalBinaryWrite(message.cancelContent, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerKickOutContent kick_out_content = 12; */
        if (message.kickOutContent)
            LinkerKickOutContent.internalBinaryWrite(message.kickOutContent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerLinkedListChangeContent linked_list_change_content = 13; */
        if (message.linkedListChangeContent)
            LinkerLinkedListChangeContent.internalBinaryWrite(message.linkedListChangeContent, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerUpdateUserContent update_user_content = 14; */
        if (message.updateUserContent)
            LinkerUpdateUserContent.internalBinaryWrite(message.updateUserContent, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerWaitingListChangeContent waiting_list_change_content = 15; */
        if (message.waitingListChangeContent)
            LinkerWaitingListChangeContent.internalBinaryWrite(message.waitingListChangeContent, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerBanContent ban_content = 16; */
        if (message.banContent)
            LinkerBanContent.internalBinaryWrite(message.banContent, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerItemContent item_content = 17; */
        if (message.itemContent)
            LinkerItemContent.internalBinaryWrite(message.itemContent, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerViolationReminderContent violation_reminder_content = 18; */
        if (message.violationReminderContent)
            LinkerViolationReminderContent.internalBinaryWrite(message.violationReminderContent, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerUpdateLinkTypeApplyContent update_link_type_apply_content = 19; */
        if (message.updateLinkTypeApplyContent)
            LinkerUpdateLinkTypeApplyContent.internalBinaryWrite(message.updateLinkTypeApplyContent, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerUpdateLinkTypeReplyContent update_link_type_reply_content = 20; */
        if (message.updateLinkTypeReplyContent)
            LinkerUpdateLinkTypeReplyContent.internalBinaryWrite(message.updateLinkTypeReplyContent, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerAvatarAuditContent avatar_audit_content = 21; */
        if (message.avatarAuditContent)
            LinkerAvatarAuditContent.internalBinaryWrite(message.avatarAuditContent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerApplyExpiredContent apply_expired_content = 22; */
        if (message.applyExpiredContent)
            LinkerApplyExpiredContent.internalBinaryWrite(message.applyExpiredContent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerApplyStrongReminderContent apply_strong_reminder_content = 23; */
        if (message.applyStrongReminderContent)
            LinkerApplyStrongReminderContent.internalBinaryWrite(message.applyStrongReminderContent, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerAnchorStreamSwitchContent anchor_stream_switch_content = 24; */
        if (message.anchorStreamSwitchContent)
            LinkerAnchorStreamSwitchContent.internalBinaryWrite(message.anchorStreamSwitchContent, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerClickScreenContent click_screen_content = 25; */
        if (message.clickScreenContent)
            LinkerClickScreenContent.internalBinaryWrite(message.clickScreenContent, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerLockPositionContent lock_position_content = 26; */
        if (message.lockPositionContent)
            LinkerLockPositionContent.internalBinaryWrite(message.lockPositionContent, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerFollowStrongGuideContent follow_strong_guide_content = 27; */
        if (message.followStrongGuideContent)
            LinkerFollowStrongGuideContent.internalBinaryWrite(message.followStrongGuideContent, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerShareVideoImContent share_video_im_content = 28; */
        if (message.shareVideoImContent)
            LinkerShareVideoImContent.internalBinaryWrite(message.shareVideoImContent, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerGuestInviteContent guest_invite_content = 29; */
        if (message.guestInviteContent)
            LinkerGuestInviteContent.internalBinaryWrite(message.guestInviteContent, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerGuestExitCastScreenContent exit_cast_screen_content = 30; */
        if (message.exitCastScreenContent)
            LinkerGuestExitCastScreenContent.internalBinaryWrite(message.exitCastScreenContent, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerSwitchSceneContent switch_scene_content = 31; */
        if (message.switchSceneContent)
            LinkerSwitchSceneContent.internalBinaryWrite(message.switchSceneContent, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkPhaseEnterNextNotifyContent link_phase_enter_next_content = 32; */
        if (message.linkPhaseEnterNextContent)
            LinkPhaseEnterNextNotifyContent.internalBinaryWrite(message.linkPhaseEnterNextContent, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerChangePlayModeContent change_play_mode_content = 33; */
        if (message.changePlayModeContent)
            LinkerChangePlayModeContent.internalBinaryWrite(message.changePlayModeContent, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerLowBalanceForPaidLinkmicContent low_balance_for_paid_linkmic_content = 34; */
        if (message.lowBalanceForPaidLinkmicContent)
            LinkerLowBalanceForPaidLinkmicContent.internalBinaryWrite(message.lowBalanceForPaidLinkmicContent, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerDegradeAlertContent degrade_alert_content = 35; */
        if (message.degradeAlertContent)
            LinkerDegradeAlertContent.internalBinaryWrite(message.degradeAlertContent, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerEnlargeGuestInviteContent enlarge_guest_invite_content = 36; */
        if (message.enlargeGuestInviteContent)
            LinkerEnlargeGuestInviteContent.internalBinaryWrite(message.enlargeGuestInviteContent, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerEnlargeGuestReplyContent enlarge_guest_reply_content = 37; */
        if (message.enlargeGuestReplyContent)
            LinkerEnlargeGuestReplyContent.internalBinaryWrite(message.enlargeGuestReplyContent, writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerEnlargeGuestApplyContent enlarge_guest_apply_content = 38; */
        if (message.enlargeGuestApplyContent)
            LinkerEnlargeGuestApplyContent.internalBinaryWrite(message.enlargeGuestApplyContent, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkPrepareApplyContent prepare_apply_content = 39; */
        if (message.prepareApplyContent)
            LinkPrepareApplyContent.internalBinaryWrite(message.prepareApplyContent, writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerCrossRoomUpdateContent cross_room_update_content = 40; */
        if (message.crossRoomUpdateContent)
            LinkerCrossRoomUpdateContent.internalBinaryWrite(message.crossRoomUpdateContent, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerChangeMultiPKTeamInfoContent change_multi_pk_team_info_content = 41; */
        if (message.changeMultiPkTeamInfoContent)
            LinkerChangeMultiPKTeamInfoContent.internalBinaryWrite(message.changeMultiPkTeamInfoContent, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* im.CrossRoomLinkInviteContent cross_room_link_invite_content = 42; */
        if (message.crossRoomLinkInviteContent)
            CrossRoomLinkInviteContent.internalBinaryWrite(message.crossRoomLinkInviteContent, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* im.CrossRoomLinkReplyContent cross_room_link_reply_content = 43; */
        if (message.crossRoomLinkReplyContent)
            CrossRoomLinkReplyContent.internalBinaryWrite(message.crossRoomLinkReplyContent, writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* im.CrossRoomLinkCancelInviteContent cross_room_link_cancel_invite_content = 44; */
        if (message.crossRoomLinkCancelInviteContent)
            CrossRoomLinkCancelInviteContent.internalBinaryWrite(message.crossRoomLinkCancelInviteContent, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerResumeAudienceContent linker_resume_audience_content = 45; */
        if (message.linkerResumeAudienceContent)
            LinkerResumeAudienceContent.internalBinaryWrite(message.linkerResumeAudienceContent, writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerBattleConnectContent linker_battle_connect_content = 46; */
        if (message.linkerBattleConnectContent)
            LinkerBattleConnectContent.internalBinaryWrite(message.linkerBattleConnectContent, writer.tag(46, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerResumeApplyContent linker_resume_apply_content = 47; */
        if (message.linkerResumeApplyContent)
            LinkerResumeApplyContent.internalBinaryWrite(message.linkerResumeApplyContent, writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* im.CrossRoomRTCInfoContent cross_room_rtc_info_content = 48; */
        if (message.crossRoomRtcInfoContent)
            CrossRoomRTCInfoContent.internalBinaryWrite(message.crossRoomRtcInfoContent, writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* im.AnchorUpdateLinkmicConfigContent anchor_update_linkmic_config_content = 49; */
        if (message.anchorUpdateLinkmicConfigContent)
            AnchorUpdateLinkmicConfigContent.internalBinaryWrite(message.anchorUpdateLinkmicConfigContent, writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* im.AnchorUpdateLayoutContent anchor_update_layout_content = 50; */
        if (message.anchorUpdateLayoutContent)
            AnchorUpdateLayoutContent.internalBinaryWrite(message.anchorUpdateLayoutContent, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerApplyRankChangeContent apply_rank_change_content = 52; */
        if (message.applyRankChangeContent)
            LinkerApplyRankChangeContent.internalBinaryWrite(message.applyRankChangeContent, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerChangeMediaInfoContent change_media_content = 53; */
        if (message.changeMediaContent)
            LinkerChangeMediaInfoContent.internalBinaryWrite(message.changeMediaContent, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerUILayoutChangeContent linker_ui_layout_change_content = 54; */
        if (message.linkerUiLayoutChangeContent)
            LinkerUILayoutChangeContent.internalBinaryWrite(message.linkerUiLayoutChangeContent, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerUpdateWaitingUserOffsetContent linker_update_waiting_user_offset_content = 55; */
        if (message.linkerUpdateWaitingUserOffsetContent)
            LinkerUpdateWaitingUserOffsetContent.internalBinaryWrite(message.linkerUpdateWaitingUserOffsetContent, writer.tag(55, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerRemoveWaitingUserContent linker_remove_waiting_user_content = 56; */
        if (message.linkerRemoveWaitingUserContent)
            LinkerRemoveWaitingUserContent.internalBinaryWrite(message.linkerRemoveWaitingUserContent, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkerSysKickOutContent sys_kick_out_content = 101; */
        if (message.sysKickOutContent)
            LinkerSysKickOutContent.internalBinaryWrite(message.sysKickOutContent, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* int64 fallback_scene = 199; */
        if (message.fallbackScene !== 0n)
            writer.tag(199, WireType.Varint).int64(message.fallbackScene);
        /* string extra = 200; */
        if (message.extra !== "")
            writer.tag(200, WireType.LengthDelimited).string(message.extra);
        /* data.LinkerBaseInfo linker_base_info = 201; */
        if (message.linkerBaseInfo)
            LinkerBaseInfo.internalBinaryWrite(message.linkerBaseInfo, writer.tag(201, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 202; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(202, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMessage
 */
export const LinkMessage = new LinkMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicInfo$Type extends MessageType<LinkmicInfo> {
    constructor() {
        super("im.LinkmicInfo", [
            { no: 1, name: "access_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "link_mic_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "joinable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "confluence_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rtc_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "rtc_app_sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "vendor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "multi_rtc_info", kind: "message", T: () => MultiRtcInfo },
            { no: 12, name: "multi_live_core_info", kind: "message", T: () => MultiLiveCoreInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicInfo>): LinkmicInfo {
        const message = { accessKey: "", linkMicId: 0n, joinable: false, confluenceType: 0, rtcExtInfo: "", rtcAppId: "", rtcAppSign: "", linkmicIdStr: "", vendor: 0n, liveCoreExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicInfo): LinkmicInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_key */ 1:
                    message.accessKey = reader.string();
                    break;
                case /* int64 link_mic_id */ 2:
                    message.linkMicId = reader.int64().toBigInt();
                    break;
                case /* bool joinable */ 3:
                    message.joinable = reader.bool();
                    break;
                case /* int32 confluence_type */ 4:
                    message.confluenceType = reader.int32();
                    break;
                case /* string rtc_ext_info */ 5:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string rtc_app_id */ 6:
                    message.rtcAppId = reader.string();
                    break;
                case /* string rtc_app_sign */ 7:
                    message.rtcAppSign = reader.string();
                    break;
                case /* string linkmic_id_str */ 8:
                    message.linkmicIdStr = reader.string();
                    break;
                case /* int64 vendor */ 9:
                    message.vendor = reader.int64().toBigInt();
                    break;
                case /* string live_core_ext_info */ 10:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* data.MultiRtcInfo multi_rtc_info */ 11:
                    message.multiRtcInfo = MultiRtcInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiRtcInfo);
                    break;
                case /* data.MultiLiveCoreInfo multi_live_core_info */ 12:
                    message.multiLiveCoreInfo = MultiLiveCoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiLiveCoreInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_key = 1; */
        if (message.accessKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessKey);
        /* int64 link_mic_id = 2; */
        if (message.linkMicId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.linkMicId);
        /* bool joinable = 3; */
        if (message.joinable !== false)
            writer.tag(3, WireType.Varint).bool(message.joinable);
        /* int32 confluence_type = 4; */
        if (message.confluenceType !== 0)
            writer.tag(4, WireType.Varint).int32(message.confluenceType);
        /* string rtc_ext_info = 5; */
        if (message.rtcExtInfo !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string rtc_app_id = 6; */
        if (message.rtcAppId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rtcAppId);
        /* string rtc_app_sign = 7; */
        if (message.rtcAppSign !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rtcAppSign);
        /* string linkmic_id_str = 8; */
        if (message.linkmicIdStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.linkmicIdStr);
        /* int64 vendor = 9; */
        if (message.vendor !== 0n)
            writer.tag(9, WireType.Varint).int64(message.vendor);
        /* string live_core_ext_info = 10; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* data.MultiRtcInfo multi_rtc_info = 11; */
        if (message.multiRtcInfo)
            MultiRtcInfo.internalBinaryWrite(message.multiRtcInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiLiveCoreInfo multi_live_core_info = 12; */
        if (message.multiLiveCoreInfo)
            MultiLiveCoreInfo.internalBinaryWrite(message.multiLiveCoreInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicInfo
 */
export const LinkmicInfo = new LinkmicInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerSetting$Type extends MessageType<LinkerSetting> {
    constructor() {
        super("im.LinkerSetting", [
            { no: 1, name: "max_member_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "link_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "owner_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "owner_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "vendor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerSetting>): LinkerSetting {
        const message = { maxMemberLimit: 0n, linkType: 0n, scene: 0n, ownerUserId: 0n, ownerRoomId: 0n, vendor: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerSetting): LinkerSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 max_member_limit */ 1:
                    message.maxMemberLimit = reader.int64().toBigInt();
                    break;
                case /* int64 link_type */ 2:
                    message.linkType = reader.int64().toBigInt();
                    break;
                case /* int64 scene */ 3:
                    message.scene = reader.int64().toBigInt();
                    break;
                case /* int64 owner_user_id */ 4:
                    message.ownerUserId = reader.int64().toBigInt();
                    break;
                case /* int64 owner_room_id */ 5:
                    message.ownerRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 vendor */ 6:
                    message.vendor = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 max_member_limit = 1; */
        if (message.maxMemberLimit !== 0n)
            writer.tag(1, WireType.Varint).int64(message.maxMemberLimit);
        /* int64 link_type = 2; */
        if (message.linkType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.linkType);
        /* int64 scene = 3; */
        if (message.scene !== 0n)
            writer.tag(3, WireType.Varint).int64(message.scene);
        /* int64 owner_user_id = 4; */
        if (message.ownerUserId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.ownerUserId);
        /* int64 owner_room_id = 5; */
        if (message.ownerRoomId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.ownerRoomId);
        /* int64 vendor = 6; */
        if (message.vendor !== 0n)
            writer.tag(6, WireType.Varint).int64(message.vendor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerSetting
 */
export const LinkerSetting = new LinkerSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerInviteContent$Type extends MessageType<LinkerInviteContent> {
    constructor() {
        super("im.LinkerInviteContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "to_rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rtc_join_channel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "vendor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "sec_from_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "to_linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "rtc_push_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "sign_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "invite_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "from_user_linkmic_info", kind: "message", T: () => LinkmicInfo },
            { no: 12, name: "multi_rtc_info", kind: "message", T: () => MultiRtcInfo },
            { no: 13, name: "multi_live_core_info", kind: "message", T: () => MultiLiveCoreInfo },
            { no: 14, name: "multi_pk_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "support_multi_pk_team_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "to_user_linkmic_info", kind: "message", T: () => LinkmicInfo$ },
            { no: 17, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo },
            { no: 18, name: "invite_reject_temporary_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "audience_linker_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "inviter_with_audience", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "invitee_followed_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 22, name: "inviter_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 23, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "to_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "applied_user", kind: "message", T: () => ListUser },
            { no: 26, name: "pre_rtc_info", kind: "message", T: () => PreRTCInfo },
            { no: 27, name: "support_multi_invite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "cur_invite_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 29, name: "wait_sec", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleRivalTag },
            { no: 31, name: "invite_user", kind: "message", T: () => ListUser },
            { no: 32, name: "client_attached_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerInviteContent>): LinkerInviteContent {
        const message = { fromUserId: 0n, fromRoomId: 0n, toRtcExtInfo: "", rtcJoinChannel: false, vendor: 0n, secFromUserId: "", toLinkmicIdStr: "", rtcPushStream: false, signExtra: "", inviteSource: 0, multiPkMode: 0, supportMultiPkTeamMode: false, inviteRejectTemporaryText: "", audienceLinkerDescription: "", inviterWithAudience: false, inviteeFollowedUsers: [], inviterUsers: [], toUserId: 0n, toRoomId: 0n, supportMultiInvite: false, curInviteNum: 0n, waitSec: 0n, tags: [], clientAttachedInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerInviteContent): LinkerInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 from_room_id */ 2:
                    message.fromRoomId = reader.int64().toBigInt();
                    break;
                case /* string to_rtc_ext_info */ 3:
                    message.toRtcExtInfo = reader.string();
                    break;
                case /* bool rtc_join_channel */ 4:
                    message.rtcJoinChannel = reader.bool();
                    break;
                case /* int64 vendor */ 5:
                    message.vendor = reader.int64().toBigInt();
                    break;
                case /* string sec_from_user_id */ 6:
                    message.secFromUserId = reader.string();
                    break;
                case /* string to_linkmic_id_str */ 7:
                    message.toLinkmicIdStr = reader.string();
                    break;
                case /* bool rtc_push_stream */ 8:
                    message.rtcPushStream = reader.bool();
                    break;
                case /* string sign_extra */ 9:
                    message.signExtra = reader.string();
                    break;
                case /* int32 invite_source */ 10:
                    message.inviteSource = reader.int32();
                    break;
                case /* im.LinkmicInfo from_user_linkmic_info */ 11:
                    message.fromUserLinkmicInfo = LinkmicInfo.internalBinaryRead(reader, reader.uint32(), options, message.fromUserLinkmicInfo);
                    break;
                case /* data.MultiRtcInfo multi_rtc_info */ 12:
                    message.multiRtcInfo = MultiRtcInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiRtcInfo);
                    break;
                case /* data.MultiLiveCoreInfo multi_live_core_info */ 13:
                    message.multiLiveCoreInfo = MultiLiveCoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiLiveCoreInfo);
                    break;
                case /* int32 multi_pk_mode */ 14:
                    message.multiPkMode = reader.int32();
                    break;
                case /* bool support_multi_pk_team_mode */ 15:
                    message.supportMultiPkTeamMode = reader.bool();
                    break;
                case /* data.LinkmicInfo to_user_linkmic_info */ 16:
                    message.toUserLinkmicInfo = LinkmicInfo$.internalBinaryRead(reader, reader.uint32(), options, message.toUserLinkmicInfo);
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 17:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                case /* string invite_reject_temporary_text */ 18:
                    message.inviteRejectTemporaryText = reader.string();
                    break;
                case /* string audience_linker_description */ 19:
                    message.audienceLinkerDescription = reader.string();
                    break;
                case /* bool inviter_with_audience */ 20:
                    message.inviterWithAudience = reader.bool();
                    break;
                case /* repeated data.ListUser invitee_followed_users */ 21:
                    message.inviteeFollowedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.ListUser inviter_users */ 22:
                    message.inviterUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 to_user_id */ 23:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_room_id */ 24:
                    message.toRoomId = reader.int64().toBigInt();
                    break;
                case /* data.ListUser applied_user */ 25:
                    message.appliedUser = ListUser.internalBinaryRead(reader, reader.uint32(), options, message.appliedUser);
                    break;
                case /* data.PreRTCInfo pre_rtc_info */ 26:
                    message.preRtcInfo = PreRTCInfo.internalBinaryRead(reader, reader.uint32(), options, message.preRtcInfo);
                    break;
                case /* bool support_multi_invite */ 27:
                    message.supportMultiInvite = reader.bool();
                    break;
                case /* int64 cur_invite_num */ 28:
                    message.curInviteNum = reader.int64().toBigInt();
                    break;
                case /* int64 wait_sec */ 29:
                    message.waitSec = reader.int64().toBigInt();
                    break;
                case /* repeated data.BattleRivalTag tags */ 30:
                    message.tags.push(BattleRivalTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.ListUser invite_user */ 31:
                    message.inviteUser = ListUser.internalBinaryRead(reader, reader.uint32(), options, message.inviteUser);
                    break;
                case /* string client_attached_info */ 32:
                    message.clientAttachedInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 from_room_id = 2; */
        if (message.fromRoomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fromRoomId);
        /* string to_rtc_ext_info = 3; */
        if (message.toRtcExtInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toRtcExtInfo);
        /* bool rtc_join_channel = 4; */
        if (message.rtcJoinChannel !== false)
            writer.tag(4, WireType.Varint).bool(message.rtcJoinChannel);
        /* int64 vendor = 5; */
        if (message.vendor !== 0n)
            writer.tag(5, WireType.Varint).int64(message.vendor);
        /* string sec_from_user_id = 6; */
        if (message.secFromUserId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.secFromUserId);
        /* string to_linkmic_id_str = 7; */
        if (message.toLinkmicIdStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.toLinkmicIdStr);
        /* bool rtc_push_stream = 8; */
        if (message.rtcPushStream !== false)
            writer.tag(8, WireType.Varint).bool(message.rtcPushStream);
        /* string sign_extra = 9; */
        if (message.signExtra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.signExtra);
        /* int32 invite_source = 10; */
        if (message.inviteSource !== 0)
            writer.tag(10, WireType.Varint).int32(message.inviteSource);
        /* im.LinkmicInfo from_user_linkmic_info = 11; */
        if (message.fromUserLinkmicInfo)
            LinkmicInfo.internalBinaryWrite(message.fromUserLinkmicInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiRtcInfo multi_rtc_info = 12; */
        if (message.multiRtcInfo)
            MultiRtcInfo.internalBinaryWrite(message.multiRtcInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiLiveCoreInfo multi_live_core_info = 13; */
        if (message.multiLiveCoreInfo)
            MultiLiveCoreInfo.internalBinaryWrite(message.multiLiveCoreInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* int32 multi_pk_mode = 14; */
        if (message.multiPkMode !== 0)
            writer.tag(14, WireType.Varint).int32(message.multiPkMode);
        /* bool support_multi_pk_team_mode = 15; */
        if (message.supportMultiPkTeamMode !== false)
            writer.tag(15, WireType.Varint).bool(message.supportMultiPkTeamMode);
        /* data.LinkmicInfo to_user_linkmic_info = 16; */
        if (message.toUserLinkmicInfo)
            LinkmicInfo$.internalBinaryWrite(message.toUserLinkmicInfo, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiChannelInfo multi_channel_info = 17; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* string invite_reject_temporary_text = 18; */
        if (message.inviteRejectTemporaryText !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.inviteRejectTemporaryText);
        /* string audience_linker_description = 19; */
        if (message.audienceLinkerDescription !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.audienceLinkerDescription);
        /* bool inviter_with_audience = 20; */
        if (message.inviterWithAudience !== false)
            writer.tag(20, WireType.Varint).bool(message.inviterWithAudience);
        /* repeated data.ListUser invitee_followed_users = 21; */
        for (let i = 0; i < message.inviteeFollowedUsers.length; i++)
            ListUser.internalBinaryWrite(message.inviteeFollowedUsers[i], writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ListUser inviter_users = 22; */
        for (let i = 0; i < message.inviterUsers.length; i++)
            ListUser.internalBinaryWrite(message.inviterUsers[i], writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* int64 to_user_id = 23; */
        if (message.toUserId !== 0n)
            writer.tag(23, WireType.Varint).int64(message.toUserId);
        /* int64 to_room_id = 24; */
        if (message.toRoomId !== 0n)
            writer.tag(24, WireType.Varint).int64(message.toRoomId);
        /* data.ListUser applied_user = 25; */
        if (message.appliedUser)
            ListUser.internalBinaryWrite(message.appliedUser, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* data.PreRTCInfo pre_rtc_info = 26; */
        if (message.preRtcInfo)
            PreRTCInfo.internalBinaryWrite(message.preRtcInfo, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* bool support_multi_invite = 27; */
        if (message.supportMultiInvite !== false)
            writer.tag(27, WireType.Varint).bool(message.supportMultiInvite);
        /* int64 cur_invite_num = 28; */
        if (message.curInviteNum !== 0n)
            writer.tag(28, WireType.Varint).int64(message.curInviteNum);
        /* int64 wait_sec = 29; */
        if (message.waitSec !== 0n)
            writer.tag(29, WireType.Varint).int64(message.waitSec);
        /* repeated data.BattleRivalTag tags = 30; */
        for (let i = 0; i < message.tags.length; i++)
            BattleRivalTag.internalBinaryWrite(message.tags[i], writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* data.ListUser invite_user = 31; */
        if (message.inviteUser)
            ListUser.internalBinaryWrite(message.inviteUser, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* string client_attached_info = 32; */
        if (message.clientAttachedInfo !== "")
            writer.tag(32, WireType.LengthDelimited).string(message.clientAttachedInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerInviteContent
 */
export const LinkerInviteContent = new LinkerInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkPrepareApplyContent$Type extends MessageType<LinkPrepareApplyContent> {
    constructor() {
        super("im.LinkPrepareApplyContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "vendor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "sec_from_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkPrepareApplyContent>): LinkPrepareApplyContent {
        const message = { fromUserId: 0n, fromRoomId: 0n, vendor: 0n, secFromUserId: "", count: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkPrepareApplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkPrepareApplyContent): LinkPrepareApplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 from_room_id */ 2:
                    message.fromRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 vendor */ 3:
                    message.vendor = reader.int64().toBigInt();
                    break;
                case /* string sec_from_user_id */ 4:
                    message.secFromUserId = reader.string();
                    break;
                case /* int64 count */ 5:
                    message.count = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkPrepareApplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 from_room_id = 2; */
        if (message.fromRoomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fromRoomId);
        /* int64 vendor = 3; */
        if (message.vendor !== 0n)
            writer.tag(3, WireType.Varint).int64(message.vendor);
        /* string sec_from_user_id = 4; */
        if (message.secFromUserId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.secFromUserId);
        /* int64 count = 5; */
        if (message.count !== 0n)
            writer.tag(5, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkPrepareApplyContent
 */
export const LinkPrepareApplyContent = new LinkPrepareApplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerReplyContent$Type extends MessageType<LinkerReplyContent> {
    constructor() {
        super("im.LinkerReplyContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "from_user_linkmic_info", kind: "message", T: () => LinkmicInfo },
            { no: 4, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "to_user_linkmic_info", kind: "message", T: () => LinkmicInfo },
            { no: 6, name: "link_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "reply_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "linker_setting", kind: "message", T: () => LinkerSetting },
            { no: 9, name: "biz_join_channel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "multi_pk_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo },
            { no: 12, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "backup_linkmic_info", kind: "message", T: () => AnchorLinkmicChannelInfo },
            { no: 15, name: "kicked_users_unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "anchor_ui_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 20, name: "switch_to_scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "battle_config_setting", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerReplyContent>): LinkerReplyContent {
        const message = { fromUserId: 0n, fromRoomId: 0n, toUserId: 0n, linkType: 0n, replyStatus: 0n, bizJoinChannel: false, multiPkMode: 0, toast: "", kickedUsersUniqueId: "", matchType: 0n, version: 0n, anchorUiLayout: 0n, linkedUsers: [], switchToScene: 0, battleConfigSetting: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerReplyContent): LinkerReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 from_room_id */ 2:
                    message.fromRoomId = reader.int64().toBigInt();
                    break;
                case /* im.LinkmicInfo from_user_linkmic_info */ 3:
                    message.fromUserLinkmicInfo = LinkmicInfo.internalBinaryRead(reader, reader.uint32(), options, message.fromUserLinkmicInfo);
                    break;
                case /* int64 to_user_id */ 4:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* im.LinkmicInfo to_user_linkmic_info */ 5:
                    message.toUserLinkmicInfo = LinkmicInfo.internalBinaryRead(reader, reader.uint32(), options, message.toUserLinkmicInfo);
                    break;
                case /* int64 link_type */ 6:
                    message.linkType = reader.int64().toBigInt();
                    break;
                case /* int64 reply_status */ 7:
                    message.replyStatus = reader.int64().toBigInt();
                    break;
                case /* im.LinkerSetting linker_setting */ 8:
                    message.linkerSetting = LinkerSetting.internalBinaryRead(reader, reader.uint32(), options, message.linkerSetting);
                    break;
                case /* bool biz_join_channel */ 9:
                    message.bizJoinChannel = reader.bool();
                    break;
                case /* int32 multi_pk_mode */ 10:
                    message.multiPkMode = reader.int32();
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 11:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                case /* string toast */ 12:
                    message.toast = reader.string();
                    break;
                case /* data.AnchorLinkmicChannelInfo backup_linkmic_info */ 14:
                    message.backupLinkmicInfo = AnchorLinkmicChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.backupLinkmicInfo);
                    break;
                case /* string kicked_users_unique_id */ 15:
                    message.kickedUsersUniqueId = reader.string();
                    break;
                case /* int64 match_type */ 16:
                    message.matchType = reader.int64().toBigInt();
                    break;
                case /* int64 version */ 17:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_ui_layout */ 18:
                    message.anchorUiLayout = reader.int64().toBigInt();
                    break;
                case /* repeated data.ListUser linked_users */ 19:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 switch_to_scene */ 20:
                    message.switchToScene = reader.int32();
                    break;
                case /* string battle_config_setting */ 21:
                    message.battleConfigSetting = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 from_room_id = 2; */
        if (message.fromRoomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fromRoomId);
        /* im.LinkmicInfo from_user_linkmic_info = 3; */
        if (message.fromUserLinkmicInfo)
            LinkmicInfo.internalBinaryWrite(message.fromUserLinkmicInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 to_user_id = 4; */
        if (message.toUserId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.toUserId);
        /* im.LinkmicInfo to_user_linkmic_info = 5; */
        if (message.toUserLinkmicInfo)
            LinkmicInfo.internalBinaryWrite(message.toUserLinkmicInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 link_type = 6; */
        if (message.linkType !== 0n)
            writer.tag(6, WireType.Varint).int64(message.linkType);
        /* int64 reply_status = 7; */
        if (message.replyStatus !== 0n)
            writer.tag(7, WireType.Varint).int64(message.replyStatus);
        /* im.LinkerSetting linker_setting = 8; */
        if (message.linkerSetting)
            LinkerSetting.internalBinaryWrite(message.linkerSetting, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool biz_join_channel = 9; */
        if (message.bizJoinChannel !== false)
            writer.tag(9, WireType.Varint).bool(message.bizJoinChannel);
        /* int32 multi_pk_mode = 10; */
        if (message.multiPkMode !== 0)
            writer.tag(10, WireType.Varint).int32(message.multiPkMode);
        /* data.MultiChannelInfo multi_channel_info = 11; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 12; */
        if (message.toast !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.toast);
        /* data.AnchorLinkmicChannelInfo backup_linkmic_info = 14; */
        if (message.backupLinkmicInfo)
            AnchorLinkmicChannelInfo.internalBinaryWrite(message.backupLinkmicInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* string kicked_users_unique_id = 15; */
        if (message.kickedUsersUniqueId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.kickedUsersUniqueId);
        /* int64 match_type = 16; */
        if (message.matchType !== 0n)
            writer.tag(16, WireType.Varint).int64(message.matchType);
        /* int64 version = 17; */
        if (message.version !== 0n)
            writer.tag(17, WireType.Varint).int64(message.version);
        /* int64 anchor_ui_layout = 18; */
        if (message.anchorUiLayout !== 0n)
            writer.tag(18, WireType.Varint).int64(message.anchorUiLayout);
        /* repeated data.ListUser linked_users = 19; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* int32 switch_to_scene = 20; */
        if (message.switchToScene !== 0)
            writer.tag(20, WireType.Varint).int32(message.switchToScene);
        /* string battle_config_setting = 21; */
        if (message.battleConfigSetting !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.battleConfigSetting);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerReplyContent
 */
export const LinkerReplyContent = new LinkerReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerCreateContent$Type extends MessageType<LinkerCreateContent> {
    constructor() {
        super("im.LinkerCreateContent", [
            { no: 1, name: "owner_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "owner_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "link_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerCreateContent>): LinkerCreateContent {
        const message = { ownerId: 0n, ownerRoomId: 0n, linkType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerCreateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerCreateContent): LinkerCreateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 owner_id */ 1:
                    message.ownerId = reader.int64().toBigInt();
                    break;
                case /* int64 owner_room_id */ 2:
                    message.ownerRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 link_type */ 3:
                    message.linkType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerCreateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 owner_id = 1; */
        if (message.ownerId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.ownerId);
        /* int64 owner_room_id = 2; */
        if (message.ownerRoomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.ownerRoomId);
        /* int64 link_type = 3; */
        if (message.linkType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.linkType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerCreateContent
 */
export const LinkerCreateContent = new LinkerCreateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchEffect$Type extends MessageType<MatchEffect> {
    constructor() {
        super("im.MatchEffect", [
            { no: 1, name: "show_effect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "effect_resource", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<MatchEffect>): MatchEffect {
        const message = { showEffect: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchEffect): MatchEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool show_effect */ 1:
                    message.showEffect = reader.bool();
                    break;
                case /* data.Image effect_resource */ 2:
                    message.effectResource = Image.internalBinaryRead(reader, reader.uint32(), options, message.effectResource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool show_effect = 1; */
        if (message.showEffect !== false)
            writer.tag(1, WireType.Varint).bool(message.showEffect);
        /* data.Image effect_resource = 2; */
        if (message.effectResource)
            Image.internalBinaryWrite(message.effectResource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchEffect
 */
export const MatchEffect = new MatchEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityEffect$Type extends MessageType<CityEffect> {
    constructor() {
        super("im.CityEffect", [
            { no: 1, name: "effect_resource", kind: "message", T: () => Image },
            { no: 2, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "show_effect_user_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CityEffect>): CityEffect {
        const message = { city: "", showEffectUserIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityEffect): CityEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image effect_resource */ 1:
                    message.effectResource = Image.internalBinaryRead(reader, reader.uint32(), options, message.effectResource);
                    break;
                case /* string city */ 2:
                    message.city = reader.string();
                    break;
                case /* repeated int64 show_effect_user_id_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.showEffectUserIdList.push(reader.int64().toBigInt());
                    else
                        message.showEffectUserIdList.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image effect_resource = 1; */
        if (message.effectResource)
            Image.internalBinaryWrite(message.effectResource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string city = 2; */
        if (message.city !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.city);
        /* repeated int64 show_effect_user_id_list = 3; */
        if (message.showEffectUserIdList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.showEffectUserIdList.length; i++)
                writer.int64(message.showEffectUserIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CityEffect
 */
export const CityEffect = new CityEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerEnterContent$Type extends MessageType<LinkerEnterContent> {
    constructor() {
        super("im.LinkerEnterContent", [
            { no: 1, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "apply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "pre_link_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 5, name: "match_effect", kind: "message", T: () => MatchEffect },
            { no: 6, name: "city_effect", kind: "message", T: () => CityEffect },
            { no: 7, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "msg_board_item", kind: "message", T: () => MsgBoardItemInfo },
            { no: 10, name: "link_icon_config", kind: "message", T: () => LinkIconConfig }
        ]);
    }
    create(value?: PartialMessage<LinkerEnterContent>): LinkerEnterContent {
        const message = { linkedUsers: [], userId: 0n, applyType: 0, preLinkUsers: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerEnterContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerEnterContent): LinkerEnterContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ListUser linked_users */ 1:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int32 apply_type */ 3:
                    message.applyType = reader.int32();
                    break;
                case /* repeated data.ListUser pre_link_users */ 4:
                    message.preLinkUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* im.MatchEffect match_effect */ 5:
                    message.matchEffect = MatchEffect.internalBinaryRead(reader, reader.uint32(), options, message.matchEffect);
                    break;
                case /* im.CityEffect city_effect */ 6:
                    message.cityEffect = CityEffect.internalBinaryRead(reader, reader.uint32(), options, message.cityEffect);
                    break;
                case /* uint64 version */ 7:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* data.MsgBoardItemInfo msg_board_item */ 9:
                    message.msgBoardItem = MsgBoardItemInfo.internalBinaryRead(reader, reader.uint32(), options, message.msgBoardItem);
                    break;
                case /* data.LinkIconConfig link_icon_config */ 10:
                    message.linkIconConfig = LinkIconConfig.internalBinaryRead(reader, reader.uint32(), options, message.linkIconConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerEnterContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ListUser linked_users = 1; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* int32 apply_type = 3; */
        if (message.applyType !== 0)
            writer.tag(3, WireType.Varint).int32(message.applyType);
        /* repeated data.ListUser pre_link_users = 4; */
        for (let i = 0; i < message.preLinkUsers.length; i++)
            ListUser.internalBinaryWrite(message.preLinkUsers[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.MatchEffect match_effect = 5; */
        if (message.matchEffect)
            MatchEffect.internalBinaryWrite(message.matchEffect, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.CityEffect city_effect = 6; */
        if (message.cityEffect)
            CityEffect.internalBinaryWrite(message.cityEffect, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 7; */
        if (message.version !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.version);
        /* data.MsgBoardItemInfo msg_board_item = 9; */
        if (message.msgBoardItem)
            MsgBoardItemInfo.internalBinaryWrite(message.msgBoardItem, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkIconConfig link_icon_config = 10; */
        if (message.linkIconConfig)
            LinkIconConfig.internalBinaryWrite(message.linkIconConfig, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerEnterContent
 */
export const LinkerEnterContent = new LinkerEnterContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerViolationReminderContent$Type extends MessageType<LinkerViolationReminderContent> {
    constructor() {
        super("im.LinkerViolationReminderContent", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerViolationReminderContent>): LinkerViolationReminderContent {
        const message = { title: "", content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerViolationReminderContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerViolationReminderContent): LinkerViolationReminderContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerViolationReminderContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerViolationReminderContent
 */
export const LinkerViolationReminderContent = new LinkerViolationReminderContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerCloseContent$Type extends MessageType<LinkerCloseContent> {
    constructor() {
        super("im.LinkerCloseContent", [
            { no: 1, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ban_anchor_info", kind: "message", T: () => BanUser }
        ]);
    }
    create(value?: PartialMessage<LinkerCloseContent>): LinkerCloseContent {
        const message = { source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerCloseContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerCloseContent): LinkerCloseContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 source */ 1:
                    message.source = reader.int32();
                    break;
                case /* data.BanUser ban_anchor_info */ 2:
                    message.banAnchorInfo = BanUser.internalBinaryRead(reader, reader.uint32(), options, message.banAnchorInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerCloseContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 source = 1; */
        if (message.source !== 0)
            writer.tag(1, WireType.Varint).int32(message.source);
        /* data.BanUser ban_anchor_info = 2; */
        if (message.banAnchorInfo)
            BanUser.internalBinaryWrite(message.banAnchorInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerCloseContent
 */
export const LinkerCloseContent = new LinkerCloseContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerLeaveContent$Type extends MessageType<LinkerLeaveContent> {
    constructor() {
        super("im.LinkerLeaveContent", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 3, name: "user", kind: "message", T: () => ListUser },
            { no: 4, name: "pre_link_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 5, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "leave_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pre_rtc_info", kind: "message", T: () => PreRTCInfo },
            { no: 9, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo },
            { no: 10, name: "list_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 11, name: "pre_rtc_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerLeaveContent>): LinkerLeaveContent {
        const message = { userId: 0n, linkedUsers: [], preLinkUsers: [], version: 0n, leaveSource: 0, listUsers: [], preRtcVersion: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerLeaveContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerLeaveContent): LinkerLeaveContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* repeated data.ListUser linked_users */ 2:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.ListUser user */ 3:
                    message.user = ListUser.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated data.ListUser pre_link_users */ 4:
                    message.preLinkUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 version */ 5:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* int32 leave_source */ 7:
                    message.leaveSource = reader.int32();
                    break;
                case /* data.PreRTCInfo pre_rtc_info */ 8:
                    message.preRtcInfo = PreRTCInfo.internalBinaryRead(reader, reader.uint32(), options, message.preRtcInfo);
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 9:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                case /* repeated data.ListUser list_users */ 10:
                    message.listUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 pre_rtc_version */ 11:
                    message.preRtcVersion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerLeaveContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* repeated data.ListUser linked_users = 2; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.ListUser user = 3; */
        if (message.user)
            ListUser.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ListUser pre_link_users = 4; */
        for (let i = 0; i < message.preLinkUsers.length; i++)
            ListUser.internalBinaryWrite(message.preLinkUsers[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 5; */
        if (message.version !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.version);
        /* int32 leave_source = 7; */
        if (message.leaveSource !== 0)
            writer.tag(7, WireType.Varint).int32(message.leaveSource);
        /* data.PreRTCInfo pre_rtc_info = 8; */
        if (message.preRtcInfo)
            PreRTCInfo.internalBinaryWrite(message.preRtcInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiChannelInfo multi_channel_info = 9; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ListUser list_users = 10; */
        for (let i = 0; i < message.listUsers.length; i++)
            ListUser.internalBinaryWrite(message.listUsers[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* int64 pre_rtc_version = 11; */
        if (message.preRtcVersion !== 0n)
            writer.tag(11, WireType.Varint).int64(message.preRtcVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerLeaveContent
 */
export const LinkerLeaveContent = new LinkerLeaveContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerCancelContent$Type extends MessageType<LinkerCancelContent> {
    constructor() {
        super("im.LinkerCancelContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cancel_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "invite_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerCancelContent>): LinkerCancelContent {
        const message = { fromUserId: 0n, toUserId: 0n, cancelType: 0n, inviteSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerCancelContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerCancelContent): LinkerCancelContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int64 cancel_type */ 3:
                    message.cancelType = reader.int64().toBigInt();
                    break;
                case /* int32 invite_source */ 4:
                    message.inviteSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerCancelContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* int64 cancel_type = 3; */
        if (message.cancelType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cancelType);
        /* int32 invite_source = 4; */
        if (message.inviteSource !== 0)
            writer.tag(4, WireType.Varint).int32(message.inviteSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerCancelContent
 */
export const LinkerCancelContent = new LinkerCancelContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerKickOutContent$Type extends MessageType<LinkerKickOutContent> {
    constructor() {
        super("im.LinkerKickOutContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "control_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "paid_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "link_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "kick_out_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerKickOutContent>): LinkerKickOutContent {
        const message = { fromUserId: 0n, controlType: 0, paidCount: 0n, linkDuration: 0n, kickOutSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerKickOutContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerKickOutContent): LinkerKickOutContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int32 control_type */ 2:
                    message.controlType = reader.int32();
                    break;
                case /* int64 paid_count */ 3:
                    message.paidCount = reader.int64().toBigInt();
                    break;
                case /* int64 link_duration */ 4:
                    message.linkDuration = reader.int64().toBigInt();
                    break;
                case /* int32 kick_out_source */ 5:
                    message.kickOutSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerKickOutContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int32 control_type = 2; */
        if (message.controlType !== 0)
            writer.tag(2, WireType.Varint).int32(message.controlType);
        /* int64 paid_count = 3; */
        if (message.paidCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.paidCount);
        /* int64 link_duration = 4; */
        if (message.linkDuration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.linkDuration);
        /* int32 kick_out_source = 5; */
        if (message.kickOutSource !== 0)
            writer.tag(5, WireType.Varint).int32(message.kickOutSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerKickOutContent
 */
export const LinkerKickOutContent = new LinkerKickOutContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerSysKickOutContent$Type extends MessageType<LinkerSysKickOutContent> {
    constructor() {
        super("im.LinkerSysKickOutContent", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "toast_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerSysKickOutContent>): LinkerSysKickOutContent {
        const message = { userId: 0n, linkmicIdStr: "", toastMsg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerSysKickOutContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerSysKickOutContent): LinkerSysKickOutContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string linkmic_id_str */ 2:
                    message.linkmicIdStr = reader.string();
                    break;
                case /* string toast_msg */ 3:
                    message.toastMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerSysKickOutContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string linkmic_id_str = 2; */
        if (message.linkmicIdStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.linkmicIdStr);
        /* string toast_msg = 3; */
        if (message.toastMsg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toastMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerSysKickOutContent
 */
export const LinkerSysKickOutContent = new LinkerSysKickOutContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerWaitingListChangeContent$Type extends MessageType<LinkerWaitingListChangeContent> {
    constructor() {
        super("im.LinkerWaitingListChangeContent", [
            { no: 1, name: "pre_rtc_info", kind: "message", T: () => PreRTCInfo },
            { no: 2, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo },
            { no: 3, name: "list_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 4, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerWaitingListChangeContent>): LinkerWaitingListChangeContent {
        const message = { listUsers: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerWaitingListChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerWaitingListChangeContent): LinkerWaitingListChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.PreRTCInfo pre_rtc_info */ 1:
                    message.preRtcInfo = PreRTCInfo.internalBinaryRead(reader, reader.uint32(), options, message.preRtcInfo);
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 2:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                case /* repeated data.ListUser list_users */ 3:
                    message.listUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 version */ 4:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerWaitingListChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.PreRTCInfo pre_rtc_info = 1; */
        if (message.preRtcInfo)
            PreRTCInfo.internalBinaryWrite(message.preRtcInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiChannelInfo multi_channel_info = 2; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ListUser list_users = 3; */
        for (let i = 0; i < message.listUsers.length; i++)
            ListUser.internalBinaryWrite(message.listUsers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 version = 4; */
        if (message.version !== 0n)
            writer.tag(4, WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerWaitingListChangeContent
 */
export const LinkerWaitingListChangeContent = new LinkerWaitingListChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerLinkedListChangeContent$Type extends MessageType<LinkerLinkedListChangeContent> {
    constructor() {
        super("im.LinkerLinkedListChangeContent", [
            { no: 1, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 2, name: "pre_link_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 3, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "push_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "update_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerLinkedListChangeContent>): LinkerLinkedListChangeContent {
        const message = { linkedUsers: [], preLinkUsers: [], version: 0n, pushType: 0, updateMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerLinkedListChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerLinkedListChangeContent): LinkerLinkedListChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ListUser linked_users */ 1:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.ListUser pre_link_users */ 2:
                    message.preLinkUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 version */ 3:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* int32 push_type */ 4:
                    message.pushType = reader.int32();
                    break;
                case /* int32 update_mode */ 6:
                    message.updateMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerLinkedListChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ListUser linked_users = 1; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.ListUser pre_link_users = 2; */
        for (let i = 0; i < message.preLinkUsers.length; i++)
            ListUser.internalBinaryWrite(message.preLinkUsers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 3; */
        if (message.version !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.version);
        /* int32 push_type = 4; */
        if (message.pushType !== 0)
            writer.tag(4, WireType.Varint).int32(message.pushType);
        /* int32 update_mode = 6; */
        if (message.updateMode !== 0)
            writer.tag(6, WireType.Varint).int32(message.updateMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerLinkedListChangeContent
 */
export const LinkerLinkedListChangeContent = new LinkerLinkedListChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerBanContent$Type extends MessageType<LinkerBanContent> {
    constructor() {
        super("im.LinkerBanContent", [
            { no: 1, name: "ban_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BanUser }
        ]);
    }
    create(value?: PartialMessage<LinkerBanContent>): LinkerBanContent {
        const message = { banUsers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerBanContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerBanContent): LinkerBanContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.BanUser ban_users */ 1:
                    message.banUsers.push(BanUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerBanContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.BanUser ban_users = 1; */
        for (let i = 0; i < message.banUsers.length; i++)
            BanUser.internalBinaryWrite(message.banUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerBanContent
 */
export const LinkerBanContent = new LinkerBanContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerUpdateUserContent$Type extends MessageType<LinkerUpdateUserContent> {
    constructor() {
        super("im.LinkerUpdateUserContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "ack_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerUpdateUserContent>): LinkerUpdateUserContent {
        const message = { fromUserId: 0n, toUserId: 0n, linkedUsers: [], extra: "", version: 0n, ackMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerUpdateUserContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerUpdateUserContent): LinkerUpdateUserContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* repeated data.ListUser linked_users */ 4:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                case /* uint64 version */ 6:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* string ack_message */ 8:
                    message.ackMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerUpdateUserContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* repeated data.ListUser linked_users = 4; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        /* uint64 version = 6; */
        if (message.version !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.version);
        /* string ack_message = 8; */
        if (message.ackMessage !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.ackMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerUpdateUserContent
 */
export const LinkerUpdateUserContent = new LinkerUpdateUserContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelNoticeContent$Type extends MessageType<ChannelNoticeContent> {
    constructor() {
        super("im.ChannelNoticeContent", [
            { no: 1, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "extra_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelNoticeContent>): ChannelNoticeContent {
        const message = { channelId: 0n, action: 0, extraInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelNoticeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelNoticeContent): ChannelNoticeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 channel_id */ 1:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                case /* string extra_info */ 3:
                    message.extraInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelNoticeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 channel_id = 1; */
        if (message.channelId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.channelId);
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        /* string extra_info = 3; */
        if (message.extraInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extraInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChannelNoticeContent
 */
export const ChannelNoticeContent = new ChannelNoticeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerItemContent$Type extends MessageType<LinkerItemContent> {
    constructor() {
        super("im.LinkerItemContent", [
            { no: 1, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "author_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "author_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 5, name: "avatar_medium", kind: "message", T: () => Image },
            { no: 6, name: "avatar_large", kind: "message", T: () => Image },
            { no: 7, name: "item_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "music_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "music_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "music_author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "music_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "comment_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerItemContent>): LinkerItemContent {
        const message = { itemId: 0n, authorId: 0n, authorName: "", itemDescription: "", musicId: "", musicTitle: "", musicAuthor: "", musicUrl: "", commentCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerItemContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerItemContent): LinkerItemContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 item_id */ 1:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* int64 author_id */ 2:
                    message.authorId = reader.int64().toBigInt();
                    break;
                case /* string author_name */ 3:
                    message.authorName = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 4:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* data.Image avatar_medium */ 5:
                    message.avatarMedium = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarMedium);
                    break;
                case /* data.Image avatar_large */ 6:
                    message.avatarLarge = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarLarge);
                    break;
                case /* string item_description */ 7:
                    message.itemDescription = reader.string();
                    break;
                case /* string music_id */ 8:
                    message.musicId = reader.string();
                    break;
                case /* string music_title */ 9:
                    message.musicTitle = reader.string();
                    break;
                case /* string music_author */ 10:
                    message.musicAuthor = reader.string();
                    break;
                case /* string music_url */ 11:
                    message.musicUrl = reader.string();
                    break;
                case /* int64 comment_count */ 12:
                    message.commentCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerItemContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 item_id = 1; */
        if (message.itemId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.itemId);
        /* int64 author_id = 2; */
        if (message.authorId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.authorId);
        /* string author_name = 3; */
        if (message.authorName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.authorName);
        /* data.Image avatar_thumb = 4; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_medium = 5; */
        if (message.avatarMedium)
            Image.internalBinaryWrite(message.avatarMedium, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_large = 6; */
        if (message.avatarLarge)
            Image.internalBinaryWrite(message.avatarLarge, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string item_description = 7; */
        if (message.itemDescription !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.itemDescription);
        /* string music_id = 8; */
        if (message.musicId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.musicId);
        /* string music_title = 9; */
        if (message.musicTitle !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.musicTitle);
        /* string music_author = 10; */
        if (message.musicAuthor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.musicAuthor);
        /* string music_url = 11; */
        if (message.musicUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.musicUrl);
        /* int64 comment_count = 12; */
        if (message.commentCount !== 0n)
            writer.tag(12, WireType.Varint).int64(message.commentCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerItemContent
 */
export const LinkerItemContent = new LinkerItemContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerUpdateLinkTypeApplyContent$Type extends MessageType<LinkerUpdateLinkTypeApplyContent> {
    constructor() {
        super("im.LinkerUpdateLinkTypeApplyContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "link_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "ack_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerUpdateLinkTypeApplyContent>): LinkerUpdateLinkTypeApplyContent {
        const message = { fromUserId: 0n, toUserId: 0n, linkType: 0, source: 0, ackMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerUpdateLinkTypeApplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerUpdateLinkTypeApplyContent): LinkerUpdateLinkTypeApplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 link_type */ 3:
                    message.linkType = reader.int32();
                    break;
                case /* int32 source */ 4:
                    message.source = reader.int32();
                    break;
                case /* string ack_message */ 5:
                    message.ackMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerUpdateLinkTypeApplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* int32 link_type = 3; */
        if (message.linkType !== 0)
            writer.tag(3, WireType.Varint).int32(message.linkType);
        /* int32 source = 4; */
        if (message.source !== 0)
            writer.tag(4, WireType.Varint).int32(message.source);
        /* string ack_message = 5; */
        if (message.ackMessage !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.ackMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerUpdateLinkTypeApplyContent
 */
export const LinkerUpdateLinkTypeApplyContent = new LinkerUpdateLinkTypeApplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerUpdateLinkTypeReplyContent$Type extends MessageType<LinkerUpdateLinkTypeReplyContent> {
    constructor() {
        super("im.LinkerUpdateLinkTypeReplyContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "reply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "reply_prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerUpdateLinkTypeReplyContent>): LinkerUpdateLinkTypeReplyContent {
        const message = { fromUserId: 0n, toUserId: 0n, replyType: 0, replyPrompts: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerUpdateLinkTypeReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerUpdateLinkTypeReplyContent): LinkerUpdateLinkTypeReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 reply_type */ 3:
                    message.replyType = reader.int32();
                    break;
                case /* string reply_prompts */ 4:
                    message.replyPrompts = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerUpdateLinkTypeReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* int32 reply_type = 3; */
        if (message.replyType !== 0)
            writer.tag(3, WireType.Varint).int32(message.replyType);
        /* string reply_prompts = 4; */
        if (message.replyPrompts !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.replyPrompts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerUpdateLinkTypeReplyContent
 */
export const LinkerUpdateLinkTypeReplyContent = new LinkerUpdateLinkTypeReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerAvatarAuditContent$Type extends MessageType<LinkerAvatarAuditContent> {
    constructor() {
        super("im.LinkerAvatarAuditContent", [
            { no: 1, name: "audit_res", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "review_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerAvatarAuditContent>): LinkerAvatarAuditContent {
        const message = { auditRes: 0, reason: "", reviewId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerAvatarAuditContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerAvatarAuditContent): LinkerAvatarAuditContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 audit_res */ 1:
                    message.auditRes = reader.int32();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                case /* int64 review_id */ 3:
                    message.reviewId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerAvatarAuditContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 audit_res = 1; */
        if (message.auditRes !== 0)
            writer.tag(1, WireType.Varint).int32(message.auditRes);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        /* int64 review_id = 3; */
        if (message.reviewId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.reviewId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerAvatarAuditContent
 */
export const LinkerAvatarAuditContent = new LinkerAvatarAuditContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerApplyExpiredContent$Type extends MessageType<LinkerApplyExpiredContent> {
    constructor() {
        super("im.LinkerApplyExpiredContent", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerApplyExpiredContent>): LinkerApplyExpiredContent {
        const message = { userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerApplyExpiredContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerApplyExpiredContent): LinkerApplyExpiredContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerApplyExpiredContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerApplyExpiredContent
 */
export const LinkerApplyExpiredContent = new LinkerApplyExpiredContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerApplyStrongReminderContent$Type extends MessageType<LinkerApplyStrongReminderContent> {
    constructor() {
        super("im.LinkerApplyStrongReminderContent", [
            { no: 1, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<LinkerApplyStrongReminderContent>): LinkerApplyStrongReminderContent {
        const message = { source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerApplyStrongReminderContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerApplyStrongReminderContent): LinkerApplyStrongReminderContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 source */ 1:
                    message.source = reader.int32();
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerApplyStrongReminderContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 source = 1; */
        if (message.source !== 0)
            writer.tag(1, WireType.Varint).int32(message.source);
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerApplyStrongReminderContent
 */
export const LinkerApplyStrongReminderContent = new LinkerApplyStrongReminderContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerAnchorStreamSwitchContent$Type extends MessageType<LinkerAnchorStreamSwitchContent> {
    constructor() {
        super("im.LinkerAnchorStreamSwitchContent", [
            { no: 1, name: "use_backup_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "anchor_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 4, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerAnchorStreamSwitchContent>): LinkerAnchorStreamSwitchContent {
        const message = { useBackupStream: false, anchorUserId: 0n, linkedUsers: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerAnchorStreamSwitchContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerAnchorStreamSwitchContent): LinkerAnchorStreamSwitchContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool use_backup_stream */ 1:
                    message.useBackupStream = reader.bool();
                    break;
                case /* int64 anchor_user_id */ 2:
                    message.anchorUserId = reader.int64().toBigInt();
                    break;
                case /* repeated data.ListUser linked_users */ 3:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 version */ 4:
                    message.version = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerAnchorStreamSwitchContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool use_backup_stream = 1; */
        if (message.useBackupStream !== false)
            writer.tag(1, WireType.Varint).bool(message.useBackupStream);
        /* int64 anchor_user_id = 2; */
        if (message.anchorUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.anchorUserId);
        /* repeated data.ListUser linked_users = 3; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 4; */
        if (message.version !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerAnchorStreamSwitchContent
 */
export const LinkerAnchorStreamSwitchContent = new LinkerAnchorStreamSwitchContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerClickScreenContent$Type extends MessageType<LinkerClickScreenContent> {
    constructor() {
        super("im.LinkerClickScreenContent", [
            { no: 1, name: "device_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "device_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "point_x", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "point_y", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "avatar_medium", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LinkerClickScreenContent>): LinkerClickScreenContent {
        const message = { deviceWidth: 0n, deviceHeight: 0n, pointX: 0n, pointY: 0n, fromUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerClickScreenContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerClickScreenContent): LinkerClickScreenContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 device_width */ 1:
                    message.deviceWidth = reader.int64().toBigInt();
                    break;
                case /* int64 device_height */ 2:
                    message.deviceHeight = reader.int64().toBigInt();
                    break;
                case /* int64 point_x */ 3:
                    message.pointX = reader.int64().toBigInt();
                    break;
                case /* int64 point_y */ 4:
                    message.pointY = reader.int64().toBigInt();
                    break;
                case /* int64 from_user_id */ 5:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* data.Image avatar_medium */ 6:
                    message.avatarMedium = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarMedium);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerClickScreenContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 device_width = 1; */
        if (message.deviceWidth !== 0n)
            writer.tag(1, WireType.Varint).int64(message.deviceWidth);
        /* int64 device_height = 2; */
        if (message.deviceHeight !== 0n)
            writer.tag(2, WireType.Varint).int64(message.deviceHeight);
        /* int64 point_x = 3; */
        if (message.pointX !== 0n)
            writer.tag(3, WireType.Varint).int64(message.pointX);
        /* int64 point_y = 4; */
        if (message.pointY !== 0n)
            writer.tag(4, WireType.Varint).int64(message.pointY);
        /* int64 from_user_id = 5; */
        if (message.fromUserId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.fromUserId);
        /* data.Image avatar_medium = 6; */
        if (message.avatarMedium)
            Image.internalBinaryWrite(message.avatarMedium, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerClickScreenContent
 */
export const LinkerClickScreenContent = new LinkerClickScreenContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerFollowStrongGuideContent$Type extends MessageType<LinkerFollowStrongGuideContent> {
    constructor() {
        super("im.LinkerFollowStrongGuideContent", [
            { no: 1, name: "from_user", kind: "message", T: () => User },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "from_user_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerFollowStrongGuideContent>): LinkerFollowStrongGuideContent {
        const message = { toUserId: 0n, fromUserType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerFollowStrongGuideContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerFollowStrongGuideContent): LinkerFollowStrongGuideContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User from_user */ 1:
                    message.fromUser = User.internalBinaryRead(reader, reader.uint32(), options, message.fromUser);
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 from_user_type */ 3:
                    message.fromUserType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerFollowStrongGuideContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User from_user = 1; */
        if (message.fromUser)
            User.internalBinaryWrite(message.fromUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* int32 from_user_type = 3; */
        if (message.fromUserType !== 0)
            writer.tag(3, WireType.Varint).int32(message.fromUserType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerFollowStrongGuideContent
 */
export const LinkerFollowStrongGuideContent = new LinkerFollowStrongGuideContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerLockPositionContent$Type extends MessageType<LinkerLockPositionContent> {
    constructor() {
        super("im.LinkerLockPositionContent", [
            { no: 1, name: "locked_positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem }
        ]);
    }
    create(value?: PartialMessage<LinkerLockPositionContent>): LinkerLockPositionContent {
        const message = { lockedPositions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerLockPositionContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerLockPositionContent): LinkerLockPositionContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.LinkmicPositionItem locked_positions */ 1:
                    message.lockedPositions.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerLockPositionContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.LinkmicPositionItem locked_positions = 1; */
        for (let i = 0; i < message.lockedPositions.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.lockedPositions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerLockPositionContent
 */
export const LinkerLockPositionContent = new LinkerLockPositionContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerShareVideoImContent$Type extends MessageType<LinkerShareVideoImContent> {
    constructor() {
        super("im.LinkerShareVideoImContent", [
            { no: 1, name: "im_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerShareVideoImContent>): LinkerShareVideoImContent {
        const message = { imContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerShareVideoImContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerShareVideoImContent): LinkerShareVideoImContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string im_content */ 1:
                    message.imContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerShareVideoImContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string im_content = 1; */
        if (message.imContent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerShareVideoImContent
 */
export const LinkerShareVideoImContent = new LinkerShareVideoImContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerGuestInviteContent$Type extends MessageType<LinkerGuestInviteContent> {
    constructor() {
        super("im.LinkerGuestInviteContent", [
            { no: 1, name: "invite_content", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<LinkerGuestInviteContent>): LinkerGuestInviteContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerGuestInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerGuestInviteContent): LinkerGuestInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text invite_content */ 1:
                    message.inviteContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.inviteContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerGuestInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text invite_content = 1; */
        if (message.inviteContent)
            Text.internalBinaryWrite(message.inviteContent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerGuestInviteContent
 */
export const LinkerGuestInviteContent = new LinkerGuestInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerGuestExitCastScreenContent$Type extends MessageType<LinkerGuestExitCastScreenContent> {
    constructor() {
        super("im.LinkerGuestExitCastScreenContent", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerGuestExitCastScreenContent>): LinkerGuestExitCastScreenContent {
        const message = { userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerGuestExitCastScreenContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerGuestExitCastScreenContent): LinkerGuestExitCastScreenContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerGuestExitCastScreenContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerGuestExitCastScreenContent
 */
export const LinkerGuestExitCastScreenContent = new LinkerGuestExitCastScreenContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerSwitchSceneContent$Type extends MessageType<LinkerSwitchSceneContent> {
    constructor() {
        super("im.LinkerSwitchSceneContent", [
            { no: 1, name: "switch_scene_data", kind: "message", T: () => SwitchSceneData }
        ]);
    }
    create(value?: PartialMessage<LinkerSwitchSceneContent>): LinkerSwitchSceneContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerSwitchSceneContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerSwitchSceneContent): LinkerSwitchSceneContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.SwitchSceneData switch_scene_data */ 1:
                    message.switchSceneData = SwitchSceneData.internalBinaryRead(reader, reader.uint32(), options, message.switchSceneData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerSwitchSceneContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.SwitchSceneData switch_scene_data = 1; */
        if (message.switchSceneData)
            SwitchSceneData.internalBinaryWrite(message.switchSceneData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerSwitchSceneContent
 */
export const LinkerSwitchSceneContent = new LinkerSwitchSceneContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkPhaseEnterNextNotifyContent$Type extends MessageType<LinkPhaseEnterNextNotifyContent> {
    constructor() {
        super("im.LinkPhaseEnterNextNotifyContent", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "anchor_user", kind: "message", T: () => User },
            { no: 3, name: "link_user", kind: "message", T: () => User },
            { no: 4, name: "next_phase", kind: "message", T: () => LinkPhase },
            { no: 5, name: "current_phase_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "current_linktime_seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "phase_config", kind: "message", T: () => LinkPhaseConfig }
        ]);
    }
    create(value?: PartialMessage<LinkPhaseEnterNextNotifyContent>): LinkPhaseEnterNextNotifyContent {
        const message = { roomId: 0n, currentPhaseId: 0, currentLinktimeSeconds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkPhaseEnterNextNotifyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkPhaseEnterNextNotifyContent): LinkPhaseEnterNextNotifyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* data.User anchor_user */ 2:
                    message.anchorUser = User.internalBinaryRead(reader, reader.uint32(), options, message.anchorUser);
                    break;
                case /* data.User link_user */ 3:
                    message.linkUser = User.internalBinaryRead(reader, reader.uint32(), options, message.linkUser);
                    break;
                case /* data.LinkPhase next_phase */ 4:
                    message.nextPhase = LinkPhase.internalBinaryRead(reader, reader.uint32(), options, message.nextPhase);
                    break;
                case /* int32 current_phase_id */ 5:
                    message.currentPhaseId = reader.int32();
                    break;
                case /* int32 current_linktime_seconds */ 6:
                    message.currentLinktimeSeconds = reader.int32();
                    break;
                case /* data.LinkPhaseConfig phase_config */ 7:
                    message.phaseConfig = LinkPhaseConfig.internalBinaryRead(reader, reader.uint32(), options, message.phaseConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkPhaseEnterNextNotifyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        /* data.User anchor_user = 2; */
        if (message.anchorUser)
            User.internalBinaryWrite(message.anchorUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.User link_user = 3; */
        if (message.linkUser)
            User.internalBinaryWrite(message.linkUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkPhase next_phase = 4; */
        if (message.nextPhase)
            LinkPhase.internalBinaryWrite(message.nextPhase, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 current_phase_id = 5; */
        if (message.currentPhaseId !== 0)
            writer.tag(5, WireType.Varint).int32(message.currentPhaseId);
        /* int32 current_linktime_seconds = 6; */
        if (message.currentLinktimeSeconds !== 0)
            writer.tag(6, WireType.Varint).int32(message.currentLinktimeSeconds);
        /* data.LinkPhaseConfig phase_config = 7; */
        if (message.phaseConfig)
            LinkPhaseConfig.internalBinaryWrite(message.phaseConfig, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkPhaseEnterNextNotifyContent
 */
export const LinkPhaseEnterNextNotifyContent = new LinkPhaseEnterNextNotifyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerChangePlayModeContent$Type extends MessageType<LinkerChangePlayModeContent> {
    constructor() {
        super("im.LinkerChangePlayModeContent", [
            { no: 1, name: "change_play_mode_data", kind: "message", T: () => ChangePlayModeData }
        ]);
    }
    create(value?: PartialMessage<LinkerChangePlayModeContent>): LinkerChangePlayModeContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerChangePlayModeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerChangePlayModeContent): LinkerChangePlayModeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ChangePlayModeData change_play_mode_data */ 1:
                    message.changePlayModeData = ChangePlayModeData.internalBinaryRead(reader, reader.uint32(), options, message.changePlayModeData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerChangePlayModeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ChangePlayModeData change_play_mode_data = 1; */
        if (message.changePlayModeData)
            ChangePlayModeData.internalBinaryWrite(message.changePlayModeData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerChangePlayModeContent
 */
export const LinkerChangePlayModeContent = new LinkerChangePlayModeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerLowBalanceForPaidLinkmicContent$Type extends MessageType<LinkerLowBalanceForPaidLinkmicContent> {
    constructor() {
        super("im.LinkerLowBalanceForPaidLinkmicContent", [
            { no: 1, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerLowBalanceForPaidLinkmicContent>): LinkerLowBalanceForPaidLinkmicContent {
        const message = { toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerLowBalanceForPaidLinkmicContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerLowBalanceForPaidLinkmicContent): LinkerLowBalanceForPaidLinkmicContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toast */ 1:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerLowBalanceForPaidLinkmicContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toast = 1; */
        if (message.toast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerLowBalanceForPaidLinkmicContent
 */
export const LinkerLowBalanceForPaidLinkmicContent = new LinkerLowBalanceForPaidLinkmicContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerDegradeAlertContent$Type extends MessageType<LinkerDegradeAlertContent> {
    constructor() {
        super("im.LinkerDegradeAlertContent", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "degrade_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerDegradeAlertContent>): LinkerDegradeAlertContent {
        const message = { degradeContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerDegradeAlertContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerDegradeAlertContent): LinkerDegradeAlertContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string degrade_content */ 2:
                    message.degradeContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerDegradeAlertContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string degrade_content = 2; */
        if (message.degradeContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.degradeContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerDegradeAlertContent
 */
export const LinkerDegradeAlertContent = new LinkerDegradeAlertContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerEnlargeGuestInviteContent$Type extends MessageType<LinkerEnlargeGuestInviteContent> {
    constructor() {
        super("im.LinkerEnlargeGuestInviteContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "invite_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerEnlargeGuestInviteContent>): LinkerEnlargeGuestInviteContent {
        const message = { fromUserId: 0n, toUserId: 0n, inviteType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerEnlargeGuestInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerEnlargeGuestInviteContent): LinkerEnlargeGuestInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 invite_type */ 3:
                    message.inviteType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerEnlargeGuestInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* int32 invite_type = 3; */
        if (message.inviteType !== 0)
            writer.tag(3, WireType.Varint).int32(message.inviteType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerEnlargeGuestInviteContent
 */
export const LinkerEnlargeGuestInviteContent = new LinkerEnlargeGuestInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerEnlargeGuestReplyContent$Type extends MessageType<LinkerEnlargeGuestReplyContent> {
    constructor() {
        super("im.LinkerEnlargeGuestReplyContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "reply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "reply_prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerEnlargeGuestReplyContent>): LinkerEnlargeGuestReplyContent {
        const message = { fromUserId: 0n, toUserId: 0n, replyType: 0, replyPrompts: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerEnlargeGuestReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerEnlargeGuestReplyContent): LinkerEnlargeGuestReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 reply_type */ 3:
                    message.replyType = reader.int32();
                    break;
                case /* string reply_prompts */ 4:
                    message.replyPrompts = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerEnlargeGuestReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* int32 reply_type = 3; */
        if (message.replyType !== 0)
            writer.tag(3, WireType.Varint).int32(message.replyType);
        /* string reply_prompts = 4; */
        if (message.replyPrompts !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.replyPrompts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerEnlargeGuestReplyContent
 */
export const LinkerEnlargeGuestReplyContent = new LinkerEnlargeGuestReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerEnlargeGuestApplyContent$Type extends MessageType<LinkerEnlargeGuestApplyContent> {
    constructor() {
        super("im.LinkerEnlargeGuestApplyContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "apply_prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerEnlargeGuestApplyContent>): LinkerEnlargeGuestApplyContent {
        const message = { fromUserId: 0n, applyPrompts: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerEnlargeGuestApplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerEnlargeGuestApplyContent): LinkerEnlargeGuestApplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* string apply_prompts */ 2:
                    message.applyPrompts = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerEnlargeGuestApplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* string apply_prompts = 2; */
        if (message.applyPrompts !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.applyPrompts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerEnlargeGuestApplyContent
 */
export const LinkerEnlargeGuestApplyContent = new LinkerEnlargeGuestApplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrossRoomLinkInviteContent$Type extends MessageType<CrossRoomLinkInviteContent> {
    constructor() {
        super("im.CrossRoomLinkInviteContent", [
            { no: 1, name: "inviter", kind: "message", T: () => User },
            { no: 2, name: "room_info", kind: "message", T: () => InviteRoomInfo },
            { no: 3, name: "invite_tips", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "inviter_room_join_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "room_battle_mode", kind: "message", T: () => RoomBattleMode }
        ]);
    }
    create(value?: PartialMessage<CrossRoomLinkInviteContent>): CrossRoomLinkInviteContent {
        const message = { inviteTips: "", inviterRoomJoinStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrossRoomLinkInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrossRoomLinkInviteContent): CrossRoomLinkInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User inviter */ 1:
                    message.inviter = User.internalBinaryRead(reader, reader.uint32(), options, message.inviter);
                    break;
                case /* data.InviteRoomInfo room_info */ 2:
                    message.roomInfo = InviteRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.roomInfo);
                    break;
                case /* string invite_tips */ 3:
                    message.inviteTips = reader.string();
                    break;
                case /* int32 inviter_room_join_status */ 4:
                    message.inviterRoomJoinStatus = reader.int32();
                    break;
                case /* data.RoomBattleMode room_battle_mode */ 5:
                    message.roomBattleMode = RoomBattleMode.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleMode);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrossRoomLinkInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User inviter = 1; */
        if (message.inviter)
            User.internalBinaryWrite(message.inviter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.InviteRoomInfo room_info = 2; */
        if (message.roomInfo)
            InviteRoomInfo.internalBinaryWrite(message.roomInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string invite_tips = 3; */
        if (message.inviteTips !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.inviteTips);
        /* int32 inviter_room_join_status = 4; */
        if (message.inviterRoomJoinStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.inviterRoomJoinStatus);
        /* data.RoomBattleMode room_battle_mode = 5; */
        if (message.roomBattleMode)
            RoomBattleMode.internalBinaryWrite(message.roomBattleMode, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CrossRoomLinkInviteContent
 */
export const CrossRoomLinkInviteContent = new CrossRoomLinkInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrossRoomLinkReplyContent$Type extends MessageType<CrossRoomLinkReplyContent> {
    constructor() {
        super("im.CrossRoomLinkReplyContent", [
            { no: 1, name: "reply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "invitee_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cross_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "guest_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CrossRoomLinkReplyGuestInfo },
            { no: 5, name: "invitee_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "follow_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "invite_source", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "reply_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "reply_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "reply_operate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "process_info", kind: "message", T: () => RoomBattleProcessInfo }
        ]);
    }
    create(value?: PartialMessage<CrossRoomLinkReplyContent>): CrossRoomLinkReplyContent {
        const message = { replyType: 0, inviteeRoomId: 0n, crossType: 0, guestInfos: [], inviteeAnchorId: 0n, followStatus: 0n, inviteSource: 0n, replyUserId: 0n, replyToast: "", replyOperate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrossRoomLinkReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrossRoomLinkReplyContent): CrossRoomLinkReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 reply_type */ 1:
                    message.replyType = reader.int32();
                    break;
                case /* int64 invitee_room_id */ 2:
                    message.inviteeRoomId = reader.int64().toBigInt();
                    break;
                case /* int32 cross_type */ 3:
                    message.crossType = reader.int32();
                    break;
                case /* repeated data.CrossRoomLinkReplyGuestInfo guest_infos */ 4:
                    message.guestInfos.push(CrossRoomLinkReplyGuestInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 invitee_anchor_id */ 5:
                    message.inviteeAnchorId = reader.int64().toBigInt();
                    break;
                case /* int64 follow_status */ 6:
                    message.followStatus = reader.int64().toBigInt();
                    break;
                case /* int64 invite_source */ 7:
                    message.inviteSource = reader.int64().toBigInt();
                    break;
                case /* int64 reply_user_id */ 8:
                    message.replyUserId = reader.int64().toBigInt();
                    break;
                case /* string reply_toast */ 9:
                    message.replyToast = reader.string();
                    break;
                case /* int32 reply_operate */ 10:
                    message.replyOperate = reader.int32();
                    break;
                case /* data.RoomBattleProcessInfo process_info */ 11:
                    message.processInfo = RoomBattleProcessInfo.internalBinaryRead(reader, reader.uint32(), options, message.processInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrossRoomLinkReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 reply_type = 1; */
        if (message.replyType !== 0)
            writer.tag(1, WireType.Varint).int32(message.replyType);
        /* int64 invitee_room_id = 2; */
        if (message.inviteeRoomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.inviteeRoomId);
        /* int32 cross_type = 3; */
        if (message.crossType !== 0)
            writer.tag(3, WireType.Varint).int32(message.crossType);
        /* repeated data.CrossRoomLinkReplyGuestInfo guest_infos = 4; */
        for (let i = 0; i < message.guestInfos.length; i++)
            CrossRoomLinkReplyGuestInfo.internalBinaryWrite(message.guestInfos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 invitee_anchor_id = 5; */
        if (message.inviteeAnchorId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.inviteeAnchorId);
        /* int64 follow_status = 6; */
        if (message.followStatus !== 0n)
            writer.tag(6, WireType.Varint).int64(message.followStatus);
        /* int64 invite_source = 7; */
        if (message.inviteSource !== 0n)
            writer.tag(7, WireType.Varint).int64(message.inviteSource);
        /* int64 reply_user_id = 8; */
        if (message.replyUserId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.replyUserId);
        /* string reply_toast = 9; */
        if (message.replyToast !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.replyToast);
        /* int32 reply_operate = 10; */
        if (message.replyOperate !== 0)
            writer.tag(10, WireType.Varint).int32(message.replyOperate);
        /* data.RoomBattleProcessInfo process_info = 11; */
        if (message.processInfo)
            RoomBattleProcessInfo.internalBinaryWrite(message.processInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CrossRoomLinkReplyContent
 */
export const CrossRoomLinkReplyContent = new CrossRoomLinkReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrossRoomLinkCancelInviteContent$Type extends MessageType<CrossRoomLinkCancelInviteContent> {
    constructor() {
        super("im.CrossRoomLinkCancelInviteContent", [
            { no: 1, name: "canceller_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CrossRoomLinkCancelInviteContent>): CrossRoomLinkCancelInviteContent {
        const message = { cancellerRoomId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrossRoomLinkCancelInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrossRoomLinkCancelInviteContent): CrossRoomLinkCancelInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 canceller_room_id */ 1:
                    message.cancellerRoomId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrossRoomLinkCancelInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 canceller_room_id = 1; */
        if (message.cancellerRoomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.cancellerRoomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CrossRoomLinkCancelInviteContent
 */
export const CrossRoomLinkCancelInviteContent = new CrossRoomLinkCancelInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerCrossRoomUpdateContent$Type extends MessageType<LinkerCrossRoomUpdateContent> {
    constructor() {
        super("im.LinkerCrossRoomUpdateContent", [
            { no: 1, name: "from_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 5, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerCrossRoomUpdateContent>): LinkerCrossRoomUpdateContent {
        const message = { fromRoomId: 0n, toRoomId: 0n, linkedUsers: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerCrossRoomUpdateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerCrossRoomUpdateContent): LinkerCrossRoomUpdateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_room_id */ 1:
                    message.fromRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 to_room_id */ 2:
                    message.toRoomId = reader.int64().toBigInt();
                    break;
                case /* repeated data.ListUser linked_users */ 4:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 version */ 5:
                    message.version = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerCrossRoomUpdateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_room_id = 1; */
        if (message.fromRoomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromRoomId);
        /* int64 to_room_id = 2; */
        if (message.toRoomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toRoomId);
        /* repeated data.ListUser linked_users = 4; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 5; */
        if (message.version !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerCrossRoomUpdateContent
 */
export const LinkerCrossRoomUpdateContent = new LinkerCrossRoomUpdateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerChangeMultiPKTeamInfoContent$Type extends MessageType<LinkerChangeMultiPKTeamInfoContent> {
    constructor() {
        super("im.LinkerChangeMultiPKTeamInfoContent", [
            { no: 1, name: "multi_pk_mode_info", kind: "message", T: () => MultiPKModeInfo },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerChangeMultiPKTeamInfoContent>): LinkerChangeMultiPKTeamInfoContent {
        const message = { toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerChangeMultiPKTeamInfoContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerChangeMultiPKTeamInfoContent): LinkerChangeMultiPKTeamInfoContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MultiPKModeInfo multi_pk_mode_info */ 1:
                    message.multiPkModeInfo = MultiPKModeInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiPkModeInfo);
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerChangeMultiPKTeamInfoContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MultiPKModeInfo multi_pk_mode_info = 1; */
        if (message.multiPkModeInfo)
            MultiPKModeInfo.internalBinaryWrite(message.multiPkModeInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerChangeMultiPKTeamInfoContent
 */
export const LinkerChangeMultiPKTeamInfoContent = new LinkerChangeMultiPKTeamInfoContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerResumeAudienceContent$Type extends MessageType<LinkerResumeAudienceContent> {
    constructor() {
        super("im.LinkerResumeAudienceContent", [
            { no: 1, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 4, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerResumeAudienceContent>): LinkerResumeAudienceContent {
        const message = { rtcExtInfo: "", liveCoreExtInfo: "", linkedUsers: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerResumeAudienceContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerResumeAudienceContent): LinkerResumeAudienceContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rtc_ext_info */ 1:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_ext_info */ 2:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* repeated data.ListUser linked_users */ 3:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 version */ 4:
                    message.version = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerResumeAudienceContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rtc_ext_info = 1; */
        if (message.rtcExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_ext_info = 2; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* repeated data.ListUser linked_users = 3; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 4; */
        if (message.version !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerResumeAudienceContent
 */
export const LinkerResumeAudienceContent = new LinkerResumeAudienceContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerBattleConnectContent$Type extends MessageType<LinkerBattleConnectContent> {
    constructor() {
        super("im.LinkerBattleConnectContent", [
            { no: 1, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo },
            { no: 5, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "anchor_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser }
        ]);
    }
    create(value?: PartialMessage<LinkerBattleConnectContent>): LinkerBattleConnectContent {
        const message = { liveCoreExtInfo: "", rtcExtInfo: "", version: 0n, anchorUserList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerBattleConnectContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerBattleConnectContent): LinkerBattleConnectContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string live_core_ext_info */ 1:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* string rtc_ext_info */ 2:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 4:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                case /* uint64 version */ 5:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* repeated data.ListUser anchor_user_list */ 6:
                    message.anchorUserList.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerBattleConnectContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string live_core_ext_info = 1; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* string rtc_ext_info = 2; */
        if (message.rtcExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* data.MultiChannelInfo multi_channel_info = 4; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 5; */
        if (message.version !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.version);
        /* repeated data.ListUser anchor_user_list = 6; */
        for (let i = 0; i < message.anchorUserList.length; i++)
            ListUser.internalBinaryWrite(message.anchorUserList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerBattleConnectContent
 */
export const LinkerBattleConnectContent = new LinkerBattleConnectContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerResumeApplyContent$Type extends MessageType<LinkerResumeApplyContent> {
    constructor() {
        super("im.LinkerResumeApplyContent", [
            { no: 1, name: "param", kind: "message", T: () => LinkerResumeApplyContent_ApplyParam },
            { no: 2, name: "apply_user", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerResumeApplyContent>): LinkerResumeApplyContent {
        const message = { applyUser: 0n, roomId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerResumeApplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerResumeApplyContent): LinkerResumeApplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.LinkerResumeApplyContent.ApplyParam param */ 1:
                    message.param = LinkerResumeApplyContent_ApplyParam.internalBinaryRead(reader, reader.uint32(), options, message.param);
                    break;
                case /* int64 apply_user */ 2:
                    message.applyUser = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 3:
                    message.roomId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerResumeApplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.LinkerResumeApplyContent.ApplyParam param = 1; */
        if (message.param)
            LinkerResumeApplyContent_ApplyParam.internalBinaryWrite(message.param, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 apply_user = 2; */
        if (message.applyUser !== 0n)
            writer.tag(2, WireType.Varint).int64(message.applyUser);
        /* int64 room_id = 3; */
        if (message.roomId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerResumeApplyContent
 */
export const LinkerResumeApplyContent = new LinkerResumeApplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerResumeApplyContent_ApplyParam$Type extends MessageType<LinkerResumeApplyContent_ApplyParam> {
    constructor() {
        super("im.LinkerResumeApplyContent.ApplyParam", [
            { no: 1, name: "apply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerResumeApplyContent_ApplyParam>): LinkerResumeApplyContent_ApplyParam {
        const message = { applyType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerResumeApplyContent_ApplyParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerResumeApplyContent_ApplyParam): LinkerResumeApplyContent_ApplyParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 apply_type */ 1:
                    message.applyType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerResumeApplyContent_ApplyParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 apply_type = 1; */
        if (message.applyType !== 0)
            writer.tag(1, WireType.Varint).int32(message.applyType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerResumeApplyContent.ApplyParam
 */
export const LinkerResumeApplyContent_ApplyParam = new LinkerResumeApplyContent_ApplyParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrossRoomRTCInfoContent$Type extends MessageType<CrossRoomRTCInfoContent> {
    constructor() {
        super("im.CrossRoomRTCInfoContent", [
            { no: 1, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo }
        ]);
    }
    create(value?: PartialMessage<CrossRoomRTCInfoContent>): CrossRoomRTCInfoContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrossRoomRTCInfoContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrossRoomRTCInfoContent): CrossRoomRTCInfoContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MultiChannelInfo multi_channel_info */ 1:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrossRoomRTCInfoContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MultiChannelInfo multi_channel_info = 1; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CrossRoomRTCInfoContent
 */
export const CrossRoomRTCInfoContent = new CrossRoomRTCInfoContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorUpdateLinkmicConfigContent$Type extends MessageType<AnchorUpdateLinkmicConfigContent> {
    constructor() {
        super("im.AnchorUpdateLinkmicConfigContent", [
            { no: 1, name: "forbid_invite_by_general", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "forbid_apply_from_other", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorUpdateLinkmicConfigContent>): AnchorUpdateLinkmicConfigContent {
        const message = { forbidInviteByGeneral: false, forbidApplyFromOther: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorUpdateLinkmicConfigContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorUpdateLinkmicConfigContent): AnchorUpdateLinkmicConfigContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool forbid_invite_by_general */ 1:
                    message.forbidInviteByGeneral = reader.bool();
                    break;
                case /* bool forbid_apply_from_other */ 2:
                    message.forbidApplyFromOther = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorUpdateLinkmicConfigContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool forbid_invite_by_general = 1; */
        if (message.forbidInviteByGeneral !== false)
            writer.tag(1, WireType.Varint).bool(message.forbidInviteByGeneral);
        /* bool forbid_apply_from_other = 2; */
        if (message.forbidApplyFromOther !== false)
            writer.tag(2, WireType.Varint).bool(message.forbidApplyFromOther);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnchorUpdateLinkmicConfigContent
 */
export const AnchorUpdateLinkmicConfigContent = new AnchorUpdateLinkmicConfigContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorUpdateLayoutContent$Type extends MessageType<AnchorUpdateLayoutContent> {
    constructor() {
        super("im.AnchorUpdateLayoutContent", [
            { no: 1, name: "layout_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "update_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "anchor_ui_layout", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "anchor_layout_range", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "operator_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorUpdateLayoutContent>): AnchorUpdateLayoutContent {
        const message = { layoutType: 0, updateUserId: 0n, anchorUiLayout: 0, anchorLayoutRange: 0, operatorId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorUpdateLayoutContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorUpdateLayoutContent): AnchorUpdateLayoutContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 layout_type */ 1:
                    message.layoutType = reader.int32();
                    break;
                case /* int64 update_user_id */ 2:
                    message.updateUserId = reader.int64().toBigInt();
                    break;
                case /* int32 anchor_ui_layout */ 3:
                    message.anchorUiLayout = reader.int32();
                    break;
                case /* int32 anchor_layout_range */ 4:
                    message.anchorLayoutRange = reader.int32();
                    break;
                case /* int64 operator_id */ 5:
                    message.operatorId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorUpdateLayoutContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 layout_type = 1; */
        if (message.layoutType !== 0)
            writer.tag(1, WireType.Varint).int32(message.layoutType);
        /* int64 update_user_id = 2; */
        if (message.updateUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.updateUserId);
        /* int32 anchor_ui_layout = 3; */
        if (message.anchorUiLayout !== 0)
            writer.tag(3, WireType.Varint).int32(message.anchorUiLayout);
        /* int32 anchor_layout_range = 4; */
        if (message.anchorLayoutRange !== 0)
            writer.tag(4, WireType.Varint).int32(message.anchorLayoutRange);
        /* int64 operator_id = 5; */
        if (message.operatorId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.operatorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnchorUpdateLayoutContent
 */
export const AnchorUpdateLayoutContent = new AnchorUpdateLayoutContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerApplyRankChangeContent$Type extends MessageType<LinkerApplyRankChangeContent> {
    constructor() {
        super("im.LinkerApplyRankChangeContent", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerApplyRankChangeContent>): LinkerApplyRankChangeContent {
        const message = { roomId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerApplyRankChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerApplyRankChangeContent): LinkerApplyRankChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerApplyRankChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerApplyRankChangeContent
 */
export const LinkerApplyRankChangeContent = new LinkerApplyRankChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerChangeMediaInfoContent$Type extends MessageType<LinkerChangeMediaInfoContent> {
    constructor() {
        super("im.LinkerChangeMediaInfoContent", [
            { no: 1, name: "scene_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "play_mode_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "linkmic_media_param", kind: "message", T: () => LinkmicMediaParam }
        ]);
    }
    create(value?: PartialMessage<LinkerChangeMediaInfoContent>): LinkerChangeMediaInfoContent {
        const message = { sceneList: [], playModeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerChangeMediaInfoContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerChangeMediaInfoContent): LinkerChangeMediaInfoContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 scene_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sceneList.push(reader.int32());
                    else
                        message.sceneList.push(reader.int32());
                    break;
                case /* repeated int32 play_mode_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playModeList.push(reader.int32());
                    else
                        message.playModeList.push(reader.int32());
                    break;
                case /* data.LinkmicMediaParam linkmic_media_param */ 3:
                    message.linkmicMediaParam = LinkmicMediaParam.internalBinaryRead(reader, reader.uint32(), options, message.linkmicMediaParam);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerChangeMediaInfoContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 scene_list = 1; */
        if (message.sceneList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sceneList.length; i++)
                writer.int32(message.sceneList[i]);
            writer.join();
        }
        /* repeated int32 play_mode_list = 2; */
        if (message.playModeList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playModeList.length; i++)
                writer.int32(message.playModeList[i]);
            writer.join();
        }
        /* data.LinkmicMediaParam linkmic_media_param = 3; */
        if (message.linkmicMediaParam)
            LinkmicMediaParam.internalBinaryWrite(message.linkmicMediaParam, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerChangeMediaInfoContent
 */
export const LinkerChangeMediaInfoContent = new LinkerChangeMediaInfoContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerUILayoutChangeContent$Type extends MessageType<LinkerUILayoutChangeContent> {
    constructor() {
        super("im.LinkerUILayoutChangeContent", [
            { no: 1, name: "ui_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "multi_rtc_info", kind: "message", T: () => MultiRtcInfo },
            { no: 5, name: "multi_live_core_info", kind: "message", T: () => MultiLiveCoreInfo }
        ]);
    }
    create(value?: PartialMessage<LinkerUILayoutChangeContent>): LinkerUILayoutChangeContent {
        const message = { uiLayout: 0n, rtcExtInfo: "", liveCoreExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerUILayoutChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerUILayoutChangeContent): LinkerUILayoutChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ui_layout */ 1:
                    message.uiLayout = reader.int64().toBigInt();
                    break;
                case /* string rtc_ext_info */ 2:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_ext_info */ 3:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* data.MultiRtcInfo multi_rtc_info */ 4:
                    message.multiRtcInfo = MultiRtcInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiRtcInfo);
                    break;
                case /* data.MultiLiveCoreInfo multi_live_core_info */ 5:
                    message.multiLiveCoreInfo = MultiLiveCoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiLiveCoreInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerUILayoutChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 ui_layout = 1; */
        if (message.uiLayout !== 0n)
            writer.tag(1, WireType.Varint).int64(message.uiLayout);
        /* string rtc_ext_info = 2; */
        if (message.rtcExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_ext_info = 3; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* data.MultiRtcInfo multi_rtc_info = 4; */
        if (message.multiRtcInfo)
            MultiRtcInfo.internalBinaryWrite(message.multiRtcInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiLiveCoreInfo multi_live_core_info = 5; */
        if (message.multiLiveCoreInfo)
            MultiLiveCoreInfo.internalBinaryWrite(message.multiLiveCoreInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerUILayoutChangeContent
 */
export const LinkerUILayoutChangeContent = new LinkerUILayoutChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerUpdateWaitingUserOffsetContent$Type extends MessageType<LinkerUpdateWaitingUserOffsetContent> {
    constructor() {
        super("im.LinkerUpdateWaitingUserOffsetContent", [
            { no: 1, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "sort_strategy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerUpdateWaitingUserOffsetContent>): LinkerUpdateWaitingUserOffsetContent {
        const message = { offset: 0n, sortStrategy: 0, totalCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerUpdateWaitingUserOffsetContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerUpdateWaitingUserOffsetContent): LinkerUpdateWaitingUserOffsetContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 offset */ 1:
                    message.offset = reader.int64().toBigInt();
                    break;
                case /* int32 sort_strategy */ 2:
                    message.sortStrategy = reader.int32();
                    break;
                case /* int64 total_count */ 3:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerUpdateWaitingUserOffsetContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 offset = 1; */
        if (message.offset !== 0n)
            writer.tag(1, WireType.Varint).int64(message.offset);
        /* int32 sort_strategy = 2; */
        if (message.sortStrategy !== 0)
            writer.tag(2, WireType.Varint).int32(message.sortStrategy);
        /* int64 total_count = 3; */
        if (message.totalCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerUpdateWaitingUserOffsetContent
 */
export const LinkerUpdateWaitingUserOffsetContent = new LinkerUpdateWaitingUserOffsetContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkerRemoveWaitingUserContent$Type extends MessageType<LinkerRemoveWaitingUserContent> {
    constructor() {
        super("im.LinkerRemoveWaitingUserContent", [
            { no: 1, name: "waiting_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkerRemoveWaitingUserContent>): LinkerRemoveWaitingUserContent {
        const message = { waitingUserToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkerRemoveWaitingUserContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkerRemoveWaitingUserContent): LinkerRemoveWaitingUserContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string waiting_user_toast */ 1:
                    message.waitingUserToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkerRemoveWaitingUserContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string waiting_user_toast = 1; */
        if (message.waitingUserToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.waitingUserToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkerRemoveWaitingUserContent
 */
export const LinkerRemoveWaitingUserContent = new LinkerRemoveWaitingUserContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicArmies$Type extends MessageType<LinkMicArmies> {
    constructor() {
        super("im.LinkMicArmies", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 3, name: "user_armies_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMicArmies_UserArmies },
            { no: 4, name: "rank_list_v2", kind: "message", T: () => BattleContributorsRankListV2 }
        ]);
    }
    create(value?: PartialMessage<LinkMicArmies>): LinkMicArmies {
        const message = { userArmiesList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicArmies>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicArmies): LinkMicArmies {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.LinkMicArmies.UserArmies user_armies_list */ 3:
                    message.userArmiesList.push(LinkMicArmies_UserArmies.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.BattleContributorsRankListV2 rank_list_v2 */ 4:
                    message.rankListV2 = BattleContributorsRankListV2.internalBinaryRead(reader, reader.uint32(), options, message.rankListV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicArmies, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.LinkMicArmies.UserArmies user_armies_list = 3; */
        for (let i = 0; i < message.userArmiesList.length; i++)
            LinkMicArmies_UserArmies.internalBinaryWrite(message.userArmiesList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleContributorsRankListV2 rank_list_v2 = 4; */
        if (message.rankListV2)
            BattleContributorsRankListV2.internalBinaryWrite(message.rankListV2, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicArmies
 */
export const LinkMicArmies = new LinkMicArmies$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicArmies_UserArmies$Type extends MessageType<LinkMicArmies_UserArmies> {
    constructor() {
        super("im.LinkMicArmies.UserArmies", [
            { no: 1, name: "user_armies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMicArmies_UserArmies_UserArmy }
        ]);
    }
    create(value?: PartialMessage<LinkMicArmies_UserArmies>): LinkMicArmies_UserArmies {
        const message = { userArmies: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicArmies_UserArmies>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicArmies_UserArmies): LinkMicArmies_UserArmies {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.LinkMicArmies.UserArmies.UserArmy user_armies */ 1:
                    message.userArmies.push(LinkMicArmies_UserArmies_UserArmy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicArmies_UserArmies, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.LinkMicArmies.UserArmies.UserArmy user_armies = 1; */
        for (let i = 0; i < message.userArmies.length; i++)
            LinkMicArmies_UserArmies_UserArmy.internalBinaryWrite(message.userArmies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicArmies.UserArmies
 */
export const LinkMicArmies_UserArmies = new LinkMicArmies_UserArmies$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicArmies_UserArmies_UserArmy$Type extends MessageType<LinkMicArmies_UserArmies_UserArmy> {
    constructor() {
        super("im.LinkMicArmies.UserArmies.UserArmy", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "avatar_thumb", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LinkMicArmies_UserArmies_UserArmy>): LinkMicArmies_UserArmies_UserArmy {
        const message = { userId: 0n, score: 0n, nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicArmies_UserArmies_UserArmy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicArmies_UserArmies_UserArmy): LinkMicArmies_UserArmies_UserArmy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 4:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicArmies_UserArmies_UserArmy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        /* string nickname = 3; */
        if (message.nickname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickname);
        /* data.Image avatar_thumb = 4; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicArmies.UserArmies.UserArmy
 */
export const LinkMicArmies_UserArmies_UserArmy = new LinkMicArmies_UserArmies_UserArmy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicBattleFinish$Type extends MessageType<LinkMicBattleFinish> {
    constructor() {
        super("im.LinkMicBattleFinish", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "battle_settings", kind: "message", T: () => BattleSettings },
            { no: 3, name: "battle_armies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleArmy },
            { no: 4, name: "battle_scores", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleScore },
            { no: 5, name: "anchors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 7, name: "operational_play", kind: "message", T: () => OperationalPlay },
            { no: 8, name: "end_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "cut_short_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "cut_short_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "cut_short_win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "kill_finish_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "breakthrough_info", kind: "message", T: () => BreakthroughInfo },
            { no: 15, name: "skin_config", kind: "message", T: () => BattleSkinConfig },
            { no: 16, name: "skin_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicBattleFinish>): LinkMicBattleFinish {
        const message = { battleArmies: [], battleScores: [], anchors: [], endReason: 0, cutShortPrompt: "", cutShortToast: "", cutShortWin: false, killFinishType: 0, skinType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicBattleFinish>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicBattleFinish): LinkMicBattleFinish {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.BattleSettings battle_settings */ 2:
                    message.battleSettings = BattleSettings.internalBinaryRead(reader, reader.uint32(), options, message.battleSettings);
                    break;
                case /* repeated data.BattleArmy battle_armies */ 3:
                    message.battleArmies.push(BattleArmy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.BattleScore battle_scores */ 4:
                    message.battleScores.push(BattleScore.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.User anchors */ 5:
                    message.anchors.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.OperationalPlay operational_play */ 7:
                    message.operationalPlay = OperationalPlay.internalBinaryRead(reader, reader.uint32(), options, message.operationalPlay);
                    break;
                case /* int32 end_reason */ 8:
                    message.endReason = reader.int32();
                    break;
                case /* string cut_short_prompt */ 9:
                    message.cutShortPrompt = reader.string();
                    break;
                case /* string cut_short_toast */ 10:
                    message.cutShortToast = reader.string();
                    break;
                case /* bool cut_short_win */ 11:
                    message.cutShortWin = reader.bool();
                    break;
                case /* int32 kill_finish_type */ 13:
                    message.killFinishType = reader.int32();
                    break;
                case /* data.BreakthroughInfo breakthrough_info */ 14:
                    message.breakthroughInfo = BreakthroughInfo.internalBinaryRead(reader, reader.uint32(), options, message.breakthroughInfo);
                    break;
                case /* data.BattleSkinConfig skin_config */ 15:
                    message.skinConfig = BattleSkinConfig.internalBinaryRead(reader, reader.uint32(), options, message.skinConfig);
                    break;
                case /* int32 skin_type */ 16:
                    message.skinType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicBattleFinish, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleSettings battle_settings = 2; */
        if (message.battleSettings)
            BattleSettings.internalBinaryWrite(message.battleSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.BattleArmy battle_armies = 3; */
        for (let i = 0; i < message.battleArmies.length; i++)
            BattleArmy.internalBinaryWrite(message.battleArmies[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.BattleScore battle_scores = 4; */
        for (let i = 0; i < message.battleScores.length; i++)
            BattleScore.internalBinaryWrite(message.battleScores[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.User anchors = 5; */
        for (let i = 0; i < message.anchors.length; i++)
            User.internalBinaryWrite(message.anchors[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.OperationalPlay operational_play = 7; */
        if (message.operationalPlay)
            OperationalPlay.internalBinaryWrite(message.operationalPlay, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 end_reason = 8; */
        if (message.endReason !== 0)
            writer.tag(8, WireType.Varint).int32(message.endReason);
        /* string cut_short_prompt = 9; */
        if (message.cutShortPrompt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.cutShortPrompt);
        /* string cut_short_toast = 10; */
        if (message.cutShortToast !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.cutShortToast);
        /* bool cut_short_win = 11; */
        if (message.cutShortWin !== false)
            writer.tag(11, WireType.Varint).bool(message.cutShortWin);
        /* int32 kill_finish_type = 13; */
        if (message.killFinishType !== 0)
            writer.tag(13, WireType.Varint).int32(message.killFinishType);
        /* data.BreakthroughInfo breakthrough_info = 14; */
        if (message.breakthroughInfo)
            BreakthroughInfo.internalBinaryWrite(message.breakthroughInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleSkinConfig skin_config = 15; */
        if (message.skinConfig)
            BattleSkinConfig.internalBinaryWrite(message.skinConfig, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* int32 skin_type = 16; */
        if (message.skinType !== 0)
            writer.tag(16, WireType.Varint).int32(message.skinType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicBattleFinish
 */
export const LinkMicBattleFinish = new LinkMicBattleFinish$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleMode$Type extends MessageType<BattleMode> {
    constructor() {
        super("im.BattleMode", [
            { no: 1, name: "mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "steal_tower_data", kind: "message", T: () => BattleMode_StealTowerData }
        ]);
    }
    create(value?: PartialMessage<BattleMode>): BattleMode {
        const message = { mode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleMode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleMode): BattleMode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 mode */ 1:
                    message.mode = reader.int32();
                    break;
                case /* im.BattleMode.StealTowerData steal_tower_data */ 2:
                    message.stealTowerData = BattleMode_StealTowerData.internalBinaryRead(reader, reader.uint32(), options, message.stealTowerData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleMode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 mode = 1; */
        if (message.mode !== 0)
            writer.tag(1, WireType.Varint).int32(message.mode);
        /* im.BattleMode.StealTowerData steal_tower_data = 2; */
        if (message.stealTowerData)
            BattleMode_StealTowerData.internalBinaryWrite(message.stealTowerData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleMode
 */
export const BattleMode = new BattleMode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleMode_StealTowerData$Type extends MessageType<BattleMode_StealTowerData> {
    constructor() {
        super("im.BattleMode.StealTowerData", [
            { no: 1, name: "trigger_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleMode_StealTowerData>): BattleMode_StealTowerData {
        const message = { triggerTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleMode_StealTowerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleMode_StealTowerData): BattleMode_StealTowerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 trigger_time */ 1:
                    message.triggerTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleMode_StealTowerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 trigger_time = 1; */
        if (message.triggerTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.triggerTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleMode.StealTowerData
 */
export const BattleMode_StealTowerData = new BattleMode_StealTowerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleSettings$Type extends MessageType<BattleSettings> {
    constructor() {
        super("im.BattleSettings", [
            { no: 2, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "banner_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "sub_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "config", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "notify_scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "hotsoon_notify_scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "unknwon_field1", kind: "message", T: () => Image },
            { no: 15, name: "unknwon_field2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "unknwon_field3", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "title_config", kind: "message", T: () => BattleTitleConfig },
            { no: 18, name: "punish_config", kind: "message", T: () => BattleTitleConfig },
            { no: 19, name: "punish_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "punish_start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "optimize_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "punish_optimize_on", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "blood_display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "status_display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "need_close_linkmic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "display_last_result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "normal_activity_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "invite_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "battle_config_setting", kind: "message", T: () => BattleConfigSetting },
            { no: 32, name: "bar_config", kind: "message", T: () => BattleBarConfig },
            { no: 33, name: "hotsoon_bar_config", kind: "message", T: () => BattleBarConfig },
            { no: 34, name: "initiator_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 35, name: "battle_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 36, name: "finished", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BattleSettings>): BattleSettings {
        const message = { battleId: 0n, startTimeMs: 0n, duration: 0n, theme: "", channelId: 0n, matchType: 0n, bannerUrl: "", subType: 0n, mode: 0, config: "", notifySchemeUrl: "", hotsoonNotifySchemeUrl: "", unknwonField2: "", unknwonField3: "", punishDuration: 0n, punishStartTimeMs: 0n, optimizeVersion: 0, punishOptimizeOn: false, bloodDisplayDuration: 0n, statusDisplayDuration: 0n, toast: "", needCloseLinkmic: false, displayLastResult: false, normalActivityName: "", inviteType: 0, initiatorId: 0n, battleType: 0, finished: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleSettings): BattleSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 battle_id */ 2:
                    message.battleId = reader.int64().toBigInt();
                    break;
                case /* int64 start_time_ms */ 3:
                    message.startTimeMs = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 4:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string theme */ 5:
                    message.theme = reader.string();
                    break;
                case /* int64 channel_id */ 6:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 match_type */ 7:
                    message.matchType = reader.int64().toBigInt();
                    break;
                case /* string banner_url */ 8:
                    message.bannerUrl = reader.string();
                    break;
                case /* int64 sub_type */ 9:
                    message.subType = reader.int64().toBigInt();
                    break;
                case /* int32 mode */ 10:
                    message.mode = reader.int32();
                    break;
                case /* string config */ 11:
                    message.config = reader.string();
                    break;
                case /* string notify_scheme_url */ 12:
                    message.notifySchemeUrl = reader.string();
                    break;
                case /* string hotsoon_notify_scheme_url */ 13:
                    message.hotsoonNotifySchemeUrl = reader.string();
                    break;
                case /* data.Image unknwon_field1 */ 14:
                    message.unknwonField1 = Image.internalBinaryRead(reader, reader.uint32(), options, message.unknwonField1);
                    break;
                case /* string unknwon_field2 */ 15:
                    message.unknwonField2 = reader.string();
                    break;
                case /* string unknwon_field3 */ 16:
                    message.unknwonField3 = reader.string();
                    break;
                case /* data.BattleTitleConfig title_config */ 17:
                    message.titleConfig = BattleTitleConfig.internalBinaryRead(reader, reader.uint32(), options, message.titleConfig);
                    break;
                case /* data.BattleTitleConfig punish_config */ 18:
                    message.punishConfig = BattleTitleConfig.internalBinaryRead(reader, reader.uint32(), options, message.punishConfig);
                    break;
                case /* int64 punish_duration */ 19:
                    message.punishDuration = reader.int64().toBigInt();
                    break;
                case /* int64 punish_start_time_ms */ 20:
                    message.punishStartTimeMs = reader.int64().toBigInt();
                    break;
                case /* int32 optimize_version */ 21:
                    message.optimizeVersion = reader.int32();
                    break;
                case /* bool punish_optimize_on */ 22:
                    message.punishOptimizeOn = reader.bool();
                    break;
                case /* int64 blood_display_duration */ 23:
                    message.bloodDisplayDuration = reader.int64().toBigInt();
                    break;
                case /* int64 status_display_duration */ 24:
                    message.statusDisplayDuration = reader.int64().toBigInt();
                    break;
                case /* string toast */ 25:
                    message.toast = reader.string();
                    break;
                case /* bool need_close_linkmic */ 26:
                    message.needCloseLinkmic = reader.bool();
                    break;
                case /* bool display_last_result */ 27:
                    message.displayLastResult = reader.bool();
                    break;
                case /* string normal_activity_name */ 28:
                    message.normalActivityName = reader.string();
                    break;
                case /* int32 invite_type */ 29:
                    message.inviteType = reader.int32();
                    break;
                case /* data.BattleConfigSetting battle_config_setting */ 31:
                    message.battleConfigSetting = BattleConfigSetting.internalBinaryRead(reader, reader.uint32(), options, message.battleConfigSetting);
                    break;
                case /* data.BattleBarConfig bar_config */ 32:
                    message.barConfig = BattleBarConfig.internalBinaryRead(reader, reader.uint32(), options, message.barConfig);
                    break;
                case /* data.BattleBarConfig hotsoon_bar_config */ 33:
                    message.hotsoonBarConfig = BattleBarConfig.internalBinaryRead(reader, reader.uint32(), options, message.hotsoonBarConfig);
                    break;
                case /* int64 initiator_id */ 34:
                    message.initiatorId = reader.int64().toBigInt();
                    break;
                case /* int32 battle_type */ 35:
                    message.battleType = reader.int32();
                    break;
                case /* int64 finished */ 36:
                    message.finished = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 battle_id = 2; */
        if (message.battleId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.battleId);
        /* int64 start_time_ms = 3; */
        if (message.startTimeMs !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startTimeMs);
        /* int64 duration = 4; */
        if (message.duration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.duration);
        /* string theme = 5; */
        if (message.theme !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.theme);
        /* int64 channel_id = 6; */
        if (message.channelId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.channelId);
        /* int64 match_type = 7; */
        if (message.matchType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.matchType);
        /* string banner_url = 8; */
        if (message.bannerUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.bannerUrl);
        /* int64 sub_type = 9; */
        if (message.subType !== 0n)
            writer.tag(9, WireType.Varint).int64(message.subType);
        /* int32 mode = 10; */
        if (message.mode !== 0)
            writer.tag(10, WireType.Varint).int32(message.mode);
        /* string config = 11; */
        if (message.config !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.config);
        /* string notify_scheme_url = 12; */
        if (message.notifySchemeUrl !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.notifySchemeUrl);
        /* string hotsoon_notify_scheme_url = 13; */
        if (message.hotsoonNotifySchemeUrl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.hotsoonNotifySchemeUrl);
        /* data.Image unknwon_field1 = 14; */
        if (message.unknwonField1)
            Image.internalBinaryWrite(message.unknwonField1, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* string unknwon_field2 = 15; */
        if (message.unknwonField2 !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.unknwonField2);
        /* string unknwon_field3 = 16; */
        if (message.unknwonField3 !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.unknwonField3);
        /* data.BattleTitleConfig title_config = 17; */
        if (message.titleConfig)
            BattleTitleConfig.internalBinaryWrite(message.titleConfig, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleTitleConfig punish_config = 18; */
        if (message.punishConfig)
            BattleTitleConfig.internalBinaryWrite(message.punishConfig, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* int64 punish_duration = 19; */
        if (message.punishDuration !== 0n)
            writer.tag(19, WireType.Varint).int64(message.punishDuration);
        /* int64 punish_start_time_ms = 20; */
        if (message.punishStartTimeMs !== 0n)
            writer.tag(20, WireType.Varint).int64(message.punishStartTimeMs);
        /* int32 optimize_version = 21; */
        if (message.optimizeVersion !== 0)
            writer.tag(21, WireType.Varint).int32(message.optimizeVersion);
        /* bool punish_optimize_on = 22; */
        if (message.punishOptimizeOn !== false)
            writer.tag(22, WireType.Varint).bool(message.punishOptimizeOn);
        /* int64 blood_display_duration = 23; */
        if (message.bloodDisplayDuration !== 0n)
            writer.tag(23, WireType.Varint).int64(message.bloodDisplayDuration);
        /* int64 status_display_duration = 24; */
        if (message.statusDisplayDuration !== 0n)
            writer.tag(24, WireType.Varint).int64(message.statusDisplayDuration);
        /* string toast = 25; */
        if (message.toast !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.toast);
        /* bool need_close_linkmic = 26; */
        if (message.needCloseLinkmic !== false)
            writer.tag(26, WireType.Varint).bool(message.needCloseLinkmic);
        /* bool display_last_result = 27; */
        if (message.displayLastResult !== false)
            writer.tag(27, WireType.Varint).bool(message.displayLastResult);
        /* string normal_activity_name = 28; */
        if (message.normalActivityName !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.normalActivityName);
        /* int32 invite_type = 29; */
        if (message.inviteType !== 0)
            writer.tag(29, WireType.Varint).int32(message.inviteType);
        /* data.BattleConfigSetting battle_config_setting = 31; */
        if (message.battleConfigSetting)
            BattleConfigSetting.internalBinaryWrite(message.battleConfigSetting, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleBarConfig bar_config = 32; */
        if (message.barConfig)
            BattleBarConfig.internalBinaryWrite(message.barConfig, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* data.BattleBarConfig hotsoon_bar_config = 33; */
        if (message.hotsoonBarConfig)
            BattleBarConfig.internalBinaryWrite(message.hotsoonBarConfig, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* int64 initiator_id = 34; */
        if (message.initiatorId !== 0n)
            writer.tag(34, WireType.Varint).int64(message.initiatorId);
        /* int32 battle_type = 35; */
        if (message.battleType !== 0)
            writer.tag(35, WireType.Varint).int32(message.battleType);
        /* int64 finished = 36; */
        if (message.finished !== 0n)
            writer.tag(36, WireType.Varint).int64(message.finished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleSettings
 */
export const BattleSettings = new BattleSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleTask$Type extends MessageType<BattleTask> {
    constructor() {
        super("im.BattleTask", [
            { no: 1, name: "enable_task", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BattleTask>): BattleTask {
        const message = { enableTask: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleTask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleTask): BattleTask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable_task */ 1:
                    message.enableTask = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleTask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable_task = 1; */
        if (message.enableTask !== false)
            writer.tag(1, WireType.Varint).bool(message.enableTask);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BattleTask
 */
export const BattleTask = new BattleTask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicBattle$Type extends MessageType<LinkMicBattle> {
    constructor() {
        super("im.LinkMicBattle", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "battle_settings", kind: "message", T: () => BattleSettings },
            { no: 3, name: "battle_mode", kind: "message", T: () => BattleMode },
            { no: 4, name: "battle_task", kind: "message", T: () => BattleTask },
            { no: 5, name: "skin_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "operational_play", kind: "message", T: () => OperationalPlay },
            { no: 8, name: "battle_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "relative_score", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "normal_to_multiple", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "skin_config", kind: "message", T: () => BattleSkinConfig },
            { no: 12, name: "link_icon_config", kind: "message", T: () => LinkIconConfig }
        ]);
    }
    create(value?: PartialMessage<LinkMicBattle>): LinkMicBattle {
        const message = { skinType: 0, battleType: 0, relativeScore: false, normalToMultiple: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicBattle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicBattle): LinkMicBattle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.BattleSettings battle_settings */ 2:
                    message.battleSettings = BattleSettings.internalBinaryRead(reader, reader.uint32(), options, message.battleSettings);
                    break;
                case /* im.BattleMode battle_mode */ 3:
                    message.battleMode = BattleMode.internalBinaryRead(reader, reader.uint32(), options, message.battleMode);
                    break;
                case /* im.BattleTask battle_task */ 4:
                    message.battleTask = BattleTask.internalBinaryRead(reader, reader.uint32(), options, message.battleTask);
                    break;
                case /* int32 skin_type */ 5:
                    message.skinType = reader.int32();
                    break;
                case /* data.OperationalPlay operational_play */ 7:
                    message.operationalPlay = OperationalPlay.internalBinaryRead(reader, reader.uint32(), options, message.operationalPlay);
                    break;
                case /* int32 battle_type */ 8:
                    message.battleType = reader.int32();
                    break;
                case /* bool relative_score */ 9:
                    message.relativeScore = reader.bool();
                    break;
                case /* bool normal_to_multiple */ 10:
                    message.normalToMultiple = reader.bool();
                    break;
                case /* data.BattleSkinConfig skin_config */ 11:
                    message.skinConfig = BattleSkinConfig.internalBinaryRead(reader, reader.uint32(), options, message.skinConfig);
                    break;
                case /* data.LinkIconConfig link_icon_config */ 12:
                    message.linkIconConfig = LinkIconConfig.internalBinaryRead(reader, reader.uint32(), options, message.linkIconConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicBattle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleSettings battle_settings = 2; */
        if (message.battleSettings)
            BattleSettings.internalBinaryWrite(message.battleSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleMode battle_mode = 3; */
        if (message.battleMode)
            BattleMode.internalBinaryWrite(message.battleMode, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleTask battle_task = 4; */
        if (message.battleTask)
            BattleTask.internalBinaryWrite(message.battleTask, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 skin_type = 5; */
        if (message.skinType !== 0)
            writer.tag(5, WireType.Varint).int32(message.skinType);
        /* data.OperationalPlay operational_play = 7; */
        if (message.operationalPlay)
            OperationalPlay.internalBinaryWrite(message.operationalPlay, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 battle_type = 8; */
        if (message.battleType !== 0)
            writer.tag(8, WireType.Varint).int32(message.battleType);
        /* bool relative_score = 9; */
        if (message.relativeScore !== false)
            writer.tag(9, WireType.Varint).bool(message.relativeScore);
        /* bool normal_to_multiple = 10; */
        if (message.normalToMultiple !== false)
            writer.tag(10, WireType.Varint).bool(message.normalToMultiple);
        /* data.BattleSkinConfig skin_config = 11; */
        if (message.skinConfig)
            BattleSkinConfig.internalBinaryWrite(message.skinConfig, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkIconConfig link_icon_config = 12; */
        if (message.linkIconConfig)
            LinkIconConfig.internalBinaryWrite(message.linkIconConfig, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicBattle
 */
export const LinkMicBattle = new LinkMicBattle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PunishEffect$Type extends MessageType<PunishEffect> {
    constructor() {
        super("im.PunishEffect", [
            { no: 1, name: "effect_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "effect_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "effect_image", kind: "message", T: () => Image },
            { no: 4, name: "lowest_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "need_medicine_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "usable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PunishEffect>): PunishEffect {
        const message = { effectId: 0n, effectName: "", lowestScore: 0n, duration: 0n, needMedicineCount: 0n, usable: false, level: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PunishEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PunishEffect): PunishEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 effect_id */ 1:
                    message.effectId = reader.int64().toBigInt();
                    break;
                case /* string effect_name */ 2:
                    message.effectName = reader.string();
                    break;
                case /* data.Image effect_image */ 3:
                    message.effectImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.effectImage);
                    break;
                case /* int64 lowest_score */ 4:
                    message.lowestScore = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 5:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 need_medicine_count */ 6:
                    message.needMedicineCount = reader.int64().toBigInt();
                    break;
                case /* bool usable */ 7:
                    message.usable = reader.bool();
                    break;
                case /* int32 level */ 8:
                    message.level = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PunishEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 effect_id = 1; */
        if (message.effectId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.effectId);
        /* string effect_name = 2; */
        if (message.effectName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.effectName);
        /* data.Image effect_image = 3; */
        if (message.effectImage)
            Image.internalBinaryWrite(message.effectImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 lowest_score = 4; */
        if (message.lowestScore !== 0n)
            writer.tag(4, WireType.Varint).int64(message.lowestScore);
        /* int64 duration = 5; */
        if (message.duration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.duration);
        /* int64 need_medicine_count = 6; */
        if (message.needMedicineCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.needMedicineCount);
        /* bool usable = 7; */
        if (message.usable !== false)
            writer.tag(7, WireType.Varint).bool(message.usable);
        /* int32 level = 8; */
        if (message.level !== 0)
            writer.tag(8, WireType.Varint).int32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PunishEffect
 */
export const PunishEffect = new PunishEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicBattlePunish$Type extends MessageType<LinkMicBattlePunish> {
    constructor() {
        super("im.LinkMicBattlePunish", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "punish_effect_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PunishEffect },
            { no: 4, name: "prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mvp", kind: "message", T: () => User },
            { no: 6, name: "medicine_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "target_effect", kind: "message", T: () => PunishEffect },
            { no: 8, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "target_user", kind: "message", T: () => User },
            { no: 11, name: "speedy_gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "battle_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicBattlePunish>): LinkMicBattlePunish {
        const message = { messageType: 0n, punishEffectList: [], prompts: "", medicineCount: 0n, startTime: 0n, speedyGiftId: 0n, duration: 0n, channelId: 0n, battleId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicBattlePunish>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicBattlePunish): LinkMicBattlePunish {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* repeated im.PunishEffect punish_effect_list */ 3:
                    message.punishEffectList.push(PunishEffect.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string prompts */ 4:
                    message.prompts = reader.string();
                    break;
                case /* data.User mvp */ 5:
                    message.mvp = User.internalBinaryRead(reader, reader.uint32(), options, message.mvp);
                    break;
                case /* int64 medicine_count */ 6:
                    message.medicineCount = reader.int64().toBigInt();
                    break;
                case /* im.PunishEffect target_effect */ 7:
                    message.targetEffect = PunishEffect.internalBinaryRead(reader, reader.uint32(), options, message.targetEffect);
                    break;
                case /* int64 start_time */ 8:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* data.User target_user */ 9:
                    message.targetUser = User.internalBinaryRead(reader, reader.uint32(), options, message.targetUser);
                    break;
                case /* int64 speedy_gift_id */ 11:
                    message.speedyGiftId = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 12:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 channel_id */ 13:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 battle_id */ 14:
                    message.battleId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicBattlePunish, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* repeated im.PunishEffect punish_effect_list = 3; */
        for (let i = 0; i < message.punishEffectList.length; i++)
            PunishEffect.internalBinaryWrite(message.punishEffectList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string prompts = 4; */
        if (message.prompts !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.prompts);
        /* data.User mvp = 5; */
        if (message.mvp)
            User.internalBinaryWrite(message.mvp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 medicine_count = 6; */
        if (message.medicineCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.medicineCount);
        /* im.PunishEffect target_effect = 7; */
        if (message.targetEffect)
            PunishEffect.internalBinaryWrite(message.targetEffect, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_time = 8; */
        if (message.startTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.startTime);
        /* data.User target_user = 9; */
        if (message.targetUser)
            User.internalBinaryWrite(message.targetUser, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 speedy_gift_id = 11; */
        if (message.speedyGiftId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.speedyGiftId);
        /* int64 duration = 12; */
        if (message.duration !== 0n)
            writer.tag(12, WireType.Varint).int64(message.duration);
        /* int64 channel_id = 13; */
        if (message.channelId !== 0n)
            writer.tag(13, WireType.Varint).int64(message.channelId);
        /* int64 battle_id = 14; */
        if (message.battleId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.battleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicBattlePunish
 */
export const LinkMicBattlePunish = new LinkMicBattlePunish$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicBattleTaskMessage$Type extends MessageType<LinkMicBattleTaskMessage> {
    constructor() {
        super("im.LinkMicBattleTaskMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicBattleTaskMessage>): LinkMicBattleTaskMessage {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicBattleTaskMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicBattleTaskMessage): LinkMicBattleTaskMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicBattleTaskMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicBattleTaskMessage
 */
export const LinkMicBattleTaskMessage = new LinkMicBattleTaskMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChijiNoticeMessage$Type extends MessageType<ChijiNoticeMessage> {
    constructor() {
        super("im.ChijiNoticeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "banner_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChijiNoticeMessage>): ChijiNoticeMessage {
        const message = { messageType: 0, bannerUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChijiNoticeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChijiNoticeMessage): ChijiNoticeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 message_type */ 2:
                    message.messageType = reader.int32();
                    break;
                case /* string banner_url */ 3:
                    message.bannerUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChijiNoticeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 2; */
        if (message.messageType !== 0)
            writer.tag(2, WireType.Varint).int32(message.messageType);
        /* string banner_url = 3; */
        if (message.bannerUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bannerUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChijiNoticeMessage
 */
export const ChijiNoticeMessage = new ChijiNoticeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicEnterNoticeMessage$Type extends MessageType<LinkMicEnterNoticeMessage> {
    constructor() {
        super("im.LinkMicEnterNoticeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "battle_settings", kind: "message", T: () => BattleSettings }
        ]);
    }
    create(value?: PartialMessage<LinkMicEnterNoticeMessage>): LinkMicEnterNoticeMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicEnterNoticeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicEnterNoticeMessage): LinkMicEnterNoticeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.BattleSettings battle_settings */ 2:
                    message.battleSettings = BattleSettings.internalBinaryRead(reader, reader.uint32(), options, message.battleSettings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicEnterNoticeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.BattleSettings battle_settings = 2; */
        if (message.battleSettings)
            BattleSettings.internalBinaryWrite(message.battleSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicEnterNoticeMessage
 */
export const LinkMicEnterNoticeMessage = new LinkMicEnterNoticeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicFriendOnlineMessage$Type extends MessageType<LinkMicFriendOnlineMessage> {
    constructor() {
        super("im.LinkMicFriendOnlineMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "friend", kind: "message", T: () => User },
            { no: 3, name: "in_room", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicFriendOnlineMessage>): LinkMicFriendOnlineMessage {
        const message = { inRoom: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicFriendOnlineMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicFriendOnlineMessage): LinkMicFriendOnlineMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User friend */ 2:
                    message.friend = User.internalBinaryRead(reader, reader.uint32(), options, message.friend);
                    break;
                case /* bool in_room */ 3:
                    message.inRoom = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicFriendOnlineMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User friend = 2; */
        if (message.friend)
            User.internalBinaryWrite(message.friend, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool in_room = 3; */
        if (message.inRoom !== false)
            writer.tag(3, WireType.Varint).bool(message.inRoom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicFriendOnlineMessage
 */
export const LinkMicFriendOnlineMessage = new LinkMicFriendOnlineMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicGuideMessage$Type extends MessageType<LinkMicGuideMessage> {
    constructor() {
        super("im.LinkMicGuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "anchor_info", kind: "message", T: () => LinkMicGuideMessage_AnchorInfo },
            { no: 3, name: "cue_threshold", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "guideline_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "fast_match_guideline", kind: "message", T: () => LinkMicGuideMessage_FastMatchGuideline },
            { no: 20, name: "call_to_linkmic_content", kind: "message", T: () => CallToLinkmicContent },
            { no: 21, name: "ktv_add_song_guide_content", kind: "message", T: () => KtvAddSongGuideContent },
            { no: 22, name: "create_group_chat_guide_content", kind: "message", T: () => CreateGroupChatGuideContent },
            { no: 23, name: "join_group_chat_guide_content", kind: "message", T: () => JoinGroupChatGuideContent },
            { no: 24, name: "guest_battle_bubble_guide_content", kind: "message", T: () => GuestBattleBubbleGuideContent },
            { no: 25, name: "create_teamfight_guide_content", kind: "message", T: () => CreateTeamfightGuideContent },
            { no: 26, name: "normal_paid_linkmic_explain_card_content", kind: "message", T: () => NormalPaidLinkmicExplainCardContent },
            { no: 27, name: "normal_paid_linkmic_migrate_to_play_content", kind: "message", T: () => NormalPaidLinkmicMigrateToPlayContent },
            { no: 28, name: "linkmic_follow_effect_content", kind: "message", T: () => LinkmicFollowEffectContent },
            { no: 29, name: "pk_link_bubble_content", kind: "message", T: () => PKLinkBubbleContent },
            { no: 30, name: "play_mode_guide_bubble_content", kind: "message", T: () => PlayModeGuideBubbleContent }
        ]);
    }
    create(value?: PartialMessage<LinkMicGuideMessage>): LinkMicGuideMessage {
        const message = { cueThreshold: 0n, guidelineType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicGuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicGuideMessage): LinkMicGuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.LinkMicGuideMessage.AnchorInfo anchor_info */ 2:
                    message.anchorInfo = LinkMicGuideMessage_AnchorInfo.internalBinaryRead(reader, reader.uint32(), options, message.anchorInfo);
                    break;
                case /* int64 cue_threshold */ 3:
                    message.cueThreshold = reader.int64().toBigInt();
                    break;
                case /* int64 guideline_type */ 4:
                    message.guidelineType = reader.int64().toBigInt();
                    break;
                case /* im.LinkMicGuideMessage.FastMatchGuideline fast_match_guideline */ 5:
                    message.fastMatchGuideline = LinkMicGuideMessage_FastMatchGuideline.internalBinaryRead(reader, reader.uint32(), options, message.fastMatchGuideline);
                    break;
                case /* im.CallToLinkmicContent call_to_linkmic_content */ 20:
                    message.callToLinkmicContent = CallToLinkmicContent.internalBinaryRead(reader, reader.uint32(), options, message.callToLinkmicContent);
                    break;
                case /* im.KtvAddSongGuideContent ktv_add_song_guide_content */ 21:
                    message.ktvAddSongGuideContent = KtvAddSongGuideContent.internalBinaryRead(reader, reader.uint32(), options, message.ktvAddSongGuideContent);
                    break;
                case /* im.CreateGroupChatGuideContent create_group_chat_guide_content */ 22:
                    message.createGroupChatGuideContent = CreateGroupChatGuideContent.internalBinaryRead(reader, reader.uint32(), options, message.createGroupChatGuideContent);
                    break;
                case /* im.JoinGroupChatGuideContent join_group_chat_guide_content */ 23:
                    message.joinGroupChatGuideContent = JoinGroupChatGuideContent.internalBinaryRead(reader, reader.uint32(), options, message.joinGroupChatGuideContent);
                    break;
                case /* im.GuestBattleBubbleGuideContent guest_battle_bubble_guide_content */ 24:
                    message.guestBattleBubbleGuideContent = GuestBattleBubbleGuideContent.internalBinaryRead(reader, reader.uint32(), options, message.guestBattleBubbleGuideContent);
                    break;
                case /* im.CreateTeamfightGuideContent create_teamfight_guide_content */ 25:
                    message.createTeamfightGuideContent = CreateTeamfightGuideContent.internalBinaryRead(reader, reader.uint32(), options, message.createTeamfightGuideContent);
                    break;
                case /* im.NormalPaidLinkmicExplainCardContent normal_paid_linkmic_explain_card_content */ 26:
                    message.normalPaidLinkmicExplainCardContent = NormalPaidLinkmicExplainCardContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicExplainCardContent);
                    break;
                case /* im.NormalPaidLinkmicMigrateToPlayContent normal_paid_linkmic_migrate_to_play_content */ 27:
                    message.normalPaidLinkmicMigrateToPlayContent = NormalPaidLinkmicMigrateToPlayContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicMigrateToPlayContent);
                    break;
                case /* im.LinkmicFollowEffectContent linkmic_follow_effect_content */ 28:
                    message.linkmicFollowEffectContent = LinkmicFollowEffectContent.internalBinaryRead(reader, reader.uint32(), options, message.linkmicFollowEffectContent);
                    break;
                case /* im.PKLinkBubbleContent pk_link_bubble_content */ 29:
                    message.pkLinkBubbleContent = PKLinkBubbleContent.internalBinaryRead(reader, reader.uint32(), options, message.pkLinkBubbleContent);
                    break;
                case /* im.PlayModeGuideBubbleContent play_mode_guide_bubble_content */ 30:
                    message.playModeGuideBubbleContent = PlayModeGuideBubbleContent.internalBinaryRead(reader, reader.uint32(), options, message.playModeGuideBubbleContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicGuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicGuideMessage.AnchorInfo anchor_info = 2; */
        if (message.anchorInfo)
            LinkMicGuideMessage_AnchorInfo.internalBinaryWrite(message.anchorInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 cue_threshold = 3; */
        if (message.cueThreshold !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cueThreshold);
        /* int64 guideline_type = 4; */
        if (message.guidelineType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.guidelineType);
        /* im.LinkMicGuideMessage.FastMatchGuideline fast_match_guideline = 5; */
        if (message.fastMatchGuideline)
            LinkMicGuideMessage_FastMatchGuideline.internalBinaryWrite(message.fastMatchGuideline, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.CallToLinkmicContent call_to_linkmic_content = 20; */
        if (message.callToLinkmicContent)
            CallToLinkmicContent.internalBinaryWrite(message.callToLinkmicContent, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* im.KtvAddSongGuideContent ktv_add_song_guide_content = 21; */
        if (message.ktvAddSongGuideContent)
            KtvAddSongGuideContent.internalBinaryWrite(message.ktvAddSongGuideContent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* im.CreateGroupChatGuideContent create_group_chat_guide_content = 22; */
        if (message.createGroupChatGuideContent)
            CreateGroupChatGuideContent.internalBinaryWrite(message.createGroupChatGuideContent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* im.JoinGroupChatGuideContent join_group_chat_guide_content = 23; */
        if (message.joinGroupChatGuideContent)
            JoinGroupChatGuideContent.internalBinaryWrite(message.joinGroupChatGuideContent, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* im.GuestBattleBubbleGuideContent guest_battle_bubble_guide_content = 24; */
        if (message.guestBattleBubbleGuideContent)
            GuestBattleBubbleGuideContent.internalBinaryWrite(message.guestBattleBubbleGuideContent, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* im.CreateTeamfightGuideContent create_teamfight_guide_content = 25; */
        if (message.createTeamfightGuideContent)
            CreateTeamfightGuideContent.internalBinaryWrite(message.createTeamfightGuideContent, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* im.NormalPaidLinkmicExplainCardContent normal_paid_linkmic_explain_card_content = 26; */
        if (message.normalPaidLinkmicExplainCardContent)
            NormalPaidLinkmicExplainCardContent.internalBinaryWrite(message.normalPaidLinkmicExplainCardContent, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* im.NormalPaidLinkmicMigrateToPlayContent normal_paid_linkmic_migrate_to_play_content = 27; */
        if (message.normalPaidLinkmicMigrateToPlayContent)
            NormalPaidLinkmicMigrateToPlayContent.internalBinaryWrite(message.normalPaidLinkmicMigrateToPlayContent, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicFollowEffectContent linkmic_follow_effect_content = 28; */
        if (message.linkmicFollowEffectContent)
            LinkmicFollowEffectContent.internalBinaryWrite(message.linkmicFollowEffectContent, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* im.PKLinkBubbleContent pk_link_bubble_content = 29; */
        if (message.pkLinkBubbleContent)
            PKLinkBubbleContent.internalBinaryWrite(message.pkLinkBubbleContent, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* im.PlayModeGuideBubbleContent play_mode_guide_bubble_content = 30; */
        if (message.playModeGuideBubbleContent)
            PlayModeGuideBubbleContent.internalBinaryWrite(message.playModeGuideBubbleContent, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicGuideMessage
 */
export const LinkMicGuideMessage = new LinkMicGuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicGuideMessage_AnchorInfo$Type extends MessageType<LinkMicGuideMessage_AnchorInfo> {
    constructor() {
        super("im.LinkMicGuideMessage.AnchorInfo", [
            { no: 1, name: "infoList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMicGuideMessage_AnchorInfo_InfoItem }
        ]);
    }
    create(value?: PartialMessage<LinkMicGuideMessage_AnchorInfo>): LinkMicGuideMessage_AnchorInfo {
        const message = { infoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicGuideMessage_AnchorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicGuideMessage_AnchorInfo): LinkMicGuideMessage_AnchorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.LinkMicGuideMessage.AnchorInfo.InfoItem infoList */ 1:
                    message.infoList.push(LinkMicGuideMessage_AnchorInfo_InfoItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicGuideMessage_AnchorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.LinkMicGuideMessage.AnchorInfo.InfoItem infoList = 1; */
        for (let i = 0; i < message.infoList.length; i++)
            LinkMicGuideMessage_AnchorInfo_InfoItem.internalBinaryWrite(message.infoList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicGuideMessage.AnchorInfo
 */
export const LinkMicGuideMessage_AnchorInfo = new LinkMicGuideMessage_AnchorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicGuideMessage_AnchorInfo_InfoItem$Type extends MessageType<LinkMicGuideMessage_AnchorInfo_InfoItem> {
    constructor() {
        super("im.LinkMicGuideMessage.AnchorInfo.InfoItem", [
            { no: 1, name: "icon", kind: "message", T: () => Image },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicGuideMessage_AnchorInfo_InfoItem>): LinkMicGuideMessage_AnchorInfo_InfoItem {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicGuideMessage_AnchorInfo_InfoItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicGuideMessage_AnchorInfo_InfoItem): LinkMicGuideMessage_AnchorInfo_InfoItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image icon */ 1:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicGuideMessage_AnchorInfo_InfoItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image icon = 1; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicGuideMessage.AnchorInfo.InfoItem
 */
export const LinkMicGuideMessage_AnchorInfo_InfoItem = new LinkMicGuideMessage_AnchorInfo_InfoItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicGuideMessage_FastMatchGuideline$Type extends MessageType<LinkMicGuideMessage_FastMatchGuideline> {
    constructor() {
        super("im.LinkMicGuideMessage.FastMatchGuideline", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicGuideMessage_FastMatchGuideline>): LinkMicGuideMessage_FastMatchGuideline {
        const message = { title: "", subtitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicGuideMessage_FastMatchGuideline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicGuideMessage_FastMatchGuideline): LinkMicGuideMessage_FastMatchGuideline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string subtitle */ 2:
                    message.subtitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicGuideMessage_FastMatchGuideline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string subtitle = 2; */
        if (message.subtitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subtitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicGuideMessage.FastMatchGuideline
 */
export const LinkMicGuideMessage_FastMatchGuideline = new LinkMicGuideMessage_FastMatchGuideline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicFollowEffectContent$Type extends MessageType<LinkmicFollowEffectContent> {
    constructor() {
        super("im.LinkmicFollowEffectContent", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "follow_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicFollowEffectContent_FollowInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicFollowEffectContent>): LinkmicFollowEffectContent {
        const message = { roomId: 0n, fromUserId: 0n, followInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicFollowEffectContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicFollowEffectContent): LinkmicFollowEffectContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 from_user_id */ 2:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* repeated im.LinkmicFollowEffectContent.FollowInfo follow_infos */ 3:
                    message.followInfos.push(LinkmicFollowEffectContent_FollowInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicFollowEffectContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        /* int64 from_user_id = 2; */
        if (message.fromUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fromUserId);
        /* repeated im.LinkmicFollowEffectContent.FollowInfo follow_infos = 3; */
        for (let i = 0; i < message.followInfos.length; i++)
            LinkmicFollowEffectContent_FollowInfo.internalBinaryWrite(message.followInfos[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicFollowEffectContent
 */
export const LinkmicFollowEffectContent = new LinkmicFollowEffectContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicFollowEffectContent_FollowInfo$Type extends MessageType<LinkmicFollowEffectContent_FollowInfo> {
    constructor() {
        super("im.LinkmicFollowEffectContent.FollowInfo", [
            { no: 1, name: "target_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "follow_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicFollowEffectContent_FollowInfo>): LinkmicFollowEffectContent_FollowInfo {
        const message = { targetUserId: 0n, followStatus: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicFollowEffectContent_FollowInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicFollowEffectContent_FollowInfo): LinkmicFollowEffectContent_FollowInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 target_user_id */ 1:
                    message.targetUserId = reader.int64().toBigInt();
                    break;
                case /* int64 follow_status */ 2:
                    message.followStatus = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicFollowEffectContent_FollowInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 target_user_id = 1; */
        if (message.targetUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.targetUserId);
        /* int64 follow_status = 2; */
        if (message.followStatus !== 0n)
            writer.tag(2, WireType.Varint).int64(message.followStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicFollowEffectContent.FollowInfo
 */
export const LinkmicFollowEffectContent_FollowInfo = new LinkmicFollowEffectContent_FollowInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBattleBubbleGuideContent$Type extends MessageType<GuestBattleBubbleGuideContent> {
    constructor() {
        super("im.GuestBattleBubbleGuideContent", [
            { no: 1, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<GuestBattleBubbleGuideContent>): GuestBattleBubbleGuideContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBattleBubbleGuideContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBattleBubbleGuideContent): GuestBattleBubbleGuideContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text text */ 1:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBattleBubbleGuideContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text text = 1; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GuestBattleBubbleGuideContent
 */
export const GuestBattleBubbleGuideContent = new GuestBattleBubbleGuideContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallToLinkmicContent$Type extends MessageType<CallToLinkmicContent> {
    constructor() {
        super("im.CallToLinkmicContent", [
            { no: 1, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<CallToLinkmicContent>): CallToLinkmicContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallToLinkmicContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallToLinkmicContent): CallToLinkmicContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text text */ 1:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallToLinkmicContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text text = 1; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CallToLinkmicContent
 */
export const CallToLinkmicContent = new CallToLinkmicContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvAddSongGuideContent$Type extends MessageType<KtvAddSongGuideContent> {
    constructor() {
        super("im.KtvAddSongGuideContent", [
            { no: 1, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<KtvAddSongGuideContent>): KtvAddSongGuideContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvAddSongGuideContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvAddSongGuideContent): KtvAddSongGuideContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text text */ 1:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvAddSongGuideContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text text = 1; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvAddSongGuideContent
 */
export const KtvAddSongGuideContent = new KtvAddSongGuideContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupChatGuideContent$Type extends MessageType<CreateGroupChatGuideContent> {
    constructor() {
        super("im.CreateGroupChatGuideContent", [
            { no: 1, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "header_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "body_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGroupChatGuideContent>): CreateGroupChatGuideContent {
        const message = { anchorId: 0n, headerText: "", bodyText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateGroupChatGuideContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupChatGuideContent): CreateGroupChatGuideContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 anchor_id */ 1:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* string header_text */ 2:
                    message.headerText = reader.string();
                    break;
                case /* string body_text */ 3:
                    message.bodyText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupChatGuideContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 anchor_id = 1; */
        if (message.anchorId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.anchorId);
        /* string header_text = 2; */
        if (message.headerText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.headerText);
        /* string body_text = 3; */
        if (message.bodyText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bodyText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CreateGroupChatGuideContent
 */
export const CreateGroupChatGuideContent = new CreateGroupChatGuideContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinGroupChatGuideContent$Type extends MessageType<JoinGroupChatGuideContent> {
    constructor() {
        super("im.JoinGroupChatGuideContent", [
            { no: 1, name: "group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "conversation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "header_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "body_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 6, name: "group_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "guide_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<JoinGroupChatGuideContent>): JoinGroupChatGuideContent {
        const message = { groupId: 0n, conversationId: "", headerText: "", bodyText: "", icons: [], groupType: 0, guideSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinGroupChatGuideContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinGroupChatGuideContent): JoinGroupChatGuideContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 group_id */ 1:
                    message.groupId = reader.int64().toBigInt();
                    break;
                case /* string conversation_id */ 2:
                    message.conversationId = reader.string();
                    break;
                case /* string header_text */ 3:
                    message.headerText = reader.string();
                    break;
                case /* string body_text */ 4:
                    message.bodyText = reader.string();
                    break;
                case /* repeated data.Image icons */ 5:
                    message.icons.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 group_type */ 6:
                    message.groupType = reader.int32();
                    break;
                case /* int32 guide_source */ 7:
                    message.guideSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinGroupChatGuideContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.groupId);
        /* string conversation_id = 2; */
        if (message.conversationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.conversationId);
        /* string header_text = 3; */
        if (message.headerText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.headerText);
        /* string body_text = 4; */
        if (message.bodyText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bodyText);
        /* repeated data.Image icons = 5; */
        for (let i = 0; i < message.icons.length; i++)
            Image.internalBinaryWrite(message.icons[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 group_type = 6; */
        if (message.groupType !== 0)
            writer.tag(6, WireType.Varint).int32(message.groupType);
        /* int32 guide_source = 7; */
        if (message.guideSource !== 0)
            writer.tag(7, WireType.Varint).int32(message.guideSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.JoinGroupChatGuideContent
 */
export const JoinGroupChatGuideContent = new JoinGroupChatGuideContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamfightGuideContent$Type extends MessageType<CreateTeamfightGuideContent> {
    constructor() {
        super("im.CreateTeamfightGuideContent", [
            { no: 4, name: "toast_text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<CreateTeamfightGuideContent>): CreateTeamfightGuideContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTeamfightGuideContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamfightGuideContent): CreateTeamfightGuideContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text toast_text */ 4:
                    message.toastText = Text.internalBinaryRead(reader, reader.uint32(), options, message.toastText);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamfightGuideContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text toast_text = 4; */
        if (message.toastText)
            Text.internalBinaryWrite(message.toastText, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CreateTeamfightGuideContent
 */
export const CreateTeamfightGuideContent = new CreateTeamfightGuideContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalPaidLinkmicExplainCardContent$Type extends MessageType<NormalPaidLinkmicExplainCardContent> {
    constructor() {
        super("im.NormalPaidLinkmicExplainCardContent", [
            { no: 1, name: "explain_card_info", kind: "message", T: () => PaidLinkmicExplainCardInfo }
        ]);
    }
    create(value?: PartialMessage<NormalPaidLinkmicExplainCardContent>): NormalPaidLinkmicExplainCardContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NormalPaidLinkmicExplainCardContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalPaidLinkmicExplainCardContent): NormalPaidLinkmicExplainCardContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.PaidLinkmicExplainCardInfo explain_card_info */ 1:
                    message.explainCardInfo = PaidLinkmicExplainCardInfo.internalBinaryRead(reader, reader.uint32(), options, message.explainCardInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalPaidLinkmicExplainCardContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.PaidLinkmicExplainCardInfo explain_card_info = 1; */
        if (message.explainCardInfo)
            PaidLinkmicExplainCardInfo.internalBinaryWrite(message.explainCardInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NormalPaidLinkmicExplainCardContent
 */
export const NormalPaidLinkmicExplainCardContent = new NormalPaidLinkmicExplainCardContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalPaidLinkmicMigrateToPlayContent$Type extends MessageType<NormalPaidLinkmicMigrateToPlayContent> {
    constructor() {
        super("im.NormalPaidLinkmicMigrateToPlayContent", [
            { no: 1, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NormalPaidLinkmicMigrateToPlayContent>): NormalPaidLinkmicMigrateToPlayContent {
        const message = { toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NormalPaidLinkmicMigrateToPlayContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalPaidLinkmicMigrateToPlayContent): NormalPaidLinkmicMigrateToPlayContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toast */ 1:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalPaidLinkmicMigrateToPlayContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toast = 1; */
        if (message.toast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NormalPaidLinkmicMigrateToPlayContent
 */
export const NormalPaidLinkmicMigrateToPlayContent = new NormalPaidLinkmicMigrateToPlayContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PKLinkBubbleContent$Type extends MessageType<PKLinkBubbleContent> {
    constructor() {
        super("im.PKLinkBubbleContent", [
            { no: 1, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PKLinkBubbleContent>): PKLinkBubbleContent {
        const message = { toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PKLinkBubbleContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PKLinkBubbleContent): PKLinkBubbleContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toast */ 1:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PKLinkBubbleContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toast = 1; */
        if (message.toast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PKLinkBubbleContent
 */
export const PKLinkBubbleContent = new PKLinkBubbleContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayModeGuideBubbleContent$Type extends MessageType<PlayModeGuideBubbleContent> {
    constructor() {
        super("im.PlayModeGuideBubbleContent", [
            { no: 1, name: "play_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "play_mode_enhance_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "text", kind: "message", T: () => Text },
            { no: 5, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayModeGuideBubbleContent>): PlayModeGuideBubbleContent {
        const message = { playMode: 0, toast: "", playModeEnhanceType: 0, schema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayModeGuideBubbleContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayModeGuideBubbleContent): PlayModeGuideBubbleContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 play_mode */ 1:
                    message.playMode = reader.int32();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                case /* int32 play_mode_enhance_type */ 3:
                    message.playModeEnhanceType = reader.int32();
                    break;
                case /* data.Text text */ 4:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* string schema */ 5:
                    message.schema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayModeGuideBubbleContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 play_mode = 1; */
        if (message.playMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.playMode);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        /* int32 play_mode_enhance_type = 3; */
        if (message.playModeEnhanceType !== 0)
            writer.tag(3, WireType.Varint).int32(message.playModeEnhanceType);
        /* data.Text text = 4; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string schema = 5; */
        if (message.schema !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.schema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PlayModeGuideBubbleContent
 */
export const PlayModeGuideBubbleContent = new PlayModeGuideBubbleContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicHostModifyMsg$Type extends MessageType<LinkMicHostModifyMsg> {
    constructor() {
        super("im.LinkMicHostModifyMsg", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "host_uids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicHostModifyMsg>): LinkMicHostModifyMsg {
        const message = { hostUids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicHostModifyMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicHostModifyMsg): LinkMicHostModifyMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated int64 host_uids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hostUids.push(reader.int64().toBigInt());
                    else
                        message.hostUids.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicHostModifyMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 host_uids = 2; */
        if (message.hostUids.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hostUids.length; i++)
                writer.int64(message.hostUids[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicHostModifyMsg
 */
export const LinkMicHostModifyMsg = new LinkMicHostModifyMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicKtvBeatRankMessage$Type extends MessageType<LinkMicKtvBeatRankMessage> {
    constructor() {
        super("im.LinkMicKtvBeatRankMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 3, name: "singer", kind: "message", T: () => User },
            { no: 4, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicKtvBeatRankMessage>): LinkMicKtvBeatRankMessage {
        const message = { userList: [], songId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicKtvBeatRankMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicKtvBeatRankMessage): LinkMicKtvBeatRankMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.User user_list */ 2:
                    message.userList.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.User singer */ 3:
                    message.singer = User.internalBinaryRead(reader, reader.uint32(), options, message.singer);
                    break;
                case /* int64 song_id */ 4:
                    message.songId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicKtvBeatRankMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.User user_list = 2; */
        for (let i = 0; i < message.userList.length; i++)
            User.internalBinaryWrite(message.userList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.User singer = 3; */
        if (message.singer)
            User.internalBinaryWrite(message.singer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 song_id = 4; */
        if (message.songId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.songId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicKtvBeatRankMessage
 */
export const LinkMicKtvBeatRankMessage = new LinkMicKtvBeatRankMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicKtvEffectMessage$Type extends MessageType<LinkMicKtvEffectMessage> {
    constructor() {
        super("im.LinkMicKtvEffectMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "from_user", kind: "message", T: () => User },
            { no: 3, name: "singer", kind: "message", T: () => User },
            { no: 4, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicKtvEffectMessage>): LinkMicKtvEffectMessage {
        const message = { songId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicKtvEffectMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicKtvEffectMessage): LinkMicKtvEffectMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User from_user */ 2:
                    message.fromUser = User.internalBinaryRead(reader, reader.uint32(), options, message.fromUser);
                    break;
                case /* data.User singer */ 3:
                    message.singer = User.internalBinaryRead(reader, reader.uint32(), options, message.singer);
                    break;
                case /* int64 song_id */ 4:
                    message.songId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicKtvEffectMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User from_user = 2; */
        if (message.fromUser)
            User.internalBinaryWrite(message.fromUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.User singer = 3; */
        if (message.singer)
            User.internalBinaryWrite(message.singer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 song_id = 4; */
        if (message.songId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.songId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicKtvEffectMessage
 */
export const LinkMicKtvEffectMessage = new LinkMicKtvEffectMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicMethod$Type extends MessageType<LinkMicMethod> {
    constructor() {
        super("im.LinkMicMethod", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "access_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "anchor_linkmic_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "fan_ticket", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "total_linkmic_fan_ticket", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "vendor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "dimension", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "invite_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "answer", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "user_scores", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMicMethod_UserScores },
            { no: 18, name: "match_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "linkmic_layout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "tips", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "start_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 27, name: "confluence_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 28, name: "from_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 29, name: "invite_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "sub_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 31, name: "inviter_rival_extra", kind: "message", T: () => RivalExtraInfo },
            { no: 32, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 33, name: "rtc_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 34, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 35, name: "app_sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 36, name: "rtc_app_sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 37, name: "anchor_linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 38, name: "rival_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 39, name: "rival_linkmic_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 40, name: "rival_linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "show_popup", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 42, name: "sec_invite_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 43, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 44, name: "sec_apply_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 45, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 46, name: "sec_from_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 47, name: "reply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 48, name: "reply_prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 49, name: "sec_to_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 50, name: "invitor_info", kind: "message", T: () => LinkMicMethod_InvitorInfo },
            { no: 51, name: "rtc_join_channel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 52, name: "sub_scene", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 53, name: "support_update_link_type", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 54, name: "link_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 55, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 56, name: "backup_anchor_linkmic_info", kind: "message", T: () => AnchorLinkmicInfo },
            { no: 57, name: "play_modes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 58, name: "linked_list_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 59, name: "locked_positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem },
            { no: 60, name: "end_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 61, name: "multi_rtc_info", kind: "message", T: () => MultiRtcInfo },
            { no: 62, name: "multi_live_core_info", kind: "message", T: () => MultiLiveCoreInfo },
            { no: 63, name: "layout_config_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 64, name: "control_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 65, name: "ban_anchor_info", kind: "message", T: () => BanUser },
            { no: 66, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 67, name: "join_teamfight_info", kind: "message", T: () => JoinTeamfightInfo },
            { no: 68, name: "paid_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 69, name: "link_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 70, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 71, name: "game_invite_info", kind: "message", T: () => GameInviteInfo },
            { no: 72, name: "ui_layout", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 73, name: "invite_message", kind: "message", T: () => Text },
            { no: 74, name: "multi_channel_info", kind: "message", T: () => MultiChannelInfo },
            { no: 75, name: "kick_out_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 77, name: "function_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 78, name: "msg_board_item", kind: "message", T: () => MsgBoardItemInfo },
            { no: 79, name: "from_user_linkmic_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 80, name: "ack_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 81, name: "init_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 82, name: "score_update_log_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 83, name: "switch_play_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 84, name: "update_message_from", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 85, name: "guest_linkmic_info", kind: "message", T: () => LinkmicMediaInfo },
            { no: 86, name: "mcu_content", kind: "message", T: () => MCUContent },
            { no: 87, name: "breakthrough_info", kind: "message", T: () => BreakthroughInfo },
            { no: 88, name: "linker_base_info", kind: "message", T: () => LinkerBaseInfo },
            { no: 89, name: "action_source", kind: "message", T: () => AudienceActionSource }
        ]);
    }
    create(value?: PartialMessage<LinkMicMethod>): LinkMicMethod {
        const message = { messageType: 0n, accessKey: "", anchorLinkmicId: 0n, userId: 0n, fanTicket: 0n, totalLinkmicFanTicket: 0n, channelId: 0n, layout: 0n, vendor: 0n, dimension: 0n, theme: "", inviteUid: 0n, answer: 0n, startTime: 0n, duration: 0n, userScores: [], matchType: 0n, win: false, prompts: "", toUserId: 0n, linkmicLayout: 0n, fromUserId: 0n, tips: "", startTimeMs: 0n, confluenceType: 0, fromRoomId: 0n, inviteType: 0n, subType: 0n, rtcExtInfo: "", rtcAppId: "", appId: "", appSign: "", rtcAppSign: "", anchorLinkmicIdStr: "", rivalAnchorId: 0n, rivalLinkmicId: 0n, rivalLinkmicIdStr: "", showPopup: false, secInviteUid: 0n, scene: 0n, secApplyUid: 0n, linkedUsers: [], secFromUserId: "", replyType: 0, replyPrompts: "", secToUserId: "", rtcJoinChannel: false, subScene: 0, supportUpdateLinkType: false, linkType: 0, source: 0, playModes: [], linkedListUsers: [], lockedPositions: [], endReason: 0, layoutConfigVersion: 0, controlType: 0, version: 0n, paidCount: 0n, linkDuration: 0n, liveCoreExtInfo: "", uiLayout: 0, kickOutSource: 0, functionType: "", fromUserLinkmicIdStr: "", ackMessage: "", initSource: "", scoreUpdateLogId: "", switchPlayMode: 0, updateMessageFrom: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicMethod>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicMethod): LinkMicMethod {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* string access_key */ 3:
                    message.accessKey = reader.string();
                    break;
                case /* int64 anchor_linkmic_id */ 4:
                    message.anchorLinkmicId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 5:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 fan_ticket */ 6:
                    message.fanTicket = reader.int64().toBigInt();
                    break;
                case /* int64 total_linkmic_fan_ticket */ 7:
                    message.totalLinkmicFanTicket = reader.int64().toBigInt();
                    break;
                case /* int64 channel_id */ 8:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 layout */ 9:
                    message.layout = reader.int64().toBigInt();
                    break;
                case /* int64 vendor */ 10:
                    message.vendor = reader.int64().toBigInt();
                    break;
                case /* int64 dimension */ 11:
                    message.dimension = reader.int64().toBigInt();
                    break;
                case /* string theme */ 12:
                    message.theme = reader.string();
                    break;
                case /* int64 invite_uid */ 13:
                    message.inviteUid = reader.int64().toBigInt();
                    break;
                case /* int64 answer */ 14:
                    message.answer = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 15:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 16:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* repeated im.LinkMicMethod.UserScores user_scores */ 17:
                    message.userScores.push(LinkMicMethod_UserScores.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 match_type */ 18:
                    message.matchType = reader.int64().toBigInt();
                    break;
                case /* bool win */ 19:
                    message.win = reader.bool();
                    break;
                case /* string prompts */ 20:
                    message.prompts = reader.string();
                    break;
                case /* int64 to_user_id */ 21:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int64 linkmic_layout */ 23:
                    message.linkmicLayout = reader.int64().toBigInt();
                    break;
                case /* int64 from_user_id */ 24:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* string tips */ 25:
                    message.tips = reader.string();
                    break;
                case /* int64 start_time_ms */ 26:
                    message.startTimeMs = reader.int64().toBigInt();
                    break;
                case /* int32 confluence_type */ 27:
                    message.confluenceType = reader.int32();
                    break;
                case /* int64 from_room_id */ 28:
                    message.fromRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 invite_type */ 29:
                    message.inviteType = reader.int64().toBigInt();
                    break;
                case /* int64 sub_type */ 30:
                    message.subType = reader.int64().toBigInt();
                    break;
                case /* data.RivalExtraInfo inviter_rival_extra */ 31:
                    message.inviterRivalExtra = RivalExtraInfo.internalBinaryRead(reader, reader.uint32(), options, message.inviterRivalExtra);
                    break;
                case /* string rtc_ext_info */ 32:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string rtc_app_id */ 33:
                    message.rtcAppId = reader.string();
                    break;
                case /* string app_id */ 34:
                    message.appId = reader.string();
                    break;
                case /* string app_sign */ 35:
                    message.appSign = reader.string();
                    break;
                case /* string rtc_app_sign */ 36:
                    message.rtcAppSign = reader.string();
                    break;
                case /* string anchor_linkmic_id_str */ 37:
                    message.anchorLinkmicIdStr = reader.string();
                    break;
                case /* int64 rival_anchor_id */ 38:
                    message.rivalAnchorId = reader.int64().toBigInt();
                    break;
                case /* int64 rival_linkmic_id */ 39:
                    message.rivalLinkmicId = reader.int64().toBigInt();
                    break;
                case /* string rival_linkmic_id_str */ 40:
                    message.rivalLinkmicIdStr = reader.string();
                    break;
                case /* bool show_popup */ 41:
                    message.showPopup = reader.bool();
                    break;
                case /* int64 sec_invite_uid */ 42:
                    message.secInviteUid = reader.int64().toBigInt();
                    break;
                case /* int64 scene */ 43:
                    message.scene = reader.int64().toBigInt();
                    break;
                case /* int64 sec_apply_uid */ 44:
                    message.secApplyUid = reader.int64().toBigInt();
                    break;
                case /* repeated data.User linked_users */ 45:
                    message.linkedUsers.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string sec_from_user_id */ 46:
                    message.secFromUserId = reader.string();
                    break;
                case /* int32 reply_type */ 47:
                    message.replyType = reader.int32();
                    break;
                case /* string reply_prompts */ 48:
                    message.replyPrompts = reader.string();
                    break;
                case /* string sec_to_user_id */ 49:
                    message.secToUserId = reader.string();
                    break;
                case /* im.LinkMicMethod.InvitorInfo invitor_info */ 50:
                    message.invitorInfo = LinkMicMethod_InvitorInfo.internalBinaryRead(reader, reader.uint32(), options, message.invitorInfo);
                    break;
                case /* bool rtc_join_channel */ 51:
                    message.rtcJoinChannel = reader.bool();
                    break;
                case /* int32 sub_scene */ 52:
                    message.subScene = reader.int32();
                    break;
                case /* bool support_update_link_type */ 53:
                    message.supportUpdateLinkType = reader.bool();
                    break;
                case /* int32 link_type */ 54:
                    message.linkType = reader.int32();
                    break;
                case /* int32 source */ 55:
                    message.source = reader.int32();
                    break;
                case /* data.AnchorLinkmicInfo backup_anchor_linkmic_info */ 56:
                    message.backupAnchorLinkmicInfo = AnchorLinkmicInfo.internalBinaryRead(reader, reader.uint32(), options, message.backupAnchorLinkmicInfo);
                    break;
                case /* repeated int32 play_modes */ 57:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playModes.push(reader.int32());
                    else
                        message.playModes.push(reader.int32());
                    break;
                case /* repeated data.ListUser linked_list_users */ 58:
                    message.linkedListUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.LinkmicPositionItem locked_positions */ 59:
                    message.lockedPositions.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 end_reason */ 60:
                    message.endReason = reader.int32();
                    break;
                case /* data.MultiRtcInfo multi_rtc_info */ 61:
                    message.multiRtcInfo = MultiRtcInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiRtcInfo);
                    break;
                case /* data.MultiLiveCoreInfo multi_live_core_info */ 62:
                    message.multiLiveCoreInfo = MultiLiveCoreInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiLiveCoreInfo);
                    break;
                case /* int32 layout_config_version */ 63:
                    message.layoutConfigVersion = reader.int32();
                    break;
                case /* int32 control_type */ 64:
                    message.controlType = reader.int32();
                    break;
                case /* data.BanUser ban_anchor_info */ 65:
                    message.banAnchorInfo = BanUser.internalBinaryRead(reader, reader.uint32(), options, message.banAnchorInfo);
                    break;
                case /* uint64 version */ 66:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* data.JoinTeamfightInfo join_teamfight_info */ 67:
                    message.joinTeamfightInfo = JoinTeamfightInfo.internalBinaryRead(reader, reader.uint32(), options, message.joinTeamfightInfo);
                    break;
                case /* int64 paid_count */ 68:
                    message.paidCount = reader.int64().toBigInt();
                    break;
                case /* int64 link_duration */ 69:
                    message.linkDuration = reader.int64().toBigInt();
                    break;
                case /* string live_core_ext_info */ 70:
                    message.liveCoreExtInfo = reader.string();
                    break;
                case /* data.GameInviteInfo game_invite_info */ 71:
                    message.gameInviteInfo = GameInviteInfo.internalBinaryRead(reader, reader.uint32(), options, message.gameInviteInfo);
                    break;
                case /* int32 ui_layout */ 72:
                    message.uiLayout = reader.int32();
                    break;
                case /* data.Text invite_message */ 73:
                    message.inviteMessage = Text.internalBinaryRead(reader, reader.uint32(), options, message.inviteMessage);
                    break;
                case /* data.MultiChannelInfo multi_channel_info */ 74:
                    message.multiChannelInfo = MultiChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.multiChannelInfo);
                    break;
                case /* int32 kick_out_source */ 75:
                    message.kickOutSource = reader.int32();
                    break;
                case /* string function_type */ 77:
                    message.functionType = reader.string();
                    break;
                case /* data.MsgBoardItemInfo msg_board_item */ 78:
                    message.msgBoardItem = MsgBoardItemInfo.internalBinaryRead(reader, reader.uint32(), options, message.msgBoardItem);
                    break;
                case /* string from_user_linkmic_id_str */ 79:
                    message.fromUserLinkmicIdStr = reader.string();
                    break;
                case /* string ack_message */ 80:
                    message.ackMessage = reader.string();
                    break;
                case /* string init_source */ 81:
                    message.initSource = reader.string();
                    break;
                case /* string score_update_log_id */ 82:
                    message.scoreUpdateLogId = reader.string();
                    break;
                case /* int32 switch_play_mode */ 83:
                    message.switchPlayMode = reader.int32();
                    break;
                case /* int32 update_message_from */ 84:
                    message.updateMessageFrom = reader.int32();
                    break;
                case /* data.LinkmicMediaInfo guest_linkmic_info */ 85:
                    message.guestLinkmicInfo = LinkmicMediaInfo.internalBinaryRead(reader, reader.uint32(), options, message.guestLinkmicInfo);
                    break;
                case /* data.MCUContent mcu_content */ 86:
                    message.mcuContent = MCUContent.internalBinaryRead(reader, reader.uint32(), options, message.mcuContent);
                    break;
                case /* data.BreakthroughInfo breakthrough_info */ 87:
                    message.breakthroughInfo = BreakthroughInfo.internalBinaryRead(reader, reader.uint32(), options, message.breakthroughInfo);
                    break;
                case /* data.LinkerBaseInfo linker_base_info */ 88:
                    message.linkerBaseInfo = LinkerBaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkerBaseInfo);
                    break;
                case /* data.AudienceActionSource action_source */ 89:
                    message.actionSource = AudienceActionSource.internalBinaryRead(reader, reader.uint32(), options, message.actionSource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicMethod, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* string access_key = 3; */
        if (message.accessKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.accessKey);
        /* int64 anchor_linkmic_id = 4; */
        if (message.anchorLinkmicId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.anchorLinkmicId);
        /* int64 user_id = 5; */
        if (message.userId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.userId);
        /* int64 fan_ticket = 6; */
        if (message.fanTicket !== 0n)
            writer.tag(6, WireType.Varint).int64(message.fanTicket);
        /* int64 total_linkmic_fan_ticket = 7; */
        if (message.totalLinkmicFanTicket !== 0n)
            writer.tag(7, WireType.Varint).int64(message.totalLinkmicFanTicket);
        /* int64 channel_id = 8; */
        if (message.channelId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.channelId);
        /* int64 layout = 9; */
        if (message.layout !== 0n)
            writer.tag(9, WireType.Varint).int64(message.layout);
        /* int64 vendor = 10; */
        if (message.vendor !== 0n)
            writer.tag(10, WireType.Varint).int64(message.vendor);
        /* int64 dimension = 11; */
        if (message.dimension !== 0n)
            writer.tag(11, WireType.Varint).int64(message.dimension);
        /* string theme = 12; */
        if (message.theme !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.theme);
        /* int64 invite_uid = 13; */
        if (message.inviteUid !== 0n)
            writer.tag(13, WireType.Varint).int64(message.inviteUid);
        /* int64 answer = 14; */
        if (message.answer !== 0n)
            writer.tag(14, WireType.Varint).int64(message.answer);
        /* int64 start_time = 15; */
        if (message.startTime !== 0n)
            writer.tag(15, WireType.Varint).int64(message.startTime);
        /* int64 duration = 16; */
        if (message.duration !== 0n)
            writer.tag(16, WireType.Varint).int64(message.duration);
        /* repeated im.LinkMicMethod.UserScores user_scores = 17; */
        for (let i = 0; i < message.userScores.length; i++)
            LinkMicMethod_UserScores.internalBinaryWrite(message.userScores[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* int64 match_type = 18; */
        if (message.matchType !== 0n)
            writer.tag(18, WireType.Varint).int64(message.matchType);
        /* bool win = 19; */
        if (message.win !== false)
            writer.tag(19, WireType.Varint).bool(message.win);
        /* string prompts = 20; */
        if (message.prompts !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.prompts);
        /* int64 to_user_id = 21; */
        if (message.toUserId !== 0n)
            writer.tag(21, WireType.Varint).int64(message.toUserId);
        /* int64 linkmic_layout = 23; */
        if (message.linkmicLayout !== 0n)
            writer.tag(23, WireType.Varint).int64(message.linkmicLayout);
        /* int64 from_user_id = 24; */
        if (message.fromUserId !== 0n)
            writer.tag(24, WireType.Varint).int64(message.fromUserId);
        /* string tips = 25; */
        if (message.tips !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.tips);
        /* int64 start_time_ms = 26; */
        if (message.startTimeMs !== 0n)
            writer.tag(26, WireType.Varint).int64(message.startTimeMs);
        /* int32 confluence_type = 27; */
        if (message.confluenceType !== 0)
            writer.tag(27, WireType.Varint).int32(message.confluenceType);
        /* int64 from_room_id = 28; */
        if (message.fromRoomId !== 0n)
            writer.tag(28, WireType.Varint).int64(message.fromRoomId);
        /* int64 invite_type = 29; */
        if (message.inviteType !== 0n)
            writer.tag(29, WireType.Varint).int64(message.inviteType);
        /* int64 sub_type = 30; */
        if (message.subType !== 0n)
            writer.tag(30, WireType.Varint).int64(message.subType);
        /* data.RivalExtraInfo inviter_rival_extra = 31; */
        if (message.inviterRivalExtra)
            RivalExtraInfo.internalBinaryWrite(message.inviterRivalExtra, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* string rtc_ext_info = 32; */
        if (message.rtcExtInfo !== "")
            writer.tag(32, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string rtc_app_id = 33; */
        if (message.rtcAppId !== "")
            writer.tag(33, WireType.LengthDelimited).string(message.rtcAppId);
        /* string app_id = 34; */
        if (message.appId !== "")
            writer.tag(34, WireType.LengthDelimited).string(message.appId);
        /* string app_sign = 35; */
        if (message.appSign !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.appSign);
        /* string rtc_app_sign = 36; */
        if (message.rtcAppSign !== "")
            writer.tag(36, WireType.LengthDelimited).string(message.rtcAppSign);
        /* string anchor_linkmic_id_str = 37; */
        if (message.anchorLinkmicIdStr !== "")
            writer.tag(37, WireType.LengthDelimited).string(message.anchorLinkmicIdStr);
        /* int64 rival_anchor_id = 38; */
        if (message.rivalAnchorId !== 0n)
            writer.tag(38, WireType.Varint).int64(message.rivalAnchorId);
        /* int64 rival_linkmic_id = 39; */
        if (message.rivalLinkmicId !== 0n)
            writer.tag(39, WireType.Varint).int64(message.rivalLinkmicId);
        /* string rival_linkmic_id_str = 40; */
        if (message.rivalLinkmicIdStr !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.rivalLinkmicIdStr);
        /* bool show_popup = 41; */
        if (message.showPopup !== false)
            writer.tag(41, WireType.Varint).bool(message.showPopup);
        /* int64 sec_invite_uid = 42; */
        if (message.secInviteUid !== 0n)
            writer.tag(42, WireType.Varint).int64(message.secInviteUid);
        /* int64 scene = 43; */
        if (message.scene !== 0n)
            writer.tag(43, WireType.Varint).int64(message.scene);
        /* int64 sec_apply_uid = 44; */
        if (message.secApplyUid !== 0n)
            writer.tag(44, WireType.Varint).int64(message.secApplyUid);
        /* repeated data.User linked_users = 45; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            User.internalBinaryWrite(message.linkedUsers[i], writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* string sec_from_user_id = 46; */
        if (message.secFromUserId !== "")
            writer.tag(46, WireType.LengthDelimited).string(message.secFromUserId);
        /* int32 reply_type = 47; */
        if (message.replyType !== 0)
            writer.tag(47, WireType.Varint).int32(message.replyType);
        /* string reply_prompts = 48; */
        if (message.replyPrompts !== "")
            writer.tag(48, WireType.LengthDelimited).string(message.replyPrompts);
        /* string sec_to_user_id = 49; */
        if (message.secToUserId !== "")
            writer.tag(49, WireType.LengthDelimited).string(message.secToUserId);
        /* im.LinkMicMethod.InvitorInfo invitor_info = 50; */
        if (message.invitorInfo)
            LinkMicMethod_InvitorInfo.internalBinaryWrite(message.invitorInfo, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* bool rtc_join_channel = 51; */
        if (message.rtcJoinChannel !== false)
            writer.tag(51, WireType.Varint).bool(message.rtcJoinChannel);
        /* int32 sub_scene = 52; */
        if (message.subScene !== 0)
            writer.tag(52, WireType.Varint).int32(message.subScene);
        /* bool support_update_link_type = 53; */
        if (message.supportUpdateLinkType !== false)
            writer.tag(53, WireType.Varint).bool(message.supportUpdateLinkType);
        /* int32 link_type = 54; */
        if (message.linkType !== 0)
            writer.tag(54, WireType.Varint).int32(message.linkType);
        /* int32 source = 55; */
        if (message.source !== 0)
            writer.tag(55, WireType.Varint).int32(message.source);
        /* data.AnchorLinkmicInfo backup_anchor_linkmic_info = 56; */
        if (message.backupAnchorLinkmicInfo)
            AnchorLinkmicInfo.internalBinaryWrite(message.backupAnchorLinkmicInfo, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 play_modes = 57; */
        if (message.playModes.length) {
            writer.tag(57, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playModes.length; i++)
                writer.int32(message.playModes[i]);
            writer.join();
        }
        /* repeated data.ListUser linked_list_users = 58; */
        for (let i = 0; i < message.linkedListUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedListUsers[i], writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkmicPositionItem locked_positions = 59; */
        for (let i = 0; i < message.lockedPositions.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.lockedPositions[i], writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* int32 end_reason = 60; */
        if (message.endReason !== 0)
            writer.tag(60, WireType.Varint).int32(message.endReason);
        /* data.MultiRtcInfo multi_rtc_info = 61; */
        if (message.multiRtcInfo)
            MultiRtcInfo.internalBinaryWrite(message.multiRtcInfo, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiLiveCoreInfo multi_live_core_info = 62; */
        if (message.multiLiveCoreInfo)
            MultiLiveCoreInfo.internalBinaryWrite(message.multiLiveCoreInfo, writer.tag(62, WireType.LengthDelimited).fork(), options).join();
        /* int32 layout_config_version = 63; */
        if (message.layoutConfigVersion !== 0)
            writer.tag(63, WireType.Varint).int32(message.layoutConfigVersion);
        /* int32 control_type = 64; */
        if (message.controlType !== 0)
            writer.tag(64, WireType.Varint).int32(message.controlType);
        /* data.BanUser ban_anchor_info = 65; */
        if (message.banAnchorInfo)
            BanUser.internalBinaryWrite(message.banAnchorInfo, writer.tag(65, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 66; */
        if (message.version !== 0n)
            writer.tag(66, WireType.Varint).uint64(message.version);
        /* data.JoinTeamfightInfo join_teamfight_info = 67; */
        if (message.joinTeamfightInfo)
            JoinTeamfightInfo.internalBinaryWrite(message.joinTeamfightInfo, writer.tag(67, WireType.LengthDelimited).fork(), options).join();
        /* int64 paid_count = 68; */
        if (message.paidCount !== 0n)
            writer.tag(68, WireType.Varint).int64(message.paidCount);
        /* int64 link_duration = 69; */
        if (message.linkDuration !== 0n)
            writer.tag(69, WireType.Varint).int64(message.linkDuration);
        /* string live_core_ext_info = 70; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(70, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        /* data.GameInviteInfo game_invite_info = 71; */
        if (message.gameInviteInfo)
            GameInviteInfo.internalBinaryWrite(message.gameInviteInfo, writer.tag(71, WireType.LengthDelimited).fork(), options).join();
        /* int32 ui_layout = 72; */
        if (message.uiLayout !== 0)
            writer.tag(72, WireType.Varint).int32(message.uiLayout);
        /* data.Text invite_message = 73; */
        if (message.inviteMessage)
            Text.internalBinaryWrite(message.inviteMessage, writer.tag(73, WireType.LengthDelimited).fork(), options).join();
        /* data.MultiChannelInfo multi_channel_info = 74; */
        if (message.multiChannelInfo)
            MultiChannelInfo.internalBinaryWrite(message.multiChannelInfo, writer.tag(74, WireType.LengthDelimited).fork(), options).join();
        /* int32 kick_out_source = 75; */
        if (message.kickOutSource !== 0)
            writer.tag(75, WireType.Varint).int32(message.kickOutSource);
        /* string function_type = 77; */
        if (message.functionType !== "")
            writer.tag(77, WireType.LengthDelimited).string(message.functionType);
        /* data.MsgBoardItemInfo msg_board_item = 78; */
        if (message.msgBoardItem)
            MsgBoardItemInfo.internalBinaryWrite(message.msgBoardItem, writer.tag(78, WireType.LengthDelimited).fork(), options).join();
        /* string from_user_linkmic_id_str = 79; */
        if (message.fromUserLinkmicIdStr !== "")
            writer.tag(79, WireType.LengthDelimited).string(message.fromUserLinkmicIdStr);
        /* string ack_message = 80; */
        if (message.ackMessage !== "")
            writer.tag(80, WireType.LengthDelimited).string(message.ackMessage);
        /* string init_source = 81; */
        if (message.initSource !== "")
            writer.tag(81, WireType.LengthDelimited).string(message.initSource);
        /* string score_update_log_id = 82; */
        if (message.scoreUpdateLogId !== "")
            writer.tag(82, WireType.LengthDelimited).string(message.scoreUpdateLogId);
        /* int32 switch_play_mode = 83; */
        if (message.switchPlayMode !== 0)
            writer.tag(83, WireType.Varint).int32(message.switchPlayMode);
        /* int32 update_message_from = 84; */
        if (message.updateMessageFrom !== 0)
            writer.tag(84, WireType.Varint).int32(message.updateMessageFrom);
        /* data.LinkmicMediaInfo guest_linkmic_info = 85; */
        if (message.guestLinkmicInfo)
            LinkmicMediaInfo.internalBinaryWrite(message.guestLinkmicInfo, writer.tag(85, WireType.LengthDelimited).fork(), options).join();
        /* data.MCUContent mcu_content = 86; */
        if (message.mcuContent)
            MCUContent.internalBinaryWrite(message.mcuContent, writer.tag(86, WireType.LengthDelimited).fork(), options).join();
        /* data.BreakthroughInfo breakthrough_info = 87; */
        if (message.breakthroughInfo)
            BreakthroughInfo.internalBinaryWrite(message.breakthroughInfo, writer.tag(87, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkerBaseInfo linker_base_info = 88; */
        if (message.linkerBaseInfo)
            LinkerBaseInfo.internalBinaryWrite(message.linkerBaseInfo, writer.tag(88, WireType.LengthDelimited).fork(), options).join();
        /* data.AudienceActionSource action_source = 89; */
        if (message.actionSource)
            AudienceActionSource.internalBinaryWrite(message.actionSource, writer.tag(89, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicMethod
 */
export const LinkMicMethod = new LinkMicMethod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicMethod_UserScores$Type extends MessageType<LinkMicMethod_UserScores> {
    constructor() {
        super("im.LinkMicMethod.UserScores", [
            { no: 1, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "weekly_rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "score_relative_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_large_pk_score", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "room_like_trigger", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "score_blur_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "battle_rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "new_score_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "multi_pk_team_score_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "multi_pk_team_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "multi_pk_team_rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "is_multi_pk_relative_text", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicMethod_UserScores>): LinkMicMethod_UserScores {
        const message = { score: 0n, userId: 0n, weeklyRank: 0n, scoreRelativeText: "", isLargePkScore: false, roomLikeTrigger: false, scoreBlurText: "", battleRank: 0n, newScoreOpen: false, multiPkTeamScoreText: "", multiPkTeamScore: 0n, multiPkTeamRank: 0n, isMultiPkRelativeText: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicMethod_UserScores>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicMethod_UserScores): LinkMicMethod_UserScores {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 score */ 1:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 weekly_rank */ 3:
                    message.weeklyRank = reader.int64().toBigInt();
                    break;
                case /* string score_relative_text */ 4:
                    message.scoreRelativeText = reader.string();
                    break;
                case /* bool is_large_pk_score */ 5:
                    message.isLargePkScore = reader.bool();
                    break;
                case /* bool room_like_trigger */ 6:
                    message.roomLikeTrigger = reader.bool();
                    break;
                case /* string score_blur_text */ 7:
                    message.scoreBlurText = reader.string();
                    break;
                case /* int64 battle_rank */ 8:
                    message.battleRank = reader.int64().toBigInt();
                    break;
                case /* bool new_score_open */ 9:
                    message.newScoreOpen = reader.bool();
                    break;
                case /* string multi_pk_team_score_text */ 10:
                    message.multiPkTeamScoreText = reader.string();
                    break;
                case /* int64 multi_pk_team_score */ 11:
                    message.multiPkTeamScore = reader.int64().toBigInt();
                    break;
                case /* int64 multi_pk_team_rank */ 12:
                    message.multiPkTeamRank = reader.int64().toBigInt();
                    break;
                case /* bool is_multi_pk_relative_text */ 13:
                    message.isMultiPkRelativeText = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicMethod_UserScores, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 score = 1; */
        if (message.score !== 0n)
            writer.tag(1, WireType.Varint).int64(message.score);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* int64 weekly_rank = 3; */
        if (message.weeklyRank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.weeklyRank);
        /* string score_relative_text = 4; */
        if (message.scoreRelativeText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.scoreRelativeText);
        /* bool is_large_pk_score = 5; */
        if (message.isLargePkScore !== false)
            writer.tag(5, WireType.Varint).bool(message.isLargePkScore);
        /* bool room_like_trigger = 6; */
        if (message.roomLikeTrigger !== false)
            writer.tag(6, WireType.Varint).bool(message.roomLikeTrigger);
        /* string score_blur_text = 7; */
        if (message.scoreBlurText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.scoreBlurText);
        /* int64 battle_rank = 8; */
        if (message.battleRank !== 0n)
            writer.tag(8, WireType.Varint).int64(message.battleRank);
        /* bool new_score_open = 9; */
        if (message.newScoreOpen !== false)
            writer.tag(9, WireType.Varint).bool(message.newScoreOpen);
        /* string multi_pk_team_score_text = 10; */
        if (message.multiPkTeamScoreText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.multiPkTeamScoreText);
        /* int64 multi_pk_team_score = 11; */
        if (message.multiPkTeamScore !== 0n)
            writer.tag(11, WireType.Varint).int64(message.multiPkTeamScore);
        /* int64 multi_pk_team_rank = 12; */
        if (message.multiPkTeamRank !== 0n)
            writer.tag(12, WireType.Varint).int64(message.multiPkTeamRank);
        /* bool is_multi_pk_relative_text = 13; */
        if (message.isMultiPkRelativeText !== false)
            writer.tag(13, WireType.Varint).bool(message.isMultiPkRelativeText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicMethod.UserScores
 */
export const LinkMicMethod_UserScores = new LinkMicMethod_UserScores$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicMethod_Contributor$Type extends MessageType<LinkMicMethod_Contributor> {
    constructor() {
        super("im.LinkMicMethod.Contributor", [
            { no: 1, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<LinkMicMethod_Contributor>): LinkMicMethod_Contributor {
        const message = { score: 0n, rank: 0n, userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicMethod_Contributor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicMethod_Contributor): LinkMicMethod_Contributor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 score */ 1:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 2:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 4:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicMethod_Contributor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 score = 1; */
        if (message.score !== 0n)
            writer.tag(1, WireType.Varint).int64(message.score);
        /* int64 rank = 2; */
        if (message.rank !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rank);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* data.User user = 4; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicMethod.Contributor
 */
export const LinkMicMethod_Contributor = new LinkMicMethod_Contributor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicMethod_ContributorList$Type extends MessageType<LinkMicMethod_ContributorList> {
    constructor() {
        super("im.LinkMicMethod.ContributorList", [
            { no: 1, name: "contributor_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMicMethod_Contributor }
        ]);
    }
    create(value?: PartialMessage<LinkMicMethod_ContributorList>): LinkMicMethod_ContributorList {
        const message = { contributorList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicMethod_ContributorList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicMethod_ContributorList): LinkMicMethod_ContributorList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.LinkMicMethod.Contributor contributor_list */ 1:
                    message.contributorList.push(LinkMicMethod_Contributor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicMethod_ContributorList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.LinkMicMethod.Contributor contributor_list = 1; */
        for (let i = 0; i < message.contributorList.length; i++)
            LinkMicMethod_Contributor.internalBinaryWrite(message.contributorList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicMethod.ContributorList
 */
export const LinkMicMethod_ContributorList = new LinkMicMethod_ContributorList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicMethod_InvitorInfo$Type extends MessageType<LinkMicMethod_InvitorInfo> {
    constructor() {
        super("im.LinkMicMethod.InvitorInfo", [
            { no: 1, name: "invitor_nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "invitor_avatar", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LinkMicMethod_InvitorInfo>): LinkMicMethod_InvitorInfo {
        const message = { invitorNickName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicMethod_InvitorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicMethod_InvitorInfo): LinkMicMethod_InvitorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string invitor_nick_name */ 1:
                    message.invitorNickName = reader.string();
                    break;
                case /* data.Image invitor_avatar */ 2:
                    message.invitorAvatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.invitorAvatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicMethod_InvitorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string invitor_nick_name = 1; */
        if (message.invitorNickName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.invitorNickName);
        /* data.Image invitor_avatar = 2; */
        if (message.invitorAvatar)
            Image.internalBinaryWrite(message.invitorAvatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicMethod.InvitorInfo
 */
export const LinkMicMethod_InvitorInfo = new LinkMicMethod_InvitorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicOChannelKickOutMsg$Type extends MessageType<LinkMicOChannelKickOutMsg> {
    constructor() {
        super("im.LinkMicOChannelKickOutMsg", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "kick_out_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "toast_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicOChannelKickOutMsg>): LinkMicOChannelKickOutMsg {
        const message = { kickOutUid: 0n, toastMsg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicOChannelKickOutMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicOChannelKickOutMsg): LinkMicOChannelKickOutMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 kick_out_uid */ 2:
                    message.kickOutUid = reader.int64().toBigInt();
                    break;
                case /* string toast_msg */ 3:
                    message.toastMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicOChannelKickOutMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 kick_out_uid = 2; */
        if (message.kickOutUid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.kickOutUid);
        /* string toast_msg = 3; */
        if (message.toastMsg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toastMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicOChannelKickOutMsg
 */
export const LinkMicOChannelKickOutMsg = new LinkMicOChannelKickOutMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicOChannelNotifyMsg$Type extends MessageType<LinkMicOChannelNotifyMsg> {
    constructor() {
        super("im.LinkMicOChannelNotifyMsg", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "toast_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicOChannelNotifyMsg>): LinkMicOChannelNotifyMsg {
        const message = { type: 0, toastMsg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicOChannelNotifyMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicOChannelNotifyMsg): LinkMicOChannelNotifyMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string toast_msg */ 3:
                    message.toastMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicOChannelNotifyMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string toast_msg = 3; */
        if (message.toastMsg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toastMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicOChannelNotifyMsg
 */
export const LinkMicOChannelNotifyMsg = new LinkMicOChannelNotifyMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingListMessage$Type extends MessageType<LinkmicOrderSingListMessage> {
    constructor() {
        super("im.LinkmicOrderSingListMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "order_sing_list_content", kind: "message", T: () => LinkmicOrderSingListContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingListMessage>): LinkmicOrderSingListMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingListMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingListMessage): LinkmicOrderSingListMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.LinkmicOrderSingListContent order_sing_list_content */ 2:
                    message.orderSingListContent = LinkmicOrderSingListContent.internalBinaryRead(reader, reader.uint32(), options, message.orderSingListContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingListMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicOrderSingListContent order_sing_list_content = 2; */
        if (message.orderSingListContent)
            LinkmicOrderSingListContent.internalBinaryWrite(message.orderSingListContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingListMessage
 */
export const LinkmicOrderSingListMessage = new LinkmicOrderSingListMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingListContent$Type extends MessageType<LinkmicOrderSingListContent> {
    constructor() {
        super("im.LinkmicOrderSingListContent", [
            { no: 1, name: "user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OrderSingItemByPosition }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingListContent>): LinkmicOrderSingListContent {
        const message = { userList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingListContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingListContent): LinkmicOrderSingListContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.OrderSingItemByPosition user_list */ 1:
                    message.userList.push(OrderSingItemByPosition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingListContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.OrderSingItemByPosition user_list = 1; */
        for (let i = 0; i < message.userList.length; i++)
            OrderSingItemByPosition.internalBinaryWrite(message.userList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingListContent
 */
export const LinkmicOrderSingListContent = new LinkmicOrderSingListContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderSingItemByPosition$Type extends MessageType<OrderSingItemByPosition> {
    constructor() {
        super("im.OrderSingItemByPosition", [
            { no: 1, name: "order_sing_item_str_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "wait_for_start_item_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "order_user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<OrderSingItemByPosition>): OrderSingItemByPosition {
        const message = { orderSingItemStrList: [], waitForStartItemNum: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderSingItemByPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderSingItemByPosition): OrderSingItemByPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string order_sing_item_str_list */ 1:
                    message.orderSingItemStrList.push(reader.string());
                    break;
                case /* int64 wait_for_start_item_num */ 2:
                    message.waitForStartItemNum = reader.int64().toBigInt();
                    break;
                case /* data.User order_user */ 3:
                    message.orderUser = User.internalBinaryRead(reader, reader.uint32(), options, message.orderUser);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderSingItemByPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string order_sing_item_str_list = 1; */
        for (let i = 0; i < message.orderSingItemStrList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.orderSingItemStrList[i]);
        /* int64 wait_for_start_item_num = 2; */
        if (message.waitForStartItemNum !== 0n)
            writer.tag(2, WireType.Varint).int64(message.waitForStartItemNum);
        /* data.User order_user = 3; */
        if (message.orderUser)
            User.internalBinaryWrite(message.orderUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OrderSingItemByPosition
 */
export const OrderSingItemByPosition = new OrderSingItemByPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingMessage$Type extends MessageType<LinkmicOrderSingMessage> {
    constructor() {
        super("im.LinkmicOrderSingMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "order_sing_create_content", kind: "message", T: () => LinkmicOrderSingCreateContent },
            { no: 4, name: "order_sing_finish_content", kind: "message", T: () => LinkmicOrderSingFinishContent },
            { no: 5, name: "order_sing_action_toast_content", kind: "message", T: () => LinkmicOrderSingActionToastContent },
            { no: 6, name: "order_sing_action_content", kind: "message", T: () => LinkmicOrderSingActionContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingMessage>): LinkmicOrderSingMessage {
        const message = { messageType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingMessage): LinkmicOrderSingMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* im.LinkmicOrderSingCreateContent order_sing_create_content */ 3:
                    message.orderSingCreateContent = LinkmicOrderSingCreateContent.internalBinaryRead(reader, reader.uint32(), options, message.orderSingCreateContent);
                    break;
                case /* im.LinkmicOrderSingFinishContent order_sing_finish_content */ 4:
                    message.orderSingFinishContent = LinkmicOrderSingFinishContent.internalBinaryRead(reader, reader.uint32(), options, message.orderSingFinishContent);
                    break;
                case /* im.LinkmicOrderSingActionToastContent order_sing_action_toast_content */ 5:
                    message.orderSingActionToastContent = LinkmicOrderSingActionToastContent.internalBinaryRead(reader, reader.uint32(), options, message.orderSingActionToastContent);
                    break;
                case /* im.LinkmicOrderSingActionContent order_sing_action_content */ 6:
                    message.orderSingActionContent = LinkmicOrderSingActionContent.internalBinaryRead(reader, reader.uint32(), options, message.orderSingActionContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* im.LinkmicOrderSingCreateContent order_sing_create_content = 3; */
        if (message.orderSingCreateContent)
            LinkmicOrderSingCreateContent.internalBinaryWrite(message.orderSingCreateContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicOrderSingFinishContent order_sing_finish_content = 4; */
        if (message.orderSingFinishContent)
            LinkmicOrderSingFinishContent.internalBinaryWrite(message.orderSingFinishContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicOrderSingActionToastContent order_sing_action_toast_content = 5; */
        if (message.orderSingActionToastContent)
            LinkmicOrderSingActionToastContent.internalBinaryWrite(message.orderSingActionToastContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicOrderSingActionContent order_sing_action_content = 6; */
        if (message.orderSingActionContent)
            LinkmicOrderSingActionContent.internalBinaryWrite(message.orderSingActionContent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingMessage
 */
export const LinkmicOrderSingMessage = new LinkmicOrderSingMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingCreateContent$Type extends MessageType<LinkmicOrderSingCreateContent> {
    constructor() {
        super("im.LinkmicOrderSingCreateContent", [
            { no: 1, name: "open_order_sing_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "gift_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "auto_enlarge", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "gift_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingCreateContent>): LinkmicOrderSingCreateContent {
        const message = { openOrderSingToast: "", giftId: 0n, autoEnlarge: false, giftIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingCreateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingCreateContent): LinkmicOrderSingCreateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string open_order_sing_toast */ 1:
                    message.openOrderSingToast = reader.string();
                    break;
                case /* int64 gift_id */ 2:
                    message.giftId = reader.int64().toBigInt();
                    break;
                case /* bool auto_enlarge */ 3:
                    message.autoEnlarge = reader.bool();
                    break;
                case /* repeated int64 gift_ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.giftIds.push(reader.int64().toBigInt());
                    else
                        message.giftIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingCreateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string open_order_sing_toast = 1; */
        if (message.openOrderSingToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.openOrderSingToast);
        /* int64 gift_id = 2; */
        if (message.giftId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.giftId);
        /* bool auto_enlarge = 3; */
        if (message.autoEnlarge !== false)
            writer.tag(3, WireType.Varint).bool(message.autoEnlarge);
        /* repeated int64 gift_ids = 4; */
        if (message.giftIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.giftIds.length; i++)
                writer.int64(message.giftIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingCreateContent
 */
export const LinkmicOrderSingCreateContent = new LinkmicOrderSingCreateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingFinishContent$Type extends MessageType<LinkmicOrderSingFinishContent> {
    constructor() {
        super("im.LinkmicOrderSingFinishContent", [
            { no: 1, name: "close_order_sing_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "auto_enlarge", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingFinishContent>): LinkmicOrderSingFinishContent {
        const message = { closeOrderSingToast: "", autoEnlarge: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingFinishContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingFinishContent): LinkmicOrderSingFinishContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string close_order_sing_toast */ 1:
                    message.closeOrderSingToast = reader.string();
                    break;
                case /* bool auto_enlarge */ 2:
                    message.autoEnlarge = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingFinishContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string close_order_sing_toast = 1; */
        if (message.closeOrderSingToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.closeOrderSingToast);
        /* bool auto_enlarge = 2; */
        if (message.autoEnlarge !== false)
            writer.tag(2, WireType.Varint).bool(message.autoEnlarge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingFinishContent
 */
export const LinkmicOrderSingFinishContent = new LinkmicOrderSingFinishContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingActionToastContent$Type extends MessageType<LinkmicOrderSingActionToastContent> {
    constructor() {
        super("im.LinkmicOrderSingActionToastContent", [
            { no: 1, name: "start_sing_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "finish_sing_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "oder_sing_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "order_sing_action_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingActionToastContent>): LinkmicOrderSingActionToastContent {
        const message = { startSingToast: "", finishSingToast: "", oderSingToast: "", orderSingActionToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingActionToastContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingActionToastContent): LinkmicOrderSingActionToastContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start_sing_toast */ 1:
                    message.startSingToast = reader.string();
                    break;
                case /* string finish_sing_toast */ 2:
                    message.finishSingToast = reader.string();
                    break;
                case /* string oder_sing_toast */ 3:
                    message.oderSingToast = reader.string();
                    break;
                case /* string order_sing_action_toast */ 4:
                    message.orderSingActionToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingActionToastContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start_sing_toast = 1; */
        if (message.startSingToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.startSingToast);
        /* string finish_sing_toast = 2; */
        if (message.finishSingToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.finishSingToast);
        /* string oder_sing_toast = 3; */
        if (message.oderSingToast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.oderSingToast);
        /* string order_sing_action_toast = 4; */
        if (message.orderSingActionToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.orderSingActionToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingActionToastContent
 */
export const LinkmicOrderSingActionToastContent = new LinkmicOrderSingActionToastContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingActionContent$Type extends MessageType<LinkmicOrderSingActionContent> {
    constructor() {
        super("im.LinkmicOrderSingActionContent", [
            { no: 1, name: "order_sing_item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "order_sing_item_action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "order_user", kind: "message", T: () => User },
            { no: 4, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "current_order_sing_item", kind: "message", T: () => CurrentOrderSingItemV2 },
            { no: 6, name: "order_sing_gift_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingActionContent>): LinkmicOrderSingActionContent {
        const message = { orderSingItemId: "", orderSingItemAction: 0, timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingActionContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingActionContent): LinkmicOrderSingActionContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_sing_item_id */ 1:
                    message.orderSingItemId = reader.string();
                    break;
                case /* int32 order_sing_item_action */ 2:
                    message.orderSingItemAction = reader.int32();
                    break;
                case /* data.User order_user */ 3:
                    message.orderUser = User.internalBinaryRead(reader, reader.uint32(), options, message.orderUser);
                    break;
                case /* int64 timestamp */ 4:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* data.CurrentOrderSingItemV2 current_order_sing_item */ 5:
                    message.currentOrderSingItem = CurrentOrderSingItemV2.internalBinaryRead(reader, reader.uint32(), options, message.currentOrderSingItem);
                    break;
                case /* data.Image order_sing_gift_icon */ 6:
                    message.orderSingGiftIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.orderSingGiftIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingActionContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_sing_item_id = 1; */
        if (message.orderSingItemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderSingItemId);
        /* int32 order_sing_item_action = 2; */
        if (message.orderSingItemAction !== 0)
            writer.tag(2, WireType.Varint).int32(message.orderSingItemAction);
        /* data.User order_user = 3; */
        if (message.orderUser)
            User.internalBinaryWrite(message.orderUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 timestamp = 4; */
        if (message.timestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.timestamp);
        /* data.CurrentOrderSingItemV2 current_order_sing_item = 5; */
        if (message.currentOrderSingItem)
            CurrentOrderSingItemV2.internalBinaryWrite(message.currentOrderSingItem, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image order_sing_gift_icon = 6; */
        if (message.orderSingGiftIcon)
            Image.internalBinaryWrite(message.orderSingGiftIcon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingActionContent
 */
export const LinkmicOrderSingActionContent = new LinkmicOrderSingActionContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingScoreMessage$Type extends MessageType<LinkmicOrderSingScoreMessage> {
    constructor() {
        super("im.LinkmicOrderSingScoreMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "order_sing_score_content", kind: "message", T: () => LinkmicOrderSingScoreContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingScoreMessage>): LinkmicOrderSingScoreMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingScoreMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingScoreMessage): LinkmicOrderSingScoreMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.LinkmicOrderSingScoreContent order_sing_score_content */ 2:
                    message.orderSingScoreContent = LinkmicOrderSingScoreContent.internalBinaryRead(reader, reader.uint32(), options, message.orderSingScoreContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingScoreMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicOrderSingScoreContent order_sing_score_content = 2; */
        if (message.orderSingScoreContent)
            LinkmicOrderSingScoreContent.internalBinaryWrite(message.orderSingScoreContent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingScoreMessage
 */
export const LinkmicOrderSingScoreMessage = new LinkmicOrderSingScoreMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicOrderSingScoreContent$Type extends MessageType<LinkmicOrderSingScoreContent> {
    constructor() {
        super("im.LinkmicOrderSingScoreContent", [
            { no: 1, name: "user_score", kind: "message", T: () => OrderSingUserScore }
        ]);
    }
    create(value?: PartialMessage<LinkmicOrderSingScoreContent>): LinkmicOrderSingScoreContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicOrderSingScoreContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicOrderSingScoreContent): LinkmicOrderSingScoreContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.OrderSingUserScore user_score */ 1:
                    message.userScore = OrderSingUserScore.internalBinaryRead(reader, reader.uint32(), options, message.userScore);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicOrderSingScoreContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.OrderSingUserScore user_score = 1; */
        if (message.userScore)
            OrderSingUserScore.internalBinaryWrite(message.userScore, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicOrderSingScoreContent
 */
export const LinkmicOrderSingScoreContent = new LinkmicOrderSingScoreContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderSingUserScore$Type extends MessageType<OrderSingUserScore> {
    constructor() {
        super("im.OrderSingUserScore", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "silver_microphone_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "golden_microphone_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "current_task_microphone_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "current_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "need_score_to_next", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "order_sing_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "current_round_mic_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<OrderSingUserScore>): OrderSingUserScore {
        const message = { userId: 0n, silverMicrophoneNum: 0n, goldenMicrophoneNum: 0n, currentTaskMicrophoneType: 0, currentScore: 0n, needScoreToNext: 0n, orderSingStage: 0, currentRoundMicCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderSingUserScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderSingUserScore): OrderSingUserScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 silver_microphone_num */ 2:
                    message.silverMicrophoneNum = reader.int64().toBigInt();
                    break;
                case /* int64 golden_microphone_num */ 3:
                    message.goldenMicrophoneNum = reader.int64().toBigInt();
                    break;
                case /* int32 current_task_microphone_type */ 4:
                    message.currentTaskMicrophoneType = reader.int32();
                    break;
                case /* int64 current_score */ 5:
                    message.currentScore = reader.int64().toBigInt();
                    break;
                case /* int64 need_score_to_next */ 6:
                    message.needScoreToNext = reader.int64().toBigInt();
                    break;
                case /* int32 order_sing_stage */ 7:
                    message.orderSingStage = reader.int32();
                    break;
                case /* int64 current_round_mic_count */ 8:
                    message.currentRoundMicCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderSingUserScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* int64 silver_microphone_num = 2; */
        if (message.silverMicrophoneNum !== 0n)
            writer.tag(2, WireType.Varint).int64(message.silverMicrophoneNum);
        /* int64 golden_microphone_num = 3; */
        if (message.goldenMicrophoneNum !== 0n)
            writer.tag(3, WireType.Varint).int64(message.goldenMicrophoneNum);
        /* int32 current_task_microphone_type = 4; */
        if (message.currentTaskMicrophoneType !== 0)
            writer.tag(4, WireType.Varint).int32(message.currentTaskMicrophoneType);
        /* int64 current_score = 5; */
        if (message.currentScore !== 0n)
            writer.tag(5, WireType.Varint).int64(message.currentScore);
        /* int64 need_score_to_next = 6; */
        if (message.needScoreToNext !== 0n)
            writer.tag(6, WireType.Varint).int64(message.needScoreToNext);
        /* int32 order_sing_stage = 7; */
        if (message.orderSingStage !== 0)
            writer.tag(7, WireType.Varint).int32(message.orderSingStage);
        /* int64 current_round_mic_count = 8; */
        if (message.currentRoundMicCount !== 0n)
            writer.tag(8, WireType.Varint).int64(message.currentRoundMicCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OrderSingUserScore
 */
export const OrderSingUserScore = new OrderSingUserScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicPositionMessage$Type extends MessageType<LinkMicPositionMessage> {
    constructor() {
        super("im.LinkMicPositionMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "list_change_content", kind: "message", T: () => LinkMicPositionListChangeContent },
            { no: 4, name: "verify_content", kind: "message", T: () => LinkMicPositionVerifyContent }
        ]);
    }
    create(value?: PartialMessage<LinkMicPositionMessage>): LinkMicPositionMessage {
        const message = { messageType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicPositionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicPositionMessage): LinkMicPositionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 message_type */ 2:
                    message.messageType = reader.int32();
                    break;
                case /* im.LinkMicPositionListChangeContent list_change_content */ 3:
                    message.listChangeContent = LinkMicPositionListChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.listChangeContent);
                    break;
                case /* im.LinkMicPositionVerifyContent verify_content */ 4:
                    message.verifyContent = LinkMicPositionVerifyContent.internalBinaryRead(reader, reader.uint32(), options, message.verifyContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicPositionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 2; */
        if (message.messageType !== 0)
            writer.tag(2, WireType.Varint).int32(message.messageType);
        /* im.LinkMicPositionListChangeContent list_change_content = 3; */
        if (message.listChangeContent)
            LinkMicPositionListChangeContent.internalBinaryWrite(message.listChangeContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicPositionVerifyContent verify_content = 4; */
        if (message.verifyContent)
            LinkMicPositionVerifyContent.internalBinaryWrite(message.verifyContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicPositionMessage
 */
export const LinkMicPositionMessage = new LinkMicPositionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicPositionListChangeContent$Type extends MessageType<LinkMicPositionListChangeContent> {
    constructor() {
        super("im.LinkMicPositionListChangeContent", [
            { no: 1, name: "positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem }
        ]);
    }
    create(value?: PartialMessage<LinkMicPositionListChangeContent>): LinkMicPositionListChangeContent {
        const message = { positions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicPositionListChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicPositionListChangeContent): LinkMicPositionListChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.LinkmicPositionItem positions */ 1:
                    message.positions.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicPositionListChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.LinkmicPositionItem positions = 1; */
        for (let i = 0; i < message.positions.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.positions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicPositionListChangeContent
 */
export const LinkMicPositionListChangeContent = new LinkMicPositionListChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicPositionVerifyItem$Type extends MessageType<LinkMicPositionVerifyItem> {
    constructor() {
        super("im.LinkMicPositionVerifyItem", [
            { no: 1, name: "position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "position_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "verify_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "position_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicPositionVerifyItem>): LinkMicPositionVerifyItem {
        const message = { position: 0n, positionName: "", verifyStatus: 0, positionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicPositionVerifyItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicPositionVerifyItem): LinkMicPositionVerifyItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 position */ 1:
                    message.position = reader.int64().toBigInt();
                    break;
                case /* string position_name */ 2:
                    message.positionName = reader.string();
                    break;
                case /* int32 verify_status */ 3:
                    message.verifyStatus = reader.int32();
                    break;
                case /* int32 position_type */ 4:
                    message.positionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicPositionVerifyItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 position = 1; */
        if (message.position !== 0n)
            writer.tag(1, WireType.Varint).int64(message.position);
        /* string position_name = 2; */
        if (message.positionName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.positionName);
        /* int32 verify_status = 3; */
        if (message.verifyStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.verifyStatus);
        /* int32 position_type = 4; */
        if (message.positionType !== 0)
            writer.tag(4, WireType.Varint).int32(message.positionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicPositionVerifyItem
 */
export const LinkMicPositionVerifyItem = new LinkMicPositionVerifyItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicPositionVerifyContent$Type extends MessageType<LinkMicPositionVerifyContent> {
    constructor() {
        super("im.LinkMicPositionVerifyContent", [
            { no: 1, name: "current_verify_position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "verify_position_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMicPositionVerifyItem },
            { no: 3, name: "final_position_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem }
        ]);
    }
    create(value?: PartialMessage<LinkMicPositionVerifyContent>): LinkMicPositionVerifyContent {
        const message = { currentVerifyPosition: 0n, verifyPositionItems: [], finalPositionItems: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicPositionVerifyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicPositionVerifyContent): LinkMicPositionVerifyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 current_verify_position */ 1:
                    message.currentVerifyPosition = reader.int64().toBigInt();
                    break;
                case /* repeated im.LinkMicPositionVerifyItem verify_position_items */ 2:
                    message.verifyPositionItems.push(LinkMicPositionVerifyItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.LinkmicPositionItem final_position_items */ 3:
                    message.finalPositionItems.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicPositionVerifyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 current_verify_position = 1; */
        if (message.currentVerifyPosition !== 0n)
            writer.tag(1, WireType.Varint).int64(message.currentVerifyPosition);
        /* repeated im.LinkMicPositionVerifyItem verify_position_items = 2; */
        for (let i = 0; i < message.verifyPositionItems.length; i++)
            LinkMicPositionVerifyItem.internalBinaryWrite(message.verifyPositionItems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkmicPositionItem final_position_items = 3; */
        for (let i = 0; i < message.finalPositionItems.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.finalPositionItems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicPositionVerifyContent
 */
export const LinkMicPositionVerifyContent = new LinkMicPositionVerifyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicSendEmojiMessage$Type extends MessageType<LinkMicSendEmojiMessage> {
    constructor() {
        super("im.LinkMicSendEmojiMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "from_user", kind: "message", T: () => User },
            { no: 3, name: "emoji", kind: "message", T: () => LinkmicAudienceEmoji },
            { no: 4, name: "emoji_image_result", kind: "message", T: () => Image },
            { no: 5, name: "to_user", kind: "message", T: () => User },
            { no: 6, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<LinkMicSendEmojiMessage>): LinkMicSendEmojiMessage {
        const message = { source: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicSendEmojiMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicSendEmojiMessage): LinkMicSendEmojiMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User from_user */ 2:
                    message.fromUser = User.internalBinaryRead(reader, reader.uint32(), options, message.fromUser);
                    break;
                case /* data.LinkmicAudienceEmoji emoji */ 3:
                    message.emoji = LinkmicAudienceEmoji.internalBinaryRead(reader, reader.uint32(), options, message.emoji);
                    break;
                case /* data.Image emoji_image_result */ 4:
                    message.emojiImageResult = Image.internalBinaryRead(reader, reader.uint32(), options, message.emojiImageResult);
                    break;
                case /* data.User to_user */ 5:
                    message.toUser = User.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* string source */ 6:
                    message.source = reader.string();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 7:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicSendEmojiMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User from_user = 2; */
        if (message.fromUser)
            User.internalBinaryWrite(message.fromUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkmicAudienceEmoji emoji = 3; */
        if (message.emoji)
            LinkmicAudienceEmoji.internalBinaryWrite(message.emoji, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image emoji_image_result = 4; */
        if (message.emojiImageResult)
            Image.internalBinaryWrite(message.emojiImageResult, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.User to_user = 5; */
        if (message.toUser)
            User.internalBinaryWrite(message.toUser, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string source = 6; */
        if (message.source !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.source);
        /* im.PublicAreaCommon public_area_common = 7; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicSendEmojiMessage
 */
export const LinkMicSendEmojiMessage = new LinkMicSendEmojiMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkSettingNotifyMessage$Type extends MessageType<LinkSettingNotifyMessage> {
    constructor() {
        super("im.LinkSettingNotifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicSetting },
            { no: 10, name: "paied_or_time_limit_change_content", kind: "message", T: () => PaiedOrTimeLimitChangeContent }
        ]);
    }
    create(value?: PartialMessage<LinkSettingNotifyMessage>): LinkSettingNotifyMessage {
        const message = { settings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkSettingNotifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkSettingNotifyMessage): LinkSettingNotifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.LinkmicSetting settings */ 2:
                    message.settings.push(LinkmicSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* im.PaiedOrTimeLimitChangeContent paied_or_time_limit_change_content */ 10:
                    message.paiedOrTimeLimitChangeContent = PaiedOrTimeLimitChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.paiedOrTimeLimitChangeContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkSettingNotifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkmicSetting settings = 2; */
        for (let i = 0; i < message.settings.length; i++)
            LinkmicSetting.internalBinaryWrite(message.settings[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.PaiedOrTimeLimitChangeContent paied_or_time_limit_change_content = 10; */
        if (message.paiedOrTimeLimitChangeContent)
            PaiedOrTimeLimitChangeContent.internalBinaryWrite(message.paiedOrTimeLimitChangeContent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkSettingNotifyMessage
 */
export const LinkSettingNotifyMessage = new LinkSettingNotifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaiedOrTimeLimitChangeContent$Type extends MessageType<PaiedOrTimeLimitChangeContent> {
    constructor() {
        super("im.PaiedOrTimeLimitChangeContent", [
            { no: 1, name: "need_leave", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PaiedOrTimeLimitChangeContent>): PaiedOrTimeLimitChangeContent {
        const message = { needLeave: false, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaiedOrTimeLimitChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaiedOrTimeLimitChangeContent): PaiedOrTimeLimitChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool need_leave */ 1:
                    message.needLeave = reader.bool();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaiedOrTimeLimitChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool need_leave = 1; */
        if (message.needLeave !== false)
            writer.tag(1, WireType.Varint).bool(message.needLeave);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PaiedOrTimeLimitChangeContent
 */
export const PaiedOrTimeLimitChangeContent = new PaiedOrTimeLimitChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicSignalingMethod$Type extends MessageType<LinkMicSignalingMethod> {
    constructor() {
        super("im.LinkMicSignalingMethod", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicSignalingMethod>): LinkMicSignalingMethod {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicSignalingMethod>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicSignalingMethod): LinkMicSignalingMethod {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicSignalingMethod, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicSignalingMethod
 */
export const LinkMicSignalingMethod = new LinkMicSignalingMethod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureScoreMessage$Type extends MessageType<LinkMicAdventureScoreMessage> {
    constructor() {
        super("im.LinkMicAdventureScoreMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "pair_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdventurePairInfo }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureScoreMessage>): LinkMicAdventureScoreMessage {
        const message = { pairList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureScoreMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureScoreMessage): LinkMicAdventureScoreMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.AdventurePairInfo pair_list */ 2:
                    message.pairList.push(AdventurePairInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureScoreMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.AdventurePairInfo pair_list = 2; */
        for (let i = 0; i < message.pairList.length; i++)
            AdventurePairInfo.internalBinaryWrite(message.pairList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureScoreMessage
 */
export const LinkMicAdventureScoreMessage = new LinkMicAdventureScoreMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureMessage$Type extends MessageType<LinkMicAdventureMessage> {
    constructor() {
        super("im.LinkMicAdventureMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 100, name: "start_content", kind: "message", T: () => LinkMicAdventureStartContent },
            { no: 101, name: "finish_content", kind: "message", T: () => LinkMicAdventureFinishContent },
            { no: 102, name: "invite_content", kind: "message", T: () => LinkMicAdventureInviteContent },
            { no: 103, name: "reply_content", kind: "message", T: () => LinkMicAdventureReplyContent },
            { no: 105, name: "card_content", kind: "message", T: () => LinkMicAdventureCardContent },
            { no: 106, name: "call_invite_content", kind: "message", T: () => LinkMicAdventureCallInviteContent },
            { no: 107, name: "call_reply_content", kind: "message", T: () => LinkMicAdventureCallReplyContent },
            { no: 108, name: "play_mode_info_change", kind: "message", T: () => LinkMicAdventurePlayModeInfoChangeContent },
            { no: 109, name: "pair_info_change", kind: "message", T: () => LinkMicAdventurePairInfoChangeContent },
            { no: 110, name: "pair_finish_content", kind: "message", T: () => LinkMicAdventurePairFinishContent },
            { no: 111, name: "call_cancel_content", kind: "message", T: () => LinkMicAdventureCallCancelContent }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureMessage>): LinkMicAdventureMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureMessage): LinkMicAdventureMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.LinkMicAdventureStartContent start_content */ 100:
                    message.startContent = LinkMicAdventureStartContent.internalBinaryRead(reader, reader.uint32(), options, message.startContent);
                    break;
                case /* im.LinkMicAdventureFinishContent finish_content */ 101:
                    message.finishContent = LinkMicAdventureFinishContent.internalBinaryRead(reader, reader.uint32(), options, message.finishContent);
                    break;
                case /* im.LinkMicAdventureInviteContent invite_content */ 102:
                    message.inviteContent = LinkMicAdventureInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.inviteContent);
                    break;
                case /* im.LinkMicAdventureReplyContent reply_content */ 103:
                    message.replyContent = LinkMicAdventureReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.replyContent);
                    break;
                case /* im.LinkMicAdventureCardContent card_content */ 105:
                    message.cardContent = LinkMicAdventureCardContent.internalBinaryRead(reader, reader.uint32(), options, message.cardContent);
                    break;
                case /* im.LinkMicAdventureCallInviteContent call_invite_content */ 106:
                    message.callInviteContent = LinkMicAdventureCallInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.callInviteContent);
                    break;
                case /* im.LinkMicAdventureCallReplyContent call_reply_content */ 107:
                    message.callReplyContent = LinkMicAdventureCallReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.callReplyContent);
                    break;
                case /* im.LinkMicAdventurePlayModeInfoChangeContent play_mode_info_change */ 108:
                    message.playModeInfoChange = LinkMicAdventurePlayModeInfoChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.playModeInfoChange);
                    break;
                case /* im.LinkMicAdventurePairInfoChangeContent pair_info_change */ 109:
                    message.pairInfoChange = LinkMicAdventurePairInfoChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.pairInfoChange);
                    break;
                case /* im.LinkMicAdventurePairFinishContent pair_finish_content */ 110:
                    message.pairFinishContent = LinkMicAdventurePairFinishContent.internalBinaryRead(reader, reader.uint32(), options, message.pairFinishContent);
                    break;
                case /* im.LinkMicAdventureCallCancelContent call_cancel_content */ 111:
                    message.callCancelContent = LinkMicAdventureCallCancelContent.internalBinaryRead(reader, reader.uint32(), options, message.callCancelContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.LinkMicAdventureStartContent start_content = 100; */
        if (message.startContent)
            LinkMicAdventureStartContent.internalBinaryWrite(message.startContent, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventureFinishContent finish_content = 101; */
        if (message.finishContent)
            LinkMicAdventureFinishContent.internalBinaryWrite(message.finishContent, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventureInviteContent invite_content = 102; */
        if (message.inviteContent)
            LinkMicAdventureInviteContent.internalBinaryWrite(message.inviteContent, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventureReplyContent reply_content = 103; */
        if (message.replyContent)
            LinkMicAdventureReplyContent.internalBinaryWrite(message.replyContent, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventureCardContent card_content = 105; */
        if (message.cardContent)
            LinkMicAdventureCardContent.internalBinaryWrite(message.cardContent, writer.tag(105, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventureCallInviteContent call_invite_content = 106; */
        if (message.callInviteContent)
            LinkMicAdventureCallInviteContent.internalBinaryWrite(message.callInviteContent, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventureCallReplyContent call_reply_content = 107; */
        if (message.callReplyContent)
            LinkMicAdventureCallReplyContent.internalBinaryWrite(message.callReplyContent, writer.tag(107, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventurePlayModeInfoChangeContent play_mode_info_change = 108; */
        if (message.playModeInfoChange)
            LinkMicAdventurePlayModeInfoChangeContent.internalBinaryWrite(message.playModeInfoChange, writer.tag(108, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventurePairInfoChangeContent pair_info_change = 109; */
        if (message.pairInfoChange)
            LinkMicAdventurePairInfoChangeContent.internalBinaryWrite(message.pairInfoChange, writer.tag(109, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventurePairFinishContent pair_finish_content = 110; */
        if (message.pairFinishContent)
            LinkMicAdventurePairFinishContent.internalBinaryWrite(message.pairFinishContent, writer.tag(110, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkMicAdventureCallCancelContent call_cancel_content = 111; */
        if (message.callCancelContent)
            LinkMicAdventureCallCancelContent.internalBinaryWrite(message.callCancelContent, writer.tag(111, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureMessage
 */
export const LinkMicAdventureMessage = new LinkMicAdventureMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventurePairFinishContent$Type extends MessageType<LinkMicAdventurePairFinishContent> {
    constructor() {
        super("im.LinkMicAdventurePairFinishContent", [
            { no: 1, name: "pair_info", kind: "message", T: () => AdventurePairInfo },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "finish_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventurePairFinishContent>): LinkMicAdventurePairFinishContent {
        const message = { toast: "", finishReason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventurePairFinishContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventurePairFinishContent): LinkMicAdventurePairFinishContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.AdventurePairInfo pair_info */ 1:
                    message.pairInfo = AdventurePairInfo.internalBinaryRead(reader, reader.uint32(), options, message.pairInfo);
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                case /* int32 finish_reason */ 3:
                    message.finishReason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventurePairFinishContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.AdventurePairInfo pair_info = 1; */
        if (message.pairInfo)
            AdventurePairInfo.internalBinaryWrite(message.pairInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        /* int32 finish_reason = 3; */
        if (message.finishReason !== 0)
            writer.tag(3, WireType.Varint).int32(message.finishReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventurePairFinishContent
 */
export const LinkMicAdventurePairFinishContent = new LinkMicAdventurePairFinishContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventurePairInfoChangeContent$Type extends MessageType<LinkMicAdventurePairInfoChangeContent> {
    constructor() {
        super("im.LinkMicAdventurePairInfoChangeContent", [
            { no: 1, name: "pair_info", kind: "message", T: () => AdventurePairInfo }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventurePairInfoChangeContent>): LinkMicAdventurePairInfoChangeContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventurePairInfoChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventurePairInfoChangeContent): LinkMicAdventurePairInfoChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.AdventurePairInfo pair_info */ 1:
                    message.pairInfo = AdventurePairInfo.internalBinaryRead(reader, reader.uint32(), options, message.pairInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventurePairInfoChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.AdventurePairInfo pair_info = 1; */
        if (message.pairInfo)
            AdventurePairInfo.internalBinaryWrite(message.pairInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventurePairInfoChangeContent
 */
export const LinkMicAdventurePairInfoChangeContent = new LinkMicAdventurePairInfoChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventurePlayModeInfoChangeContent$Type extends MessageType<LinkMicAdventurePlayModeInfoChangeContent> {
    constructor() {
        super("im.LinkMicAdventurePlayModeInfoChangeContent", [
            { no: 1, name: "play_mode_info", kind: "message", T: () => AdventurePlayModeInfo }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventurePlayModeInfoChangeContent>): LinkMicAdventurePlayModeInfoChangeContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventurePlayModeInfoChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventurePlayModeInfoChangeContent): LinkMicAdventurePlayModeInfoChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.AdventurePlayModeInfo play_mode_info */ 1:
                    message.playModeInfo = AdventurePlayModeInfo.internalBinaryRead(reader, reader.uint32(), options, message.playModeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventurePlayModeInfoChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.AdventurePlayModeInfo play_mode_info = 1; */
        if (message.playModeInfo)
            AdventurePlayModeInfo.internalBinaryWrite(message.playModeInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventurePlayModeInfoChangeContent
 */
export const LinkMicAdventurePlayModeInfoChangeContent = new LinkMicAdventurePlayModeInfoChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureCallReplyContent$Type extends MessageType<LinkMicAdventureCallReplyContent> {
    constructor() {
        super("im.LinkMicAdventureCallReplyContent", [
            { no: 1, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pair_info", kind: "message", T: () => AdventurePairInfo },
            { no: 4, name: "next_call_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "inviter_rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "inviter_live_core_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureCallReplyContent>): LinkMicAdventureCallReplyContent {
        const message = { toUserId: 0n, status: 0, nextCallTime: 0n, inviterRtcExtInfo: "", inviterLiveCoreInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureCallReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureCallReplyContent): LinkMicAdventureCallReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 to_user_id */ 1:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* data.AdventurePairInfo pair_info */ 3:
                    message.pairInfo = AdventurePairInfo.internalBinaryRead(reader, reader.uint32(), options, message.pairInfo);
                    break;
                case /* int64 next_call_time */ 4:
                    message.nextCallTime = reader.int64().toBigInt();
                    break;
                case /* string inviter_rtc_ext_info */ 5:
                    message.inviterRtcExtInfo = reader.string();
                    break;
                case /* string inviter_live_core_info */ 6:
                    message.inviterLiveCoreInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureCallReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 to_user_id = 1; */
        if (message.toUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.toUserId);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* data.AdventurePairInfo pair_info = 3; */
        if (message.pairInfo)
            AdventurePairInfo.internalBinaryWrite(message.pairInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 next_call_time = 4; */
        if (message.nextCallTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.nextCallTime);
        /* string inviter_rtc_ext_info = 5; */
        if (message.inviterRtcExtInfo !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.inviterRtcExtInfo);
        /* string inviter_live_core_info = 6; */
        if (message.inviterLiveCoreInfo !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.inviterLiveCoreInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureCallReplyContent
 */
export const LinkMicAdventureCallReplyContent = new LinkMicAdventureCallReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureCallInviteContent$Type extends MessageType<LinkMicAdventureCallInviteContent> {
    constructor() {
        super("im.LinkMicAdventureCallInviteContent", [
            { no: 1, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "invite_timeout_duration_s", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "inviter_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureCallInviteContent>): LinkMicAdventureCallInviteContent {
        const message = { toUserId: 0n, inviteTimeoutDurationS: 0n, inviterId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureCallInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureCallInviteContent): LinkMicAdventureCallInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 to_user_id */ 1:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int64 invite_timeout_duration_s */ 2:
                    message.inviteTimeoutDurationS = reader.int64().toBigInt();
                    break;
                case /* int64 inviter_id */ 3:
                    message.inviterId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureCallInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 to_user_id = 1; */
        if (message.toUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.toUserId);
        /* int64 invite_timeout_duration_s = 2; */
        if (message.inviteTimeoutDurationS !== 0n)
            writer.tag(2, WireType.Varint).int64(message.inviteTimeoutDurationS);
        /* int64 inviter_id = 3; */
        if (message.inviterId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.inviterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureCallInviteContent
 */
export const LinkMicAdventureCallInviteContent = new LinkMicAdventureCallInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureCardContent$Type extends MessageType<LinkMicAdventureCardContent> {
    constructor() {
        super("im.LinkMicAdventureCardContent", [
            { no: 1, name: "from_user", kind: "message", T: () => AdventureUserInfo },
            { no: 2, name: "to_user", kind: "message", T: () => AdventureUserInfo },
            { no: 3, name: "card_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdventureCardInfo }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureCardContent>): LinkMicAdventureCardContent {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureCardContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureCardContent): LinkMicAdventureCardContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.AdventureUserInfo from_user */ 1:
                    message.fromUser = AdventureUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.fromUser);
                    break;
                case /* data.AdventureUserInfo to_user */ 2:
                    message.toUser = AdventureUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.toUser);
                    break;
                case /* repeated data.AdventureCardInfo card_list */ 3:
                    message.cardList.push(AdventureCardInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureCardContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.AdventureUserInfo from_user = 1; */
        if (message.fromUser)
            AdventureUserInfo.internalBinaryWrite(message.fromUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.AdventureUserInfo to_user = 2; */
        if (message.toUser)
            AdventureUserInfo.internalBinaryWrite(message.toUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.AdventureCardInfo card_list = 3; */
        for (let i = 0; i < message.cardList.length; i++)
            AdventureCardInfo.internalBinaryWrite(message.cardList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureCardContent
 */
export const LinkMicAdventureCardContent = new LinkMicAdventureCardContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureReplyContent$Type extends MessageType<LinkMicAdventureReplyContent> {
    constructor() {
        super("im.LinkMicAdventureReplyContent", [
            { no: 1, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pair_info", kind: "message", T: () => AdventurePairInfo },
            { no: 4, name: "invite_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureReplyContent>): LinkMicAdventureReplyContent {
        const message = { toUserId: 0n, status: 0, inviteSource: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureReplyContent): LinkMicAdventureReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 to_user_id */ 1:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* data.AdventurePairInfo pair_info */ 3:
                    message.pairInfo = AdventurePairInfo.internalBinaryRead(reader, reader.uint32(), options, message.pairInfo);
                    break;
                case /* string invite_source */ 4:
                    message.inviteSource = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 to_user_id = 1; */
        if (message.toUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.toUserId);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* data.AdventurePairInfo pair_info = 3; */
        if (message.pairInfo)
            AdventurePairInfo.internalBinaryWrite(message.pairInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string invite_source = 4; */
        if (message.inviteSource !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.inviteSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureReplyContent
 */
export const LinkMicAdventureReplyContent = new LinkMicAdventureReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureInviteContent$Type extends MessageType<LinkMicAdventureInviteContent> {
    constructor() {
        super("im.LinkMicAdventureInviteContent", [
            { no: 1, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureInviteContent>): LinkMicAdventureInviteContent {
        const message = { toUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureInviteContent): LinkMicAdventureInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 to_user_id */ 1:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 to_user_id = 1; */
        if (message.toUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.toUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureInviteContent
 */
export const LinkMicAdventureInviteContent = new LinkMicAdventureInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureStartContent$Type extends MessageType<LinkMicAdventureStartContent> {
    constructor() {
        super("im.LinkMicAdventureStartContent", [
            { no: 2, name: "play_mode_info", kind: "message", T: () => AdventurePlayModeInfo }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureStartContent>): LinkMicAdventureStartContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureStartContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureStartContent): LinkMicAdventureStartContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.AdventurePlayModeInfo play_mode_info */ 2:
                    message.playModeInfo = AdventurePlayModeInfo.internalBinaryRead(reader, reader.uint32(), options, message.playModeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureStartContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.AdventurePlayModeInfo play_mode_info = 2; */
        if (message.playModeInfo)
            AdventurePlayModeInfo.internalBinaryWrite(message.playModeInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureStartContent
 */
export const LinkMicAdventureStartContent = new LinkMicAdventureStartContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureFinishContent$Type extends MessageType<LinkMicAdventureFinishContent> {
    constructor() {
        super("im.LinkMicAdventureFinishContent", [
            { no: 1, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pair_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "audience_join", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "play_mode_info", kind: "message", T: () => AdventurePlayModeInfo },
            { no: 5, name: "operator_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureFinishContent>): LinkMicAdventureFinishContent {
        const message = { duration: 0n, pairCount: 0n, audienceJoin: 0n, operatorId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureFinishContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureFinishContent): LinkMicAdventureFinishContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 duration */ 1:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 pair_count */ 2:
                    message.pairCount = reader.int64().toBigInt();
                    break;
                case /* int64 audience_join */ 3:
                    message.audienceJoin = reader.int64().toBigInt();
                    break;
                case /* data.AdventurePlayModeInfo play_mode_info */ 4:
                    message.playModeInfo = AdventurePlayModeInfo.internalBinaryRead(reader, reader.uint32(), options, message.playModeInfo);
                    break;
                case /* int64 operator_id */ 5:
                    message.operatorId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureFinishContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 duration = 1; */
        if (message.duration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.duration);
        /* int64 pair_count = 2; */
        if (message.pairCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pairCount);
        /* int64 audience_join = 3; */
        if (message.audienceJoin !== 0n)
            writer.tag(3, WireType.Varint).int64(message.audienceJoin);
        /* data.AdventurePlayModeInfo play_mode_info = 4; */
        if (message.playModeInfo)
            AdventurePlayModeInfo.internalBinaryWrite(message.playModeInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 operator_id = 5; */
        if (message.operatorId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.operatorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureFinishContent
 */
export const LinkMicAdventureFinishContent = new LinkMicAdventureFinishContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAdventureCallCancelContent$Type extends MessageType<LinkMicAdventureCallCancelContent> {
    constructor() {
        super("im.LinkMicAdventureCallCancelContent", [
            { no: 1, name: "invitee_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pair_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "pair_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAdventureCallCancelContent>): LinkMicAdventureCallCancelContent {
        const message = { inviteeUserId: 0n, pairId: 0n, pairIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAdventureCallCancelContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAdventureCallCancelContent): LinkMicAdventureCallCancelContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 invitee_user_id */ 1:
                    message.inviteeUserId = reader.int64().toBigInt();
                    break;
                case /* int64 pair_id */ 2:
                    message.pairId = reader.int64().toBigInt();
                    break;
                case /* string pair_id_str */ 4:
                    message.pairIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAdventureCallCancelContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 invitee_user_id = 1; */
        if (message.inviteeUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.inviteeUserId);
        /* int64 pair_id = 2; */
        if (message.pairId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pairId);
        /* string pair_id_str = 4; */
        if (message.pairIdStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pairIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAdventureCallCancelContent
 */
export const LinkMicAdventureCallCancelContent = new LinkMicAdventureCallCancelContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAudienceKtvMessage$Type extends MessageType<LinkMicAudienceKtvMessage> {
    constructor() {
        super("im.LinkMicAudienceKtvMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "list_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkMicAudienceKtvMessage_ListInfo },
            { no: 4, name: "want_sing_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "want_sing_song_threshold", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "sung_song_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAudienceKtvMessage>): LinkMicAudienceKtvMessage {
        const message = { messageType: 0n, listInfo: [], wantSingCount: 0n, wantSingSongThreshold: 0n, sungSongCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAudienceKtvMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAudienceKtvMessage): LinkMicAudienceKtvMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 message_type */ 2:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* repeated im.LinkMicAudienceKtvMessage.ListInfo list_info */ 3:
                    message.listInfo.push(LinkMicAudienceKtvMessage_ListInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 want_sing_count */ 4:
                    message.wantSingCount = reader.int64().toBigInt();
                    break;
                case /* int64 want_sing_song_threshold */ 5:
                    message.wantSingSongThreshold = reader.int64().toBigInt();
                    break;
                case /* int64 sung_song_count */ 6:
                    message.sungSongCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAudienceKtvMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_type = 2; */
        if (message.messageType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageType);
        /* repeated im.LinkMicAudienceKtvMessage.ListInfo list_info = 3; */
        for (let i = 0; i < message.listInfo.length; i++)
            LinkMicAudienceKtvMessage_ListInfo.internalBinaryWrite(message.listInfo[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 want_sing_count = 4; */
        if (message.wantSingCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.wantSingCount);
        /* int64 want_sing_song_threshold = 5; */
        if (message.wantSingSongThreshold !== 0n)
            writer.tag(5, WireType.Varint).int64(message.wantSingSongThreshold);
        /* int64 sung_song_count = 6; */
        if (message.sungSongCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.sungSongCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAudienceKtvMessage
 */
export const LinkMicAudienceKtvMessage = new LinkMicAudienceKtvMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkMicAudienceKtvMessage_ListInfo$Type extends MessageType<LinkMicAudienceKtvMessage_ListInfo> {
    constructor() {
        super("im.LinkMicAudienceKtvMessage.ListInfo", [
            { no: 1, name: "music", kind: "message", T: () => KtvSongStruct },
            { no: 2, name: "is_self_seeing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LinkMicAudienceKtvMessage_ListInfo>): LinkMicAudienceKtvMessage_ListInfo {
        const message = { isSelfSeeing: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkMicAudienceKtvMessage_ListInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkMicAudienceKtvMessage_ListInfo): LinkMicAudienceKtvMessage_ListInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.KtvSongStruct music */ 1:
                    message.music = KtvSongStruct.internalBinaryRead(reader, reader.uint32(), options, message.music);
                    break;
                case /* bool is_self_seeing */ 2:
                    message.isSelfSeeing = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkMicAudienceKtvMessage_ListInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.KtvSongStruct music = 1; */
        if (message.music)
            KtvSongStruct.internalBinaryWrite(message.music, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_self_seeing = 2; */
        if (message.isSelfSeeing !== false)
            writer.tag(2, WireType.Varint).bool(message.isSelfSeeing);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkMicAudienceKtvMessage.ListInfo
 */
export const LinkMicAudienceKtvMessage_ListInfo = new LinkMicAudienceKtvMessage_ListInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicChatMatchMessage$Type extends MessageType<LinkmicChatMatchMessage> {
    constructor() {
        super("im.LinkmicChatMatchMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "chat_match_user_join_content", kind: "message", T: () => LinkmicChatMatchUserJoinContent },
            { no: 22, name: "chat_match_user_leave_content", kind: "message", T: () => LinkmicChatMatchUserLeaveContent },
            { no: 23, name: "chat_match_finish_group_content", kind: "message", T: () => LinkmicChatMatchFinishGroupContent },
            { no: 24, name: "chat_match_result_content", kind: "message", T: () => LinkmicChatMatchResultContent },
            { no: 25, name: "chat_match_start_count_down_content", kind: "message", T: () => LinkmicChatMatchStartCountDownContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicChatMatchMessage>): LinkmicChatMatchMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicChatMatchMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicChatMatchMessage): LinkmicChatMatchMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.LinkmicChatMatchUserJoinContent chat_match_user_join_content */ 21:
                    message.chatMatchUserJoinContent = LinkmicChatMatchUserJoinContent.internalBinaryRead(reader, reader.uint32(), options, message.chatMatchUserJoinContent);
                    break;
                case /* im.LinkmicChatMatchUserLeaveContent chat_match_user_leave_content */ 22:
                    message.chatMatchUserLeaveContent = LinkmicChatMatchUserLeaveContent.internalBinaryRead(reader, reader.uint32(), options, message.chatMatchUserLeaveContent);
                    break;
                case /* im.LinkmicChatMatchFinishGroupContent chat_match_finish_group_content */ 23:
                    message.chatMatchFinishGroupContent = LinkmicChatMatchFinishGroupContent.internalBinaryRead(reader, reader.uint32(), options, message.chatMatchFinishGroupContent);
                    break;
                case /* im.LinkmicChatMatchResultContent chat_match_result_content */ 24:
                    message.chatMatchResultContent = LinkmicChatMatchResultContent.internalBinaryRead(reader, reader.uint32(), options, message.chatMatchResultContent);
                    break;
                case /* im.LinkmicChatMatchStartCountDownContent chat_match_start_count_down_content */ 25:
                    message.chatMatchStartCountDownContent = LinkmicChatMatchStartCountDownContent.internalBinaryRead(reader, reader.uint32(), options, message.chatMatchStartCountDownContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicChatMatchMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.LinkmicChatMatchUserJoinContent chat_match_user_join_content = 21; */
        if (message.chatMatchUserJoinContent)
            LinkmicChatMatchUserJoinContent.internalBinaryWrite(message.chatMatchUserJoinContent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicChatMatchUserLeaveContent chat_match_user_leave_content = 22; */
        if (message.chatMatchUserLeaveContent)
            LinkmicChatMatchUserLeaveContent.internalBinaryWrite(message.chatMatchUserLeaveContent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicChatMatchFinishGroupContent chat_match_finish_group_content = 23; */
        if (message.chatMatchFinishGroupContent)
            LinkmicChatMatchFinishGroupContent.internalBinaryWrite(message.chatMatchFinishGroupContent, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicChatMatchResultContent chat_match_result_content = 24; */
        if (message.chatMatchResultContent)
            LinkmicChatMatchResultContent.internalBinaryWrite(message.chatMatchResultContent, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicChatMatchStartCountDownContent chat_match_start_count_down_content = 25; */
        if (message.chatMatchStartCountDownContent)
            LinkmicChatMatchStartCountDownContent.internalBinaryWrite(message.chatMatchStartCountDownContent, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicChatMatchMessage
 */
export const LinkmicChatMatchMessage = new LinkmicChatMatchMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicChatMatchUserJoinContent$Type extends MessageType<LinkmicChatMatchUserJoinContent> {
    constructor() {
        super("im.LinkmicChatMatchUserJoinContent", [
            { no: 1, name: "group_info", kind: "message", T: () => ChatMatchGroupInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicChatMatchUserJoinContent>): LinkmicChatMatchUserJoinContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicChatMatchUserJoinContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicChatMatchUserJoinContent): LinkmicChatMatchUserJoinContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ChatMatchGroupInfo group_info */ 1:
                    message.groupInfo = ChatMatchGroupInfo.internalBinaryRead(reader, reader.uint32(), options, message.groupInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicChatMatchUserJoinContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ChatMatchGroupInfo group_info = 1; */
        if (message.groupInfo)
            ChatMatchGroupInfo.internalBinaryWrite(message.groupInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicChatMatchUserJoinContent
 */
export const LinkmicChatMatchUserJoinContent = new LinkmicChatMatchUserJoinContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicChatMatchUserLeaveContent$Type extends MessageType<LinkmicChatMatchUserLeaveContent> {
    constructor() {
        super("im.LinkmicChatMatchUserLeaveContent", [
            { no: 1, name: "group_info", kind: "message", T: () => ChatMatchGroupInfo },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicChatMatchUserLeaveContent>): LinkmicChatMatchUserLeaveContent {
        const message = { userId: "", deviceId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicChatMatchUserLeaveContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicChatMatchUserLeaveContent): LinkmicChatMatchUserLeaveContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ChatMatchGroupInfo group_info */ 1:
                    message.groupInfo = ChatMatchGroupInfo.internalBinaryRead(reader, reader.uint32(), options, message.groupInfo);
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string device_id */ 3:
                    message.deviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicChatMatchUserLeaveContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ChatMatchGroupInfo group_info = 1; */
        if (message.groupInfo)
            ChatMatchGroupInfo.internalBinaryWrite(message.groupInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string device_id = 3; */
        if (message.deviceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicChatMatchUserLeaveContent
 */
export const LinkmicChatMatchUserLeaveContent = new LinkmicChatMatchUserLeaveContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicChatMatchFinishGroupContent$Type extends MessageType<LinkmicChatMatchFinishGroupContent> {
    constructor() {
        super("im.LinkmicChatMatchFinishGroupContent", [
            { no: 1, name: "join_room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicChatMatchFinishGroupContent>): LinkmicChatMatchFinishGroupContent {
        const message = { joinRoomId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicChatMatchFinishGroupContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicChatMatchFinishGroupContent): LinkmicChatMatchFinishGroupContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string join_room_id */ 1:
                    message.joinRoomId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicChatMatchFinishGroupContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string join_room_id = 1; */
        if (message.joinRoomId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.joinRoomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicChatMatchFinishGroupContent
 */
export const LinkmicChatMatchFinishGroupContent = new LinkmicChatMatchFinishGroupContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicChatMatchResultContent$Type extends MessageType<LinkmicChatMatchResultContent> {
    constructor() {
        super("im.LinkmicChatMatchResultContent", [
            { no: 1, name: "group_info", kind: "message", T: () => ChatMatchGroupInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicChatMatchResultContent>): LinkmicChatMatchResultContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicChatMatchResultContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicChatMatchResultContent): LinkmicChatMatchResultContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ChatMatchGroupInfo group_info */ 1:
                    message.groupInfo = ChatMatchGroupInfo.internalBinaryRead(reader, reader.uint32(), options, message.groupInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicChatMatchResultContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ChatMatchGroupInfo group_info = 1; */
        if (message.groupInfo)
            ChatMatchGroupInfo.internalBinaryWrite(message.groupInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicChatMatchResultContent
 */
export const LinkmicChatMatchResultContent = new LinkmicChatMatchResultContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicChatMatchStartCountDownContent$Type extends MessageType<LinkmicChatMatchStartCountDownContent> {
    constructor() {
        super("im.LinkmicChatMatchStartCountDownContent", [
            { no: 1, name: "disband_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicChatMatchStartCountDownContent>): LinkmicChatMatchStartCountDownContent {
        const message = { disbandTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicChatMatchStartCountDownContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicChatMatchStartCountDownContent): LinkmicChatMatchStartCountDownContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 disband_time */ 1:
                    message.disbandTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicChatMatchStartCountDownContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 disband_time = 1; */
        if (message.disbandTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.disbandTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicChatMatchStartCountDownContent
 */
export const LinkmicChatMatchStartCountDownContent = new LinkmicChatMatchStartCountDownContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicEcologyMessage$Type extends MessageType<LinkmicEcologyMessage> {
    constructor() {
        super("im.LinkmicEcologyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "live_matrix_entrance_change_content", kind: "message", T: () => LiveMatrixEntranceChangeContent },
            { no: 4, name: "web_anti_cheat_content", kind: "message", T: () => LinkmicWebAntiCheatContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicEcologyMessage>): LinkmicEcologyMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicEcologyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicEcologyMessage): LinkmicEcologyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.LiveMatrixEntranceChangeContent live_matrix_entrance_change_content */ 3:
                    message.liveMatrixEntranceChangeContent = LiveMatrixEntranceChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.liveMatrixEntranceChangeContent);
                    break;
                case /* im.LinkmicWebAntiCheatContent web_anti_cheat_content */ 4:
                    message.webAntiCheatContent = LinkmicWebAntiCheatContent.internalBinaryRead(reader, reader.uint32(), options, message.webAntiCheatContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicEcologyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.LiveMatrixEntranceChangeContent live_matrix_entrance_change_content = 3; */
        if (message.liveMatrixEntranceChangeContent)
            LiveMatrixEntranceChangeContent.internalBinaryWrite(message.liveMatrixEntranceChangeContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicWebAntiCheatContent web_anti_cheat_content = 4; */
        if (message.webAntiCheatContent)
            LinkmicWebAntiCheatContent.internalBinaryWrite(message.webAntiCheatContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicEcologyMessage
 */
export const LinkmicEcologyMessage = new LinkmicEcologyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveMatrixEntranceChangeContent$Type extends MessageType<LiveMatrixEntranceChangeContent> {
    constructor() {
        super("im.LiveMatrixEntranceChangeContent", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "matrix_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LiveMatrixEntranceChangeContent>): LiveMatrixEntranceChangeContent {
        const message = { roomId: 0n, matrixId: 0n, name: "", show: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveMatrixEntranceChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveMatrixEntranceChangeContent): LiveMatrixEntranceChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 matrix_id */ 2:
                    message.matrixId = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* bool show */ 4:
                    message.show = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveMatrixEntranceChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        /* int64 matrix_id = 2; */
        if (message.matrixId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.matrixId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* bool show = 4; */
        if (message.show !== false)
            writer.tag(4, WireType.Varint).bool(message.show);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LiveMatrixEntranceChangeContent
 */
export const LiveMatrixEntranceChangeContent = new LiveMatrixEntranceChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicWebAntiCheatContent$Type extends MessageType<LinkmicWebAntiCheatContent> {
    constructor() {
        super("im.LinkmicWebAntiCheatContent", [
            { no: 1, name: "auth_ticket", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entry_web_page_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "popup_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "web_page_display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "face_verify_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "authorization", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "request_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicWebAntiCheatContent>): LinkmicWebAntiCheatContent {
        const message = { authTicket: "", entryWebPageAddress: "", popupText: "", webPageDisplayDuration: 0n, faceVerifyType: 0, authorization: false, requestSource: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicWebAntiCheatContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicWebAntiCheatContent): LinkmicWebAntiCheatContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string auth_ticket */ 1:
                    message.authTicket = reader.string();
                    break;
                case /* string entry_web_page_address */ 2:
                    message.entryWebPageAddress = reader.string();
                    break;
                case /* string popup_text */ 3:
                    message.popupText = reader.string();
                    break;
                case /* int64 web_page_display_duration */ 4:
                    message.webPageDisplayDuration = reader.int64().toBigInt();
                    break;
                case /* int32 face_verify_type */ 5:
                    message.faceVerifyType = reader.int32();
                    break;
                case /* bool authorization */ 6:
                    message.authorization = reader.bool();
                    break;
                case /* string request_source */ 7:
                    message.requestSource = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicWebAntiCheatContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string auth_ticket = 1; */
        if (message.authTicket !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.authTicket);
        /* string entry_web_page_address = 2; */
        if (message.entryWebPageAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.entryWebPageAddress);
        /* string popup_text = 3; */
        if (message.popupText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.popupText);
        /* int64 web_page_display_duration = 4; */
        if (message.webPageDisplayDuration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.webPageDisplayDuration);
        /* int32 face_verify_type = 5; */
        if (message.faceVerifyType !== 0)
            writer.tag(5, WireType.Varint).int32(message.faceVerifyType);
        /* bool authorization = 6; */
        if (message.authorization !== false)
            writer.tag(6, WireType.Varint).bool(message.authorization);
        /* string request_source = 7; */
        if (message.requestSource !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.requestSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicWebAntiCheatContent
 */
export const LinkmicWebAntiCheatContent = new LinkmicWebAntiCheatContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicEnlargeGuestMessage$Type extends MessageType<LinkmicEnlargeGuestMessage> {
    constructor() {
        super("im.LinkmicEnlargeGuestMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "play_modes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "turn_on_content", kind: "message", T: () => LinkmicEnlargeGuestTurnOnContent },
            { no: 22, name: "turn_off_content", kind: "message", T: () => LinkmicEnlargeGuestTurnOffContent },
            { no: 23, name: "change_user_content", kind: "message", T: () => LinkmicEnlargeGuestChangeUserContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicEnlargeGuestMessage>): LinkmicEnlargeGuestMessage {
        const message = { msgType: 0, playModes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicEnlargeGuestMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicEnlargeGuestMessage): LinkmicEnlargeGuestMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* repeated int32 play_modes */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playModes.push(reader.int32());
                    else
                        message.playModes.push(reader.int32());
                    break;
                case /* im.LinkmicEnlargeGuestTurnOnContent turn_on_content */ 21:
                    message.turnOnContent = LinkmicEnlargeGuestTurnOnContent.internalBinaryRead(reader, reader.uint32(), options, message.turnOnContent);
                    break;
                case /* im.LinkmicEnlargeGuestTurnOffContent turn_off_content */ 22:
                    message.turnOffContent = LinkmicEnlargeGuestTurnOffContent.internalBinaryRead(reader, reader.uint32(), options, message.turnOffContent);
                    break;
                case /* im.LinkmicEnlargeGuestChangeUserContent change_user_content */ 23:
                    message.changeUserContent = LinkmicEnlargeGuestChangeUserContent.internalBinaryRead(reader, reader.uint32(), options, message.changeUserContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicEnlargeGuestMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* repeated int32 play_modes = 3; */
        if (message.playModes.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playModes.length; i++)
                writer.int32(message.playModes[i]);
            writer.join();
        }
        /* im.LinkmicEnlargeGuestTurnOnContent turn_on_content = 21; */
        if (message.turnOnContent)
            LinkmicEnlargeGuestTurnOnContent.internalBinaryWrite(message.turnOnContent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicEnlargeGuestTurnOffContent turn_off_content = 22; */
        if (message.turnOffContent)
            LinkmicEnlargeGuestTurnOffContent.internalBinaryWrite(message.turnOffContent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicEnlargeGuestChangeUserContent change_user_content = 23; */
        if (message.changeUserContent)
            LinkmicEnlargeGuestChangeUserContent.internalBinaryWrite(message.changeUserContent, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicEnlargeGuestMessage
 */
export const LinkmicEnlargeGuestMessage = new LinkmicEnlargeGuestMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicEnlargeGuestTurnOnContent$Type extends MessageType<LinkmicEnlargeGuestTurnOnContent> {
    constructor() {
        super("im.LinkmicEnlargeGuestTurnOnContent", [
            { no: 1, name: "enlarged_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicEnlargeGuestTurnOnContent>): LinkmicEnlargeGuestTurnOnContent {
        const message = { enlargedUserId: 0n, source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicEnlargeGuestTurnOnContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicEnlargeGuestTurnOnContent): LinkmicEnlargeGuestTurnOnContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 enlarged_user_id */ 1:
                    message.enlargedUserId = reader.int64().toBigInt();
                    break;
                case /* int32 source */ 2:
                    message.source = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicEnlargeGuestTurnOnContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 enlarged_user_id = 1; */
        if (message.enlargedUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.enlargedUserId);
        /* int32 source = 2; */
        if (message.source !== 0)
            writer.tag(2, WireType.Varint).int32(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicEnlargeGuestTurnOnContent
 */
export const LinkmicEnlargeGuestTurnOnContent = new LinkmicEnlargeGuestTurnOnContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicEnlargeGuestTurnOffContent$Type extends MessageType<LinkmicEnlargeGuestTurnOffContent> {
    constructor() {
        super("im.LinkmicEnlargeGuestTurnOffContent", [
            { no: 1, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicEnlargeGuestTurnOffContent>): LinkmicEnlargeGuestTurnOffContent {
        const message = { source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicEnlargeGuestTurnOffContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicEnlargeGuestTurnOffContent): LinkmicEnlargeGuestTurnOffContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 source */ 1:
                    message.source = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicEnlargeGuestTurnOffContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 source = 1; */
        if (message.source !== 0)
            writer.tag(1, WireType.Varint).int32(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicEnlargeGuestTurnOffContent
 */
export const LinkmicEnlargeGuestTurnOffContent = new LinkmicEnlargeGuestTurnOffContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicEnlargeGuestChangeUserContent$Type extends MessageType<LinkmicEnlargeGuestChangeUserContent> {
    constructor() {
        super("im.LinkmicEnlargeGuestChangeUserContent", [
            { no: 1, name: "enlarged_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicEnlargeGuestChangeUserContent>): LinkmicEnlargeGuestChangeUserContent {
        const message = { enlargedUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicEnlargeGuestChangeUserContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicEnlargeGuestChangeUserContent): LinkmicEnlargeGuestChangeUserContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 enlarged_user_id */ 1:
                    message.enlargedUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicEnlargeGuestChangeUserContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 enlarged_user_id = 1; */
        if (message.enlargedUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.enlargedUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicEnlargeGuestChangeUserContent
 */
export const LinkmicEnlargeGuestChangeUserContent = new LinkmicEnlargeGuestChangeUserContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitMessage$Type extends MessageType<LinkmicProfitMessage> {
    constructor() {
        super("im.LinkmicProfitMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "bid_paid_linkmic_bid_content", kind: "message", T: () => LinkmicProfitBidPaidLinkmicBidContent },
            { no: 22, name: "bid_paid_linkmic_deal_content", kind: "message", T: () => LinkmicProfitBidPaidLinkmicDealContent },
            { no: 23, name: "bid_paid_linkmic_abort_content", kind: "message", T: () => LinkmicProfitBidPaidLinkmicAbortContent },
            { no: 24, name: "bid_paid_linkmic_start_content", kind: "message", T: () => LinkmicProfitBidPaidLinkmicStartContent },
            { no: 25, name: "bid_paid_linkmic_terminate_content", kind: "message", T: () => LinkmicProfitBidPaidLinkmicTerminateContent },
            { no: 26, name: "normal_paid_linkmic_open_content", kind: "message", T: () => LinkmicProfitNormalPaidLinkmicOpenContent },
            { no: 27, name: "normal_paid_linkmic_close_content", kind: "message", T: () => LinkmicProfitNormalPaidLinkmicCloseContent },
            { no: 28, name: "normal_paid_linkmic_config_update_content", kind: "message", T: () => LinkmicProfitNormalPaidLinkmicConfigUpdateContent },
            { no: 29, name: "bid_paid_linkmic_turn_on_content", kind: "message", T: () => LinkmicProfitBidPaidLinkmicTurnOnContent },
            { no: 30, name: "bid_paid_linkmic_turn_off_content", kind: "message", T: () => LinkmicProfitBidPaidLinkmicTurnOffContent },
            { no: 31, name: "room_battle_invite_content", kind: "message", T: () => LinkmicRoomBattleInviteContent },
            { no: 32, name: "room_battle_reply_content", kind: "message", T: () => LinkmicRoomBattleReplyContent },
            { no: 33, name: "normal_paid_linkmic_add_price_content", kind: "message", T: () => LinkmicProfitNormalPaidLinkmicAddPriceContent },
            { no: 34, name: "interactive_screen_cast_open_content", kind: "message", T: () => LinkmicProfitInteractiveScreenCastOpenContent },
            { no: 35, name: "interactive_screen_cast_close_content", kind: "message", T: () => LinkmicProfitInteractiveScreenCastCloseContent },
            { no: 36, name: "room_battle_match_success_content", kind: "message", T: () => LinkmicRoomBattleMatchSuccessContent },
            { no: 37, name: "gift_recipient_content", kind: "message", T: () => LinkmicGiftRecipientContent },
            { no: 38, name: "audio_subtitle_check_in_content", kind: "message", T: () => LinkmicProfitAudioSubtitleCheckInContent },
            { no: 39, name: "audio_subtitle_start_content", kind: "message", T: () => LinkmicProfitAudioSubtitleStartContent },
            { no: 40, name: "audio_subtitle_close_content", kind: "message", T: () => LinkmicProfitAudioSubtitleCloseContent },
            { no: 41, name: "game_barrage_start_conetent", kind: "message", T: () => LinkmicGameBarrageStartContent },
            { no: 42, name: "game_barrage_stop_conetent", kind: "message", T: () => LinkmicGameBarrageStopContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitMessage>): LinkmicProfitMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitMessage): LinkmicProfitMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.LinkmicProfitBidPaidLinkmicBidContent bid_paid_linkmic_bid_content */ 21:
                    message.bidPaidLinkmicBidContent = LinkmicProfitBidPaidLinkmicBidContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicBidContent);
                    break;
                case /* im.LinkmicProfitBidPaidLinkmicDealContent bid_paid_linkmic_deal_content */ 22:
                    message.bidPaidLinkmicDealContent = LinkmicProfitBidPaidLinkmicDealContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicDealContent);
                    break;
                case /* im.LinkmicProfitBidPaidLinkmicAbortContent bid_paid_linkmic_abort_content */ 23:
                    message.bidPaidLinkmicAbortContent = LinkmicProfitBidPaidLinkmicAbortContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicAbortContent);
                    break;
                case /* im.LinkmicProfitBidPaidLinkmicStartContent bid_paid_linkmic_start_content */ 24:
                    message.bidPaidLinkmicStartContent = LinkmicProfitBidPaidLinkmicStartContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicStartContent);
                    break;
                case /* im.LinkmicProfitBidPaidLinkmicTerminateContent bid_paid_linkmic_terminate_content */ 25:
                    message.bidPaidLinkmicTerminateContent = LinkmicProfitBidPaidLinkmicTerminateContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicTerminateContent);
                    break;
                case /* im.LinkmicProfitNormalPaidLinkmicOpenContent normal_paid_linkmic_open_content */ 26:
                    message.normalPaidLinkmicOpenContent = LinkmicProfitNormalPaidLinkmicOpenContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicOpenContent);
                    break;
                case /* im.LinkmicProfitNormalPaidLinkmicCloseContent normal_paid_linkmic_close_content */ 27:
                    message.normalPaidLinkmicCloseContent = LinkmicProfitNormalPaidLinkmicCloseContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicCloseContent);
                    break;
                case /* im.LinkmicProfitNormalPaidLinkmicConfigUpdateContent normal_paid_linkmic_config_update_content */ 28:
                    message.normalPaidLinkmicConfigUpdateContent = LinkmicProfitNormalPaidLinkmicConfigUpdateContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicConfigUpdateContent);
                    break;
                case /* im.LinkmicProfitBidPaidLinkmicTurnOnContent bid_paid_linkmic_turn_on_content */ 29:
                    message.bidPaidLinkmicTurnOnContent = LinkmicProfitBidPaidLinkmicTurnOnContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicTurnOnContent);
                    break;
                case /* im.LinkmicProfitBidPaidLinkmicTurnOffContent bid_paid_linkmic_turn_off_content */ 30:
                    message.bidPaidLinkmicTurnOffContent = LinkmicProfitBidPaidLinkmicTurnOffContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicTurnOffContent);
                    break;
                case /* im.LinkmicRoomBattleInviteContent room_battle_invite_content */ 31:
                    message.roomBattleInviteContent = LinkmicRoomBattleInviteContent.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleInviteContent);
                    break;
                case /* im.LinkmicRoomBattleReplyContent room_battle_reply_content */ 32:
                    message.roomBattleReplyContent = LinkmicRoomBattleReplyContent.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleReplyContent);
                    break;
                case /* im.LinkmicProfitNormalPaidLinkmicAddPriceContent normal_paid_linkmic_add_price_content */ 33:
                    message.normalPaidLinkmicAddPriceContent = LinkmicProfitNormalPaidLinkmicAddPriceContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicAddPriceContent);
                    break;
                case /* im.LinkmicProfitInteractiveScreenCastOpenContent interactive_screen_cast_open_content */ 34:
                    message.interactiveScreenCastOpenContent = LinkmicProfitInteractiveScreenCastOpenContent.internalBinaryRead(reader, reader.uint32(), options, message.interactiveScreenCastOpenContent);
                    break;
                case /* im.LinkmicProfitInteractiveScreenCastCloseContent interactive_screen_cast_close_content */ 35:
                    message.interactiveScreenCastCloseContent = LinkmicProfitInteractiveScreenCastCloseContent.internalBinaryRead(reader, reader.uint32(), options, message.interactiveScreenCastCloseContent);
                    break;
                case /* im.LinkmicRoomBattleMatchSuccessContent room_battle_match_success_content */ 36:
                    message.roomBattleMatchSuccessContent = LinkmicRoomBattleMatchSuccessContent.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleMatchSuccessContent);
                    break;
                case /* im.LinkmicGiftRecipientContent gift_recipient_content */ 37:
                    message.giftRecipientContent = LinkmicGiftRecipientContent.internalBinaryRead(reader, reader.uint32(), options, message.giftRecipientContent);
                    break;
                case /* im.LinkmicProfitAudioSubtitleCheckInContent audio_subtitle_check_in_content */ 38:
                    message.audioSubtitleCheckInContent = LinkmicProfitAudioSubtitleCheckInContent.internalBinaryRead(reader, reader.uint32(), options, message.audioSubtitleCheckInContent);
                    break;
                case /* im.LinkmicProfitAudioSubtitleStartContent audio_subtitle_start_content */ 39:
                    message.audioSubtitleStartContent = LinkmicProfitAudioSubtitleStartContent.internalBinaryRead(reader, reader.uint32(), options, message.audioSubtitleStartContent);
                    break;
                case /* im.LinkmicProfitAudioSubtitleCloseContent audio_subtitle_close_content */ 40:
                    message.audioSubtitleCloseContent = LinkmicProfitAudioSubtitleCloseContent.internalBinaryRead(reader, reader.uint32(), options, message.audioSubtitleCloseContent);
                    break;
                case /* im.LinkmicGameBarrageStartContent game_barrage_start_conetent */ 41:
                    message.gameBarrageStartConetent = LinkmicGameBarrageStartContent.internalBinaryRead(reader, reader.uint32(), options, message.gameBarrageStartConetent);
                    break;
                case /* im.LinkmicGameBarrageStopContent game_barrage_stop_conetent */ 42:
                    message.gameBarrageStopConetent = LinkmicGameBarrageStopContent.internalBinaryRead(reader, reader.uint32(), options, message.gameBarrageStopConetent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.LinkmicProfitBidPaidLinkmicBidContent bid_paid_linkmic_bid_content = 21; */
        if (message.bidPaidLinkmicBidContent)
            LinkmicProfitBidPaidLinkmicBidContent.internalBinaryWrite(message.bidPaidLinkmicBidContent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitBidPaidLinkmicDealContent bid_paid_linkmic_deal_content = 22; */
        if (message.bidPaidLinkmicDealContent)
            LinkmicProfitBidPaidLinkmicDealContent.internalBinaryWrite(message.bidPaidLinkmicDealContent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitBidPaidLinkmicAbortContent bid_paid_linkmic_abort_content = 23; */
        if (message.bidPaidLinkmicAbortContent)
            LinkmicProfitBidPaidLinkmicAbortContent.internalBinaryWrite(message.bidPaidLinkmicAbortContent, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitBidPaidLinkmicStartContent bid_paid_linkmic_start_content = 24; */
        if (message.bidPaidLinkmicStartContent)
            LinkmicProfitBidPaidLinkmicStartContent.internalBinaryWrite(message.bidPaidLinkmicStartContent, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitBidPaidLinkmicTerminateContent bid_paid_linkmic_terminate_content = 25; */
        if (message.bidPaidLinkmicTerminateContent)
            LinkmicProfitBidPaidLinkmicTerminateContent.internalBinaryWrite(message.bidPaidLinkmicTerminateContent, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitNormalPaidLinkmicOpenContent normal_paid_linkmic_open_content = 26; */
        if (message.normalPaidLinkmicOpenContent)
            LinkmicProfitNormalPaidLinkmicOpenContent.internalBinaryWrite(message.normalPaidLinkmicOpenContent, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitNormalPaidLinkmicCloseContent normal_paid_linkmic_close_content = 27; */
        if (message.normalPaidLinkmicCloseContent)
            LinkmicProfitNormalPaidLinkmicCloseContent.internalBinaryWrite(message.normalPaidLinkmicCloseContent, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitNormalPaidLinkmicConfigUpdateContent normal_paid_linkmic_config_update_content = 28; */
        if (message.normalPaidLinkmicConfigUpdateContent)
            LinkmicProfitNormalPaidLinkmicConfigUpdateContent.internalBinaryWrite(message.normalPaidLinkmicConfigUpdateContent, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitBidPaidLinkmicTurnOnContent bid_paid_linkmic_turn_on_content = 29; */
        if (message.bidPaidLinkmicTurnOnContent)
            LinkmicProfitBidPaidLinkmicTurnOnContent.internalBinaryWrite(message.bidPaidLinkmicTurnOnContent, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitBidPaidLinkmicTurnOffContent bid_paid_linkmic_turn_off_content = 30; */
        if (message.bidPaidLinkmicTurnOffContent)
            LinkmicProfitBidPaidLinkmicTurnOffContent.internalBinaryWrite(message.bidPaidLinkmicTurnOffContent, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicRoomBattleInviteContent room_battle_invite_content = 31; */
        if (message.roomBattleInviteContent)
            LinkmicRoomBattleInviteContent.internalBinaryWrite(message.roomBattleInviteContent, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicRoomBattleReplyContent room_battle_reply_content = 32; */
        if (message.roomBattleReplyContent)
            LinkmicRoomBattleReplyContent.internalBinaryWrite(message.roomBattleReplyContent, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitNormalPaidLinkmicAddPriceContent normal_paid_linkmic_add_price_content = 33; */
        if (message.normalPaidLinkmicAddPriceContent)
            LinkmicProfitNormalPaidLinkmicAddPriceContent.internalBinaryWrite(message.normalPaidLinkmicAddPriceContent, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitInteractiveScreenCastOpenContent interactive_screen_cast_open_content = 34; */
        if (message.interactiveScreenCastOpenContent)
            LinkmicProfitInteractiveScreenCastOpenContent.internalBinaryWrite(message.interactiveScreenCastOpenContent, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitInteractiveScreenCastCloseContent interactive_screen_cast_close_content = 35; */
        if (message.interactiveScreenCastCloseContent)
            LinkmicProfitInteractiveScreenCastCloseContent.internalBinaryWrite(message.interactiveScreenCastCloseContent, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicRoomBattleMatchSuccessContent room_battle_match_success_content = 36; */
        if (message.roomBattleMatchSuccessContent)
            LinkmicRoomBattleMatchSuccessContent.internalBinaryWrite(message.roomBattleMatchSuccessContent, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicGiftRecipientContent gift_recipient_content = 37; */
        if (message.giftRecipientContent)
            LinkmicGiftRecipientContent.internalBinaryWrite(message.giftRecipientContent, writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitAudioSubtitleCheckInContent audio_subtitle_check_in_content = 38; */
        if (message.audioSubtitleCheckInContent)
            LinkmicProfitAudioSubtitleCheckInContent.internalBinaryWrite(message.audioSubtitleCheckInContent, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitAudioSubtitleStartContent audio_subtitle_start_content = 39; */
        if (message.audioSubtitleStartContent)
            LinkmicProfitAudioSubtitleStartContent.internalBinaryWrite(message.audioSubtitleStartContent, writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicProfitAudioSubtitleCloseContent audio_subtitle_close_content = 40; */
        if (message.audioSubtitleCloseContent)
            LinkmicProfitAudioSubtitleCloseContent.internalBinaryWrite(message.audioSubtitleCloseContent, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicGameBarrageStartContent game_barrage_start_conetent = 41; */
        if (message.gameBarrageStartConetent)
            LinkmicGameBarrageStartContent.internalBinaryWrite(message.gameBarrageStartConetent, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicGameBarrageStopContent game_barrage_stop_conetent = 42; */
        if (message.gameBarrageStopConetent)
            LinkmicGameBarrageStopContent.internalBinaryWrite(message.gameBarrageStopConetent, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitMessage
 */
export const LinkmicProfitMessage = new LinkmicProfitMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitBidPaidLinkmicBidContent$Type extends MessageType<LinkmicProfitBidPaidLinkmicBidContent> {
    constructor() {
        super("im.LinkmicProfitBidPaidLinkmicBidContent", [
            { no: 1, name: "bid_info", kind: "message", T: () => BidPaidLinkmicBidInfo },
            { no: 2, name: "bid_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BidPaidLinkmicBidRecord },
            { no: 3, name: "has_more", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitBidPaidLinkmicBidContent>): LinkmicProfitBidPaidLinkmicBidContent {
        const message = { bidRecords: [], hasMore: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitBidPaidLinkmicBidContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitBidPaidLinkmicBidContent): LinkmicProfitBidPaidLinkmicBidContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.BidPaidLinkmicBidInfo bid_info */ 1:
                    message.bidInfo = BidPaidLinkmicBidInfo.internalBinaryRead(reader, reader.uint32(), options, message.bidInfo);
                    break;
                case /* repeated data.BidPaidLinkmicBidRecord bid_records */ 2:
                    message.bidRecords.push(BidPaidLinkmicBidRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool has_more */ 3:
                    message.hasMore = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitBidPaidLinkmicBidContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.BidPaidLinkmicBidInfo bid_info = 1; */
        if (message.bidInfo)
            BidPaidLinkmicBidInfo.internalBinaryWrite(message.bidInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.BidPaidLinkmicBidRecord bid_records = 2; */
        for (let i = 0; i < message.bidRecords.length; i++)
            BidPaidLinkmicBidRecord.internalBinaryWrite(message.bidRecords[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool has_more = 3; */
        if (message.hasMore !== false)
            writer.tag(3, WireType.Varint).bool(message.hasMore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitBidPaidLinkmicBidContent
 */
export const LinkmicProfitBidPaidLinkmicBidContent = new LinkmicProfitBidPaidLinkmicBidContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitBidPaidLinkmicDealContent$Type extends MessageType<LinkmicProfitBidPaidLinkmicDealContent> {
    constructor() {
        super("im.LinkmicProfitBidPaidLinkmicDealContent", [
            { no: 1, name: "deal_info", kind: "message", T: () => BidPaidLinkmicDealInfo },
            { no: 2, name: "positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitBidPaidLinkmicDealContent>): LinkmicProfitBidPaidLinkmicDealContent {
        const message = { positions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitBidPaidLinkmicDealContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitBidPaidLinkmicDealContent): LinkmicProfitBidPaidLinkmicDealContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.BidPaidLinkmicDealInfo deal_info */ 1:
                    message.dealInfo = BidPaidLinkmicDealInfo.internalBinaryRead(reader, reader.uint32(), options, message.dealInfo);
                    break;
                case /* repeated data.LinkmicPositionItem positions */ 2:
                    message.positions.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitBidPaidLinkmicDealContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.BidPaidLinkmicDealInfo deal_info = 1; */
        if (message.dealInfo)
            BidPaidLinkmicDealInfo.internalBinaryWrite(message.dealInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkmicPositionItem positions = 2; */
        for (let i = 0; i < message.positions.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.positions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitBidPaidLinkmicDealContent
 */
export const LinkmicProfitBidPaidLinkmicDealContent = new LinkmicProfitBidPaidLinkmicDealContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitBidPaidLinkmicStartContent$Type extends MessageType<LinkmicProfitBidPaidLinkmicStartContent> {
    constructor() {
        super("im.LinkmicProfitBidPaidLinkmicStartContent", [
            { no: 1, name: "start_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem },
            { no: 3, name: "waiting_user_need_leave", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "waiting_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitBidPaidLinkmicStartContent>): LinkmicProfitBidPaidLinkmicStartContent {
        const message = { startToast: "", positions: [], waitingUserNeedLeave: false, waitingUserToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitBidPaidLinkmicStartContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitBidPaidLinkmicStartContent): LinkmicProfitBidPaidLinkmicStartContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start_toast */ 1:
                    message.startToast = reader.string();
                    break;
                case /* repeated data.LinkmicPositionItem positions */ 2:
                    message.positions.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool waiting_user_need_leave */ 3:
                    message.waitingUserNeedLeave = reader.bool();
                    break;
                case /* string waiting_user_toast */ 4:
                    message.waitingUserToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitBidPaidLinkmicStartContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start_toast = 1; */
        if (message.startToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.startToast);
        /* repeated data.LinkmicPositionItem positions = 2; */
        for (let i = 0; i < message.positions.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.positions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool waiting_user_need_leave = 3; */
        if (message.waitingUserNeedLeave !== false)
            writer.tag(3, WireType.Varint).bool(message.waitingUserNeedLeave);
        /* string waiting_user_toast = 4; */
        if (message.waitingUserToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.waitingUserToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitBidPaidLinkmicStartContent
 */
export const LinkmicProfitBidPaidLinkmicStartContent = new LinkmicProfitBidPaidLinkmicStartContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitBidPaidLinkmicAbortContent$Type extends MessageType<LinkmicProfitBidPaidLinkmicAbortContent> {
    constructor() {
        super("im.LinkmicProfitBidPaidLinkmicAbortContent", [
            { no: 1, name: "win_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "anchor_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "win_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "other_bid_users_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitBidPaidLinkmicAbortContent>): LinkmicProfitBidPaidLinkmicAbortContent {
        const message = { winUserId: 0n, anchorToast: "", winUserToast: "", otherBidUsersToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitBidPaidLinkmicAbortContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitBidPaidLinkmicAbortContent): LinkmicProfitBidPaidLinkmicAbortContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 win_user_id */ 1:
                    message.winUserId = reader.int64().toBigInt();
                    break;
                case /* string anchor_toast */ 2:
                    message.anchorToast = reader.string();
                    break;
                case /* string win_user_toast */ 3:
                    message.winUserToast = reader.string();
                    break;
                case /* string other_bid_users_toast */ 4:
                    message.otherBidUsersToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitBidPaidLinkmicAbortContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 win_user_id = 1; */
        if (message.winUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.winUserId);
        /* string anchor_toast = 2; */
        if (message.anchorToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.anchorToast);
        /* string win_user_toast = 3; */
        if (message.winUserToast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.winUserToast);
        /* string other_bid_users_toast = 4; */
        if (message.otherBidUsersToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.otherBidUsersToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitBidPaidLinkmicAbortContent
 */
export const LinkmicProfitBidPaidLinkmicAbortContent = new LinkmicProfitBidPaidLinkmicAbortContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitBidPaidLinkmicTerminateContent$Type extends MessageType<LinkmicProfitBidPaidLinkmicTerminateContent> {
    constructor() {
        super("im.LinkmicProfitBidPaidLinkmicTerminateContent", [
            { no: 1, name: "bid_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "other_bid_users_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitBidPaidLinkmicTerminateContent>): LinkmicProfitBidPaidLinkmicTerminateContent {
        const message = { bidUserToast: "", otherBidUsersToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitBidPaidLinkmicTerminateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitBidPaidLinkmicTerminateContent): LinkmicProfitBidPaidLinkmicTerminateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bid_user_toast */ 1:
                    message.bidUserToast = reader.string();
                    break;
                case /* string other_bid_users_toast */ 2:
                    message.otherBidUsersToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitBidPaidLinkmicTerminateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bid_user_toast = 1; */
        if (message.bidUserToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bidUserToast);
        /* string other_bid_users_toast = 2; */
        if (message.otherBidUsersToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otherBidUsersToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitBidPaidLinkmicTerminateContent
 */
export const LinkmicProfitBidPaidLinkmicTerminateContent = new LinkmicProfitBidPaidLinkmicTerminateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitNormalPaidLinkmicOpenContent$Type extends MessageType<LinkmicProfitNormalPaidLinkmicOpenContent> {
    constructor() {
        super("im.LinkmicProfitNormalPaidLinkmicOpenContent", [
            { no: 1, name: "normal_paid_linkmic_info", kind: "message", T: () => NormalPaidLinkmicInfo },
            { no: 2, name: "waiting_user_need_leave", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "waiting_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitNormalPaidLinkmicOpenContent>): LinkmicProfitNormalPaidLinkmicOpenContent {
        const message = { waitingUserNeedLeave: false, waitingUserToast: "", source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitNormalPaidLinkmicOpenContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitNormalPaidLinkmicOpenContent): LinkmicProfitNormalPaidLinkmicOpenContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.NormalPaidLinkmicInfo normal_paid_linkmic_info */ 1:
                    message.normalPaidLinkmicInfo = NormalPaidLinkmicInfo.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicInfo);
                    break;
                case /* bool waiting_user_need_leave */ 2:
                    message.waitingUserNeedLeave = reader.bool();
                    break;
                case /* string waiting_user_toast */ 3:
                    message.waitingUserToast = reader.string();
                    break;
                case /* int32 source */ 4:
                    message.source = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitNormalPaidLinkmicOpenContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.NormalPaidLinkmicInfo normal_paid_linkmic_info = 1; */
        if (message.normalPaidLinkmicInfo)
            NormalPaidLinkmicInfo.internalBinaryWrite(message.normalPaidLinkmicInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool waiting_user_need_leave = 2; */
        if (message.waitingUserNeedLeave !== false)
            writer.tag(2, WireType.Varint).bool(message.waitingUserNeedLeave);
        /* string waiting_user_toast = 3; */
        if (message.waitingUserToast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.waitingUserToast);
        /* int32 source = 4; */
        if (message.source !== 0)
            writer.tag(4, WireType.Varint).int32(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitNormalPaidLinkmicOpenContent
 */
export const LinkmicProfitNormalPaidLinkmicOpenContent = new LinkmicProfitNormalPaidLinkmicOpenContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitNormalPaidLinkmicCloseContent$Type extends MessageType<LinkmicProfitNormalPaidLinkmicCloseContent> {
    constructor() {
        super("im.LinkmicProfitNormalPaidLinkmicCloseContent", [
            { no: 1, name: "waiting_user_need_leave", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "waiting_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitNormalPaidLinkmicCloseContent>): LinkmicProfitNormalPaidLinkmicCloseContent {
        const message = { waitingUserNeedLeave: false, waitingUserToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitNormalPaidLinkmicCloseContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitNormalPaidLinkmicCloseContent): LinkmicProfitNormalPaidLinkmicCloseContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool waiting_user_need_leave */ 1:
                    message.waitingUserNeedLeave = reader.bool();
                    break;
                case /* string waiting_user_toast */ 2:
                    message.waitingUserToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitNormalPaidLinkmicCloseContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool waiting_user_need_leave = 1; */
        if (message.waitingUserNeedLeave !== false)
            writer.tag(1, WireType.Varint).bool(message.waitingUserNeedLeave);
        /* string waiting_user_toast = 2; */
        if (message.waitingUserToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.waitingUserToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitNormalPaidLinkmicCloseContent
 */
export const LinkmicProfitNormalPaidLinkmicCloseContent = new LinkmicProfitNormalPaidLinkmicCloseContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitNormalPaidLinkmicConfigUpdateContent$Type extends MessageType<LinkmicProfitNormalPaidLinkmicConfigUpdateContent> {
    constructor() {
        super("im.LinkmicProfitNormalPaidLinkmicConfigUpdateContent", [
            { no: 1, name: "waiting_user_need_leave", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "waiting_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "normal_paid_linkmic_info", kind: "message", T: () => NormalPaidLinkmicInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitNormalPaidLinkmicConfigUpdateContent>): LinkmicProfitNormalPaidLinkmicConfigUpdateContent {
        const message = { waitingUserNeedLeave: false, waitingUserToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitNormalPaidLinkmicConfigUpdateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitNormalPaidLinkmicConfigUpdateContent): LinkmicProfitNormalPaidLinkmicConfigUpdateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool waiting_user_need_leave */ 1:
                    message.waitingUserNeedLeave = reader.bool();
                    break;
                case /* string waiting_user_toast */ 2:
                    message.waitingUserToast = reader.string();
                    break;
                case /* data.NormalPaidLinkmicInfo normal_paid_linkmic_info */ 3:
                    message.normalPaidLinkmicInfo = NormalPaidLinkmicInfo.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidLinkmicInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitNormalPaidLinkmicConfigUpdateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool waiting_user_need_leave = 1; */
        if (message.waitingUserNeedLeave !== false)
            writer.tag(1, WireType.Varint).bool(message.waitingUserNeedLeave);
        /* string waiting_user_toast = 2; */
        if (message.waitingUserToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.waitingUserToast);
        /* data.NormalPaidLinkmicInfo normal_paid_linkmic_info = 3; */
        if (message.normalPaidLinkmicInfo)
            NormalPaidLinkmicInfo.internalBinaryWrite(message.normalPaidLinkmicInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitNormalPaidLinkmicConfigUpdateContent
 */
export const LinkmicProfitNormalPaidLinkmicConfigUpdateContent = new LinkmicProfitNormalPaidLinkmicConfigUpdateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitNormalPaidLinkmicAddPriceContent$Type extends MessageType<LinkmicProfitNormalPaidLinkmicAddPriceContent> {
    constructor() {
        super("im.LinkmicProfitNormalPaidLinkmicAddPriceContent", [
            { no: 1, name: "add_price_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "add_price_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitNormalPaidLinkmicAddPriceContent>): LinkmicProfitNormalPaidLinkmicAddPriceContent {
        const message = { addPriceUserId: 0n, addPriceValue: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitNormalPaidLinkmicAddPriceContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitNormalPaidLinkmicAddPriceContent): LinkmicProfitNormalPaidLinkmicAddPriceContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 add_price_user_id */ 1:
                    message.addPriceUserId = reader.int64().toBigInt();
                    break;
                case /* int64 add_price_value */ 2:
                    message.addPriceValue = reader.int64().toBigInt();
                    break;
                case /* data.Text text */ 3:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitNormalPaidLinkmicAddPriceContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 add_price_user_id = 1; */
        if (message.addPriceUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.addPriceUserId);
        /* int64 add_price_value = 2; */
        if (message.addPriceValue !== 0n)
            writer.tag(2, WireType.Varint).int64(message.addPriceValue);
        /* data.Text text = 3; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitNormalPaidLinkmicAddPriceContent
 */
export const LinkmicProfitNormalPaidLinkmicAddPriceContent = new LinkmicProfitNormalPaidLinkmicAddPriceContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitBidPaidLinkmicTurnOnContent$Type extends MessageType<LinkmicProfitBidPaidLinkmicTurnOnContent> {
    constructor() {
        super("im.LinkmicProfitBidPaidLinkmicTurnOnContent", [
            { no: 1, name: "bid_paid_linkmic_info", kind: "message", T: () => BidPaidLinkmicContent },
            { no: 2, name: "prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "waiting_user_need_leave", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "waiting_user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitBidPaidLinkmicTurnOnContent>): LinkmicProfitBidPaidLinkmicTurnOnContent {
        const message = { prompts: "", waitingUserNeedLeave: false, waitingUserToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitBidPaidLinkmicTurnOnContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitBidPaidLinkmicTurnOnContent): LinkmicProfitBidPaidLinkmicTurnOnContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.BidPaidLinkmicContent bid_paid_linkmic_info */ 1:
                    message.bidPaidLinkmicInfo = BidPaidLinkmicContent.internalBinaryRead(reader, reader.uint32(), options, message.bidPaidLinkmicInfo);
                    break;
                case /* string prompts */ 2:
                    message.prompts = reader.string();
                    break;
                case /* bool waiting_user_need_leave */ 3:
                    message.waitingUserNeedLeave = reader.bool();
                    break;
                case /* string waiting_user_toast */ 4:
                    message.waitingUserToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitBidPaidLinkmicTurnOnContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.BidPaidLinkmicContent bid_paid_linkmic_info = 1; */
        if (message.bidPaidLinkmicInfo)
            BidPaidLinkmicContent.internalBinaryWrite(message.bidPaidLinkmicInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string prompts = 2; */
        if (message.prompts !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.prompts);
        /* bool waiting_user_need_leave = 3; */
        if (message.waitingUserNeedLeave !== false)
            writer.tag(3, WireType.Varint).bool(message.waitingUserNeedLeave);
        /* string waiting_user_toast = 4; */
        if (message.waitingUserToast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.waitingUserToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitBidPaidLinkmicTurnOnContent
 */
export const LinkmicProfitBidPaidLinkmicTurnOnContent = new LinkmicProfitBidPaidLinkmicTurnOnContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitBidPaidLinkmicTurnOffContent$Type extends MessageType<LinkmicProfitBidPaidLinkmicTurnOffContent> {
    constructor() {
        super("im.LinkmicProfitBidPaidLinkmicTurnOffContent", [
            { no: 1, name: "prompts", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitBidPaidLinkmicTurnOffContent>): LinkmicProfitBidPaidLinkmicTurnOffContent {
        const message = { prompts: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitBidPaidLinkmicTurnOffContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitBidPaidLinkmicTurnOffContent): LinkmicProfitBidPaidLinkmicTurnOffContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompts */ 1:
                    message.prompts = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitBidPaidLinkmicTurnOffContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompts = 1; */
        if (message.prompts !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitBidPaidLinkmicTurnOffContent
 */
export const LinkmicProfitBidPaidLinkmicTurnOffContent = new LinkmicProfitBidPaidLinkmicTurnOffContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicRoomBattleInviteContent$Type extends MessageType<LinkmicRoomBattleInviteContent> {
    constructor() {
        super("im.LinkmicRoomBattleInviteContent", [
            { no: 1, name: "inviter", kind: "message", T: () => User },
            { no: 2, name: "room_info", kind: "message", T: () => InviteRoomInfo },
            { no: 3, name: "start_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "invite_tips", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "room_battle_mode", kind: "message", T: () => RoomBattleMode }
        ]);
    }
    create(value?: PartialMessage<LinkmicRoomBattleInviteContent>): LinkmicRoomBattleInviteContent {
        const message = { startType: 0, inviteTips: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicRoomBattleInviteContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicRoomBattleInviteContent): LinkmicRoomBattleInviteContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User inviter */ 1:
                    message.inviter = User.internalBinaryRead(reader, reader.uint32(), options, message.inviter);
                    break;
                case /* data.InviteRoomInfo room_info */ 2:
                    message.roomInfo = InviteRoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.roomInfo);
                    break;
                case /* int32 start_type */ 3:
                    message.startType = reader.int32();
                    break;
                case /* string invite_tips */ 4:
                    message.inviteTips = reader.string();
                    break;
                case /* data.RoomBattleMode room_battle_mode */ 5:
                    message.roomBattleMode = RoomBattleMode.internalBinaryRead(reader, reader.uint32(), options, message.roomBattleMode);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicRoomBattleInviteContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User inviter = 1; */
        if (message.inviter)
            User.internalBinaryWrite(message.inviter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.InviteRoomInfo room_info = 2; */
        if (message.roomInfo)
            InviteRoomInfo.internalBinaryWrite(message.roomInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 start_type = 3; */
        if (message.startType !== 0)
            writer.tag(3, WireType.Varint).int32(message.startType);
        /* string invite_tips = 4; */
        if (message.inviteTips !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.inviteTips);
        /* data.RoomBattleMode room_battle_mode = 5; */
        if (message.roomBattleMode)
            RoomBattleMode.internalBinaryWrite(message.roomBattleMode, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicRoomBattleInviteContent
 */
export const LinkmicRoomBattleInviteContent = new LinkmicRoomBattleInviteContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicRoomBattleReplyContent$Type extends MessageType<LinkmicRoomBattleReplyContent> {
    constructor() {
        super("im.LinkmicRoomBattleReplyContent", [
            { no: 1, name: "reply_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "start_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "invitee_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "invitee_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "follow_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "reply_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "reply_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "reply_operate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicRoomBattleReplyContent>): LinkmicRoomBattleReplyContent {
        const message = { replyType: 0, startType: 0, inviteeRoomId: 0n, inviteeAnchorId: 0n, followStatus: 0n, replyUserId: 0n, replyToast: "", replyOperate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicRoomBattleReplyContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicRoomBattleReplyContent): LinkmicRoomBattleReplyContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 reply_type */ 1:
                    message.replyType = reader.int32();
                    break;
                case /* int32 start_type */ 2:
                    message.startType = reader.int32();
                    break;
                case /* int64 invitee_room_id */ 3:
                    message.inviteeRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 invitee_anchor_id */ 4:
                    message.inviteeAnchorId = reader.int64().toBigInt();
                    break;
                case /* int64 follow_status */ 5:
                    message.followStatus = reader.int64().toBigInt();
                    break;
                case /* int64 reply_user_id */ 6:
                    message.replyUserId = reader.int64().toBigInt();
                    break;
                case /* string reply_toast */ 7:
                    message.replyToast = reader.string();
                    break;
                case /* int32 reply_operate */ 8:
                    message.replyOperate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicRoomBattleReplyContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 reply_type = 1; */
        if (message.replyType !== 0)
            writer.tag(1, WireType.Varint).int32(message.replyType);
        /* int32 start_type = 2; */
        if (message.startType !== 0)
            writer.tag(2, WireType.Varint).int32(message.startType);
        /* int64 invitee_room_id = 3; */
        if (message.inviteeRoomId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.inviteeRoomId);
        /* int64 invitee_anchor_id = 4; */
        if (message.inviteeAnchorId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.inviteeAnchorId);
        /* int64 follow_status = 5; */
        if (message.followStatus !== 0n)
            writer.tag(5, WireType.Varint).int64(message.followStatus);
        /* int64 reply_user_id = 6; */
        if (message.replyUserId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.replyUserId);
        /* string reply_toast = 7; */
        if (message.replyToast !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.replyToast);
        /* int32 reply_operate = 8; */
        if (message.replyOperate !== 0)
            writer.tag(8, WireType.Varint).int32(message.replyOperate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicRoomBattleReplyContent
 */
export const LinkmicRoomBattleReplyContent = new LinkmicRoomBattleReplyContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitInteractiveScreenCastOpenContent$Type extends MessageType<LinkmicProfitInteractiveScreenCastOpenContent> {
    constructor() {
        super("im.LinkmicProfitInteractiveScreenCastOpenContent", [
            { no: 1, name: "screen_cast_info", kind: "message", T: () => InteractiveScreenCastInfo },
            { no: 2, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitInteractiveScreenCastOpenContent>): LinkmicProfitInteractiveScreenCastOpenContent {
        const message = { rtcExtInfo: "", liveCoreExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitInteractiveScreenCastOpenContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitInteractiveScreenCastOpenContent): LinkmicProfitInteractiveScreenCastOpenContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.InteractiveScreenCastInfo screen_cast_info */ 1:
                    message.screenCastInfo = InteractiveScreenCastInfo.internalBinaryRead(reader, reader.uint32(), options, message.screenCastInfo);
                    break;
                case /* string rtc_ext_info */ 2:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_ext_info */ 3:
                    message.liveCoreExtInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitInteractiveScreenCastOpenContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.InteractiveScreenCastInfo screen_cast_info = 1; */
        if (message.screenCastInfo)
            InteractiveScreenCastInfo.internalBinaryWrite(message.screenCastInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string rtc_ext_info = 2; */
        if (message.rtcExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_ext_info = 3; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitInteractiveScreenCastOpenContent
 */
export const LinkmicProfitInteractiveScreenCastOpenContent = new LinkmicProfitInteractiveScreenCastOpenContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitInteractiveScreenCastCloseContent$Type extends MessageType<LinkmicProfitInteractiveScreenCastCloseContent> {
    constructor() {
        super("im.LinkmicProfitInteractiveScreenCastCloseContent", [
            { no: 1, name: "screen_cast_info", kind: "message", T: () => InteractiveScreenCastInfo },
            { no: 2, name: "rtc_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_core_ext_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitInteractiveScreenCastCloseContent>): LinkmicProfitInteractiveScreenCastCloseContent {
        const message = { rtcExtInfo: "", liveCoreExtInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitInteractiveScreenCastCloseContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitInteractiveScreenCastCloseContent): LinkmicProfitInteractiveScreenCastCloseContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.InteractiveScreenCastInfo screen_cast_info */ 1:
                    message.screenCastInfo = InteractiveScreenCastInfo.internalBinaryRead(reader, reader.uint32(), options, message.screenCastInfo);
                    break;
                case /* string rtc_ext_info */ 2:
                    message.rtcExtInfo = reader.string();
                    break;
                case /* string live_core_ext_info */ 3:
                    message.liveCoreExtInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitInteractiveScreenCastCloseContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.InteractiveScreenCastInfo screen_cast_info = 1; */
        if (message.screenCastInfo)
            InteractiveScreenCastInfo.internalBinaryWrite(message.screenCastInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string rtc_ext_info = 2; */
        if (message.rtcExtInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rtcExtInfo);
        /* string live_core_ext_info = 3; */
        if (message.liveCoreExtInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.liveCoreExtInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitInteractiveScreenCastCloseContent
 */
export const LinkmicProfitInteractiveScreenCastCloseContent = new LinkmicProfitInteractiveScreenCastCloseContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicRoomBattleMatchSuccessContent$Type extends MessageType<LinkmicRoomBattleMatchSuccessContent> {
    constructor() {
        super("im.LinkmicRoomBattleMatchSuccessContent", [
            { no: 1, name: "match_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "process_info", kind: "message", T: () => RoomBattleProcessInfo },
            { no: 3, name: "rival_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "rival_user_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "rival_chat_room_rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "rival_follow_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "invite_source", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "operator_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicRoomBattleMatchSuccessContent>): LinkmicRoomBattleMatchSuccessContent {
        const message = { matchType: 0, rivalAnchorId: 0n, rivalUserCount: 0n, rivalChatRoomRank: 0n, rivalFollowStatus: 0n, inviteSource: 0n, operatorUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicRoomBattleMatchSuccessContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicRoomBattleMatchSuccessContent): LinkmicRoomBattleMatchSuccessContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 match_type */ 1:
                    message.matchType = reader.int32();
                    break;
                case /* data.RoomBattleProcessInfo process_info */ 2:
                    message.processInfo = RoomBattleProcessInfo.internalBinaryRead(reader, reader.uint32(), options, message.processInfo);
                    break;
                case /* int64 rival_anchor_id */ 3:
                    message.rivalAnchorId = reader.int64().toBigInt();
                    break;
                case /* int64 rival_user_count */ 4:
                    message.rivalUserCount = reader.int64().toBigInt();
                    break;
                case /* int64 rival_chat_room_rank */ 5:
                    message.rivalChatRoomRank = reader.int64().toBigInt();
                    break;
                case /* int64 rival_follow_status */ 6:
                    message.rivalFollowStatus = reader.int64().toBigInt();
                    break;
                case /* int64 invite_source */ 7:
                    message.inviteSource = reader.int64().toBigInt();
                    break;
                case /* int64 operator_user_id */ 8:
                    message.operatorUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicRoomBattleMatchSuccessContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 match_type = 1; */
        if (message.matchType !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchType);
        /* data.RoomBattleProcessInfo process_info = 2; */
        if (message.processInfo)
            RoomBattleProcessInfo.internalBinaryWrite(message.processInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 rival_anchor_id = 3; */
        if (message.rivalAnchorId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rivalAnchorId);
        /* int64 rival_user_count = 4; */
        if (message.rivalUserCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.rivalUserCount);
        /* int64 rival_chat_room_rank = 5; */
        if (message.rivalChatRoomRank !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rivalChatRoomRank);
        /* int64 rival_follow_status = 6; */
        if (message.rivalFollowStatus !== 0n)
            writer.tag(6, WireType.Varint).int64(message.rivalFollowStatus);
        /* int64 invite_source = 7; */
        if (message.inviteSource !== 0n)
            writer.tag(7, WireType.Varint).int64(message.inviteSource);
        /* int64 operator_user_id = 8; */
        if (message.operatorUserId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.operatorUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicRoomBattleMatchSuccessContent
 */
export const LinkmicRoomBattleMatchSuccessContent = new LinkmicRoomBattleMatchSuccessContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicGiftRecipientContent$Type extends MessageType<LinkmicGiftRecipientContent> {
    constructor() {
        super("im.LinkmicGiftRecipientContent", [
            { no: 1, name: "gift_recipient_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicGiftRecipientContent>): LinkmicGiftRecipientContent {
        const message = { giftRecipientUserId: 0n, reason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicGiftRecipientContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicGiftRecipientContent): LinkmicGiftRecipientContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 gift_recipient_user_id */ 1:
                    message.giftRecipientUserId = reader.int64().toBigInt();
                    break;
                case /* int32 reason */ 2:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicGiftRecipientContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 gift_recipient_user_id = 1; */
        if (message.giftRecipientUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.giftRecipientUserId);
        /* int32 reason = 2; */
        if (message.reason !== 0)
            writer.tag(2, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicGiftRecipientContent
 */
export const LinkmicGiftRecipientContent = new LinkmicGiftRecipientContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitAudioSubtitleCheckInContent$Type extends MessageType<LinkmicProfitAudioSubtitleCheckInContent> {
    constructor() {
        super("im.LinkmicProfitAudioSubtitleCheckInContent", [
            { no: 1, name: "version_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitAudioSubtitleCheckInContent>): LinkmicProfitAudioSubtitleCheckInContent {
        const message = { versionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitAudioSubtitleCheckInContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitAudioSubtitleCheckInContent): LinkmicProfitAudioSubtitleCheckInContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version_id */ 1:
                    message.versionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitAudioSubtitleCheckInContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 version_id = 1; */
        if (message.versionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.versionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitAudioSubtitleCheckInContent
 */
export const LinkmicProfitAudioSubtitleCheckInContent = new LinkmicProfitAudioSubtitleCheckInContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitAudioSubtitleStartContent$Type extends MessageType<LinkmicProfitAudioSubtitleStartContent> {
    constructor() {
        super("im.LinkmicProfitAudioSubtitleStartContent", [
            { no: 1, name: "version_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitAudioSubtitleStartContent>): LinkmicProfitAudioSubtitleStartContent {
        const message = { versionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitAudioSubtitleStartContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitAudioSubtitleStartContent): LinkmicProfitAudioSubtitleStartContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version_id */ 1:
                    message.versionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitAudioSubtitleStartContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 version_id = 1; */
        if (message.versionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.versionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitAudioSubtitleStartContent
 */
export const LinkmicProfitAudioSubtitleStartContent = new LinkmicProfitAudioSubtitleStartContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicProfitAudioSubtitleCloseContent$Type extends MessageType<LinkmicProfitAudioSubtitleCloseContent> {
    constructor() {
        super("im.LinkmicProfitAudioSubtitleCloseContent", [
            { no: 1, name: "version_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicProfitAudioSubtitleCloseContent>): LinkmicProfitAudioSubtitleCloseContent {
        const message = { versionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicProfitAudioSubtitleCloseContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicProfitAudioSubtitleCloseContent): LinkmicProfitAudioSubtitleCloseContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version_id */ 1:
                    message.versionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicProfitAudioSubtitleCloseContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 version_id = 1; */
        if (message.versionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.versionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicProfitAudioSubtitleCloseContent
 */
export const LinkmicProfitAudioSubtitleCloseContent = new LinkmicProfitAudioSubtitleCloseContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicGameBarrageStartContent$Type extends MessageType<LinkmicGameBarrageStartContent> {
    constructor() {
        super("im.LinkmicGameBarrageStartContent", [
            { no: 1, name: "game_info", kind: "message", T: () => LinkmicGameInfo },
            { no: 2, name: "audience_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kick_out_user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicGameBarrageStartContent>): LinkmicGameBarrageStartContent {
        const message = { audienceToast: "", kickOutUserIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicGameBarrageStartContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicGameBarrageStartContent): LinkmicGameBarrageStartContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.LinkmicGameInfo game_info */ 1:
                    message.gameInfo = LinkmicGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.gameInfo);
                    break;
                case /* string audience_toast */ 2:
                    message.audienceToast = reader.string();
                    break;
                case /* repeated int64 kick_out_user_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.kickOutUserIds.push(reader.int64().toBigInt());
                    else
                        message.kickOutUserIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicGameBarrageStartContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.LinkmicGameInfo game_info = 1; */
        if (message.gameInfo)
            LinkmicGameInfo.internalBinaryWrite(message.gameInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string audience_toast = 2; */
        if (message.audienceToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.audienceToast);
        /* repeated int64 kick_out_user_ids = 3; */
        if (message.kickOutUserIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.kickOutUserIds.length; i++)
                writer.int64(message.kickOutUserIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicGameBarrageStartContent
 */
export const LinkmicGameBarrageStartContent = new LinkmicGameBarrageStartContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicGameBarrageStopContent$Type extends MessageType<LinkmicGameBarrageStopContent> {
    constructor() {
        super("im.LinkmicGameBarrageStopContent", [
            { no: 1, name: "game_info", kind: "message", T: () => LinkmicGameInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicGameBarrageStopContent>): LinkmicGameBarrageStopContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicGameBarrageStopContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicGameBarrageStopContent): LinkmicGameBarrageStopContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.LinkmicGameInfo game_info */ 1:
                    message.gameInfo = LinkmicGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.gameInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicGameBarrageStopContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.LinkmicGameInfo game_info = 1; */
        if (message.gameInfo)
            LinkmicGameInfo.internalBinaryWrite(message.gameInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicGameBarrageStopContent
 */
export const LinkmicGameBarrageStopContent = new LinkmicGameBarrageStopContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicReviewMessage$Type extends MessageType<LinkmicReviewMessage> {
    constructor() {
        super("im.LinkmicReviewMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "normal_paid_desc_content", kind: "message", T: () => LinkmicReviewNormalPaidDescContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicReviewMessage>): LinkmicReviewMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicReviewMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicReviewMessage): LinkmicReviewMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.LinkmicReviewNormalPaidDescContent normal_paid_desc_content */ 21:
                    message.normalPaidDescContent = LinkmicReviewNormalPaidDescContent.internalBinaryRead(reader, reader.uint32(), options, message.normalPaidDescContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicReviewMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.LinkmicReviewNormalPaidDescContent normal_paid_desc_content = 21; */
        if (message.normalPaidDescContent)
            LinkmicReviewNormalPaidDescContent.internalBinaryWrite(message.normalPaidDescContent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicReviewMessage
 */
export const LinkmicReviewMessage = new LinkmicReviewMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicReviewNormalPaidDescContent$Type extends MessageType<LinkmicReviewNormalPaidDescContent> {
    constructor() {
        super("im.LinkmicReviewNormalPaidDescContent", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicReviewNormalPaidDescContent>): LinkmicReviewNormalPaidDescContent {
        const message = { status: 0, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicReviewNormalPaidDescContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicReviewNormalPaidDescContent): LinkmicReviewNormalPaidDescContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicReviewNormalPaidDescContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicReviewNormalPaidDescContent
 */
export const LinkmicReviewNormalPaidDescContent = new LinkmicReviewNormalPaidDescContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelfDisciplinePunchMessage$Type extends MessageType<SelfDisciplinePunchMessage> {
    constructor() {
        super("im.SelfDisciplinePunchMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "punch_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "toast_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "punch_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelfDisciplinePunchMessage>): SelfDisciplinePunchMessage {
        const message = { msgType: 0, toUserId: 0n, startTime: 0n, punchDuration: 0n, toastText: "", punchStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelfDisciplinePunchMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelfDisciplinePunchMessage): SelfDisciplinePunchMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* int64 to_user_id */ 3:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 4:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 punch_duration */ 5:
                    message.punchDuration = reader.int64().toBigInt();
                    break;
                case /* string toast_text */ 6:
                    message.toastText = reader.string();
                    break;
                case /* int32 punch_status */ 7:
                    message.punchStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelfDisciplinePunchMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* int64 to_user_id = 3; */
        if (message.toUserId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.toUserId);
        /* int64 start_time = 4; */
        if (message.startTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startTime);
        /* int64 punch_duration = 5; */
        if (message.punchDuration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.punchDuration);
        /* string toast_text = 6; */
        if (message.toastText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.toastText);
        /* int32 punch_status = 7; */
        if (message.punchStatus !== 0)
            writer.tag(7, WireType.Varint).int32(message.punchStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SelfDisciplinePunchMessage
 */
export const SelfDisciplinePunchMessage = new SelfDisciplinePunchMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicSelfDisciplineMessage$Type extends MessageType<LinkmicSelfDisciplineMessage> {
    constructor() {
        super("im.LinkmicSelfDisciplineMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "config_content", kind: "message", T: () => LinkmicSelfDisciplineConfigContent },
            { no: 22, name: "like_content", kind: "message", T: () => LinkmicSelfDisciplineLikeContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicSelfDisciplineMessage>): LinkmicSelfDisciplineMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicSelfDisciplineMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicSelfDisciplineMessage): LinkmicSelfDisciplineMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.LinkmicSelfDisciplineConfigContent config_content */ 21:
                    message.configContent = LinkmicSelfDisciplineConfigContent.internalBinaryRead(reader, reader.uint32(), options, message.configContent);
                    break;
                case /* im.LinkmicSelfDisciplineLikeContent like_content */ 22:
                    message.likeContent = LinkmicSelfDisciplineLikeContent.internalBinaryRead(reader, reader.uint32(), options, message.likeContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicSelfDisciplineMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.LinkmicSelfDisciplineConfigContent config_content = 21; */
        if (message.configContent)
            LinkmicSelfDisciplineConfigContent.internalBinaryWrite(message.configContent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicSelfDisciplineLikeContent like_content = 22; */
        if (message.likeContent)
            LinkmicSelfDisciplineLikeContent.internalBinaryWrite(message.likeContent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicSelfDisciplineMessage
 */
export const LinkmicSelfDisciplineMessage = new LinkmicSelfDisciplineMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicSelfDisciplineConfigContent$Type extends MessageType<LinkmicSelfDisciplineConfigContent> {
    constructor() {
        super("im.LinkmicSelfDisciplineConfigContent", [
            { no: 1, name: "switch_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "current_target", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target_icon_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "punch_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicSelfDisciplineConfigContent>): LinkmicSelfDisciplineConfigContent {
        const message = { switchStatus: 0, currentTarget: "", targetIconUri: "", text: "", punchDuration: 0n, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicSelfDisciplineConfigContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicSelfDisciplineConfigContent): LinkmicSelfDisciplineConfigContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 switch_status */ 1:
                    message.switchStatus = reader.int32();
                    break;
                case /* string current_target */ 2:
                    message.currentTarget = reader.string();
                    break;
                case /* string target_icon_uri */ 3:
                    message.targetIconUri = reader.string();
                    break;
                case /* string text */ 4:
                    message.text = reader.string();
                    break;
                case /* int64 punch_duration */ 5:
                    message.punchDuration = reader.int64().toBigInt();
                    break;
                case /* string toast */ 6:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicSelfDisciplineConfigContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 switch_status = 1; */
        if (message.switchStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.switchStatus);
        /* string current_target = 2; */
        if (message.currentTarget !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentTarget);
        /* string target_icon_uri = 3; */
        if (message.targetIconUri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.targetIconUri);
        /* string text = 4; */
        if (message.text !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.text);
        /* int64 punch_duration = 5; */
        if (message.punchDuration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.punchDuration);
        /* string toast = 6; */
        if (message.toast !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicSelfDisciplineConfigContent
 */
export const LinkmicSelfDisciplineConfigContent = new LinkmicSelfDisciplineConfigContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicSelfDisciplineLikeContent$Type extends MessageType<LinkmicSelfDisciplineLikeContent> {
    constructor() {
        super("im.LinkmicSelfDisciplineLikeContent", [
            { no: 1, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicSelfDisciplineLikeContent>): LinkmicSelfDisciplineLikeContent {
        const message = { fromUserId: 0n, toUserId: 0n, source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicSelfDisciplineLikeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicSelfDisciplineLikeContent): LinkmicSelfDisciplineLikeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 from_user_id */ 1:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                case /* int64 to_user_id */ 2:
                    message.toUserId = reader.int64().toBigInt();
                    break;
                case /* int32 source */ 3:
                    message.source = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicSelfDisciplineLikeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 from_user_id = 1; */
        if (message.fromUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fromUserId);
        /* int64 to_user_id = 2; */
        if (message.toUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.toUserId);
        /* int32 source = 3; */
        if (message.source !== 0)
            writer.tag(3, WireType.Varint).int32(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicSelfDisciplineLikeContent
 */
export const LinkmicSelfDisciplineLikeContent = new LinkmicSelfDisciplineLikeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightScoreMessage$Type extends MessageType<LinkmicTeamfightScoreMessage> {
    constructor() {
        super("im.LinkmicTeamfightScoreMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "teamfight_info", kind: "message", T: () => LinkmicTeamfightInfo },
            { no: 3, name: "quick_interact", kind: "message", T: () => LinkmicQuickInteract }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightScoreMessage>): LinkmicTeamfightScoreMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightScoreMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightScoreMessage): LinkmicTeamfightScoreMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.LinkmicTeamfightInfo teamfight_info */ 2:
                    message.teamfightInfo = LinkmicTeamfightInfo.internalBinaryRead(reader, reader.uint32(), options, message.teamfightInfo);
                    break;
                case /* data.LinkmicQuickInteract quick_interact */ 3:
                    message.quickInteract = LinkmicQuickInteract.internalBinaryRead(reader, reader.uint32(), options, message.quickInteract);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightScoreMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkmicTeamfightInfo teamfight_info = 2; */
        if (message.teamfightInfo)
            LinkmicTeamfightInfo.internalBinaryWrite(message.teamfightInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkmicQuickInteract quick_interact = 3; */
        if (message.quickInteract)
            LinkmicQuickInteract.internalBinaryWrite(message.quickInteract, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicTeamfightScoreMessage
 */
export const LinkmicTeamfightScoreMessage = new LinkmicTeamfightScoreMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightMessage$Type extends MessageType<LinkmicTeamfightMessage> {
    constructor() {
        super("im.LinkmicTeamfightMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "teamfight_info", kind: "message", T: () => LinkmicTeamfightInfo },
            { no: 100, name: "finish_content", kind: "message", T: () => LinkmicTeamfightFinishContent },
            { no: 101, name: "create_content", kind: "message", T: () => LinkmicTeamfightCreateContent },
            { no: 102, name: "settle_content", kind: "message", T: () => LinkmicTeamfightSettleContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightMessage>): LinkmicTeamfightMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightMessage): LinkmicTeamfightMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* data.LinkmicTeamfightInfo teamfight_info */ 3:
                    message.teamfightInfo = LinkmicTeamfightInfo.internalBinaryRead(reader, reader.uint32(), options, message.teamfightInfo);
                    break;
                case /* im.LinkmicTeamfightFinishContent finish_content */ 100:
                    message.finishContent = LinkmicTeamfightFinishContent.internalBinaryRead(reader, reader.uint32(), options, message.finishContent);
                    break;
                case /* im.LinkmicTeamfightCreateContent create_content */ 101:
                    message.createContent = LinkmicTeamfightCreateContent.internalBinaryRead(reader, reader.uint32(), options, message.createContent);
                    break;
                case /* im.LinkmicTeamfightSettleContent settle_content */ 102:
                    message.settleContent = LinkmicTeamfightSettleContent.internalBinaryRead(reader, reader.uint32(), options, message.settleContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* data.LinkmicTeamfightInfo teamfight_info = 3; */
        if (message.teamfightInfo)
            LinkmicTeamfightInfo.internalBinaryWrite(message.teamfightInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicTeamfightFinishContent finish_content = 100; */
        if (message.finishContent)
            LinkmicTeamfightFinishContent.internalBinaryWrite(message.finishContent, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicTeamfightCreateContent create_content = 101; */
        if (message.createContent)
            LinkmicTeamfightCreateContent.internalBinaryWrite(message.createContent, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicTeamfightSettleContent settle_content = 102; */
        if (message.settleContent)
            LinkmicTeamfightSettleContent.internalBinaryWrite(message.settleContent, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicTeamfightMessage
 */
export const LinkmicTeamfightMessage = new LinkmicTeamfightMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightFinishContent$Type extends MessageType<LinkmicTeamfightFinishContent> {
    constructor() {
        super("im.LinkmicTeamfightFinishContent", [
            { no: 1, name: "finish_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "guest_finish_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "finish_room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "finish_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightFinishContent>): LinkmicTeamfightFinishContent {
        const message = { finishToast: "", guestFinishToast: "", reason: 0, finishRoomId: 0n, finishUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightFinishContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightFinishContent): LinkmicTeamfightFinishContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string finish_toast */ 1:
                    message.finishToast = reader.string();
                    break;
                case /* string guest_finish_toast */ 2:
                    message.guestFinishToast = reader.string();
                    break;
                case /* int32 reason */ 3:
                    message.reason = reader.int32();
                    break;
                case /* int64 finish_room_id */ 4:
                    message.finishRoomId = reader.int64().toBigInt();
                    break;
                case /* int64 finish_user_id */ 5:
                    message.finishUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightFinishContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string finish_toast = 1; */
        if (message.finishToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.finishToast);
        /* string guest_finish_toast = 2; */
        if (message.guestFinishToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.guestFinishToast);
        /* int32 reason = 3; */
        if (message.reason !== 0)
            writer.tag(3, WireType.Varint).int32(message.reason);
        /* int64 finish_room_id = 4; */
        if (message.finishRoomId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.finishRoomId);
        /* int64 finish_user_id = 5; */
        if (message.finishUserId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.finishUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicTeamfightFinishContent
 */
export const LinkmicTeamfightFinishContent = new LinkmicTeamfightFinishContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightCreateContent$Type extends MessageType<LinkmicTeamfightCreateContent> {
    constructor() {
        super("im.LinkmicTeamfightCreateContent", [
            { no: 3, name: "reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightCreateContent>): LinkmicTeamfightCreateContent {
        const message = { reason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightCreateContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightCreateContent): LinkmicTeamfightCreateContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 reason */ 3:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightCreateContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 reason = 3; */
        if (message.reason !== 0)
            writer.tag(3, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicTeamfightCreateContent
 */
export const LinkmicTeamfightCreateContent = new LinkmicTeamfightCreateContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicTeamfightSettleContent$Type extends MessageType<LinkmicTeamfightSettleContent> {
    constructor() {
        super("im.LinkmicTeamfightSettleContent", [
            { no: 1, name: "disable_show_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicTeamfightSettleContent>): LinkmicTeamfightSettleContent {
        const message = { disableShowToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicTeamfightSettleContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicTeamfightSettleContent): LinkmicTeamfightSettleContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string disable_show_toast */ 1:
                    message.disableShowToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicTeamfightSettleContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string disable_show_toast = 1; */
        if (message.disableShowToast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.disableShowToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicTeamfightSettleContent
 */
export const LinkmicTeamfightSettleContent = new LinkmicTeamfightSettleContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionMessage$Type extends MessageType<LinkmicThemedCompetitionMessage> {
    constructor() {
        super("im.LinkmicThemedCompetitionMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 100, name: "start_content", kind: "message", T: () => LinkmicThemedCompetitionStartContent },
            { no: 101, name: "close_content", kind: "message", T: () => LinkmicThemedCompetitionCloseContent },
            { no: 102, name: "score_change_content", kind: "message", T: () => LinkmicThemedCompetitionScoreChangeContent },
            { no: 103, name: "once_more_content", kind: "message", T: () => LinkmicThemedCompetitionOnceMoreContent },
            { no: 104, name: "show_time_start_content", kind: "message", T: () => LinkmicThemedCompetitionShowTimeStartContent },
            { no: 105, name: "show_time_finish_content", kind: "message", T: () => LinkmicThemedCompetitionShowTimeFinishContent },
            { no: 106, name: "banner_message_for_pc", kind: "message", T: () => LinkmicThemedCompetitionBannerMessageForPC },
            { no: 107, name: "toast_message_for_pc", kind: "message", T: () => LinkmicThemedCompetitionToastMessageForPC }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionMessage>): LinkmicThemedCompetitionMessage {
        const message = { msgType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionMessage): LinkmicThemedCompetitionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* im.LinkmicThemedCompetitionStartContent start_content */ 100:
                    message.startContent = LinkmicThemedCompetitionStartContent.internalBinaryRead(reader, reader.uint32(), options, message.startContent);
                    break;
                case /* im.LinkmicThemedCompetitionCloseContent close_content */ 101:
                    message.closeContent = LinkmicThemedCompetitionCloseContent.internalBinaryRead(reader, reader.uint32(), options, message.closeContent);
                    break;
                case /* im.LinkmicThemedCompetitionScoreChangeContent score_change_content */ 102:
                    message.scoreChangeContent = LinkmicThemedCompetitionScoreChangeContent.internalBinaryRead(reader, reader.uint32(), options, message.scoreChangeContent);
                    break;
                case /* im.LinkmicThemedCompetitionOnceMoreContent once_more_content */ 103:
                    message.onceMoreContent = LinkmicThemedCompetitionOnceMoreContent.internalBinaryRead(reader, reader.uint32(), options, message.onceMoreContent);
                    break;
                case /* im.LinkmicThemedCompetitionShowTimeStartContent show_time_start_content */ 104:
                    message.showTimeStartContent = LinkmicThemedCompetitionShowTimeStartContent.internalBinaryRead(reader, reader.uint32(), options, message.showTimeStartContent);
                    break;
                case /* im.LinkmicThemedCompetitionShowTimeFinishContent show_time_finish_content */ 105:
                    message.showTimeFinishContent = LinkmicThemedCompetitionShowTimeFinishContent.internalBinaryRead(reader, reader.uint32(), options, message.showTimeFinishContent);
                    break;
                case /* im.LinkmicThemedCompetitionBannerMessageForPC banner_message_for_pc */ 106:
                    message.bannerMessageForPc = LinkmicThemedCompetitionBannerMessageForPC.internalBinaryRead(reader, reader.uint32(), options, message.bannerMessageForPc);
                    break;
                case /* im.LinkmicThemedCompetitionToastMessageForPC toast_message_for_pc */ 107:
                    message.toastMessageForPc = LinkmicThemedCompetitionToastMessageForPC.internalBinaryRead(reader, reader.uint32(), options, message.toastMessageForPc);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* im.LinkmicThemedCompetitionStartContent start_content = 100; */
        if (message.startContent)
            LinkmicThemedCompetitionStartContent.internalBinaryWrite(message.startContent, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionCloseContent close_content = 101; */
        if (message.closeContent)
            LinkmicThemedCompetitionCloseContent.internalBinaryWrite(message.closeContent, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionScoreChangeContent score_change_content = 102; */
        if (message.scoreChangeContent)
            LinkmicThemedCompetitionScoreChangeContent.internalBinaryWrite(message.scoreChangeContent, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionOnceMoreContent once_more_content = 103; */
        if (message.onceMoreContent)
            LinkmicThemedCompetitionOnceMoreContent.internalBinaryWrite(message.onceMoreContent, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionShowTimeStartContent show_time_start_content = 104; */
        if (message.showTimeStartContent)
            LinkmicThemedCompetitionShowTimeStartContent.internalBinaryWrite(message.showTimeStartContent, writer.tag(104, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionShowTimeFinishContent show_time_finish_content = 105; */
        if (message.showTimeFinishContent)
            LinkmicThemedCompetitionShowTimeFinishContent.internalBinaryWrite(message.showTimeFinishContent, writer.tag(105, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionBannerMessageForPC banner_message_for_pc = 106; */
        if (message.bannerMessageForPc)
            LinkmicThemedCompetitionBannerMessageForPC.internalBinaryWrite(message.bannerMessageForPc, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionToastMessageForPC toast_message_for_pc = 107; */
        if (message.toastMessageForPc)
            LinkmicThemedCompetitionToastMessageForPC.internalBinaryWrite(message.toastMessageForPc, writer.tag(107, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionMessage
 */
export const LinkmicThemedCompetitionMessage = new LinkmicThemedCompetitionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionStartContent$Type extends MessageType<LinkmicThemedCompetitionStartContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionStartContent", [
            { no: 1, name: "info", kind: "message", T: () => ThemedCompetitionInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionStartContent>): LinkmicThemedCompetitionStartContent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionStartContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionStartContent): LinkmicThemedCompetitionStartContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ThemedCompetitionInfo info */ 1:
                    message.info = ThemedCompetitionInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionStartContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ThemedCompetitionInfo info = 1; */
        if (message.info)
            ThemedCompetitionInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionStartContent
 */
export const LinkmicThemedCompetitionStartContent = new LinkmicThemedCompetitionStartContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionOnceMoreContent$Type extends MessageType<LinkmicThemedCompetitionOnceMoreContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionOnceMoreContent", [
            { no: 1, name: "info", kind: "message", T: () => ThemedCompetitionInfo },
            { no: 2, name: "old_competition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionOnceMoreContent>): LinkmicThemedCompetitionOnceMoreContent {
        const message = { oldCompetitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionOnceMoreContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionOnceMoreContent): LinkmicThemedCompetitionOnceMoreContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ThemedCompetitionInfo info */ 1:
                    message.info = ThemedCompetitionInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* int64 old_competition_id */ 2:
                    message.oldCompetitionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionOnceMoreContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ThemedCompetitionInfo info = 1; */
        if (message.info)
            ThemedCompetitionInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 old_competition_id = 2; */
        if (message.oldCompetitionId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.oldCompetitionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionOnceMoreContent
 */
export const LinkmicThemedCompetitionOnceMoreContent = new LinkmicThemedCompetitionOnceMoreContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionCloseContent$Type extends MessageType<LinkmicThemedCompetitionCloseContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionCloseContent", [
            { no: 1, name: "competition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionCloseContent>): LinkmicThemedCompetitionCloseContent {
        const message = { competitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionCloseContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionCloseContent): LinkmicThemedCompetitionCloseContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 competition_id */ 1:
                    message.competitionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionCloseContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 competition_id = 1; */
        if (message.competitionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.competitionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionCloseContent
 */
export const LinkmicThemedCompetitionCloseContent = new LinkmicThemedCompetitionCloseContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionScoreChangeContent$Type extends MessageType<LinkmicThemedCompetitionScoreChangeContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionScoreChangeContent", [
            { no: 1, name: "info", kind: "message", T: () => ThemedCompetitionInfo },
            { no: 2, name: "score_change_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "quick_interact", kind: "message", T: () => LinkmicQuickInteract },
            { no: 4, name: "new_advance_user", kind: "message", T: () => LinkmicThemedCompetitionScoreChangeContent_WinContent }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionScoreChangeContent>): LinkmicThemedCompetitionScoreChangeContent {
        const message = { scoreChangeUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionScoreChangeContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionScoreChangeContent): LinkmicThemedCompetitionScoreChangeContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.ThemedCompetitionInfo info */ 1:
                    message.info = ThemedCompetitionInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* int64 score_change_user_id */ 2:
                    message.scoreChangeUserId = reader.int64().toBigInt();
                    break;
                case /* data.LinkmicQuickInteract quick_interact */ 3:
                    message.quickInteract = LinkmicQuickInteract.internalBinaryRead(reader, reader.uint32(), options, message.quickInteract);
                    break;
                case /* im.LinkmicThemedCompetitionScoreChangeContent.WinContent new_advance_user */ 4:
                    message.newAdvanceUser = LinkmicThemedCompetitionScoreChangeContent_WinContent.internalBinaryRead(reader, reader.uint32(), options, message.newAdvanceUser);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionScoreChangeContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.ThemedCompetitionInfo info = 1; */
        if (message.info)
            ThemedCompetitionInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 score_change_user_id = 2; */
        if (message.scoreChangeUserId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.scoreChangeUserId);
        /* data.LinkmicQuickInteract quick_interact = 3; */
        if (message.quickInteract)
            LinkmicQuickInteract.internalBinaryWrite(message.quickInteract, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.LinkmicThemedCompetitionScoreChangeContent.WinContent new_advance_user = 4; */
        if (message.newAdvanceUser)
            LinkmicThemedCompetitionScoreChangeContent_WinContent.internalBinaryWrite(message.newAdvanceUser, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionScoreChangeContent
 */
export const LinkmicThemedCompetitionScoreChangeContent = new LinkmicThemedCompetitionScoreChangeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionScoreChangeContent_WinContent$Type extends MessageType<LinkmicThemedCompetitionScoreChangeContent_WinContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionScoreChangeContent.WinContent", [
            { no: 1, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "win_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionScoreChangeContent_WinContent>): LinkmicThemedCompetitionScoreChangeContent_WinContent {
        const message = { rank: 0n, userId: 0n, winType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionScoreChangeContent_WinContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionScoreChangeContent_WinContent): LinkmicThemedCompetitionScoreChangeContent_WinContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 rank */ 1:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int32 win_type */ 3:
                    message.winType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionScoreChangeContent_WinContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 rank = 1; */
        if (message.rank !== 0n)
            writer.tag(1, WireType.Varint).int64(message.rank);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* int32 win_type = 3; */
        if (message.winType !== 0)
            writer.tag(3, WireType.Varint).int32(message.winType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionScoreChangeContent.WinContent
 */
export const LinkmicThemedCompetitionScoreChangeContent_WinContent = new LinkmicThemedCompetitionScoreChangeContent_WinContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionShowTimeStartContent$Type extends MessageType<LinkmicThemedCompetitionShowTimeStartContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionShowTimeStartContent", [
            { no: 1, name: "competition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "info", kind: "message", T: () => ThemedCompetitionInfo }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionShowTimeStartContent>): LinkmicThemedCompetitionShowTimeStartContent {
        const message = { competitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionShowTimeStartContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionShowTimeStartContent): LinkmicThemedCompetitionShowTimeStartContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 competition_id */ 1:
                    message.competitionId = reader.int64().toBigInt();
                    break;
                case /* data.ThemedCompetitionInfo info */ 2:
                    message.info = ThemedCompetitionInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionShowTimeStartContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 competition_id = 1; */
        if (message.competitionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.competitionId);
        /* data.ThemedCompetitionInfo info = 2; */
        if (message.info)
            ThemedCompetitionInfo.internalBinaryWrite(message.info, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionShowTimeStartContent
 */
export const LinkmicThemedCompetitionShowTimeStartContent = new LinkmicThemedCompetitionShowTimeStartContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionShowTimeFinishContent$Type extends MessageType<LinkmicThemedCompetitionShowTimeFinishContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionShowTimeFinishContent", [
            { no: 1, name: "competition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionShowTimeFinishContent>): LinkmicThemedCompetitionShowTimeFinishContent {
        const message = { competitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionShowTimeFinishContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionShowTimeFinishContent): LinkmicThemedCompetitionShowTimeFinishContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 competition_id */ 1:
                    message.competitionId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionShowTimeFinishContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 competition_id = 1; */
        if (message.competitionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.competitionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionShowTimeFinishContent
 */
export const LinkmicThemedCompetitionShowTimeFinishContent = new LinkmicThemedCompetitionShowTimeFinishContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionBannerMessageForPC$Type extends MessageType<LinkmicThemedCompetitionBannerMessageForPC> {
    constructor() {
        super("im.LinkmicThemedCompetitionBannerMessageForPC", [
            { no: 1, name: "content", kind: "message", T: () => LinkmicThemedCompetitionBannerMessageForPC_BannerContent },
            { no: 2, name: "refresh_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionBannerMessageForPC>): LinkmicThemedCompetitionBannerMessageForPC {
        const message = { refreshType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionBannerMessageForPC>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionBannerMessageForPC): LinkmicThemedCompetitionBannerMessageForPC {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.LinkmicThemedCompetitionBannerMessageForPC.BannerContent content */ 1:
                    message.content = LinkmicThemedCompetitionBannerMessageForPC_BannerContent.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* int32 refresh_type */ 2:
                    message.refreshType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionBannerMessageForPC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.LinkmicThemedCompetitionBannerMessageForPC.BannerContent content = 1; */
        if (message.content)
            LinkmicThemedCompetitionBannerMessageForPC_BannerContent.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 refresh_type = 2; */
        if (message.refreshType !== 0)
            writer.tag(2, WireType.Varint).int32(message.refreshType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionBannerMessageForPC
 */
export const LinkmicThemedCompetitionBannerMessageForPC = new LinkmicThemedCompetitionBannerMessageForPC$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionBannerMessageForPC_Content$Type extends MessageType<LinkmicThemedCompetitionBannerMessageForPC_Content> {
    constructor() {
        super("im.LinkmicThemedCompetitionBannerMessageForPC.Content", [
            { no: 1, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "delta_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "win_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionBannerMessageForPC_Content>): LinkmicThemedCompetitionBannerMessageForPC_Content {
        const message = { rank: 0n, nickname: "", deltaScore: 0n, winType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionBannerMessageForPC_Content>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionBannerMessageForPC_Content): LinkmicThemedCompetitionBannerMessageForPC_Content {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 rank */ 1:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* int64 delta_score */ 3:
                    message.deltaScore = reader.int64().toBigInt();
                    break;
                case /* int32 win_type */ 4:
                    message.winType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionBannerMessageForPC_Content, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 rank = 1; */
        if (message.rank !== 0n)
            writer.tag(1, WireType.Varint).int64(message.rank);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* int64 delta_score = 3; */
        if (message.deltaScore !== 0n)
            writer.tag(3, WireType.Varint).int64(message.deltaScore);
        /* int32 win_type = 4; */
        if (message.winType !== 0)
            writer.tag(4, WireType.Varint).int32(message.winType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionBannerMessageForPC.Content
 */
export const LinkmicThemedCompetitionBannerMessageForPC_Content = new LinkmicThemedCompetitionBannerMessageForPC_Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionBannerMessageForPC_BannerContent$Type extends MessageType<LinkmicThemedCompetitionBannerMessageForPC_BannerContent> {
    constructor() {
        super("im.LinkmicThemedCompetitionBannerMessageForPC.BannerContent", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_performer", kind: "message", T: () => User },
            { no: 3, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "total_performer_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "rotate_content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicThemedCompetitionBannerMessageForPC_Content },
            { no: 7, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionBannerMessageForPC_BannerContent>): LinkmicThemedCompetitionBannerMessageForPC_BannerContent {
        const message = { title: "", rank: 0n, totalPerformerCount: 0n, status: 0, rotateContent: [], version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionBannerMessageForPC_BannerContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionBannerMessageForPC_BannerContent): LinkmicThemedCompetitionBannerMessageForPC_BannerContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* data.User current_performer */ 2:
                    message.currentPerformer = User.internalBinaryRead(reader, reader.uint32(), options, message.currentPerformer);
                    break;
                case /* int64 rank */ 3:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* int64 total_performer_count */ 4:
                    message.totalPerformerCount = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 5:
                    message.status = reader.int32();
                    break;
                case /* repeated im.LinkmicThemedCompetitionBannerMessageForPC.Content rotate_content */ 6:
                    message.rotateContent.push(LinkmicThemedCompetitionBannerMessageForPC_Content.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 version */ 7:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionBannerMessageForPC_BannerContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* data.User current_performer = 2; */
        if (message.currentPerformer)
            User.internalBinaryWrite(message.currentPerformer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 rank = 3; */
        if (message.rank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rank);
        /* int64 total_performer_count = 4; */
        if (message.totalPerformerCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalPerformerCount);
        /* int32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* repeated im.LinkmicThemedCompetitionBannerMessageForPC.Content rotate_content = 6; */
        for (let i = 0; i < message.rotateContent.length; i++)
            LinkmicThemedCompetitionBannerMessageForPC_Content.internalBinaryWrite(message.rotateContent[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 version = 7; */
        if (message.version !== 0n)
            writer.tag(7, WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionBannerMessageForPC.BannerContent
 */
export const LinkmicThemedCompetitionBannerMessageForPC_BannerContent = new LinkmicThemedCompetitionBannerMessageForPC_BannerContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkmicThemedCompetitionToastMessageForPC$Type extends MessageType<LinkmicThemedCompetitionToastMessageForPC> {
    constructor() {
        super("im.LinkmicThemedCompetitionToastMessageForPC", [
            { no: 1, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkmicThemedCompetitionToastMessageForPC>): LinkmicThemedCompetitionToastMessageForPC {
        const message = { toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkmicThemedCompetitionToastMessageForPC>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkmicThemedCompetitionToastMessageForPC): LinkmicThemedCompetitionToastMessageForPC {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toast */ 1:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkmicThemedCompetitionToastMessageForPC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string toast = 1; */
        if (message.toast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LinkmicThemedCompetitionToastMessageForPC
 */
export const LinkmicThemedCompetitionToastMessageForPC = new LinkmicThemedCompetitionToastMessageForPC$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraceTimeMetricV2$Type extends MessageType<TraceTimeMetricV2> {
    constructor() {
        super("im.TraceTimeMetricV2", [
            { no: 1, name: "op_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "producer_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "consumer_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "msg_send_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TraceTimeMetricV2>): TraceTimeMetricV2 {
        const message = { opTimestamp: 0n, producerDuration: 0n, consumerDuration: 0n, msgSendTimestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TraceTimeMetricV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraceTimeMetricV2): TraceTimeMetricV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 op_timestamp */ 1:
                    message.opTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 producer_duration */ 2:
                    message.producerDuration = reader.int64().toBigInt();
                    break;
                case /* int64 consumer_duration */ 3:
                    message.consumerDuration = reader.int64().toBigInt();
                    break;
                case /* int64 msg_send_timestamp */ 4:
                    message.msgSendTimestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraceTimeMetricV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 op_timestamp = 1; */
        if (message.opTimestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.opTimestamp);
        /* int64 producer_duration = 2; */
        if (message.producerDuration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.producerDuration);
        /* int64 consumer_duration = 3; */
        if (message.consumerDuration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.consumerDuration);
        /* int64 msg_send_timestamp = 4; */
        if (message.msgSendTimestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.msgSendTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TraceTimeMetricV2
 */
export const TraceTimeMetricV2 = new TraceTimeMetricV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveEcomGeneralMessage$Type extends MessageType<LiveEcomGeneralMessage> {
    constructor() {
        super("im.LiveEcomGeneralMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logic_clock", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "trace_time_metric", kind: "message", T: () => TraceTimeMetricV2 },
            { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LiveEcomGeneralMessage>): LiveEcomGeneralMessage {
        const message = { contentType: "", contentFormat: "", logicClock: 0n, data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveEcomGeneralMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveEcomGeneralMessage): LiveEcomGeneralMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content_type */ 2:
                    message.contentType = reader.string();
                    break;
                case /* string content_format */ 3:
                    message.contentFormat = reader.string();
                    break;
                case /* int64 logic_clock */ 4:
                    message.logicClock = reader.int64().toBigInt();
                    break;
                case /* im.TraceTimeMetricV2 trace_time_metric */ 5:
                    message.traceTimeMetric = TraceTimeMetricV2.internalBinaryRead(reader, reader.uint32(), options, message.traceTimeMetric);
                    break;
                case /* bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveEcomGeneralMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content_type = 2; */
        if (message.contentType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contentType);
        /* string content_format = 3; */
        if (message.contentFormat !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentFormat);
        /* int64 logic_clock = 4; */
        if (message.logicClock !== 0n)
            writer.tag(4, WireType.Varint).int64(message.logicClock);
        /* im.TraceTimeMetricV2 trace_time_metric = 5; */
        if (message.traceTimeMetric)
            TraceTimeMetricV2.internalBinaryWrite(message.traceTimeMetric, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 6; */
        if (message.data.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LiveEcomGeneralMessage
 */
export const LiveEcomGeneralMessage = new LiveEcomGeneralMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponActivityInfoMessage$Type extends MessageType<CouponActivityInfoMessage> {
    constructor() {
        super("im.CouponActivityInfoMessage", [
            { no: 1, name: "activity_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "before_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "before_button", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "after_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "after_button", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CouponActivityInfoMessage>): CouponActivityInfoMessage {
        const message = { activityType: 0n, beforeText: "", beforeButton: "", afterText: "", afterButton: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponActivityInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponActivityInfoMessage): CouponActivityInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 activity_type */ 1:
                    message.activityType = reader.int64().toBigInt();
                    break;
                case /* string before_text */ 2:
                    message.beforeText = reader.string();
                    break;
                case /* string before_button */ 3:
                    message.beforeButton = reader.string();
                    break;
                case /* string after_text */ 4:
                    message.afterText = reader.string();
                    break;
                case /* string after_button */ 5:
                    message.afterButton = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponActivityInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 activity_type = 1; */
        if (message.activityType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.activityType);
        /* string before_text = 2; */
        if (message.beforeText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.beforeText);
        /* string before_button = 3; */
        if (message.beforeButton !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.beforeButton);
        /* string after_text = 4; */
        if (message.afterText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.afterText);
        /* string after_button = 5; */
        if (message.afterButton !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.afterButton);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CouponActivityInfoMessage
 */
export const CouponActivityInfoMessage = new CouponActivityInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponMetaInfoMessage$Type extends MessageType<CouponMetaInfoMessage> {
    constructor() {
        super("im.CouponMetaInfoMessage", [
            { no: 1, name: "coupon_meta_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expire_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "period_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "valid_period", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "start_apply_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "end_apply_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "coupon_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "threshold", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "credit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "max_apply_times", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "type_detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "discount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "shop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "pay_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "max_discount_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "shop_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "type_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "what_coupon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "coupon_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "left_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 25, name: "has_applied", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 27, name: "shop_logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "is_show", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 29, name: "total_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "live_coupon_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "coupon_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "user_apply_times", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 33, name: "can_continue_apply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 34, name: "coupon_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 35, name: "coupon_reset", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 36, name: "start_time_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 37, name: "expire_time_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 38, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 39, name: "kol_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 40, name: "product_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 41, name: "platform_sub_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 42, name: "has_available_goods", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 43, name: "type_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "kol_user_tag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 46, name: "type_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 47, name: "type_icon_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 48, name: "type_icon_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 49, name: "coupon_category", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 50, name: "extra_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CouponMetaInfoMessage>): CouponMetaInfoMessage {
        const message = { couponMetaId: "", startTime: "", expireTime: "", periodType: 0n, validPeriod: 0n, startApplyTime: "", endApplyTime: "", couponName: "", url: "", threshold: 0n, credit: 0n, maxApplyTimes: 0n, type: 0n, typeDetail: "", discount: 0, shopId: "", payType: 0n, maxDiscountLimit: 0n, shopName: "", typeString: "", whatCoupon: "", couponString: "", channelId: 0n, leftAmount: 0n, hasApplied: 0n, status: 0n, shopLogo: "", isShow: 0n, totalAmount: 0n, liveCouponStatus: 0, couponSource: 0, userApplyTimes: 0n, canContinueApply: false, couponStatus: false, couponReset: false, startTimeTimestamp: 0n, expireTimeTimestamp: 0n, avatar: "", kolUid: 0n, productIds: [], platformSubType: 0n, hasAvailableGoods: false, typeTitle: "", kolUserTag: 0n, typeIcon: "", typeIconWidth: 0n, typeIconHeight: 0n, couponCategory: "", extraData: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponMetaInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponMetaInfoMessage): CouponMetaInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string coupon_meta_id */ 1:
                    message.couponMetaId = reader.string();
                    break;
                case /* string start_time */ 2:
                    message.startTime = reader.string();
                    break;
                case /* string expire_time */ 3:
                    message.expireTime = reader.string();
                    break;
                case /* int64 period_type */ 4:
                    message.periodType = reader.int64().toBigInt();
                    break;
                case /* int64 valid_period */ 5:
                    message.validPeriod = reader.int64().toBigInt();
                    break;
                case /* string start_apply_time */ 6:
                    message.startApplyTime = reader.string();
                    break;
                case /* string end_apply_time */ 7:
                    message.endApplyTime = reader.string();
                    break;
                case /* string coupon_name */ 8:
                    message.couponName = reader.string();
                    break;
                case /* string url */ 9:
                    message.url = reader.string();
                    break;
                case /* int64 threshold */ 10:
                    message.threshold = reader.int64().toBigInt();
                    break;
                case /* int64 credit */ 11:
                    message.credit = reader.int64().toBigInt();
                    break;
                case /* int64 max_apply_times */ 12:
                    message.maxApplyTimes = reader.int64().toBigInt();
                    break;
                case /* int64 type */ 13:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* string type_detail */ 14:
                    message.typeDetail = reader.string();
                    break;
                case /* double discount */ 15:
                    message.discount = reader.double();
                    break;
                case /* string shop_id */ 16:
                    message.shopId = reader.string();
                    break;
                case /* int64 pay_type */ 17:
                    message.payType = reader.int64().toBigInt();
                    break;
                case /* int64 max_discount_limit */ 18:
                    message.maxDiscountLimit = reader.int64().toBigInt();
                    break;
                case /* string shop_name */ 19:
                    message.shopName = reader.string();
                    break;
                case /* string type_string */ 20:
                    message.typeString = reader.string();
                    break;
                case /* string what_coupon */ 21:
                    message.whatCoupon = reader.string();
                    break;
                case /* string coupon_string */ 22:
                    message.couponString = reader.string();
                    break;
                case /* int64 channel_id */ 23:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 left_amount */ 24:
                    message.leftAmount = reader.int64().toBigInt();
                    break;
                case /* int64 has_applied */ 25:
                    message.hasApplied = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 26:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string shop_logo */ 27:
                    message.shopLogo = reader.string();
                    break;
                case /* int64 is_show */ 28:
                    message.isShow = reader.int64().toBigInt();
                    break;
                case /* int64 total_amount */ 29:
                    message.totalAmount = reader.int64().toBigInt();
                    break;
                case /* int32 live_coupon_status */ 30:
                    message.liveCouponStatus = reader.int32();
                    break;
                case /* int32 coupon_source */ 31:
                    message.couponSource = reader.int32();
                    break;
                case /* int64 user_apply_times */ 32:
                    message.userApplyTimes = reader.int64().toBigInt();
                    break;
                case /* bool can_continue_apply */ 33:
                    message.canContinueApply = reader.bool();
                    break;
                case /* bool coupon_status */ 34:
                    message.couponStatus = reader.bool();
                    break;
                case /* bool coupon_reset */ 35:
                    message.couponReset = reader.bool();
                    break;
                case /* int64 start_time_timestamp */ 36:
                    message.startTimeTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 expire_time_timestamp */ 37:
                    message.expireTimeTimestamp = reader.int64().toBigInt();
                    break;
                case /* string avatar */ 38:
                    message.avatar = reader.string();
                    break;
                case /* int64 kol_uid */ 39:
                    message.kolUid = reader.int64().toBigInt();
                    break;
                case /* repeated int64 product_ids */ 40:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.productIds.push(reader.int64().toBigInt());
                    else
                        message.productIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 platform_sub_type */ 41:
                    message.platformSubType = reader.int64().toBigInt();
                    break;
                case /* bool has_available_goods */ 42:
                    message.hasAvailableGoods = reader.bool();
                    break;
                case /* string type_title */ 43:
                    message.typeTitle = reader.string();
                    break;
                case /* int64 kol_user_tag */ 45:
                    message.kolUserTag = reader.int64().toBigInt();
                    break;
                case /* string type_icon */ 46:
                    message.typeIcon = reader.string();
                    break;
                case /* int64 type_icon_width */ 47:
                    message.typeIconWidth = reader.int64().toBigInt();
                    break;
                case /* int64 type_icon_height */ 48:
                    message.typeIconHeight = reader.int64().toBigInt();
                    break;
                case /* string coupon_category */ 49:
                    message.couponCategory = reader.string();
                    break;
                case /* string extra_data */ 50:
                    message.extraData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponMetaInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string coupon_meta_id = 1; */
        if (message.couponMetaId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.couponMetaId);
        /* string start_time = 2; */
        if (message.startTime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startTime);
        /* string expire_time = 3; */
        if (message.expireTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.expireTime);
        /* int64 period_type = 4; */
        if (message.periodType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.periodType);
        /* int64 valid_period = 5; */
        if (message.validPeriod !== 0n)
            writer.tag(5, WireType.Varint).int64(message.validPeriod);
        /* string start_apply_time = 6; */
        if (message.startApplyTime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.startApplyTime);
        /* string end_apply_time = 7; */
        if (message.endApplyTime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.endApplyTime);
        /* string coupon_name = 8; */
        if (message.couponName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.couponName);
        /* string url = 9; */
        if (message.url !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.url);
        /* int64 threshold = 10; */
        if (message.threshold !== 0n)
            writer.tag(10, WireType.Varint).int64(message.threshold);
        /* int64 credit = 11; */
        if (message.credit !== 0n)
            writer.tag(11, WireType.Varint).int64(message.credit);
        /* int64 max_apply_times = 12; */
        if (message.maxApplyTimes !== 0n)
            writer.tag(12, WireType.Varint).int64(message.maxApplyTimes);
        /* int64 type = 13; */
        if (message.type !== 0n)
            writer.tag(13, WireType.Varint).int64(message.type);
        /* string type_detail = 14; */
        if (message.typeDetail !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.typeDetail);
        /* double discount = 15; */
        if (message.discount !== 0)
            writer.tag(15, WireType.Bit64).double(message.discount);
        /* string shop_id = 16; */
        if (message.shopId !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.shopId);
        /* int64 pay_type = 17; */
        if (message.payType !== 0n)
            writer.tag(17, WireType.Varint).int64(message.payType);
        /* int64 max_discount_limit = 18; */
        if (message.maxDiscountLimit !== 0n)
            writer.tag(18, WireType.Varint).int64(message.maxDiscountLimit);
        /* string shop_name = 19; */
        if (message.shopName !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.shopName);
        /* string type_string = 20; */
        if (message.typeString !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.typeString);
        /* string what_coupon = 21; */
        if (message.whatCoupon !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.whatCoupon);
        /* string coupon_string = 22; */
        if (message.couponString !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.couponString);
        /* int64 channel_id = 23; */
        if (message.channelId !== 0n)
            writer.tag(23, WireType.Varint).int64(message.channelId);
        /* int64 left_amount = 24; */
        if (message.leftAmount !== 0n)
            writer.tag(24, WireType.Varint).int64(message.leftAmount);
        /* int64 has_applied = 25; */
        if (message.hasApplied !== 0n)
            writer.tag(25, WireType.Varint).int64(message.hasApplied);
        /* int64 status = 26; */
        if (message.status !== 0n)
            writer.tag(26, WireType.Varint).int64(message.status);
        /* string shop_logo = 27; */
        if (message.shopLogo !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.shopLogo);
        /* int64 is_show = 28; */
        if (message.isShow !== 0n)
            writer.tag(28, WireType.Varint).int64(message.isShow);
        /* int64 total_amount = 29; */
        if (message.totalAmount !== 0n)
            writer.tag(29, WireType.Varint).int64(message.totalAmount);
        /* int32 live_coupon_status = 30; */
        if (message.liveCouponStatus !== 0)
            writer.tag(30, WireType.Varint).int32(message.liveCouponStatus);
        /* int32 coupon_source = 31; */
        if (message.couponSource !== 0)
            writer.tag(31, WireType.Varint).int32(message.couponSource);
        /* int64 user_apply_times = 32; */
        if (message.userApplyTimes !== 0n)
            writer.tag(32, WireType.Varint).int64(message.userApplyTimes);
        /* bool can_continue_apply = 33; */
        if (message.canContinueApply !== false)
            writer.tag(33, WireType.Varint).bool(message.canContinueApply);
        /* bool coupon_status = 34; */
        if (message.couponStatus !== false)
            writer.tag(34, WireType.Varint).bool(message.couponStatus);
        /* bool coupon_reset = 35; */
        if (message.couponReset !== false)
            writer.tag(35, WireType.Varint).bool(message.couponReset);
        /* int64 start_time_timestamp = 36; */
        if (message.startTimeTimestamp !== 0n)
            writer.tag(36, WireType.Varint).int64(message.startTimeTimestamp);
        /* int64 expire_time_timestamp = 37; */
        if (message.expireTimeTimestamp !== 0n)
            writer.tag(37, WireType.Varint).int64(message.expireTimeTimestamp);
        /* string avatar = 38; */
        if (message.avatar !== "")
            writer.tag(38, WireType.LengthDelimited).string(message.avatar);
        /* int64 kol_uid = 39; */
        if (message.kolUid !== 0n)
            writer.tag(39, WireType.Varint).int64(message.kolUid);
        /* repeated int64 product_ids = 40; */
        if (message.productIds.length) {
            writer.tag(40, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.productIds.length; i++)
                writer.int64(message.productIds[i]);
            writer.join();
        }
        /* int64 platform_sub_type = 41; */
        if (message.platformSubType !== 0n)
            writer.tag(41, WireType.Varint).int64(message.platformSubType);
        /* bool has_available_goods = 42; */
        if (message.hasAvailableGoods !== false)
            writer.tag(42, WireType.Varint).bool(message.hasAvailableGoods);
        /* string type_title = 43; */
        if (message.typeTitle !== "")
            writer.tag(43, WireType.LengthDelimited).string(message.typeTitle);
        /* int64 kol_user_tag = 45; */
        if (message.kolUserTag !== 0n)
            writer.tag(45, WireType.Varint).int64(message.kolUserTag);
        /* string type_icon = 46; */
        if (message.typeIcon !== "")
            writer.tag(46, WireType.LengthDelimited).string(message.typeIcon);
        /* int64 type_icon_width = 47; */
        if (message.typeIconWidth !== 0n)
            writer.tag(47, WireType.Varint).int64(message.typeIconWidth);
        /* int64 type_icon_height = 48; */
        if (message.typeIconHeight !== 0n)
            writer.tag(48, WireType.Varint).int64(message.typeIconHeight);
        /* string coupon_category = 49; */
        if (message.couponCategory !== "")
            writer.tag(49, WireType.LengthDelimited).string(message.couponCategory);
        /* string extra_data = 50; */
        if (message.extraData !== "")
            writer.tag(50, WireType.LengthDelimited).string(message.extraData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CouponMetaInfoMessage
 */
export const CouponMetaInfoMessage = new CouponMetaInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveEcomMessage$Type extends MessageType<LiveEcomMessage> {
    constructor() {
        super("im.LiveEcomMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "purchase_cnt", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "meta_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "server_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "countdown", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "activity_json_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "coupon_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "activity_info", kind: "message", T: () => CouponActivityInfoMessage },
            { no: 13, name: "coupon_meta", kind: "message", T: () => CouponMetaInfoMessage },
            { no: 14, name: "meta_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LiveEcomMessage>): LiveEcomMessage {
        const message = { msgType: 0, nickName: "", purchaseCnt: 0n, text: "", icon: "", metaId: 0n, serverTime: 0n, countdown: 0n, activityJsonStr: "", couponType: 0, metaIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveEcomMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveEcomMessage): LiveEcomMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* string nick_name */ 3:
                    message.nickName = reader.string();
                    break;
                case /* int64 purchase_cnt */ 4:
                    message.purchaseCnt = reader.int64().toBigInt();
                    break;
                case /* string text */ 5:
                    message.text = reader.string();
                    break;
                case /* string icon */ 6:
                    message.icon = reader.string();
                    break;
                case /* int64 meta_id */ 7:
                    message.metaId = reader.int64().toBigInt();
                    break;
                case /* int64 server_time */ 8:
                    message.serverTime = reader.int64().toBigInt();
                    break;
                case /* int64 countdown */ 9:
                    message.countdown = reader.int64().toBigInt();
                    break;
                case /* string activity_json_str */ 10:
                    message.activityJsonStr = reader.string();
                    break;
                case /* int32 coupon_type */ 11:
                    message.couponType = reader.int32();
                    break;
                case /* im.CouponActivityInfoMessage activity_info */ 12:
                    message.activityInfo = CouponActivityInfoMessage.internalBinaryRead(reader, reader.uint32(), options, message.activityInfo);
                    break;
                case /* im.CouponMetaInfoMessage coupon_meta */ 13:
                    message.couponMeta = CouponMetaInfoMessage.internalBinaryRead(reader, reader.uint32(), options, message.couponMeta);
                    break;
                case /* string meta_id_str */ 14:
                    message.metaIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveEcomMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* string nick_name = 3; */
        if (message.nickName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickName);
        /* int64 purchase_cnt = 4; */
        if (message.purchaseCnt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.purchaseCnt);
        /* string text = 5; */
        if (message.text !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.text);
        /* string icon = 6; */
        if (message.icon !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.icon);
        /* int64 meta_id = 7; */
        if (message.metaId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.metaId);
        /* int64 server_time = 8; */
        if (message.serverTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.serverTime);
        /* int64 countdown = 9; */
        if (message.countdown !== 0n)
            writer.tag(9, WireType.Varint).int64(message.countdown);
        /* string activity_json_str = 10; */
        if (message.activityJsonStr !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.activityJsonStr);
        /* int32 coupon_type = 11; */
        if (message.couponType !== 0)
            writer.tag(11, WireType.Varint).int32(message.couponType);
        /* im.CouponActivityInfoMessage activity_info = 12; */
        if (message.activityInfo)
            CouponActivityInfoMessage.internalBinaryWrite(message.activityInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* im.CouponMetaInfoMessage coupon_meta = 13; */
        if (message.couponMeta)
            CouponMetaInfoMessage.internalBinaryWrite(message.couponMeta, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string meta_id_str = 14; */
        if (message.metaIdStr !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.metaIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LiveEcomMessage
 */
export const LiveEcomMessage = new LiveEcomMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveMateDemoteMessage$Type extends MessageType<LiveMateDemoteMessage> {
    constructor() {
        super("im.LiveMateDemoteMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "re_push", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LiveMateDemoteMessage>): LiveMateDemoteMessage {
        const message = { rePush: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveMateDemoteMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveMateDemoteMessage): LiveMateDemoteMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool re_push */ 2:
                    message.rePush = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveMateDemoteMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool re_push = 2; */
        if (message.rePush !== false)
            writer.tag(2, WireType.Varint).bool(message.rePush);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LiveMateDemoteMessage
 */
export const LiveMateDemoteMessage = new LiveMateDemoteMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductChangeMessage$Type extends MessageType<ProductChangeMessage> {
    constructor() {
        super("im.ProductChangeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "update_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "update_product_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProductInfo },
            { no: 5, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "target_uid", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "sec_target_uid", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "update_category_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CategoryInfo }
        ]);
    }
    create(value?: PartialMessage<ProductChangeMessage>): ProductChangeMessage {
        const message = { updateTimestamp: 0n, updateToast: "", updateProductInfo: [], total: 0n, targetUid: [], secTargetUid: [], updateCategoryInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductChangeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductChangeMessage): ProductChangeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 update_timestamp */ 2:
                    message.updateTimestamp = reader.int64().toBigInt();
                    break;
                case /* string update_toast */ 3:
                    message.updateToast = reader.string();
                    break;
                case /* repeated im.ProductInfo update_product_info */ 4:
                    message.updateProductInfo.push(ProductInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total */ 5:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* repeated int64 target_uid */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.targetUid.push(reader.int64().toBigInt());
                    else
                        message.targetUid.push(reader.int64().toBigInt());
                    break;
                case /* repeated string sec_target_uid */ 7:
                    message.secTargetUid.push(reader.string());
                    break;
                case /* repeated im.CategoryInfo update_category_info */ 8:
                    message.updateCategoryInfo.push(CategoryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductChangeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 update_timestamp = 2; */
        if (message.updateTimestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.updateTimestamp);
        /* string update_toast = 3; */
        if (message.updateToast !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.updateToast);
        /* repeated im.ProductInfo update_product_info = 4; */
        for (let i = 0; i < message.updateProductInfo.length; i++)
            ProductInfo.internalBinaryWrite(message.updateProductInfo[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 total = 5; */
        if (message.total !== 0n)
            writer.tag(5, WireType.Varint).int64(message.total);
        /* repeated int64 target_uid = 6; */
        if (message.targetUid.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.targetUid.length; i++)
                writer.int64(message.targetUid[i]);
            writer.join();
        }
        /* repeated string sec_target_uid = 7; */
        for (let i = 0; i < message.secTargetUid.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.secTargetUid[i]);
        /* repeated im.CategoryInfo update_category_info = 8; */
        for (let i = 0; i < message.updateCategoryInfo.length; i++)
            CategoryInfo.internalBinaryWrite(message.updateCategoryInfo[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProductChangeMessage
 */
export const ProductChangeMessage = new ProductChangeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductInfo$Type extends MessageType<ProductInfo> {
    constructor() {
        super("im.ProductInfo", [
            { no: 1, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "target_flash_uids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "explain_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ProductInfo>): ProductInfo {
        const message = { promotionId: 0n, index: 0, targetFlashUids: [], explainType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductInfo): ProductInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 promotion_id */ 1:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* int32 index */ 2:
                    message.index = reader.int32();
                    break;
                case /* repeated int64 target_flash_uids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.targetFlashUids.push(reader.int64().toBigInt());
                    else
                        message.targetFlashUids.push(reader.int64().toBigInt());
                    break;
                case /* int64 explain_type */ 4:
                    message.explainType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 promotion_id = 1; */
        if (message.promotionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.promotionId);
        /* int32 index = 2; */
        if (message.index !== 0)
            writer.tag(2, WireType.Varint).int32(message.index);
        /* repeated int64 target_flash_uids = 3; */
        if (message.targetFlashUids.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.targetFlashUids.length; i++)
                writer.int64(message.targetFlashUids[i]);
            writer.join();
        }
        /* int64 explain_type = 4; */
        if (message.explainType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.explainType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProductInfo
 */
export const ProductInfo = new ProductInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryInfo$Type extends MessageType<CategoryInfo> {
    constructor() {
        super("im.CategoryInfo", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "promotion_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "unique_index", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryInfo>): CategoryInfo {
        const message = { id: 0, name: "", promotionIds: [], type: "", uniqueIndex: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CategoryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryInfo): CategoryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated string promotion_ids */ 3:
                    message.promotionIds.push(reader.string());
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                case /* string unique_index */ 5:
                    message.uniqueIndex = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated string promotion_ids = 3; */
        for (let i = 0; i < message.promotionIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.promotionIds[i]);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* string unique_index = 5; */
        if (message.uniqueIndex !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.uniqueIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CategoryInfo
 */
export const CategoryInfo = new CategoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedProductInfo$Type extends MessageType<UpdatedProductInfo> {
    constructor() {
        super("im.UpdatedProductInfo", [
            { no: 1, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "pop_upicon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedProductInfo>): UpdatedProductInfo {
        const message = { price: 0n, title: "", cover: "", status: 0n, popUpicon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedProductInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedProductInfo): UpdatedProductInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 price */ 1:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* int64 status */ 4:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string pop_upicon */ 5:
                    message.popUpicon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedProductInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 price = 1; */
        if (message.price !== 0n)
            writer.tag(1, WireType.Varint).int64(message.price);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* int64 status = 4; */
        if (message.status !== 0n)
            writer.tag(4, WireType.Varint).int64(message.status);
        /* string pop_upicon = 5; */
        if (message.popUpicon !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.popUpicon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdatedProductInfo
 */
export const UpdatedProductInfo = new UpdatedProductInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedCouponInfo$Type extends MessageType<UpdatedCouponInfo> {
    constructor() {
        super("im.UpdatedCouponInfo", [
            { no: 1, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "coupon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "coupon_applet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "coupon_meta_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedCouponInfo>): UpdatedCouponInfo {
        const message = { tag: "", couponUrl: "", couponApplet: "", isValid: false, couponMetaId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedCouponInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedCouponInfo): UpdatedCouponInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tag */ 1:
                    message.tag = reader.string();
                    break;
                case /* string coupon_url */ 2:
                    message.couponUrl = reader.string();
                    break;
                case /* string coupon_applet */ 3:
                    message.couponApplet = reader.string();
                    break;
                case /* bool is_valid */ 4:
                    message.isValid = reader.bool();
                    break;
                case /* string coupon_meta_id */ 5:
                    message.couponMetaId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedCouponInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tag = 1; */
        if (message.tag !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tag);
        /* string coupon_url = 2; */
        if (message.couponUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.couponUrl);
        /* string coupon_applet = 3; */
        if (message.couponApplet !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.couponApplet);
        /* bool is_valid = 4; */
        if (message.isValid !== false)
            writer.tag(4, WireType.Varint).bool(message.isValid);
        /* string coupon_meta_id = 5; */
        if (message.couponMetaId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.couponMetaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdatedCouponInfo
 */
export const UpdatedCouponInfo = new UpdatedCouponInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedCampaignInfo$Type extends MessageType<UpdatedCampaignInfo> {
    constructor() {
        super("im.UpdatedCampaignInfo", [
            { no: 1, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "end_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "time_start_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "time_end_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "user_limit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "is_preheat", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "campaign_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedCampaignInfo>): UpdatedCampaignInfo {
        const message = { isValid: false, label: "", price: "", pic: "", startTime: "", endTime: "", timeStartLabel: "", timeEndLabel: "", userLimit: "", isPreheat: "", campaignId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedCampaignInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedCampaignInfo): UpdatedCampaignInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_valid */ 1:
                    message.isValid = reader.bool();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* string price */ 3:
                    message.price = reader.string();
                    break;
                case /* string pic */ 4:
                    message.pic = reader.string();
                    break;
                case /* string start_time */ 5:
                    message.startTime = reader.string();
                    break;
                case /* string end_time */ 6:
                    message.endTime = reader.string();
                    break;
                case /* string time_start_label */ 7:
                    message.timeStartLabel = reader.string();
                    break;
                case /* string time_end_label */ 8:
                    message.timeEndLabel = reader.string();
                    break;
                case /* string user_limit */ 9:
                    message.userLimit = reader.string();
                    break;
                case /* string is_preheat */ 10:
                    message.isPreheat = reader.string();
                    break;
                case /* string campaign_id */ 11:
                    message.campaignId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedCampaignInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_valid = 1; */
        if (message.isValid !== false)
            writer.tag(1, WireType.Varint).bool(message.isValid);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* string price = 3; */
        if (message.price !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.price);
        /* string pic = 4; */
        if (message.pic !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pic);
        /* string start_time = 5; */
        if (message.startTime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.startTime);
        /* string end_time = 6; */
        if (message.endTime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.endTime);
        /* string time_start_label = 7; */
        if (message.timeStartLabel !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.timeStartLabel);
        /* string time_end_label = 8; */
        if (message.timeEndLabel !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.timeEndLabel);
        /* string user_limit = 9; */
        if (message.userLimit !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.userLimit);
        /* string is_preheat = 10; */
        if (message.isPreheat !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.isPreheat);
        /* string campaign_id = 11; */
        if (message.campaignId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.campaignId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdatedCampaignInfo
 */
export const UpdatedCampaignInfo = new UpdatedCampaignInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkuInfo$Type extends MessageType<SkuInfo> {
    constructor() {
        super("im.SkuInfo", [
            { no: 1, name: "sku_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stock_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "coupon_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SkuInfo>): SkuInfo {
        const message = { skuId: "", stockNum: 0n, price: 0n, couponPrice: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkuInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkuInfo): SkuInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sku_id */ 1:
                    message.skuId = reader.string();
                    break;
                case /* int64 stock_num */ 2:
                    message.stockNum = reader.int64().toBigInt();
                    break;
                case /* int64 price */ 3:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int64 coupon_price */ 4:
                    message.couponPrice = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkuInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sku_id = 1; */
        if (message.skuId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.skuId);
        /* int64 stock_num = 2; */
        if (message.stockNum !== 0n)
            writer.tag(2, WireType.Varint).int64(message.stockNum);
        /* int64 price = 3; */
        if (message.price !== 0n)
            writer.tag(3, WireType.Varint).int64(message.price);
        /* int64 coupon_price = 4; */
        if (message.couponPrice !== 0n)
            writer.tag(4, WireType.Varint).int64(message.couponPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SkuInfo
 */
export const SkuInfo = new SkuInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraceTimeMetric$Type extends MessageType<TraceTimeMetric> {
    constructor() {
        super("im.TraceTimeMetric", [
            { no: 1, name: "op_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "producer_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "consumer_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "msg_send_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TraceTimeMetric>): TraceTimeMetric {
        const message = { opTimestamp: 0n, producerDuration: 0n, consumerDuration: 0n, msgSendTimestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TraceTimeMetric>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraceTimeMetric): TraceTimeMetric {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 op_timestamp */ 1:
                    message.opTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 producer_duration */ 2:
                    message.producerDuration = reader.int64().toBigInt();
                    break;
                case /* int64 consumer_duration */ 3:
                    message.consumerDuration = reader.int64().toBigInt();
                    break;
                case /* int64 msg_send_timestamp */ 4:
                    message.msgSendTimestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraceTimeMetric, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 op_timestamp = 1; */
        if (message.opTimestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.opTimestamp);
        /* int64 producer_duration = 2; */
        if (message.producerDuration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.producerDuration);
        /* int64 consumer_duration = 3; */
        if (message.consumerDuration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.consumerDuration);
        /* int64 msg_send_timestamp = 4; */
        if (message.msgSendTimestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.msgSendTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TraceTimeMetric
 */
export const TraceTimeMetric = new TraceTimeMetric$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedSkuInfo$Type extends MessageType<UpdatedSkuInfo> {
    constructor() {
        super("im.UpdatedSkuInfo", [
            { no: 2, name: "min_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "max_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "unuse_min_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "coupon_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedSkuInfo>): UpdatedSkuInfo {
        const message = { minPrice: 0n, maxPrice: 0n, unuseMinPrice: 0n, couponPrice: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedSkuInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedSkuInfo): UpdatedSkuInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 min_price */ 2:
                    message.minPrice = reader.int64().toBigInt();
                    break;
                case /* int64 max_price */ 3:
                    message.maxPrice = reader.int64().toBigInt();
                    break;
                case /* int64 unuse_min_price */ 4:
                    message.unuseMinPrice = reader.int64().toBigInt();
                    break;
                case /* int64 coupon_price */ 5:
                    message.couponPrice = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedSkuInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 min_price = 2; */
        if (message.minPrice !== 0n)
            writer.tag(2, WireType.Varint).int64(message.minPrice);
        /* int64 max_price = 3; */
        if (message.maxPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.maxPrice);
        /* int64 unuse_min_price = 4; */
        if (message.unuseMinPrice !== 0n)
            writer.tag(4, WireType.Varint).int64(message.unuseMinPrice);
        /* int64 coupon_price = 5; */
        if (message.couponPrice !== 0n)
            writer.tag(5, WireType.Varint).int64(message.couponPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdatedSkuInfo
 */
export const UpdatedSkuInfo = new UpdatedSkuInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedCommentaryVideoInfo$Type extends MessageType<UpdatedCommentaryVideoInfo> {
    constructor() {
        super("im.UpdatedCommentaryVideoInfo", [
            { no: 1, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedCommentaryVideoInfo>): UpdatedCommentaryVideoInfo {
        const message = { action: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedCommentaryVideoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedCommentaryVideoInfo): UpdatedCommentaryVideoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 action */ 1:
                    message.action = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedCommentaryVideoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 action = 1; */
        if (message.action !== 0n)
            writer.tag(1, WireType.Varint).int64(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdatedCommentaryVideoInfo
 */
export const UpdatedCommentaryVideoInfo = new UpdatedCommentaryVideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedGroupInfo$Type extends MessageType<UpdatedGroupInfo> {
    constructor() {
        super("im.UpdatedGroupInfo", [
            { no: 1, name: "avatar_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "joined", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "group_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "persent", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatedGroupInfo>): UpdatedGroupInfo {
        const message = { avatarList: [], joined: 0n, groupSize: 0n, persent: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedGroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedGroupInfo): UpdatedGroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string avatar_list */ 1:
                    message.avatarList.push(reader.string());
                    break;
                case /* int64 joined */ 2:
                    message.joined = reader.int64().toBigInt();
                    break;
                case /* int64 group_size */ 3:
                    message.groupSize = reader.int64().toBigInt();
                    break;
                case /* int64 persent */ 4:
                    message.persent = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedGroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string avatar_list = 1; */
        for (let i = 0; i < message.avatarList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.avatarList[i]);
        /* int64 joined = 2; */
        if (message.joined !== 0n)
            writer.tag(2, WireType.Varint).int64(message.joined);
        /* int64 group_size = 3; */
        if (message.groupSize !== 0n)
            writer.tag(3, WireType.Varint).int64(message.groupSize);
        /* int64 persent = 4; */
        if (message.persent !== 0n)
            writer.tag(4, WireType.Varint).int64(message.persent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdatedGroupInfo
 */
export const UpdatedGroupInfo = new UpdatedGroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserBid$Type extends MessageType<UserBid> {
    constructor() {
        super("im.UserBid", [
            { no: 1, name: "pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UserBid>): UserBid {
        const message = { pic: "", name: "", price: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserBid>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserBid): UserBid {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pic */ 1:
                    message.pic = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 price */ 3:
                    message.price = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserBid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pic = 1; */
        if (message.pic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pic);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 price = 3; */
        if (message.price !== 0n)
            writer.tag(3, WireType.Varint).int64(message.price);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserBid
 */
export const UserBid = new UserBid$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Img$Type extends MessageType<Img> {
    constructor() {
        super("im.Img", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Img>): Img {
        const message = { urlList: [], height: 0, width: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Img>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Img): Img {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* int32 height */ 2:
                    message.height = reader.int32();
                    break;
                case /* int32 width */ 3:
                    message.width = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Img, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* int32 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int32(message.height);
        /* int32 width = 3; */
        if (message.width !== 0)
            writer.tag(3, WireType.Varint).int32(message.width);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Img
 */
export const Img = new Img$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurrentUserInfo$Type extends MessageType<CurrentUserInfo> {
    constructor() {
        super("im.CurrentUserInfo", [
            { no: 1, name: "user_pic", kind: "message", T: () => Img },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CurrentUserInfo>): CurrentUserInfo {
        const message = { userName: "", userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CurrentUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CurrentUserInfo): CurrentUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Img user_pic */ 1:
                    message.userPic = Img.internalBinaryRead(reader, reader.uint32(), options, message.userPic);
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CurrentUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Img user_pic = 1; */
        if (message.userPic)
            Img.internalBinaryWrite(message.userPic, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CurrentUserInfo
 */
export const CurrentUserInfo = new CurrentUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IncrPriceList$Type extends MessageType<IncrPriceList> {
    constructor() {
        super("im.IncrPriceList", [
            { no: 1, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "range", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<IncrPriceList>): IncrPriceList {
        const message = { price: 0n, range: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IncrPriceList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IncrPriceList): IncrPriceList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 price */ 1:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int64 range */ 2:
                    message.range = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IncrPriceList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 price = 1; */
        if (message.price !== 0n)
            writer.tag(1, WireType.Varint).int64(message.price);
        /* int64 range = 2; */
        if (message.range !== 0n)
            writer.tag(2, WireType.Varint).int64(message.range);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.IncrPriceList
 */
export const IncrPriceList = new IncrPriceList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionInfo$Type extends MessageType<AuctionInfo> {
    constructor() {
        super("im.AuctionInfo", [
            { no: 1, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "price_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "current_user_info", kind: "message", T: () => CurrentUserInfo },
            { no: 6, name: "incr_price_lists", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IncrPriceList },
            { no: 7, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "biz_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionInfo>): AuctionInfo {
        const message = { price: 0n, priceLabel: "", status: 0, jumpUrl: "", incrPriceLists: [], buttonLabel: "", productId: 0n, endTime: 0n, bizId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionInfo): AuctionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 price */ 1:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* string price_label */ 2:
                    message.priceLabel = reader.string();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string jump_url */ 4:
                    message.jumpUrl = reader.string();
                    break;
                case /* im.CurrentUserInfo current_user_info */ 5:
                    message.currentUserInfo = CurrentUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.currentUserInfo);
                    break;
                case /* repeated im.IncrPriceList incr_price_lists */ 6:
                    message.incrPriceLists.push(IncrPriceList.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string button_label */ 7:
                    message.buttonLabel = reader.string();
                    break;
                case /* int64 product_id */ 8:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 9:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 biz_id */ 10:
                    message.bizId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 price = 1; */
        if (message.price !== 0n)
            writer.tag(1, WireType.Varint).int64(message.price);
        /* string price_label = 2; */
        if (message.priceLabel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.priceLabel);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string jump_url = 4; */
        if (message.jumpUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jumpUrl);
        /* im.CurrentUserInfo current_user_info = 5; */
        if (message.currentUserInfo)
            CurrentUserInfo.internalBinaryWrite(message.currentUserInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.IncrPriceList incr_price_lists = 6; */
        for (let i = 0; i < message.incrPriceLists.length; i++)
            IncrPriceList.internalBinaryWrite(message.incrPriceLists[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string button_label = 7; */
        if (message.buttonLabel !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.buttonLabel);
        /* int64 product_id = 8; */
        if (message.productId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.productId);
        /* int64 end_time = 9; */
        if (message.endTime !== 0n)
            writer.tag(9, WireType.Varint).int64(message.endTime);
        /* int32 biz_id = 10; */
        if (message.bizId !== 0)
            writer.tag(10, WireType.Varint).int32(message.bizId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionInfo
 */
export const AuctionInfo = new AuctionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionSuccess$Type extends MessageType<AuctionSuccess> {
    constructor() {
        super("im.AuctionSuccess", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "product_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "product_pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "charge", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "freight", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "freight_collect", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "left_payment_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "biz_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "deposit_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionSuccess>): AuctionSuccess {
        const message = { title: "", productId: 0n, productName: "", productPic: "", price: 0n, charge: 0n, freight: 0n, total: 0n, buttonLabel: "", jumpUrl: "", freightCollect: "", leftPaymentTime: 0n, bizId: 0, depositInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionSuccess): AuctionSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* int64 product_id */ 2:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* string product_name */ 3:
                    message.productName = reader.string();
                    break;
                case /* string product_pic */ 4:
                    message.productPic = reader.string();
                    break;
                case /* int64 price */ 5:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* int64 charge */ 6:
                    message.charge = reader.int64().toBigInt();
                    break;
                case /* int64 freight */ 7:
                    message.freight = reader.int64().toBigInt();
                    break;
                case /* int64 total */ 8:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* string button_label */ 9:
                    message.buttonLabel = reader.string();
                    break;
                case /* string jump_url */ 10:
                    message.jumpUrl = reader.string();
                    break;
                case /* string freight_collect */ 11:
                    message.freightCollect = reader.string();
                    break;
                case /* int64 left_payment_time */ 12:
                    message.leftPaymentTime = reader.int64().toBigInt();
                    break;
                case /* int32 biz_id */ 13:
                    message.bizId = reader.int32();
                    break;
                case /* string deposit_info */ 14:
                    message.depositInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int64 product_id = 2; */
        if (message.productId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.productId);
        /* string product_name = 3; */
        if (message.productName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.productName);
        /* string product_pic = 4; */
        if (message.productPic !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.productPic);
        /* int64 price = 5; */
        if (message.price !== 0n)
            writer.tag(5, WireType.Varint).int64(message.price);
        /* int64 charge = 6; */
        if (message.charge !== 0n)
            writer.tag(6, WireType.Varint).int64(message.charge);
        /* int64 freight = 7; */
        if (message.freight !== 0n)
            writer.tag(7, WireType.Varint).int64(message.freight);
        /* int64 total = 8; */
        if (message.total !== 0n)
            writer.tag(8, WireType.Varint).int64(message.total);
        /* string button_label = 9; */
        if (message.buttonLabel !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.buttonLabel);
        /* string jump_url = 10; */
        if (message.jumpUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.jumpUrl);
        /* string freight_collect = 11; */
        if (message.freightCollect !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.freightCollect);
        /* int64 left_payment_time = 12; */
        if (message.leftPaymentTime !== 0n)
            writer.tag(12, WireType.Varint).int64(message.leftPaymentTime);
        /* int32 biz_id = 13; */
        if (message.bizId !== 0)
            writer.tag(13, WireType.Varint).int32(message.bizId);
        /* string deposit_info = 14; */
        if (message.depositInfo !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.depositInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionSuccess
 */
export const AuctionSuccess = new AuctionSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedpackActivityInfo$Type extends MessageType<RedpackActivityInfo> {
    constructor() {
        super("im.RedpackActivityInfo", [
            { no: 1, name: "redpack_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "redpack_activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "redpack_activity_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_apply_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end_apply_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "preheat_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "total_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "author_avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "author_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "pendant_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "redpack_front_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "redpack_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "redpack_after_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "redpack_after_belt_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "scatter_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "server_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "max_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "show_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "shorttouch_pendant_background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "shorttouch_pendant_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "shorttouch_lottie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RedpackActivityInfo>): RedpackActivityInfo {
        const message = { redpackType: 0n, redpackActivityId: "", redpackActivityName: "", startApplyTime: 0n, endApplyTime: 0n, preheatTime: 0n, totalAmount: 0n, authorAvatarUrl: "", authorName: "", pendantBackgroundUrl: "", redpackFrontBackgroundUrl: "", redpackLabel: "", redpackAfterBackgroundUrl: "", redpackAfterBeltUrl: "", scatterTime: 0n, serverTime: 0n, maxAmount: 0n, showType: 0n, shorttouchPendantBackgroundUrl: "", shorttouchPendantIconUrl: "", shorttouchLottieUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedpackActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedpackActivityInfo): RedpackActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 redpack_type */ 1:
                    message.redpackType = reader.int64().toBigInt();
                    break;
                case /* string redpack_activity_id */ 2:
                    message.redpackActivityId = reader.string();
                    break;
                case /* string redpack_activity_name */ 3:
                    message.redpackActivityName = reader.string();
                    break;
                case /* int64 start_apply_time */ 4:
                    message.startApplyTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_apply_time */ 5:
                    message.endApplyTime = reader.int64().toBigInt();
                    break;
                case /* int64 preheat_time */ 6:
                    message.preheatTime = reader.int64().toBigInt();
                    break;
                case /* int64 total_amount */ 7:
                    message.totalAmount = reader.int64().toBigInt();
                    break;
                case /* string author_avatar_url */ 8:
                    message.authorAvatarUrl = reader.string();
                    break;
                case /* string author_name */ 9:
                    message.authorName = reader.string();
                    break;
                case /* string pendant_background_url */ 10:
                    message.pendantBackgroundUrl = reader.string();
                    break;
                case /* string redpack_front_background_url */ 11:
                    message.redpackFrontBackgroundUrl = reader.string();
                    break;
                case /* string redpack_label */ 12:
                    message.redpackLabel = reader.string();
                    break;
                case /* string redpack_after_background_url */ 13:
                    message.redpackAfterBackgroundUrl = reader.string();
                    break;
                case /* string redpack_after_belt_url */ 14:
                    message.redpackAfterBeltUrl = reader.string();
                    break;
                case /* int64 scatter_time */ 15:
                    message.scatterTime = reader.int64().toBigInt();
                    break;
                case /* int64 server_time */ 16:
                    message.serverTime = reader.int64().toBigInt();
                    break;
                case /* int64 max_amount */ 17:
                    message.maxAmount = reader.int64().toBigInt();
                    break;
                case /* int64 show_type */ 18:
                    message.showType = reader.int64().toBigInt();
                    break;
                case /* string shorttouch_pendant_background_url */ 19:
                    message.shorttouchPendantBackgroundUrl = reader.string();
                    break;
                case /* string shorttouch_pendant_icon_url */ 20:
                    message.shorttouchPendantIconUrl = reader.string();
                    break;
                case /* string shorttouch_lottie_url */ 21:
                    message.shorttouchLottieUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedpackActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 redpack_type = 1; */
        if (message.redpackType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.redpackType);
        /* string redpack_activity_id = 2; */
        if (message.redpackActivityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.redpackActivityId);
        /* string redpack_activity_name = 3; */
        if (message.redpackActivityName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.redpackActivityName);
        /* int64 start_apply_time = 4; */
        if (message.startApplyTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startApplyTime);
        /* int64 end_apply_time = 5; */
        if (message.endApplyTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.endApplyTime);
        /* int64 preheat_time = 6; */
        if (message.preheatTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.preheatTime);
        /* int64 total_amount = 7; */
        if (message.totalAmount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.totalAmount);
        /* string author_avatar_url = 8; */
        if (message.authorAvatarUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.authorAvatarUrl);
        /* string author_name = 9; */
        if (message.authorName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.authorName);
        /* string pendant_background_url = 10; */
        if (message.pendantBackgroundUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.pendantBackgroundUrl);
        /* string redpack_front_background_url = 11; */
        if (message.redpackFrontBackgroundUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.redpackFrontBackgroundUrl);
        /* string redpack_label = 12; */
        if (message.redpackLabel !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.redpackLabel);
        /* string redpack_after_background_url = 13; */
        if (message.redpackAfterBackgroundUrl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.redpackAfterBackgroundUrl);
        /* string redpack_after_belt_url = 14; */
        if (message.redpackAfterBeltUrl !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.redpackAfterBeltUrl);
        /* int64 scatter_time = 15; */
        if (message.scatterTime !== 0n)
            writer.tag(15, WireType.Varint).int64(message.scatterTime);
        /* int64 server_time = 16; */
        if (message.serverTime !== 0n)
            writer.tag(16, WireType.Varint).int64(message.serverTime);
        /* int64 max_amount = 17; */
        if (message.maxAmount !== 0n)
            writer.tag(17, WireType.Varint).int64(message.maxAmount);
        /* int64 show_type = 18; */
        if (message.showType !== 0n)
            writer.tag(18, WireType.Varint).int64(message.showType);
        /* string shorttouch_pendant_background_url = 19; */
        if (message.shorttouchPendantBackgroundUrl !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.shorttouchPendantBackgroundUrl);
        /* string shorttouch_pendant_icon_url = 20; */
        if (message.shorttouchPendantIconUrl !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.shorttouchPendantIconUrl);
        /* string shorttouch_lottie_url = 21; */
        if (message.shorttouchLottieUrl !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.shorttouchLottieUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RedpackActivityInfo
 */
export const RedpackActivityInfo = new RedpackActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatedCartInfo$Type extends MessageType<UpdatedCartInfo> {
    constructor() {
        super("im.UpdatedCartInfo", [
            { no: 1, name: "vertical", kind: "message", T: () => CartVertical },
            { no: 2, name: "horizontal", kind: "message", T: () => CartHorizontal },
            { no: 3, name: "global_custom_icons", kind: "message", T: () => GlobalCustomIcons }
        ]);
    }
    create(value?: PartialMessage<UpdatedCartInfo>): UpdatedCartInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatedCartInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatedCartInfo): UpdatedCartInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.CartVertical vertical */ 1:
                    message.vertical = CartVertical.internalBinaryRead(reader, reader.uint32(), options, message.vertical);
                    break;
                case /* data.CartHorizontal horizontal */ 2:
                    message.horizontal = CartHorizontal.internalBinaryRead(reader, reader.uint32(), options, message.horizontal);
                    break;
                case /* data.GlobalCustomIcons global_custom_icons */ 3:
                    message.globalCustomIcons = GlobalCustomIcons.internalBinaryRead(reader, reader.uint32(), options, message.globalCustomIcons);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatedCartInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.CartVertical vertical = 1; */
        if (message.vertical)
            CartVertical.internalBinaryWrite(message.vertical, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.CartHorizontal horizontal = 2; */
        if (message.horizontal)
            CartHorizontal.internalBinaryWrite(message.horizontal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.GlobalCustomIcons global_custom_icons = 3; */
        if (message.globalCustomIcons)
            GlobalCustomIcons.internalBinaryWrite(message.globalCustomIcons, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdatedCartInfo
 */
export const UpdatedCartInfo = new UpdatedCartInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryProductShortInfo$Type extends MessageType<LotteryProductShortInfo> {
    constructor() {
        super("im.LotteryProductShortInfo", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryProductShortInfo>): LotteryProductShortInfo {
        const message = { productId: 0n, img: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryProductShortInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryProductShortInfo): LotteryProductShortInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* string img */ 2:
                    message.img = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryProductShortInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        /* string img = 2; */
        if (message.img !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.img);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryProductShortInfo
 */
export const LotteryProductShortInfo = new LotteryProductShortInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryInfo$Type extends MessageType<LotteryInfo> {
    constructor() {
        super("im.LotteryInfo", [
            { no: 1, name: "lottery_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "enter_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "open_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "product_info", kind: "message", T: () => LotteryProductShortInfo }
        ]);
    }
    create(value?: PartialMessage<LotteryInfo>): LotteryInfo {
        const message = { lotteryType: 0n, enterIcon: "", icon: "", activityId: "", openTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryInfo): LotteryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 lottery_type */ 1:
                    message.lotteryType = reader.int64().toBigInt();
                    break;
                case /* string enter_icon */ 2:
                    message.enterIcon = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string activity_id */ 4:
                    message.activityId = reader.string();
                    break;
                case /* int64 open_time */ 5:
                    message.openTime = reader.int64().toBigInt();
                    break;
                case /* im.LotteryProductShortInfo product_info */ 6:
                    message.productInfo = LotteryProductShortInfo.internalBinaryRead(reader, reader.uint32(), options, message.productInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 lottery_type = 1; */
        if (message.lotteryType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.lotteryType);
        /* string enter_icon = 2; */
        if (message.enterIcon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.enterIcon);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string activity_id = 4; */
        if (message.activityId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.activityId);
        /* int64 open_time = 5; */
        if (message.openTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.openTime);
        /* im.LotteryProductShortInfo product_info = 6; */
        if (message.productInfo)
            LotteryProductShortInfo.internalBinaryWrite(message.productInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryInfo
 */
export const LotteryInfo = new LotteryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryUnusualInfo$Type extends MessageType<LotteryUnusualInfo> {
    constructor() {
        super("im.LotteryUnusualInfo", [
            { no: 1, name: "product_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "open_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryUnusualInfo>): LotteryUnusualInfo {
        const message = { productName: "", openTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryUnusualInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryUnusualInfo): LotteryUnusualInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string product_name */ 1:
                    message.productName = reader.string();
                    break;
                case /* int64 open_time */ 2:
                    message.openTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryUnusualInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string product_name = 1; */
        if (message.productName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productName);
        /* int64 open_time = 2; */
        if (message.openTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryUnusualInfo
 */
export const LotteryUnusualInfo = new LotteryUnusualInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinLotteryAlert$Type extends MessageType<WinLotteryAlert> {
    constructor() {
        super("im.WinLotteryAlert", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WinLotteryAlert>): WinLotteryAlert {
        const message = { title: "", content: "", buttonLabel: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinLotteryAlert>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinLotteryAlert): WinLotteryAlert {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string button_label */ 3:
                    message.buttonLabel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinLotteryAlert, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string button_label = 3; */
        if (message.buttonLabel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.buttonLabel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WinLotteryAlert
 */
export const WinLotteryAlert = new WinLotteryAlert$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinLotteryInfo$Type extends MessageType<WinLotteryInfo> {
    constructor() {
        super("im.WinLotteryInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "win_record_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "is_addressed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "alert", kind: "message", T: () => WinLotteryAlert },
            { no: 9, name: "is_win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "activity_price", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "buy_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "lottery_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "product_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WinLotteryInfo>): WinLotteryInfo {
        const message = { title: "", name: "", img: "", buttonLabel: "", winRecordId: "", activityId: "", isAddressed: false, isWin: false, jumpUrl: "", productId: 0n, activityPrice: [], buyTime: 0n, lotteryType: 0n, productIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinLotteryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinLotteryInfo): WinLotteryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string img */ 3:
                    message.img = reader.string();
                    break;
                case /* string button_label */ 4:
                    message.buttonLabel = reader.string();
                    break;
                case /* string win_record_id */ 5:
                    message.winRecordId = reader.string();
                    break;
                case /* string activity_id */ 6:
                    message.activityId = reader.string();
                    break;
                case /* bool is_addressed */ 7:
                    message.isAddressed = reader.bool();
                    break;
                case /* im.WinLotteryAlert alert */ 8:
                    message.alert = WinLotteryAlert.internalBinaryRead(reader, reader.uint32(), options, message.alert);
                    break;
                case /* bool is_win */ 9:
                    message.isWin = reader.bool();
                    break;
                case /* string jump_url */ 10:
                    message.jumpUrl = reader.string();
                    break;
                case /* int64 product_id */ 11:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 activity_price */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityPrice.push(reader.int64().toBigInt());
                    else
                        message.activityPrice.push(reader.int64().toBigInt());
                    break;
                case /* int64 buy_time */ 13:
                    message.buyTime = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_type */ 14:
                    message.lotteryType = reader.int64().toBigInt();
                    break;
                case /* string product_id_str */ 15:
                    message.productIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinLotteryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string img = 3; */
        if (message.img !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.img);
        /* string button_label = 4; */
        if (message.buttonLabel !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.buttonLabel);
        /* string win_record_id = 5; */
        if (message.winRecordId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.winRecordId);
        /* string activity_id = 6; */
        if (message.activityId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.activityId);
        /* bool is_addressed = 7; */
        if (message.isAddressed !== false)
            writer.tag(7, WireType.Varint).bool(message.isAddressed);
        /* im.WinLotteryAlert alert = 8; */
        if (message.alert)
            WinLotteryAlert.internalBinaryWrite(message.alert, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool is_win = 9; */
        if (message.isWin !== false)
            writer.tag(9, WireType.Varint).bool(message.isWin);
        /* string jump_url = 10; */
        if (message.jumpUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.jumpUrl);
        /* int64 product_id = 11; */
        if (message.productId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.productId);
        /* repeated int64 activity_price = 12; */
        if (message.activityPrice.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activityPrice.length; i++)
                writer.int64(message.activityPrice[i]);
            writer.join();
        }
        /* int64 buy_time = 13; */
        if (message.buyTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.buyTime);
        /* int64 lottery_type = 14; */
        if (message.lotteryType !== 0n)
            writer.tag(14, WireType.Varint).int64(message.lotteryType);
        /* string product_id_str = 15; */
        if (message.productIdStr !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.productIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WinLotteryInfo
 */
export const WinLotteryInfo = new WinLotteryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BenefitLabel$Type extends MessageType<BenefitLabel> {
    constructor() {
        super("im.BenefitLabel", [
            { no: 1, name: "LeftText", kind: "scalar", jsonName: "LeftText", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "RightText", kind: "scalar", jsonName: "RightText", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "TextStyle", kind: "scalar", jsonName: "TextStyle", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "ColorStyle", kind: "scalar", jsonName: "ColorStyle", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "DivLine", kind: "scalar", jsonName: "DivLine", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BenefitLabel>): BenefitLabel {
        const message = { leftText: "", rightText: "", textStyle: 0, colorStyle: 0, divLine: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BenefitLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BenefitLabel): BenefitLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string LeftText = 1 [json_name = "LeftText"];*/ 1:
                    message.leftText = reader.string();
                    break;
                case /* string RightText = 2 [json_name = "RightText"];*/ 2:
                    message.rightText = reader.string();
                    break;
                case /* int32 TextStyle = 3 [json_name = "TextStyle"];*/ 3:
                    message.textStyle = reader.int32();
                    break;
                case /* int32 ColorStyle = 4 [json_name = "ColorStyle"];*/ 4:
                    message.colorStyle = reader.int32();
                    break;
                case /* int32 DivLine = 5 [json_name = "DivLine"];*/ 5:
                    message.divLine = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BenefitLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string LeftText = 1 [json_name = "LeftText"]; */
        if (message.leftText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leftText);
        /* string RightText = 2 [json_name = "RightText"]; */
        if (message.rightText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightText);
        /* int32 TextStyle = 3 [json_name = "TextStyle"]; */
        if (message.textStyle !== 0)
            writer.tag(3, WireType.Varint).int32(message.textStyle);
        /* int32 ColorStyle = 4 [json_name = "ColorStyle"]; */
        if (message.colorStyle !== 0)
            writer.tag(4, WireType.Varint).int32(message.colorStyle);
        /* int32 DivLine = 5 [json_name = "DivLine"]; */
        if (message.divLine !== 0)
            writer.tag(5, WireType.Varint).int32(message.divLine);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BenefitLabel
 */
export const BenefitLabel = new BenefitLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryInfoList$Type extends MessageType<LotteryInfoList> {
    constructor() {
        super("im.LotteryInfoList", [
            { no: 1, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "task_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "open_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_activity_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "win_record_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "result_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "text", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "lottery_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "elastic_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "benefit_label", kind: "message", T: () => BenefitLabel }
        ]);
    }
    create(value?: PartialMessage<LotteryInfoList>): LotteryInfoList {
        const message = { activityId: "", taskType: 0n, openTime: 0n, userActivityStatus: 0n, winRecordId: "", resultLabel: "", buttonLabel: "", text: [], jumpUrl: "", lotteryType: 0n, elasticTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryInfoList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryInfoList): LotteryInfoList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string activity_id */ 1:
                    message.activityId = reader.string();
                    break;
                case /* int64 task_type */ 2:
                    message.taskType = reader.int64().toBigInt();
                    break;
                case /* int64 open_time */ 3:
                    message.openTime = reader.int64().toBigInt();
                    break;
                case /* int64 user_activity_status */ 4:
                    message.userActivityStatus = reader.int64().toBigInt();
                    break;
                case /* string win_record_id */ 5:
                    message.winRecordId = reader.string();
                    break;
                case /* string result_label */ 6:
                    message.resultLabel = reader.string();
                    break;
                case /* string button_label */ 7:
                    message.buttonLabel = reader.string();
                    break;
                case /* repeated string text */ 8:
                    message.text.push(reader.string());
                    break;
                case /* string jump_url */ 9:
                    message.jumpUrl = reader.string();
                    break;
                case /* int64 lottery_type */ 10:
                    message.lotteryType = reader.int64().toBigInt();
                    break;
                case /* string elastic_title */ 11:
                    message.elasticTitle = reader.string();
                    break;
                case /* im.BenefitLabel benefit_label */ 12:
                    message.benefitLabel = BenefitLabel.internalBinaryRead(reader, reader.uint32(), options, message.benefitLabel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryInfoList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string activity_id = 1; */
        if (message.activityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.activityId);
        /* int64 task_type = 2; */
        if (message.taskType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.taskType);
        /* int64 open_time = 3; */
        if (message.openTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.openTime);
        /* int64 user_activity_status = 4; */
        if (message.userActivityStatus !== 0n)
            writer.tag(4, WireType.Varint).int64(message.userActivityStatus);
        /* string win_record_id = 5; */
        if (message.winRecordId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.winRecordId);
        /* string result_label = 6; */
        if (message.resultLabel !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.resultLabel);
        /* string button_label = 7; */
        if (message.buttonLabel !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.buttonLabel);
        /* repeated string text = 8; */
        for (let i = 0; i < message.text.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.text[i]);
        /* string jump_url = 9; */
        if (message.jumpUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.jumpUrl);
        /* int64 lottery_type = 10; */
        if (message.lotteryType !== 0n)
            writer.tag(10, WireType.Varint).int64(message.lotteryType);
        /* string elastic_title = 11; */
        if (message.elasticTitle !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.elasticTitle);
        /* im.BenefitLabel benefit_label = 12; */
        if (message.benefitLabel)
            BenefitLabel.internalBinaryWrite(message.benefitLabel, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryInfoList
 */
export const LotteryInfoList = new LotteryInfoList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotAtmosphere$Type extends MessageType<HotAtmosphere> {
    constructor() {
        super("im.HotAtmosphere", [
            { no: 1, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sale_num", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "num", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "border_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "left_margin", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "ui_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "bg_colors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "border_colors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "top_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HotAtmosphere>): HotAtmosphere {
        const message = { img: "", saleNum: "", type: 0n, num: "", bgColor: "", borderColor: "", leftMargin: 0n, uiType: 0n, bgColors: [], borderColors: [], topImg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotAtmosphere>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotAtmosphere): HotAtmosphere {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string img */ 1:
                    message.img = reader.string();
                    break;
                case /* string sale_num */ 2:
                    message.saleNum = reader.string();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* string num */ 4:
                    message.num = reader.string();
                    break;
                case /* string bg_color */ 5:
                    message.bgColor = reader.string();
                    break;
                case /* string border_color */ 6:
                    message.borderColor = reader.string();
                    break;
                case /* int64 left_margin */ 7:
                    message.leftMargin = reader.int64().toBigInt();
                    break;
                case /* int64 ui_type */ 8:
                    message.uiType = reader.int64().toBigInt();
                    break;
                case /* repeated string bg_colors */ 9:
                    message.bgColors.push(reader.string());
                    break;
                case /* repeated string border_colors */ 10:
                    message.borderColors.push(reader.string());
                    break;
                case /* string top_img */ 11:
                    message.topImg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotAtmosphere, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string img = 1; */
        if (message.img !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.img);
        /* string sale_num = 2; */
        if (message.saleNum !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.saleNum);
        /* int64 type = 3; */
        if (message.type !== 0n)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* string num = 4; */
        if (message.num !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.num);
        /* string bg_color = 5; */
        if (message.bgColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColor);
        /* string border_color = 6; */
        if (message.borderColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.borderColor);
        /* int64 left_margin = 7; */
        if (message.leftMargin !== 0n)
            writer.tag(7, WireType.Varint).int64(message.leftMargin);
        /* int64 ui_type = 8; */
        if (message.uiType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.uiType);
        /* repeated string bg_colors = 9; */
        for (let i = 0; i < message.bgColors.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.bgColors[i]);
        /* repeated string border_colors = 10; */
        for (let i = 0; i < message.borderColors.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.borderColors[i]);
        /* string top_img = 11; */
        if (message.topImg !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.topImg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HotAtmosphere
 */
export const HotAtmosphere = new HotAtmosphere$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpIcon$Type extends MessageType<UpIcon> {
    constructor() {
        super("im.UpIcon", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "up_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "up_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public_screen_notice", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpIcon>): UpIcon {
        const message = { name: "", upIcon: "", upDesc: "", publicScreenNotice: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpIcon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpIcon): UpIcon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string up_icon */ 2:
                    message.upIcon = reader.string();
                    break;
                case /* string up_desc */ 3:
                    message.upDesc = reader.string();
                    break;
                case /* string public_screen_notice */ 4:
                    message.publicScreenNotice = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpIcon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string up_icon = 2; */
        if (message.upIcon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.upIcon);
        /* string up_desc = 3; */
        if (message.upDesc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.upDesc);
        /* string public_screen_notice = 4; */
        if (message.publicScreenNotice !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.publicScreenNotice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpIcon
 */
export const UpIcon = new UpIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterSwitchChangeData$Type extends MessageType<FilterSwitchChangeData> {
    constructor() {
        super("im.FilterSwitchChangeData", [
            { no: 1, name: "enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "up_icon", kind: "message", T: () => UpIcon }
        ]);
    }
    create(value?: PartialMessage<FilterSwitchChangeData>): FilterSwitchChangeData {
        const message = { enable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FilterSwitchChangeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterSwitchChangeData): FilterSwitchChangeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable */ 1:
                    message.enable = reader.bool();
                    break;
                case /* im.UpIcon up_icon */ 2:
                    message.upIcon = UpIcon.internalBinaryRead(reader, reader.uint32(), options, message.upIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterSwitchChangeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable = 1; */
        if (message.enable !== false)
            writer.tag(1, WireType.Varint).bool(message.enable);
        /* im.UpIcon up_icon = 2; */
        if (message.upIcon)
            UpIcon.internalBinaryWrite(message.upIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FilterSwitchChangeData
 */
export const FilterSwitchChangeData = new FilterSwitchChangeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomTagOfflineInfo$Type extends MessageType<RoomTagOfflineInfo> {
    constructor() {
        super("im.RoomTagOfflineInfo", [
            { no: 1, name: "tag_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomTagOfflineInfo>): RoomTagOfflineInfo {
        const message = { tagType: 0n, userToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomTagOfflineInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomTagOfflineInfo): RoomTagOfflineInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tag_type */ 1:
                    message.tagType = reader.int64().toBigInt();
                    break;
                case /* string user_toast */ 2:
                    message.userToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomTagOfflineInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 tag_type = 1; */
        if (message.tagType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.tagType);
        /* string user_toast = 2; */
        if (message.userToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomTagOfflineInfo
 */
export const RoomTagOfflineInfo = new RoomTagOfflineInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionData$Type extends MessageType<InteractionData> {
    constructor() {
        super("im.InteractionData", [
            { no: 1, name: "full", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "contents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InteractionContent }
        ]);
    }
    create(value?: PartialMessage<InteractionData>): InteractionData {
        const message = { full: false, contents: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionData): InteractionData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool full */ 1:
                    message.full = reader.bool();
                    break;
                case /* repeated im.InteractionContent contents */ 2:
                    message.contents.push(InteractionContent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool full = 1; */
        if (message.full !== false)
            writer.tag(1, WireType.Varint).bool(message.full);
        /* repeated im.InteractionContent contents = 2; */
        for (let i = 0; i < message.contents.length; i++)
            InteractionContent.internalBinaryWrite(message.contents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractionData
 */
export const InteractionData = new InteractionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionContent$Type extends MessageType<InteractionContent> {
    constructor() {
        super("im.InteractionContent", [
            { no: 1, name: "check", kind: "message", T: () => InteractionContentCheck },
            { no: 2, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "loop_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InteractionElement }
        ]);
    }
    create(value?: PartialMessage<InteractionContent>): InteractionContent {
        const message = { priority: 0, loopCount: 0, content: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionContent): InteractionContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.InteractionContentCheck check */ 1:
                    message.check = InteractionContentCheck.internalBinaryRead(reader, reader.uint32(), options, message.check);
                    break;
                case /* int32 priority */ 2:
                    message.priority = reader.int32();
                    break;
                case /* int32 loop_count */ 3:
                    message.loopCount = reader.int32();
                    break;
                case /* repeated im.InteractionElement content */ 4:
                    message.content.push(InteractionElement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.InteractionContentCheck check = 1; */
        if (message.check)
            InteractionContentCheck.internalBinaryWrite(message.check, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 priority = 2; */
        if (message.priority !== 0)
            writer.tag(2, WireType.Varint).int32(message.priority);
        /* int32 loop_count = 3; */
        if (message.loopCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.loopCount);
        /* repeated im.InteractionElement content = 4; */
        for (let i = 0; i < message.content.length; i++)
            InteractionElement.internalBinaryWrite(message.content[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractionContent
 */
export const InteractionContent = new InteractionContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionContentCheck$Type extends MessageType<InteractionContentCheck> {
    constructor() {
        super("im.InteractionContentCheck", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractionContentCheck>): InteractionContentCheck {
        const message = { productId: 0n, index: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionContentCheck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionContentCheck): InteractionContentCheck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int32 index */ 2:
                    message.index = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionContentCheck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        /* int32 index = 2; */
        if (message.index !== 0)
            writer.tag(2, WireType.Varint).int32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractionContentCheck
 */
export const InteractionContentCheck = new InteractionContentCheck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionElement$Type extends MessageType<InteractionElement> {
    constructor() {
        super("im.InteractionElement", [
            { no: 1, name: "element_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "avatars", kind: "message", T: () => InteractionAvatar },
            { no: 5, name: "blank_width", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractionElement>): InteractionElement {
        const message = { elementType: 0, text: "", textColor: "", blankWidth: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionElement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionElement): InteractionElement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 element_type */ 1:
                    message.elementType = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 3:
                    message.textColor = reader.string();
                    break;
                case /* im.InteractionAvatar avatars */ 4:
                    message.avatars = InteractionAvatar.internalBinaryRead(reader, reader.uint32(), options, message.avatars);
                    break;
                case /* int32 blank_width */ 5:
                    message.blankWidth = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionElement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 element_type = 1; */
        if (message.elementType !== 0)
            writer.tag(1, WireType.Varint).int32(message.elementType);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string text_color = 3; */
        if (message.textColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColor);
        /* im.InteractionAvatar avatars = 4; */
        if (message.avatars)
            InteractionAvatar.internalBinaryWrite(message.avatars, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 blank_width = 5; */
        if (message.blankWidth !== 0)
            writer.tag(5, WireType.Varint).int32(message.blankWidth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractionElement
 */
export const InteractionElement = new InteractionElement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractionAvatar$Type extends MessageType<InteractionAvatar> {
    constructor() {
        super("im.InteractionAvatar", [
            { no: 1, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractionAvatar>): InteractionAvatar {
        const message = { urlList: [], width: 0, height: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractionAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractionAvatar): InteractionAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string url_list */ 1:
                    message.urlList.push(reader.string());
                    break;
                case /* int32 width */ 2:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 3:
                    message.height = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractionAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string url_list = 1; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urlList[i]);
        /* int32 width = 2; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).int32(message.width);
        /* int32 height = 3; */
        if (message.height !== 0)
            writer.tag(3, WireType.Varint).int32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractionAvatar
 */
export const InteractionAvatar = new InteractionAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveShoppingMessage$Type extends MessageType<LiveShoppingMessage> {
    constructor() {
        super("im.LiveShoppingMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "promotion_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "target_uid", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "bubble_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "screenshot_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "sec_target_uid", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ecom_notice", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "updated_product_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "updated_product_info", kind: "message", T: () => UpdatedProductInfo },
            { no: 12, name: "sold_out", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "updated_coupon_info", kind: "message", T: () => UpdatedCouponInfo },
            { no: 14, name: "updated_campaign_info", kind: "message", T: () => UpdatedCampaignInfo },
            { no: 15, name: "update_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "promotions_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "update_sku_info", kind: "message", T: () => UpdatedSkuInfo },
            { no: 19, name: "updated_commentary_video_info", kind: "message", T: () => UpdatedCommentaryVideoInfo },
            { no: 20, name: "updated_group_info", kind: "message", T: () => UpdatedGroupInfo },
            { no: 21, name: "commerce_authority_change_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "trace_time_metric", kind: "message", T: () => TraceTimeMetric },
            { no: 23, name: "auction_success", kind: "message", T: () => AuctionSuccess },
            { no: 24, name: "auction_info", kind: "message", T: () => AuctionInfo },
            { no: 25, name: "redpack_activity_info", kind: "message", T: () => RedpackActivityInfo },
            { no: 26, name: "updated_cart_info", kind: "message", T: () => UpdatedCartInfo },
            { no: 27, name: "lottery_info", kind: "message", T: () => LotteryInfo },
            { no: 28, name: "win_lotteryinfo", kind: "message", T: () => WinLotteryInfo },
            { no: 29, name: "lottery_info_list", kind: "message", T: () => LotteryInfoList },
            { no: 30, name: "hot_atmosphere", kind: "message", T: () => HotAtmosphere },
            { no: 31, name: "update_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 32, name: "can_sold", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 33, name: "logical_clock", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 34, name: "room_tag_offline_info", kind: "message", T: () => RoomTagOfflineInfo },
            { no: 35, name: "filter_switch_change_data", kind: "message", T: () => FilterSwitchChangeData },
            { no: 36, name: "interaction_data", kind: "message", T: () => InteractionData }
        ]);
    }
    create(value?: PartialMessage<LiveShoppingMessage>): LiveShoppingMessage {
        const message = { msgType: 0, promotionId: 0n, targetUid: [], bubbleType: 0, screenshotTimestamp: 0n, secTargetUid: [], ecomNotice: "", updatedProductIds: [], updateType: 0, soldOut: false, updateTimestamp: 0n, buttonLabel: "", promotionsNum: 0n, commerceAuthorityChangeToast: "", updateToast: "", canSold: false, logicalClock: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveShoppingMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveShoppingMessage): LiveShoppingMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* int64 promotion_id */ 3:
                    message.promotionId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 target_uid */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.targetUid.push(reader.int64().toBigInt());
                    else
                        message.targetUid.push(reader.int64().toBigInt());
                    break;
                case /* int32 bubble_type */ 5:
                    message.bubbleType = reader.int32();
                    break;
                case /* int64 screenshot_timestamp */ 6:
                    message.screenshotTimestamp = reader.int64().toBigInt();
                    break;
                case /* repeated string sec_target_uid */ 7:
                    message.secTargetUid.push(reader.string());
                    break;
                case /* string ecom_notice */ 8:
                    message.ecomNotice = reader.string();
                    break;
                case /* repeated int64 updated_product_ids */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.updatedProductIds.push(reader.int64().toBigInt());
                    else
                        message.updatedProductIds.push(reader.int64().toBigInt());
                    break;
                case /* int32 update_type */ 10:
                    message.updateType = reader.int32();
                    break;
                case /* im.UpdatedProductInfo updated_product_info */ 11:
                    message.updatedProductInfo = UpdatedProductInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedProductInfo);
                    break;
                case /* bool sold_out */ 12:
                    message.soldOut = reader.bool();
                    break;
                case /* im.UpdatedCouponInfo updated_coupon_info */ 13:
                    message.updatedCouponInfo = UpdatedCouponInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedCouponInfo);
                    break;
                case /* im.UpdatedCampaignInfo updated_campaign_info */ 14:
                    message.updatedCampaignInfo = UpdatedCampaignInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedCampaignInfo);
                    break;
                case /* int64 update_timestamp */ 15:
                    message.updateTimestamp = reader.int64().toBigInt();
                    break;
                case /* string button_label */ 16:
                    message.buttonLabel = reader.string();
                    break;
                case /* int64 promotions_num */ 17:
                    message.promotionsNum = reader.int64().toBigInt();
                    break;
                case /* im.UpdatedSkuInfo update_sku_info */ 18:
                    message.updateSkuInfo = UpdatedSkuInfo.internalBinaryRead(reader, reader.uint32(), options, message.updateSkuInfo);
                    break;
                case /* im.UpdatedCommentaryVideoInfo updated_commentary_video_info */ 19:
                    message.updatedCommentaryVideoInfo = UpdatedCommentaryVideoInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedCommentaryVideoInfo);
                    break;
                case /* im.UpdatedGroupInfo updated_group_info */ 20:
                    message.updatedGroupInfo = UpdatedGroupInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedGroupInfo);
                    break;
                case /* string commerce_authority_change_toast */ 21:
                    message.commerceAuthorityChangeToast = reader.string();
                    break;
                case /* im.TraceTimeMetric trace_time_metric */ 22:
                    message.traceTimeMetric = TraceTimeMetric.internalBinaryRead(reader, reader.uint32(), options, message.traceTimeMetric);
                    break;
                case /* im.AuctionSuccess auction_success */ 23:
                    message.auctionSuccess = AuctionSuccess.internalBinaryRead(reader, reader.uint32(), options, message.auctionSuccess);
                    break;
                case /* im.AuctionInfo auction_info */ 24:
                    message.auctionInfo = AuctionInfo.internalBinaryRead(reader, reader.uint32(), options, message.auctionInfo);
                    break;
                case /* im.RedpackActivityInfo redpack_activity_info */ 25:
                    message.redpackActivityInfo = RedpackActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.redpackActivityInfo);
                    break;
                case /* im.UpdatedCartInfo updated_cart_info */ 26:
                    message.updatedCartInfo = UpdatedCartInfo.internalBinaryRead(reader, reader.uint32(), options, message.updatedCartInfo);
                    break;
                case /* im.LotteryInfo lottery_info */ 27:
                    message.lotteryInfo = LotteryInfo.internalBinaryRead(reader, reader.uint32(), options, message.lotteryInfo);
                    break;
                case /* im.WinLotteryInfo win_lotteryinfo */ 28:
                    message.winLotteryinfo = WinLotteryInfo.internalBinaryRead(reader, reader.uint32(), options, message.winLotteryinfo);
                    break;
                case /* im.LotteryInfoList lottery_info_list */ 29:
                    message.lotteryInfoList = LotteryInfoList.internalBinaryRead(reader, reader.uint32(), options, message.lotteryInfoList);
                    break;
                case /* im.HotAtmosphere hot_atmosphere */ 30:
                    message.hotAtmosphere = HotAtmosphere.internalBinaryRead(reader, reader.uint32(), options, message.hotAtmosphere);
                    break;
                case /* string update_toast */ 31:
                    message.updateToast = reader.string();
                    break;
                case /* bool can_sold */ 32:
                    message.canSold = reader.bool();
                    break;
                case /* int64 logical_clock */ 33:
                    message.logicalClock = reader.int64().toBigInt();
                    break;
                case /* im.RoomTagOfflineInfo room_tag_offline_info */ 34:
                    message.roomTagOfflineInfo = RoomTagOfflineInfo.internalBinaryRead(reader, reader.uint32(), options, message.roomTagOfflineInfo);
                    break;
                case /* im.FilterSwitchChangeData filter_switch_change_data */ 35:
                    message.filterSwitchChangeData = FilterSwitchChangeData.internalBinaryRead(reader, reader.uint32(), options, message.filterSwitchChangeData);
                    break;
                case /* im.InteractionData interaction_data */ 36:
                    message.interactionData = InteractionData.internalBinaryRead(reader, reader.uint32(), options, message.interactionData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveShoppingMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* int64 promotion_id = 3; */
        if (message.promotionId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.promotionId);
        /* repeated int64 target_uid = 4; */
        if (message.targetUid.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.targetUid.length; i++)
                writer.int64(message.targetUid[i]);
            writer.join();
        }
        /* int32 bubble_type = 5; */
        if (message.bubbleType !== 0)
            writer.tag(5, WireType.Varint).int32(message.bubbleType);
        /* int64 screenshot_timestamp = 6; */
        if (message.screenshotTimestamp !== 0n)
            writer.tag(6, WireType.Varint).int64(message.screenshotTimestamp);
        /* repeated string sec_target_uid = 7; */
        for (let i = 0; i < message.secTargetUid.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.secTargetUid[i]);
        /* string ecom_notice = 8; */
        if (message.ecomNotice !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.ecomNotice);
        /* repeated int64 updated_product_ids = 9; */
        if (message.updatedProductIds.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.updatedProductIds.length; i++)
                writer.int64(message.updatedProductIds[i]);
            writer.join();
        }
        /* int32 update_type = 10; */
        if (message.updateType !== 0)
            writer.tag(10, WireType.Varint).int32(message.updateType);
        /* im.UpdatedProductInfo updated_product_info = 11; */
        if (message.updatedProductInfo)
            UpdatedProductInfo.internalBinaryWrite(message.updatedProductInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool sold_out = 12; */
        if (message.soldOut !== false)
            writer.tag(12, WireType.Varint).bool(message.soldOut);
        /* im.UpdatedCouponInfo updated_coupon_info = 13; */
        if (message.updatedCouponInfo)
            UpdatedCouponInfo.internalBinaryWrite(message.updatedCouponInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* im.UpdatedCampaignInfo updated_campaign_info = 14; */
        if (message.updatedCampaignInfo)
            UpdatedCampaignInfo.internalBinaryWrite(message.updatedCampaignInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int64 update_timestamp = 15; */
        if (message.updateTimestamp !== 0n)
            writer.tag(15, WireType.Varint).int64(message.updateTimestamp);
        /* string button_label = 16; */
        if (message.buttonLabel !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.buttonLabel);
        /* int64 promotions_num = 17; */
        if (message.promotionsNum !== 0n)
            writer.tag(17, WireType.Varint).int64(message.promotionsNum);
        /* im.UpdatedSkuInfo update_sku_info = 18; */
        if (message.updateSkuInfo)
            UpdatedSkuInfo.internalBinaryWrite(message.updateSkuInfo, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* im.UpdatedCommentaryVideoInfo updated_commentary_video_info = 19; */
        if (message.updatedCommentaryVideoInfo)
            UpdatedCommentaryVideoInfo.internalBinaryWrite(message.updatedCommentaryVideoInfo, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* im.UpdatedGroupInfo updated_group_info = 20; */
        if (message.updatedGroupInfo)
            UpdatedGroupInfo.internalBinaryWrite(message.updatedGroupInfo, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* string commerce_authority_change_toast = 21; */
        if (message.commerceAuthorityChangeToast !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.commerceAuthorityChangeToast);
        /* im.TraceTimeMetric trace_time_metric = 22; */
        if (message.traceTimeMetric)
            TraceTimeMetric.internalBinaryWrite(message.traceTimeMetric, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* im.AuctionSuccess auction_success = 23; */
        if (message.auctionSuccess)
            AuctionSuccess.internalBinaryWrite(message.auctionSuccess, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* im.AuctionInfo auction_info = 24; */
        if (message.auctionInfo)
            AuctionInfo.internalBinaryWrite(message.auctionInfo, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* im.RedpackActivityInfo redpack_activity_info = 25; */
        if (message.redpackActivityInfo)
            RedpackActivityInfo.internalBinaryWrite(message.redpackActivityInfo, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* im.UpdatedCartInfo updated_cart_info = 26; */
        if (message.updatedCartInfo)
            UpdatedCartInfo.internalBinaryWrite(message.updatedCartInfo, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* im.LotteryInfo lottery_info = 27; */
        if (message.lotteryInfo)
            LotteryInfo.internalBinaryWrite(message.lotteryInfo, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* im.WinLotteryInfo win_lotteryinfo = 28; */
        if (message.winLotteryinfo)
            WinLotteryInfo.internalBinaryWrite(message.winLotteryinfo, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* im.LotteryInfoList lottery_info_list = 29; */
        if (message.lotteryInfoList)
            LotteryInfoList.internalBinaryWrite(message.lotteryInfoList, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* im.HotAtmosphere hot_atmosphere = 30; */
        if (message.hotAtmosphere)
            HotAtmosphere.internalBinaryWrite(message.hotAtmosphere, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* string update_toast = 31; */
        if (message.updateToast !== "")
            writer.tag(31, WireType.LengthDelimited).string(message.updateToast);
        /* bool can_sold = 32; */
        if (message.canSold !== false)
            writer.tag(32, WireType.Varint).bool(message.canSold);
        /* int64 logical_clock = 33; */
        if (message.logicalClock !== 0n)
            writer.tag(33, WireType.Varint).int64(message.logicalClock);
        /* im.RoomTagOfflineInfo room_tag_offline_info = 34; */
        if (message.roomTagOfflineInfo)
            RoomTagOfflineInfo.internalBinaryWrite(message.roomTagOfflineInfo, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* im.FilterSwitchChangeData filter_switch_change_data = 35; */
        if (message.filterSwitchChangeData)
            FilterSwitchChangeData.internalBinaryWrite(message.filterSwitchChangeData, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* im.InteractionData interaction_data = 36; */
        if (message.interactionData)
            InteractionData.internalBinaryWrite(message.interactionData, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LiveShoppingMessage
 */
export const LiveShoppingMessage = new LiveShoppingMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveStreamControlMessage$Type extends MessageType<LiveStreamControlMessage> {
    constructor() {
        super("im.LiveStreamControlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "control_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LiveStreamControlMessage>): LiveStreamControlMessage {
        const message = { controlParams: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveStreamControlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveStreamControlMessage): LiveStreamControlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string control_params */ 2:
                    message.controlParams = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveStreamControlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string control_params = 2; */
        if (message.controlParams !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.controlParams);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LiveStreamControlMessage
 */
export const LiveStreamControlMessage = new LiveStreamControlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryBurstMessage$Type extends MessageType<LotteryBurstMessage> {
    constructor() {
        super("im.LotteryBurstMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "burst_time_remain_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "multiple", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "property_definition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "property_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LotteryBurstMessage>): LotteryBurstMessage {
        const message = { burstTimeRemainSeconds: 0n, multiple: 0n, propertyDefinitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryBurstMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryBurstMessage): LotteryBurstMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 burst_time_remain_seconds */ 2:
                    message.burstTimeRemainSeconds = reader.int64().toBigInt();
                    break;
                case /* int64 multiple */ 3:
                    message.multiple = reader.int64().toBigInt();
                    break;
                case /* int64 property_definition_id */ 4:
                    message.propertyDefinitionId = reader.int64().toBigInt();
                    break;
                case /* data.Image property_icon */ 5:
                    message.propertyIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.propertyIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryBurstMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 burst_time_remain_seconds = 2; */
        if (message.burstTimeRemainSeconds !== 0n)
            writer.tag(2, WireType.Varint).int64(message.burstTimeRemainSeconds);
        /* int64 multiple = 3; */
        if (message.multiple !== 0n)
            writer.tag(3, WireType.Varint).int64(message.multiple);
        /* int64 property_definition_id = 4; */
        if (message.propertyDefinitionId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.propertyDefinitionId);
        /* data.Image property_icon = 5; */
        if (message.propertyIcon)
            Image.internalBinaryWrite(message.propertyIcon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryBurstMessage
 */
export const LotteryBurstMessage = new LotteryBurstMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryMessage$Type extends MessageType<LotteryMessage> {
    constructor() {
        super("im.LotteryMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<LotteryMessage>): LotteryMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryMessage): LotteryMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryMessage
 */
export const LotteryMessage = new LotteryMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class XGLotteryMessage$Type extends MessageType<XGLotteryMessage> {
    constructor() {
        super("im.XGLotteryMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "lottery_info", kind: "message", T: () => LotteryInfo$ }
        ]);
    }
    create(value?: PartialMessage<XGLotteryMessage>): XGLotteryMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<XGLotteryMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: XGLotteryMessage): XGLotteryMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.LotteryInfo lottery_info */ 2:
                    message.lotteryInfo = LotteryInfo$.internalBinaryRead(reader, reader.uint32(), options, message.lotteryInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: XGLotteryMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.LotteryInfo lottery_info = 2; */
        if (message.lotteryInfo)
            LotteryInfo$.internalBinaryWrite(message.lotteryInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.XGLotteryMessage
 */
export const XGLotteryMessage = new XGLotteryMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryEventMessage$Type extends MessageType<LotteryEventMessage> {
    constructor() {
        super("im.LotteryEventMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "lottery_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "lottery_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "lottery_draw_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "lottery_current_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "rule_page_scheme", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryEventMessage>): LotteryEventMessage {
        const message = { lotteryId: 0n, lotteryStatus: 0, lotteryStartTime: 0n, lotteryDrawTime: 0n, lotteryCurrentTime: 0n, rulePageScheme: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryEventMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryEventMessage): LotteryEventMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 lottery_id */ 2:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* int32 lottery_status */ 3:
                    message.lotteryStatus = reader.int32();
                    break;
                case /* int64 lottery_start_time */ 4:
                    message.lotteryStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_draw_time */ 5:
                    message.lotteryDrawTime = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_current_time */ 6:
                    message.lotteryCurrentTime = reader.int64().toBigInt();
                    break;
                case /* string rule_page_scheme */ 7:
                    message.rulePageScheme = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryEventMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 lottery_id = 2; */
        if (message.lotteryId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lotteryId);
        /* int32 lottery_status = 3; */
        if (message.lotteryStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.lotteryStatus);
        /* int64 lottery_start_time = 4; */
        if (message.lotteryStartTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.lotteryStartTime);
        /* int64 lottery_draw_time = 5; */
        if (message.lotteryDrawTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.lotteryDrawTime);
        /* int64 lottery_current_time = 6; */
        if (message.lotteryCurrentTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.lotteryCurrentTime);
        /* string rule_page_scheme = 7; */
        if (message.rulePageScheme !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rulePageScheme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryEventMessage
 */
export const LotteryEventMessage = new LotteryEventMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryExpandEventMessage$Type extends MessageType<LotteryExpandEventMessage> {
    constructor() {
        super("im.LotteryExpandEventMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "expand_prize_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryExpandEventMessage>): LotteryExpandEventMessage {
        const message = { expandPrizeType: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryExpandEventMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryExpandEventMessage): LotteryExpandEventMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 expand_prize_type */ 2:
                    message.expandPrizeType = reader.int64().toBigInt();
                    break;
                case /* string extra */ 3:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryExpandEventMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 expand_prize_type = 2; */
        if (message.expandPrizeType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.expandPrizeType);
        /* string extra = 3; */
        if (message.extra !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryExpandEventMessage
 */
export const LotteryExpandEventMessage = new LotteryExpandEventMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryEventNewMessage$Type extends MessageType<LotteryEventNewMessage> {
    constructor() {
        super("im.LotteryEventNewMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "lottery_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "lottery_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "lottery_draw_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "lottery_current_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "rule_page_scheme", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "prize_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "lottery_audit_failure_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "conditions", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "use_new_draw_interaction", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "prize_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "lucky_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryEventNewMessage>): LotteryEventNewMessage {
        const message = { lotteryId: 0n, lotteryStatus: 0, lotteryStartTime: 0n, lotteryDrawTime: 0n, lotteryCurrentTime: 0n, rulePageScheme: "", prizeType: 0n, lotteryAuditFailureReason: "", conditions: [], useNewDrawInteraction: false, prizeCount: 0n, luckyCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryEventNewMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryEventNewMessage): LotteryEventNewMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 lottery_id */ 2:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* int32 lottery_status */ 3:
                    message.lotteryStatus = reader.int32();
                    break;
                case /* int64 lottery_start_time */ 4:
                    message.lotteryStartTime = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_draw_time */ 5:
                    message.lotteryDrawTime = reader.int64().toBigInt();
                    break;
                case /* int64 lottery_current_time */ 6:
                    message.lotteryCurrentTime = reader.int64().toBigInt();
                    break;
                case /* string rule_page_scheme */ 7:
                    message.rulePageScheme = reader.string();
                    break;
                case /* int64 prize_type */ 8:
                    message.prizeType = reader.int64().toBigInt();
                    break;
                case /* string lottery_audit_failure_reason */ 9:
                    message.lotteryAuditFailureReason = reader.string();
                    break;
                case /* repeated int32 conditions */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditions.push(reader.int32());
                    else
                        message.conditions.push(reader.int32());
                    break;
                case /* bool use_new_draw_interaction */ 12:
                    message.useNewDrawInteraction = reader.bool();
                    break;
                case /* int64 prize_count */ 13:
                    message.prizeCount = reader.int64().toBigInt();
                    break;
                case /* int64 lucky_count */ 14:
                    message.luckyCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryEventNewMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 lottery_id = 2; */
        if (message.lotteryId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lotteryId);
        /* int32 lottery_status = 3; */
        if (message.lotteryStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.lotteryStatus);
        /* int64 lottery_start_time = 4; */
        if (message.lotteryStartTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.lotteryStartTime);
        /* int64 lottery_draw_time = 5; */
        if (message.lotteryDrawTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.lotteryDrawTime);
        /* int64 lottery_current_time = 6; */
        if (message.lotteryCurrentTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.lotteryCurrentTime);
        /* string rule_page_scheme = 7; */
        if (message.rulePageScheme !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rulePageScheme);
        /* int64 prize_type = 8; */
        if (message.prizeType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.prizeType);
        /* string lottery_audit_failure_reason = 9; */
        if (message.lotteryAuditFailureReason !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.lotteryAuditFailureReason);
        /* repeated int32 conditions = 10; */
        if (message.conditions.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditions.length; i++)
                writer.int32(message.conditions[i]);
            writer.join();
        }
        /* bool use_new_draw_interaction = 12; */
        if (message.useNewDrawInteraction !== false)
            writer.tag(12, WireType.Varint).bool(message.useNewDrawInteraction);
        /* int64 prize_count = 13; */
        if (message.prizeCount !== 0n)
            writer.tag(13, WireType.Varint).int64(message.prizeCount);
        /* int64 lucky_count = 14; */
        if (message.luckyCount !== 0n)
            writer.tag(14, WireType.Varint).int64(message.luckyCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryEventNewMessage
 */
export const LotteryEventNewMessage = new LotteryEventNewMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryCandidateEventMessage$Type extends MessageType<LotteryCandidateEventMessage> {
    constructor() {
        super("im.LotteryCandidateEventMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "participate_success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryCandidateEventMessage>): LotteryCandidateEventMessage {
        const message = { lotteryId: 0n, userId: 0n, participateSuccess: false, version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryCandidateEventMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryCandidateEventMessage): LotteryCandidateEventMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 lottery_id */ 2:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* bool participate_success */ 4:
                    message.participateSuccess = reader.bool();
                    break;
                case /* int64 version */ 5:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryCandidateEventMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 lottery_id = 2; */
        if (message.lotteryId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lotteryId);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* bool participate_success = 4; */
        if (message.participateSuccess !== false)
            writer.tag(4, WireType.Varint).bool(message.participateSuccess);
        /* int64 version = 5; */
        if (message.version !== 0n)
            writer.tag(5, WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryCandidateEventMessage
 */
export const LotteryCandidateEventMessage = new LotteryCandidateEventMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryDrawResultEventMessage$Type extends MessageType<LotteryDrawResultEventMessage> {
    constructor() {
        super("im.LotteryDrawResultEventMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryDrawResultEventMessage>): LotteryDrawResultEventMessage {
        const message = { lotteryId: 0n, userIds: [], extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryDrawResultEventMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryDrawResultEventMessage): LotteryDrawResultEventMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 lottery_id */ 2:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 user_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int64().toBigInt());
                    else
                        message.userIds.push(reader.int64().toBigInt());
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryDrawResultEventMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 lottery_id = 2; */
        if (message.lotteryId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lotteryId);
        /* repeated int64 user_ids = 3; */
        if (message.userIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int64(message.userIds[i]);
            writer.join();
        }
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryDrawResultEventMessage
 */
export const LotteryDrawResultEventMessage = new LotteryDrawResultEventMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxTempStatusMessage$Type extends MessageType<LuckyBoxTempStatusMessage> {
    constructor() {
        super("im.LuckyBoxTempStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxTempStatusMessage>): LuckyBoxTempStatusMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxTempStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxTempStatusMessage): LuckyBoxTempStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxTempStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxTempStatusMessage
 */
export const LuckyBoxTempStatusMessage = new LuckyBoxTempStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxMessage$Type extends MessageType<LuckyBoxMessage> {
    constructor() {
        super("im.LuckyBoxMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "box_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "send_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "delay_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "box_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "large", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "background", kind: "message", T: () => Image },
            { no: 10, name: "is_official", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "user", kind: "message", T: () => User },
            { no: 13, name: "description_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LuckyBoxMessage_ImgText },
            { no: 14, name: "lucky_icon", kind: "message", T: () => Image },
            { no: 15, name: "display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "box_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "flat_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "unpack_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "meta", kind: "message", T: () => LuckyBoxMessage_BoxMeta },
            { no: 20, name: "extra", kind: "message", T: () => LuckyBoxMessage_Extra },
            { no: 21, name: "business_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "top_cover_image", kind: "message", T: () => Image },
            { no: 23, name: "bottom_cover_image", kind: "message", T: () => Image },
            { no: 24, name: "box_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "bottom_comment_msg", kind: "message", T: () => LuckyBoxMessage_BottomCommentMsg },
            { no: 26, name: "is_risky_owner", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "dress", kind: "message", T: () => LuckyBoxMessage_Dress },
            { no: 29, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxMessage>): LuckyBoxMessage {
        const message = { diamondCount: 0n, boxId: 0n, sendTime: 0n, delayTime: 0n, boxType: 0n, title: "", large: false, isOfficial: false, priority: 0n, descriptionList: [], displayDuration: 0n, boxStatus: 0, flatDuration: 0, unpackType: 0, businessType: 0n, boxIdStr: "", isRiskyOwner: false, activityId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxMessage): LuckyBoxMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 diamond_count */ 2:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                case /* int64 box_id */ 3:
                    message.boxId = reader.int64().toBigInt();
                    break;
                case /* int64 send_time */ 4:
                    message.sendTime = reader.int64().toBigInt();
                    break;
                case /* int64 delay_time */ 5:
                    message.delayTime = reader.int64().toBigInt();
                    break;
                case /* int64 box_type */ 6:
                    message.boxType = reader.int64().toBigInt();
                    break;
                case /* string title */ 7:
                    message.title = reader.string();
                    break;
                case /* bool large */ 8:
                    message.large = reader.bool();
                    break;
                case /* data.Image background */ 9:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* bool is_official */ 10:
                    message.isOfficial = reader.bool();
                    break;
                case /* int64 priority */ 11:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 12:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated im.LuckyBoxMessage.ImgText description_list */ 13:
                    message.descriptionList.push(LuckyBoxMessage_ImgText.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Image lucky_icon */ 14:
                    message.luckyIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.luckyIcon);
                    break;
                case /* int64 display_duration */ 15:
                    message.displayDuration = reader.int64().toBigInt();
                    break;
                case /* int32 box_status */ 16:
                    message.boxStatus = reader.int32();
                    break;
                case /* int32 flat_duration */ 17:
                    message.flatDuration = reader.int32();
                    break;
                case /* int32 unpack_type */ 18:
                    message.unpackType = reader.int32();
                    break;
                case /* im.LuckyBoxMessage.BoxMeta meta */ 19:
                    message.meta = LuckyBoxMessage_BoxMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* im.LuckyBoxMessage.Extra extra */ 20:
                    message.extra = LuckyBoxMessage_Extra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                case /* int64 business_type */ 21:
                    message.businessType = reader.int64().toBigInt();
                    break;
                case /* data.Image top_cover_image */ 22:
                    message.topCoverImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.topCoverImage);
                    break;
                case /* data.Image bottom_cover_image */ 23:
                    message.bottomCoverImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.bottomCoverImage);
                    break;
                case /* string box_id_str */ 24:
                    message.boxIdStr = reader.string();
                    break;
                case /* im.LuckyBoxMessage.BottomCommentMsg bottom_comment_msg */ 25:
                    message.bottomCommentMsg = LuckyBoxMessage_BottomCommentMsg.internalBinaryRead(reader, reader.uint32(), options, message.bottomCommentMsg);
                    break;
                case /* bool is_risky_owner */ 26:
                    message.isRiskyOwner = reader.bool();
                    break;
                case /* string activity_id */ 27:
                    message.activityId = reader.string();
                    break;
                case /* im.LuckyBoxMessage.Dress dress */ 28:
                    message.dress = LuckyBoxMessage_Dress.internalBinaryRead(reader, reader.uint32(), options, message.dress);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 29:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 diamond_count = 2; */
        if (message.diamondCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.diamondCount);
        /* int64 box_id = 3; */
        if (message.boxId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.boxId);
        /* int64 send_time = 4; */
        if (message.sendTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.sendTime);
        /* int64 delay_time = 5; */
        if (message.delayTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.delayTime);
        /* int64 box_type = 6; */
        if (message.boxType !== 0n)
            writer.tag(6, WireType.Varint).int64(message.boxType);
        /* string title = 7; */
        if (message.title !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        /* bool large = 8; */
        if (message.large !== false)
            writer.tag(8, WireType.Varint).bool(message.large);
        /* data.Image background = 9; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool is_official = 10; */
        if (message.isOfficial !== false)
            writer.tag(10, WireType.Varint).bool(message.isOfficial);
        /* int64 priority = 11; */
        if (message.priority !== 0n)
            writer.tag(11, WireType.Varint).int64(message.priority);
        /* data.User user = 12; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.LuckyBoxMessage.ImgText description_list = 13; */
        for (let i = 0; i < message.descriptionList.length; i++)
            LuckyBoxMessage_ImgText.internalBinaryWrite(message.descriptionList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* data.Image lucky_icon = 14; */
        if (message.luckyIcon)
            Image.internalBinaryWrite(message.luckyIcon, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int64 display_duration = 15; */
        if (message.displayDuration !== 0n)
            writer.tag(15, WireType.Varint).int64(message.displayDuration);
        /* int32 box_status = 16; */
        if (message.boxStatus !== 0)
            writer.tag(16, WireType.Varint).int32(message.boxStatus);
        /* int32 flat_duration = 17; */
        if (message.flatDuration !== 0)
            writer.tag(17, WireType.Varint).int32(message.flatDuration);
        /* int32 unpack_type = 18; */
        if (message.unpackType !== 0)
            writer.tag(18, WireType.Varint).int32(message.unpackType);
        /* im.LuckyBoxMessage.BoxMeta meta = 19; */
        if (message.meta)
            LuckyBoxMessage_BoxMeta.internalBinaryWrite(message.meta, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* im.LuckyBoxMessage.Extra extra = 20; */
        if (message.extra)
            LuckyBoxMessage_Extra.internalBinaryWrite(message.extra, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* int64 business_type = 21; */
        if (message.businessType !== 0n)
            writer.tag(21, WireType.Varint).int64(message.businessType);
        /* data.Image top_cover_image = 22; */
        if (message.topCoverImage)
            Image.internalBinaryWrite(message.topCoverImage, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* data.Image bottom_cover_image = 23; */
        if (message.bottomCoverImage)
            Image.internalBinaryWrite(message.bottomCoverImage, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* string box_id_str = 24; */
        if (message.boxIdStr !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.boxIdStr);
        /* im.LuckyBoxMessage.BottomCommentMsg bottom_comment_msg = 25; */
        if (message.bottomCommentMsg)
            LuckyBoxMessage_BottomCommentMsg.internalBinaryWrite(message.bottomCommentMsg, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* bool is_risky_owner = 26; */
        if (message.isRiskyOwner !== false)
            writer.tag(26, WireType.Varint).bool(message.isRiskyOwner);
        /* string activity_id = 27; */
        if (message.activityId !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.activityId);
        /* im.LuckyBoxMessage.Dress dress = 28; */
        if (message.dress)
            LuckyBoxMessage_Dress.internalBinaryWrite(message.dress, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 29; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxMessage
 */
export const LuckyBoxMessage = new LuckyBoxMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxMessage_ImgText$Type extends MessageType<LuckyBoxMessage_ImgText> {
    constructor() {
        super("im.LuckyBoxMessage.ImgText", [
            { no: 1, name: "image", kind: "message", T: () => Image },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxMessage_ImgText>): LuckyBoxMessage_ImgText {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxMessage_ImgText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxMessage_ImgText): LuckyBoxMessage_ImgText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image image */ 1:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxMessage_ImgText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image image = 1; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxMessage.ImgText
 */
export const LuckyBoxMessage_ImgText = new LuckyBoxMessage_ImgText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxMessage_BoxMeta$Type extends MessageType<LuckyBoxMessage_BoxMeta> {
    constructor() {
        super("im.LuckyBoxMessage.BoxMeta", [
            { no: 1, name: "title_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content_count_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_amount_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "animation_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "before_unpack_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "success_unpack_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "fail_unpack_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ad_image", kind: "message", T: () => Image },
            { no: 9, name: "im_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxMessage_BoxMeta>): LuckyBoxMessage_BoxMeta {
        const message = { titleDesc: "", contentCountDesc: "", contentAmountDesc: "", animationDesc: "", beforeUnpackDesc: "", successUnpackDesc: "", failUnpackDesc: "", imDesc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxMessage_BoxMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxMessage_BoxMeta): LuckyBoxMessage_BoxMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title_desc */ 1:
                    message.titleDesc = reader.string();
                    break;
                case /* string content_count_desc */ 2:
                    message.contentCountDesc = reader.string();
                    break;
                case /* string content_amount_desc */ 3:
                    message.contentAmountDesc = reader.string();
                    break;
                case /* string animation_desc */ 4:
                    message.animationDesc = reader.string();
                    break;
                case /* string before_unpack_desc */ 5:
                    message.beforeUnpackDesc = reader.string();
                    break;
                case /* string success_unpack_desc */ 6:
                    message.successUnpackDesc = reader.string();
                    break;
                case /* string fail_unpack_desc */ 7:
                    message.failUnpackDesc = reader.string();
                    break;
                case /* data.Image ad_image */ 8:
                    message.adImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.adImage);
                    break;
                case /* string im_desc */ 9:
                    message.imDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxMessage_BoxMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title_desc = 1; */
        if (message.titleDesc !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.titleDesc);
        /* string content_count_desc = 2; */
        if (message.contentCountDesc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contentCountDesc);
        /* string content_amount_desc = 3; */
        if (message.contentAmountDesc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentAmountDesc);
        /* string animation_desc = 4; */
        if (message.animationDesc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.animationDesc);
        /* string before_unpack_desc = 5; */
        if (message.beforeUnpackDesc !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.beforeUnpackDesc);
        /* string success_unpack_desc = 6; */
        if (message.successUnpackDesc !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.successUnpackDesc);
        /* string fail_unpack_desc = 7; */
        if (message.failUnpackDesc !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.failUnpackDesc);
        /* data.Image ad_image = 8; */
        if (message.adImage)
            Image.internalBinaryWrite(message.adImage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string im_desc = 9; */
        if (message.imDesc !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.imDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxMessage.BoxMeta
 */
export const LuckyBoxMessage_BoxMeta = new LuckyBoxMessage_BoxMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxMessage_Extra$Type extends MessageType<LuckyBoxMessage_Extra> {
    constructor() {
        super("im.LuckyBoxMessage.Extra", [
            { no: 3, name: "current_round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "pct", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "round_target", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxMessage_Extra>): LuckyBoxMessage_Extra {
        const message = { currentRound: 0, pct: 0, roundTarget: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxMessage_Extra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxMessage_Extra): LuckyBoxMessage_Extra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current_round */ 3:
                    message.currentRound = reader.int32();
                    break;
                case /* int32 pct */ 4:
                    message.pct = reader.int32();
                    break;
                case /* repeated int64 round_target */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roundTarget.push(reader.int64().toBigInt());
                    else
                        message.roundTarget.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxMessage_Extra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current_round = 3; */
        if (message.currentRound !== 0)
            writer.tag(3, WireType.Varint).int32(message.currentRound);
        /* int32 pct = 4; */
        if (message.pct !== 0)
            writer.tag(4, WireType.Varint).int32(message.pct);
        /* repeated int64 round_target = 5; */
        if (message.roundTarget.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.roundTarget.length; i++)
                writer.int64(message.roundTarget[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxMessage.Extra
 */
export const LuckyBoxMessage_Extra = new LuckyBoxMessage_Extra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxMessage_BottomCommentMsg$Type extends MessageType<LuckyBoxMessage_BottomCommentMsg> {
    constructor() {
        super("im.LuckyBoxMessage.BottomCommentMsg", [
            { no: 1, name: "text", kind: "message", T: () => Text },
            { no: 2, name: "background", kind: "message", T: () => Image },
            { no: 3, name: "left_icon", kind: "message", T: () => Image },
            { no: 4, name: "right_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxMessage_BottomCommentMsg>): LuckyBoxMessage_BottomCommentMsg {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxMessage_BottomCommentMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxMessage_BottomCommentMsg): LuckyBoxMessage_BottomCommentMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text text */ 1:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* data.Image background */ 2:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* data.Image left_icon */ 3:
                    message.leftIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.leftIcon);
                    break;
                case /* data.Image right_icon */ 4:
                    message.rightIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.rightIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxMessage_BottomCommentMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text text = 1; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background = 2; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image left_icon = 3; */
        if (message.leftIcon)
            Image.internalBinaryWrite(message.leftIcon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image right_icon = 4; */
        if (message.rightIcon)
            Image.internalBinaryWrite(message.rightIcon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxMessage.BottomCommentMsg
 */
export const LuckyBoxMessage_BottomCommentMsg = new LuckyBoxMessage_BottomCommentMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxMessage_Dress$Type extends MessageType<LuckyBoxMessage_Dress> {
    constructor() {
        super("im.LuckyBoxMessage.Dress", [
            { no: 1, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dress_offline_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "jump_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxMessage_Dress>): LuckyBoxMessage_Dress {
        const message = { dressId: "", dressOfflineTime: 0n, jumpText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxMessage_Dress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxMessage_Dress): LuckyBoxMessage_Dress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dress_id */ 1:
                    message.dressId = reader.string();
                    break;
                case /* int64 dress_offline_time */ 2:
                    message.dressOfflineTime = reader.int64().toBigInt();
                    break;
                case /* string jump_text */ 3:
                    message.jumpText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxMessage_Dress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dress_id = 1; */
        if (message.dressId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dressId);
        /* int64 dress_offline_time = 2; */
        if (message.dressOfflineTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.dressOfflineTime);
        /* string jump_text = 3; */
        if (message.jumpText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.jumpText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxMessage.Dress
 */
export const LuckyBoxMessage_Dress = new LuckyBoxMessage_Dress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyBoxEndMessage$Type extends MessageType<LuckyBoxEndMessage> {
    constructor() {
        super("im.LuckyBoxEndMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "box_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "box_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LuckyBoxEndMessage>): LuckyBoxEndMessage {
        const message = { boxId: 0n, boxIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyBoxEndMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyBoxEndMessage): LuckyBoxEndMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 box_id */ 2:
                    message.boxId = reader.int64().toBigInt();
                    break;
                case /* string box_id_str */ 3:
                    message.boxIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyBoxEndMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 box_id = 2; */
        if (message.boxId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.boxId);
        /* string box_id_str = 3; */
        if (message.boxIdStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.boxIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyBoxEndMessage
 */
export const LuckyBoxEndMessage = new LuckyBoxEndMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuckyMoneyMessage$Type extends MessageType<LuckyMoneyMessage> {
    constructor() {
        super("im.LuckyMoneyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "luckymoney_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LuckyMoneyMessage>): LuckyMoneyMessage {
        const message = { luckymoneyId: 0n, diamondCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuckyMoneyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuckyMoneyMessage): LuckyMoneyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 luckymoney_id */ 3:
                    message.luckymoneyId = reader.int64().toBigInt();
                    break;
                case /* int64 diamond_count */ 4:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuckyMoneyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 luckymoney_id = 3; */
        if (message.luckymoneyId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.luckymoneyId);
        /* int64 diamond_count = 4; */
        if (message.diamondCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.diamondCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LuckyMoneyMessage
 */
export const LuckyMoneyMessage = new LuckyMoneyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MagicBoxMessage$Type extends MessageType<MagicBoxMessage> {
    constructor() {
        super("im.MagicBoxMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "magic_box_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "send_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "delay_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "box_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "large", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "background", kind: "message", T: () => Image },
            { no: 10, name: "is_official", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "user", kind: "message", T: () => User },
            { no: 13, name: "description_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MagicBoxMessage_ImgText }
        ]);
    }
    create(value?: PartialMessage<MagicBoxMessage>): MagicBoxMessage {
        const message = { diamondCount: 0n, magicBoxId: 0n, sendTime: 0n, delayTime: 0n, boxType: 0n, title: "", large: false, isOfficial: false, priority: 0n, descriptionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MagicBoxMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MagicBoxMessage): MagicBoxMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 diamond_count */ 2:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                case /* int64 magic_box_id */ 3:
                    message.magicBoxId = reader.int64().toBigInt();
                    break;
                case /* int64 send_time */ 4:
                    message.sendTime = reader.int64().toBigInt();
                    break;
                case /* int64 delay_time */ 5:
                    message.delayTime = reader.int64().toBigInt();
                    break;
                case /* int64 box_type */ 6:
                    message.boxType = reader.int64().toBigInt();
                    break;
                case /* string title */ 7:
                    message.title = reader.string();
                    break;
                case /* bool large */ 8:
                    message.large = reader.bool();
                    break;
                case /* data.Image background */ 9:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* bool is_official */ 10:
                    message.isOfficial = reader.bool();
                    break;
                case /* int64 priority */ 11:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 12:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated im.MagicBoxMessage.ImgText description_list */ 13:
                    message.descriptionList.push(MagicBoxMessage_ImgText.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MagicBoxMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 diamond_count = 2; */
        if (message.diamondCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.diamondCount);
        /* int64 magic_box_id = 3; */
        if (message.magicBoxId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.magicBoxId);
        /* int64 send_time = 4; */
        if (message.sendTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.sendTime);
        /* int64 delay_time = 5; */
        if (message.delayTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.delayTime);
        /* int64 box_type = 6; */
        if (message.boxType !== 0n)
            writer.tag(6, WireType.Varint).int64(message.boxType);
        /* string title = 7; */
        if (message.title !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        /* bool large = 8; */
        if (message.large !== false)
            writer.tag(8, WireType.Varint).bool(message.large);
        /* data.Image background = 9; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool is_official = 10; */
        if (message.isOfficial !== false)
            writer.tag(10, WireType.Varint).bool(message.isOfficial);
        /* int64 priority = 11; */
        if (message.priority !== 0n)
            writer.tag(11, WireType.Varint).int64(message.priority);
        /* data.User user = 12; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.MagicBoxMessage.ImgText description_list = 13; */
        for (let i = 0; i < message.descriptionList.length; i++)
            MagicBoxMessage_ImgText.internalBinaryWrite(message.descriptionList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MagicBoxMessage
 */
export const MagicBoxMessage = new MagicBoxMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MagicBoxMessage_ImgText$Type extends MessageType<MagicBoxMessage_ImgText> {
    constructor() {
        super("im.MagicBoxMessage.ImgText", [
            { no: 1, name: "image", kind: "message", T: () => Image },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MagicBoxMessage_ImgText>): MagicBoxMessage_ImgText {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MagicBoxMessage_ImgText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MagicBoxMessage_ImgText): MagicBoxMessage_ImgText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image image */ 1:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MagicBoxMessage_ImgText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image image = 1; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MagicBoxMessage.ImgText
 */
export const MagicBoxMessage_ImgText = new MagicBoxMessage_ImgText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaLiveReplayVidMessage$Type extends MessageType<MediaLiveReplayVidMessage> {
    constructor() {
        super("im.MediaLiveReplayVidMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "vid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MediaLiveReplayVidMessage>): MediaLiveReplayVidMessage {
        const message = { vid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MediaLiveReplayVidMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaLiveReplayVidMessage): MediaLiveReplayVidMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string vid */ 2:
                    message.vid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaLiveReplayVidMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string vid = 2; */
        if (message.vid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MediaLiveReplayVidMessage
 */
export const MediaLiveReplayVidMessage = new MediaLiveReplayVidMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberMessage$Type extends MessageType<MemberMessage> {
    constructor() {
        super("im.MemberMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "member_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "operator", kind: "message", T: () => User },
            { no: 5, name: "is_set_to_admin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_top_user", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "rank_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "top_user_no", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "enter_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "action_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "effect_config", kind: "message", T: () => MemberMessage_EffectConfig },
            { no: 14, name: "pop_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "enter_effect_config", kind: "message", T: () => MemberMessage_EffectConfig },
            { no: 16, name: "background_image", kind: "message", T: () => Image },
            { no: 17, name: "background_image_v2", kind: "message", T: () => Image },
            { no: 18, name: "anchor_display_text", kind: "message", T: () => Text },
            { no: 19, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 20, name: "user_enter_tip_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "anchor_enter_tip_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MemberMessage>): MemberMessage {
        const message = { memberCount: 0n, isSetToAdmin: false, isTopUser: false, rankScore: 0n, topUserNo: 0n, enterType: 0n, action: 0n, actionDescription: "", userId: 0n, popStr: "", userEnterTipType: 0n, anchorEnterTipType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MemberMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberMessage): MemberMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 member_count */ 3:
                    message.memberCount = reader.int64().toBigInt();
                    break;
                case /* data.User operator */ 4:
                    message.operator = User.internalBinaryRead(reader, reader.uint32(), options, message.operator);
                    break;
                case /* bool is_set_to_admin */ 5:
                    message.isSetToAdmin = reader.bool();
                    break;
                case /* bool is_top_user */ 6:
                    message.isTopUser = reader.bool();
                    break;
                case /* int64 rank_score */ 7:
                    message.rankScore = reader.int64().toBigInt();
                    break;
                case /* int64 top_user_no */ 8:
                    message.topUserNo = reader.int64().toBigInt();
                    break;
                case /* int64 enter_type */ 9:
                    message.enterType = reader.int64().toBigInt();
                    break;
                case /* int64 action */ 10:
                    message.action = reader.int64().toBigInt();
                    break;
                case /* string action_description */ 11:
                    message.actionDescription = reader.string();
                    break;
                case /* int64 user_id */ 12:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* im.MemberMessage.EffectConfig effect_config */ 13:
                    message.effectConfig = MemberMessage_EffectConfig.internalBinaryRead(reader, reader.uint32(), options, message.effectConfig);
                    break;
                case /* string pop_str */ 14:
                    message.popStr = reader.string();
                    break;
                case /* im.MemberMessage.EffectConfig enter_effect_config */ 15:
                    message.enterEffectConfig = MemberMessage_EffectConfig.internalBinaryRead(reader, reader.uint32(), options, message.enterEffectConfig);
                    break;
                case /* data.Image background_image */ 16:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* data.Image background_image_v2 */ 17:
                    message.backgroundImageV2 = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImageV2);
                    break;
                case /* data.Text anchor_display_text */ 18:
                    message.anchorDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.anchorDisplayText);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 19:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* int64 user_enter_tip_type */ 20:
                    message.userEnterTipType = reader.int64().toBigInt();
                    break;
                case /* int64 anchor_enter_tip_type */ 21:
                    message.anchorEnterTipType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MemberMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 member_count = 3; */
        if (message.memberCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.memberCount);
        /* data.User operator = 4; */
        if (message.operator)
            User.internalBinaryWrite(message.operator, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool is_set_to_admin = 5; */
        if (message.isSetToAdmin !== false)
            writer.tag(5, WireType.Varint).bool(message.isSetToAdmin);
        /* bool is_top_user = 6; */
        if (message.isTopUser !== false)
            writer.tag(6, WireType.Varint).bool(message.isTopUser);
        /* int64 rank_score = 7; */
        if (message.rankScore !== 0n)
            writer.tag(7, WireType.Varint).int64(message.rankScore);
        /* int64 top_user_no = 8; */
        if (message.topUserNo !== 0n)
            writer.tag(8, WireType.Varint).int64(message.topUserNo);
        /* int64 enter_type = 9; */
        if (message.enterType !== 0n)
            writer.tag(9, WireType.Varint).int64(message.enterType);
        /* int64 action = 10; */
        if (message.action !== 0n)
            writer.tag(10, WireType.Varint).int64(message.action);
        /* string action_description = 11; */
        if (message.actionDescription !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.actionDescription);
        /* int64 user_id = 12; */
        if (message.userId !== 0n)
            writer.tag(12, WireType.Varint).int64(message.userId);
        /* im.MemberMessage.EffectConfig effect_config = 13; */
        if (message.effectConfig)
            MemberMessage_EffectConfig.internalBinaryWrite(message.effectConfig, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string pop_str = 14; */
        if (message.popStr !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.popStr);
        /* im.MemberMessage.EffectConfig enter_effect_config = 15; */
        if (message.enterEffectConfig)
            MemberMessage_EffectConfig.internalBinaryWrite(message.enterEffectConfig, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_image = 16; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_image_v2 = 17; */
        if (message.backgroundImageV2)
            Image.internalBinaryWrite(message.backgroundImageV2, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* data.Text anchor_display_text = 18; */
        if (message.anchorDisplayText)
            Text.internalBinaryWrite(message.anchorDisplayText, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 19; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_enter_tip_type = 20; */
        if (message.userEnterTipType !== 0n)
            writer.tag(20, WireType.Varint).int64(message.userEnterTipType);
        /* int64 anchor_enter_tip_type = 21; */
        if (message.anchorEnterTipType !== 0n)
            writer.tag(21, WireType.Varint).int64(message.anchorEnterTipType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MemberMessage
 */
export const MemberMessage = new MemberMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberMessage_EffectConfig$Type extends MessageType<MemberMessage_EffectConfig> {
    constructor() {
        super("im.MemberMessage.EffectConfig", [
            { no: 1, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "icon", kind: "message", T: () => Image },
            { no: 3, name: "avatar_pos", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "text", kind: "message", T: () => Text },
            { no: 5, name: "text_icon", kind: "message", T: () => Image },
            { no: 6, name: "stay_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "anim_asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "badge", kind: "message", T: () => Image },
            { no: 9, name: "flex_setting_array", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "text_icon_overlay", kind: "message", T: () => Image },
            { no: 11, name: "animated_badge", kind: "message", T: () => Image },
            { no: 12, name: "has_sweep_light", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "text_flex_setting_array", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "center_anim_asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "dynamic_image", kind: "message", T: () => Image },
            { no: 17, name: "mp4_anim_asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "max_wait_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "dress_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "alignment", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "alignment_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "effect_scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MemberMessage_EffectConfig>): MemberMessage_EffectConfig {
        const message = { type: 0n, avatarPos: 0n, stayTime: 0, animAssetId: 0n, flexSettingArray: [], hasSweepLight: false, textFlexSettingArray: [], centerAnimAssetId: 0n, mp4AnimAssetId: 0n, priority: 0n, maxWaitTime: 0n, dressId: "", alignment: 0n, alignmentOffset: 0n, effectScene: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MemberMessage_EffectConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberMessage_EffectConfig): MemberMessage_EffectConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 type */ 1:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* data.Image icon */ 2:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 avatar_pos */ 3:
                    message.avatarPos = reader.int64().toBigInt();
                    break;
                case /* data.Text text */ 4:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* data.Image text_icon */ 5:
                    message.textIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.textIcon);
                    break;
                case /* int32 stay_time */ 6:
                    message.stayTime = reader.int32();
                    break;
                case /* int64 anim_asset_id */ 7:
                    message.animAssetId = reader.int64().toBigInt();
                    break;
                case /* data.Image badge */ 8:
                    message.badge = Image.internalBinaryRead(reader, reader.uint32(), options, message.badge);
                    break;
                case /* repeated int64 flex_setting_array */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.flexSettingArray.push(reader.int64().toBigInt());
                    else
                        message.flexSettingArray.push(reader.int64().toBigInt());
                    break;
                case /* data.Image text_icon_overlay */ 10:
                    message.textIconOverlay = Image.internalBinaryRead(reader, reader.uint32(), options, message.textIconOverlay);
                    break;
                case /* data.Image animated_badge */ 11:
                    message.animatedBadge = Image.internalBinaryRead(reader, reader.uint32(), options, message.animatedBadge);
                    break;
                case /* bool has_sweep_light */ 12:
                    message.hasSweepLight = reader.bool();
                    break;
                case /* repeated int64 text_flex_setting_array */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.textFlexSettingArray.push(reader.int64().toBigInt());
                    else
                        message.textFlexSettingArray.push(reader.int64().toBigInt());
                    break;
                case /* int64 center_anim_asset_id */ 14:
                    message.centerAnimAssetId = reader.int64().toBigInt();
                    break;
                case /* data.Image dynamic_image */ 15:
                    message.dynamicImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.dynamicImage);
                    break;
                case /* int64 mp4_anim_asset_id */ 17:
                    message.mp4AnimAssetId = reader.int64().toBigInt();
                    break;
                case /* int64 priority */ 18:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* int64 max_wait_time */ 19:
                    message.maxWaitTime = reader.int64().toBigInt();
                    break;
                case /* string dress_id */ 20:
                    message.dressId = reader.string();
                    break;
                case /* int64 alignment */ 21:
                    message.alignment = reader.int64().toBigInt();
                    break;
                case /* int64 alignment_offset */ 22:
                    message.alignmentOffset = reader.int64().toBigInt();
                    break;
                case /* string effect_scene */ 23:
                    message.effectScene = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MemberMessage_EffectConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 type = 1; */
        if (message.type !== 0n)
            writer.tag(1, WireType.Varint).int64(message.type);
        /* data.Image icon = 2; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 avatar_pos = 3; */
        if (message.avatarPos !== 0n)
            writer.tag(3, WireType.Varint).int64(message.avatarPos);
        /* data.Text text = 4; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image text_icon = 5; */
        if (message.textIcon)
            Image.internalBinaryWrite(message.textIcon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 stay_time = 6; */
        if (message.stayTime !== 0)
            writer.tag(6, WireType.Varint).int32(message.stayTime);
        /* int64 anim_asset_id = 7; */
        if (message.animAssetId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.animAssetId);
        /* data.Image badge = 8; */
        if (message.badge)
            Image.internalBinaryWrite(message.badge, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 flex_setting_array = 9; */
        if (message.flexSettingArray.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.flexSettingArray.length; i++)
                writer.int64(message.flexSettingArray[i]);
            writer.join();
        }
        /* data.Image text_icon_overlay = 10; */
        if (message.textIconOverlay)
            Image.internalBinaryWrite(message.textIconOverlay, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Image animated_badge = 11; */
        if (message.animatedBadge)
            Image.internalBinaryWrite(message.animatedBadge, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool has_sweep_light = 12; */
        if (message.hasSweepLight !== false)
            writer.tag(12, WireType.Varint).bool(message.hasSweepLight);
        /* repeated int64 text_flex_setting_array = 13; */
        if (message.textFlexSettingArray.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.textFlexSettingArray.length; i++)
                writer.int64(message.textFlexSettingArray[i]);
            writer.join();
        }
        /* int64 center_anim_asset_id = 14; */
        if (message.centerAnimAssetId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.centerAnimAssetId);
        /* data.Image dynamic_image = 15; */
        if (message.dynamicImage)
            Image.internalBinaryWrite(message.dynamicImage, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* int64 mp4_anim_asset_id = 17; */
        if (message.mp4AnimAssetId !== 0n)
            writer.tag(17, WireType.Varint).int64(message.mp4AnimAssetId);
        /* int64 priority = 18; */
        if (message.priority !== 0n)
            writer.tag(18, WireType.Varint).int64(message.priority);
        /* int64 max_wait_time = 19; */
        if (message.maxWaitTime !== 0n)
            writer.tag(19, WireType.Varint).int64(message.maxWaitTime);
        /* string dress_id = 20; */
        if (message.dressId !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.dressId);
        /* int64 alignment = 21; */
        if (message.alignment !== 0n)
            writer.tag(21, WireType.Varint).int64(message.alignment);
        /* int64 alignment_offset = 22; */
        if (message.alignmentOffset !== 0n)
            writer.tag(22, WireType.Varint).int64(message.alignmentOffset);
        /* string effect_scene = 23; */
        if (message.effectScene !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.effectScene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MemberMessage.EffectConfig
 */
export const MemberMessage_EffectConfig = new MemberMessage_EffectConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NabobImNoticeMessage$Type extends MessageType<NabobImNoticeMessage> {
    constructor() {
        super("im.NabobImNoticeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<NabobImNoticeMessage>): NabobImNoticeMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NabobImNoticeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NabobImNoticeMessage): NabobImNoticeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NabobImNoticeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NabobImNoticeMessage
 */
export const NabobImNoticeMessage = new NabobImNoticeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NobleEnterLeaveMessage$Type extends MessageType<NobleEnterLeaveMessage> {
    constructor() {
        super("im.NobleEnterLeaveMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "noble_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NobleEnterLeaveMessage>): NobleEnterLeaveMessage {
        const message = { nobleCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NobleEnterLeaveMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NobleEnterLeaveMessage): NobleEnterLeaveMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 noble_count */ 2:
                    message.nobleCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NobleEnterLeaveMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 noble_count = 2; */
        if (message.nobleCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.nobleCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NobleEnterLeaveMessage
 */
export const NobleEnterLeaveMessage = new NobleEnterLeaveMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NobleToastMessage$Type extends MessageType<NobleToastMessage> {
    constructor() {
        super("im.NobleToastMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "toast_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<NobleToastMessage>): NobleToastMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NobleToastMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NobleToastMessage): NobleToastMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.Image toast_icon */ 3:
                    message.toastIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.toastIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NobleToastMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image toast_icon = 3; */
        if (message.toastIcon)
            Image.internalBinaryWrite(message.toastIcon, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NobleToastMessage
 */
export const NobleToastMessage = new NobleToastMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NobleUpgradeMessage$Type extends MessageType<NobleUpgradeMessage> {
    constructor() {
        super("im.NobleUpgradeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "open_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "background_pop", kind: "message", T: () => Image },
            { no: 5, name: "background_normal", kind: "message", T: () => Image },
            { no: 6, name: "display_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "priority", kind: "message", T: () => GiftIMPriority }
        ]);
    }
    create(value?: PartialMessage<NobleUpgradeMessage>): NobleUpgradeMessage {
        const message = { openUrl: "", displayStyle: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NobleUpgradeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NobleUpgradeMessage): NobleUpgradeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string open_url */ 3:
                    message.openUrl = reader.string();
                    break;
                case /* data.Image background_pop */ 4:
                    message.backgroundPop = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundPop);
                    break;
                case /* data.Image background_normal */ 5:
                    message.backgroundNormal = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundNormal);
                    break;
                case /* int32 display_style */ 6:
                    message.displayStyle = reader.int32();
                    break;
                case /* data.GiftIMPriority priority */ 7:
                    message.priority = GiftIMPriority.internalBinaryRead(reader, reader.uint32(), options, message.priority);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NobleUpgradeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string open_url = 3; */
        if (message.openUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.openUrl);
        /* data.Image background_pop = 4; */
        if (message.backgroundPop)
            Image.internalBinaryWrite(message.backgroundPop, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_normal = 5; */
        if (message.backgroundNormal)
            Image.internalBinaryWrite(message.backgroundNormal, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 display_style = 6; */
        if (message.displayStyle !== 0)
            writer.tag(6, WireType.Varint).int32(message.displayStyle);
        /* data.GiftIMPriority priority = 7; */
        if (message.priority)
            GiftIMPriority.internalBinaryWrite(message.priority, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NobleUpgradeMessage
 */
export const NobleUpgradeMessage = new NobleUpgradeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoticeMessage$Type extends MessageType<NoticeMessage> {
    constructor() {
        super("im.NoticeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notice_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "style", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "title", kind: "message", T: () => Text },
            { no: 6, name: "violation_reason", kind: "message", T: () => Text },
            { no: 7, name: "display_text", kind: "message", T: () => Text },
            { no: 8, name: "tips_title", kind: "message", T: () => Text },
            { no: 9, name: "tips_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "notice_title", kind: "message", T: () => Text },
            { no: 11, name: "notice_content", kind: "message", T: () => Text },
            { no: 12, name: "notice_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "limit_notice_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "button_confirm", kind: "message", T: () => Text },
            { no: 15, name: "button_cancel", kind: "message", T: () => Text },
            { no: 16, name: "event_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "top_icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "decoration_audited_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "punish_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "countdown_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "education_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "education_task_record_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "log_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NoticeMessage>): NoticeMessage {
        const message = { content: "", noticeType: 0n, style: "", tipsUrl: "", noticeTime: 0n, limitNoticeKey: "", eventName: "", topIconUrl: "", decorationAuditedContent: "", punishTime: 0n, countdownTime: 0n, educationUrl: "", educationTaskRecordId: 0n, logExtra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NoticeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoticeMessage): NoticeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 notice_type */ 3:
                    message.noticeType = reader.int64().toBigInt();
                    break;
                case /* string style */ 4:
                    message.style = reader.string();
                    break;
                case /* data.Text title */ 5:
                    message.title = Text.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* data.Text violation_reason */ 6:
                    message.violationReason = Text.internalBinaryRead(reader, reader.uint32(), options, message.violationReason);
                    break;
                case /* data.Text display_text */ 7:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* data.Text tips_title */ 8:
                    message.tipsTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.tipsTitle);
                    break;
                case /* string tips_url */ 9:
                    message.tipsUrl = reader.string();
                    break;
                case /* data.Text notice_title */ 10:
                    message.noticeTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.noticeTitle);
                    break;
                case /* data.Text notice_content */ 11:
                    message.noticeContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.noticeContent);
                    break;
                case /* int64 notice_time */ 12:
                    message.noticeTime = reader.int64().toBigInt();
                    break;
                case /* string limit_notice_key */ 13:
                    message.limitNoticeKey = reader.string();
                    break;
                case /* data.Text button_confirm */ 14:
                    message.buttonConfirm = Text.internalBinaryRead(reader, reader.uint32(), options, message.buttonConfirm);
                    break;
                case /* data.Text button_cancel */ 15:
                    message.buttonCancel = Text.internalBinaryRead(reader, reader.uint32(), options, message.buttonCancel);
                    break;
                case /* string event_name */ 16:
                    message.eventName = reader.string();
                    break;
                case /* string top_icon_url */ 17:
                    message.topIconUrl = reader.string();
                    break;
                case /* string decoration_audited_content */ 18:
                    message.decorationAuditedContent = reader.string();
                    break;
                case /* int64 punish_time */ 19:
                    message.punishTime = reader.int64().toBigInt();
                    break;
                case /* int64 countdown_time */ 20:
                    message.countdownTime = reader.int64().toBigInt();
                    break;
                case /* string education_url */ 21:
                    message.educationUrl = reader.string();
                    break;
                case /* int64 education_task_record_id */ 22:
                    message.educationTaskRecordId = reader.int64().toBigInt();
                    break;
                case /* string log_extra */ 23:
                    message.logExtra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NoticeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 notice_type = 3; */
        if (message.noticeType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.noticeType);
        /* string style = 4; */
        if (message.style !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.style);
        /* data.Text title = 5; */
        if (message.title)
            Text.internalBinaryWrite(message.title, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Text violation_reason = 6; */
        if (message.violationReason)
            Text.internalBinaryWrite(message.violationReason, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Text display_text = 7; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Text tips_title = 8; */
        if (message.tipsTitle)
            Text.internalBinaryWrite(message.tipsTitle, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string tips_url = 9; */
        if (message.tipsUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.tipsUrl);
        /* data.Text notice_title = 10; */
        if (message.noticeTitle)
            Text.internalBinaryWrite(message.noticeTitle, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* data.Text notice_content = 11; */
        if (message.noticeContent)
            Text.internalBinaryWrite(message.noticeContent, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 notice_time = 12; */
        if (message.noticeTime !== 0n)
            writer.tag(12, WireType.Varint).int64(message.noticeTime);
        /* string limit_notice_key = 13; */
        if (message.limitNoticeKey !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.limitNoticeKey);
        /* data.Text button_confirm = 14; */
        if (message.buttonConfirm)
            Text.internalBinaryWrite(message.buttonConfirm, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* data.Text button_cancel = 15; */
        if (message.buttonCancel)
            Text.internalBinaryWrite(message.buttonCancel, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string event_name = 16; */
        if (message.eventName !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.eventName);
        /* string top_icon_url = 17; */
        if (message.topIconUrl !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.topIconUrl);
        /* string decoration_audited_content = 18; */
        if (message.decorationAuditedContent !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.decorationAuditedContent);
        /* int64 punish_time = 19; */
        if (message.punishTime !== 0n)
            writer.tag(19, WireType.Varint).int64(message.punishTime);
        /* int64 countdown_time = 20; */
        if (message.countdownTime !== 0n)
            writer.tag(20, WireType.Varint).int64(message.countdownTime);
        /* string education_url = 21; */
        if (message.educationUrl !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.educationUrl);
        /* int64 education_task_record_id = 22; */
        if (message.educationTaskRecordId !== 0n)
            writer.tag(22, WireType.Varint).int64(message.educationTaskRecordId);
        /* string log_extra = 23; */
        if (message.logExtra !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.logExtra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NoticeMessage
 */
export const NoticeMessage = new NoticeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyMessage$Type extends MessageType<NotifyMessage> {
    constructor() {
        super("im.NotifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notify_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "user", kind: "message", T: () => User },
            { no: 6, name: "extra", kind: "message", T: () => NotifyMessage_Extra },
            { no: 7, name: "notify_class", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "flex_setting", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 100, name: "biz_scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyMessage>): NotifyMessage {
        const message = { schema: "", notifyType: 0n, content: "", notifyClass: 0n, flexSetting: [], bizScene: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyMessage): NotifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* int64 notify_type */ 3:
                    message.notifyType = reader.int64().toBigInt();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* data.User user */ 5:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* im.NotifyMessage.Extra extra */ 6:
                    message.extra = NotifyMessage_Extra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                case /* int64 notify_class */ 7:
                    message.notifyClass = reader.int64().toBigInt();
                    break;
                case /* repeated int64 flex_setting */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.flexSetting.push(reader.int64().toBigInt());
                    else
                        message.flexSetting.push(reader.int64().toBigInt());
                    break;
                case /* string biz_scene */ 100:
                    message.bizScene = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* int64 notify_type = 3; */
        if (message.notifyType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.notifyType);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* data.User user = 5; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.NotifyMessage.Extra extra = 6; */
        if (message.extra)
            NotifyMessage_Extra.internalBinaryWrite(message.extra, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 notify_class = 7; */
        if (message.notifyClass !== 0n)
            writer.tag(7, WireType.Varint).int64(message.notifyClass);
        /* repeated int64 flex_setting = 8; */
        if (message.flexSetting.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.flexSetting.length; i++)
                writer.int64(message.flexSetting[i]);
            writer.join();
        }
        /* string biz_scene = 100; */
        if (message.bizScene !== "")
            writer.tag(100, WireType.LengthDelimited).string(message.bizScene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyMessage
 */
export const NotifyMessage = new NotifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyMessage_Background$Type extends MessageType<NotifyMessage_Background> {
    constructor() {
        super("im.NotifyMessage.Background", [
            { no: 1, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "url_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyMessage_Background>): NotifyMessage_Background {
        const message = { width: 0, height: 0, urlList: [], uri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyMessage_Background>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyMessage_Background): NotifyMessage_Background {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 width */ 1:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 2:
                    message.height = reader.int32();
                    break;
                case /* repeated string url_list */ 3:
                    message.urlList.push(reader.string());
                    break;
                case /* string uri */ 4:
                    message.uri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyMessage_Background, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Varint).int32(message.width);
        /* int32 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int32(message.height);
        /* repeated string url_list = 3; */
        for (let i = 0; i < message.urlList.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.urlList[i]);
        /* string uri = 4; */
        if (message.uri !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.uri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyMessage.Background
 */
export const NotifyMessage_Background = new NotifyMessage_Background$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyMessage_Content$Type extends MessageType<NotifyMessage_Content> {
    constructor() {
        super("im.NotifyMessage.Content", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "need_high_light", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyMessage_Content>): NotifyMessage_Content {
        const message = { content: "", needHighLight: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyMessage_Content>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyMessage_Content): NotifyMessage_Content {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* bool need_high_light */ 2:
                    message.needHighLight = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyMessage_Content, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* bool need_high_light = 2; */
        if (message.needHighLight !== false)
            writer.tag(2, WireType.Varint).bool(message.needHighLight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyMessage.Content
 */
export const NotifyMessage_Content = new NotifyMessage_Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyMessage_ContentList$Type extends MessageType<NotifyMessage_ContentList> {
    constructor() {
        super("im.NotifyMessage.ContentList", [
            { no: 1, name: "contents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotifyMessage_Content },
            { no: 2, name: "high_light_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyMessage_ContentList>): NotifyMessage_ContentList {
        const message = { contents: [], highLightColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyMessage_ContentList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyMessage_ContentList): NotifyMessage_ContentList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.NotifyMessage.Content contents */ 1:
                    message.contents.push(NotifyMessage_Content.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string high_light_color */ 2:
                    message.highLightColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyMessage_ContentList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.NotifyMessage.Content contents = 1; */
        for (let i = 0; i < message.contents.length; i++)
            NotifyMessage_Content.internalBinaryWrite(message.contents[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string high_light_color = 2; */
        if (message.highLightColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.highLightColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyMessage.ContentList
 */
export const NotifyMessage_ContentList = new NotifyMessage_ContentList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyMessage_Extra$Type extends MessageType<NotifyMessage_Extra> {
    constructor() {
        super("im.NotifyMessage.Extra", [
            { no: 1, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "background", kind: "message", T: () => NotifyMessage_Background },
            { no: 3, name: "content_list", kind: "message", T: () => NotifyMessage_ContentList },
            { no: 6, name: "need_gift_frequency", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyMessage_Extra>): NotifyMessage_Extra {
        const message = { duration: 0n, needGiftFrequency: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyMessage_Extra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyMessage_Extra): NotifyMessage_Extra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 duration */ 1:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* im.NotifyMessage.Background background */ 2:
                    message.background = NotifyMessage_Background.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* im.NotifyMessage.ContentList content_list */ 3:
                    message.contentList = NotifyMessage_ContentList.internalBinaryRead(reader, reader.uint32(), options, message.contentList);
                    break;
                case /* bool need_gift_frequency */ 6:
                    message.needGiftFrequency = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyMessage_Extra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 duration = 1; */
        if (message.duration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.duration);
        /* im.NotifyMessage.Background background = 2; */
        if (message.background)
            NotifyMessage_Background.internalBinaryWrite(message.background, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.NotifyMessage.ContentList content_list = 3; */
        if (message.contentList)
            NotifyMessage_ContentList.internalBinaryWrite(message.contentList, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool need_gift_frequency = 6; */
        if (message.needGiftFrequency !== false)
            writer.tag(6, WireType.Varint).bool(message.needGiftFrequency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyMessage.Extra
 */
export const NotifyMessage_Extra = new NotifyMessage_Extra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OChannelAnchorMessage$Type extends MessageType<OChannelAnchorMessage> {
    constructor() {
        super("im.OChannelAnchorMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "channel_user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<OChannelAnchorMessage>): OChannelAnchorMessage {
        const message = { startTimestamp: 0n, endTimestamp: 0n, content: "", roomId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OChannelAnchorMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OChannelAnchorMessage): OChannelAnchorMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 start_timestamp */ 2:
                    message.startTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 end_timestamp */ 3:
                    message.endTimestamp = reader.int64().toBigInt();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* int64 room_id */ 5:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* data.User channel_user */ 6:
                    message.channelUser = User.internalBinaryRead(reader, reader.uint32(), options, message.channelUser);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OChannelAnchorMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_timestamp = 2; */
        if (message.startTimestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTimestamp);
        /* int64 end_timestamp = 3; */
        if (message.endTimestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTimestamp);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* int64 room_id = 5; */
        if (message.roomId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.roomId);
        /* data.User channel_user = 6; */
        if (message.channelUser)
            User.internalBinaryWrite(message.channelUser, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OChannelAnchorMessage
 */
export const OChannelAnchorMessage = new OChannelAnchorMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OChannelUserMessage$Type extends MessageType<OChannelUserMessage> {
    constructor() {
        super("im.OChannelUserMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "max_enter_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "max_next_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<OChannelUserMessage>): OChannelUserMessage {
        const message = { startTimestamp: 0n, endTimestamp: 0n, maxEnterTime: 0n, roomId: 0n, maxNextTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OChannelUserMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OChannelUserMessage): OChannelUserMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 start_timestamp */ 2:
                    message.startTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 end_timestamp */ 3:
                    message.endTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 max_enter_time */ 4:
                    message.maxEnterTime = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 5:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 max_next_time */ 6:
                    message.maxNextTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OChannelUserMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_timestamp = 2; */
        if (message.startTimestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTimestamp);
        /* int64 end_timestamp = 3; */
        if (message.endTimestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTimestamp);
        /* int64 max_enter_time = 4; */
        if (message.maxEnterTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.maxEnterTime);
        /* int64 room_id = 5; */
        if (message.roomId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.roomId);
        /* int64 max_next_time = 6; */
        if (message.maxNextTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.maxNextTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OChannelUserMessage
 */
export const OChannelUserMessage = new OChannelUserMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OChannelModifyMessage$Type extends MessageType<OChannelModifyMessage> {
    constructor() {
        super("im.OChannelModifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "channel_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "showlist_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OChannelModifyMessage>): OChannelModifyMessage {
        const message = { startTimestamp: 0n, endTimestamp: 0n, channelUid: 0n, showlistSchema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OChannelModifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OChannelModifyMessage): OChannelModifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 start_timestamp */ 2:
                    message.startTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 end_timestamp */ 3:
                    message.endTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 channel_uid */ 4:
                    message.channelUid = reader.int64().toBigInt();
                    break;
                case /* string showlist_schema */ 5:
                    message.showlistSchema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OChannelModifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_timestamp = 2; */
        if (message.startTimestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTimestamp);
        /* int64 end_timestamp = 3; */
        if (message.endTimestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTimestamp);
        /* int64 channel_uid = 4; */
        if (message.channelUid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.channelUid);
        /* string showlist_schema = 5; */
        if (message.showlistSchema !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.showlistSchema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OChannelModifyMessage
 */
export const OChannelModifyMessage = new OChannelModifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OChannelLastestShowMessage$Type extends MessageType<OChannelLastestShowMessage> {
    constructor() {
        super("im.OChannelLastestShowMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "start_ts", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "showlist_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OChannelLastestShowMessage>): OChannelLastestShowMessage {
        const message = { startTs: 0n, showlistSchema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OChannelLastestShowMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OChannelLastestShowMessage): OChannelLastestShowMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 start_ts */ 2:
                    message.startTs = reader.int64().toBigInt();
                    break;
                case /* string showlist_schema */ 5:
                    message.showlistSchema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OChannelLastestShowMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_ts = 2; */
        if (message.startTs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTs);
        /* string showlist_schema = 5; */
        if (message.showlistSchema !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.showlistSchema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OChannelLastestShowMessage
 */
export const OChannelLastestShowMessage = new OChannelLastestShowMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OChannelGrabMicShowMessage$Type extends MessageType<OChannelGrabMicShowMessage> {
    constructor() {
        super("im.OChannelGrabMicShowMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "show_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "channel_user", kind: "message", T: () => User },
            { no: 7, name: "showlist_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OChannelGrabMicShowMessage>): OChannelGrabMicShowMessage {
        const message = { showId: 0n, text: "", startTimestamp: 0n, endTimestamp: 0n, showlistName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OChannelGrabMicShowMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OChannelGrabMicShowMessage): OChannelGrabMicShowMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 show_id */ 2:
                    message.showId = reader.int64().toBigInt();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* int64 start_timestamp */ 4:
                    message.startTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 end_timestamp */ 5:
                    message.endTimestamp = reader.int64().toBigInt();
                    break;
                case /* data.User channel_user */ 6:
                    message.channelUser = User.internalBinaryRead(reader, reader.uint32(), options, message.channelUser);
                    break;
                case /* string showlist_name */ 7:
                    message.showlistName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OChannelGrabMicShowMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 show_id = 2; */
        if (message.showId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.showId);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* int64 start_timestamp = 4; */
        if (message.startTimestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.startTimestamp);
        /* int64 end_timestamp = 5; */
        if (message.endTimestamp !== 0n)
            writer.tag(5, WireType.Varint).int64(message.endTimestamp);
        /* data.User channel_user = 6; */
        if (message.channelUser)
            User.internalBinaryWrite(message.channelUser, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string showlist_name = 7; */
        if (message.showlistName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.showlistName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OChannelGrabMicShowMessage
 */
export const OChannelGrabMicShowMessage = new OChannelGrabMicShowMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopularCardMessage$Type extends MessageType<PopularCardMessage> {
    constructor() {
        super("im.PopularCardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "popular_card_info", kind: "message", T: () => PopularCardMessage_PopularCardInfo }
        ]);
    }
    create(value?: PartialMessage<PopularCardMessage>): PopularCardMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopularCardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopularCardMessage): PopularCardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.PopularCardMessage.PopularCardInfo popular_card_info */ 2:
                    message.popularCardInfo = PopularCardMessage_PopularCardInfo.internalBinaryRead(reader, reader.uint32(), options, message.popularCardInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopularCardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.PopularCardMessage.PopularCardInfo popular_card_info = 2; */
        if (message.popularCardInfo)
            PopularCardMessage_PopularCardInfo.internalBinaryWrite(message.popularCardInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PopularCardMessage
 */
export const PopularCardMessage = new PopularCardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopularCardMessage_PopularCardInfo$Type extends MessageType<PopularCardMessage_PopularCardInfo> {
    constructor() {
        super("im.PopularCardMessage.PopularCardInfo", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "enter_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PopularCardMessage_PopularCardInfo>): PopularCardMessage_PopularCardInfo {
        const message = { status: 0, startTime: 0n, endTime: 0n, enterNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopularCardMessage_PopularCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopularCardMessage_PopularCardInfo): PopularCardMessage_PopularCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 3:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 enter_number */ 4:
                    message.enterNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopularCardMessage_PopularCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* int64 start_time = 2; */
        if (message.startTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 3; */
        if (message.endTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTime);
        /* int32 enter_number = 4; */
        if (message.enterNumber !== 0)
            writer.tag(4, WireType.Varint).int32(message.enterNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PopularCardMessage.PopularCardInfo
 */
export const PopularCardMessage_PopularCardInfo = new PopularCardMessage_PopularCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PortalMessage$Type extends MessageType<PortalMessage> {
    constructor() {
        super("im.PortalMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "portal_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "portal_buy", kind: "message", T: () => PortalBuy },
            { no: 6, name: "portal_invite", kind: "message", T: () => PortalInvite },
            { no: 7, name: "portal_finish", kind: "message", T: () => PortalFinish },
            { no: 8, name: "portal", kind: "message", T: () => Portal },
            { no: 9, name: "next_ping_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PortalMessage>): PortalMessage {
        const message = { type: 0n, portalId: 0n, roomId: 0n, nextPingTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PortalMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PortalMessage): PortalMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* int64 portal_id */ 3:
                    message.portalId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 4:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* im.PortalBuy portal_buy */ 5:
                    message.portalBuy = PortalBuy.internalBinaryRead(reader, reader.uint32(), options, message.portalBuy);
                    break;
                case /* im.PortalInvite portal_invite */ 6:
                    message.portalInvite = PortalInvite.internalBinaryRead(reader, reader.uint32(), options, message.portalInvite);
                    break;
                case /* im.PortalFinish portal_finish */ 7:
                    message.portalFinish = PortalFinish.internalBinaryRead(reader, reader.uint32(), options, message.portalFinish);
                    break;
                case /* data.Portal portal */ 8:
                    message.portal = Portal.internalBinaryRead(reader, reader.uint32(), options, message.portal);
                    break;
                case /* int64 next_ping_time */ 9:
                    message.nextPingTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PortalMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 type = 2; */
        if (message.type !== 0n)
            writer.tag(2, WireType.Varint).int64(message.type);
        /* int64 portal_id = 3; */
        if (message.portalId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.portalId);
        /* int64 room_id = 4; */
        if (message.roomId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.roomId);
        /* im.PortalBuy portal_buy = 5; */
        if (message.portalBuy)
            PortalBuy.internalBinaryWrite(message.portalBuy, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.PortalInvite portal_invite = 6; */
        if (message.portalInvite)
            PortalInvite.internalBinaryWrite(message.portalInvite, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.PortalFinish portal_finish = 7; */
        if (message.portalFinish)
            PortalFinish.internalBinaryWrite(message.portalFinish, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Portal portal = 8; */
        if (message.portal)
            Portal.internalBinaryWrite(message.portal, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 next_ping_time = 9; */
        if (message.nextPingTime !== 0n)
            writer.tag(9, WireType.Varint).int64(message.nextPingTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PortalMessage
 */
export const PortalMessage = new PortalMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PortalBuy$Type extends MessageType<PortalBuy> {
    constructor() {
        super("im.PortalBuy", [
            { no: 1, name: "sugar_daddy", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<PortalBuy>): PortalBuy {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PortalBuy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PortalBuy): PortalBuy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User sugar_daddy */ 1:
                    message.sugarDaddy = User.internalBinaryRead(reader, reader.uint32(), options, message.sugarDaddy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PortalBuy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User sugar_daddy = 1; */
        if (message.sugarDaddy)
            User.internalBinaryWrite(message.sugarDaddy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PortalBuy
 */
export const PortalBuy = new PortalBuy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PortalInvite$Type extends MessageType<PortalInvite> {
    constructor() {
        super("im.PortalInvite", [
            { no: 1, name: "invite_count_down", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reward_count_down", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "sugar_daddy", kind: "message", T: () => User },
            { no: 4, name: "anchor", kind: "message", T: () => User },
            { no: 5, name: "cover", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<PortalInvite>): PortalInvite {
        const message = { inviteCountDown: 0n, rewardCountDown: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PortalInvite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PortalInvite): PortalInvite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 invite_count_down */ 1:
                    message.inviteCountDown = reader.int64().toBigInt();
                    break;
                case /* int64 reward_count_down */ 2:
                    message.rewardCountDown = reader.int64().toBigInt();
                    break;
                case /* data.User sugar_daddy */ 3:
                    message.sugarDaddy = User.internalBinaryRead(reader, reader.uint32(), options, message.sugarDaddy);
                    break;
                case /* data.User anchor */ 4:
                    message.anchor = User.internalBinaryRead(reader, reader.uint32(), options, message.anchor);
                    break;
                case /* data.Image cover */ 5:
                    message.cover = Image.internalBinaryRead(reader, reader.uint32(), options, message.cover);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PortalInvite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 invite_count_down = 1; */
        if (message.inviteCountDown !== 0n)
            writer.tag(1, WireType.Varint).int64(message.inviteCountDown);
        /* int64 reward_count_down = 2; */
        if (message.rewardCountDown !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rewardCountDown);
        /* data.User sugar_daddy = 3; */
        if (message.sugarDaddy)
            User.internalBinaryWrite(message.sugarDaddy, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.User anchor = 4; */
        if (message.anchor)
            User.internalBinaryWrite(message.anchor, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image cover = 5; */
        if (message.cover)
            Image.internalBinaryWrite(message.cover, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PortalInvite
 */
export const PortalInvite = new PortalInvite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PortalFinish$Type extends MessageType<PortalFinish> {
    constructor() {
        super("im.PortalFinish", [
            { no: 1, name: "lucky_person", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<PortalFinish>): PortalFinish {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PortalFinish>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PortalFinish): PortalFinish {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User lucky_person */ 1:
                    message.luckyPerson = User.internalBinaryRead(reader, reader.uint32(), options, message.luckyPerson);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PortalFinish, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User lucky_person = 1; */
        if (message.luckyPerson)
            User.internalBinaryWrite(message.luckyPerson, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PortalFinish
 */
export const PortalFinish = new PortalFinish$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PropertyNoticeMessage$Type extends MessageType<PropertyNoticeMessage> {
    constructor() {
        super("im.PropertyNoticeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "property_event_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PropertyNoticeMessage>): PropertyNoticeMessage {
        const message = { content: "", userId: 0n, propertyEventType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropertyNoticeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropertyNoticeMessage): PropertyNoticeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 property_event_type */ 4:
                    message.propertyEventType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropertyNoticeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* int64 property_event_type = 4; */
        if (message.propertyEventType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.propertyEventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PropertyNoticeMessage
 */
export const PropertyNoticeMessage = new PropertyNoticeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushMessage$Type extends MessageType<PushMessage> {
    constructor() {
        super("im.PushMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "traceid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icon", kind: "message", T: () => Image },
            { no: 6, name: "action_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "push_message_display_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "background_image", kind: "message", T: () => FlexImageStruct },
            { no: 10, name: "action_icon", kind: "message", T: () => Image },
            { no: 11, name: "new_background_image", kind: "message", T: () => FlexImageStruct },
            { no: 12, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PushMessage>): PushMessage {
        const message = { content: "", color: "", traceid: "", actionContent: "", actionType: 0n, pushMessageDisplayTime: 0n, source: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PushMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushMessage): PushMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* string traceid */ 4:
                    message.traceid = reader.string();
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string action_content */ 6:
                    message.actionContent = reader.string();
                    break;
                case /* int64 action_type */ 7:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* int64 push_message_display_time */ 8:
                    message.pushMessageDisplayTime = reader.int64().toBigInt();
                    break;
                case /* im.FlexImageStruct background_image */ 9:
                    message.backgroundImage = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* data.Image action_icon */ 10:
                    message.actionIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.actionIcon);
                    break;
                case /* im.FlexImageStruct new_background_image */ 11:
                    message.newBackgroundImage = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.newBackgroundImage);
                    break;
                case /* string source */ 12:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* string traceid = 4; */
        if (message.traceid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.traceid);
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string action_content = 6; */
        if (message.actionContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.actionContent);
        /* int64 action_type = 7; */
        if (message.actionType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.actionType);
        /* int64 push_message_display_time = 8; */
        if (message.pushMessageDisplayTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.pushMessageDisplayTime);
        /* im.FlexImageStruct background_image = 9; */
        if (message.backgroundImage)
            FlexImageStruct.internalBinaryWrite(message.backgroundImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image action_icon = 10; */
        if (message.actionIcon)
            Image.internalBinaryWrite(message.actionIcon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* im.FlexImageStruct new_background_image = 11; */
        if (message.newBackgroundImage)
            FlexImageStruct.internalBinaryWrite(message.newBackgroundImage, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string source = 12; */
        if (message.source !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PushMessage
 */
export const PushMessage = new PushMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FansclubV1PushMessage$Type extends MessageType<FansclubV1PushMessage> {
    constructor() {
        super("im.FansclubV1PushMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "traceid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icon", kind: "message", T: () => Image },
            { no: 6, name: "action_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "push_message_display_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "background_image", kind: "message", T: () => FlexImageStruct },
            { no: 10, name: "action_icon", kind: "message", T: () => Image },
            { no: 11, name: "new_background_image", kind: "message", T: () => FlexImageStruct },
            { no: 12, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FansclubV1PushMessage>): FansclubV1PushMessage {
        const message = { content: "", color: "", traceid: "", actionContent: "", actionType: 0n, pushMessageDisplayTime: 0n, source: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FansclubV1PushMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FansclubV1PushMessage): FansclubV1PushMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* string traceid */ 4:
                    message.traceid = reader.string();
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string action_content */ 6:
                    message.actionContent = reader.string();
                    break;
                case /* int64 action_type */ 7:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* int64 push_message_display_time */ 8:
                    message.pushMessageDisplayTime = reader.int64().toBigInt();
                    break;
                case /* im.FlexImageStruct background_image */ 9:
                    message.backgroundImage = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* data.Image action_icon */ 10:
                    message.actionIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.actionIcon);
                    break;
                case /* im.FlexImageStruct new_background_image */ 11:
                    message.newBackgroundImage = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.newBackgroundImage);
                    break;
                case /* string source */ 12:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FansclubV1PushMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* string traceid = 4; */
        if (message.traceid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.traceid);
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string action_content = 6; */
        if (message.actionContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.actionContent);
        /* int64 action_type = 7; */
        if (message.actionType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.actionType);
        /* int64 push_message_display_time = 8; */
        if (message.pushMessageDisplayTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.pushMessageDisplayTime);
        /* im.FlexImageStruct background_image = 9; */
        if (message.backgroundImage)
            FlexImageStruct.internalBinaryWrite(message.backgroundImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* data.Image action_icon = 10; */
        if (message.actionIcon)
            Image.internalBinaryWrite(message.actionIcon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* im.FlexImageStruct new_background_image = 11; */
        if (message.newBackgroundImage)
            FlexImageStruct.internalBinaryWrite(message.newBackgroundImage, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string source = 12; */
        if (message.source !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FansclubV1PushMessage
 */
export const FansclubV1PushMessage = new FansclubV1PushMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizStartMessage$Type extends MessageType<QuizStartMessage> {
    constructor() {
        super("im.QuizStartMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "display_text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<QuizStartMessage>): QuizStartMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizStartMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizStartMessage): QuizStartMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Text display_text */ 2:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizStartMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text display_text = 2; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizStartMessage
 */
export const QuizStartMessage = new QuizStartMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizResult$Type extends MessageType<QuizResult> {
    constructor() {
        super("im.QuizResult", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "result", kind: "message", T: () => Text },
            { no: 3, name: "gain", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<QuizResult>): QuizResult {
        const message = { title: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizResult): QuizResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* data.Text result */ 2:
                    message.result = Text.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* data.Text gain */ 3:
                    message.gain = Text.internalBinaryRead(reader, reader.uint32(), options, message.gain);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* data.Text result = 2; */
        if (message.result)
            Text.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text gain = 3; */
        if (message.gain)
            Text.internalBinaryWrite(message.gain, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizResult
 */
export const QuizResult = new QuizResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizResultMessage$Type extends MessageType<QuizResultMessage> {
    constructor() {
        super("im.QuizResultMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 3, name: "quiz_result", kind: "message", T: () => QuizResult }
        ]);
    }
    create(value?: PartialMessage<QuizResultMessage>): QuizResultMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizResultMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizResultMessage): QuizResultMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.QuizResult quiz_result */ 3:
                    message.quizResult = QuizResult.internalBinaryRead(reader, reader.uint32(), options, message.quizResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizResultMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.QuizResult quiz_result = 3; */
        if (message.quizResult)
            QuizResult.internalBinaryWrite(message.quizResult, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizResultMessage
 */
export const QuizResultMessage = new QuizResultMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizChangeData$Type extends MessageType<QuizChangeData> {
    constructor() {
        super("im.QuizChangeData", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BetOption }
        ]);
    }
    create(value?: PartialMessage<QuizChangeData>): QuizChangeData {
        const message = { quizId: 0n, status: 0n, options: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizChangeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizChangeData): QuizChangeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 quiz_id */ 1:
                    message.quizId = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 2:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* repeated data.BetOption options */ 4:
                    message.options.push(BetOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizChangeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 quiz_id = 1; */
        if (message.quizId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.quizId);
        /* int64 status = 2; */
        if (message.status !== 0n)
            writer.tag(2, WireType.Varint).int64(message.status);
        /* repeated data.BetOption options = 4; */
        for (let i = 0; i < message.options.length; i++)
            BetOption.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizChangeData
 */
export const QuizChangeData = new QuizChangeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizChangeMessage$Type extends MessageType<QuizChangeMessage> {
    constructor() {
        super("im.QuizChangeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "quiz_change_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QuizChangeData }
        ]);
    }
    create(value?: PartialMessage<QuizChangeMessage>): QuizChangeMessage {
        const message = { quizChangeData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizChangeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizChangeMessage): QuizChangeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.QuizChangeData quiz_change_data */ 2:
                    message.quizChangeData.push(QuizChangeData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizChangeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.QuizChangeData quiz_change_data = 2; */
        for (let i = 0; i < message.quizChangeData.length; i++)
            QuizChangeData.internalBinaryWrite(message.quizChangeData[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizChangeMessage
 */
export const QuizChangeMessage = new QuizChangeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRedPacketMessage$Type extends MessageType<CreateRedPacketMessage> {
    constructor() {
        super("im.CreateRedPacketMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "red_packets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedPacket }
        ]);
    }
    create(value?: PartialMessage<CreateRedPacketMessage>): CreateRedPacketMessage {
        const message = { redPackets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateRedPacketMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRedPacketMessage): CreateRedPacketMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.RedPacket red_packets */ 2:
                    message.redPackets.push(RedPacket.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRedPacketMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.RedPacket red_packets = 2; */
        for (let i = 0; i < message.redPackets.length; i++)
            RedPacket.internalBinaryWrite(message.redPackets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CreateRedPacketMessage
 */
export const CreateRedPacketMessage = new CreateRedPacketMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RushRedPacketMessage$Type extends MessageType<RushRedPacketMessage> {
    constructor() {
        super("im.RushRedPacketMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "red_packet_rush_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedPacketRushRecord }
        ]);
    }
    create(value?: PartialMessage<RushRedPacketMessage>): RushRedPacketMessage {
        const message = { redPacketRushRecords: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RushRedPacketMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RushRedPacketMessage): RushRedPacketMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.RedPacketRushRecord red_packet_rush_records */ 2:
                    message.redPacketRushRecords.push(RedPacketRushRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RushRedPacketMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.RedPacketRushRecord red_packet_rush_records = 2; */
        for (let i = 0; i < message.redPacketRushRecords.length; i++)
            RedPacketRushRecord.internalBinaryWrite(message.redPacketRushRecords[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RushRedPacketMessage
 */
export const RushRedPacketMessage = new RushRedPacketMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedPacketRushRecord$Type extends MessageType<RedPacketRushRecord> {
    constructor() {
        super("im.RedPacketRushRecord", [
            { no: 1, name: "red_packet_group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bonus_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "bonus_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "im_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RedPacketRushRecord>): RedPacketRushRecord {
        const message = { redPacketGroupId: 0n, userId: 0n, userName: "", bonusCount: 0n, bonusType: 0n, roomId: 0n, imText: "", createTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedPacketRushRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedPacketRushRecord): RedPacketRushRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 red_packet_group_id */ 1:
                    message.redPacketGroupId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string user_name */ 3:
                    message.userName = reader.string();
                    break;
                case /* int64 bonus_count */ 4:
                    message.bonusCount = reader.int64().toBigInt();
                    break;
                case /* int64 bonus_type */ 5:
                    message.bonusType = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 6:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* string im_text */ 7:
                    message.imText = reader.string();
                    break;
                case /* int64 create_time */ 8:
                    message.createTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedPacketRushRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 red_packet_group_id = 1; */
        if (message.redPacketGroupId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.redPacketGroupId);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* string user_name = 3; */
        if (message.userName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userName);
        /* int64 bonus_count = 4; */
        if (message.bonusCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.bonusCount);
        /* int64 bonus_type = 5; */
        if (message.bonusType !== 0n)
            writer.tag(5, WireType.Varint).int64(message.bonusType);
        /* int64 room_id = 6; */
        if (message.roomId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.roomId);
        /* string im_text = 7; */
        if (message.imText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.imText);
        /* int64 create_time = 8; */
        if (message.createTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.createTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RedPacketRushRecord
 */
export const RedPacketRushRecord = new RedPacketRushRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedPacket$Type extends MessageType<RedPacket> {
    constructor() {
        super("im.RedPacket", [
            { no: 1, name: "red_packet_group_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bonus_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "combo_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "bonus_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "count_down", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "rush_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "disappear_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "owner", kind: "message", T: () => User },
            { no: 10, name: "total_count_down", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "red_packet_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RedPacket>): RedPacket {
        const message = { redPacketGroupId: 0n, bonusType: 0n, comboCount: 0n, bonusCount: 0n, countDown: 0n, rushTime: 0n, iconUrl: "", disappearTime: 0n, totalCountDown: 0n, redPacketSource: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedPacket): RedPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 red_packet_group_id */ 1:
                    message.redPacketGroupId = reader.int64().toBigInt();
                    break;
                case /* int64 bonus_type */ 2:
                    message.bonusType = reader.int64().toBigInt();
                    break;
                case /* int64 combo_count */ 3:
                    message.comboCount = reader.int64().toBigInt();
                    break;
                case /* int64 bonus_count */ 4:
                    message.bonusCount = reader.int64().toBigInt();
                    break;
                case /* int64 count_down */ 5:
                    message.countDown = reader.int64().toBigInt();
                    break;
                case /* int64 rush_time */ 6:
                    message.rushTime = reader.int64().toBigInt();
                    break;
                case /* string icon_url */ 7:
                    message.iconUrl = reader.string();
                    break;
                case /* int64 disappear_time */ 8:
                    message.disappearTime = reader.int64().toBigInt();
                    break;
                case /* data.User owner */ 9:
                    message.owner = User.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                case /* int64 total_count_down */ 10:
                    message.totalCountDown = reader.int64().toBigInt();
                    break;
                case /* string red_packet_source */ 11:
                    message.redPacketSource = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 red_packet_group_id = 1; */
        if (message.redPacketGroupId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.redPacketGroupId);
        /* int64 bonus_type = 2; */
        if (message.bonusType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.bonusType);
        /* int64 combo_count = 3; */
        if (message.comboCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.comboCount);
        /* int64 bonus_count = 4; */
        if (message.bonusCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.bonusCount);
        /* int64 count_down = 5; */
        if (message.countDown !== 0n)
            writer.tag(5, WireType.Varint).int64(message.countDown);
        /* int64 rush_time = 6; */
        if (message.rushTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.rushTime);
        /* string icon_url = 7; */
        if (message.iconUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.iconUrl);
        /* int64 disappear_time = 8; */
        if (message.disappearTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.disappearTime);
        /* data.User owner = 9; */
        if (message.owner)
            User.internalBinaryWrite(message.owner, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count_down = 10; */
        if (message.totalCountDown !== 0n)
            writer.tag(10, WireType.Varint).int64(message.totalCountDown);
        /* string red_packet_source = 11; */
        if (message.redPacketSource !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.redPacketSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RedPacket
 */
export const RedPacket = new RedPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushRoomAdCard$Type extends MessageType<PushRoomAdCard> {
    constructor() {
        super("im.PushRoomAdCard", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "target_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "show_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "is_finished", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "adcard_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "hotvalue", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PushRoomAdCard>): PushRoomAdCard {
        const message = { actionContent: "", content: "", targetNum: 0n, showNum: 0n, isFinished: false, adcardType: 0, hotvalue: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PushRoomAdCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushRoomAdCard): PushRoomAdCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string action_content */ 2:
                    message.actionContent = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 target_num */ 4:
                    message.targetNum = reader.int64().toBigInt();
                    break;
                case /* int64 show_num */ 5:
                    message.showNum = reader.int64().toBigInt();
                    break;
                case /* bool is_finished */ 6:
                    message.isFinished = reader.bool();
                    break;
                case /* int32 adcard_type */ 7:
                    message.adcardType = reader.int32();
                    break;
                case /* int32 hotvalue */ 8:
                    message.hotvalue = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushRoomAdCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string action_content = 2; */
        if (message.actionContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.actionContent);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 target_num = 4; */
        if (message.targetNum !== 0n)
            writer.tag(4, WireType.Varint).int64(message.targetNum);
        /* int64 show_num = 5; */
        if (message.showNum !== 0n)
            writer.tag(5, WireType.Varint).int64(message.showNum);
        /* bool is_finished = 6; */
        if (message.isFinished !== false)
            writer.tag(6, WireType.Varint).bool(message.isFinished);
        /* int32 adcard_type = 7; */
        if (message.adcardType !== 0)
            writer.tag(7, WireType.Varint).int32(message.adcardType);
        /* int32 hotvalue = 8; */
        if (message.hotvalue !== 0)
            writer.tag(8, WireType.Varint).int32(message.hotvalue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PushRoomAdCard
 */
export const PushRoomAdCard = new PushRoomAdCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAuthMessage$Type extends MessageType<RoomAuthMessage> {
    constructor() {
        super("im.RoomAuthMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "show_user_card", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RoomAuthMessage>): RoomAuthMessage {
        const message = { showUserCard: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAuthMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAuthMessage): RoomAuthMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool show_user_card */ 2:
                    message.showUserCard = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAuthMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool show_user_card = 2; */
        if (message.showUserCard !== false)
            writer.tag(2, WireType.Varint).bool(message.showUserCard);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomAuthMessage
 */
export const RoomAuthMessage = new RoomAuthMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBottomMessage$Type extends MessageType<RoomBottomMessage> {
    constructor() {
        super("im.RoomBottomMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "action_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "push_message_display_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "action_icon", kind: "message", T: () => Image },
            { no: 11, name: "new_background_image", kind: "message", T: () => FlexImageStruct },
            { no: 12, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomBottomMessage>): RoomBottomMessage {
        const message = { color: "", actionContent: "", actionType: 0n, pushMessageDisplayTime: 0n, source: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBottomMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBottomMessage): RoomBottomMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* string action_content */ 6:
                    message.actionContent = reader.string();
                    break;
                case /* int64 action_type */ 7:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* int64 push_message_display_time */ 8:
                    message.pushMessageDisplayTime = reader.int64().toBigInt();
                    break;
                case /* data.Image action_icon */ 10:
                    message.actionIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.actionIcon);
                    break;
                case /* im.FlexImageStruct new_background_image */ 11:
                    message.newBackgroundImage = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.newBackgroundImage);
                    break;
                case /* string source */ 12:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBottomMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* string action_content = 6; */
        if (message.actionContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.actionContent);
        /* int64 action_type = 7; */
        if (message.actionType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.actionType);
        /* int64 push_message_display_time = 8; */
        if (message.pushMessageDisplayTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.pushMessageDisplayTime);
        /* data.Image action_icon = 10; */
        if (message.actionIcon)
            Image.internalBinaryWrite(message.actionIcon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* im.FlexImageStruct new_background_image = 11; */
        if (message.newBackgroundImage)
            FlexImageStruct.internalBinaryWrite(message.newBackgroundImage, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string source = 12; */
        if (message.source !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomBottomMessage
 */
export const RoomBottomMessage = new RoomBottomMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChallengeMessage$Type extends MessageType<RoomChallengeMessage> {
    constructor() {
        super("im.RoomChallengeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "challenge_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notify_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "toast_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChallengeMessage>): RoomChallengeMessage {
        const message = { challengeInfo: "", notifyType: 0n, toastContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChallengeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChallengeMessage): RoomChallengeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string challenge_info */ 2:
                    message.challengeInfo = reader.string();
                    break;
                case /* int64 notify_type */ 3:
                    message.notifyType = reader.int64().toBigInt();
                    break;
                case /* string toast_content */ 4:
                    message.toastContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChallengeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string challenge_info = 2; */
        if (message.challengeInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.challengeInfo);
        /* int64 notify_type = 3; */
        if (message.notifyType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.notifyType);
        /* string toast_content = 4; */
        if (message.toastContent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toastContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChallengeMessage
 */
export const RoomChallengeMessage = new RoomChallengeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomHotSentenceMessage$Type extends MessageType<RoomHotSentenceMessage> {
    constructor() {
        super("im.RoomHotSentenceMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "hot_sentence_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomHotSentenceMessage>): RoomHotSentenceMessage {
        const message = { hotSentenceInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomHotSentenceMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomHotSentenceMessage): RoomHotSentenceMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string hot_sentence_info */ 2:
                    message.hotSentenceInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomHotSentenceMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string hot_sentence_info = 2; */
        if (message.hotSentenceInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hotSentenceInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomHotSentenceMessage
 */
export const RoomHotSentenceMessage = new RoomHotSentenceMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomImgMessage$Type extends MessageType<RoomImgMessage> {
    constructor() {
        super("im.RoomImgMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "bg_img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomImgMessage>): RoomImgMessage {
        const message = { content: "", action: 0n, bgImgUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomImgMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomImgMessage): RoomImgMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 action */ 3:
                    message.action = reader.int64().toBigInt();
                    break;
                case /* string bg_img_url */ 4:
                    message.bgImgUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomImgMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 action = 3; */
        if (message.action !== 0n)
            writer.tag(3, WireType.Varint).int64(message.action);
        /* string bg_img_url = 4; */
        if (message.bgImgUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgImgUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomImgMessage
 */
export const RoomImgMessage = new RoomImgMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomManageMessage$Type extends MessageType<RoomManageMessage> {
    constructor() {
        super("im.RoomManageMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "member_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "popularity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "popularity_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "device_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomManageMessage>): RoomManageMessage {
        const message = { action: 0n, memberCount: 0n, popularity: 0n, popularityStr: "", deviceId: 0n, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomManageMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomManageMessage): RoomManageMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 action */ 3:
                    message.action = reader.int64().toBigInt();
                    break;
                case /* int64 member_count */ 4:
                    message.memberCount = reader.int64().toBigInt();
                    break;
                case /* int64 popularity */ 5:
                    message.popularity = reader.int64().toBigInt();
                    break;
                case /* string popularity_str */ 6:
                    message.popularityStr = reader.string();
                    break;
                case /* int64 device_id */ 7:
                    message.deviceId = reader.int64().toBigInt();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomManageMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 action = 3; */
        if (message.action !== 0n)
            writer.tag(3, WireType.Varint).int64(message.action);
        /* int64 member_count = 4; */
        if (message.memberCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.memberCount);
        /* int64 popularity = 5; */
        if (message.popularity !== 0n)
            writer.tag(5, WireType.Varint).int64(message.popularity);
        /* string popularity_str = 6; */
        if (message.popularityStr !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.popularityStr);
        /* int64 device_id = 7; */
        if (message.deviceId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.deviceId);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomManageMessage
 */
export const RoomManageMessage = new RoomManageMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomStartMessage$Type extends MessageType<RoomStartMessage> {
    constructor() {
        super("im.RoomStartMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "instation_push_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomStartMessage>): RoomStartMessage {
        const message = { content: "", imageUrl: "", instationPushType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomStartMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomStartMessage): RoomStartMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string image_url */ 3:
                    message.imageUrl = reader.string();
                    break;
                case /* int32 instation_push_type */ 4:
                    message.instationPushType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomStartMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string image_url = 3; */
        if (message.imageUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imageUrl);
        /* int32 instation_push_type = 4; */
        if (message.instationPushType !== 0)
            writer.tag(4, WireType.Varint).int32(message.instationPushType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomStartMessage
 */
export const RoomStartMessage = new RoomStartMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomUserSeqMessage$Type extends MessageType<RoomUserSeqMessage> {
    constructor() {
        super("im.RoomUserSeqMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "ranks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomUserSeqMessage_Contributor },
            { no: 3, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "pop_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "seats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomUserSeqMessage_Contributor },
            { no: 6, name: "popularity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "total_user", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "total_user_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "total_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "online_user_for_anchor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "total_pv_for_anchor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "up_right_stats_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "up_right_stats_str_complete", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomUserSeqMessage>): RoomUserSeqMessage {
        const message = { ranks: [], total: 0n, popStr: "", seats: [], popularity: 0n, totalUser: 0n, totalUserStr: "", totalStr: "", onlineUserForAnchor: "", totalPvForAnchor: "", upRightStatsStr: "", upRightStatsStrComplete: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomUserSeqMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomUserSeqMessage): RoomUserSeqMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.RoomUserSeqMessage.Contributor ranks */ 2:
                    message.ranks.push(RoomUserSeqMessage_Contributor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total */ 3:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* string pop_str */ 4:
                    message.popStr = reader.string();
                    break;
                case /* repeated im.RoomUserSeqMessage.Contributor seats */ 5:
                    message.seats.push(RoomUserSeqMessage_Contributor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 popularity */ 6:
                    message.popularity = reader.int64().toBigInt();
                    break;
                case /* int64 total_user */ 7:
                    message.totalUser = reader.int64().toBigInt();
                    break;
                case /* string total_user_str */ 8:
                    message.totalUserStr = reader.string();
                    break;
                case /* string total_str */ 9:
                    message.totalStr = reader.string();
                    break;
                case /* string online_user_for_anchor */ 10:
                    message.onlineUserForAnchor = reader.string();
                    break;
                case /* string total_pv_for_anchor */ 11:
                    message.totalPvForAnchor = reader.string();
                    break;
                case /* string up_right_stats_str */ 12:
                    message.upRightStatsStr = reader.string();
                    break;
                case /* string up_right_stats_str_complete */ 13:
                    message.upRightStatsStrComplete = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomUserSeqMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.RoomUserSeqMessage.Contributor ranks = 2; */
        for (let i = 0; i < message.ranks.length; i++)
            RoomUserSeqMessage_Contributor.internalBinaryWrite(message.ranks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 total = 3; */
        if (message.total !== 0n)
            writer.tag(3, WireType.Varint).int64(message.total);
        /* string pop_str = 4; */
        if (message.popStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.popStr);
        /* repeated im.RoomUserSeqMessage.Contributor seats = 5; */
        for (let i = 0; i < message.seats.length; i++)
            RoomUserSeqMessage_Contributor.internalBinaryWrite(message.seats[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 popularity = 6; */
        if (message.popularity !== 0n)
            writer.tag(6, WireType.Varint).int64(message.popularity);
        /* int64 total_user = 7; */
        if (message.totalUser !== 0n)
            writer.tag(7, WireType.Varint).int64(message.totalUser);
        /* string total_user_str = 8; */
        if (message.totalUserStr !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.totalUserStr);
        /* string total_str = 9; */
        if (message.totalStr !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.totalStr);
        /* string online_user_for_anchor = 10; */
        if (message.onlineUserForAnchor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.onlineUserForAnchor);
        /* string total_pv_for_anchor = 11; */
        if (message.totalPvForAnchor !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.totalPvForAnchor);
        /* string up_right_stats_str = 12; */
        if (message.upRightStatsStr !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.upRightStatsStr);
        /* string up_right_stats_str_complete = 13; */
        if (message.upRightStatsStrComplete !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.upRightStatsStrComplete);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomUserSeqMessage
 */
export const RoomUserSeqMessage = new RoomUserSeqMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomUserSeqMessage_Contributor$Type extends MessageType<RoomUserSeqMessage_Contributor> {
    constructor() {
        super("im.RoomUserSeqMessage.Contributor", [
            { no: 1, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "delta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "is_hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "score_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "exactly_score", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomUserSeqMessage_Contributor>): RoomUserSeqMessage_Contributor {
        const message = { score: 0n, rank: 0n, delta: 0n, isHidden: false, scoreDescription: "", exactlyScore: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomUserSeqMessage_Contributor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomUserSeqMessage_Contributor): RoomUserSeqMessage_Contributor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 score */ 1:
                    message.score = reader.int64().toBigInt();
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 rank */ 3:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* int64 delta */ 4:
                    message.delta = reader.int64().toBigInt();
                    break;
                case /* bool is_hidden */ 5:
                    message.isHidden = reader.bool();
                    break;
                case /* string score_description */ 6:
                    message.scoreDescription = reader.string();
                    break;
                case /* string exactly_score */ 7:
                    message.exactlyScore = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomUserSeqMessage_Contributor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 score = 1; */
        if (message.score !== 0n)
            writer.tag(1, WireType.Varint).int64(message.score);
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 rank = 3; */
        if (message.rank !== 0n)
            writer.tag(3, WireType.Varint).int64(message.rank);
        /* int64 delta = 4; */
        if (message.delta !== 0n)
            writer.tag(4, WireType.Varint).int64(message.delta);
        /* bool is_hidden = 5; */
        if (message.isHidden !== false)
            writer.tag(5, WireType.Varint).bool(message.isHidden);
        /* string score_description = 6; */
        if (message.scoreDescription !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.scoreDescription);
        /* string exactly_score = 7; */
        if (message.exactlyScore !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.exactlyScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomUserSeqMessage.Contributor
 */
export const RoomUserSeqMessage_Contributor = new RoomUserSeqMessage_Contributor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomVerifyMessage$Type extends MessageType<RoomVerifyMessage> {
    constructor() {
        super("im.RoomVerifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "notice_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "close_room", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "unable_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "tip_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "anchor_switch", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "switch_status_tip_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "switch_status_anchor_tip_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomVerifyMessage>): RoomVerifyMessage {
        const message = { action: 0, content: "", noticeType: 0n, closeRoom: false, unableStyle: 0, tipContent: "", anchorSwitch: 0, switchStatusTipMsg: "", switchStatusAnchorTipMsg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomVerifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomVerifyMessage): RoomVerifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 notice_type */ 4:
                    message.noticeType = reader.int64().toBigInt();
                    break;
                case /* bool close_room */ 5:
                    message.closeRoom = reader.bool();
                    break;
                case /* int32 unable_style */ 6:
                    message.unableStyle = reader.int32();
                    break;
                case /* string tip_content */ 7:
                    message.tipContent = reader.string();
                    break;
                case /* int32 anchor_switch */ 8:
                    message.anchorSwitch = reader.int32();
                    break;
                case /* string switch_status_tip_msg */ 9:
                    message.switchStatusTipMsg = reader.string();
                    break;
                case /* string switch_status_anchor_tip_msg */ 10:
                    message.switchStatusAnchorTipMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomVerifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 notice_type = 4; */
        if (message.noticeType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.noticeType);
        /* bool close_room = 5; */
        if (message.closeRoom !== false)
            writer.tag(5, WireType.Varint).bool(message.closeRoom);
        /* int32 unable_style = 6; */
        if (message.unableStyle !== 0)
            writer.tag(6, WireType.Varint).int32(message.unableStyle);
        /* string tip_content = 7; */
        if (message.tipContent !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.tipContent);
        /* int32 anchor_switch = 8; */
        if (message.anchorSwitch !== 0)
            writer.tag(8, WireType.Varint).int32(message.anchorSwitch);
        /* string switch_status_tip_msg = 9; */
        if (message.switchStatusTipMsg !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.switchStatusTipMsg);
        /* string switch_status_anchor_tip_msg = 10; */
        if (message.switchStatusAnchorTipMsg !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.switchStatusAnchorTipMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomVerifyMessage
 */
export const RoomVerifyMessage = new RoomVerifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomMessage$Type extends MessageType<RoomMessage> {
    constructor() {
        super("im.RoomMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "supprot_landscape", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "roomMessageType", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "system_top_msg", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "forced_guarantee", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 20, name: "biz_scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomMessage>): RoomMessage {
        const message = { content: "", supprotLandscape: false, roomMessageType: 0, systemTopMsg: false, forcedGuarantee: false, bizScene: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomMessage): RoomMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* bool supprot_landscape */ 3:
                    message.supprotLandscape = reader.bool();
                    break;
                case /* int32 roomMessageType */ 4:
                    message.roomMessageType = reader.int32();
                    break;
                case /* bool system_top_msg */ 5:
                    message.systemTopMsg = reader.bool();
                    break;
                case /* bool forced_guarantee */ 6:
                    message.forcedGuarantee = reader.bool();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 7:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* string biz_scene */ 20:
                    message.bizScene = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* bool supprot_landscape = 3; */
        if (message.supprotLandscape !== false)
            writer.tag(3, WireType.Varint).bool(message.supprotLandscape);
        /* int32 roomMessageType = 4; */
        if (message.roomMessageType !== 0)
            writer.tag(4, WireType.Varint).int32(message.roomMessageType);
        /* bool system_top_msg = 5; */
        if (message.systemTopMsg !== false)
            writer.tag(5, WireType.Varint).bool(message.systemTopMsg);
        /* bool forced_guarantee = 6; */
        if (message.forcedGuarantee !== false)
            writer.tag(6, WireType.Varint).bool(message.forcedGuarantee);
        /* im.PublicAreaCommon public_area_common = 7; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string biz_scene = 20; */
        if (message.bizScene !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.bizScene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomMessage
 */
export const RoomMessage = new RoomMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScreenChatMessage$Type extends MessageType<ScreenChatMessage> {
    constructor() {
        super("im.ScreenChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "screen_chat_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "effect", kind: "message", T: () => ScreenChatMessage_Effect },
            { no: 7, name: "background_image", kind: "message", T: () => Image },
            { no: 8, name: "effect_v2", kind: "message", T: () => ScreenChatMessage_Effect },
            { no: 9, name: "background_image_v2", kind: "message", T: () => Image },
            { no: 10, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 11, name: "official_comment_config", kind: "message", T: () => ScreenChatMessage_OfficialCommentConfig },
            { no: 12, name: "event_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "send_review", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "chat_identity_info", kind: "message", T: () => ChatIdentity },
            { no: 30, name: "rtf_content", kind: "message", T: () => Text },
            { no: 31, name: "public_area_does_not_display", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 32, name: "rtf_content_v2", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<ScreenChatMessage>): ScreenChatMessage {
        const message = { screenChatType: 0n, content: "", priority: 0n, eventTime: 0n, sendReview: false, publicAreaDoesNotDisplay: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScreenChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScreenChatMessage): ScreenChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 screen_chat_type */ 3:
                    message.screenChatType = reader.int64().toBigInt();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* int64 priority */ 5:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* im.ScreenChatMessage.Effect effect */ 6:
                    message.effect = ScreenChatMessage_Effect.internalBinaryRead(reader, reader.uint32(), options, message.effect);
                    break;
                case /* data.Image background_image */ 7:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* im.ScreenChatMessage.Effect effect_v2 */ 8:
                    message.effectV2 = ScreenChatMessage_Effect.internalBinaryRead(reader, reader.uint32(), options, message.effectV2);
                    break;
                case /* data.Image background_image_v2 */ 9:
                    message.backgroundImageV2 = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImageV2);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 10:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* im.ScreenChatMessage.OfficialCommentConfig official_comment_config */ 11:
                    message.officialCommentConfig = ScreenChatMessage_OfficialCommentConfig.internalBinaryRead(reader, reader.uint32(), options, message.officialCommentConfig);
                    break;
                case /* int64 event_time */ 12:
                    message.eventTime = reader.int64().toBigInt();
                    break;
                case /* bool send_review */ 13:
                    message.sendReview = reader.bool();
                    break;
                case /* data.ChatIdentity chat_identity_info */ 14:
                    message.chatIdentityInfo = ChatIdentity.internalBinaryRead(reader, reader.uint32(), options, message.chatIdentityInfo);
                    break;
                case /* data.Text rtf_content */ 30:
                    message.rtfContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContent);
                    break;
                case /* bool public_area_does_not_display */ 31:
                    message.publicAreaDoesNotDisplay = reader.bool();
                    break;
                case /* data.Text rtf_content_v2 */ 32:
                    message.rtfContentV2 = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContentV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScreenChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 screen_chat_type = 3; */
        if (message.screenChatType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.screenChatType);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* int64 priority = 5; */
        if (message.priority !== 0n)
            writer.tag(5, WireType.Varint).int64(message.priority);
        /* im.ScreenChatMessage.Effect effect = 6; */
        if (message.effect)
            ScreenChatMessage_Effect.internalBinaryWrite(message.effect, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_image = 7; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.ScreenChatMessage.Effect effect_v2 = 8; */
        if (message.effectV2)
            ScreenChatMessage_Effect.internalBinaryWrite(message.effectV2, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_image_v2 = 9; */
        if (message.backgroundImageV2)
            Image.internalBinaryWrite(message.backgroundImageV2, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 10; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* im.ScreenChatMessage.OfficialCommentConfig official_comment_config = 11; */
        if (message.officialCommentConfig)
            ScreenChatMessage_OfficialCommentConfig.internalBinaryWrite(message.officialCommentConfig, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 event_time = 12; */
        if (message.eventTime !== 0n)
            writer.tag(12, WireType.Varint).int64(message.eventTime);
        /* bool send_review = 13; */
        if (message.sendReview !== false)
            writer.tag(13, WireType.Varint).bool(message.sendReview);
        /* data.ChatIdentity chat_identity_info = 14; */
        if (message.chatIdentityInfo)
            ChatIdentity.internalBinaryWrite(message.chatIdentityInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* data.Text rtf_content = 30; */
        if (message.rtfContent)
            Text.internalBinaryWrite(message.rtfContent, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* bool public_area_does_not_display = 31; */
        if (message.publicAreaDoesNotDisplay !== false)
            writer.tag(31, WireType.Varint).bool(message.publicAreaDoesNotDisplay);
        /* data.Text rtf_content_v2 = 32; */
        if (message.rtfContentV2)
            Text.internalBinaryWrite(message.rtfContentV2, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ScreenChatMessage
 */
export const ScreenChatMessage = new ScreenChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScreenChatMessage_OfficialCommentConfig$Type extends MessageType<ScreenChatMessage_OfficialCommentConfig> {
    constructor() {
        super("im.ScreenChatMessage.OfficialCommentConfig", [
            { no: 1, name: "official", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ScreenChatMessage_OfficialCommentConfig>): ScreenChatMessage_OfficialCommentConfig {
        const message = { official: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScreenChatMessage_OfficialCommentConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScreenChatMessage_OfficialCommentConfig): ScreenChatMessage_OfficialCommentConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool official */ 1:
                    message.official = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScreenChatMessage_OfficialCommentConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool official = 1; */
        if (message.official !== false)
            writer.tag(1, WireType.Varint).bool(message.official);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ScreenChatMessage.OfficialCommentConfig
 */
export const ScreenChatMessage_OfficialCommentConfig = new ScreenChatMessage_OfficialCommentConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScreenChatMessage_Effect$Type extends MessageType<ScreenChatMessage_Effect> {
    constructor() {
        super("im.ScreenChatMessage.Effect", [
            { no: 1, name: "icon", kind: "message", T: () => FlexImageStruct },
            { no: 2, name: "avatar_icon", kind: "message", T: () => Image },
            { no: 3, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ScreenChatMessage_Effect>): ScreenChatMessage_Effect {
        const message = { backgroundColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScreenChatMessage_Effect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScreenChatMessage_Effect): ScreenChatMessage_Effect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.FlexImageStruct icon */ 1:
                    message.icon = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* data.Image avatar_icon */ 2:
                    message.avatarIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarIcon);
                    break;
                case /* string background_color */ 3:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScreenChatMessage_Effect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.FlexImageStruct icon = 1; */
        if (message.icon)
            FlexImageStruct.internalBinaryWrite(message.icon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_icon = 2; */
        if (message.avatarIcon)
            Image.internalBinaryWrite(message.avatarIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string background_color = 3; */
        if (message.backgroundColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ScreenChatMessage.Effect
 */
export const ScreenChatMessage_Effect = new ScreenChatMessage_Effect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShareGuideMessage$Type extends MessageType<ShareGuideMessage> {
    constructor() {
        super("im.ShareGuideMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "share_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShareGuideMessage>): ShareGuideMessage {
        const message = { shareChannel: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShareGuideMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShareGuideMessage): ShareGuideMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string share_channel */ 2:
                    message.shareChannel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShareGuideMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string share_channel = 2; */
        if (message.shareChannel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.shareChannel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShareGuideMessage
 */
export const ShareGuideMessage = new ShareGuideMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SocialMessage$Type extends MessageType<SocialMessage> {
    constructor() {
        super("im.SocialMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "share_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "share_target", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "follow_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<SocialMessage>): SocialMessage {
        const message = { shareType: 0n, action: 0n, shareTarget: "", followCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SocialMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SocialMessage): SocialMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 share_type */ 3:
                    message.shareType = reader.int64().toBigInt();
                    break;
                case /* int64 action */ 4:
                    message.action = reader.int64().toBigInt();
                    break;
                case /* string share_target */ 5:
                    message.shareTarget = reader.string();
                    break;
                case /* int64 follow_count */ 6:
                    message.followCount = reader.int64().toBigInt();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 7:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SocialMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 share_type = 3; */
        if (message.shareType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.shareType);
        /* int64 action = 4; */
        if (message.action !== 0n)
            writer.tag(4, WireType.Varint).int64(message.action);
        /* string share_target = 5; */
        if (message.shareTarget !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.shareTarget);
        /* int64 follow_count = 6; */
        if (message.followCount !== 0n)
            writer.tag(6, WireType.Varint).int64(message.followCount);
        /* im.PublicAreaCommon public_area_common = 7; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SocialMessage
 */
export const SocialMessage = new SocialMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpecialPushMessage$Type extends MessageType<SpecialPushMessage> {
    constructor() {
        super("im.SpecialPushMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "traceid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icon", kind: "message", T: () => Image },
            { no: 6, name: "action_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "push_message_display_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SpecialPushMessage>): SpecialPushMessage {
        const message = { content: "", color: "", traceid: "", actionContent: "", actionType: 0n, pushMessageDisplayTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpecialPushMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpecialPushMessage): SpecialPushMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* string traceid */ 4:
                    message.traceid = reader.string();
                    break;
                case /* data.Image icon */ 5:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string action_content */ 6:
                    message.actionContent = reader.string();
                    break;
                case /* int64 action_type */ 7:
                    message.actionType = reader.int64().toBigInt();
                    break;
                case /* int64 push_message_display_time */ 8:
                    message.pushMessageDisplayTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpecialPushMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* string traceid = 4; */
        if (message.traceid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.traceid);
        /* data.Image icon = 5; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string action_content = 6; */
        if (message.actionContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.actionContent);
        /* int64 action_type = 7; */
        if (message.actionType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.actionType);
        /* int64 push_message_display_time = 8; */
        if (message.pushMessageDisplayTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.pushMessageDisplayTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SpecialPushMessage
 */
export const SpecialPushMessage = new SpecialPushMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateKoiRoomStatusMessage$Type extends MessageType<UpdateKoiRoomStatusMessage> {
    constructor() {
        super("im.UpdateKoiRoomStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "director_icon", kind: "message", T: () => Image },
            { no: 3, name: "cur_round_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "director_schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateKoiRoomStatusMessage>): UpdateKoiRoomStatusMessage {
        const message = { curRoundIndex: 0, status: 0, directorSchemaUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateKoiRoomStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateKoiRoomStatusMessage): UpdateKoiRoomStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Image director_icon */ 2:
                    message.directorIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.directorIcon);
                    break;
                case /* int32 cur_round_index */ 3:
                    message.curRoundIndex = reader.int32();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                case /* string director_schema_url */ 5:
                    message.directorSchemaUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateKoiRoomStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image director_icon = 2; */
        if (message.directorIcon)
            Image.internalBinaryWrite(message.directorIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 cur_round_index = 3; */
        if (message.curRoundIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.curRoundIndex);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* string director_schema_url = 5; */
        if (message.directorSchemaUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.directorSchemaUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdateKoiRoomStatusMessage
 */
export const UpdateKoiRoomStatusMessage = new UpdateKoiRoomStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StampMessage$Type extends MessageType<StampMessage> {
    constructor() {
        super("im.StampMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "stamps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StampInfo }
        ]);
    }
    create(value?: PartialMessage<StampMessage>): StampMessage {
        const message = { stamps: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StampMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StampMessage): StampMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.StampInfo stamps */ 2:
                    message.stamps.push(StampInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StampMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.StampInfo stamps = 2; */
        for (let i = 0; i < message.stamps.length; i++)
            StampInfo.internalBinaryWrite(message.stamps[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.StampMessage
 */
export const StampMessage = new StampMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceEntranceMessage$Type extends MessageType<AudienceEntranceMessage> {
    constructor() {
        super("im.AudienceEntranceMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "entrances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AudienceEntranceInfo }
        ]);
    }
    create(value?: PartialMessage<AudienceEntranceMessage>): AudienceEntranceMessage {
        const message = { entrances: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceEntranceMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceEntranceMessage): AudienceEntranceMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.AudienceEntranceInfo entrances */ 2:
                    message.entrances.push(AudienceEntranceInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceEntranceMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.AudienceEntranceInfo entrances = 2; */
        for (let i = 0; i < message.entrances.length; i++)
            AudienceEntranceInfo.internalBinaryWrite(message.entrances[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AudienceEntranceMessage
 */
export const AudienceEntranceMessage = new AudienceEntranceMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomizedCardMessage$Type extends MessageType<CustomizedCardMessage> {
    constructor() {
        super("im.CustomizedCardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "card", kind: "message", T: () => CustomizedCardInfo },
            { no: 3, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "scene_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CustomizedCardMessage>): CustomizedCardMessage {
        const message = { appId: "", startId: "", sceneSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CustomizedCardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomizedCardMessage): CustomizedCardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.CustomizedCardInfo card */ 2:
                    message.card = CustomizedCardInfo.internalBinaryRead(reader, reader.uint32(), options, message.card);
                    break;
                case /* string app_id */ 3:
                    message.appId = reader.string();
                    break;
                case /* string start_id */ 4:
                    message.startId = reader.string();
                    break;
                case /* int32 scene_source */ 5:
                    message.sceneSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomizedCardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.CustomizedCardInfo card = 2; */
        if (message.card)
            CustomizedCardInfo.internalBinaryWrite(message.card, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 3; */
        if (message.appId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.appId);
        /* string start_id = 4; */
        if (message.startId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.startId);
        /* int32 scene_source = 5; */
        if (message.sceneSource !== 0)
            writer.tag(5, WireType.Varint).int32(message.sceneSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CustomizedCardMessage
 */
export const CustomizedCardMessage = new CustomizedCardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameCardMessage$Type extends MessageType<GameCardMessage> {
    constructor() {
        super("im.GameCardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "card", kind: "message", T: () => GameCardInfo },
            { no: 3, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameCardMessage>): GameCardMessage {
        const message = { appId: "", startId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameCardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameCardMessage): GameCardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.GameCardInfo card */ 2:
                    message.card = GameCardInfo.internalBinaryRead(reader, reader.uint32(), options, message.card);
                    break;
                case /* string app_id */ 3:
                    message.appId = reader.string();
                    break;
                case /* string start_id */ 4:
                    message.startId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameCardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.GameCardInfo card = 2; */
        if (message.card)
            GameCardInfo.internalBinaryWrite(message.card, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 3; */
        if (message.appId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.appId);
        /* string start_id = 4; */
        if (message.startId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.startId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GameCardMessage
 */
export const GameCardMessage = new GameCardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MicroAppShelfMessage$Type extends MessageType<MicroAppShelfMessage> {
    constructor() {
        super("im.MicroAppShelfMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "shelf_info", kind: "message", T: () => ShelfInfo }
        ]);
    }
    create(value?: PartialMessage<MicroAppShelfMessage>): MicroAppShelfMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MicroAppShelfMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MicroAppShelfMessage): MicroAppShelfMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.ShelfInfo shelf_info */ 2:
                    message.shelfInfo = ShelfInfo.internalBinaryRead(reader, reader.uint32(), options, message.shelfInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MicroAppShelfMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.ShelfInfo shelf_info = 2; */
        if (message.shelfInfo)
            ShelfInfo.internalBinaryWrite(message.shelfInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MicroAppShelfMessage
 */
export const MicroAppShelfMessage = new MicroAppShelfMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SunDailyRankMessage$Type extends MessageType<SunDailyRankMessage> {
    constructor() {
        super("im.SunDailyRankMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "after_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "message_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "style", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "after_display_text", kind: "message", T: () => Text },
            { no: 10, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "rich_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "user_side_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "content_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "city_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "rank_stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "ranks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SunDailyRankMessage_RankInfo },
            { no: 17, name: "begin_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "delta_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "entrance_appearing_text", kind: "message", T: () => Text },
            { no: 20, name: "display_text_v2", kind: "message", T: () => Text },
            { no: 21, name: "after_display_text_v2", kind: "message", T: () => Text },
            { no: 22, name: "duration_v2", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SunDailyRankMessage>): SunDailyRankMessage {
        const message = { content: "", duration: 0n, afterContent: "", messageType: 0n, schema: "", extra: "", style: "", rank: 0n, richContent: "", userSideContent: "", contentType: 0n, cityCode: "", rankStage: 0, ranks: [], beginTime: 0n, deltaTime: 0n, durationV2: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SunDailyRankMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SunDailyRankMessage): SunDailyRankMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string after_content */ 4:
                    message.afterContent = reader.string();
                    break;
                case /* int64 message_type */ 5:
                    message.messageType = reader.int64().toBigInt();
                    break;
                case /* string schema */ 6:
                    message.schema = reader.string();
                    break;
                case /* string extra */ 7:
                    message.extra = reader.string();
                    break;
                case /* string style */ 8:
                    message.style = reader.string();
                    break;
                case /* data.Text after_display_text */ 9:
                    message.afterDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.afterDisplayText);
                    break;
                case /* int64 rank */ 10:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* string rich_content */ 11:
                    message.richContent = reader.string();
                    break;
                case /* string user_side_content */ 12:
                    message.userSideContent = reader.string();
                    break;
                case /* int64 content_type */ 13:
                    message.contentType = reader.int64().toBigInt();
                    break;
                case /* string city_code */ 14:
                    message.cityCode = reader.string();
                    break;
                case /* int32 rank_stage */ 15:
                    message.rankStage = reader.int32();
                    break;
                case /* repeated im.SunDailyRankMessage.RankInfo ranks */ 16:
                    message.ranks.push(SunDailyRankMessage_RankInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 begin_time */ 17:
                    message.beginTime = reader.int64().toBigInt();
                    break;
                case /* int64 delta_time */ 18:
                    message.deltaTime = reader.int64().toBigInt();
                    break;
                case /* data.Text entrance_appearing_text */ 19:
                    message.entranceAppearingText = Text.internalBinaryRead(reader, reader.uint32(), options, message.entranceAppearingText);
                    break;
                case /* data.Text display_text_v2 */ 20:
                    message.displayTextV2 = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayTextV2);
                    break;
                case /* data.Text after_display_text_v2 */ 21:
                    message.afterDisplayTextV2 = Text.internalBinaryRead(reader, reader.uint32(), options, message.afterDisplayTextV2);
                    break;
                case /* int64 duration_v2 */ 22:
                    message.durationV2 = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SunDailyRankMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* string after_content = 4; */
        if (message.afterContent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.afterContent);
        /* int64 message_type = 5; */
        if (message.messageType !== 0n)
            writer.tag(5, WireType.Varint).int64(message.messageType);
        /* string schema = 6; */
        if (message.schema !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.schema);
        /* string extra = 7; */
        if (message.extra !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.extra);
        /* string style = 8; */
        if (message.style !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.style);
        /* data.Text after_display_text = 9; */
        if (message.afterDisplayText)
            Text.internalBinaryWrite(message.afterDisplayText, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 rank = 10; */
        if (message.rank !== 0n)
            writer.tag(10, WireType.Varint).int64(message.rank);
        /* string rich_content = 11; */
        if (message.richContent !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.richContent);
        /* string user_side_content = 12; */
        if (message.userSideContent !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.userSideContent);
        /* int64 content_type = 13; */
        if (message.contentType !== 0n)
            writer.tag(13, WireType.Varint).int64(message.contentType);
        /* string city_code = 14; */
        if (message.cityCode !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.cityCode);
        /* int32 rank_stage = 15; */
        if (message.rankStage !== 0)
            writer.tag(15, WireType.Varint).int32(message.rankStage);
        /* repeated im.SunDailyRankMessage.RankInfo ranks = 16; */
        for (let i = 0; i < message.ranks.length; i++)
            SunDailyRankMessage_RankInfo.internalBinaryWrite(message.ranks[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* int64 begin_time = 17; */
        if (message.beginTime !== 0n)
            writer.tag(17, WireType.Varint).int64(message.beginTime);
        /* int64 delta_time = 18; */
        if (message.deltaTime !== 0n)
            writer.tag(18, WireType.Varint).int64(message.deltaTime);
        /* data.Text entrance_appearing_text = 19; */
        if (message.entranceAppearingText)
            Text.internalBinaryWrite(message.entranceAppearingText, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* data.Text display_text_v2 = 20; */
        if (message.displayTextV2)
            Text.internalBinaryWrite(message.displayTextV2, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* data.Text after_display_text_v2 = 21; */
        if (message.afterDisplayTextV2)
            Text.internalBinaryWrite(message.afterDisplayTextV2, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration_v2 = 22; */
        if (message.durationV2 !== 0n)
            writer.tag(22, WireType.Varint).int64(message.durationV2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SunDailyRankMessage
 */
export const SunDailyRankMessage = new SunDailyRankMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SunDailyRankMessage_RankInfo$Type extends MessageType<SunDailyRankMessage_RankInfo> {
    constructor() {
        super("im.SunDailyRankMessage.RankInfo", [
            { no: 1, name: "rank_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SunDailyRankMessage_RankInfo>): SunDailyRankMessage_RankInfo {
        const message = { rankType: 0n, rank: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SunDailyRankMessage_RankInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SunDailyRankMessage_RankInfo): SunDailyRankMessage_RankInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 rank_type */ 1:
                    message.rankType = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 2:
                    message.rank = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SunDailyRankMessage_RankInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 rank_type = 1; */
        if (message.rankType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.rankType);
        /* int64 rank = 2; */
        if (message.rank !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SunDailyRankMessage.RankInfo
 */
export const SunDailyRankMessage_RankInfo = new SunDailyRankMessage_RankInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SystemMessage$Type extends MessageType<SystemMessage> {
    constructor() {
        super("im.SystemMessage", [
            { no: 1, name: "common", kind: "message", T: () => SystemMessage_Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SystemMessage>): SystemMessage {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SystemMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemMessage): SystemMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.SystemMessage.Common common */ 1:
                    message.common = SystemMessage_Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.SystemMessage.Common common = 1; */
        if (message.common)
            SystemMessage_Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SystemMessage
 */
export const SystemMessage = new SystemMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SystemMessage_Common$Type extends MessageType<SystemMessage_Common> {
    constructor() {
        super("im.SystemMessage.Common", [
            { no: 1, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "monitor", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SystemMessage_Common>): SystemMessage_Common {
        const message = { method: "", msgId: 0n, roomId: 0n, createTime: 0n, monitor: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SystemMessage_Common>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemMessage_Common): SystemMessage_Common {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string method */ 1:
                    message.method = reader.string();
                    break;
                case /* int64 msg_id */ 2:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 3:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* int64 create_time */ 4:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int32 monitor */ 5:
                    message.monitor = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemMessage_Common, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string method = 1; */
        if (message.method !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.method);
        /* int64 msg_id = 2; */
        if (message.msgId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgId);
        /* int64 room_id = 3; */
        if (message.roomId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.roomId);
        /* int64 create_time = 4; */
        if (message.createTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.createTime);
        /* int32 monitor = 5; */
        if (message.monitor !== 0)
            writer.tag(5, WireType.Varint).int32(message.monitor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SystemMessage.Common
 */
export const SystemMessage_Common = new SystemMessage_Common$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BubbleConfig$Type extends MessageType<BubbleConfig> {
    constructor() {
        super("im.BubbleConfig", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rich_text", kind: "message", T: () => Text },
            { no: 4, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "background_image", kind: "message", T: () => FlexImageStruct },
            { no: 6, name: "arrow_image", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<BubbleConfig>): BubbleConfig {
        const message = { content: "", duration: 0n, schemeUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BubbleConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BubbleConfig): BubbleConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* data.Text rich_text */ 3:
                    message.richText = Text.internalBinaryRead(reader, reader.uint32(), options, message.richText);
                    break;
                case /* string scheme_url */ 4:
                    message.schemeUrl = reader.string();
                    break;
                case /* im.FlexImageStruct background_image */ 5:
                    message.backgroundImage = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* data.Image arrow_image */ 6:
                    message.arrowImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.arrowImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BubbleConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* data.Text rich_text = 3; */
        if (message.richText)
            Text.internalBinaryWrite(message.richText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string scheme_url = 4; */
        if (message.schemeUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.schemeUrl);
        /* im.FlexImageStruct background_image = 5; */
        if (message.backgroundImage)
            FlexImageStruct.internalBinaryWrite(message.backgroundImage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image arrow_image = 6; */
        if (message.arrowImage)
            Image.internalBinaryWrite(message.arrowImage, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BubbleConfig
 */
export const BubbleConfig = new BubbleConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolbarItemBehaviourParam$Type extends MessageType<ToolbarItemBehaviourParam> {
    constructor() {
        super("im.ToolbarItemBehaviourParam", [
            { no: 1, name: "behaviour_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "values", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToolbarItemBehaviourParam>): ToolbarItemBehaviourParam {
        const message = { behaviourType: 0, values: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolbarItemBehaviourParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolbarItemBehaviourParam): ToolbarItemBehaviourParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 behaviour_type */ 1:
                    message.behaviourType = reader.int32();
                    break;
                case /* string values */ 2:
                    message.values = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolbarItemBehaviourParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 behaviour_type = 1; */
        if (message.behaviourType !== 0)
            writer.tag(1, WireType.Varint).int32(message.behaviourType);
        /* string values = 2; */
        if (message.values !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.values);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ToolbarItemBehaviourParam
 */
export const ToolbarItemBehaviourParam = new ToolbarItemBehaviourParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolbarItemBehaviourParams$Type extends MessageType<ToolbarItemBehaviourParams> {
    constructor() {
        super("im.ToolbarItemBehaviourParams", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolbarItemBehaviourParam }
        ]);
    }
    create(value?: PartialMessage<ToolbarItemBehaviourParams>): ToolbarItemBehaviourParams {
        const message = { key: "", params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolbarItemBehaviourParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolbarItemBehaviourParams): ToolbarItemBehaviourParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* repeated im.ToolbarItemBehaviourParam params */ 2:
                    message.params.push(ToolbarItemBehaviourParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolbarItemBehaviourParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* repeated im.ToolbarItemBehaviourParam params = 2; */
        for (let i = 0; i < message.params.length; i++)
            ToolbarItemBehaviourParam.internalBinaryWrite(message.params[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ToolbarItemBehaviourParams
 */
export const ToolbarItemBehaviourParams = new ToolbarItemBehaviourParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolbarItemMessage$Type extends MessageType<ToolbarItemMessage> {
    constructor() {
        super("im.ToolbarItemMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "toolbar_item_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "bubble_config", kind: "message", T: () => BubbleConfig },
            { no: 6, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "behaviour_params", kind: "message", T: () => ToolbarItemBehaviourParams }
        ]);
    }
    create(value?: PartialMessage<ToolbarItemMessage>): ToolbarItemMessage {
        const message = { toolbarItemId: 0, actionType: 0, messageType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolbarItemMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolbarItemMessage): ToolbarItemMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 toolbar_item_id */ 2:
                    message.toolbarItemId = reader.int32();
                    break;
                case /* int32 action_type */ 3:
                    message.actionType = reader.int32();
                    break;
                case /* im.BubbleConfig bubble_config */ 4:
                    message.bubbleConfig = BubbleConfig.internalBinaryRead(reader, reader.uint32(), options, message.bubbleConfig);
                    break;
                case /* int32 message_type */ 6:
                    message.messageType = reader.int32();
                    break;
                case /* im.ToolbarItemBehaviourParams behaviour_params */ 7:
                    message.behaviourParams = ToolbarItemBehaviourParams.internalBinaryRead(reader, reader.uint32(), options, message.behaviourParams);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolbarItemMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 toolbar_item_id = 2; */
        if (message.toolbarItemId !== 0)
            writer.tag(2, WireType.Varint).int32(message.toolbarItemId);
        /* int32 action_type = 3; */
        if (message.actionType !== 0)
            writer.tag(3, WireType.Varint).int32(message.actionType);
        /* im.BubbleConfig bubble_config = 4; */
        if (message.bubbleConfig)
            BubbleConfig.internalBinaryWrite(message.bubbleConfig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 6; */
        if (message.messageType !== 0)
            writer.tag(6, WireType.Varint).int32(message.messageType);
        /* im.ToolbarItemBehaviourParams behaviour_params = 7; */
        if (message.behaviourParams)
            ToolbarItemBehaviourParams.internalBinaryWrite(message.behaviourParams, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ToolbarItemMessage
 */
export const ToolbarItemMessage = new ToolbarItemMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TurntableBurstMessage$Type extends MessageType<TurntableBurstMessage> {
    constructor() {
        super("im.TurntableBurstMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "burst_time_remain_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "multiple", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "property_definition_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "property_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<TurntableBurstMessage>): TurntableBurstMessage {
        const message = { burstTimeRemainSeconds: 0n, multiple: 0n, propertyDefinitionId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TurntableBurstMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TurntableBurstMessage): TurntableBurstMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 burst_time_remain_seconds */ 2:
                    message.burstTimeRemainSeconds = reader.int64().toBigInt();
                    break;
                case /* int64 multiple */ 3:
                    message.multiple = reader.int64().toBigInt();
                    break;
                case /* int64 property_definition_id */ 4:
                    message.propertyDefinitionId = reader.int64().toBigInt();
                    break;
                case /* data.Image property_icon */ 5:
                    message.propertyIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.propertyIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TurntableBurstMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 burst_time_remain_seconds = 2; */
        if (message.burstTimeRemainSeconds !== 0n)
            writer.tag(2, WireType.Varint).int64(message.burstTimeRemainSeconds);
        /* int64 multiple = 3; */
        if (message.multiple !== 0n)
            writer.tag(3, WireType.Varint).int64(message.multiple);
        /* int64 property_definition_id = 4; */
        if (message.propertyDefinitionId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.propertyDefinitionId);
        /* data.Image property_icon = 5; */
        if (message.propertyIcon)
            Image.internalBinaryWrite(message.propertyIcon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TurntableBurstMessage
 */
export const TurntableBurstMessage = new TurntableBurstMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadCoverMessage$Type extends MessageType<UploadCoverMessage> {
    constructor() {
        super("im.UploadCoverMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "message", T: () => Text },
            { no: 4, name: "content", kind: "message", T: () => Text },
            { no: 5, name: "tips_title", kind: "message", T: () => Text },
            { no: 6, name: "tips_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "cover_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UploadCoverMessage>): UploadCoverMessage {
        const message = { msgType: 0n, tipsUrl: "", coverType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadCoverMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadCoverMessage): UploadCoverMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 msg_type */ 2:
                    message.msgType = reader.int64().toBigInt();
                    break;
                case /* data.Text title */ 3:
                    message.title = Text.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* data.Text content */ 4:
                    message.content = Text.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* data.Text tips_title */ 5:
                    message.tipsTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.tipsTitle);
                    break;
                case /* string tips_url */ 6:
                    message.tipsUrl = reader.string();
                    break;
                case /* int64 cover_type */ 7:
                    message.coverType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadCoverMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 msg_type = 2; */
        if (message.msgType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgType);
        /* data.Text title = 3; */
        if (message.title)
            Text.internalBinaryWrite(message.title, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Text content = 4; */
        if (message.content)
            Text.internalBinaryWrite(message.content, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Text tips_title = 5; */
        if (message.tipsTitle)
            Text.internalBinaryWrite(message.tipsTitle, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string tips_url = 6; */
        if (message.tipsUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.tipsUrl);
        /* int64 cover_type = 7; */
        if (message.coverType !== 0n)
            writer.tag(7, WireType.Varint).int64(message.coverType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UploadCoverMessage
 */
export const UploadCoverMessage = new UploadCoverMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserStatsMessage$Type extends MessageType<UserStatsMessage> {
    constructor() {
        super("im.UserStatsMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "action_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UserStatsMessage>): UserStatsMessage {
        const message = { content: "", userId: 0n, actionType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserStatsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserStatsMessage): UserStatsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 action_type */ 4:
                    message.actionType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserStatsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* int64 action_type = 4; */
        if (message.actionType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.actionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserStatsMessage
 */
export const UserStatsMessage = new UserStatsMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerificationCodeMessage$Type extends MessageType<VerificationCodeMessage> {
    constructor() {
        super("im.VerificationCodeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VerificationCodeMessage>): VerificationCodeMessage {
        const message = { id: 0n, duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerificationCodeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerificationCodeMessage): VerificationCodeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerificationCodeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VerificationCodeMessage
 */
export const VerificationCodeMessage = new VerificationCodeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VIPInfoMessage$Type extends MessageType<VIPInfoMessage> {
    constructor() {
        super("im.VIPInfoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_vip_info", kind: "message", T: () => UserVIPInfo },
            { no: 3, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VIPInfoMessage>): VIPInfoMessage {
        const message = { action: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VIPInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VIPInfoMessage): VIPInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.UserVIPInfo user_vip_info */ 2:
                    message.userVipInfo = UserVIPInfo.internalBinaryRead(reader, reader.uint32(), options, message.userVipInfo);
                    break;
                case /* int64 action */ 3:
                    message.action = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VIPInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.UserVIPInfo user_vip_info = 2; */
        if (message.userVipInfo)
            UserVIPInfo.internalBinaryWrite(message.userVipInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 action = 3; */
        if (message.action !== 0n)
            writer.tag(3, WireType.Varint).int64(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VIPInfoMessage
 */
export const VIPInfoMessage = new VIPInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VIPSeatMessage$Type extends MessageType<VIPSeatMessage> {
    constructor() {
        super("im.VIPSeatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "top_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 3, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VIPSeatMessage>): VIPSeatMessage {
        const message = { topUsers: [], totalCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VIPSeatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VIPSeatMessage): VIPSeatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.User top_users */ 2:
                    message.topUsers.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total_count */ 3:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VIPSeatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.User top_users = 2; */
        for (let i = 0; i < message.topUsers.length; i++)
            User.internalBinaryWrite(message.topUsers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count = 3; */
        if (message.totalCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VIPSeatMessage
 */
export const VIPSeatMessage = new VIPSeatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastBattleBonusMessage$Type extends MessageType<WebcastBattleBonusMessage> {
    constructor() {
        super("im.WebcastBattleBonusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "mvp_info", kind: "message", T: () => WebcastBattleBonusMessage_MvpMessage },
            { no: 3, name: "player_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebcastBattleBonusMessage_PlayerMessage }
        ]);
    }
    create(value?: PartialMessage<WebcastBattleBonusMessage>): WebcastBattleBonusMessage {
        const message = { playerList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastBattleBonusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastBattleBonusMessage): WebcastBattleBonusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.WebcastBattleBonusMessage.MvpMessage mvp_info */ 2:
                    message.mvpInfo = WebcastBattleBonusMessage_MvpMessage.internalBinaryRead(reader, reader.uint32(), options, message.mvpInfo);
                    break;
                case /* repeated im.WebcastBattleBonusMessage.PlayerMessage player_list */ 3:
                    message.playerList.push(WebcastBattleBonusMessage_PlayerMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastBattleBonusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.WebcastBattleBonusMessage.MvpMessage mvp_info = 2; */
        if (message.mvpInfo)
            WebcastBattleBonusMessage_MvpMessage.internalBinaryWrite(message.mvpInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.WebcastBattleBonusMessage.PlayerMessage player_list = 3; */
        for (let i = 0; i < message.playerList.length; i++)
            WebcastBattleBonusMessage_PlayerMessage.internalBinaryWrite(message.playerList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastBattleBonusMessage
 */
export const WebcastBattleBonusMessage = new WebcastBattleBonusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastBattleBonusMessage_MvpMessage$Type extends MessageType<WebcastBattleBonusMessage_MvpMessage> {
    constructor() {
        super("im.WebcastBattleBonusMessage.MvpMessage", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "prop_info", kind: "message", T: () => PropSummary }
        ]);
    }
    create(value?: PartialMessage<WebcastBattleBonusMessage_MvpMessage>): WebcastBattleBonusMessage_MvpMessage {
        const message = { userId: 0n, userName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastBattleBonusMessage_MvpMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastBattleBonusMessage_MvpMessage): WebcastBattleBonusMessage_MvpMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* data.PropSummary prop_info */ 3:
                    message.propInfo = PropSummary.internalBinaryRead(reader, reader.uint32(), options, message.propInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastBattleBonusMessage_MvpMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* data.PropSummary prop_info = 3; */
        if (message.propInfo)
            PropSummary.internalBinaryWrite(message.propInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastBattleBonusMessage.MvpMessage
 */
export const WebcastBattleBonusMessage_MvpMessage = new WebcastBattleBonusMessage_MvpMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastBattleBonusMessage_PlayerMessage$Type extends MessageType<WebcastBattleBonusMessage_PlayerMessage> {
    constructor() {
        super("im.WebcastBattleBonusMessage.PlayerMessage", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "diamond_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WebcastBattleBonusMessage_PlayerMessage>): WebcastBattleBonusMessage_PlayerMessage {
        const message = { userId: 0n, userName: "", diamondCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastBattleBonusMessage_PlayerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastBattleBonusMessage_PlayerMessage): WebcastBattleBonusMessage_PlayerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int64 diamond_count */ 3:
                    message.diamondCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastBattleBonusMessage_PlayerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int64 diamond_count = 3; */
        if (message.diamondCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.diamondCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastBattleBonusMessage.PlayerMessage
 */
export const WebcastBattleBonusMessage_PlayerMessage = new WebcastBattleBonusMessage_PlayerMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastBattlePropertyMessage$Type extends MessageType<WebcastBattlePropertyMessage> {
    constructor() {
        super("im.WebcastBattlePropertyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_prop_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebcastBattlePropertyMessage_RoomPropDesc }
        ]);
    }
    create(value?: PartialMessage<WebcastBattlePropertyMessage>): WebcastBattlePropertyMessage {
        const message = { roomPropList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastBattlePropertyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastBattlePropertyMessage): WebcastBattlePropertyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.WebcastBattlePropertyMessage.RoomPropDesc room_prop_list */ 2:
                    message.roomPropList.push(WebcastBattlePropertyMessage_RoomPropDesc.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastBattlePropertyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.WebcastBattlePropertyMessage.RoomPropDesc room_prop_list = 2; */
        for (let i = 0; i < message.roomPropList.length; i++)
            WebcastBattlePropertyMessage_RoomPropDesc.internalBinaryWrite(message.roomPropList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastBattlePropertyMessage
 */
export const WebcastBattlePropertyMessage = new WebcastBattlePropertyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastBattlePropertyMessage_RoomPropDesc$Type extends MessageType<WebcastBattlePropertyMessage_RoomPropDesc> {
    constructor() {
        super("im.WebcastBattlePropertyMessage.RoomPropDesc", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "prop_desc_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PropSummary }
        ]);
    }
    create(value?: PartialMessage<WebcastBattlePropertyMessage_RoomPropDesc>): WebcastBattlePropertyMessage_RoomPropDesc {
        const message = { roomId: 0n, propDescList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastBattlePropertyMessage_RoomPropDesc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastBattlePropertyMessage_RoomPropDesc): WebcastBattlePropertyMessage_RoomPropDesc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* repeated data.PropSummary prop_desc_list */ 2:
                    message.propDescList.push(PropSummary.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastBattlePropertyMessage_RoomPropDesc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        /* repeated data.PropSummary prop_desc_list = 2; */
        for (let i = 0; i < message.propDescList.length; i++)
            PropSummary.internalBinaryWrite(message.propDescList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastBattlePropertyMessage.RoomPropDesc
 */
export const WebcastBattlePropertyMessage_RoomPropDesc = new WebcastBattlePropertyMessage_RoomPropDesc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc$Type extends MessageType<WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc> {
    constructor() {
        super("im.WebcastBattlePropertyMessage.RoomPropDesc.PropertyDesc", [
            { no: 1, name: "prop_info", kind: "message", T: () => PropSummary },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "from_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc>): WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc {
        const message = { startTime: 0n, duration: 0n, fromUserId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc): WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.PropSummary prop_info */ 1:
                    message.propInfo = PropSummary.internalBinaryRead(reader, reader.uint32(), options, message.propInfo);
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 from_user_id */ 4:
                    message.fromUserId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.PropSummary prop_info = 1; */
        if (message.propInfo)
            PropSummary.internalBinaryWrite(message.propInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_time = 2; */
        if (message.startTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* int64 from_user_id = 4; */
        if (message.fromUserId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.fromUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastBattlePropertyMessage.RoomPropDesc.PropertyDesc
 */
export const WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc = new WebcastBattlePropertyMessage_RoomPropDesc_PropertyDesc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastPopularCardMessage$Type extends MessageType<WebcastPopularCardMessage> {
    constructor() {
        super("im.WebcastPopularCardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "popular_card_info", kind: "message", T: () => WebcastPopularCardMessage_PopularCardInfo }
        ]);
    }
    create(value?: PartialMessage<WebcastPopularCardMessage>): WebcastPopularCardMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastPopularCardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastPopularCardMessage): WebcastPopularCardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.WebcastPopularCardMessage.PopularCardInfo popular_card_info */ 2:
                    message.popularCardInfo = WebcastPopularCardMessage_PopularCardInfo.internalBinaryRead(reader, reader.uint32(), options, message.popularCardInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastPopularCardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.WebcastPopularCardMessage.PopularCardInfo popular_card_info = 2; */
        if (message.popularCardInfo)
            WebcastPopularCardMessage_PopularCardInfo.internalBinaryWrite(message.popularCardInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastPopularCardMessage
 */
export const WebcastPopularCardMessage = new WebcastPopularCardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastPopularCardMessage_PopularCardInfo$Type extends MessageType<WebcastPopularCardMessage_PopularCardInfo> {
    constructor() {
        super("im.WebcastPopularCardMessage.PopularCardInfo", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "enter_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebcastPopularCardMessage_PopularCardInfo>): WebcastPopularCardMessage_PopularCardInfo {
        const message = { status: 0, startTime: 0n, endTime: 0n, enterNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastPopularCardMessage_PopularCardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastPopularCardMessage_PopularCardInfo): WebcastPopularCardMessage_PopularCardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 3:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int32 enter_number */ 4:
                    message.enterNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastPopularCardMessage_PopularCardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* int64 start_time = 2; */
        if (message.startTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* int64 end_time = 3; */
        if (message.endTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTime);
        /* int32 enter_number = 4; */
        if (message.enterNumber !== 0)
            writer.tag(4, WireType.Varint).int32(message.enterNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastPopularCardMessage.PopularCardInfo
 */
export const WebcastPopularCardMessage_PopularCardInfo = new WebcastPopularCardMessage_PopularCardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoLiveGoodsRcmdMessage$Type extends MessageType<VideoLiveGoodsRcmdMessage> {
    constructor() {
        super("im.VideoLiveGoodsRcmdMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "rcmd_goods_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VideoLiveGoodsRcmdMessage>): VideoLiveGoodsRcmdMessage {
        const message = { rcmdGoodsId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoLiveGoodsRcmdMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoLiveGoodsRcmdMessage): VideoLiveGoodsRcmdMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 rcmd_goods_id */ 2:
                    message.rcmdGoodsId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoLiveGoodsRcmdMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 rcmd_goods_id = 2; */
        if (message.rcmdGoodsId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rcmdGoodsId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoLiveGoodsRcmdMessage
 */
export const VideoLiveGoodsRcmdMessage = new VideoLiveGoodsRcmdMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoLiveCouponRcmdMessage$Type extends MessageType<VideoLiveCouponRcmdMessage> {
    constructor() {
        super("im.VideoLiveCouponRcmdMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "rcmd_coupon_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VideoLiveCouponRcmdMessage>): VideoLiveCouponRcmdMessage {
        const message = { rcmdCouponId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoLiveCouponRcmdMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoLiveCouponRcmdMessage): VideoLiveCouponRcmdMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 rcmd_coupon_id */ 2:
                    message.rcmdCouponId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoLiveCouponRcmdMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 rcmd_coupon_id = 2; */
        if (message.rcmdCouponId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.rcmdCouponId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoLiveCouponRcmdMessage
 */
export const VideoLiveCouponRcmdMessage = new VideoLiveCouponRcmdMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoLiveGoodsOrderMessage$Type extends MessageType<VideoLiveGoodsOrderMessage> {
    constructor() {
        super("im.VideoLiveGoodsOrderMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "goods_order", kind: "message", T: () => VideoLiveGoodsOrderMessage_GoodsOrder }
        ]);
    }
    create(value?: PartialMessage<VideoLiveGoodsOrderMessage>): VideoLiveGoodsOrderMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoLiveGoodsOrderMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoLiveGoodsOrderMessage): VideoLiveGoodsOrderMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* im.VideoLiveGoodsOrderMessage.GoodsOrder goods_order */ 3:
                    message.goodsOrder = VideoLiveGoodsOrderMessage_GoodsOrder.internalBinaryRead(reader, reader.uint32(), options, message.goodsOrder);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoLiveGoodsOrderMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.VideoLiveGoodsOrderMessage.GoodsOrder goods_order = 3; */
        if (message.goodsOrder)
            VideoLiveGoodsOrderMessage_GoodsOrder.internalBinaryWrite(message.goodsOrder, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoLiveGoodsOrderMessage
 */
export const VideoLiveGoodsOrderMessage = new VideoLiveGoodsOrderMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoLiveGoodsOrderMessage_GoodsOrder$Type extends MessageType<VideoLiveGoodsOrderMessage_GoodsOrder> {
    constructor() {
        super("im.VideoLiveGoodsOrderMessage.GoodsOrder", [
            { no: 1, name: "goods_room_order", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "order_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "order_money", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "order_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoLiveGoodsOrderMessage_GoodsOrder>): VideoLiveGoodsOrderMessage_GoodsOrder {
        const message = { goodsRoomOrder: 0n, orderNum: 0n, orderMoney: 0n, orderId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoLiveGoodsOrderMessage_GoodsOrder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoLiveGoodsOrderMessage_GoodsOrder): VideoLiveGoodsOrderMessage_GoodsOrder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 goods_room_order */ 1:
                    message.goodsRoomOrder = reader.int64().toBigInt();
                    break;
                case /* int64 order_num */ 2:
                    message.orderNum = reader.int64().toBigInt();
                    break;
                case /* int64 order_money */ 3:
                    message.orderMoney = reader.int64().toBigInt();
                    break;
                case /* string order_id */ 4:
                    message.orderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoLiveGoodsOrderMessage_GoodsOrder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 goods_room_order = 1; */
        if (message.goodsRoomOrder !== 0n)
            writer.tag(1, WireType.Varint).int64(message.goodsRoomOrder);
        /* int64 order_num = 2; */
        if (message.orderNum !== 0n)
            writer.tag(2, WireType.Varint).int64(message.orderNum);
        /* int64 order_money = 3; */
        if (message.orderMoney !== 0n)
            writer.tag(3, WireType.Varint).int64(message.orderMoney);
        /* string order_id = 4; */
        if (message.orderId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.orderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoLiveGoodsOrderMessage.GoodsOrder
 */
export const VideoLiveGoodsOrderMessage_GoodsOrder = new VideoLiveGoodsOrderMessage_GoodsOrder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankListAwardMessage$Type extends MessageType<RankListAwardMessage> {
    constructor() {
        super("im.RankListAwardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "effect_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "rank_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "rank", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "star_activity_grade_medal", kind: "message", T: () => BattleStarActivityGradeMedal },
            { no: 7, name: "scheme_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "asset_image", kind: "message", T: () => Image },
            { no: 9, name: "play_priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<RankListAwardMessage>): RankListAwardMessage {
        const message = { assetId: 0n, effectOpen: false, rankType: 0n, rank: 0n, schemeUrl: "", playPriority: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RankListAwardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RankListAwardMessage): RankListAwardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 asset_id */ 2:
                    message.assetId = reader.int64().toBigInt();
                    break;
                case /* bool effect_open */ 3:
                    message.effectOpen = reader.bool();
                    break;
                case /* int64 rank_type */ 4:
                    message.rankType = reader.int64().toBigInt();
                    break;
                case /* int64 rank */ 5:
                    message.rank = reader.int64().toBigInt();
                    break;
                case /* data.BattleStarActivityGradeMedal star_activity_grade_medal */ 6:
                    message.starActivityGradeMedal = BattleStarActivityGradeMedal.internalBinaryRead(reader, reader.uint32(), options, message.starActivityGradeMedal);
                    break;
                case /* string scheme_url */ 7:
                    message.schemeUrl = reader.string();
                    break;
                case /* data.Image asset_image */ 8:
                    message.assetImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.assetImage);
                    break;
                case /* int32 play_priority */ 9:
                    message.playPriority = reader.int32();
                    break;
                case /* data.Text text */ 10:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RankListAwardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 asset_id = 2; */
        if (message.assetId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.assetId);
        /* bool effect_open = 3; */
        if (message.effectOpen !== false)
            writer.tag(3, WireType.Varint).bool(message.effectOpen);
        /* int64 rank_type = 4; */
        if (message.rankType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.rankType);
        /* int64 rank = 5; */
        if (message.rank !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rank);
        /* data.BattleStarActivityGradeMedal star_activity_grade_medal = 6; */
        if (message.starActivityGradeMedal)
            BattleStarActivityGradeMedal.internalBinaryWrite(message.starActivityGradeMedal, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string scheme_url = 7; */
        if (message.schemeUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.schemeUrl);
        /* data.Image asset_image = 8; */
        if (message.assetImage)
            Image.internalBinaryWrite(message.assetImage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 play_priority = 9; */
        if (message.playPriority !== 0)
            writer.tag(9, WireType.Varint).int32(message.playPriority);
        /* data.Text text = 10; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RankListAwardMessage
 */
export const RankListAwardMessage = new RankListAwardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchAgainstScoreMessage$Type extends MessageType<MatchAgainstScoreMessage> {
    constructor() {
        super("im.MatchAgainstScoreMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "against", kind: "message", T: () => Against },
            { no: 3, name: "match_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "display_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "match_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchAgainstScoreMessage>): MatchAgainstScoreMessage {
        const message = { matchStatus: 0, displayStatus: 0, matchId: 0n, matchIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchAgainstScoreMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchAgainstScoreMessage): MatchAgainstScoreMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Against against */ 2:
                    message.against = Against.internalBinaryRead(reader, reader.uint32(), options, message.against);
                    break;
                case /* int32 match_status */ 3:
                    message.matchStatus = reader.int32();
                    break;
                case /* int32 display_status */ 4:
                    message.displayStatus = reader.int32();
                    break;
                case /* int64 match_id */ 5:
                    message.matchId = reader.int64().toBigInt();
                    break;
                case /* string match_id_str */ 6:
                    message.matchIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchAgainstScoreMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Against against = 2; */
        if (message.against)
            Against.internalBinaryWrite(message.against, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 match_status = 3; */
        if (message.matchStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.matchStatus);
        /* int32 display_status = 4; */
        if (message.displayStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.displayStatus);
        /* int64 match_id = 5; */
        if (message.matchId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.matchId);
        /* string match_id_str = 6; */
        if (message.matchIdStr !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.matchIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchAgainstScoreMessage
 */
export const MatchAgainstScoreMessage = new MatchAgainstScoreMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchCollectionMessage$Type extends MessageType<MatchCollectionMessage> {
    constructor() {
        super("im.MatchCollectionMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "collection_item", kind: "message", T: () => CollectionItem }
        ]);
    }
    create(value?: PartialMessage<MatchCollectionMessage>): MatchCollectionMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchCollectionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchCollectionMessage): MatchCollectionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.CollectionItem collection_item */ 2:
                    message.collectionItem = CollectionItem.internalBinaryRead(reader, reader.uint32(), options, message.collectionItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchCollectionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.CollectionItem collection_item = 2; */
        if (message.collectionItem)
            CollectionItem.internalBinaryWrite(message.collectionItem, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchCollectionMessage
 */
export const MatchCollectionMessage = new MatchCollectionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchHighLightPointMessage$Type extends MessageType<MatchHighLightPointMessage> {
    constructor() {
        super("im.MatchHighLightPointMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EpisodeHighLight }
        ]);
    }
    create(value?: PartialMessage<MatchHighLightPointMessage>): MatchHighLightPointMessage {
        const message = { points: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchHighLightPointMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchHighLightPointMessage): MatchHighLightPointMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.EpisodeHighLight points */ 2:
                    message.points.push(EpisodeHighLight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchHighLightPointMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.EpisodeHighLight points = 2; */
        for (let i = 0; i < message.points.length; i++)
            EpisodeHighLight.internalBinaryWrite(message.points[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchHighLightPointMessage
 */
export const MatchHighLightPointMessage = new MatchHighLightPointMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchHostChangeMessage$Type extends MessageType<MatchHostChangeMessage> {
    constructor() {
        super("im.MatchHostChangeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "team_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "team_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "team_icon", kind: "message", T: () => Image },
            { no: 6, name: "team_badge", kind: "message", T: () => Image },
            { no: 7, name: "team_background", kind: "message", T: () => Image },
            { no: 8, name: "system_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchHostChangeMessage>): MatchHostChangeMessage {
        const message = { teamId: 0n, teamName: "", schemaUrl: "", systemMsg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchHostChangeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchHostChangeMessage): MatchHostChangeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 team_id */ 2:
                    message.teamId = reader.int64().toBigInt();
                    break;
                case /* string team_name */ 3:
                    message.teamName = reader.string();
                    break;
                case /* string schema_url */ 4:
                    message.schemaUrl = reader.string();
                    break;
                case /* data.Image team_icon */ 5:
                    message.teamIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.teamIcon);
                    break;
                case /* data.Image team_badge */ 6:
                    message.teamBadge = Image.internalBinaryRead(reader, reader.uint32(), options, message.teamBadge);
                    break;
                case /* data.Image team_background */ 7:
                    message.teamBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.teamBackground);
                    break;
                case /* string system_msg */ 8:
                    message.systemMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchHostChangeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 team_id = 2; */
        if (message.teamId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.teamId);
        /* string team_name = 3; */
        if (message.teamName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.teamName);
        /* string schema_url = 4; */
        if (message.schemaUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.schemaUrl);
        /* data.Image team_icon = 5; */
        if (message.teamIcon)
            Image.internalBinaryWrite(message.teamIcon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image team_badge = 6; */
        if (message.teamBadge)
            Image.internalBinaryWrite(message.teamBadge, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Image team_background = 7; */
        if (message.teamBackground)
            Image.internalBinaryWrite(message.teamBackground, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string system_msg = 8; */
        if (message.systemMsg !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.systemMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchHostChangeMessage
 */
export const MatchHostChangeMessage = new MatchHostChangeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchHotMessage$Type extends MessageType<MatchHotMessage> {
    constructor() {
        super("im.MatchHotMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "sequence_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "group", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "IconIndex", kind: "scalar", jsonName: "IconIndex", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "TriggerTimestamp", kind: "scalar", jsonName: "TriggerTimestamp", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MatchHotMessage>): MatchHotMessage {
        const message = { msgType: 0, content: "", count: 0n, sequenceId: 0n, group: 0, iconIndex: 0n, triggerTimestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchHotMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchHotMessage): MatchHotMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 msg_type */ 2:
                    message.msgType = reader.int32();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 count */ 4:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* int64 sequence_id */ 5:
                    message.sequenceId = reader.int64().toBigInt();
                    break;
                case /* int32 group */ 6:
                    message.group = reader.int32();
                    break;
                case /* int64 IconIndex = 7 [json_name = "IconIndex"];*/ 7:
                    message.iconIndex = reader.int64().toBigInt();
                    break;
                case /* int64 TriggerTimestamp = 8 [json_name = "TriggerTimestamp"];*/ 8:
                    message.triggerTimestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchHotMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 msg_type = 2; */
        if (message.msgType !== 0)
            writer.tag(2, WireType.Varint).int32(message.msgType);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 count = 4; */
        if (message.count !== 0n)
            writer.tag(4, WireType.Varint).int64(message.count);
        /* int64 sequence_id = 5; */
        if (message.sequenceId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.sequenceId);
        /* int32 group = 6; */
        if (message.group !== 0)
            writer.tag(6, WireType.Varint).int32(message.group);
        /* int64 IconIndex = 7 [json_name = "IconIndex"]; */
        if (message.iconIndex !== 0n)
            writer.tag(7, WireType.Varint).int64(message.iconIndex);
        /* int64 TriggerTimestamp = 8 [json_name = "TriggerTimestamp"]; */
        if (message.triggerTimestamp !== 0n)
            writer.tag(8, WireType.Varint).int64(message.triggerTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchHotMessage
 */
export const MatchHotMessage = new MatchHotMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoSize$Type extends MessageType<VideoSize> {
    constructor() {
        super("im.VideoSize", [
            { no: 1, name: "Height", kind: "scalar", jsonName: "Height", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "Width", kind: "scalar", jsonName: "Width", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VideoSize>): VideoSize {
        const message = { height: 0, width: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoSize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoSize): VideoSize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 Height = 1 [json_name = "Height"];*/ 1:
                    message.height = reader.int32();
                    break;
                case /* int32 Width = 2 [json_name = "Width"];*/ 2:
                    message.width = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoSize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 Height = 1 [json_name = "Height"]; */
        if (message.height !== 0)
            writer.tag(1, WireType.Varint).int32(message.height);
        /* int32 Width = 2 [json_name = "Width"]; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).int32(message.width);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoSize
 */
export const VideoSize = new VideoSize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Avatar$Type extends MessageType<Avatar> {
    constructor() {
        super("im.Avatar", [
            { no: 1, name: "url_big", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url_mid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url_small", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Avatar>): Avatar {
        const message = { urlBig: "", urlMid: "", urlSmall: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Avatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Avatar): Avatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url_big */ 1:
                    message.urlBig = reader.string();
                    break;
                case /* string url_mid */ 2:
                    message.urlMid = reader.string();
                    break;
                case /* string url_small */ 3:
                    message.urlSmall = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Avatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url_big = 1; */
        if (message.urlBig !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.urlBig);
        /* string url_mid = 2; */
        if (message.urlMid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.urlMid);
        /* string url_small = 3; */
        if (message.urlSmall !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.urlSmall);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Avatar
 */
export const Avatar = new Avatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Team$Type extends MessageType<Team> {
    constructor() {
        super("im.Team", [
            { no: 1, name: "team_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "flag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "score_addition", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Team>): Team {
        const message = { teamName: "", countryCode: "", score: 0, flag: "", teamId: "", scoreAddition: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Team>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Team): Team {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_name */ 1:
                    message.teamName = reader.string();
                    break;
                case /* string country_code */ 2:
                    message.countryCode = reader.string();
                    break;
                case /* int32 score */ 3:
                    message.score = reader.int32();
                    break;
                case /* string flag */ 4:
                    message.flag = reader.string();
                    break;
                case /* string team_id */ 5:
                    message.teamId = reader.string();
                    break;
                case /* int32 score_addition */ 6:
                    message.scoreAddition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_name = 1; */
        if (message.teamName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamName);
        /* string country_code = 2; */
        if (message.countryCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.countryCode);
        /* int32 score = 3; */
        if (message.score !== 0)
            writer.tag(3, WireType.Varint).int32(message.score);
        /* string flag = 4; */
        if (message.flag !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.flag);
        /* string team_id = 5; */
        if (message.teamId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.teamId);
        /* int32 score_addition = 6; */
        if (message.scoreAddition !== 0)
            writer.tag(6, WireType.Varint).int32(message.scoreAddition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Team
 */
export const Team = new Team$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VenueInfo$Type extends MessageType<VenueInfo> {
    constructor() {
        super("im.VenueInfo", [
            { no: 1, name: "stage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "target_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "current_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "polling_interval", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "update_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "distribute_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VenueInfo>): VenueInfo {
        const message = { stage: 0, targetTime: 0n, currentTime: 0n, roomId: "", pollingInterval: 0n, updateTime: 0n, distributeTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VenueInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VenueInfo): VenueInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 stage */ 1:
                    message.stage = reader.int32();
                    break;
                case /* int64 target_time */ 2:
                    message.targetTime = reader.int64().toBigInt();
                    break;
                case /* int64 current_time */ 3:
                    message.currentTime = reader.int64().toBigInt();
                    break;
                case /* string room_id */ 4:
                    message.roomId = reader.string();
                    break;
                case /* int64 polling_interval */ 5:
                    message.pollingInterval = reader.int64().toBigInt();
                    break;
                case /* int64 update_time */ 6:
                    message.updateTime = reader.int64().toBigInt();
                    break;
                case /* int64 distribute_time */ 7:
                    message.distributeTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VenueInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 stage = 1; */
        if (message.stage !== 0)
            writer.tag(1, WireType.Varint).int32(message.stage);
        /* int64 target_time = 2; */
        if (message.targetTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.targetTime);
        /* int64 current_time = 3; */
        if (message.currentTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.currentTime);
        /* string room_id = 4; */
        if (message.roomId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.roomId);
        /* int64 polling_interval = 5; */
        if (message.pollingInterval !== 0n)
            writer.tag(5, WireType.Varint).int64(message.pollingInterval);
        /* int64 update_time = 6; */
        if (message.updateTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.updateTime);
        /* int64 distribute_time = 7; */
        if (message.distributeTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.distributeTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VenueInfo
 */
export const VenueInfo = new VenueInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoCard$Type extends MessageType<VideoCard> {
    constructor() {
        super("im.VideoCard", [
            { no: 1, name: "card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "rid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "epid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "creator_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "size", kind: "message", T: () => VideoSize },
            { no: 12, name: "background_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "card_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "video_resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "link_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VideoCard>): VideoCard {
        const message = { cardType: 0, coverUrl: "", schema: "", title: "", subTitle: "", uid: "", rid: "", epid: "", tag: "", creatorId: "", backgroundUrl: "", cardId: "", videoResource: "", linkType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoCard): VideoCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 card_type */ 1:
                    message.cardType = reader.int32();
                    break;
                case /* string cover_url */ 2:
                    message.coverUrl = reader.string();
                    break;
                case /* string schema */ 3:
                    message.schema = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 5:
                    message.subTitle = reader.string();
                    break;
                case /* string uid */ 6:
                    message.uid = reader.string();
                    break;
                case /* string rid */ 7:
                    message.rid = reader.string();
                    break;
                case /* string epid */ 8:
                    message.epid = reader.string();
                    break;
                case /* string tag */ 9:
                    message.tag = reader.string();
                    break;
                case /* string creator_id */ 10:
                    message.creatorId = reader.string();
                    break;
                case /* im.VideoSize size */ 11:
                    message.size = VideoSize.internalBinaryRead(reader, reader.uint32(), options, message.size);
                    break;
                case /* string background_url */ 12:
                    message.backgroundUrl = reader.string();
                    break;
                case /* string card_id */ 13:
                    message.cardId = reader.string();
                    break;
                case /* string video_resource */ 14:
                    message.videoResource = reader.string();
                    break;
                case /* int32 link_type */ 15:
                    message.linkType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 card_type = 1; */
        if (message.cardType !== 0)
            writer.tag(1, WireType.Varint).int32(message.cardType);
        /* string cover_url = 2; */
        if (message.coverUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.coverUrl);
        /* string schema = 3; */
        if (message.schema !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schema);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 5; */
        if (message.subTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subTitle);
        /* string uid = 6; */
        if (message.uid !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.uid);
        /* string rid = 7; */
        if (message.rid !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rid);
        /* string epid = 8; */
        if (message.epid !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.epid);
        /* string tag = 9; */
        if (message.tag !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.tag);
        /* string creator_id = 10; */
        if (message.creatorId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.creatorId);
        /* im.VideoSize size = 11; */
        if (message.size)
            VideoSize.internalBinaryWrite(message.size, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string background_url = 12; */
        if (message.backgroundUrl !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.backgroundUrl);
        /* string card_id = 13; */
        if (message.cardId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.cardId);
        /* string video_resource = 14; */
        if (message.videoResource !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.videoResource);
        /* int32 link_type = 15; */
        if (message.linkType !== 0)
            writer.tag(15, WireType.Varint).int32(message.linkType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoCard
 */
export const VideoCard = new VideoCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchCard$Type extends MessageType<MatchCard> {
    constructor() {
        super("im.MatchCard", [
            { no: 1, name: "match_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "team_left", kind: "message", T: () => Team },
            { no: 8, name: "team_right", kind: "message", T: () => Team },
            { no: 9, name: "reserved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "epid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "reservation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "card_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "match_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchCard>): MatchCard {
        const message = { matchType: 0, status: 0, title: "", description: "", startTime: "", uid: "", reserved: false, schema: "", epid: "", reservationId: "", cardId: "", roomId: "", matchId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchCard): MatchCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 match_type */ 1:
                    message.matchType = reader.int32();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string start_time */ 5:
                    message.startTime = reader.string();
                    break;
                case /* string uid */ 6:
                    message.uid = reader.string();
                    break;
                case /* im.Team team_left */ 7:
                    message.teamLeft = Team.internalBinaryRead(reader, reader.uint32(), options, message.teamLeft);
                    break;
                case /* im.Team team_right */ 8:
                    message.teamRight = Team.internalBinaryRead(reader, reader.uint32(), options, message.teamRight);
                    break;
                case /* bool reserved */ 9:
                    message.reserved = reader.bool();
                    break;
                case /* string schema */ 10:
                    message.schema = reader.string();
                    break;
                case /* string epid */ 11:
                    message.epid = reader.string();
                    break;
                case /* string reservation_id */ 12:
                    message.reservationId = reader.string();
                    break;
                case /* string card_id */ 13:
                    message.cardId = reader.string();
                    break;
                case /* string room_id */ 14:
                    message.roomId = reader.string();
                    break;
                case /* string match_id */ 15:
                    message.matchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 match_type = 1; */
        if (message.matchType !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchType);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string start_time = 5; */
        if (message.startTime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.startTime);
        /* string uid = 6; */
        if (message.uid !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.uid);
        /* im.Team team_left = 7; */
        if (message.teamLeft)
            Team.internalBinaryWrite(message.teamLeft, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.Team team_right = 8; */
        if (message.teamRight)
            Team.internalBinaryWrite(message.teamRight, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool reserved = 9; */
        if (message.reserved !== false)
            writer.tag(9, WireType.Varint).bool(message.reserved);
        /* string schema = 10; */
        if (message.schema !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.schema);
        /* string epid = 11; */
        if (message.epid !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.epid);
        /* string reservation_id = 12; */
        if (message.reservationId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.reservationId);
        /* string card_id = 13; */
        if (message.cardId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.cardId);
        /* string room_id = 14; */
        if (message.roomId !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.roomId);
        /* string match_id = 15; */
        if (message.matchId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchCard
 */
export const MatchCard = new MatchCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Profile$Type extends MessageType<Profile> {
    constructor() {
        super("im.Profile", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "avatar_url", kind: "message", T: () => Avatar },
            { no: 3, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "followed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "reservation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "card_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "follow_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "color", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "src_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Profile>): Profile {
        const message = { status: 0, nickName: "", description: "", followed: false, startTime: 0n, roomId: "", uid: "", reservationId: "", cardId: "", followCount: 0n, color: 0, srcId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Profile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Profile): Profile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* im.Avatar avatar_url */ 2:
                    message.avatarUrl = Avatar.internalBinaryRead(reader, reader.uint32(), options, message.avatarUrl);
                    break;
                case /* string nick_name */ 3:
                    message.nickName = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* bool followed */ 5:
                    message.followed = reader.bool();
                    break;
                case /* int64 start_time */ 6:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* string room_id */ 7:
                    message.roomId = reader.string();
                    break;
                case /* string uid */ 8:
                    message.uid = reader.string();
                    break;
                case /* string reservation_id */ 9:
                    message.reservationId = reader.string();
                    break;
                case /* string card_id */ 10:
                    message.cardId = reader.string();
                    break;
                case /* int64 follow_count */ 12:
                    message.followCount = reader.int64().toBigInt();
                    break;
                case /* int32 color */ 13:
                    message.color = reader.int32();
                    break;
                case /* int64 src_id */ 14:
                    message.srcId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Profile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* im.Avatar avatar_url = 2; */
        if (message.avatarUrl)
            Avatar.internalBinaryWrite(message.avatarUrl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string nick_name = 3; */
        if (message.nickName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickName);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* bool followed = 5; */
        if (message.followed !== false)
            writer.tag(5, WireType.Varint).bool(message.followed);
        /* int64 start_time = 6; */
        if (message.startTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.startTime);
        /* string room_id = 7; */
        if (message.roomId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.roomId);
        /* string uid = 8; */
        if (message.uid !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.uid);
        /* string reservation_id = 9; */
        if (message.reservationId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.reservationId);
        /* string card_id = 10; */
        if (message.cardId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.cardId);
        /* int64 follow_count = 12; */
        if (message.followCount !== 0n)
            writer.tag(12, WireType.Varint).int64(message.followCount);
        /* int32 color = 13; */
        if (message.color !== 0)
            writer.tag(13, WireType.Varint).int32(message.color);
        /* int64 src_id = 14; */
        if (message.srcId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.srcId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Profile
 */
export const Profile = new Profile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StarProfile$Type extends MessageType<StarProfile> {
    constructor() {
        super("im.StarProfile", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "avatar_url", kind: "message", T: () => Avatar },
            { no: 3, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "followed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "reservation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "card_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "follow_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "color", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StarProfile>): StarProfile {
        const message = { status: 0, nickName: "", description: "", followed: false, roomId: "", uid: "", startTime: 0n, reservationId: "", cardId: "", followCount: 0n, color: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StarProfile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StarProfile): StarProfile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* im.Avatar avatar_url */ 2:
                    message.avatarUrl = Avatar.internalBinaryRead(reader, reader.uint32(), options, message.avatarUrl);
                    break;
                case /* string nick_name */ 3:
                    message.nickName = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* bool followed */ 5:
                    message.followed = reader.bool();
                    break;
                case /* string room_id */ 6:
                    message.roomId = reader.string();
                    break;
                case /* string uid */ 7:
                    message.uid = reader.string();
                    break;
                case /* int64 start_time */ 8:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* string reservation_id */ 9:
                    message.reservationId = reader.string();
                    break;
                case /* string card_id */ 10:
                    message.cardId = reader.string();
                    break;
                case /* int64 follow_count */ 11:
                    message.followCount = reader.int64().toBigInt();
                    break;
                case /* int32 color */ 12:
                    message.color = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StarProfile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* im.Avatar avatar_url = 2; */
        if (message.avatarUrl)
            Avatar.internalBinaryWrite(message.avatarUrl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string nick_name = 3; */
        if (message.nickName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickName);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* bool followed = 5; */
        if (message.followed !== false)
            writer.tag(5, WireType.Varint).bool(message.followed);
        /* string room_id = 6; */
        if (message.roomId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.roomId);
        /* string uid = 7; */
        if (message.uid !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.uid);
        /* int64 start_time = 8; */
        if (message.startTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.startTime);
        /* string reservation_id = 9; */
        if (message.reservationId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.reservationId);
        /* string card_id = 10; */
        if (message.cardId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.cardId);
        /* int64 follow_count = 11; */
        if (message.followCount !== 0n)
            writer.tag(11, WireType.Varint).int64(message.followCount);
        /* int32 color = 12; */
        if (message.color !== 0)
            writer.tag(12, WireType.Varint).int32(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.StarProfile
 */
export const StarProfile = new StarProfile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotVideoCard$Type extends MessageType<HotVideoCard> {
    constructor() {
        super("im.HotVideoCard", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "card_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HotVideoCard>): HotVideoCard {
        const message = { title: "", coverUrl: "", schema: "", cardId: "", subTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotVideoCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotVideoCard): HotVideoCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string cover_url */ 2:
                    message.coverUrl = reader.string();
                    break;
                case /* string schema */ 3:
                    message.schema = reader.string();
                    break;
                case /* string card_id */ 4:
                    message.cardId = reader.string();
                    break;
                case /* string sub_title */ 5:
                    message.subTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotVideoCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string cover_url = 2; */
        if (message.coverUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.coverUrl);
        /* string schema = 3; */
        if (message.schema !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schema);
        /* string card_id = 4; */
        if (message.cardId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cardId);
        /* string sub_title = 5; */
        if (message.subTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HotVideoCard
 */
export const HotVideoCard = new HotVideoCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoCardModule$Type extends MessageType<VideoCardModule> {
    constructor() {
        super("im.VideoCardModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoCard },
            { no: 5, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoCardModule>): VideoCardModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateType: 0, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoCardModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoCardModule): VideoCardModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* int32 update_type */ 3:
                    message.updateType = reader.int32();
                    break;
                case /* repeated im.VideoCard update_list */ 4:
                    message.updateList.push(VideoCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 5:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoCardModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* int32 update_type = 3; */
        if (message.updateType !== 0)
            writer.tag(3, WireType.Varint).int32(message.updateType);
        /* repeated im.VideoCard update_list = 4; */
        for (let i = 0; i < message.updateList.length; i++)
            VideoCard.internalBinaryWrite(message.updateList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 5; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoCardModule
 */
export const VideoCardModule = new VideoCardModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchReservationModule$Type extends MessageType<MatchReservationModule> {
    constructor() {
        super("im.MatchReservationModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchCard },
            { no: 5, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchReservationModule>): MatchReservationModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateType: 0, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchReservationModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchReservationModule): MatchReservationModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* int32 update_type */ 3:
                    message.updateType = reader.int32();
                    break;
                case /* repeated im.MatchCard update_list */ 4:
                    message.updateList.push(MatchCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 5:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchReservationModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* int32 update_type = 3; */
        if (message.updateType !== 0)
            writer.tag(3, WireType.Varint).int32(message.updateType);
        /* repeated im.MatchCard update_list = 4; */
        for (let i = 0; i < message.updateList.length; i++)
            MatchCard.internalBinaryWrite(message.updateList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 5; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchReservationModule
 */
export const MatchReservationModule = new MatchReservationModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FootballTalkingModule$Type extends MessageType<FootballTalkingModule> {
    constructor() {
        super("im.FootballTalkingModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Profile },
            { no: 5, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FootballTalkingModule>): FootballTalkingModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateType: 0, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FootballTalkingModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FootballTalkingModule): FootballTalkingModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* int32 update_type */ 3:
                    message.updateType = reader.int32();
                    break;
                case /* repeated im.Profile update_list */ 4:
                    message.updateList.push(Profile.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 5:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FootballTalkingModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* int32 update_type = 3; */
        if (message.updateType !== 0)
            writer.tag(3, WireType.Varint).int32(message.updateType);
        /* repeated im.Profile update_list = 4; */
        for (let i = 0; i < message.updateList.length; i++)
            Profile.internalBinaryWrite(message.updateList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 5; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FootballTalkingModule
 */
export const FootballTalkingModule = new FootballTalkingModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopularStarModule$Type extends MessageType<PopularStarModule> {
    constructor() {
        super("im.PopularStarModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StarProfile },
            { no: 5, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PopularStarModule>): PopularStarModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateType: 0, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopularStarModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopularStarModule): PopularStarModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* int32 update_type */ 3:
                    message.updateType = reader.int32();
                    break;
                case /* repeated im.StarProfile update_list */ 4:
                    message.updateList.push(StarProfile.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 5:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopularStarModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* int32 update_type = 3; */
        if (message.updateType !== 0)
            writer.tag(3, WireType.Varint).int32(message.updateType);
        /* repeated im.StarProfile update_list = 4; */
        for (let i = 0; i < message.updateList.length; i++)
            StarProfile.internalBinaryWrite(message.updateList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 5; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PopularStarModule
 */
export const PopularStarModule = new PopularStarModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotLiveModule$Type extends MessageType<HotLiveModule> {
    constructor() {
        super("im.HotLiveModule", [
            { no: 1, name: "module_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "module_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "update_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "update_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HotVideoCard },
            { no: 5, name: "delete_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HotLiveModule>): HotLiveModule {
        const message = { moduleId: 0n, moduleVersion: 0n, updateType: 0, updateList: [], deleteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotLiveModule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotLiveModule): HotLiveModule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 module_id */ 1:
                    message.moduleId = reader.int64().toBigInt();
                    break;
                case /* int64 module_version */ 2:
                    message.moduleVersion = reader.int64().toBigInt();
                    break;
                case /* int32 update_type */ 3:
                    message.updateType = reader.int32();
                    break;
                case /* repeated im.HotVideoCard update_list */ 4:
                    message.updateList.push(HotVideoCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string delete_list */ 5:
                    message.deleteList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotLiveModule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 module_id = 1; */
        if (message.moduleId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.moduleId);
        /* int64 module_version = 2; */
        if (message.moduleVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.moduleVersion);
        /* int32 update_type = 3; */
        if (message.updateType !== 0)
            writer.tag(3, WireType.Varint).int32(message.updateType);
        /* repeated im.HotVideoCard update_list = 4; */
        for (let i = 0; i < message.updateList.length; i++)
            HotVideoCard.internalBinaryWrite(message.updateList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string delete_list = 5; */
        for (let i = 0; i < message.deleteList.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.deleteList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HotLiveModule
 */
export const HotLiveModule = new HotLiveModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchVenueMessage$Type extends MessageType<MatchVenueMessage> {
    constructor() {
        super("im.MatchVenueMessage", [
            { no: 1, name: "video_card", kind: "message", T: () => VideoCardModule },
            { no: 2, name: "match_reservation", kind: "message", T: () => MatchReservationModule },
            { no: 3, name: "football_talking", kind: "message", T: () => FootballTalkingModule },
            { no: 4, name: "popular_star", kind: "message", T: () => PopularStarModule },
            { no: 5, name: "hot_live", kind: "message", T: () => HotLiveModule },
            { no: 6, name: "venue_info", kind: "message", T: () => VenueInfo },
            { no: 7, name: "team_reservation", kind: "message", T: () => MatchReservationModule },
            { no: 8, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<MatchVenueMessage>): MatchVenueMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchVenueMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchVenueMessage): MatchVenueMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.VideoCardModule video_card */ 1:
                    message.videoCard = VideoCardModule.internalBinaryRead(reader, reader.uint32(), options, message.videoCard);
                    break;
                case /* im.MatchReservationModule match_reservation */ 2:
                    message.matchReservation = MatchReservationModule.internalBinaryRead(reader, reader.uint32(), options, message.matchReservation);
                    break;
                case /* im.FootballTalkingModule football_talking */ 3:
                    message.footballTalking = FootballTalkingModule.internalBinaryRead(reader, reader.uint32(), options, message.footballTalking);
                    break;
                case /* im.PopularStarModule popular_star */ 4:
                    message.popularStar = PopularStarModule.internalBinaryRead(reader, reader.uint32(), options, message.popularStar);
                    break;
                case /* im.HotLiveModule hot_live */ 5:
                    message.hotLive = HotLiveModule.internalBinaryRead(reader, reader.uint32(), options, message.hotLive);
                    break;
                case /* im.VenueInfo venue_info */ 6:
                    message.venueInfo = VenueInfo.internalBinaryRead(reader, reader.uint32(), options, message.venueInfo);
                    break;
                case /* im.MatchReservationModule team_reservation */ 7:
                    message.teamReservation = MatchReservationModule.internalBinaryRead(reader, reader.uint32(), options, message.teamReservation);
                    break;
                case /* im.Common common */ 8:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchVenueMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.VideoCardModule video_card = 1; */
        if (message.videoCard)
            VideoCardModule.internalBinaryWrite(message.videoCard, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.MatchReservationModule match_reservation = 2; */
        if (message.matchReservation)
            MatchReservationModule.internalBinaryWrite(message.matchReservation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.FootballTalkingModule football_talking = 3; */
        if (message.footballTalking)
            FootballTalkingModule.internalBinaryWrite(message.footballTalking, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.PopularStarModule popular_star = 4; */
        if (message.popularStar)
            PopularStarModule.internalBinaryWrite(message.popularStar, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.HotLiveModule hot_live = 5; */
        if (message.hotLive)
            HotLiveModule.internalBinaryWrite(message.hotLive, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.VenueInfo venue_info = 6; */
        if (message.venueInfo)
            VenueInfo.internalBinaryWrite(message.venueInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* im.MatchReservationModule team_reservation = 7; */
        if (message.teamReservation)
            MatchReservationModule.internalBinaryWrite(message.teamReservation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* im.Common common = 8; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchVenueMessage
 */
export const MatchVenueMessage = new MatchVenueMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaRoomNoticeMessage$Type extends MessageType<MediaRoomNoticeMessage> {
    constructor() {
        super("im.MediaRoomNoticeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "review_pass", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "review_fail_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "notice_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<MediaRoomNoticeMessage>): MediaRoomNoticeMessage {
        const message = { intro: "", duration: 0n, reviewPass: false, reviewFailText: "", noticeTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MediaRoomNoticeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaRoomNoticeMessage): MediaRoomNoticeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string intro */ 2:
                    message.intro = reader.string();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* bool review_pass */ 4:
                    message.reviewPass = reader.bool();
                    break;
                case /* string review_fail_text */ 5:
                    message.reviewFailText = reader.string();
                    break;
                case /* string notice_title */ 6:
                    message.noticeTitle = reader.string();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 7:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaRoomNoticeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string intro = 2; */
        if (message.intro !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.intro);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* bool review_pass = 4; */
        if (message.reviewPass !== false)
            writer.tag(4, WireType.Varint).bool(message.reviewPass);
        /* string review_fail_text = 5; */
        if (message.reviewFailText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.reviewFailText);
        /* string notice_title = 6; */
        if (message.noticeTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.noticeTitle);
        /* im.PublicAreaCommon public_area_common = 7; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MediaRoomNoticeMessage
 */
export const MediaRoomNoticeMessage = new MediaRoomNoticeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MotorCustomMessage$Type extends MessageType<MotorCustomMessage> {
    constructor() {
        super("im.MotorCustomMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MotorCustomMessage_Data }
        ]);
    }
    create(value?: PartialMessage<MotorCustomMessage>): MotorCustomMessage {
        const message = { type: "", title: "", image: "", extra: "", data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MotorCustomMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MotorCustomMessage): MotorCustomMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string image */ 4:
                    message.image = reader.string();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                case /* repeated im.MotorCustomMessage.Data data */ 6:
                    message.data.push(MotorCustomMessage_Data.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MotorCustomMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string image = 4; */
        if (message.image !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.image);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        /* repeated im.MotorCustomMessage.Data data = 6; */
        for (let i = 0; i < message.data.length; i++)
            MotorCustomMessage_Data.internalBinaryWrite(message.data[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MotorCustomMessage
 */
export const MotorCustomMessage = new MotorCustomMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MotorCustomMessage_Data$Type extends MessageType<MotorCustomMessage_Data> {
    constructor() {
        super("im.MotorCustomMessage.Data", [
            { no: 1, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MotorCustomMessage_Data>): MotorCustomMessage_Data {
        const message = { image: "", url: "", content: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MotorCustomMessage_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MotorCustomMessage_Data): MotorCustomMessage_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image */ 1:
                    message.image = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MotorCustomMessage_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image = 1; */
        if (message.image !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.image);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MotorCustomMessage.Data
 */
export const MotorCustomMessage_Data = new MotorCustomMessage_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionMessage$Type extends MessageType<AuctionMessage> {
    constructor() {
        super("im.AuctionMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionMessage>): AuctionMessage {
        const message = { extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionMessage): AuctionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string extra */ 2:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 2; */
        if (message.extra !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionMessage
 */
export const AuctionMessage = new AuctionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionPublicScreenMessageExtra$Type extends MessageType<AuctionPublicScreenMessageExtra> {
    constructor() {
        super("im.AuctionPublicScreenMessageExtra", [
            { no: 1, name: "im_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "core_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AuctionPublicScreenMessageExtra_AuctionIMBody }
        ]);
    }
    create(value?: PartialMessage<AuctionPublicScreenMessageExtra>): AuctionPublicScreenMessageExtra {
        const message = { imType: "", coreData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionPublicScreenMessageExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionPublicScreenMessageExtra): AuctionPublicScreenMessageExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string im_type */ 1:
                    message.imType = reader.string();
                    break;
                case /* repeated im.AuctionPublicScreenMessageExtra.AuctionIMBody core_data */ 2:
                    message.coreData.push(AuctionPublicScreenMessageExtra_AuctionIMBody.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionPublicScreenMessageExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string im_type = 1; */
        if (message.imType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imType);
        /* repeated im.AuctionPublicScreenMessageExtra.AuctionIMBody core_data = 2; */
        for (let i = 0; i < message.coreData.length; i++)
            AuctionPublicScreenMessageExtra_AuctionIMBody.internalBinaryWrite(message.coreData[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionPublicScreenMessageExtra
 */
export const AuctionPublicScreenMessageExtra = new AuctionPublicScreenMessageExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionPublicScreenMessageExtra_AuctionIMBody$Type extends MessageType<AuctionPublicScreenMessageExtra_AuctionIMBody> {
    constructor() {
        super("im.AuctionPublicScreenMessageExtra.AuctionIMBody", [
            { no: 1, name: "role_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_bid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_info", kind: "message", T: () => MysteryUserInfo }
        ]);
    }
    create(value?: PartialMessage<AuctionPublicScreenMessageExtra_AuctionIMBody>): AuctionPublicScreenMessageExtra_AuctionIMBody {
        const message = { roleType: 0n, isBid: false, text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionPublicScreenMessageExtra_AuctionIMBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionPublicScreenMessageExtra_AuctionIMBody): AuctionPublicScreenMessageExtra_AuctionIMBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 role_type */ 1:
                    message.roleType = reader.int64().toBigInt();
                    break;
                case /* bool is_bid */ 2:
                    message.isBid = reader.bool();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* data.MysteryUserInfo user_info */ 4:
                    message.userInfo = MysteryUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.userInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionPublicScreenMessageExtra_AuctionIMBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 role_type = 1; */
        if (message.roleType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roleType);
        /* bool is_bid = 2; */
        if (message.isBid !== false)
            writer.tag(2, WireType.Varint).bool(message.isBid);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* data.MysteryUserInfo user_info = 4; */
        if (message.userInfo)
            MysteryUserInfo.internalBinaryWrite(message.userInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionPublicScreenMessageExtra.AuctionIMBody
 */
export const AuctionPublicScreenMessageExtra_AuctionIMBody = new AuctionPublicScreenMessageExtra_AuctionIMBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionRankMessageExtra$Type extends MessageType<AuctionRankMessageExtra> {
    constructor() {
        super("im.AuctionRankMessageExtra", [
            { no: 1, name: "im_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rank_user_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MysteryRankUserItem },
            { no: 3, name: "entry_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "total_score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionRankMessageExtra>): AuctionRankMessageExtra {
        const message = { imType: "", rankUserItems: [], entryPrice: 0n, totalScore: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionRankMessageExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionRankMessageExtra): AuctionRankMessageExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string im_type */ 1:
                    message.imType = reader.string();
                    break;
                case /* repeated data.MysteryRankUserItem rank_user_items */ 2:
                    message.rankUserItems.push(MysteryRankUserItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 entry_price */ 3:
                    message.entryPrice = reader.int64().toBigInt();
                    break;
                case /* int64 total_score */ 4:
                    message.totalScore = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionRankMessageExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string im_type = 1; */
        if (message.imType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imType);
        /* repeated data.MysteryRankUserItem rank_user_items = 2; */
        for (let i = 0; i < message.rankUserItems.length; i++)
            MysteryRankUserItem.internalBinaryWrite(message.rankUserItems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 entry_price = 3; */
        if (message.entryPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.entryPrice);
        /* int64 total_score = 4; */
        if (message.totalScore !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionRankMessageExtra
 */
export const AuctionRankMessageExtra = new AuctionRankMessageExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionStartMessageExtra$Type extends MessageType<AuctionStartMessageExtra> {
    constructor() {
        super("im.AuctionStartMessageExtra", [
            { no: 1, name: "im_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionStartMessageExtra>): AuctionStartMessageExtra {
        const message = { imType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionStartMessageExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionStartMessageExtra): AuctionStartMessageExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string im_type */ 1:
                    message.imType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionStartMessageExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string im_type = 1; */
        if (message.imType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionStartMessageExtra
 */
export const AuctionStartMessageExtra = new AuctionStartMessageExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionSettleMessageExtra$Type extends MessageType<AuctionSettleMessageExtra> {
    constructor() {
        super("im.AuctionSettleMessageExtra", [
            { no: 1, name: "im_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "top_user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "entry_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "top_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "participate_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "reward_user_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AuctionSettleMessageExtra_RewardUserInfo }
        ]);
    }
    create(value?: PartialMessage<AuctionSettleMessageExtra>): AuctionSettleMessageExtra {
        const message = { imType: "", topUserIds: [], entryPrice: 0n, topPrice: 0n, participateNum: 0n, rewardUserInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionSettleMessageExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionSettleMessageExtra): AuctionSettleMessageExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string im_type */ 1:
                    message.imType = reader.string();
                    break;
                case /* repeated string top_user_ids */ 2:
                    message.topUserIds.push(reader.string());
                    break;
                case /* int64 entry_price */ 3:
                    message.entryPrice = reader.int64().toBigInt();
                    break;
                case /* int64 top_price */ 4:
                    message.topPrice = reader.int64().toBigInt();
                    break;
                case /* int64 participate_num */ 5:
                    message.participateNum = reader.int64().toBigInt();
                    break;
                case /* repeated im.AuctionSettleMessageExtra.RewardUserInfo reward_user_info */ 6:
                    message.rewardUserInfo.push(AuctionSettleMessageExtra_RewardUserInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionSettleMessageExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string im_type = 1; */
        if (message.imType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imType);
        /* repeated string top_user_ids = 2; */
        for (let i = 0; i < message.topUserIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.topUserIds[i]);
        /* int64 entry_price = 3; */
        if (message.entryPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.entryPrice);
        /* int64 top_price = 4; */
        if (message.topPrice !== 0n)
            writer.tag(4, WireType.Varint).int64(message.topPrice);
        /* int64 participate_num = 5; */
        if (message.participateNum !== 0n)
            writer.tag(5, WireType.Varint).int64(message.participateNum);
        /* repeated im.AuctionSettleMessageExtra.RewardUserInfo reward_user_info = 6; */
        for (let i = 0; i < message.rewardUserInfo.length; i++)
            AuctionSettleMessageExtra_RewardUserInfo.internalBinaryWrite(message.rewardUserInfo[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionSettleMessageExtra
 */
export const AuctionSettleMessageExtra = new AuctionSettleMessageExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuctionSettleMessageExtra_RewardUserInfo$Type extends MessageType<AuctionSettleMessageExtra_RewardUserInfo> {
    constructor() {
        super("im.AuctionSettleMessageExtra.RewardUserInfo", [
            { no: 1, name: "user_info", kind: "message", T: () => MysteryUserInfo },
            { no: 2, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AuctionSettleMessageExtra_RewardUserInfo>): AuctionSettleMessageExtra_RewardUserInfo {
        const message = { score: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuctionSettleMessageExtra_RewardUserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuctionSettleMessageExtra_RewardUserInfo): AuctionSettleMessageExtra_RewardUserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MysteryUserInfo user_info */ 1:
                    message.userInfo = MysteryUserInfo.internalBinaryRead(reader, reader.uint32(), options, message.userInfo);
                    break;
                case /* int64 score */ 2:
                    message.score = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuctionSettleMessageExtra_RewardUserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MysteryUserInfo user_info = 1; */
        if (message.userInfo)
            MysteryUserInfo.internalBinaryWrite(message.userInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 score = 2; */
        if (message.score !== 0n)
            writer.tag(2, WireType.Varint).int64(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AuctionSettleMessageExtra.RewardUserInfo
 */
export const AuctionSettleMessageExtra_RewardUserInfo = new AuctionSettleMessageExtra_RewardUserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyEffectMessage$Type extends MessageType<NotifyEffectMessage> {
    constructor() {
        super("im.NotifyEffectMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "icons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 3, name: "text", kind: "message", T: () => Text },
            { no: 4, name: "background", kind: "message", T: () => NotifyEffectMessage_Background },
            { no: 5, name: "dynamic_config", kind: "message", T: () => NotifyEffectMessage_DynamicConfig },
            { no: 6, name: "text_v2", kind: "message", T: () => CombinedText },
            { no: 7, name: "support_landscape", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "scene_config", kind: "message", T: () => NotifyEffectMessage_SceneConfig }
        ]);
    }
    create(value?: PartialMessage<NotifyEffectMessage>): NotifyEffectMessage {
        const message = { icons: [], supportLandscape: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyEffectMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyEffectMessage): NotifyEffectMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.Image icons */ 2:
                    message.icons.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.Text text */ 3:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* im.NotifyEffectMessage.Background background */ 4:
                    message.background = NotifyEffectMessage_Background.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* im.NotifyEffectMessage.DynamicConfig dynamic_config */ 5:
                    message.dynamicConfig = NotifyEffectMessage_DynamicConfig.internalBinaryRead(reader, reader.uint32(), options, message.dynamicConfig);
                    break;
                case /* data.CombinedText text_v2 */ 6:
                    message.textV2 = CombinedText.internalBinaryRead(reader, reader.uint32(), options, message.textV2);
                    break;
                case /* bool support_landscape */ 7:
                    message.supportLandscape = reader.bool();
                    break;
                case /* im.NotifyEffectMessage.SceneConfig scene_config */ 10:
                    message.sceneConfig = NotifyEffectMessage_SceneConfig.internalBinaryRead(reader, reader.uint32(), options, message.sceneConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyEffectMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image icons = 2; */
        for (let i = 0; i < message.icons.length; i++)
            Image.internalBinaryWrite(message.icons[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text text = 3; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* im.NotifyEffectMessage.Background background = 4; */
        if (message.background)
            NotifyEffectMessage_Background.internalBinaryWrite(message.background, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.NotifyEffectMessage.DynamicConfig dynamic_config = 5; */
        if (message.dynamicConfig)
            NotifyEffectMessage_DynamicConfig.internalBinaryWrite(message.dynamicConfig, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.CombinedText text_v2 = 6; */
        if (message.textV2)
            CombinedText.internalBinaryWrite(message.textV2, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool support_landscape = 7; */
        if (message.supportLandscape !== false)
            writer.tag(7, WireType.Varint).bool(message.supportLandscape);
        /* im.NotifyEffectMessage.SceneConfig scene_config = 10; */
        if (message.sceneConfig)
            NotifyEffectMessage_SceneConfig.internalBinaryWrite(message.sceneConfig, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyEffectMessage
 */
export const NotifyEffectMessage = new NotifyEffectMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyEffectMessage_Background$Type extends MessageType<NotifyEffectMessage_Background> {
    constructor() {
        super("im.NotifyEffectMessage.Background", [
            { no: 1, name: "background_image", kind: "message", T: () => Image },
            { no: 10, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyEffectMessage_Background>): NotifyEffectMessage_Background {
        const message = { backgroundColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyEffectMessage_Background>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyEffectMessage_Background): NotifyEffectMessage_Background {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image background_image */ 1:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* string background_color */ 10:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyEffectMessage_Background, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image background_image = 1; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string background_color = 10; */
        if (message.backgroundColor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyEffectMessage.Background
 */
export const NotifyEffectMessage_Background = new NotifyEffectMessage_Background$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyEffectMessage_DynamicConfig$Type extends MessageType<NotifyEffectMessage_DynamicConfig> {
    constructor() {
        super("im.NotifyEffectMessage.DynamicConfig", [
            { no: 1, name: "stay_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max_stay_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "display_effect_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyEffectMessage_DynamicConfig>): NotifyEffectMessage_DynamicConfig {
        const message = { stayTime: 0, maxStayTime: 0, displayEffectType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyEffectMessage_DynamicConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyEffectMessage_DynamicConfig): NotifyEffectMessage_DynamicConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 stay_time */ 1:
                    message.stayTime = reader.int32();
                    break;
                case /* int32 max_stay_time */ 2:
                    message.maxStayTime = reader.int32();
                    break;
                case /* int32 display_effect_type */ 3:
                    message.displayEffectType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyEffectMessage_DynamicConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 stay_time = 1; */
        if (message.stayTime !== 0)
            writer.tag(1, WireType.Varint).int32(message.stayTime);
        /* int32 max_stay_time = 2; */
        if (message.maxStayTime !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxStayTime);
        /* int32 display_effect_type = 3; */
        if (message.displayEffectType !== 0)
            writer.tag(3, WireType.Varint).int32(message.displayEffectType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyEffectMessage.DynamicConfig
 */
export const NotifyEffectMessage_DynamicConfig = new NotifyEffectMessage_DynamicConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotifyEffectMessage_SceneConfig$Type extends MessageType<NotifyEffectMessage_SceneConfig> {
    constructor() {
        super("im.NotifyEffectMessage.SceneConfig", [
            { no: 1, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "need_aggregate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "aggregate_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "aggregate_text", kind: "message", T: () => Text },
            { no: 6, name: "sub_scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "max_wait_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NotifyEffectMessage_SceneConfig>): NotifyEffectMessage_SceneConfig {
        const message = { scene: "", priority: 0n, needAggregate: false, aggregateNum: 0n, subScene: "", maxWaitTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotifyEffectMessage_SceneConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotifyEffectMessage_SceneConfig): NotifyEffectMessage_SceneConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scene */ 1:
                    message.scene = reader.string();
                    break;
                case /* int64 priority */ 2:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* bool need_aggregate */ 3:
                    message.needAggregate = reader.bool();
                    break;
                case /* int64 aggregate_num */ 4:
                    message.aggregateNum = reader.int64().toBigInt();
                    break;
                case /* data.Text aggregate_text */ 5:
                    message.aggregateText = Text.internalBinaryRead(reader, reader.uint32(), options, message.aggregateText);
                    break;
                case /* string sub_scene */ 6:
                    message.subScene = reader.string();
                    break;
                case /* int64 max_wait_time */ 7:
                    message.maxWaitTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotifyEffectMessage_SceneConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scene = 1; */
        if (message.scene !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scene);
        /* int64 priority = 2; */
        if (message.priority !== 0n)
            writer.tag(2, WireType.Varint).int64(message.priority);
        /* bool need_aggregate = 3; */
        if (message.needAggregate !== false)
            writer.tag(3, WireType.Varint).bool(message.needAggregate);
        /* int64 aggregate_num = 4; */
        if (message.aggregateNum !== 0n)
            writer.tag(4, WireType.Varint).int64(message.aggregateNum);
        /* data.Text aggregate_text = 5; */
        if (message.aggregateText)
            Text.internalBinaryWrite(message.aggregateText, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string sub_scene = 6; */
        if (message.subScene !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.subScene);
        /* int64 max_wait_time = 7; */
        if (message.maxWaitTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.maxWaitTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.NotifyEffectMessage.SceneConfig
 */
export const NotifyEffectMessage_SceneConfig = new NotifyEffectMessage_SceneConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveDataMessage$Type extends MessageType<PaidLiveDataMessage> {
    constructor() {
        super("im.PaidLiveDataMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "paid_business_data", kind: "message", T: () => PaidBusinessData }
        ]);
    }
    create(value?: PartialMessage<PaidLiveDataMessage>): PaidLiveDataMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveDataMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveDataMessage): PaidLiveDataMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.PaidBusinessData paid_business_data */ 2:
                    message.paidBusinessData = PaidBusinessData.internalBinaryRead(reader, reader.uint32(), options, message.paidBusinessData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveDataMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.PaidBusinessData paid_business_data = 2; */
        if (message.paidBusinessData)
            PaidBusinessData.internalBinaryWrite(message.paidBusinessData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PaidLiveDataMessage
 */
export const PaidLiveDataMessage = new PaidLiveDataMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidBusinessData$Type extends MessageType<PaidBusinessData> {
    constructor() {
        super("im.PaidBusinessData", [
            { no: 1, name: "ret_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "delivery", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "id_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "ticket_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "ticket_sku_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "purchase_paid_live_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaidBusinessData>): PaidBusinessData {
        const message = { retType: 0n, duration: 0n, delivery: 0, id: 0n, idType: 0, ticketId: 0n, ticketSkuId: 0n, purchasePaidLiveType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidBusinessData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidBusinessData): PaidBusinessData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 ret_type */ 1:
                    message.retType = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int32 delivery */ 3:
                    message.delivery = reader.int32();
                    break;
                case /* int64 id */ 4:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int32 id_type */ 5:
                    message.idType = reader.int32();
                    break;
                case /* int64 ticket_id */ 6:
                    message.ticketId = reader.int64().toBigInt();
                    break;
                case /* int64 ticket_sku_id */ 7:
                    message.ticketSkuId = reader.int64().toBigInt();
                    break;
                case /* int32 purchase_paid_live_type */ 9:
                    message.purchasePaidLiveType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidBusinessData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 ret_type = 1; */
        if (message.retType !== 0n)
            writer.tag(1, WireType.Varint).int64(message.retType);
        /* int64 duration = 2; */
        if (message.duration !== 0n)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* int32 delivery = 3; */
        if (message.delivery !== 0)
            writer.tag(3, WireType.Varint).int32(message.delivery);
        /* int64 id = 4; */
        if (message.id !== 0n)
            writer.tag(4, WireType.Varint).int64(message.id);
        /* int32 id_type = 5; */
        if (message.idType !== 0)
            writer.tag(5, WireType.Varint).int32(message.idType);
        /* int64 ticket_id = 6; */
        if (message.ticketId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.ticketId);
        /* int64 ticket_sku_id = 7; */
        if (message.ticketSkuId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.ticketSkuId);
        /* int32 purchase_paid_live_type = 9; */
        if (message.purchasePaidLiveType !== 0)
            writer.tag(9, WireType.Varint).int32(message.purchasePaidLiveType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PaidBusinessData
 */
export const PaidBusinessData = new PaidBusinessData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveTypeModifyMessage$Type extends MessageType<PaidLiveTypeModifyMessage> {
    constructor() {
        super("im.PaidLiveTypeModifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "paid_live_type_modify_data", kind: "message", T: () => PaidLiveTypeModifyData }
        ]);
    }
    create(value?: PartialMessage<PaidLiveTypeModifyMessage>): PaidLiveTypeModifyMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveTypeModifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveTypeModifyMessage): PaidLiveTypeModifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.PaidLiveTypeModifyData paid_live_type_modify_data */ 2:
                    message.paidLiveTypeModifyData = PaidLiveTypeModifyData.internalBinaryRead(reader, reader.uint32(), options, message.paidLiveTypeModifyData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveTypeModifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.PaidLiveTypeModifyData paid_live_type_modify_data = 2; */
        if (message.paidLiveTypeModifyData)
            PaidLiveTypeModifyData.internalBinaryWrite(message.paidLiveTypeModifyData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PaidLiveTypeModifyMessage
 */
export const PaidLiveTypeModifyMessage = new PaidLiveTypeModifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaidLiveTypeModifyData$Type extends MessageType<PaidLiveTypeModifyData> {
    constructor() {
        super("im.PaidLiveTypeModifyData", [
            { no: 1, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "data", kind: "message", T: () => PrivilegeInfo },
            { no: 3, name: "operator_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaidLiveTypeModifyData>): PaidLiveTypeModifyData {
        const message = { roomId: 0n, operatorType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaidLiveTypeModifyData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaidLiveTypeModifyData): PaidLiveTypeModifyData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 room_id */ 1:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* data.PrivilegeInfo data */ 2:
                    message.data = PrivilegeInfo.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* int32 operator_type */ 3:
                    message.operatorType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaidLiveTypeModifyData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 room_id = 1; */
        if (message.roomId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.roomId);
        /* data.PrivilegeInfo data = 2; */
        if (message.data)
            PrivilegeInfo.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 operator_type = 3; */
        if (message.operatorType !== 0)
            writer.tag(3, WireType.Varint).int32(message.operatorType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PaidLiveTypeModifyData
 */
export const PaidLiveTypeModifyData = new PaidLiveTypeModifyData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PkActivePush$Type extends MessageType<PkActivePush> {
    constructor() {
        super("im.PkActivePush", [
            { no: 1, name: "matcher_r", kind: "message", T: () => PkActivePush_Matcher },
            { no: 2, name: "match_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "wait_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "sign_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "vote_data", kind: "message", T: () => VoteSetting },
            { no: 19, name: "battle_attached_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PkActivePush>): PkActivePush {
        const message = { matchReason: "", waitSeconds: 0n, signExtra: "", battleAttachedInfo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PkActivePush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PkActivePush): PkActivePush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.PkActivePush.Matcher matcher_r */ 1:
                    message.matcherR = PkActivePush_Matcher.internalBinaryRead(reader, reader.uint32(), options, message.matcherR);
                    break;
                case /* string match_reason */ 2:
                    message.matchReason = reader.string();
                    break;
                case /* int64 wait_seconds */ 3:
                    message.waitSeconds = reader.int64().toBigInt();
                    break;
                case /* string sign_extra */ 4:
                    message.signExtra = reader.string();
                    break;
                case /* data.VoteSetting vote_data */ 5:
                    message.voteData = VoteSetting.internalBinaryRead(reader, reader.uint32(), options, message.voteData);
                    break;
                case /* string battle_attached_info */ 19:
                    message.battleAttachedInfo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PkActivePush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.PkActivePush.Matcher matcher_r = 1; */
        if (message.matcherR)
            PkActivePush_Matcher.internalBinaryWrite(message.matcherR, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string match_reason = 2; */
        if (message.matchReason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.matchReason);
        /* int64 wait_seconds = 3; */
        if (message.waitSeconds !== 0n)
            writer.tag(3, WireType.Varint).int64(message.waitSeconds);
        /* string sign_extra = 4; */
        if (message.signExtra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signExtra);
        /* data.VoteSetting vote_data = 5; */
        if (message.voteData)
            VoteSetting.internalBinaryWrite(message.voteData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string battle_attached_info = 19; */
        if (message.battleAttachedInfo !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.battleAttachedInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PkActivePush
 */
export const PkActivePush = new PkActivePush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PkActivePush_Matcher$Type extends MessageType<PkActivePush_Matcher> {
    constructor() {
        super("im.PkActivePush.Matcher", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room", kind: "message", T: () => Room },
            { no: 3, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattleRivalTag }
        ]);
    }
    create(value?: PartialMessage<PkActivePush_Matcher>): PkActivePush_Matcher {
        const message = { userId: 0n, tags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PkActivePush_Matcher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PkActivePush_Matcher): PkActivePush_Matcher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Room room */ 2:
                    message.room = Room.internalBinaryRead(reader, reader.uint32(), options, message.room);
                    break;
                case /* repeated data.BattleRivalTag tags */ 3:
                    message.tags.push(BattleRivalTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PkActivePush_Matcher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* data.Room room = 2; */
        if (message.room)
            Room.internalBinaryWrite(message.room, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.BattleRivalTag tags = 3; */
        for (let i = 0; i < message.tags.length; i++)
            BattleRivalTag.internalBinaryWrite(message.tags[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PkActivePush.Matcher
 */
export const PkActivePush_Matcher = new PkActivePush_Matcher$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PkActivePushMessage$Type extends MessageType<PkActivePushMessage> {
    constructor() {
        super("im.PkActivePushMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "pk_active_push", kind: "message", T: () => PkActivePush }
        ]);
    }
    create(value?: PartialMessage<PkActivePushMessage>): PkActivePushMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PkActivePushMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PkActivePushMessage): PkActivePushMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.PkActivePush pk_active_push */ 2:
                    message.pkActivePush = PkActivePush.internalBinaryRead(reader, reader.uint32(), options, message.pkActivePush);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PkActivePushMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.PkActivePush pk_active_push = 2; */
        if (message.pkActivePush)
            PkActivePush.internalBinaryWrite(message.pkActivePush, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PkActivePushMessage
 */
export const PkActivePushMessage = new PkActivePushMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PKIconBubbleMessage$Type extends MessageType<PKIconBubbleMessage> {
    constructor() {
        super("im.PKIconBubbleMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "bubble_info", kind: "message", T: () => PKIconBubble }
        ]);
    }
    create(value?: PartialMessage<PKIconBubbleMessage>): PKIconBubbleMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PKIconBubbleMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PKIconBubbleMessage): PKIconBubbleMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.PKIconBubble bubble_info */ 2:
                    message.bubbleInfo = PKIconBubble.internalBinaryRead(reader, reader.uint32(), options, message.bubbleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PKIconBubbleMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.PKIconBubble bubble_info = 2; */
        if (message.bubbleInfo)
            PKIconBubble.internalBinaryWrite(message.bubbleInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PKIconBubbleMessage
 */
export const PKIconBubbleMessage = new PKIconBubbleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PKIconBubble$Type extends MessageType<PKIconBubble> {
    constructor() {
        super("im.PKIconBubble", [
            { no: 1, name: "display_icon", kind: "message", T: () => Image },
            { no: 2, name: "display_text", kind: "message", T: () => Text },
            { no: 3, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bubble_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "activity_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "show_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "show_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PKIconBubble>): PKIconBubble {
        const message = { schema: "", bubbleType: 0, activityName: "", showTime: 0n, showCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PKIconBubble>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PKIconBubble): PKIconBubble {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image display_icon */ 1:
                    message.displayIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.displayIcon);
                    break;
                case /* data.Text display_text */ 2:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* string schema */ 3:
                    message.schema = reader.string();
                    break;
                case /* int32 bubble_type */ 4:
                    message.bubbleType = reader.int32();
                    break;
                case /* string activity_name */ 5:
                    message.activityName = reader.string();
                    break;
                case /* int64 show_time */ 6:
                    message.showTime = reader.int64().toBigInt();
                    break;
                case /* int64 show_count */ 7:
                    message.showCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PKIconBubble, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image display_icon = 1; */
        if (message.displayIcon)
            Image.internalBinaryWrite(message.displayIcon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text display_text = 2; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string schema = 3; */
        if (message.schema !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schema);
        /* int32 bubble_type = 4; */
        if (message.bubbleType !== 0)
            writer.tag(4, WireType.Varint).int32(message.bubbleType);
        /* string activity_name = 5; */
        if (message.activityName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.activityName);
        /* int64 show_time = 6; */
        if (message.showTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.showTime);
        /* int64 show_count = 7; */
        if (message.showCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.showCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PKIconBubble
 */
export const PKIconBubble = new PKIconBubble$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlatformAdviseMessage$Type extends MessageType<PlatformAdviseMessage> {
    constructor() {
        super("im.PlatformAdviseMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "advise_text", kind: "message", T: () => Text },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PlatformAdviseMessage>): PlatformAdviseMessage {
        const message = { duration: 0n, priority: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlatformAdviseMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlatformAdviseMessage): PlatformAdviseMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Text advise_text */ 2:
                    message.adviseText = Text.internalBinaryRead(reader, reader.uint32(), options, message.adviseText);
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 priority */ 4:
                    message.priority = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlatformAdviseMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text advise_text = 2; */
        if (message.adviseText)
            Text.internalBinaryWrite(message.adviseText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        /* int64 priority = 4; */
        if (message.priority !== 0n)
            writer.tag(4, WireType.Varint).int64(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PlatformAdviseMessage
 */
export const PlatformAdviseMessage = new PlatformAdviseMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivilegeScreenChatMessage$Type extends MessageType<PrivilegeScreenChatMessage> {
    constructor() {
        super("im.PrivilegeScreenChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 5, name: "style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "activity_danmu_background", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "rtf_content", kind: "message", T: () => Text },
            { no: 8, name: "rtf_content_v2", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<PrivilegeScreenChatMessage>): PrivilegeScreenChatMessage {
        const message = { content: "", style: 0n, activityDanmuBackground: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivilegeScreenChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivilegeScreenChatMessage): PrivilegeScreenChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 4:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* int64 style */ 5:
                    message.style = reader.int64().toBigInt();
                    break;
                case /* int64 activity_danmu_background */ 6:
                    message.activityDanmuBackground = reader.int64().toBigInt();
                    break;
                case /* data.Text rtf_content */ 7:
                    message.rtfContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContent);
                    break;
                case /* data.Text rtf_content_v2 */ 8:
                    message.rtfContentV2 = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContentV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivilegeScreenChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* im.PublicAreaCommon public_area_common = 4; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 style = 5; */
        if (message.style !== 0n)
            writer.tag(5, WireType.Varint).int64(message.style);
        /* int64 activity_danmu_background = 6; */
        if (message.activityDanmuBackground !== 0n)
            writer.tag(6, WireType.Varint).int64(message.activityDanmuBackground);
        /* data.Text rtf_content = 7; */
        if (message.rtfContent)
            Text.internalBinaryWrite(message.rtfContent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* data.Text rtf_content_v2 = 8; */
        if (message.rtfContentV2)
            Text.internalBinaryWrite(message.rtfContentV2, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PrivilegeScreenChatMessage
 */
export const PrivilegeScreenChatMessage = new PrivilegeScreenChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivilegeVoiceWaveMessage$Type extends MessageType<PrivilegeVoiceWaveMessage> {
    constructor() {
        super("im.PrivilegeVoiceWaveMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "low_img", kind: "message", T: () => Image },
            { no: 4, name: "medium_img", kind: "message", T: () => Image },
            { no: 5, name: "high_img", kind: "message", T: () => Image },
            { no: 6, name: "dress_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PrivilegeVoiceWaveMessage>): PrivilegeVoiceWaveMessage {
        const message = { userId: 0n, dressId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivilegeVoiceWaveMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivilegeVoiceWaveMessage): PrivilegeVoiceWaveMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Image low_img */ 3:
                    message.lowImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.lowImg);
                    break;
                case /* data.Image medium_img */ 4:
                    message.mediumImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.mediumImg);
                    break;
                case /* data.Image high_img */ 5:
                    message.highImg = Image.internalBinaryRead(reader, reader.uint32(), options, message.highImg);
                    break;
                case /* int64 dress_id */ 6:
                    message.dressId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivilegeVoiceWaveMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* data.Image low_img = 3; */
        if (message.lowImg)
            Image.internalBinaryWrite(message.lowImg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* data.Image medium_img = 4; */
        if (message.mediumImg)
            Image.internalBinaryWrite(message.mediumImg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image high_img = 5; */
        if (message.highImg)
            Image.internalBinaryWrite(message.highImg, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 dress_id = 6; */
        if (message.dressId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.dressId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PrivilegeVoiceWaveMessage
 */
export const PrivilegeVoiceWaveMessage = new PrivilegeVoiceWaveMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfileViewMessage$Type extends MessageType<ProfileViewMessage> {
    constructor() {
        super("im.ProfileViewMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "title", kind: "message", T: () => Text },
            { no: 3, name: "sub_title", kind: "message", T: () => Text },
            { no: 4, name: "show_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProfileViewMessage>): ProfileViewMessage {
        const message = { showDuration: 0n, source: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfileViewMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileViewMessage): ProfileViewMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Text title */ 2:
                    message.title = Text.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* data.Text sub_title */ 3:
                    message.subTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.subTitle);
                    break;
                case /* int64 show_duration */ 4:
                    message.showDuration = reader.int64().toBigInt();
                    break;
                case /* int32 source */ 5:
                    message.source = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfileViewMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text title = 2; */
        if (message.title)
            Text.internalBinaryWrite(message.title, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text sub_title = 3; */
        if (message.subTitle)
            Text.internalBinaryWrite(message.subTitle, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 show_duration = 4; */
        if (message.showDuration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.showDuration);
        /* int32 source = 5; */
        if (message.source !== 0)
            writer.tag(5, WireType.Varint).int32(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProfileViewMessage
 */
export const ProfileViewMessage = new ProfileViewMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfitGameMessage$Type extends MessageType<ProfitGameMessage> {
    constructor() {
        super("im.ProfitGameMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "frames", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ProfitGameMessage>): ProfitGameMessage {
        const message = { gameId: 0n, frames: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfitGameMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfitGameMessage): ProfitGameMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 game_id */ 2:
                    message.gameId = reader.int64().toBigInt();
                    break;
                case /* bytes frames */ 3:
                    message.frames = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfitGameMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 game_id = 2; */
        if (message.gameId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.gameId);
        /* bytes frames = 3; */
        if (message.frames.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.frames);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProfitGameMessage
 */
export const ProfitGameMessage = new ProfitGameMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfitInteractionScoreAnchorInfo$Type extends MessageType<ProfitInteractionScoreAnchorInfo> {
    constructor() {
        super("im.ProfitInteractionScoreAnchorInfo", [
            { no: 1, name: "score", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "interaction_setting", kind: "message", T: () => ProfitInteractionSetting },
            { no: 3, name: "reach_score_display_threshold", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ProfitInteractionScoreAnchorInfo>): ProfitInteractionScoreAnchorInfo {
        const message = { score: "", reachScoreDisplayThreshold: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfitInteractionScoreAnchorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfitInteractionScoreAnchorInfo): ProfitInteractionScoreAnchorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string score */ 1:
                    message.score = reader.string();
                    break;
                case /* data.ProfitInteractionSetting interaction_setting */ 2:
                    message.interactionSetting = ProfitInteractionSetting.internalBinaryRead(reader, reader.uint32(), options, message.interactionSetting);
                    break;
                case /* bool reach_score_display_threshold */ 3:
                    message.reachScoreDisplayThreshold = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfitInteractionScoreAnchorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string score = 1; */
        if (message.score !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.score);
        /* data.ProfitInteractionSetting interaction_setting = 2; */
        if (message.interactionSetting)
            ProfitInteractionSetting.internalBinaryWrite(message.interactionSetting, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool reach_score_display_threshold = 3; */
        if (message.reachScoreDisplayThreshold !== false)
            writer.tag(3, WireType.Varint).bool(message.reachScoreDisplayThreshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProfitInteractionScoreAnchorInfo
 */
export const ProfitInteractionScoreAnchorInfo = new ProfitInteractionScoreAnchorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfitInteractionScoreMessage$Type extends MessageType<ProfitInteractionScoreMessage> {
    constructor() {
        super("im.ProfitInteractionScoreMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 3, name: "interaction_score_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "interaction_score_action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProfitInteractionScoreMessage>): ProfitInteractionScoreMessage {
        const message = { interactionScoreStatus: 0, channelId: 0n, startTime: 0n, interactionScoreAction: 0, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProfitInteractionScoreMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfitInteractionScoreMessage): ProfitInteractionScoreMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 interaction_score_status */ 3:
                    message.interactionScoreStatus = reader.int32();
                    break;
                case /* int64 channel_id */ 4:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 5:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int32 interaction_score_action */ 6:
                    message.interactionScoreAction = reader.int32();
                    break;
                case /* string extra */ 7:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProfitInteractionScoreMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 interaction_score_status = 3; */
        if (message.interactionScoreStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.interactionScoreStatus);
        /* int64 channel_id = 4; */
        if (message.channelId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.channelId);
        /* int64 start_time = 5; */
        if (message.startTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.startTime);
        /* int32 interaction_score_action = 6; */
        if (message.interactionScoreAction !== 0)
            writer.tag(6, WireType.Varint).int32(message.interactionScoreAction);
        /* string extra = 7; */
        if (message.extra !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ProfitInteractionScoreMessage
 */
export const ProfitInteractionScoreMessage = new ProfitInteractionScoreMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsProgrammeStateControlMessage$Type extends MessageType<VsProgrammeStateControlMessage> {
    constructor() {
        super("im.VsProgrammeStateControlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "pID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "playBackInfo_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VsProgrammeStateControlMessage_PlayBackInfo }
        ]);
    }
    create(value?: PartialMessage<VsProgrammeStateControlMessage>): VsProgrammeStateControlMessage {
        const message = { pID: "", state: 0, playBackInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsProgrammeStateControlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsProgrammeStateControlMessage): VsProgrammeStateControlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string pID */ 2:
                    message.pID = reader.string();
                    break;
                case /* int32 state */ 3:
                    message.state = reader.int32();
                    break;
                case /* repeated im.VsProgrammeStateControlMessage.PlayBackInfo playBackInfo_list */ 4:
                    message.playBackInfoList.push(VsProgrammeStateControlMessage_PlayBackInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsProgrammeStateControlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string pID = 2; */
        if (message.pID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pID);
        /* int32 state = 3; */
        if (message.state !== 0)
            writer.tag(3, WireType.Varint).int32(message.state);
        /* repeated im.VsProgrammeStateControlMessage.PlayBackInfo playBackInfo_list = 4; */
        for (let i = 0; i < message.playBackInfoList.length; i++)
            VsProgrammeStateControlMessage_PlayBackInfo.internalBinaryWrite(message.playBackInfoList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VsProgrammeStateControlMessage
 */
export const VsProgrammeStateControlMessage = new VsProgrammeStateControlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsProgrammeStateControlMessage_PlayBackInfo$Type extends MessageType<VsProgrammeStateControlMessage_PlayBackInfo> {
    constructor() {
        super("im.VsProgrammeStateControlMessage.PlayBackInfo", [
            { no: 1, name: "pID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "StartTime", kind: "scalar", jsonName: "StartTime", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VsProgrammeStateControlMessage_PlayBackInfo>): VsProgrammeStateControlMessage_PlayBackInfo {
        const message = { pID: "", startTime: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsProgrammeStateControlMessage_PlayBackInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsProgrammeStateControlMessage_PlayBackInfo): VsProgrammeStateControlMessage_PlayBackInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pID */ 1:
                    message.pID = reader.string();
                    break;
                case /* string StartTime = 2 [json_name = "StartTime"];*/ 2:
                    message.startTime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsProgrammeStateControlMessage_PlayBackInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pID = 1; */
        if (message.pID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pID);
        /* string StartTime = 2 [json_name = "StartTime"]; */
        if (message.startTime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VsProgrammeStateControlMessage.PlayBackInfo
 */
export const VsProgrammeStateControlMessage_PlayBackInfo = new VsProgrammeStateControlMessage_PlayBackInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PromptMessage$Type extends MessageType<PromptMessage> {
    constructor() {
        super("im.PromptMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user", kind: "message", T: () => User },
            { no: 4, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PromptMessage>): PromptMessage {
        const message = { content: "", duration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PromptMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PromptMessage): PromptMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* data.User user */ 3:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int32 duration */ 4:
                    message.duration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PromptMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* data.User user = 3; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 duration = 4; */
        if (message.duration !== 0)
            writer.tag(4, WireType.Varint).int32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PromptMessage
 */
export const PromptMessage = new PromptMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PropsBGImgMessage$Type extends MessageType<PropsBGImgMessage> {
    constructor() {
        super("im.PropsBGImgMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "bg", kind: "message", T: () => PropsBGData },
            { no: 3, name: "ReviewStatus", kind: "scalar", jsonName: "ReviewStatus", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "Prompts", kind: "scalar", jsonName: "Prompts", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PropsBGImgMessage>): PropsBGImgMessage {
        const message = { reviewStatus: 0, prompts: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropsBGImgMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropsBGImgMessage): PropsBGImgMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.PropsBGData bg */ 2:
                    message.bg = PropsBGData.internalBinaryRead(reader, reader.uint32(), options, message.bg);
                    break;
                case /* int32 ReviewStatus = 3 [json_name = "ReviewStatus"];*/ 3:
                    message.reviewStatus = reader.int32();
                    break;
                case /* string Prompts = 4 [json_name = "Prompts"];*/ 4:
                    message.prompts = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropsBGImgMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.PropsBGData bg = 2; */
        if (message.bg)
            PropsBGData.internalBinaryWrite(message.bg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 ReviewStatus = 3 [json_name = "ReviewStatus"]; */
        if (message.reviewStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.reviewStatus);
        /* string Prompts = 4 [json_name = "Prompts"]; */
        if (message.prompts !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.prompts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PropsBGImgMessage
 */
export const PropsBGImgMessage = new PropsBGImgMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullStreamUpdateMessage$Type extends MessageType<PullStreamUpdateMessage> {
    constructor() {
        super("im.PullStreamUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "push_stream_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "random_seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PullStreamUpdateMessage>): PullStreamUpdateMessage {
        const message = { pushStreamLevel: 0, randomSeconds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PullStreamUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullStreamUpdateMessage): PullStreamUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 push_stream_level */ 2:
                    message.pushStreamLevel = reader.int32();
                    break;
                case /* int32 random_seconds */ 3:
                    message.randomSeconds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullStreamUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 push_stream_level = 2; */
        if (message.pushStreamLevel !== 0)
            writer.tag(2, WireType.Varint).int32(message.pushStreamLevel);
        /* int32 random_seconds = 3; */
        if (message.randomSeconds !== 0)
            writer.tag(3, WireType.Varint).int32(message.randomSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PullStreamUpdateMessage
 */
export const PullStreamUpdateMessage = new PullStreamUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Word$Type extends MessageType<Word> {
    constructor() {
        super("im.Word", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Word>): Word {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Word>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Word): Word {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Word, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Word
 */
export const Word = new Word$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickComment$Type extends MessageType<QuickComment> {
    constructor() {
        super("im.QuickComment", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "words", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Word },
            { no: 3, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<QuickComment>): QuickComment {
        const message = { words: [], duration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuickComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickComment): QuickComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.Word words */ 2:
                    message.words.push(Word.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 duration */ 3:
                    message.duration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.Word words = 2; */
        for (let i = 0; i < message.words.length; i++)
            Word.internalBinaryWrite(message.words[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuickComment
 */
export const QuickComment = new QuickComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllQuizInfo$Type extends MessageType<AllQuizInfo> {
    constructor() {
        super("im.AllQuizInfo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "startTime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AllQuizInfo>): AllQuizInfo {
        const message = { id: 0n, title: "", startTime: 0n, duration: 0n, status: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllQuizInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllQuizInfo): AllQuizInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 startTime */ 3:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 4:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 5:
                    message.status = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllQuizInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 startTime = 3; */
        if (message.startTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startTime);
        /* int64 duration = 4; */
        if (message.duration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.duration);
        /* int64 status = 5; */
        if (message.status !== 0n)
            writer.tag(5, WireType.Varint).int64(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AllQuizInfo
 */
export const AllQuizInfo = new AllQuizInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizBeginMessage$Type extends MessageType<QuizBeginMessage> {
    constructor() {
        super("im.QuizBeginMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "quizID", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "quizInfos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AllQuizInfo },
            { no: 5, name: "errorCode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuizBeginMessage>): QuizBeginMessage {
        const message = { quizID: 0n, status: 0, quizInfos: [], errorCode: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizBeginMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizBeginMessage): QuizBeginMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 quizID */ 2:
                    message.quizID = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* repeated im.AllQuizInfo quizInfos */ 4:
                    message.quizInfos.push(AllQuizInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 errorCode */ 5:
                    message.errorCode = reader.int64().toBigInt();
                    break;
                case /* string extra */ 6:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizBeginMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 quizID = 2; */
        if (message.quizID !== 0n)
            writer.tag(2, WireType.Varint).int64(message.quizID);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* repeated im.AllQuizInfo quizInfos = 4; */
        for (let i = 0; i < message.quizInfos.length; i++)
            AllQuizInfo.internalBinaryWrite(message.quizInfos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 errorCode = 5; */
        if (message.errorCode !== 0n)
            writer.tag(5, WireType.Varint).int64(message.errorCode);
        /* string extra = 6; */
        if (message.extra !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizBeginMessage
 */
export const QuizBeginMessage = new QuizBeginMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizBetMessage$Type extends MessageType<QuizBetMessage> {
    constructor() {
        super("im.QuizBetMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "quiz_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QuizBetMessage>): QuizBetMessage {
        const message = { quizId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizBetMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizBetMessage): QuizBetMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 quiz_id */ 2:
                    message.quizId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizBetMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 quiz_id = 2; */
        if (message.quizId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.quizId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizBetMessage
 */
export const QuizBetMessage = new QuizBetMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizAnchorStatusMessage$Type extends MessageType<QuizAnchorStatusMessage> {
    constructor() {
        super("im.QuizAnchorStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AnchorHistoryItem }
        ]);
    }
    create(value?: PartialMessage<QuizAnchorStatusMessage>): QuizAnchorStatusMessage {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizAnchorStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizAnchorStatusMessage): QuizAnchorStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.AnchorHistoryItem items */ 2:
                    message.items.push(AnchorHistoryItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizAnchorStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.AnchorHistoryItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            AnchorHistoryItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizAnchorStatusMessage
 */
export const QuizAnchorStatusMessage = new QuizAnchorStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizAudienceStatusMessage$Type extends MessageType<QuizAudienceStatusMessage> {
    constructor() {
        super("im.QuizAudienceStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "quiz_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Quiz }
        ]);
    }
    create(value?: PartialMessage<QuizAudienceStatusMessage>): QuizAudienceStatusMessage {
        const message = { quizList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuizAudienceStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizAudienceStatusMessage): QuizAudienceStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.Quiz quiz_list */ 2:
                    message.quizList.push(Quiz.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizAudienceStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Quiz quiz_list = 2; */
        for (let i = 0; i < message.quizList.length; i++)
            Quiz.internalBinaryWrite(message.quizList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.QuizAudienceStatusMessage
 */
export const QuizAudienceStatusMessage = new QuizAudienceStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankListHourEnterMessage$Type extends MessageType<RankListHourEnterMessage> {
    constructor() {
        super("im.RankListHourEnterMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "hour_enter_info", kind: "message", T: () => RankEnterInfo }
        ]);
    }
    create(value?: PartialMessage<RankListHourEnterMessage>): RankListHourEnterMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RankListHourEnterMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RankListHourEnterMessage): RankListHourEnterMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.RankEnterInfo hour_enter_info */ 2:
                    message.hourEnterInfo = RankEnterInfo.internalBinaryRead(reader, reader.uint32(), options, message.hourEnterInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RankListHourEnterMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.RankEnterInfo hour_enter_info = 2; */
        if (message.hourEnterInfo)
            RankEnterInfo.internalBinaryWrite(message.hourEnterInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RankListHourEnterMessage
 */
export const RankListHourEnterMessage = new RankListHourEnterMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RanklistHourEntranceMessage$Type extends MessageType<RanklistHourEntranceMessage> {
    constructor() {
        super("im.RanklistHourEntranceMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "info", kind: "message", T: () => RanklistHourEntrance }
        ]);
    }
    create(value?: PartialMessage<RanklistHourEntranceMessage>): RanklistHourEntranceMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RanklistHourEntranceMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RanklistHourEntranceMessage): RanklistHourEntranceMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.RanklistHourEntrance info */ 2:
                    message.info = RanklistHourEntrance.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RanklistHourEntranceMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.RanklistHourEntrance info = 2; */
        if (message.info)
            RanklistHourEntrance.internalBinaryWrite(message.info, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RanklistHourEntranceMessage
 */
export const RanklistHourEntranceMessage = new RanklistHourEntranceMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RealTimePlayBackMessage$Type extends MessageType<RealTimePlayBackMessage> {
    constructor() {
        super("im.RealTimePlayBackMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "realtime_playback_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RealTimePlayBackMessage>): RealTimePlayBackMessage {
        const message = { realtimePlaybackEnabled: false, reason: "", messageText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RealTimePlayBackMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RealTimePlayBackMessage): RealTimePlayBackMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool realtime_playback_enabled */ 2:
                    message.realtimePlaybackEnabled = reader.bool();
                    break;
                case /* string reason */ 3:
                    message.reason = reader.string();
                    break;
                case /* string message_text */ 4:
                    message.messageText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RealTimePlayBackMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool realtime_playback_enabled = 2; */
        if (message.realtimePlaybackEnabled !== false)
            writer.tag(2, WireType.Varint).bool(message.realtimePlaybackEnabled);
        /* string reason = 3; */
        if (message.reason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        /* string message_text = 4; */
        if (message.messageText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RealTimePlayBackMessage
 */
export const RealTimePlayBackMessage = new RealTimePlayBackMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAppConfigMessage$Type extends MessageType<RoomAppConfigMessage> {
    constructor() {
        super("im.RoomAppConfigMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "anchor_face_config", kind: "message", T: () => AnchorFaceConfig }
        ]);
    }
    create(value?: PartialMessage<RoomAppConfigMessage>): RoomAppConfigMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAppConfigMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAppConfigMessage): RoomAppConfigMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.AnchorFaceConfig anchor_face_config */ 2:
                    message.anchorFaceConfig = AnchorFaceConfig.internalBinaryRead(reader, reader.uint32(), options, message.anchorFaceConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAppConfigMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.AnchorFaceConfig anchor_face_config = 2; */
        if (message.anchorFaceConfig)
            AnchorFaceConfig.internalBinaryWrite(message.anchorFaceConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomAppConfigMessage
 */
export const RoomAppConfigMessage = new RoomAppConfigMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorFaceConfig$Type extends MessageType<AnchorFaceConfig> {
    constructor() {
        super("im.AnchorFaceConfig", [
            { no: 1, name: "contour_enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "frequency", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorFaceConfig>): AnchorFaceConfig {
        const message = { contourEnable: false, frequency: 0n, userCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorFaceConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorFaceConfig): AnchorFaceConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool contour_enable */ 1:
                    message.contourEnable = reader.bool();
                    break;
                case /* int64 frequency */ 2:
                    message.frequency = reader.int64().toBigInt();
                    break;
                case /* int64 user_count */ 3:
                    message.userCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorFaceConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool contour_enable = 1; */
        if (message.contourEnable !== false)
            writer.tag(1, WireType.Varint).bool(message.contourEnable);
        /* int64 frequency = 2; */
        if (message.frequency !== 0n)
            writer.tag(2, WireType.Varint).int64(message.frequency);
        /* int64 user_count = 3; */
        if (message.userCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnchorFaceConfig
 */
export const AnchorFaceConfig = new AnchorFaceConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomAuthInterventionVerifyMessage$Type extends MessageType<RoomAuthInterventionVerifyMessage> {
    constructor() {
        super("im.RoomAuthInterventionVerifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "unableStyle", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "switch_status_tip_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "switch_status_anchor_tip_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomAuthInterventionVerifyMessage>): RoomAuthInterventionVerifyMessage {
        const message = { name: "", status: 0n, unableStyle: 0, content: "", switchStatusTipMsg: "", switchStatusAnchorTipMsg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomAuthInterventionVerifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomAuthInterventionVerifyMessage): RoomAuthInterventionVerifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* int32 unableStyle */ 4:
                    message.unableStyle = reader.int32();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* string switch_status_tip_msg */ 6:
                    message.switchStatusTipMsg = reader.string();
                    break;
                case /* string switch_status_anchor_tip_msg */ 7:
                    message.switchStatusAnchorTipMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomAuthInterventionVerifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* int32 unableStyle = 4; */
        if (message.unableStyle !== 0)
            writer.tag(4, WireType.Varint).int32(message.unableStyle);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* string switch_status_tip_msg = 6; */
        if (message.switchStatusTipMsg !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.switchStatusTipMsg);
        /* string switch_status_anchor_tip_msg = 7; */
        if (message.switchStatusAnchorTipMsg !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.switchStatusAnchorTipMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomAuthInterventionVerifyMessage
 */
export const RoomAuthInterventionVerifyMessage = new RoomAuthInterventionVerifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomBackgroundMessage$Type extends MessageType<RoomBackgroundMessage> {
    constructor() {
        super("im.RoomBackgroundMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_background", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<RoomBackgroundMessage>): RoomBackgroundMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomBackgroundMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomBackgroundMessage): RoomBackgroundMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Image room_background */ 2:
                    message.roomBackground = Image.internalBinaryRead(reader, reader.uint32(), options, message.roomBackground);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomBackgroundMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image room_background = 2; */
        if (message.roomBackground)
            Image.internalBinaryWrite(message.roomBackground, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomBackgroundMessage
 */
export const RoomBackgroundMessage = new RoomBackgroundMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelAccessMessage$Type extends MessageType<RoomChannelAccessMessage> {
    constructor() {
        super("im.RoomChannelAccessMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "inviter", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<RoomChannelAccessMessage>): RoomChannelAccessMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelAccessMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelAccessMessage): RoomChannelAccessMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.User inviter */ 3:
                    message.inviter = User.internalBinaryRead(reader, reader.uint32(), options, message.inviter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelAccessMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.User inviter = 3; */
        if (message.inviter)
            User.internalBinaryWrite(message.inviter, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelAccessMessage
 */
export const RoomChannelAccessMessage = new RoomChannelAccessMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelAssetMessage$Type extends MessageType<RoomChannelAssetMessage> {
    constructor() {
        super("im.RoomChannelAssetMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "asset_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelAssetMessage>): RoomChannelAssetMessage {
        const message = { assetId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelAssetMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelAssetMessage): RoomChannelAssetMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 asset_id */ 2:
                    message.assetId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelAssetMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 asset_id = 2; */
        if (message.assetId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.assetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelAssetMessage
 */
export const RoomChannelAssetMessage = new RoomChannelAssetMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelChatMessage$Type extends MessageType<RoomChannelChatMessage> {
    constructor() {
        super("im.RoomChannelChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rtf_content", kind: "message", T: () => Text },
            { no: 5, name: "show_identity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "mention", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "rtf_content_v2", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<RoomChannelChatMessage>): RoomChannelChatMessage {
        const message = { content: "", showIdentity: 0, mention: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelChatMessage): RoomChannelChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* data.Text rtf_content */ 4:
                    message.rtfContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContent);
                    break;
                case /* int32 show_identity */ 5:
                    message.showIdentity = reader.int32();
                    break;
                case /* bool mention */ 6:
                    message.mention = reader.bool();
                    break;
                case /* data.Text rtf_content_v2 */ 7:
                    message.rtfContentV2 = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContentV2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* data.Text rtf_content = 4; */
        if (message.rtfContent)
            Text.internalBinaryWrite(message.rtfContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 show_identity = 5; */
        if (message.showIdentity !== 0)
            writer.tag(5, WireType.Varint).int32(message.showIdentity);
        /* bool mention = 6; */
        if (message.mention !== false)
            writer.tag(6, WireType.Varint).bool(message.mention);
        /* data.Text rtf_content_v2 = 7; */
        if (message.rtfContentV2)
            Text.internalBinaryWrite(message.rtfContentV2, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelChatMessage
 */
export const RoomChannelChatMessage = new RoomChannelChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelEmojiChatMessage$Type extends MessageType<RoomChannelEmojiChatMessage> {
    constructor() {
        super("im.RoomChannelEmojiChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "emoji_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "emoji_content", kind: "message", T: () => Text },
            { no: 5, name: "default_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "show_identity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelEmojiChatMessage>): RoomChannelEmojiChatMessage {
        const message = { emojiId: 0n, defaultContent: "", showIdentity: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelEmojiChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelEmojiChatMessage): RoomChannelEmojiChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 emoji_id */ 3:
                    message.emojiId = reader.int64().toBigInt();
                    break;
                case /* data.Text emoji_content */ 4:
                    message.emojiContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.emojiContent);
                    break;
                case /* string default_content */ 5:
                    message.defaultContent = reader.string();
                    break;
                case /* int32 show_identity */ 6:
                    message.showIdentity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelEmojiChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 emoji_id = 3; */
        if (message.emojiId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.emojiId);
        /* data.Text emoji_content = 4; */
        if (message.emojiContent)
            Text.internalBinaryWrite(message.emojiContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string default_content = 5; */
        if (message.defaultContent !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.defaultContent);
        /* int32 show_identity = 6; */
        if (message.showIdentity !== 0)
            writer.tag(6, WireType.Varint).int32(message.showIdentity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelEmojiChatMessage
 */
export const RoomChannelEmojiChatMessage = new RoomChannelEmojiChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelInteractiveEmojiChatMessage$Type extends MessageType<RoomChannelInteractiveEmojiChatMessage> {
    constructor() {
        super("im.RoomChannelInteractiveEmojiChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "interactive_emoji_display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "default_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "show_identity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelInteractiveEmojiChatMessage>): RoomChannelInteractiveEmojiChatMessage {
        const message = { interactiveEmojiDisplayName: "", defaultContent: "", showIdentity: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelInteractiveEmojiChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelInteractiveEmojiChatMessage): RoomChannelInteractiveEmojiChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string interactive_emoji_display_name */ 3:
                    message.interactiveEmojiDisplayName = reader.string();
                    break;
                case /* string default_content */ 4:
                    message.defaultContent = reader.string();
                    break;
                case /* int32 show_identity */ 5:
                    message.showIdentity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelInteractiveEmojiChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string interactive_emoji_display_name = 3; */
        if (message.interactiveEmojiDisplayName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.interactiveEmojiDisplayName);
        /* string default_content = 4; */
        if (message.defaultContent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.defaultContent);
        /* int32 show_identity = 5; */
        if (message.showIdentity !== 0)
            writer.tag(5, WireType.Varint).int32(message.showIdentity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelInteractiveEmojiChatMessage
 */
export const RoomChannelInteractiveEmojiChatMessage = new RoomChannelInteractiveEmojiChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelDisbandMessage$Type extends MessageType<RoomChannelDisbandMessage> {
    constructor() {
        super("im.RoomChannelDisbandMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelDisbandMessage>): RoomChannelDisbandMessage {
        const message = { toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelDisbandMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelDisbandMessage): RoomChannelDisbandMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelDisbandMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelDisbandMessage
 */
export const RoomChannelDisbandMessage = new RoomChannelDisbandMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelGiftMessage$Type extends MessageType<RoomChannelGiftMessage> {
    constructor() {
        super("im.RoomChannelGiftMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "rtf_content", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<RoomChannelGiftMessage>): RoomChannelGiftMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelGiftMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelGiftMessage): RoomChannelGiftMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* data.Text rtf_content */ 3:
                    message.rtfContent = Text.internalBinaryRead(reader, reader.uint32(), options, message.rtfContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelGiftMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text rtf_content = 3; */
        if (message.rtfContent)
            Text.internalBinaryWrite(message.rtfContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelGiftMessage
 */
export const RoomChannelGiftMessage = new RoomChannelGiftMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelKickOutMessage$Type extends MessageType<RoomChannelKickOutMessage> {
    constructor() {
        super("im.RoomChannelKickOutMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "online_channel_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomChannelInfo }
        ]);
    }
    create(value?: PartialMessage<RoomChannelKickOutMessage>): RoomChannelKickOutMessage {
        const message = { toast: "", onlineChannelList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelKickOutMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelKickOutMessage): RoomChannelKickOutMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                case /* repeated data.RoomChannelInfo online_channel_list */ 3:
                    message.onlineChannelList.push(RoomChannelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelKickOutMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        /* repeated data.RoomChannelInfo online_channel_list = 3; */
        for (let i = 0; i < message.onlineChannelList.length; i++)
            RoomChannelInfo.internalBinaryWrite(message.onlineChannelList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelKickOutMessage
 */
export const RoomChannelKickOutMessage = new RoomChannelKickOutMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyRoomChannelMessage$Type extends MessageType<ReplyRoomChannelMessage> {
    constructor() {
        super("im.ReplyRoomChannelMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "permit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "channel_info", kind: "message", T: () => RoomChannelInfo },
            { no: 4, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReplyRoomChannelMessage>): ReplyRoomChannelMessage {
        const message = { permit: false, toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReplyRoomChannelMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplyRoomChannelMessage): ReplyRoomChannelMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool permit */ 2:
                    message.permit = reader.bool();
                    break;
                case /* data.RoomChannelInfo channel_info */ 3:
                    message.channelInfo = RoomChannelInfo.internalBinaryRead(reader, reader.uint32(), options, message.channelInfo);
                    break;
                case /* string toast */ 4:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplyRoomChannelMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool permit = 2; */
        if (message.permit !== false)
            writer.tag(2, WireType.Varint).bool(message.permit);
        /* data.RoomChannelInfo channel_info = 3; */
        if (message.channelInfo)
            RoomChannelInfo.internalBinaryWrite(message.channelInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 4; */
        if (message.toast !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ReplyRoomChannelMessage
 */
export const ReplyRoomChannelMessage = new ReplyRoomChannelMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelSaveGroupMessage$Type extends MessageType<RoomChannelSaveGroupMessage> {
    constructor() {
        super("im.RoomChannelSaveGroupMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "con_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelSaveGroupMessage>): RoomChannelSaveGroupMessage {
        const message = { conId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelSaveGroupMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelSaveGroupMessage): RoomChannelSaveGroupMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string con_id */ 2:
                    message.conId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelSaveGroupMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string con_id = 2; */
        if (message.conId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.conId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelSaveGroupMessage
 */
export const RoomChannelSaveGroupMessage = new RoomChannelSaveGroupMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelStateMessage$Type extends MessageType<RoomChannelStateMessage> {
    constructor() {
        super("im.RoomChannelStateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "member_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "top_user_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 4, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "need_approval_user", kind: "message", T: () => User },
            { no: 6, name: "owner", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<RoomChannelStateMessage>): RoomChannelStateMessage {
        const message = { memberCount: 0n, topUserList: [], channelName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelStateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelStateMessage): RoomChannelStateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 member_count */ 2:
                    message.memberCount = reader.int64().toBigInt();
                    break;
                case /* repeated data.User top_user_list */ 3:
                    message.topUserList.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string channel_name */ 4:
                    message.channelName = reader.string();
                    break;
                case /* data.User need_approval_user */ 5:
                    message.needApprovalUser = User.internalBinaryRead(reader, reader.uint32(), options, message.needApprovalUser);
                    break;
                case /* data.User owner */ 6:
                    message.owner = User.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelStateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 member_count = 2; */
        if (message.memberCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.memberCount);
        /* repeated data.User top_user_list = 3; */
        for (let i = 0; i < message.topUserList.length; i++)
            User.internalBinaryWrite(message.topUserList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string channel_name = 4; */
        if (message.channelName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.channelName);
        /* data.User need_approval_user = 5; */
        if (message.needApprovalUser)
            User.internalBinaryWrite(message.needApprovalUser, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.User owner = 6; */
        if (message.owner)
            User.internalBinaryWrite(message.owner, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelStateMessage
 */
export const RoomChannelStateMessage = new RoomChannelStateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelSystemMessage$Type extends MessageType<RoomChannelSystemMessage> {
    constructor() {
        super("im.RoomChannelSystemMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<RoomChannelSystemMessage>): RoomChannelSystemMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelSystemMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelSystemMessage): RoomChannelSystemMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelSystemMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelSystemMessage
 */
export const RoomChannelSystemMessage = new RoomChannelSystemMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelRoleMessage$Type extends MessageType<RoomChannelRoleMessage> {
    constructor() {
        super("im.RoomChannelRoleMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "new_role", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelRoleMessage>): RoomChannelRoleMessage {
        const message = { newRole: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelRoleMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelRoleMessage): RoomChannelRoleMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 new_role */ 2:
                    message.newRole = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelRoleMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 new_role = 2; */
        if (message.newRole !== 0)
            writer.tag(2, WireType.Varint).int32(message.newRole);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelRoleMessage
 */
export const RoomChannelRoleMessage = new RoomChannelRoleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomConfigMessage$Type extends MessageType<RoomConfigMessage> {
    constructor() {
        super("im.RoomConfigMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "config_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "config_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomConfigMessage>): RoomConfigMessage {
        const message = { configInfo: "", configType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomConfigMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomConfigMessage): RoomConfigMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string config_info */ 2:
                    message.configInfo = reader.string();
                    break;
                case /* int64 config_type */ 3:
                    message.configType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomConfigMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string config_info = 2; */
        if (message.configInfo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.configInfo);
        /* int64 config_type = 3; */
        if (message.configType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.configType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomConfigMessage
 */
export const RoomConfigMessage = new RoomConfigMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomDataSyncMessage$Type extends MessageType<RoomDataSyncMessage> {
    constructor() {
        super("im.RoomDataSyncMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "roomID", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "syncKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "bizLogID", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomDataSyncMessage>): RoomDataSyncMessage {
        const message = { roomID: 0n, syncKey: "", version: 0n, payload: new Uint8Array(0), bizLogID: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomDataSyncMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomDataSyncMessage): RoomDataSyncMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 roomID */ 2:
                    message.roomID = reader.int64().toBigInt();
                    break;
                case /* string syncKey */ 3:
                    message.syncKey = reader.string();
                    break;
                case /* int64 version */ 4:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* bytes payload */ 5:
                    message.payload = reader.bytes();
                    break;
                case /* string bizLogID */ 6:
                    message.bizLogID = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomDataSyncMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 roomID = 2; */
        if (message.roomID !== 0n)
            writer.tag(2, WireType.Varint).int64(message.roomID);
        /* string syncKey = 3; */
        if (message.syncKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.syncKey);
        /* int64 version = 4; */
        if (message.version !== 0n)
            writer.tag(4, WireType.Varint).int64(message.version);
        /* bytes payload = 5; */
        if (message.payload.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.payload);
        /* string bizLogID = 6; */
        if (message.bizLogID !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.bizLogID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomDataSyncMessage
 */
export const RoomDataSyncMessage = new RoomDataSyncMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomIntroMessage$Type extends MessageType<RoomIntroMessage> {
    constructor() {
        super("im.RoomIntroMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "label", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "intro_video_item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "intro_video_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "selected_labels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomIntroLabel },
            { no: 9, name: "intro_labels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomIntroLabel },
            { no: 10, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<RoomIntroMessage>): RoomIntroMessage {
        const message = { style: 0n, intro: "", label: [], introVideoItemId: 0n, introVideoTitle: "", selectedLabels: [], introLabels: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomIntroMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomIntroMessage): RoomIntroMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 style */ 3:
                    message.style = reader.int64().toBigInt();
                    break;
                case /* string intro */ 4:
                    message.intro = reader.string();
                    break;
                case /* repeated string label */ 5:
                    message.label.push(reader.string());
                    break;
                case /* int64 intro_video_item_id */ 6:
                    message.introVideoItemId = reader.int64().toBigInt();
                    break;
                case /* string intro_video_title */ 7:
                    message.introVideoTitle = reader.string();
                    break;
                case /* repeated data.RoomIntroLabel selected_labels */ 8:
                    message.selectedLabels.push(RoomIntroLabel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.RoomIntroLabel intro_labels */ 9:
                    message.introLabels.push(RoomIntroLabel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* im.PublicAreaCommon public_area_common */ 10:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomIntroMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 style = 3; */
        if (message.style !== 0n)
            writer.tag(3, WireType.Varint).int64(message.style);
        /* string intro = 4; */
        if (message.intro !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.intro);
        /* repeated string label = 5; */
        for (let i = 0; i < message.label.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.label[i]);
        /* int64 intro_video_item_id = 6; */
        if (message.introVideoItemId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.introVideoItemId);
        /* string intro_video_title = 7; */
        if (message.introVideoTitle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.introVideoTitle);
        /* repeated data.RoomIntroLabel selected_labels = 8; */
        for (let i = 0; i < message.selectedLabels.length; i++)
            RoomIntroLabel.internalBinaryWrite(message.selectedLabels[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.RoomIntroLabel intro_labels = 9; */
        for (let i = 0; i < message.introLabels.length; i++)
            RoomIntroLabel.internalBinaryWrite(message.introLabels[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 10; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomIntroMessage
 */
export const RoomIntroMessage = new RoomIntroMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomRankMessage$Type extends MessageType<RoomRankMessage> {
    constructor() {
        super("im.RoomRankMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "ranks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoomRankMessage_RoomRank }
        ]);
    }
    create(value?: PartialMessage<RoomRankMessage>): RoomRankMessage {
        const message = { ranks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomRankMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomRankMessage): RoomRankMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.RoomRankMessage.RoomRank ranks */ 2:
                    message.ranks.push(RoomRankMessage_RoomRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomRankMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.RoomRankMessage.RoomRank ranks = 2; */
        for (let i = 0; i < message.ranks.length; i++)
            RoomRankMessage_RoomRank.internalBinaryWrite(message.ranks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomRankMessage
 */
export const RoomRankMessage = new RoomRankMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomRankMessage_RoomRank$Type extends MessageType<RoomRankMessage_RoomRank> {
    constructor() {
        super("im.RoomRankMessage.RoomRank", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "score_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "profile_hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RoomRankMessage_RoomRank>): RoomRankMessage_RoomRank {
        const message = { scoreStr: "", profileHidden: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomRankMessage_RoomRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomRankMessage_RoomRank): RoomRankMessage_RoomRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string score_str */ 2:
                    message.scoreStr = reader.string();
                    break;
                case /* bool profile_hidden */ 3:
                    message.profileHidden = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomRankMessage_RoomRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string score_str = 2; */
        if (message.scoreStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scoreStr);
        /* bool profile_hidden = 3; */
        if (message.profileHidden !== false)
            writer.tag(3, WireType.Varint).bool(message.profileHidden);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomRankMessage.RoomRank
 */
export const RoomRankMessage_RoomRank = new RoomRankMessage_RoomRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomStatsMessage$Type extends MessageType<RoomStatsMessage> {
    constructor() {
        super("im.RoomStatsMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "display_short", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "display_middle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "display_long", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "display_value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "display_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "incremental", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "is_hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "display_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomStatsMessage>): RoomStatsMessage {
        const message = { displayShort: "", displayMiddle: "", displayLong: "", displayValue: 0n, displayVersion: 0n, incremental: false, isHidden: false, total: 0n, displayType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomStatsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomStatsMessage): RoomStatsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string display_short */ 2:
                    message.displayShort = reader.string();
                    break;
                case /* string display_middle */ 3:
                    message.displayMiddle = reader.string();
                    break;
                case /* string display_long */ 4:
                    message.displayLong = reader.string();
                    break;
                case /* int64 display_value */ 5:
                    message.displayValue = reader.int64().toBigInt();
                    break;
                case /* int64 display_version */ 6:
                    message.displayVersion = reader.int64().toBigInt();
                    break;
                case /* bool incremental */ 7:
                    message.incremental = reader.bool();
                    break;
                case /* bool is_hidden */ 8:
                    message.isHidden = reader.bool();
                    break;
                case /* int64 total */ 9:
                    message.total = reader.int64().toBigInt();
                    break;
                case /* int64 display_type */ 10:
                    message.displayType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomStatsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string display_short = 2; */
        if (message.displayShort !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayShort);
        /* string display_middle = 3; */
        if (message.displayMiddle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.displayMiddle);
        /* string display_long = 4; */
        if (message.displayLong !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.displayLong);
        /* int64 display_value = 5; */
        if (message.displayValue !== 0n)
            writer.tag(5, WireType.Varint).int64(message.displayValue);
        /* int64 display_version = 6; */
        if (message.displayVersion !== 0n)
            writer.tag(6, WireType.Varint).int64(message.displayVersion);
        /* bool incremental = 7; */
        if (message.incremental !== false)
            writer.tag(7, WireType.Varint).bool(message.incremental);
        /* bool is_hidden = 8; */
        if (message.isHidden !== false)
            writer.tag(8, WireType.Varint).bool(message.isHidden);
        /* int64 total = 9; */
        if (message.total !== 0n)
            writer.tag(9, WireType.Varint).int64(message.total);
        /* int64 display_type = 10; */
        if (message.displayType !== 0n)
            writer.tag(10, WireType.Varint).int64(message.displayType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomStatsMessage
 */
export const RoomStatsMessage = new RoomStatsMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomTicketMessage$Type extends MessageType<RoomTicketMessage> {
    constructor() {
        super("im.RoomTicketMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "last_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "ticket_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "ticket_explanation_card_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ticket_panel_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ticket_panel_6_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "ticket_panel_9_jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "owner_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomTicketMessage>): RoomTicketMessage {
        const message = { actionType: 0, lastDuration: 0, ticketId: 0n, ticketExplanationCardJumpUrl: "", ticketPanelJumpUrl: "", ticketPanel6JumpUrl: "", ticketPanel9JumpUrl: "", ownerId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomTicketMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomTicketMessage): RoomTicketMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 action_type */ 2:
                    message.actionType = reader.int32();
                    break;
                case /* int32 last_duration */ 3:
                    message.lastDuration = reader.int32();
                    break;
                case /* int64 ticket_id */ 4:
                    message.ticketId = reader.int64().toBigInt();
                    break;
                case /* string ticket_explanation_card_jump_url */ 5:
                    message.ticketExplanationCardJumpUrl = reader.string();
                    break;
                case /* string ticket_panel_jump_url */ 6:
                    message.ticketPanelJumpUrl = reader.string();
                    break;
                case /* string ticket_panel_6_jump_url */ 7:
                    message.ticketPanel6JumpUrl = reader.string();
                    break;
                case /* string ticket_panel_9_jump_url */ 8:
                    message.ticketPanel9JumpUrl = reader.string();
                    break;
                case /* int64 owner_id */ 9:
                    message.ownerId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomTicketMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 action_type = 2; */
        if (message.actionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.actionType);
        /* int32 last_duration = 3; */
        if (message.lastDuration !== 0)
            writer.tag(3, WireType.Varint).int32(message.lastDuration);
        /* int64 ticket_id = 4; */
        if (message.ticketId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.ticketId);
        /* string ticket_explanation_card_jump_url = 5; */
        if (message.ticketExplanationCardJumpUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.ticketExplanationCardJumpUrl);
        /* string ticket_panel_jump_url = 6; */
        if (message.ticketPanelJumpUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.ticketPanelJumpUrl);
        /* string ticket_panel_6_jump_url = 7; */
        if (message.ticketPanel6JumpUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ticketPanel6JumpUrl);
        /* string ticket_panel_9_jump_url = 8; */
        if (message.ticketPanel9JumpUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.ticketPanel9JumpUrl);
        /* int64 owner_id = 9; */
        if (message.ownerId !== 0n)
            writer.tag(9, WireType.Varint).int64(message.ownerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomTicketMessage
 */
export const RoomTicketMessage = new RoomTicketMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomTopMessage$Type extends MessageType<RoomTopMessage> {
    constructor() {
        super("im.RoomTopMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action_icon", kind: "message", T: () => Image },
            { no: 3, name: "background", kind: "message", T: () => Background },
            { no: 4, name: "fold_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "first_title", kind: "message", T: () => Text },
            { no: 7, name: "second_title", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<RoomTopMessage>): RoomTopMessage {
        const message = { foldDuration: 0n, displayDuration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomTopMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomTopMessage): RoomTopMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Image action_icon */ 2:
                    message.actionIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.actionIcon);
                    break;
                case /* im.Background background */ 3:
                    message.background = Background.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int64 fold_duration */ 4:
                    message.foldDuration = reader.int64().toBigInt();
                    break;
                case /* int64 display_duration */ 5:
                    message.displayDuration = reader.int64().toBigInt();
                    break;
                case /* data.Text first_title */ 6:
                    message.firstTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.firstTitle);
                    break;
                case /* data.Text second_title */ 7:
                    message.secondTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.secondTitle);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomTopMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image action_icon = 2; */
        if (message.actionIcon)
            Image.internalBinaryWrite(message.actionIcon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.Background background = 3; */
        if (message.background)
            Background.internalBinaryWrite(message.background, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 fold_duration = 4; */
        if (message.foldDuration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.foldDuration);
        /* int64 display_duration = 5; */
        if (message.displayDuration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.displayDuration);
        /* data.Text first_title = 6; */
        if (message.firstTitle)
            Text.internalBinaryWrite(message.firstTitle, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* data.Text second_title = 7; */
        if (message.secondTitle)
            Text.internalBinaryWrite(message.secondTitle, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomTopMessage
 */
export const RoomTopMessage = new RoomTopMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Background$Type extends MessageType<Background> {
    constructor() {
        super("im.Background", [
            { no: 1, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Background>): Background {
        const message = { backgroundColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Background>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Background): Background {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string background_color */ 1:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Background, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string background_color = 1; */
        if (message.backgroundColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Background
 */
export const Background = new Background$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomUnionLiveMessage$Type extends MessageType<RoomUnionLiveMessage> {
    constructor() {
        super("im.RoomUnionLiveMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "union_live_info", kind: "message", T: () => UnionLiveInfo }
        ]);
    }
    create(value?: PartialMessage<RoomUnionLiveMessage>): RoomUnionLiveMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomUnionLiveMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomUnionLiveMessage): RoomUnionLiveMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.UnionLiveInfo union_live_info */ 2:
                    message.unionLiveInfo = UnionLiveInfo.internalBinaryRead(reader, reader.uint32(), options, message.unionLiveInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomUnionLiveMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.UnionLiveInfo union_live_info = 2; */
        if (message.unionLiveInfo)
            UnionLiveInfo.internalBinaryWrite(message.unionLiveInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomUnionLiveMessage
 */
export const RoomUnionLiveMessage = new RoomUnionLiveMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SharePosterMessage$Type extends MessageType<SharePosterMessage> {
    constructor() {
        super("im.SharePosterMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => SharePosterMessage_PosterData }
        ]);
    }
    create(value?: PartialMessage<SharePosterMessage>): SharePosterMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SharePosterMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SharePosterMessage): SharePosterMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.SharePosterMessage.PosterData data */ 2:
                    message.data = SharePosterMessage_PosterData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SharePosterMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.SharePosterMessage.PosterData data = 2; */
        if (message.data)
            SharePosterMessage_PosterData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SharePosterMessage
 */
export const SharePosterMessage = new SharePosterMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SharePosterMessage_PosterData$Type extends MessageType<SharePosterMessage_PosterData> {
    constructor() {
        super("im.SharePosterMessage.PosterData", [
            { no: 1, name: "poster", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image },
            { no: 2, name: "decorator", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Image }
        ]);
    }
    create(value?: PartialMessage<SharePosterMessage_PosterData>): SharePosterMessage_PosterData {
        const message = { poster: [], decorator: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SharePosterMessage_PosterData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SharePosterMessage_PosterData): SharePosterMessage_PosterData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.Image poster */ 1:
                    message.poster.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.Image decorator */ 2:
                    message.decorator.push(Image.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SharePosterMessage_PosterData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.Image poster = 1; */
        for (let i = 0; i < message.poster.length; i++)
            Image.internalBinaryWrite(message.poster[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.Image decorator = 2; */
        for (let i = 0; i < message.decorator.length; i++)
            Image.internalBinaryWrite(message.decorator[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SharePosterMessage.PosterData
 */
export const SharePosterMessage_PosterData = new SharePosterMessage_PosterData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortTouchAreaMessage$Type extends MessageType<ShortTouchAreaMessage> {
    constructor() {
        super("im.ShortTouchAreaMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "short_touch_area_data", kind: "message", T: () => ShortTouchArea }
        ]);
    }
    create(value?: PartialMessage<ShortTouchAreaMessage>): ShortTouchAreaMessage {
        const message = { messageType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortTouchAreaMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortTouchAreaMessage): ShortTouchAreaMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 message_type */ 2:
                    message.messageType = reader.int32();
                    break;
                case /* data.ShortTouchArea short_touch_area_data */ 3:
                    message.shortTouchAreaData = ShortTouchArea.internalBinaryRead(reader, reader.uint32(), options, message.shortTouchAreaData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortTouchAreaMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 message_type = 2; */
        if (message.messageType !== 0)
            writer.tag(2, WireType.Varint).int32(message.messageType);
        /* data.ShortTouchArea short_touch_area_data = 3; */
        if (message.shortTouchAreaData)
            ShortTouchArea.internalBinaryWrite(message.shortTouchAreaData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShortTouchAreaMessage
 */
export const ShortTouchAreaMessage = new ShortTouchAreaMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowChatMessage$Type extends MessageType<ShowChatMessage> {
    constructor() {
        super("im.ShowChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "episode_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "agree_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "visible_to_sender", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "priority_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "effect_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "user", kind: "message", T: () => User },
            { no: 30, name: "public_area_common", kind: "message", T: () => PublicAreaCommon },
            { no: 31, name: "landscape_area_common", kind: "message", T: () => LandscapeAreaCommon },
            { no: 40, name: "background_image", kind: "message", T: () => Image },
            { no: 41, name: "font_color_value", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 42, name: "gift_image", kind: "message", T: () => Image },
            { no: 43, name: "official_comment_config", kind: "message", T: () => OfficialCommentConfig },
            { no: 44, name: "comment_role", kind: "message", T: () => CommentRoleConfig },
            { no: 45, name: "medal", kind: "message", T: () => CommentMedal },
            { no: 46, name: "vs_message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShowChatMessage>): ShowChatMessage {
        const message = { episodeId: 0n, content: "", agreeMsgId: 0n, visibleToSender: false, priorityLevel: 0, effectType: 0, fontColorValue: [], vsMessageType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowChatMessage): ShowChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 episode_id */ 2:
                    message.episodeId = reader.int64().toBigInt();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 agree_msg_id */ 4:
                    message.agreeMsgId = reader.int64().toBigInt();
                    break;
                case /* bool visible_to_sender */ 5:
                    message.visibleToSender = reader.bool();
                    break;
                case /* int32 priority_level */ 6:
                    message.priorityLevel = reader.int32();
                    break;
                case /* int32 effect_type */ 7:
                    message.effectType = reader.int32();
                    break;
                case /* data.User user */ 20:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* im.PublicAreaCommon public_area_common */ 30:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                case /* im.LandscapeAreaCommon landscape_area_common */ 31:
                    message.landscapeAreaCommon = LandscapeAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.landscapeAreaCommon);
                    break;
                case /* data.Image background_image */ 40:
                    message.backgroundImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.backgroundImage);
                    break;
                case /* repeated string font_color_value */ 41:
                    message.fontColorValue.push(reader.string());
                    break;
                case /* data.Image gift_image */ 42:
                    message.giftImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.giftImage);
                    break;
                case /* im.OfficialCommentConfig official_comment_config */ 43:
                    message.officialCommentConfig = OfficialCommentConfig.internalBinaryRead(reader, reader.uint32(), options, message.officialCommentConfig);
                    break;
                case /* im.CommentRoleConfig comment_role */ 44:
                    message.commentRole = CommentRoleConfig.internalBinaryRead(reader, reader.uint32(), options, message.commentRole);
                    break;
                case /* data.CommentMedal medal */ 45:
                    message.medal = CommentMedal.internalBinaryRead(reader, reader.uint32(), options, message.medal);
                    break;
                case /* int32 vs_message_type */ 46:
                    message.vsMessageType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 episode_id = 2; */
        if (message.episodeId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.episodeId);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 agree_msg_id = 4; */
        if (message.agreeMsgId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.agreeMsgId);
        /* bool visible_to_sender = 5; */
        if (message.visibleToSender !== false)
            writer.tag(5, WireType.Varint).bool(message.visibleToSender);
        /* int32 priority_level = 6; */
        if (message.priorityLevel !== 0)
            writer.tag(6, WireType.Varint).int32(message.priorityLevel);
        /* int32 effect_type = 7; */
        if (message.effectType !== 0)
            writer.tag(7, WireType.Varint).int32(message.effectType);
        /* data.User user = 20; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* im.PublicAreaCommon public_area_common = 30; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* im.LandscapeAreaCommon landscape_area_common = 31; */
        if (message.landscapeAreaCommon)
            LandscapeAreaCommon.internalBinaryWrite(message.landscapeAreaCommon, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* data.Image background_image = 40; */
        if (message.backgroundImage)
            Image.internalBinaryWrite(message.backgroundImage, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* repeated string font_color_value = 41; */
        for (let i = 0; i < message.fontColorValue.length; i++)
            writer.tag(41, WireType.LengthDelimited).string(message.fontColorValue[i]);
        /* data.Image gift_image = 42; */
        if (message.giftImage)
            Image.internalBinaryWrite(message.giftImage, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* im.OfficialCommentConfig official_comment_config = 43; */
        if (message.officialCommentConfig)
            OfficialCommentConfig.internalBinaryWrite(message.officialCommentConfig, writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* im.CommentRoleConfig comment_role = 44; */
        if (message.commentRole)
            CommentRoleConfig.internalBinaryWrite(message.commentRole, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* data.CommentMedal medal = 45; */
        if (message.medal)
            CommentMedal.internalBinaryWrite(message.medal, writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* int32 vs_message_type = 46; */
        if (message.vsMessageType !== 0)
            writer.tag(46, WireType.Varint).int32(message.vsMessageType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShowChatMessage
 */
export const ShowChatMessage = new ShowChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialCommentConfig$Type extends MessageType<OfficialCommentConfig> {
    constructor() {
        super("im.OfficialCommentConfig", [
            { no: 1, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OfficialCommentConfig>): OfficialCommentConfig {
        const message = { backgroundColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfficialCommentConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfficialCommentConfig): OfficialCommentConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string background_color */ 1:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfficialCommentConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string background_color = 1; */
        if (message.backgroundColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OfficialCommentConfig
 */
export const OfficialCommentConfig = new OfficialCommentConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentRoleConfig$Type extends MessageType<CommentRoleConfig> {
    constructor() {
        super("im.CommentRoleConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<CommentRoleConfig>): CommentRoleConfig {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentRoleConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentRoleConfig): CommentRoleConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* data.Image avatar */ 2:
                    message.avatar = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentRoleConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* data.Image avatar = 2; */
        if (message.avatar)
            Image.internalBinaryWrite(message.avatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommentRoleConfig
 */
export const CommentRoleConfig = new CommentRoleConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowDouPlusNotifyMessage$Type extends MessageType<ShowDouPlusNotifyMessage> {
    constructor() {
        super("im.ShowDouPlusNotifyMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "event_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "order_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "order_wish_word", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "enter_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ShowDouPlusNotifyMessage>): ShowDouPlusNotifyMessage {
        const message = { eventType: 0, orderId: 0n, orderWishWord: "", enterCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowDouPlusNotifyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowDouPlusNotifyMessage): ShowDouPlusNotifyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 event_type */ 2:
                    message.eventType = reader.int32();
                    break;
                case /* int64 order_id */ 10:
                    message.orderId = reader.int64().toBigInt();
                    break;
                case /* string order_wish_word */ 11:
                    message.orderWishWord = reader.string();
                    break;
                case /* int64 enter_count */ 30:
                    message.enterCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowDouPlusNotifyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 event_type = 2; */
        if (message.eventType !== 0)
            writer.tag(2, WireType.Varint).int32(message.eventType);
        /* int64 order_id = 10; */
        if (message.orderId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.orderId);
        /* string order_wish_word = 11; */
        if (message.orderWishWord !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.orderWishWord);
        /* int64 enter_count = 30; */
        if (message.enterCount !== 0n)
            writer.tag(30, WireType.Varint).int64(message.enterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShowDouPlusNotifyMessage
 */
export const ShowDouPlusNotifyMessage = new ShowDouPlusNotifyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowEffectMessage$Type extends MessageType<ShowEffectMessage> {
    constructor() {
        super("im.ShowEffectMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "flash_operating_place", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ShowEffectMessage>): ShowEffectMessage {
        const message = { flashOperatingPlace: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowEffectMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowEffectMessage): ShowEffectMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool flash_operating_place */ 2:
                    message.flashOperatingPlace = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowEffectMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool flash_operating_place = 2; */
        if (message.flashOperatingPlace !== false)
            writer.tag(2, WireType.Varint).bool(message.flashOperatingPlace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShowEffectMessage
 */
export const ShowEffectMessage = new ShowEffectMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowLinkedLiveRoomsMessage$Type extends MessageType<ShowLinkedLiveRoomsMessage> {
    constructor() {
        super("im.ShowLinkedLiveRoomsMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "episode_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "entry_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "linked_live_rooms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo }
        ]);
    }
    create(value?: PartialMessage<ShowLinkedLiveRoomsMessage>): ShowLinkedLiveRoomsMessage {
        const message = { episodeId: 0n, entryTitle: "", linkedLiveRooms: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowLinkedLiveRoomsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowLinkedLiveRoomsMessage): ShowLinkedLiveRoomsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 episode_id */ 2:
                    message.episodeId = reader.int64().toBigInt();
                    break;
                case /* string entry_title */ 3:
                    message.entryTitle = reader.string();
                    break;
                case /* repeated im.ShowLinkedLiveRoomsMessage.ShowLinkedLiveRoomInfo linked_live_rooms */ 4:
                    message.linkedLiveRooms.push(ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowLinkedLiveRoomsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 episode_id = 2; */
        if (message.episodeId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.episodeId);
        /* string entry_title = 3; */
        if (message.entryTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.entryTitle);
        /* repeated im.ShowLinkedLiveRoomsMessage.ShowLinkedLiveRoomInfo linked_live_rooms = 4; */
        for (let i = 0; i < message.linkedLiveRooms.length; i++)
            ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo.internalBinaryWrite(message.linkedLiveRooms[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShowLinkedLiveRoomsMessage
 */
export const ShowLinkedLiveRoomsMessage = new ShowLinkedLiveRoomsMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo$Type extends MessageType<ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo> {
    constructor() {
        super("im.ShowLinkedLiveRoomsMessage.ShowLinkedLiveRoomInfo", [
            { no: 1, name: "owner_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "room_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 5, name: "avatar_medium", kind: "message", T: () => Image },
            { no: 6, name: "avatar_large", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo>): ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo {
        const message = { ownerUserId: 0n, roomId: 0n, roomTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo): ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 owner_user_id */ 1:
                    message.ownerUserId = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 2:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* string room_title */ 3:
                    message.roomTitle = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 4:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* data.Image avatar_medium */ 5:
                    message.avatarMedium = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarMedium);
                    break;
                case /* data.Image avatar_large */ 6:
                    message.avatarLarge = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarLarge);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 owner_user_id = 1; */
        if (message.ownerUserId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.ownerUserId);
        /* int64 room_id = 2; */
        if (message.roomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.roomId);
        /* string room_title = 3; */
        if (message.roomTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.roomTitle);
        /* data.Image avatar_thumb = 4; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_medium = 5; */
        if (message.avatarMedium)
            Image.internalBinaryWrite(message.avatarMedium, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.Image avatar_large = 6; */
        if (message.avatarLarge)
            Image.internalBinaryWrite(message.avatarLarge, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShowLinkedLiveRoomsMessage.ShowLinkedLiveRoomInfo
 */
export const ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo = new ShowLinkedLiveRoomsMessage_ShowLinkedLiveRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowMultiCameraChangeMessage$Type extends MessageType<ShowMultiCameraChangeMessage> {
    constructor() {
        super("im.ShowMultiCameraChangeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "camera_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VSCameraInfo },
            { no: 3, name: "randomly_break_up_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ShowMultiCameraChangeMessage>): ShowMultiCameraChangeMessage {
        const message = { cameraInfos: [], randomlyBreakUpTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowMultiCameraChangeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowMultiCameraChangeMessage): ShowMultiCameraChangeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.VSCameraInfo camera_infos */ 2:
                    message.cameraInfos.push(VSCameraInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 randomly_break_up_time */ 3:
                    message.randomlyBreakUpTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowMultiCameraChangeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.VSCameraInfo camera_infos = 2; */
        for (let i = 0; i < message.cameraInfos.length; i++)
            VSCameraInfo.internalBinaryWrite(message.cameraInfos[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 randomly_break_up_time = 3; */
        if (message.randomlyBreakUpTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.randomlyBreakUpTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShowMultiCameraChangeMessage
 */
export const ShowMultiCameraChangeMessage = new ShowMultiCameraChangeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowWatchInfoMessage$Type extends MessageType<ShowWatchInfoMessage> {
    constructor() {
        super("im.ShowWatchInfoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "count_with_backup", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "format_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShowWatchInfoMessage>): ShowWatchInfoMessage {
        const message = { desc: "", count: "", countWithBackup: "", formatCount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowWatchInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowWatchInfoMessage): ShowWatchInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string desc */ 2:
                    message.desc = reader.string();
                    break;
                case /* string count */ 3:
                    message.count = reader.string();
                    break;
                case /* string count_with_backup */ 4:
                    message.countWithBackup = reader.string();
                    break;
                case /* string format_count */ 5:
                    message.formatCount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowWatchInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string desc = 2; */
        if (message.desc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        /* string count = 3; */
        if (message.count !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.count);
        /* string count_with_backup = 4; */
        if (message.countWithBackup !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.countWithBackup);
        /* string format_count = 5; */
        if (message.formatCount !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.formatCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ShowWatchInfoMessage
 */
export const ShowWatchInfoMessage = new ShowWatchInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkyEyeAnchorSetMessage$Type extends MessageType<SkyEyeAnchorSetMessage> {
    constructor() {
        super("im.SkyEyeAnchorSetMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "title_image", kind: "message", T: () => Image },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "top_tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bottom_tip", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SkyEyeAnchorSetMessage>): SkyEyeAnchorSetMessage {
        const message = { title: "", topTip: "", bottomTip: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkyEyeAnchorSetMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkyEyeAnchorSetMessage): SkyEyeAnchorSetMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Image title_image */ 2:
                    message.titleImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.titleImage);
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string top_tip */ 4:
                    message.topTip = reader.string();
                    break;
                case /* string bottom_tip */ 5:
                    message.bottomTip = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkyEyeAnchorSetMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image title_image = 2; */
        if (message.titleImage)
            Image.internalBinaryWrite(message.titleImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string top_tip = 4; */
        if (message.topTip !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.topTip);
        /* string bottom_tip = 5; */
        if (message.bottomTip !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bottomTip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SkyEyeAnchorSetMessage
 */
export const SkyEyeAnchorSetMessage = new SkyEyeAnchorSetMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SportsRealTimeMatchDataMessage$Type extends MessageType<SportsRealTimeMatchDataMessage> {
    constructor() {
        super("im.SportsRealTimeMatchDataMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "sports_match_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SportsRealTimeMatchDataMessage>): SportsRealTimeMatchDataMessage {
        const message = { sportsMatchData: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SportsRealTimeMatchDataMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SportsRealTimeMatchDataMessage): SportsRealTimeMatchDataMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string sports_match_data */ 2:
                    message.sportsMatchData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SportsRealTimeMatchDataMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string sports_match_data = 2; */
        if (message.sportsMatchData !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sportsMatchData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SportsRealTimeMatchDataMessage
 */
export const SportsRealTimeMatchDataMessage = new SportsRealTimeMatchDataMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SportsQuizOption$Type extends MessageType<SportsQuizOption> {
    constructor() {
        super("im.SportsQuizOption", [
            { no: 1, name: "option_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "option_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bet_amount", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "bet_amount_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "rate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "rate_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SportsQuizOption>): SportsQuizOption {
        const message = { optionId: 0n, optionDesc: "", betAmount: 0n, betAmountStr: "", rate: 0, rateStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SportsQuizOption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SportsQuizOption): SportsQuizOption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 option_id */ 1:
                    message.optionId = reader.int64().toBigInt();
                    break;
                case /* string option_desc */ 2:
                    message.optionDesc = reader.string();
                    break;
                case /* int64 bet_amount */ 3:
                    message.betAmount = reader.int64().toBigInt();
                    break;
                case /* string bet_amount_str */ 4:
                    message.betAmountStr = reader.string();
                    break;
                case /* double rate */ 5:
                    message.rate = reader.double();
                    break;
                case /* string rate_str */ 6:
                    message.rateStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SportsQuizOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 option_id = 1; */
        if (message.optionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.optionId);
        /* string option_desc = 2; */
        if (message.optionDesc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.optionDesc);
        /* int64 bet_amount = 3; */
        if (message.betAmount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.betAmount);
        /* string bet_amount_str = 4; */
        if (message.betAmountStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.betAmountStr);
        /* double rate = 5; */
        if (message.rate !== 0)
            writer.tag(5, WireType.Bit64).double(message.rate);
        /* string rate_str = 6; */
        if (message.rateStr !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rateStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SportsQuizOption
 */
export const SportsQuizOption = new SportsQuizOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SportsQuiz$Type extends MessageType<SportsQuiz> {
    constructor() {
        super("im.SportsQuiz", [
            { no: 1, name: "quiz_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "quiz_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "total_reward", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SportsQuizOption },
            { no: 7, name: "win_option", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "bet_gold_ball", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "selected_option", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "bonus", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SportsQuiz>): SportsQuiz {
        const message = { quizId: 0n, title: "", type: 0, quizStatus: 0, totalReward: 0n, options: [], winOption: 0n, endTime: 0n, betGoldBall: 0n, selectedOption: 0n, bonus: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SportsQuiz>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SportsQuiz): SportsQuiz {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 quiz_id */ 1:
                    message.quizId = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int32 quiz_status */ 4:
                    message.quizStatus = reader.int32();
                    break;
                case /* int64 total_reward */ 5:
                    message.totalReward = reader.int64().toBigInt();
                    break;
                case /* repeated im.SportsQuizOption options */ 6:
                    message.options.push(SportsQuizOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 win_option */ 7:
                    message.winOption = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 8:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* int64 bet_gold_ball */ 9:
                    message.betGoldBall = reader.int64().toBigInt();
                    break;
                case /* int64 selected_option */ 10:
                    message.selectedOption = reader.int64().toBigInt();
                    break;
                case /* int64 bonus */ 11:
                    message.bonus = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SportsQuiz, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 quiz_id = 1; */
        if (message.quizId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.quizId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int32 quiz_status = 4; */
        if (message.quizStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.quizStatus);
        /* int64 total_reward = 5; */
        if (message.totalReward !== 0n)
            writer.tag(5, WireType.Varint).int64(message.totalReward);
        /* repeated im.SportsQuizOption options = 6; */
        for (let i = 0; i < message.options.length; i++)
            SportsQuizOption.internalBinaryWrite(message.options[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 win_option = 7; */
        if (message.winOption !== 0n)
            writer.tag(7, WireType.Varint).int64(message.winOption);
        /* int64 end_time = 8; */
        if (message.endTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.endTime);
        /* int64 bet_gold_ball = 9; */
        if (message.betGoldBall !== 0n)
            writer.tag(9, WireType.Varint).int64(message.betGoldBall);
        /* int64 selected_option = 10; */
        if (message.selectedOption !== 0n)
            writer.tag(10, WireType.Varint).int64(message.selectedOption);
        /* int64 bonus = 11; */
        if (message.bonus !== 0n)
            writer.tag(11, WireType.Varint).int64(message.bonus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SportsQuiz
 */
export const SportsQuiz = new SportsQuiz$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SportsQuizMessage$Type extends MessageType<SportsQuizMessage> {
    constructor() {
        super("im.SportsQuizMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "match_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "quiz_msg_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "quiz", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SportsQuiz }
        ]);
    }
    create(value?: PartialMessage<SportsQuizMessage>): SportsQuizMessage {
        const message = { matchId: "", quizMsgType: 0, quiz: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SportsQuizMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SportsQuizMessage): SportsQuizMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string match_id */ 2:
                    message.matchId = reader.string();
                    break;
                case /* int32 quiz_msg_type */ 3:
                    message.quizMsgType = reader.int32();
                    break;
                case /* repeated im.SportsQuiz quiz */ 4:
                    message.quiz.push(SportsQuiz.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SportsQuizMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string match_id = 2; */
        if (message.matchId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.matchId);
        /* int32 quiz_msg_type = 3; */
        if (message.quizMsgType !== 0)
            writer.tag(3, WireType.Varint).int32(message.quizMsgType);
        /* repeated im.SportsQuiz quiz = 4; */
        for (let i = 0; i < message.quiz.length; i++)
            SportsQuiz.internalBinaryWrite(message.quiz[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SportsQuizMessage
 */
export const SportsQuizMessage = new SportsQuizMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamControlMessage$Type extends MessageType<StreamControlMessage> {
    constructor() {
        super("im.StreamControlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "control_params", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamControlMessage>): StreamControlMessage {
        const message = { controlParams: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamControlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamControlMessage): StreamControlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string control_params */ 2:
                    message.controlParams = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamControlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string control_params = 2; */
        if (message.controlParams !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.controlParams);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.StreamControlMessage
 */
export const StreamControlMessage = new StreamControlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeInfoMessage$Type extends MessageType<SubscribeInfoMessage> {
    constructor() {
        super("im.SubscribeInfoMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "is_member", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeInfoMessage>): SubscribeInfoMessage {
        const message = { isMember: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeInfoMessage): SubscribeInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* bool is_member */ 2:
                    message.isMember = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_member = 2; */
        if (message.isMember !== false)
            writer.tag(2, WireType.Varint).bool(message.isMember);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SubscribeInfoMessage
 */
export const SubscribeInfoMessage = new SubscribeInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeAssetMessage$Type extends MessageType<SubscribeAssetMessage> {
    constructor() {
        super("im.SubscribeAssetMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<SubscribeAssetMessage>): SubscribeAssetMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeAssetMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeAssetMessage): SubscribeAssetMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeAssetMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SubscribeAssetMessage
 */
export const SubscribeAssetMessage = new SubscribeAssetMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncStreamInfoMessage$Type extends MessageType<SyncStreamInfoMessage> {
    constructor() {
        super("im.SyncStreamInfoMessage", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<SyncStreamInfoMessage>): SyncStreamInfoMessage {
        const message = { timestamp: 0n, key: "", info: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncStreamInfoMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncStreamInfoMessage): SyncStreamInfoMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string info */ 3:
                    message.info = reader.string();
                    break;
                case /* im.Common common */ 4:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncStreamInfoMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string info = 3; */
        if (message.info !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.info);
        /* im.Common common = 4; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SyncStreamInfoMessage
 */
export const SyncStreamInfoMessage = new SyncStreamInfoMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncStreamMessage$Type extends MessageType<SyncStreamMessage> {
    constructor() {
        super("im.SyncStreamMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SyncStreamInfoMessage }
        ]);
    }
    create(value?: PartialMessage<SyncStreamMessage>): SyncStreamMessage {
        const message = { infoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncStreamMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncStreamMessage): SyncStreamMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.SyncStreamInfoMessage info_list */ 2:
                    message.infoList.push(SyncStreamInfoMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncStreamMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.SyncStreamInfoMessage info_list = 2; */
        for (let i = 0; i < message.infoList.length; i++)
            SyncStreamInfoMessage.internalBinaryWrite(message.infoList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.SyncStreamMessage
 */
export const SyncStreamMessage = new SyncStreamMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskCenterCommonMessage$Type extends MessageType<TaskCenterCommonMessage> {
    constructor() {
        super("im.TaskCenterCommonMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "biz_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskCenterCommonMessage>): TaskCenterCommonMessage {
        const message = { bizType: 0n, data: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskCenterCommonMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskCenterCommonMessage): TaskCenterCommonMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 biz_type */ 2:
                    message.bizType = reader.int64().toBigInt();
                    break;
                case /* string data */ 3:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskCenterCommonMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 biz_type = 2; */
        if (message.bizType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.bizType);
        /* string data = 3; */
        if (message.data !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskCenterCommonMessage
 */
export const TaskCenterCommonMessage = new TaskCenterCommonMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskCenterCommonPersonalMessage$Type extends MessageType<TaskCenterCommonPersonalMessage> {
    constructor() {
        super("im.TaskCenterCommonPersonalMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "biz_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskCenterCommonPersonalMessage>): TaskCenterCommonPersonalMessage {
        const message = { bizType: 0n, data: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskCenterCommonPersonalMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskCenterCommonPersonalMessage): TaskCenterCommonPersonalMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 biz_type */ 2:
                    message.bizType = reader.int64().toBigInt();
                    break;
                case /* string data */ 3:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskCenterCommonPersonalMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 biz_type = 2; */
        if (message.bizType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.bizType);
        /* string data = 3; */
        if (message.data !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskCenterCommonPersonalMessage
 */
export const TaskCenterCommonPersonalMessage = new TaskCenterCommonPersonalMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskCenterEntranceMessage$Type extends MessageType<TaskCenterEntranceMessage> {
    constructor() {
        super("im.TaskCenterEntranceMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "meta", kind: "message", T: () => TouchPositionMeta },
            { no: 3, name: "detail", kind: "message", T: () => TreasureDetail },
            { no: 4, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskCenterEntranceMessage>): TaskCenterEntranceMessage {
        const message = { extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskCenterEntranceMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskCenterEntranceMessage): TaskCenterEntranceMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.TouchPositionMeta meta */ 2:
                    message.meta = TouchPositionMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* data.TreasureDetail detail */ 3:
                    message.detail = TreasureDetail.internalBinaryRead(reader, reader.uint32(), options, message.detail);
                    break;
                case /* string extra */ 4:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskCenterEntranceMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.TouchPositionMeta meta = 2; */
        if (message.meta)
            TouchPositionMeta.internalBinaryWrite(message.meta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.TreasureDetail detail = 3; */
        if (message.detail)
            TreasureDetail.internalBinaryWrite(message.detail, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 4; */
        if (message.extra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskCenterEntranceMessage
 */
export const TaskCenterEntranceMessage = new TaskCenterEntranceMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskMessage$Type extends MessageType<TaskMessage> {
    constructor() {
        super("im.TaskMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "task_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskRecord },
            { no: 3, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TaskMessage>): TaskMessage {
        const message = { taskRecords: [], action: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskMessage): TaskMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.TaskRecord task_records */ 2:
                    message.taskRecords.push(TaskRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 action */ 3:
                    message.action = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.TaskRecord task_records = 2; */
        for (let i = 0; i < message.taskRecords.length; i++)
            TaskRecord.internalBinaryWrite(message.taskRecords[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 action = 3; */
        if (message.action !== 0)
            writer.tag(3, WireType.Varint).int32(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TaskMessage
 */
export const TaskMessage = new TaskMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToastMessage$Type extends MessageType<ToastMessage> {
    constructor() {
        super("im.ToastMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToastMessage>): ToastMessage {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToastMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToastMessage): ToastMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToastMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ToastMessage
 */
export const ToastMessage = new ToastMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolBarControlMessage$Type extends MessageType<ToolBarControlMessage> {
    constructor() {
        super("im.ToolBarControlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "event_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "group_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "component_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "op_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "icon", kind: "message", T: () => Image },
            { no: 9, name: "show_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 99, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToolBarControlMessage>): ToolBarControlMessage {
        const message = { eventType: 0, groupId: 0, componentType: 0, opType: 0, text: "", schemaUrl: "", showType: 0n, extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolBarControlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolBarControlMessage): ToolBarControlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 event_type */ 2:
                    message.eventType = reader.int32();
                    break;
                case /* int32 group_id */ 3:
                    message.groupId = reader.int32();
                    break;
                case /* int32 component_type */ 4:
                    message.componentType = reader.int32();
                    break;
                case /* int32 op_type */ 5:
                    message.opType = reader.int32();
                    break;
                case /* string text */ 6:
                    message.text = reader.string();
                    break;
                case /* string schema_url */ 7:
                    message.schemaUrl = reader.string();
                    break;
                case /* data.Image icon */ 8:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* int64 show_type */ 9:
                    message.showType = reader.int64().toBigInt();
                    break;
                case /* string extra */ 99:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolBarControlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 event_type = 2; */
        if (message.eventType !== 0)
            writer.tag(2, WireType.Varint).int32(message.eventType);
        /* int32 group_id = 3; */
        if (message.groupId !== 0)
            writer.tag(3, WireType.Varint).int32(message.groupId);
        /* int32 component_type = 4; */
        if (message.componentType !== 0)
            writer.tag(4, WireType.Varint).int32(message.componentType);
        /* int32 op_type = 5; */
        if (message.opType !== 0)
            writer.tag(5, WireType.Varint).int32(message.opType);
        /* string text = 6; */
        if (message.text !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.text);
        /* string schema_url = 7; */
        if (message.schemaUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.schemaUrl);
        /* data.Image icon = 8; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 show_type = 9; */
        if (message.showType !== 0n)
            writer.tag(9, WireType.Varint).int64(message.showType);
        /* string extra = 99; */
        if (message.extra !== "")
            writer.tag(99, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ToolBarControlMessage
 */
export const ToolBarControlMessage = new ToolBarControlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TopLeftBubbleMessage$Type extends MessageType<TopLeftBubbleMessage> {
    constructor() {
        super("im.TopLeftBubbleMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "bubble_config", kind: "message", T: () => CommonBubbleConfig }
        ]);
    }
    create(value?: PartialMessage<TopLeftBubbleMessage>): TopLeftBubbleMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TopLeftBubbleMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TopLeftBubbleMessage): TopLeftBubbleMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.CommonBubbleConfig bubble_config */ 2:
                    message.bubbleConfig = CommonBubbleConfig.internalBinaryRead(reader, reader.uint32(), options, message.bubbleConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TopLeftBubbleMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.CommonBubbleConfig bubble_config = 2; */
        if (message.bubbleConfig)
            CommonBubbleConfig.internalBinaryWrite(message.bubbleConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TopLeftBubbleMessage
 */
export const TopLeftBubbleMessage = new TopLeftBubbleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnionAnchorMessage$Type extends MessageType<UnionAnchorMessage> {
    constructor() {
        super("im.UnionAnchorMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnionAnchorMessage>): UnionAnchorMessage {
        const message = { text: "", duration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnionAnchorMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnionAnchorMessage): UnionAnchorMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int32 duration */ 4:
                    message.duration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnionAnchorMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int32 duration = 4; */
        if (message.duration !== 0)
            writer.tag(4, WireType.Varint).int32(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UnionAnchorMessage
 */
export const UnionAnchorMessage = new UnionAnchorMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnionGeneralMessage$Type extends MessageType<UnionGeneralMessage> {
    constructor() {
        super("im.UnionGeneralMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "payload", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "auth_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UnionGeneralMessage>): UnionGeneralMessage {
        const message = { payload: [], timestamp: 0n, authType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnionGeneralMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnionGeneralMessage): UnionGeneralMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated int32 payload */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.payload.push(reader.int32());
                    else
                        message.payload.push(reader.int32());
                    break;
                case /* int64 timestamp */ 3:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* int64 auth_type */ 4:
                    message.authType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnionGeneralMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 payload = 2; */
        if (message.payload.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.payload.length; i++)
                writer.int32(message.payload[i]);
            writer.join();
        }
        /* int64 timestamp = 3; */
        if (message.timestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timestamp);
        /* int64 auth_type = 4; */
        if (message.authType !== 0n)
            writer.tag(4, WireType.Varint).int64(message.authType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UnionGeneralMessage
 */
export const UnionGeneralMessage = new UnionGeneralMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorAppointmentNumUpdateMessage$Type extends MessageType<AnchorAppointmentNumUpdateMessage> {
    constructor() {
        super("im.AnchorAppointmentNumUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => AnchorAppointmentNumUpdateMessage_Data }
        ]);
    }
    create(value?: PartialMessage<AnchorAppointmentNumUpdateMessage>): AnchorAppointmentNumUpdateMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorAppointmentNumUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorAppointmentNumUpdateMessage): AnchorAppointmentNumUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.AnchorAppointmentNumUpdateMessage.Data data */ 2:
                    message.data = AnchorAppointmentNumUpdateMessage_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorAppointmentNumUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.AnchorAppointmentNumUpdateMessage.Data data = 2; */
        if (message.data)
            AnchorAppointmentNumUpdateMessage_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnchorAppointmentNumUpdateMessage
 */
export const AnchorAppointmentNumUpdateMessage = new AnchorAppointmentNumUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorAppointmentNumUpdateMessage_Data$Type extends MessageType<AnchorAppointmentNumUpdateMessage_Data> {
    constructor() {
        super("im.AnchorAppointmentNumUpdateMessage.Data", [
            { no: 1, name: "CurrentNumber", kind: "scalar", jsonName: "CurrentNumber", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "AnchorUID", kind: "scalar", jsonName: "AnchorUID", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorAppointmentNumUpdateMessage_Data>): AnchorAppointmentNumUpdateMessage_Data {
        const message = { currentNumber: 0n, anchorUID: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorAppointmentNumUpdateMessage_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorAppointmentNumUpdateMessage_Data): AnchorAppointmentNumUpdateMessage_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 CurrentNumber = 1 [json_name = "CurrentNumber"];*/ 1:
                    message.currentNumber = reader.int64().toBigInt();
                    break;
                case /* int64 AnchorUID = 2 [json_name = "AnchorUID"];*/ 2:
                    message.anchorUID = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorAppointmentNumUpdateMessage_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 CurrentNumber = 1 [json_name = "CurrentNumber"]; */
        if (message.currentNumber !== 0n)
            writer.tag(1, WireType.Varint).int64(message.currentNumber);
        /* int64 AnchorUID = 2 [json_name = "AnchorUID"]; */
        if (message.anchorUID !== 0n)
            writer.tag(2, WireType.Varint).int64(message.anchorUID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AnchorAppointmentNumUpdateMessage.Data
 */
export const AnchorAppointmentNumUpdateMessage_Data = new AnchorAppointmentNumUpdateMessage_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppointmentNumberUpdateMessage$Type extends MessageType<AppointmentNumberUpdateMessage> {
    constructor() {
        super("im.AppointmentNumberUpdateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "message", T: () => AppointmentNumberUpdateMessage_Data }
        ]);
    }
    create(value?: PartialMessage<AppointmentNumberUpdateMessage>): AppointmentNumberUpdateMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppointmentNumberUpdateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppointmentNumberUpdateMessage): AppointmentNumberUpdateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* im.AppointmentNumberUpdateMessage.Data data */ 2:
                    message.data = AppointmentNumberUpdateMessage_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppointmentNumberUpdateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.AppointmentNumberUpdateMessage.Data data = 2; */
        if (message.data)
            AppointmentNumberUpdateMessage_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AppointmentNumberUpdateMessage
 */
export const AppointmentNumberUpdateMessage = new AppointmentNumberUpdateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppointmentNumberUpdateMessage_Data$Type extends MessageType<AppointmentNumberUpdateMessage_Data> {
    constructor() {
        super("im.AppointmentNumberUpdateMessage.Data", [
            { no: 1, name: "CurrentNumber", kind: "scalar", jsonName: "CurrentNumber", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "AnchorUID", kind: "scalar", jsonName: "AnchorUID", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AppointmentNumberUpdateMessage_Data>): AppointmentNumberUpdateMessage_Data {
        const message = { currentNumber: 0n, anchorUID: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppointmentNumberUpdateMessage_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppointmentNumberUpdateMessage_Data): AppointmentNumberUpdateMessage_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 CurrentNumber = 1 [json_name = "CurrentNumber"];*/ 1:
                    message.currentNumber = reader.int64().toBigInt();
                    break;
                case /* int64 AnchorUID = 2 [json_name = "AnchorUID"];*/ 2:
                    message.anchorUID = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppointmentNumberUpdateMessage_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 CurrentNumber = 1 [json_name = "CurrentNumber"]; */
        if (message.currentNumber !== 0n)
            writer.tag(1, WireType.Varint).int64(message.currentNumber);
        /* int64 AnchorUID = 2 [json_name = "AnchorUID"]; */
        if (message.anchorUID !== 0n)
            writer.tag(2, WireType.Varint).int64(message.anchorUID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AppointmentNumberUpdateMessage.Data
 */
export const AppointmentNumberUpdateMessage_Data = new AppointmentNumberUpdateMessage_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFanTicketMessage$Type extends MessageType<UpdateFanTicketMessage> {
    constructor() {
        super("im.UpdateFanTicketMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_fan_ticket_count_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "room_fan_ticket_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "force_update", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateFanTicketMessage>): UpdateFanTicketMessage {
        const message = { roomFanTicketCountText: "", roomFanTicketCount: 0n, forceUpdate: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateFanTicketMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFanTicketMessage): UpdateFanTicketMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string room_fan_ticket_count_text */ 2:
                    message.roomFanTicketCountText = reader.string();
                    break;
                case /* int64 room_fan_ticket_count */ 3:
                    message.roomFanTicketCount = reader.int64().toBigInt();
                    break;
                case /* bool force_update */ 4:
                    message.forceUpdate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFanTicketMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string room_fan_ticket_count_text = 2; */
        if (message.roomFanTicketCountText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomFanTicketCountText);
        /* int64 room_fan_ticket_count = 3; */
        if (message.roomFanTicketCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.roomFanTicketCount);
        /* bool force_update = 4; */
        if (message.forceUpdate !== false)
            writer.tag(4, WireType.Varint).bool(message.forceUpdate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpdateFanTicketMessage
 */
export const UpdateFanTicketMessage = new UpdateFanTicketMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CoverSuccessMessage$Type extends MessageType<CoverSuccessMessage> {
    constructor() {
        super("im.CoverSuccessMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "cover_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CoverSuccessMessage>): CoverSuccessMessage {
        const message = { coverType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CoverSuccessMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CoverSuccessMessage): CoverSuccessMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 cover_type */ 2:
                    message.coverType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CoverSuccessMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 cover_type = 2; */
        if (message.coverType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.coverType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CoverSuccessMessage
 */
export const CoverSuccessMessage = new CoverSuccessMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpperRightWidgetDataMessage$Type extends MessageType<UpperRightWidgetDataMessage> {
    constructor() {
        super("im.UpperRightWidgetDataMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "upper_right_widget_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpperRightWidgetData }
        ]);
    }
    create(value?: PartialMessage<UpperRightWidgetDataMessage>): UpperRightWidgetDataMessage {
        const message = { upperRightWidgetDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpperRightWidgetDataMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpperRightWidgetDataMessage): UpperRightWidgetDataMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated data.UpperRightWidgetData upper_right_widget_data_list */ 2:
                    message.upperRightWidgetDataList.push(UpperRightWidgetData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpperRightWidgetDataMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.UpperRightWidgetData upper_right_widget_data_list = 2; */
        for (let i = 0; i < message.upperRightWidgetDataList.length; i++)
            UpperRightWidgetData.internalBinaryWrite(message.upperRightWidgetDataList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UpperRightWidgetDataMessage
 */
export const UpperRightWidgetDataMessage = new UpperRightWidgetDataMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserPrivilegeChangeMessage$Type extends MessageType<UserPrivilegeChangeMessage> {
    constructor() {
        super("im.UserPrivilegeChangeMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_privilege_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "avatar_border", kind: "message", T: () => Image },
            { no: 5, name: "thumb_avatar_border", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<UserPrivilegeChangeMessage>): UserPrivilegeChangeMessage {
        const message = { userPrivilegeType: 0, userId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserPrivilegeChangeMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserPrivilegeChangeMessage): UserPrivilegeChangeMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 user_privilege_type */ 2:
                    message.userPrivilegeType = reader.int32();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* data.Image avatar_border */ 4:
                    message.avatarBorder = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarBorder);
                    break;
                case /* data.Image thumb_avatar_border */ 5:
                    message.thumbAvatarBorder = Image.internalBinaryRead(reader, reader.uint32(), options, message.thumbAvatarBorder);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserPrivilegeChangeMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_privilege_type = 2; */
        if (message.userPrivilegeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.userPrivilegeType);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* data.Image avatar_border = 4; */
        if (message.avatarBorder)
            Image.internalBinaryWrite(message.avatarBorder, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* data.Image thumb_avatar_border = 5; */
        if (message.thumbAvatarBorder)
            Image.internalBinaryWrite(message.thumbAvatarBorder, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.UserPrivilegeChangeMessage
 */
export const UserPrivilegeChangeMessage = new UserPrivilegeChangeMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyDecisionMessage$Type extends MessageType<VerifyDecisionMessage> {
    constructor() {
        super("im.VerifyDecisionMessage", [
            { no: 1, name: "decision_conf", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "check_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "common", kind: "message", T: () => Common },
            { no: 4, name: "pop_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyDecisionMessage>): VerifyDecisionMessage {
        const message = { decisionConf: "", checkReason: "", popTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyDecisionMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyDecisionMessage): VerifyDecisionMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string decision_conf */ 1:
                    message.decisionConf = reader.string();
                    break;
                case /* string check_reason */ 2:
                    message.checkReason = reader.string();
                    break;
                case /* im.Common common */ 3:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 pop_time */ 4:
                    message.popTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyDecisionMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string decision_conf = 1; */
        if (message.decisionConf !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.decisionConf);
        /* string check_reason = 2; */
        if (message.checkReason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.checkReason);
        /* im.Common common = 3; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 pop_time = 4; */
        if (message.popTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.popTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VerifyDecisionMessage
 */
export const VerifyDecisionMessage = new VerifyDecisionMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoShareMessage$Type extends MessageType<VideoShareMessage> {
    constructor() {
        super("im.VideoShareMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "item_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "item_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "item_type_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "author_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "public_area_common", kind: "message", T: () => PublicAreaCommon }
        ]);
    }
    create(value?: PartialMessage<VideoShareMessage>): VideoShareMessage {
        const message = { itemId: 0n, itemIdStr: "", itemType: 0n, itemTypeStr: "", title: "", authorId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoShareMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoShareMessage): VideoShareMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* int64 item_id */ 3:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* string item_id_str */ 4:
                    message.itemIdStr = reader.string();
                    break;
                case /* int64 item_type */ 5:
                    message.itemType = reader.int64().toBigInt();
                    break;
                case /* string item_type_str */ 6:
                    message.itemTypeStr = reader.string();
                    break;
                case /* string title */ 7:
                    message.title = reader.string();
                    break;
                case /* int64 author_id */ 8:
                    message.authorId = reader.int64().toBigInt();
                    break;
                case /* im.PublicAreaCommon public_area_common */ 9:
                    message.publicAreaCommon = PublicAreaCommon.internalBinaryRead(reader, reader.uint32(), options, message.publicAreaCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoShareMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 item_id = 3; */
        if (message.itemId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.itemId);
        /* string item_id_str = 4; */
        if (message.itemIdStr !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.itemIdStr);
        /* int64 item_type = 5; */
        if (message.itemType !== 0n)
            writer.tag(5, WireType.Varint).int64(message.itemType);
        /* string item_type_str = 6; */
        if (message.itemTypeStr !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.itemTypeStr);
        /* string title = 7; */
        if (message.title !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        /* int64 author_id = 8; */
        if (message.authorId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.authorId);
        /* im.PublicAreaCommon public_area_common = 9; */
        if (message.publicAreaCommon)
            PublicAreaCommon.internalBinaryWrite(message.publicAreaCommon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VideoShareMessage
 */
export const VideoShareMessage = new VideoShareMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VirtualGameActorChatMessage$Type extends MessageType<VirtualGameActorChatMessage> {
    constructor() {
        super("im.VirtualGameActorChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "actor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "chat_request_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VirtualGameActorChatMessage>): VirtualGameActorChatMessage {
        const message = { userId: 0n, actorId: 0n, userNickName: "", chatRequestTime: 0n, roomId: 0n, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VirtualGameActorChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualGameActorChatMessage): VirtualGameActorChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 actor_id */ 3:
                    message.actorId = reader.int64().toBigInt();
                    break;
                case /* string user_nick_name */ 4:
                    message.userNickName = reader.string();
                    break;
                case /* int64 chat_request_time */ 5:
                    message.chatRequestTime = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 6:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* string content */ 7:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualGameActorChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* int64 actor_id = 3; */
        if (message.actorId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.actorId);
        /* string user_nick_name = 4; */
        if (message.userNickName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userNickName);
        /* int64 chat_request_time = 5; */
        if (message.chatRequestTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.chatRequestTime);
        /* int64 room_id = 6; */
        if (message.roomId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.roomId);
        /* string content = 7; */
        if (message.content !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VirtualGameActorChatMessage
 */
export const VirtualGameActorChatMessage = new VirtualGameActorChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VirtualActorBatchCommandMessage$Type extends MessageType<VirtualActorBatchCommandMessage> {
    constructor() {
        super("im.VirtualActorBatchCommandMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "command_message_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VirtualGameActorCommandMessage }
        ]);
    }
    create(value?: PartialMessage<VirtualActorBatchCommandMessage>): VirtualActorBatchCommandMessage {
        const message = { roomId: 0n, commandMessageList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VirtualActorBatchCommandMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualActorBatchCommandMessage): VirtualActorBatchCommandMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 room_id */ 2:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* repeated im.VirtualGameActorCommandMessage command_message_list */ 3:
                    message.commandMessageList.push(VirtualGameActorCommandMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualActorBatchCommandMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 room_id = 2; */
        if (message.roomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.roomId);
        /* repeated im.VirtualGameActorCommandMessage command_message_list = 3; */
        for (let i = 0; i < message.commandMessageList.length; i++)
            VirtualGameActorCommandMessage.internalBinaryWrite(message.commandMessageList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VirtualActorBatchCommandMessage
 */
export const VirtualActorBatchCommandMessage = new VirtualActorBatchCommandMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VirtualGameActorCommandMessage$Type extends MessageType<VirtualGameActorCommandMessage> {
    constructor() {
        super("im.VirtualGameActorCommandMessage", [
            { no: 1, name: "command_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "command_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "actor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "user_nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "actor_create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "actor_remove_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "command_request_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VirtualGameActorCommandMessage>): VirtualGameActorCommandMessage {
        const message = { commandId: 0n, commandType: "", userId: 0n, actorId: 0n, userNickName: "", actorCreateTime: 0n, actorRemoveTime: 0n, commandRequestTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VirtualGameActorCommandMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualGameActorCommandMessage): VirtualGameActorCommandMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 command_id */ 1:
                    message.commandId = reader.int64().toBigInt();
                    break;
                case /* string command_type */ 2:
                    message.commandType = reader.string();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 actor_id */ 4:
                    message.actorId = reader.int64().toBigInt();
                    break;
                case /* string user_nick_name */ 5:
                    message.userNickName = reader.string();
                    break;
                case /* int64 actor_create_time */ 6:
                    message.actorCreateTime = reader.int64().toBigInt();
                    break;
                case /* int64 actor_remove_time */ 7:
                    message.actorRemoveTime = reader.int64().toBigInt();
                    break;
                case /* int64 command_request_time */ 8:
                    message.commandRequestTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualGameActorCommandMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 command_id = 1; */
        if (message.commandId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.commandId);
        /* string command_type = 2; */
        if (message.commandType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.commandType);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* int64 actor_id = 4; */
        if (message.actorId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.actorId);
        /* string user_nick_name = 5; */
        if (message.userNickName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userNickName);
        /* int64 actor_create_time = 6; */
        if (message.actorCreateTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.actorCreateTime);
        /* int64 actor_remove_time = 7; */
        if (message.actorRemoveTime !== 0n)
            writer.tag(7, WireType.Varint).int64(message.actorRemoveTime);
        /* int64 command_request_time = 8; */
        if (message.commandRequestTime !== 0n)
            writer.tag(8, WireType.Varint).int64(message.commandRequestTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VirtualGameActorCommandMessage
 */
export const VirtualGameActorCommandMessage = new VirtualGameActorCommandMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsBusinessConfigureMessage$Type extends MessageType<VsBusinessConfigureMessage> {
    constructor() {
        super("im.VsBusinessConfigureMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "business_configure", kind: "message", T: () => BusinessConfigure },
            { no: 3, name: "all_info", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "scatter_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VsBusinessConfigureMessage>): VsBusinessConfigureMessage {
        const message = { allInfo: false, scatterTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsBusinessConfigureMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsBusinessConfigureMessage): VsBusinessConfigureMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.BusinessConfigure business_configure */ 2:
                    message.businessConfigure = BusinessConfigure.internalBinaryRead(reader, reader.uint32(), options, message.businessConfigure);
                    break;
                case /* bool all_info */ 3:
                    message.allInfo = reader.bool();
                    break;
                case /* int64 scatter_time */ 4:
                    message.scatterTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsBusinessConfigureMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.BusinessConfigure business_configure = 2; */
        if (message.businessConfigure)
            BusinessConfigure.internalBinaryWrite(message.businessConfigure, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool all_info = 3; */
        if (message.allInfo !== false)
            writer.tag(3, WireType.Varint).bool(message.allInfo);
        /* int64 scatter_time = 4; */
        if (message.scatterTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.scatterTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VsBusinessConfigureMessage
 */
export const VsBusinessConfigureMessage = new VsBusinessConfigureMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsInteractiveMessage$Type extends MessageType<VsInteractiveMessage> {
    constructor() {
        super("im.VsInteractiveMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VsInteractiveMessage>): VsInteractiveMessage {
        const message = { extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsInteractiveMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsInteractiveMessage): VsInteractiveMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string extra */ 2:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsInteractiveMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 2; */
        if (message.extra !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VsInteractiveMessage
 */
export const VsInteractiveMessage = new VsInteractiveMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VSLinkRoomMessage$Type extends MessageType<VSLinkRoomMessage> {
    constructor() {
        super("im.VSLinkRoomMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "link_info", kind: "message", T: () => VSLinkInfo },
            { no: 3, name: "all_info", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "scatter_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VSLinkRoomMessage>): VSLinkRoomMessage {
        const message = { allInfo: false, scatterTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VSLinkRoomMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VSLinkRoomMessage): VSLinkRoomMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.VSLinkInfo link_info */ 2:
                    message.linkInfo = VSLinkInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkInfo);
                    break;
                case /* bool all_info */ 3:
                    message.allInfo = reader.bool();
                    break;
                case /* int64 scatter_time */ 4:
                    message.scatterTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VSLinkRoomMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.VSLinkInfo link_info = 2; */
        if (message.linkInfo)
            VSLinkInfo.internalBinaryWrite(message.linkInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool all_info = 3; */
        if (message.allInfo !== false)
            writer.tag(3, WireType.Varint).bool(message.allInfo);
        /* int64 scatter_time = 4; */
        if (message.scatterTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.scatterTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VSLinkRoomMessage
 */
export const VSLinkRoomMessage = new VSLinkRoomMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsPanelMessage$Type extends MessageType<VsPanelMessage> {
    constructor() {
        super("im.VsPanelMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VsPanelMessage>): VsPanelMessage {
        const message = { extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsPanelMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsPanelMessage): VsPanelMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string extra */ 2:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsPanelMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extra = 2; */
        if (message.extra !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VsPanelMessage
 */
export const VsPanelMessage = new VsPanelMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsScheduleMessage$Type extends MessageType<VsScheduleMessage> {
    constructor() {
        super("im.VsScheduleMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "event_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "content_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "match_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "content_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "event_ids_str", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VsScheduleMessage>): VsScheduleMessage {
        const message = { action: 0, matchId: 0n, eventIds: [], contentId: 0n, matchIdStr: "", contentIdStr: "", eventIdsStr: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsScheduleMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsScheduleMessage): VsScheduleMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                case /* int64 match_id */ 3:
                    message.matchId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 event_ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.eventIds.push(reader.int64().toBigInt());
                    else
                        message.eventIds.push(reader.int64().toBigInt());
                    break;
                case /* int64 content_id */ 5:
                    message.contentId = reader.int64().toBigInt();
                    break;
                case /* string match_id_str */ 6:
                    message.matchIdStr = reader.string();
                    break;
                case /* string content_id_str */ 7:
                    message.contentIdStr = reader.string();
                    break;
                case /* repeated string event_ids_str */ 8:
                    message.eventIdsStr.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsScheduleMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        /* int64 match_id = 3; */
        if (message.matchId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.matchId);
        /* repeated int64 event_ids = 4; */
        if (message.eventIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.eventIds.length; i++)
                writer.int64(message.eventIds[i]);
            writer.join();
        }
        /* int64 content_id = 5; */
        if (message.contentId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.contentId);
        /* string match_id_str = 6; */
        if (message.matchIdStr !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.matchIdStr);
        /* string content_id_str = 7; */
        if (message.contentIdStr !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.contentIdStr);
        /* repeated string event_ids_str = 8; */
        for (let i = 0; i < message.eventIdsStr.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.eventIdsStr[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VsScheduleMessage
 */
export const VsScheduleMessage = new VsScheduleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VsSwitchControlMessage$Type extends MessageType<VsSwitchControlMessage> {
    constructor() {
        super("im.VsSwitchControlMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "switch", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "on", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "display_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VsSwitchControlMessage>): VsSwitchControlMessage {
        const message = { switch: 0, on: false, displayText: "", extra: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VsSwitchControlMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VsSwitchControlMessage): VsSwitchControlMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int32 switch */ 2:
                    message.switch = reader.int32();
                    break;
                case /* bool on */ 3:
                    message.on = reader.bool();
                    break;
                case /* string display_text */ 4:
                    message.displayText = reader.string();
                    break;
                case /* string extra */ 20:
                    message.extra = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VsSwitchControlMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 switch = 2; */
        if (message.switch !== 0)
            writer.tag(2, WireType.Varint).int32(message.switch);
        /* bool on = 3; */
        if (message.on !== false)
            writer.tag(3, WireType.Varint).bool(message.on);
        /* string display_text = 4; */
        if (message.displayText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.displayText);
        /* string extra = 20; */
        if (message.extra !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.VsSwitchControlMessage
 */
export const VsSwitchControlMessage = new VsSwitchControlMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FreshmanSupportMessage$Type extends MessageType<FreshmanSupportMessage> {
    constructor() {
        super("im.FreshmanSupportMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FreshmanSupportMessage>): FreshmanSupportMessage {
        const message = { number: 0n, status: 0n, icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FreshmanSupportMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FreshmanSupportMessage): FreshmanSupportMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 number */ 2:
                    message.number = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FreshmanSupportMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 number = 2; */
        if (message.number !== 0n)
            writer.tag(2, WireType.Varint).int64(message.number);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FreshmanSupportMessage
 */
export const FreshmanSupportMessage = new FreshmanSupportMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MiniAppLineUpMessage$Type extends MessageType<MiniAppLineUpMessage> {
    constructor() {
        super("im.MiniAppLineUpMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "mini_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mini_app_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "line_up_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MiniAppLineUpMessage>): MiniAppLineUpMessage {
        const message = { miniAppId: "", miniAppName: "", lineUpStatus: 0, content: "", duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MiniAppLineUpMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MiniAppLineUpMessage): MiniAppLineUpMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string mini_app_id */ 2:
                    message.miniAppId = reader.string();
                    break;
                case /* string mini_app_name */ 3:
                    message.miniAppName = reader.string();
                    break;
                case /* int32 line_up_status */ 4:
                    message.lineUpStatus = reader.int32();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* int64 duration */ 6:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MiniAppLineUpMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string mini_app_id = 2; */
        if (message.miniAppId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.miniAppId);
        /* string mini_app_name = 3; */
        if (message.miniAppName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.miniAppName);
        /* int32 line_up_status = 4; */
        if (message.lineUpStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.lineUpStatus);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* int64 duration = 6; */
        if (message.duration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MiniAppLineUpMessage
 */
export const MiniAppLineUpMessage = new MiniAppLineUpMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenAppStatusMessage$Type extends MessageType<InteractOpenAppStatusMessage> {
    constructor() {
        super("im.InteractOpenAppStatusMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "display_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "anchor_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InteractOpenAppStatusMessage>): InteractOpenAppStatusMessage {
        const message = { appId: "", status: 0, displayText: "", anchorText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenAppStatusMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenAppStatusMessage): InteractOpenAppStatusMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string app_id */ 2:
                    message.appId = reader.string();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string display_text */ 4:
                    message.displayText = reader.string();
                    break;
                case /* string anchor_text */ 5:
                    message.anchorText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenAppStatusMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 2; */
        if (message.appId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appId);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string display_text = 4; */
        if (message.displayText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.displayText);
        /* string anchor_text = 5; */
        if (message.anchorText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.anchorText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenAppStatusMessage
 */
export const InteractOpenAppStatusMessage = new InteractOpenAppStatusMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenChatMessage$Type extends MessageType<InteractOpenChatMessage> {
    constructor() {
        super("im.InteractOpenChatMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InteractOpenChatMessage_ChatItem }
        ]);
    }
    create(value?: PartialMessage<InteractOpenChatMessage>): InteractOpenChatMessage {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenChatMessage): InteractOpenChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.InteractOpenChatMessage.ChatItem items */ 2:
                    message.items.push(InteractOpenChatMessage_ChatItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.InteractOpenChatMessage.ChatItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            InteractOpenChatMessage_ChatItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenChatMessage
 */
export const InteractOpenChatMessage = new InteractOpenChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenChatMessage_ChatItem$Type extends MessageType<InteractOpenChatMessage_ChatItem> {
    constructor() {
        super("im.InteractOpenChatMessage.ChatItem", [
            { no: 1, name: "app_user_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AppUserInfo },
            { no: 2, name: "sec_nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sec_avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "timestamp", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractOpenChatMessage_ChatItem>): InteractOpenChatMessage_ChatItem {
        const message = { appUserInfo: [], secNickName: "", secAvatarUrl: "", content: "", timestamp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenChatMessage_ChatItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenChatMessage_ChatItem): InteractOpenChatMessage_ChatItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.AppUserInfo app_user_info */ 1:
                    message.appUserInfo.push(AppUserInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string sec_nick_name */ 2:
                    message.secNickName = reader.string();
                    break;
                case /* string sec_avatar_url */ 3:
                    message.secAvatarUrl = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* int32 timestamp */ 5:
                    message.timestamp = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenChatMessage_ChatItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.AppUserInfo app_user_info = 1; */
        for (let i = 0; i < message.appUserInfo.length; i++)
            AppUserInfo.internalBinaryWrite(message.appUserInfo[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string sec_nick_name = 2; */
        if (message.secNickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secNickName);
        /* string sec_avatar_url = 3; */
        if (message.secAvatarUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.secAvatarUrl);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* int32 timestamp = 5; */
        if (message.timestamp !== 0)
            writer.tag(5, WireType.Varint).int32(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenChatMessage.ChatItem
 */
export const InteractOpenChatMessage_ChatItem = new InteractOpenChatMessage_ChatItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityCouponInvalidMessage$Type extends MessageType<ActivityCouponInvalidMessage> {
    constructor() {
        super("im.ActivityCouponInvalidMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "invalid_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "anchor_toast_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityCouponInvalidMessage>): ActivityCouponInvalidMessage {
        const message = { roomId: "", invalidType: 0, anchorToastContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityCouponInvalidMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityCouponInvalidMessage): ActivityCouponInvalidMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string room_id */ 2:
                    message.roomId = reader.string();
                    break;
                case /* int32 invalid_type */ 3:
                    message.invalidType = reader.int32();
                    break;
                case /* string anchor_toast_content */ 4:
                    message.anchorToastContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityCouponInvalidMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string room_id = 2; */
        if (message.roomId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomId);
        /* int32 invalid_type = 3; */
        if (message.invalidType !== 0)
            writer.tag(3, WireType.Varint).int32(message.invalidType);
        /* string anchor_toast_content = 4; */
        if (message.anchorToastContent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.anchorToastContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ActivityCouponInvalidMessage
 */
export const ActivityCouponInvalidMessage = new ActivityCouponInvalidMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenDiamondMessage$Type extends MessageType<InteractOpenDiamondMessage> {
    constructor() {
        super("im.InteractOpenDiamondMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "diamonds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractOpenDiamondMessage>): InteractOpenDiamondMessage {
        const message = { appId: "", startId: 0n, diamonds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenDiamondMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenDiamondMessage): InteractOpenDiamondMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string app_id */ 2:
                    message.appId = reader.string();
                    break;
                case /* int64 start_id */ 3:
                    message.startId = reader.int64().toBigInt();
                    break;
                case /* int32 diamonds */ 4:
                    message.diamonds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenDiamondMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 2; */
        if (message.appId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appId);
        /* int64 start_id = 3; */
        if (message.startId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startId);
        /* int32 diamonds = 4; */
        if (message.diamonds !== 0)
            writer.tag(4, WireType.Varint).int32(message.diamonds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenDiamondMessage
 */
export const InteractOpenDiamondMessage = new InteractOpenDiamondMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenFollowingMessage$Type extends MessageType<InteractOpenFollowingMessage> {
    constructor() {
        super("im.InteractOpenFollowingMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InteractOpenFollowingMessage_FollowItem }
        ]);
    }
    create(value?: PartialMessage<InteractOpenFollowingMessage>): InteractOpenFollowingMessage {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenFollowingMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenFollowingMessage): InteractOpenFollowingMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* repeated im.InteractOpenFollowingMessage.FollowItem items */ 2:
                    message.items.push(InteractOpenFollowingMessage_FollowItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenFollowingMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.InteractOpenFollowingMessage.FollowItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            InteractOpenFollowingMessage_FollowItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenFollowingMessage
 */
export const InteractOpenFollowingMessage = new InteractOpenFollowingMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenFollowingMessage_FollowItem$Type extends MessageType<InteractOpenFollowingMessage_FollowItem> {
    constructor() {
        super("im.InteractOpenFollowingMessage.FollowItem", [
            { no: 1, name: "app_user_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AppUserInfo },
            { no: 2, name: "sec_nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sec_avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "timestamp", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InteractOpenFollowingMessage_FollowItem>): InteractOpenFollowingMessage_FollowItem {
        const message = { appUserInfo: [], secNickName: "", secAvatarUrl: "", action: 0, timestamp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenFollowingMessage_FollowItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenFollowingMessage_FollowItem): InteractOpenFollowingMessage_FollowItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.AppUserInfo app_user_info */ 1:
                    message.appUserInfo.push(AppUserInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string sec_nick_name */ 2:
                    message.secNickName = reader.string();
                    break;
                case /* string sec_avatar_url */ 3:
                    message.secAvatarUrl = reader.string();
                    break;
                case /* int32 action */ 4:
                    message.action = reader.int32();
                    break;
                case /* int32 timestamp */ 5:
                    message.timestamp = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenFollowingMessage_FollowItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.AppUserInfo app_user_info = 1; */
        for (let i = 0; i < message.appUserInfo.length; i++)
            AppUserInfo.internalBinaryWrite(message.appUserInfo[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string sec_nick_name = 2; */
        if (message.secNickName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secNickName);
        /* string sec_avatar_url = 3; */
        if (message.secAvatarUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.secAvatarUrl);
        /* int32 action = 4; */
        if (message.action !== 0)
            writer.tag(4, WireType.Varint).int32(message.action);
        /* int32 timestamp = 5; */
        if (message.timestamp !== 0)
            writer.tag(5, WireType.Varint).int32(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenFollowingMessage.FollowItem
 */
export const InteractOpenFollowingMessage_FollowItem = new InteractOpenFollowingMessage_FollowItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerformanceFinishMessage$Type extends MessageType<PerformanceFinishMessage> {
    constructor() {
        super("im.PerformanceFinishMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PerformanceFinishMessage>): PerformanceFinishMessage {
        const message = { appId: "", taskId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PerformanceFinishMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerformanceFinishMessage): PerformanceFinishMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string app_id */ 2:
                    message.appId = reader.string();
                    break;
                case /* string task_id */ 3:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerformanceFinishMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 2; */
        if (message.appId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appId);
        /* string task_id = 3; */
        if (message.taskId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PerformanceFinishMessage
 */
export const PerformanceFinishMessage = new PerformanceFinishMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenRewardMessage$Type extends MessageType<InteractOpenRewardMessage> {
    constructor() {
        super("im.InteractOpenRewardMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "reward_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "reward_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "reward_diamonds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "reward_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InteractOpenRewardMessage>): InteractOpenRewardMessage {
        const message = { appId: "", startId: 0n, rewardId: 0, rewardCount: 0, rewardDiamonds: 0, rewardName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenRewardMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenRewardMessage): InteractOpenRewardMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string app_id */ 2:
                    message.appId = reader.string();
                    break;
                case /* int64 start_id */ 3:
                    message.startId = reader.int64().toBigInt();
                    break;
                case /* int32 reward_id */ 4:
                    message.rewardId = reader.int32();
                    break;
                case /* int32 reward_count */ 5:
                    message.rewardCount = reader.int32();
                    break;
                case /* int32 reward_diamonds */ 6:
                    message.rewardDiamonds = reader.int32();
                    break;
                case /* string reward_name */ 7:
                    message.rewardName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenRewardMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 2; */
        if (message.appId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appId);
        /* int64 start_id = 3; */
        if (message.startId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startId);
        /* int32 reward_id = 4; */
        if (message.rewardId !== 0)
            writer.tag(4, WireType.Varint).int32(message.rewardId);
        /* int32 reward_count = 5; */
        if (message.rewardCount !== 0)
            writer.tag(5, WireType.Varint).int32(message.rewardCount);
        /* int32 reward_diamonds = 6; */
        if (message.rewardDiamonds !== 0)
            writer.tag(6, WireType.Varint).int32(message.rewardDiamonds);
        /* string reward_name = 7; */
        if (message.rewardName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rewardName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenRewardMessage
 */
export const InteractOpenRewardMessage = new InteractOpenRewardMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractScreenshotMessage$Type extends MessageType<InteractScreenshotMessage> {
    constructor() {
        super("im.InteractScreenshotMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "recall_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InteractScreenshotMessage>): InteractScreenshotMessage {
        const message = { appId: "", recallId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractScreenshotMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractScreenshotMessage): InteractScreenshotMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string app_id */ 2:
                    message.appId = reader.string();
                    break;
                case /* int64 recall_id */ 3:
                    message.recallId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractScreenshotMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string app_id = 2; */
        if (message.appId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appId);
        /* int64 recall_id = 3; */
        if (message.recallId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.recallId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractScreenshotMessage
 */
export const InteractScreenshotMessage = new InteractScreenshotMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractOpenViolationMessage$Type extends MessageType<InteractOpenViolationMessage> {
    constructor() {
        super("im.InteractOpenViolationMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "violation_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "anchor_tips_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "anchor_tips_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "audience_tips_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "audience_tips_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InteractOpenViolationMessage>): InteractOpenViolationMessage {
        const message = { roomId: "", appId: "", violationType: 0, anchorTipsTitle: "", anchorTipsContent: "", audienceTipsTitle: "", audienceTipsContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractOpenViolationMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractOpenViolationMessage): InteractOpenViolationMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string room_id */ 2:
                    message.roomId = reader.string();
                    break;
                case /* string app_id */ 3:
                    message.appId = reader.string();
                    break;
                case /* int32 violation_type */ 4:
                    message.violationType = reader.int32();
                    break;
                case /* string anchor_tips_title */ 5:
                    message.anchorTipsTitle = reader.string();
                    break;
                case /* string anchor_tips_content */ 6:
                    message.anchorTipsContent = reader.string();
                    break;
                case /* string audience_tips_title */ 7:
                    message.audienceTipsTitle = reader.string();
                    break;
                case /* string audience_tips_content */ 8:
                    message.audienceTipsContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InteractOpenViolationMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string room_id = 2; */
        if (message.roomId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomId);
        /* string app_id = 3; */
        if (message.appId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.appId);
        /* int32 violation_type = 4; */
        if (message.violationType !== 0)
            writer.tag(4, WireType.Varint).int32(message.violationType);
        /* string anchor_tips_title = 5; */
        if (message.anchorTipsTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.anchorTipsTitle);
        /* string anchor_tips_content = 6; */
        if (message.anchorTipsContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.anchorTipsContent);
        /* string audience_tips_title = 7; */
        if (message.audienceTipsTitle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.audienceTipsTitle);
        /* string audience_tips_content = 8; */
        if (message.audienceTipsContent !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.audienceTipsContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InteractOpenViolationMessage
 */
export const InteractOpenViolationMessage = new InteractOpenViolationMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomIndicatorMessage$Type extends MessageType<RoomIndicatorMessage> {
    constructor() {
        super("im.RoomIndicatorMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "biz_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "biz_info", kind: "message", T: () => CommonBizInfo }
        ]);
    }
    create(value?: PartialMessage<RoomIndicatorMessage>): RoomIndicatorMessage {
        const message = { bizType: 0n, status: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomIndicatorMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomIndicatorMessage): RoomIndicatorMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 biz_type */ 2:
                    message.bizType = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* im.CommonBizInfo biz_info */ 4:
                    message.bizInfo = CommonBizInfo.internalBinaryRead(reader, reader.uint32(), options, message.bizInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomIndicatorMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 biz_type = 2; */
        if (message.bizType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.bizType);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* im.CommonBizInfo biz_info = 4; */
        if (message.bizInfo)
            CommonBizInfo.internalBinaryWrite(message.bizInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomIndicatorMessage
 */
export const RoomIndicatorMessage = new RoomIndicatorMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonBizInfo$Type extends MessageType<CommonBizInfo> {
    constructor() {
        super("im.CommonBizInfo", [
            { no: 1, name: "jump_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BizContent }
        ]);
    }
    create(value?: PartialMessage<CommonBizInfo>): CommonBizInfo {
        const message = { jumpSchema: "", contents: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonBizInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonBizInfo): CommonBizInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string jump_schema */ 1:
                    message.jumpSchema = reader.string();
                    break;
                case /* repeated im.BizContent contents */ 2:
                    message.contents.push(BizContent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonBizInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string jump_schema = 1; */
        if (message.jumpSchema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jumpSchema);
        /* repeated im.BizContent contents = 2; */
        for (let i = 0; i < message.contents.length; i++)
            BizContent.internalBinaryWrite(message.contents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommonBizInfo
 */
export const CommonBizInfo = new CommonBizInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotText$Type extends MessageType<HotText> {
    constructor() {
        super("im.HotText", [
            { no: 1, name: "number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "text_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HotText>): HotText {
        const message = { number: 0n, textContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotText): HotText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 number */ 1:
                    message.number = reader.int64().toBigInt();
                    break;
                case /* string text_content */ 2:
                    message.textContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HotText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 number = 1; */
        if (message.number !== 0n)
            writer.tag(1, WireType.Varint).int64(message.number);
        /* string text_content = 2; */
        if (message.textContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HotText
 */
export const HotText = new HotText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizContent$Type extends MessageType<BizContent> {
    constructor() {
        super("im.BizContent", [
            { no: 1, name: "content_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "text_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image_content", kind: "message", T: () => Image },
            { no: 5, name: "hot_text_content", kind: "message", T: () => HotText }
        ]);
    }
    create(value?: PartialMessage<BizContent>): BizContent {
        const message = { contentType: 0, number: 0n, textContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BizContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BizContent): BizContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 content_type */ 1:
                    message.contentType = reader.int32();
                    break;
                case /* int64 number */ 2:
                    message.number = reader.int64().toBigInt();
                    break;
                case /* string text_content */ 3:
                    message.textContent = reader.string();
                    break;
                case /* data.Image image_content */ 4:
                    message.imageContent = Image.internalBinaryRead(reader, reader.uint32(), options, message.imageContent);
                    break;
                case /* im.HotText hot_text_content */ 5:
                    message.hotTextContent = HotText.internalBinaryRead(reader, reader.uint32(), options, message.hotTextContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BizContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 content_type = 1; */
        if (message.contentType !== 0)
            writer.tag(1, WireType.Varint).int32(message.contentType);
        /* int64 number = 2; */
        if (message.number !== 0n)
            writer.tag(2, WireType.Varint).int64(message.number);
        /* string text_content = 3; */
        if (message.textContent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textContent);
        /* data.Image image_content = 4; */
        if (message.imageContent)
            Image.internalBinaryWrite(message.imageContent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* im.HotText hot_text_content = 5; */
        if (message.hotTextContent)
            HotText.internalBinaryWrite(message.hotTextContent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.BizContent
 */
export const BizContent = new BizContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrafficSceneMessage$Type extends MessageType<TrafficSceneMessage> {
    constructor() {
        super("im.TrafficSceneMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "is_keep", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TrafficSceneMessage>): TrafficSceneMessage {
        const message = { number: 0n, status: 0n, icon: "", type: 0n, isKeep: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrafficSceneMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrafficSceneMessage): TrafficSceneMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 number */ 2:
                    message.number = reader.int64().toBigInt();
                    break;
                case /* int64 status */ 3:
                    message.status = reader.int64().toBigInt();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                case /* int64 type */ 5:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* bool is_keep */ 6:
                    message.isKeep = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrafficSceneMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 number = 2; */
        if (message.number !== 0n)
            writer.tag(2, WireType.Varint).int64(message.number);
        /* int64 status = 3; */
        if (message.status !== 0n)
            writer.tag(3, WireType.Varint).int64(message.status);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        /* int64 type = 5; */
        if (message.type !== 0n)
            writer.tag(5, WireType.Varint).int64(message.type);
        /* bool is_keep = 6; */
        if (message.isKeep !== false)
            writer.tag(6, WireType.Varint).bool(message.isKeep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TrafficSceneMessage
 */
export const TrafficSceneMessage = new TrafficSceneMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WelfareProjectOperateMessage$Type extends MessageType<WelfareProjectOperateMessage> {
    constructor() {
        super("im.WelfareProjectOperateMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "op_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "project", kind: "message", T: () => WelfareProjectInfo }
        ]);
    }
    create(value?: PartialMessage<WelfareProjectOperateMessage>): WelfareProjectOperateMessage {
        const message = { opType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WelfareProjectOperateMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WelfareProjectOperateMessage): WelfareProjectOperateMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 op_type */ 2:
                    message.opType = reader.int64().toBigInt();
                    break;
                case /* data.WelfareProjectInfo project */ 3:
                    message.project = WelfareProjectInfo.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WelfareProjectOperateMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 op_type = 2; */
        if (message.opType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.opType);
        /* data.WelfareProjectInfo project = 3; */
        if (message.project)
            WelfareProjectInfo.internalBinaryWrite(message.project, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WelfareProjectOperateMessage
 */
export const WelfareProjectOperateMessage = new WelfareProjectOperateMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WishFinishMessage$Type extends MessageType<WishFinishMessage> {
    constructor() {
        super("im.WishFinishMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "gesture_image_single", kind: "message", T: () => Image },
            { no: 3, name: "gesture_image_double", kind: "message", T: () => Image },
            { no: 4, name: "display_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "effect_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WishFinishMessage>): WishFinishMessage {
        const message = { displaySeconds: 0n, effectId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WishFinishMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WishFinishMessage): WishFinishMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* data.Image gesture_image_single */ 2:
                    message.gestureImageSingle = Image.internalBinaryRead(reader, reader.uint32(), options, message.gestureImageSingle);
                    break;
                case /* data.Image gesture_image_double */ 3:
                    message.gestureImageDouble = Image.internalBinaryRead(reader, reader.uint32(), options, message.gestureImageDouble);
                    break;
                case /* int64 display_seconds */ 4:
                    message.displaySeconds = reader.int64().toBigInt();
                    break;
                case /* int64 effect_id */ 5:
                    message.effectId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WishFinishMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Image gesture_image_single = 2; */
        if (message.gestureImageSingle)
            Image.internalBinaryWrite(message.gestureImageSingle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Image gesture_image_double = 3; */
        if (message.gestureImageDouble)
            Image.internalBinaryWrite(message.gestureImageDouble, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 display_seconds = 4; */
        if (message.displaySeconds !== 0n)
            writer.tag(4, WireType.Varint).int64(message.displaySeconds);
        /* int64 effect_id = 5; */
        if (message.effectId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.effectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WishFinishMessage
 */
export const WishFinishMessage = new WishFinishMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceGiftSyncData$Type extends MessageType<AudienceGiftSyncData> {
    constructor() {
        super("im.AudienceGiftSyncData", [
            { no: 1, name: "audience_receiver_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GiftAudienceReceiverItem },
            { no: 2, name: "sync_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AudienceGiftSyncData>): AudienceGiftSyncData {
        const message = { audienceReceiverList: [], syncType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceGiftSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceGiftSyncData): AudienceGiftSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.GiftAudienceReceiverItem audience_receiver_list */ 1:
                    message.audienceReceiverList.push(GiftAudienceReceiverItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 sync_type */ 2:
                    message.syncType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceGiftSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.GiftAudienceReceiverItem audience_receiver_list = 1; */
        for (let i = 0; i < message.audienceReceiverList.length; i++)
            GiftAudienceReceiverItem.internalBinaryWrite(message.audienceReceiverList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 sync_type = 2; */
        if (message.syncType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.syncType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.AudienceGiftSyncData
 */
export const AudienceGiftSyncData = new AudienceGiftSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CameraShareStateSyncData$Type extends MessageType<CameraShareStateSyncData> {
    constructor() {
        super("im.CameraShareStateSyncData", [
            { no: 1, name: "share_state", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CameraShareStateSyncData>): CameraShareStateSyncData {
        const message = { shareState: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CameraShareStateSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CameraShareStateSyncData): CameraShareStateSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 share_state */ 1:
                    message.shareState = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CameraShareStateSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 share_state = 1; */
        if (message.shareState !== 0)
            writer.tag(1, WireType.Varint).int32(message.shareState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CameraShareStateSyncData
 */
export const CameraShareStateSyncData = new CameraShareStateSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelLinkMicSyncData$Type extends MessageType<RoomChannelLinkMicSyncData> {
    constructor() {
        super("im.RoomChannelLinkMicSyncData", [
            { no: 1, name: "channel_link_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChannelListUser },
            { no: 2, name: "placeholder", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rtc_room_id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelLinkMicSyncData>): RoomChannelLinkMicSyncData {
        const message = { channelLinkUsers: [], placeholder: 0n, rtcRoomIdStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelLinkMicSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelLinkMicSyncData): RoomChannelLinkMicSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ChannelListUser channel_link_users */ 1:
                    message.channelLinkUsers.push(ChannelListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 placeholder */ 2:
                    message.placeholder = reader.int64().toBigInt();
                    break;
                case /* string rtc_room_id_str */ 3:
                    message.rtcRoomIdStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelLinkMicSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ChannelListUser channel_link_users = 1; */
        for (let i = 0; i < message.channelLinkUsers.length; i++)
            ChannelListUser.internalBinaryWrite(message.channelLinkUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 placeholder = 2; */
        if (message.placeholder !== 0n)
            writer.tag(2, WireType.Varint).int64(message.placeholder);
        /* string rtc_room_id_str = 3; */
        if (message.rtcRoomIdStr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rtcRoomIdStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelLinkMicSyncData
 */
export const RoomChannelLinkMicSyncData = new RoomChannelLinkMicSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatCarnivalSyncData$Type extends MessageType<ChatCarnivalSyncData> {
    constructor() {
        super("im.ChatCarnivalSyncData", [
            { no: 1, name: "data", kind: "message", T: () => ChatCarnivalMessage }
        ]);
    }
    create(value?: PartialMessage<ChatCarnivalSyncData>): ChatCarnivalSyncData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatCarnivalSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatCarnivalSyncData): ChatCarnivalSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.ChatCarnivalMessage data */ 1:
                    message.data = ChatCarnivalMessage.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatCarnivalSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.ChatCarnivalMessage data = 1; */
        if (message.data)
            ChatCarnivalMessage.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.ChatCarnivalSyncData
 */
export const ChatCarnivalSyncData = new ChatCarnivalSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Comment$Type extends MessageType<Comment> {
    constructor() {
        super("im.Comment", [
            { no: 1, name: "comment_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "comment_user", kind: "message", T: () => Comment_User },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tag", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "create_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "thumbup_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "children_comment", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Comment },
            { no: 9, name: "audit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "first_reply", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "dress_info", kind: "message", T: () => Comment_DressInfo }
        ]);
    }
    create(value?: PartialMessage<Comment>): Comment {
        const message = { commentId: 0n, text: "", tag: 0, public: false, createTimestamp: 0n, thumbupNumber: 0, childrenComment: [], audit: 0, firstReply: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Comment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Comment): Comment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 comment_id */ 1:
                    message.commentId = reader.int64().toBigInt();
                    break;
                case /* im.Comment.User comment_user */ 2:
                    message.commentUser = Comment_User.internalBinaryRead(reader, reader.uint32(), options, message.commentUser);
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* int32 tag */ 4:
                    message.tag = reader.int32();
                    break;
                case /* bool public */ 5:
                    message.public = reader.bool();
                    break;
                case /* int64 create_timestamp */ 6:
                    message.createTimestamp = reader.int64().toBigInt();
                    break;
                case /* int32 thumbup_number */ 7:
                    message.thumbupNumber = reader.int32();
                    break;
                case /* repeated im.Comment children_comment */ 8:
                    message.childrenComment.push(Comment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 audit */ 9:
                    message.audit = reader.int32();
                    break;
                case /* bool first_reply */ 10:
                    message.firstReply = reader.bool();
                    break;
                case /* im.Comment.DressInfo dress_info */ 11:
                    message.dressInfo = Comment_DressInfo.internalBinaryRead(reader, reader.uint32(), options, message.dressInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Comment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 comment_id = 1; */
        if (message.commentId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.commentId);
        /* im.Comment.User comment_user = 2; */
        if (message.commentUser)
            Comment_User.internalBinaryWrite(message.commentUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* int32 tag = 4; */
        if (message.tag !== 0)
            writer.tag(4, WireType.Varint).int32(message.tag);
        /* bool public = 5; */
        if (message.public !== false)
            writer.tag(5, WireType.Varint).bool(message.public);
        /* int64 create_timestamp = 6; */
        if (message.createTimestamp !== 0n)
            writer.tag(6, WireType.Varint).int64(message.createTimestamp);
        /* int32 thumbup_number = 7; */
        if (message.thumbupNumber !== 0)
            writer.tag(7, WireType.Varint).int32(message.thumbupNumber);
        /* repeated im.Comment children_comment = 8; */
        for (let i = 0; i < message.childrenComment.length; i++)
            Comment.internalBinaryWrite(message.childrenComment[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 audit = 9; */
        if (message.audit !== 0)
            writer.tag(9, WireType.Varint).int32(message.audit);
        /* bool first_reply = 10; */
        if (message.firstReply !== false)
            writer.tag(10, WireType.Varint).bool(message.firstReply);
        /* im.Comment.DressInfo dress_info = 11; */
        if (message.dressInfo)
            Comment_DressInfo.internalBinaryWrite(message.dressInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Comment
 */
export const Comment = new Comment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Comment_User$Type extends MessageType<Comment_User> {
    constructor() {
        super("im.Comment.User", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "short_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "avatar_thumb", kind: "message", T: () => Image },
            { no: 6, name: "authentication_info", kind: "message", T: () => User_AuthenticationInfo }
        ]);
    }
    create(value?: PartialMessage<Comment_User>): Comment_User {
        const message = { id: 0n, shortId: 0n, nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Comment_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Comment_User): Comment_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 short_id */ 2:
                    message.shortId = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* data.Image avatar_thumb */ 5:
                    message.avatarThumb = Image.internalBinaryRead(reader, reader.uint32(), options, message.avatarThumb);
                    break;
                case /* data.User.AuthenticationInfo authentication_info */ 6:
                    message.authenticationInfo = User_AuthenticationInfo.internalBinaryRead(reader, reader.uint32(), options, message.authenticationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Comment_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 short_id = 2; */
        if (message.shortId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.shortId);
        /* string nickname = 3; */
        if (message.nickname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickname);
        /* data.Image avatar_thumb = 5; */
        if (message.avatarThumb)
            Image.internalBinaryWrite(message.avatarThumb, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* data.User.AuthenticationInfo authentication_info = 6; */
        if (message.authenticationInfo)
            User_AuthenticationInfo.internalBinaryWrite(message.authenticationInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Comment.User
 */
export const Comment_User = new Comment_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Comment_DressInfo$Type extends MessageType<Comment_DressInfo> {
    constructor() {
        super("im.Comment.DressInfo", [
            { no: 1, name: "cover_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "badge_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Comment_DressInfo>): Comment_DressInfo {
        const message = { coverId: 0n, badgeId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Comment_DressInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Comment_DressInfo): Comment_DressInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 cover_id */ 1:
                    message.coverId = reader.int64().toBigInt();
                    break;
                case /* int64 badge_id */ 2:
                    message.badgeId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Comment_DressInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 cover_id = 1; */
        if (message.coverId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.coverId);
        /* int64 badge_id = 2; */
        if (message.badgeId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.badgeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Comment.DressInfo
 */
export const Comment_DressInfo = new Comment_DressInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentsSyncData$Type extends MessageType<CommentsSyncData> {
    constructor() {
        super("im.CommentsSyncData", [
            { no: 1, name: "comments", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "next_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "total_comment_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommentsSyncData>): CommentsSyncData {
        const message = { comments: [], nextTimestamp: 0n, totalCommentNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommentsSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentsSyncData): CommentsSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string comments */ 1:
                    message.comments.push(reader.string());
                    break;
                case /* int64 next_timestamp */ 2:
                    message.nextTimestamp = reader.int64().toBigInt();
                    break;
                case /* int32 total_comment_number */ 3:
                    message.totalCommentNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentsSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string comments = 1; */
        for (let i = 0; i < message.comments.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.comments[i]);
        /* int64 next_timestamp = 2; */
        if (message.nextTimestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.nextTimestamp);
        /* int32 total_comment_number = 3; */
        if (message.totalCommentNumber !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalCommentNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CommentsSyncData
 */
export const CommentsSyncData = new CommentsSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleLikeDetailV2$Type extends MessageType<DoubleLikeDetailV2> {
    constructor() {
        super("im.DoubleLikeDetailV2", [
            { no: 1, name: "double_flag", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "seq_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "renewals_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "triggers_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DoubleLikeDetailV2>): DoubleLikeDetailV2 {
        const message = { doubleFlag: false, seqId: 0, renewalsNum: 0, triggersNum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoubleLikeDetailV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleLikeDetailV2): DoubleLikeDetailV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool double_flag */ 1:
                    message.doubleFlag = reader.bool();
                    break;
                case /* int32 seq_id */ 2:
                    message.seqId = reader.int32();
                    break;
                case /* int32 renewals_num */ 3:
                    message.renewalsNum = reader.int32();
                    break;
                case /* int32 triggers_num */ 4:
                    message.triggersNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleLikeDetailV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool double_flag = 1; */
        if (message.doubleFlag !== false)
            writer.tag(1, WireType.Varint).bool(message.doubleFlag);
        /* int32 seq_id = 2; */
        if (message.seqId !== 0)
            writer.tag(2, WireType.Varint).int32(message.seqId);
        /* int32 renewals_num = 3; */
        if (message.renewalsNum !== 0)
            writer.tag(3, WireType.Varint).int32(message.renewalsNum);
        /* int32 triggers_num = 4; */
        if (message.triggersNum !== 0)
            writer.tag(4, WireType.Varint).int32(message.triggersNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DoubleLikeDetailV2
 */
export const DoubleLikeDetailV2 = new DoubleLikeDetailV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleLikeSyncData$Type extends MessageType<DoubleLikeSyncData> {
    constructor() {
        super("im.DoubleLikeSyncData", [
            { no: 1, name: "doubleLikeStatus", kind: "message", T: () => DoubleLikeDetailV2 },
            { no: 2, name: "self_display_text", kind: "message", T: () => Text },
            { no: 3, name: "normal_display_text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<DoubleLikeSyncData>): DoubleLikeSyncData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoubleLikeSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleLikeSyncData): DoubleLikeSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.DoubleLikeDetailV2 doubleLikeStatus */ 1:
                    message.doubleLikeStatus = DoubleLikeDetailV2.internalBinaryRead(reader, reader.uint32(), options, message.doubleLikeStatus);
                    break;
                case /* data.Text self_display_text */ 2:
                    message.selfDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.selfDisplayText);
                    break;
                case /* data.Text normal_display_text */ 3:
                    message.normalDisplayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.normalDisplayText);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleLikeSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.DoubleLikeDetailV2 doubleLikeStatus = 1; */
        if (message.doubleLikeStatus)
            DoubleLikeDetailV2.internalBinaryWrite(message.doubleLikeStatus, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.Text self_display_text = 2; */
        if (message.selfDisplayText)
            Text.internalBinaryWrite(message.selfDisplayText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* data.Text normal_display_text = 3; */
        if (message.normalDisplayText)
            Text.internalBinaryWrite(message.normalDisplayText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.DoubleLikeSyncData
 */
export const DoubleLikeSyncData = new DoubleLikeSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FastChatSyncData$Type extends MessageType<FastChatSyncData> {
    constructor() {
        super("im.FastChatSyncData", [
            { no: 1, name: "chat_support_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fast_chat", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "fast_chat_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FastChatSyncData>): FastChatSyncData {
        const message = { chatSupportType: 0, toast: "", hint: "", color: "", fastChat: [], fastChatSwitch: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FastChatSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FastChatSyncData): FastChatSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 chat_support_type */ 1:
                    message.chatSupportType = reader.int32();
                    break;
                case /* string toast */ 2:
                    message.toast = reader.string();
                    break;
                case /* string hint */ 4:
                    message.hint = reader.string();
                    break;
                case /* string color */ 5:
                    message.color = reader.string();
                    break;
                case /* repeated string fast_chat */ 3:
                    message.fastChat.push(reader.string());
                    break;
                case /* bool fast_chat_switch */ 6:
                    message.fastChatSwitch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FastChatSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 chat_support_type = 1; */
        if (message.chatSupportType !== 0)
            writer.tag(1, WireType.Varint).int32(message.chatSupportType);
        /* string toast = 2; */
        if (message.toast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toast);
        /* string hint = 4; */
        if (message.hint !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hint);
        /* string color = 5; */
        if (message.color !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.color);
        /* repeated string fast_chat = 3; */
        for (let i = 0; i < message.fastChat.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.fastChat[i]);
        /* bool fast_chat_switch = 6; */
        if (message.fastChatSwitch !== false)
            writer.tag(6, WireType.Varint).bool(message.fastChatSwitch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FastChatSyncData
 */
export const FastChatSyncData = new FastChatSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FixedChatSyncData$Type extends MessageType<FixedChatSyncData> {
    constructor() {
        super("im.FixedChatSyncData", [
            { no: 1, name: "hint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fast_chat_info", kind: "message", T: () => FastChatInfo },
            { no: 3, name: "fixed_chat_info", kind: "message", T: () => FixedChatInfo }
        ]);
    }
    create(value?: PartialMessage<FixedChatSyncData>): FixedChatSyncData {
        const message = { hint: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FixedChatSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixedChatSyncData): FixedChatSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hint */ 1:
                    message.hint = reader.string();
                    break;
                case /* im.FastChatInfo fast_chat_info */ 2:
                    message.fastChatInfo = FastChatInfo.internalBinaryRead(reader, reader.uint32(), options, message.fastChatInfo);
                    break;
                case /* im.FixedChatInfo fixed_chat_info */ 3:
                    message.fixedChatInfo = FixedChatInfo.internalBinaryRead(reader, reader.uint32(), options, message.fixedChatInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixedChatSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hint = 1; */
        if (message.hint !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hint);
        /* im.FastChatInfo fast_chat_info = 2; */
        if (message.fastChatInfo)
            FastChatInfo.internalBinaryWrite(message.fastChatInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.FixedChatInfo fixed_chat_info = 3; */
        if (message.fixedChatInfo)
            FixedChatInfo.internalBinaryWrite(message.fixedChatInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FixedChatSyncData
 */
export const FixedChatSyncData = new FixedChatSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FastChatInfo$Type extends MessageType<FastChatInfo> {
    constructor() {
        super("im.FastChatInfo", [
            { no: 1, name: "fast_chat_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "bubble_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fast_chat_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FastChatInfo_FastChatDetail }
        ]);
    }
    create(value?: PartialMessage<FastChatInfo>): FastChatInfo {
        const message = { fastChatSwitch: false, bubbleColor: "", fastChatList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FastChatInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FastChatInfo): FastChatInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool fast_chat_switch */ 1:
                    message.fastChatSwitch = reader.bool();
                    break;
                case /* string bubble_color */ 2:
                    message.bubbleColor = reader.string();
                    break;
                case /* repeated im.FastChatInfo.FastChatDetail fast_chat_list */ 3:
                    message.fastChatList.push(FastChatInfo_FastChatDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FastChatInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool fast_chat_switch = 1; */
        if (message.fastChatSwitch !== false)
            writer.tag(1, WireType.Varint).bool(message.fastChatSwitch);
        /* string bubble_color = 2; */
        if (message.bubbleColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bubbleColor);
        /* repeated im.FastChatInfo.FastChatDetail fast_chat_list = 3; */
        for (let i = 0; i < message.fastChatList.length; i++)
            FastChatInfo_FastChatDetail.internalBinaryWrite(message.fastChatList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FastChatInfo
 */
export const FastChatInfo = new FastChatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FastChatInfo_FastChatDetail$Type extends MessageType<FastChatInfo_FastChatDetail> {
    constructor() {
        super("im.FastChatInfo.FastChatDetail", [
            { no: 1, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FastChatInfo_FastChatDetail>): FastChatInfo_FastChatDetail {
        const message = { type: 0n, content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FastChatInfo_FastChatDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FastChatInfo_FastChatDetail): FastChatInfo_FastChatDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 type */ 1:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FastChatInfo_FastChatDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 type = 1; */
        if (message.type !== 0n)
            writer.tag(1, WireType.Varint).int64(message.type);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FastChatInfo.FastChatDetail
 */
export const FastChatInfo_FastChatDetail = new FastChatInfo_FastChatDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FixedChatInfo$Type extends MessageType<FixedChatInfo> {
    constructor() {
        super("im.FixedChatInfo", [
            { no: 1, name: "fixed_chat_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fixed_emoji_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FixedChatInfo_EmojiDetail },
            { no: 3, name: "title_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_default_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text_selected_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cancel_icon", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<FixedChatInfo>): FixedChatInfo {
        const message = { fixedChatList: [], fixedEmojiList: [], titleColor: "", textDefaultColor: "", textSelectedColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FixedChatInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixedChatInfo): FixedChatInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string fixed_chat_list */ 1:
                    message.fixedChatList.push(reader.string());
                    break;
                case /* repeated im.FixedChatInfo.EmojiDetail fixed_emoji_list */ 2:
                    message.fixedEmojiList.push(FixedChatInfo_EmojiDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string title_color */ 3:
                    message.titleColor = reader.string();
                    break;
                case /* string text_default_color */ 4:
                    message.textDefaultColor = reader.string();
                    break;
                case /* string text_selected_color */ 5:
                    message.textSelectedColor = reader.string();
                    break;
                case /* data.Image cancel_icon */ 6:
                    message.cancelIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.cancelIcon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixedChatInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string fixed_chat_list = 1; */
        for (let i = 0; i < message.fixedChatList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.fixedChatList[i]);
        /* repeated im.FixedChatInfo.EmojiDetail fixed_emoji_list = 2; */
        for (let i = 0; i < message.fixedEmojiList.length; i++)
            FixedChatInfo_EmojiDetail.internalBinaryWrite(message.fixedEmojiList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title_color = 3; */
        if (message.titleColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.titleColor);
        /* string text_default_color = 4; */
        if (message.textDefaultColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textDefaultColor);
        /* string text_selected_color = 5; */
        if (message.textSelectedColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textSelectedColor);
        /* data.Image cancel_icon = 6; */
        if (message.cancelIcon)
            Image.internalBinaryWrite(message.cancelIcon, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FixedChatInfo
 */
export const FixedChatInfo = new FixedChatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FixedChatInfo_EmojiDetail$Type extends MessageType<FixedChatInfo_EmojiDetail> {
    constructor() {
        super("im.FixedChatInfo.EmojiDetail", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "content", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<FixedChatInfo_EmojiDetail>): FixedChatInfo_EmojiDetail {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FixedChatInfo_EmojiDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixedChatInfo_EmojiDetail): FixedChatInfo_EmojiDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* data.Image content */ 2:
                    message.content = Image.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixedChatInfo_EmojiDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* data.Image content = 2; */
        if (message.content)
            Image.internalBinaryWrite(message.content, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FixedChatInfo.EmojiDetail
 */
export const FixedChatInfo_EmojiDetail = new FixedChatInfo_EmojiDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralCarnivalSyncData$Type extends MessageType<GeneralCarnivalSyncData> {
    constructor() {
        super("im.GeneralCarnivalSyncData", [
            { no: 1, name: "carnival_message", kind: "message", T: () => GeneralCarnivalMessage },
            { no: 2, name: "MillSecondTimeStamp", kind: "scalar", jsonName: "MillSecondTimeStamp", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GeneralCarnivalSyncData>): GeneralCarnivalSyncData {
        const message = { millSecondTimeStamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneralCarnivalSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneralCarnivalSyncData): GeneralCarnivalSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.GeneralCarnivalMessage carnival_message */ 1:
                    message.carnivalMessage = GeneralCarnivalMessage.internalBinaryRead(reader, reader.uint32(), options, message.carnivalMessage);
                    break;
                case /* int64 MillSecondTimeStamp = 2 [json_name = "MillSecondTimeStamp"];*/ 2:
                    message.millSecondTimeStamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneralCarnivalSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.GeneralCarnivalMessage carnival_message = 1; */
        if (message.carnivalMessage)
            GeneralCarnivalMessage.internalBinaryWrite(message.carnivalMessage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 MillSecondTimeStamp = 2 [json_name = "MillSecondTimeStamp"]; */
        if (message.millSecondTimeStamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.millSecondTimeStamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GeneralCarnivalSyncData
 */
export const GeneralCarnivalSyncData = new GeneralCarnivalSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralCarnivalMessage$Type extends MessageType<GeneralCarnivalMessage> {
    constructor() {
        super("im.GeneralCarnivalMessage", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "seq_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_start_timestamp_milliseconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_start_milliseconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "min_remaining_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "word_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "title_image", kind: "message", T: () => Image },
            { no: 10, name: "show_webp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "pre_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "countdown_exit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "exit_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "exit_countdown_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "can_jump", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "move_speed", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "use_privilege_region", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "egg_style", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GeneralCarnivalMessage_CarnivalEggItem },
            { no: 22, name: "egg_show_range", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "can_open_contour", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GeneralCarnivalMessage>): GeneralCarnivalMessage {
        const message = { seqId: 0n, userStartTimestampMilliseconds: 0n, userStartMilliseconds: 0n, duration: 0n, minRemainingDuration: 0n, backgroundColor: "", wordColor: "", showWebp: 0n, preContent: "", content: "", countdownExit: false, exitContent: "", exitCountdownDuration: 0n, canJump: false, schema: "", moveSpeed: 0n, usePrivilegeRegion: 0n, eggStyle: [], eggShowRange: [], canOpenContour: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneralCarnivalMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneralCarnivalMessage): GeneralCarnivalMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* int64 seq_id */ 2:
                    message.seqId = reader.int64().toBigInt();
                    break;
                case /* int64 user_start_timestamp_milliseconds */ 3:
                    message.userStartTimestampMilliseconds = reader.int64().toBigInt();
                    break;
                case /* int64 user_start_milliseconds */ 4:
                    message.userStartMilliseconds = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 5:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 min_remaining_duration */ 6:
                    message.minRemainingDuration = reader.int64().toBigInt();
                    break;
                case /* string background_color */ 7:
                    message.backgroundColor = reader.string();
                    break;
                case /* string word_color */ 8:
                    message.wordColor = reader.string();
                    break;
                case /* data.Image title_image */ 9:
                    message.titleImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.titleImage);
                    break;
                case /* int64 show_webp */ 10:
                    message.showWebp = reader.int64().toBigInt();
                    break;
                case /* string pre_content */ 11:
                    message.preContent = reader.string();
                    break;
                case /* string content */ 12:
                    message.content = reader.string();
                    break;
                case /* bool countdown_exit */ 13:
                    message.countdownExit = reader.bool();
                    break;
                case /* string exit_content */ 14:
                    message.exitContent = reader.string();
                    break;
                case /* int64 exit_countdown_duration */ 15:
                    message.exitCountdownDuration = reader.int64().toBigInt();
                    break;
                case /* bool can_jump */ 16:
                    message.canJump = reader.bool();
                    break;
                case /* string schema */ 17:
                    message.schema = reader.string();
                    break;
                case /* int64 move_speed */ 18:
                    message.moveSpeed = reader.int64().toBigInt();
                    break;
                case /* int64 use_privilege_region */ 20:
                    message.usePrivilegeRegion = reader.int64().toBigInt();
                    break;
                case /* repeated im.GeneralCarnivalMessage.CarnivalEggItem egg_style */ 21:
                    message.eggStyle.push(GeneralCarnivalMessage_CarnivalEggItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int64 egg_show_range */ 22:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.eggShowRange.push(reader.int64().toBigInt());
                    else
                        message.eggShowRange.push(reader.int64().toBigInt());
                    break;
                case /* int64 can_open_contour */ 23:
                    message.canOpenContour = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneralCarnivalMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 seq_id = 2; */
        if (message.seqId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.seqId);
        /* int64 user_start_timestamp_milliseconds = 3; */
        if (message.userStartTimestampMilliseconds !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userStartTimestampMilliseconds);
        /* int64 user_start_milliseconds = 4; */
        if (message.userStartMilliseconds !== 0n)
            writer.tag(4, WireType.Varint).int64(message.userStartMilliseconds);
        /* int64 duration = 5; */
        if (message.duration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.duration);
        /* int64 min_remaining_duration = 6; */
        if (message.minRemainingDuration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.minRemainingDuration);
        /* string background_color = 7; */
        if (message.backgroundColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.backgroundColor);
        /* string word_color = 8; */
        if (message.wordColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.wordColor);
        /* data.Image title_image = 9; */
        if (message.titleImage)
            Image.internalBinaryWrite(message.titleImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int64 show_webp = 10; */
        if (message.showWebp !== 0n)
            writer.tag(10, WireType.Varint).int64(message.showWebp);
        /* string pre_content = 11; */
        if (message.preContent !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.preContent);
        /* string content = 12; */
        if (message.content !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.content);
        /* bool countdown_exit = 13; */
        if (message.countdownExit !== false)
            writer.tag(13, WireType.Varint).bool(message.countdownExit);
        /* string exit_content = 14; */
        if (message.exitContent !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.exitContent);
        /* int64 exit_countdown_duration = 15; */
        if (message.exitCountdownDuration !== 0n)
            writer.tag(15, WireType.Varint).int64(message.exitCountdownDuration);
        /* bool can_jump = 16; */
        if (message.canJump !== false)
            writer.tag(16, WireType.Varint).bool(message.canJump);
        /* string schema = 17; */
        if (message.schema !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.schema);
        /* int64 move_speed = 18; */
        if (message.moveSpeed !== 0n)
            writer.tag(18, WireType.Varint).int64(message.moveSpeed);
        /* int64 use_privilege_region = 20; */
        if (message.usePrivilegeRegion !== 0n)
            writer.tag(20, WireType.Varint).int64(message.usePrivilegeRegion);
        /* repeated im.GeneralCarnivalMessage.CarnivalEggItem egg_style = 21; */
        for (let i = 0; i < message.eggStyle.length; i++)
            GeneralCarnivalMessage_CarnivalEggItem.internalBinaryWrite(message.eggStyle[i], writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 egg_show_range = 22; */
        if (message.eggShowRange.length) {
            writer.tag(22, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.eggShowRange.length; i++)
                writer.int64(message.eggShowRange[i]);
            writer.join();
        }
        /* int64 can_open_contour = 23; */
        if (message.canOpenContour !== 0n)
            writer.tag(23, WireType.Varint).int64(message.canOpenContour);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GeneralCarnivalMessage
 */
export const GeneralCarnivalMessage = new GeneralCarnivalMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralCarnivalMessage_CarnivalDanmakuItem$Type extends MessageType<GeneralCarnivalMessage_CarnivalDanmakuItem> {
    constructor() {
        super("im.GeneralCarnivalMessage.CarnivalDanmakuItem", [
            { no: 1, name: "content_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "background", kind: "message", T: () => FlexImageStruct },
            { no: 3, name: "background_hight", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "background_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "use_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "font_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GeneralCarnivalMessage_CarnivalDanmakuItem>): GeneralCarnivalMessage_CarnivalDanmakuItem {
        const message = { contentColor: "", backgroundHight: 0n, backgroundWidth: 0n, useRate: 0n, fontSize: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneralCarnivalMessage_CarnivalDanmakuItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneralCarnivalMessage_CarnivalDanmakuItem): GeneralCarnivalMessage_CarnivalDanmakuItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content_color */ 1:
                    message.contentColor = reader.string();
                    break;
                case /* im.FlexImageStruct background */ 2:
                    message.background = FlexImageStruct.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int64 background_hight */ 3:
                    message.backgroundHight = reader.int64().toBigInt();
                    break;
                case /* int64 background_width */ 4:
                    message.backgroundWidth = reader.int64().toBigInt();
                    break;
                case /* int64 use_rate */ 5:
                    message.useRate = reader.int64().toBigInt();
                    break;
                case /* int64 font_size */ 6:
                    message.fontSize = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneralCarnivalMessage_CarnivalDanmakuItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content_color = 1; */
        if (message.contentColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contentColor);
        /* im.FlexImageStruct background = 2; */
        if (message.background)
            FlexImageStruct.internalBinaryWrite(message.background, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 background_hight = 3; */
        if (message.backgroundHight !== 0n)
            writer.tag(3, WireType.Varint).int64(message.backgroundHight);
        /* int64 background_width = 4; */
        if (message.backgroundWidth !== 0n)
            writer.tag(4, WireType.Varint).int64(message.backgroundWidth);
        /* int64 use_rate = 5; */
        if (message.useRate !== 0n)
            writer.tag(5, WireType.Varint).int64(message.useRate);
        /* int64 font_size = 6; */
        if (message.fontSize !== 0n)
            writer.tag(6, WireType.Varint).int64(message.fontSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GeneralCarnivalMessage.CarnivalDanmakuItem
 */
export const GeneralCarnivalMessage_CarnivalDanmakuItem = new GeneralCarnivalMessage_CarnivalDanmakuItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralCarnivalMessage_CarnivalDanmakuItemList$Type extends MessageType<GeneralCarnivalMessage_CarnivalDanmakuItemList> {
    constructor() {
        super("im.GeneralCarnivalMessage.CarnivalDanmakuItemList", [
            { no: 1, name: "danmaku_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GeneralCarnivalMessage_CarnivalDanmakuItem }
        ]);
    }
    create(value?: PartialMessage<GeneralCarnivalMessage_CarnivalDanmakuItemList>): GeneralCarnivalMessage_CarnivalDanmakuItemList {
        const message = { danmakuItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneralCarnivalMessage_CarnivalDanmakuItemList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneralCarnivalMessage_CarnivalDanmakuItemList): GeneralCarnivalMessage_CarnivalDanmakuItemList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.GeneralCarnivalMessage.CarnivalDanmakuItem danmaku_item_list */ 1:
                    message.danmakuItemList.push(GeneralCarnivalMessage_CarnivalDanmakuItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneralCarnivalMessage_CarnivalDanmakuItemList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.GeneralCarnivalMessage.CarnivalDanmakuItem danmaku_item_list = 1; */
        for (let i = 0; i < message.danmakuItemList.length; i++)
            GeneralCarnivalMessage_CarnivalDanmakuItem.internalBinaryWrite(message.danmakuItemList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GeneralCarnivalMessage.CarnivalDanmakuItemList
 */
export const GeneralCarnivalMessage_CarnivalDanmakuItemList = new GeneralCarnivalMessage_CarnivalDanmakuItemList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralCarnivalMessage_CarnivalEggItem$Type extends MessageType<GeneralCarnivalMessage_CarnivalEggItem> {
    constructor() {
        super("im.GeneralCarnivalMessage.CarnivalEggItem", [
            { no: 1, name: "background", kind: "message", T: () => Image },
            { no: 2, name: "background_hight", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "background_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "use_rate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "is_dynamic_egg", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "show_alone", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GeneralCarnivalMessage_CarnivalEggItem>): GeneralCarnivalMessage_CarnivalEggItem {
        const message = { backgroundHight: 0n, backgroundWidth: 0n, useRate: 0n, isDynamicEgg: 0n, showAlone: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneralCarnivalMessage_CarnivalEggItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneralCarnivalMessage_CarnivalEggItem): GeneralCarnivalMessage_CarnivalEggItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image background */ 1:
                    message.background = Image.internalBinaryRead(reader, reader.uint32(), options, message.background);
                    break;
                case /* int64 background_hight */ 2:
                    message.backgroundHight = reader.int64().toBigInt();
                    break;
                case /* int64 background_width */ 3:
                    message.backgroundWidth = reader.int64().toBigInt();
                    break;
                case /* int64 use_rate */ 4:
                    message.useRate = reader.int64().toBigInt();
                    break;
                case /* int64 is_dynamic_egg */ 5:
                    message.isDynamicEgg = reader.int64().toBigInt();
                    break;
                case /* bool show_alone */ 6:
                    message.showAlone = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneralCarnivalMessage_CarnivalEggItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image background = 1; */
        if (message.background)
            Image.internalBinaryWrite(message.background, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 background_hight = 2; */
        if (message.backgroundHight !== 0n)
            writer.tag(2, WireType.Varint).int64(message.backgroundHight);
        /* int64 background_width = 3; */
        if (message.backgroundWidth !== 0n)
            writer.tag(3, WireType.Varint).int64(message.backgroundWidth);
        /* int64 use_rate = 4; */
        if (message.useRate !== 0n)
            writer.tag(4, WireType.Varint).int64(message.useRate);
        /* int64 is_dynamic_egg = 5; */
        if (message.isDynamicEgg !== 0n)
            writer.tag(5, WireType.Varint).int64(message.isDynamicEgg);
        /* bool show_alone = 6; */
        if (message.showAlone !== false)
            writer.tag(6, WireType.Varint).bool(message.showAlone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GeneralCarnivalMessage.CarnivalEggItem
 */
export const GeneralCarnivalMessage_CarnivalEggItem = new GeneralCarnivalMessage_CarnivalEggItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightContainerSyncData$Type extends MessageType<HighlightContainerSyncData> {
    constructor() {
        super("im.HighlightContainerSyncData", [
            { no: 1, name: "highlight_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HighlightItem },
            { no: 2, name: "sync_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "carousel_info", kind: "message", T: () => CarouselInfo }
        ]);
    }
    create(value?: PartialMessage<HighlightContainerSyncData>): HighlightContainerSyncData {
        const message = { highlightItems: [], syncVersion: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightContainerSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightContainerSyncData): HighlightContainerSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.HighlightItem highlight_items */ 1:
                    message.highlightItems.push(HighlightItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 sync_version */ 2:
                    message.syncVersion = reader.int64().toBigInt();
                    break;
                case /* im.CarouselInfo carousel_info */ 3:
                    message.carouselInfo = CarouselInfo.internalBinaryRead(reader, reader.uint32(), options, message.carouselInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightContainerSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.HighlightItem highlight_items = 1; */
        for (let i = 0; i < message.highlightItems.length; i++)
            HighlightItem.internalBinaryWrite(message.highlightItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 sync_version = 2; */
        if (message.syncVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.syncVersion);
        /* im.CarouselInfo carousel_info = 3; */
        if (message.carouselInfo)
            CarouselInfo.internalBinaryWrite(message.carouselInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightContainerSyncData
 */
export const HighlightContainerSyncData = new HighlightContainerSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightItem$Type extends MessageType<HighlightItem> {
    constructor() {
        super("im.HighlightItem", [
            { no: 1, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "position", kind: "message", T: () => Position },
            { no: 100, name: "data_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 102, name: "appointment_data", kind: "message", T: () => HighlightDataAppointment },
            { no: 103, name: "answer_data", kind: "message", T: () => HighlightDataAnswer },
            { no: 104, name: "comment_data", kind: "message", T: () => HighlightDataComment },
            { no: 105, name: "video_data", kind: "message", T: () => HighlightDataVideo },
            { no: 106, name: "micro_app_data", kind: "message", T: () => HighlightDataMicroApp },
            { no: 107, name: "im_common_data", kind: "message", T: () => HighlightDataImCommon }
        ]);
    }
    create(value?: PartialMessage<HighlightItem>): HighlightItem {
        const message = { itemId: 0n, version: 0n, endTime: 0n, dataType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightItem): HighlightItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 item_id */ 1:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* int64 version */ 2:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* int64 end_time */ 3:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* im.Position position */ 4:
                    message.position = Position.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* int32 data_type */ 100:
                    message.dataType = reader.int32();
                    break;
                case /* im.HighlightDataAppointment appointment_data */ 102:
                    message.appointmentData = HighlightDataAppointment.internalBinaryRead(reader, reader.uint32(), options, message.appointmentData);
                    break;
                case /* im.HighlightDataAnswer answer_data */ 103:
                    message.answerData = HighlightDataAnswer.internalBinaryRead(reader, reader.uint32(), options, message.answerData);
                    break;
                case /* im.HighlightDataComment comment_data */ 104:
                    message.commentData = HighlightDataComment.internalBinaryRead(reader, reader.uint32(), options, message.commentData);
                    break;
                case /* im.HighlightDataVideo video_data */ 105:
                    message.videoData = HighlightDataVideo.internalBinaryRead(reader, reader.uint32(), options, message.videoData);
                    break;
                case /* im.HighlightDataMicroApp micro_app_data */ 106:
                    message.microAppData = HighlightDataMicroApp.internalBinaryRead(reader, reader.uint32(), options, message.microAppData);
                    break;
                case /* im.HighlightDataImCommon im_common_data */ 107:
                    message.imCommonData = HighlightDataImCommon.internalBinaryRead(reader, reader.uint32(), options, message.imCommonData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 item_id = 1; */
        if (message.itemId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.itemId);
        /* int64 version = 2; */
        if (message.version !== 0n)
            writer.tag(2, WireType.Varint).int64(message.version);
        /* int64 end_time = 3; */
        if (message.endTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.endTime);
        /* im.Position position = 4; */
        if (message.position)
            Position.internalBinaryWrite(message.position, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 data_type = 100; */
        if (message.dataType !== 0)
            writer.tag(100, WireType.Varint).int32(message.dataType);
        /* im.HighlightDataAppointment appointment_data = 102; */
        if (message.appointmentData)
            HighlightDataAppointment.internalBinaryWrite(message.appointmentData, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* im.HighlightDataAnswer answer_data = 103; */
        if (message.answerData)
            HighlightDataAnswer.internalBinaryWrite(message.answerData, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* im.HighlightDataComment comment_data = 104; */
        if (message.commentData)
            HighlightDataComment.internalBinaryWrite(message.commentData, writer.tag(104, WireType.LengthDelimited).fork(), options).join();
        /* im.HighlightDataVideo video_data = 105; */
        if (message.videoData)
            HighlightDataVideo.internalBinaryWrite(message.videoData, writer.tag(105, WireType.LengthDelimited).fork(), options).join();
        /* im.HighlightDataMicroApp micro_app_data = 106; */
        if (message.microAppData)
            HighlightDataMicroApp.internalBinaryWrite(message.microAppData, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* im.HighlightDataImCommon im_common_data = 107; */
        if (message.imCommonData)
            HighlightDataImCommon.internalBinaryWrite(message.imCommonData, writer.tag(107, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightItem
 */
export const HighlightItem = new HighlightItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightTempInfo$Type extends MessageType<HighlightTempInfo> {
    constructor() {
        super("im.HighlightTempInfo", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "item_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HighlightTempInfo>): HighlightTempInfo {
        const message = { itemId: "", itemCover: "", itemName: "", itemContent: "", schema: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightTempInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightTempInfo): HighlightTempInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* string item_cover */ 2:
                    message.itemCover = reader.string();
                    break;
                case /* string item_name */ 3:
                    message.itemName = reader.string();
                    break;
                case /* string item_content */ 4:
                    message.itemContent = reader.string();
                    break;
                case /* string schema */ 5:
                    message.schema = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightTempInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* string item_cover = 2; */
        if (message.itemCover !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemCover);
        /* string item_name = 3; */
        if (message.itemName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemName);
        /* string item_content = 4; */
        if (message.itemContent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.itemContent);
        /* string schema = 5; */
        if (message.schema !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.schema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightTempInfo
 */
export const HighlightTempInfo = new HighlightTempInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Position$Type extends MessageType<Position> {
    constructor() {
        super("im.Position", [
            { no: 1, name: "position_x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "position_y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Position>): Position {
        const message = { positionX: 0, positionY: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Position>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Position): Position {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double position_x */ 1:
                    message.positionX = reader.double();
                    break;
                case /* double position_y */ 2:
                    message.positionY = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Position, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double position_x = 1; */
        if (message.positionX !== 0)
            writer.tag(1, WireType.Bit64).double(message.positionX);
        /* double position_y = 2; */
        if (message.positionY !== 0)
            writer.tag(2, WireType.Bit64).double(message.positionY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Position
 */
export const Position = new Position$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarouselInfo$Type extends MessageType<CarouselInfo> {
    constructor() {
        super("im.CarouselInfo", [
            { no: 1, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "item_group", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CarouselInfo>): CarouselInfo {
        const message = { time: 0n, itemGroup: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CarouselInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarouselInfo): CarouselInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 time */ 1:
                    message.time = reader.int64().toBigInt();
                    break;
                case /* repeated int64 item_group */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemGroup.push(reader.int64().toBigInt());
                    else
                        message.itemGroup.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarouselInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 time = 1; */
        if (message.time !== 0n)
            writer.tag(1, WireType.Varint).int64(message.time);
        /* repeated int64 item_group = 2; */
        if (message.itemGroup.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemGroup.length; i++)
                writer.int64(message.itemGroup[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.CarouselInfo
 */
export const CarouselInfo = new CarouselInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperateInfo$Type extends MessageType<OperateInfo> {
    constructor() {
        super("im.OperateInfo", [
            { no: 1, name: "creator_text", kind: "message", T: () => Text },
            { no: 2, name: "current_user_can_delete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OperateInfo>): OperateInfo {
        const message = { currentUserCanDelete: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OperateInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperateInfo): OperateInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text creator_text */ 1:
                    message.creatorText = Text.internalBinaryRead(reader, reader.uint32(), options, message.creatorText);
                    break;
                case /* bool current_user_can_delete */ 2:
                    message.currentUserCanDelete = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperateInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text creator_text = 1; */
        if (message.creatorText)
            Text.internalBinaryWrite(message.creatorText, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool current_user_can_delete = 2; */
        if (message.currentUserCanDelete !== false)
            writer.tag(2, WireType.Varint).bool(message.currentUserCanDelete);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OperateInfo
 */
export const OperateInfo = new OperateInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinCommon$Type extends MessageType<PinCommon> {
    constructor() {
        super("im.PinCommon", [
            { no: 1, name: "top_title", kind: "message", T: () => Text },
            { no: 2, name: "operate_info", kind: "message", T: () => OperateInfo }
        ]);
    }
    create(value?: PartialMessage<PinCommon>): PinCommon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PinCommon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PinCommon): PinCommon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Text top_title */ 1:
                    message.topTitle = Text.internalBinaryRead(reader, reader.uint32(), options, message.topTitle);
                    break;
                case /* im.OperateInfo operate_info */ 2:
                    message.operateInfo = OperateInfo.internalBinaryRead(reader, reader.uint32(), options, message.operateInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PinCommon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Text top_title = 1; */
        if (message.topTitle)
            Text.internalBinaryWrite(message.topTitle, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* im.OperateInfo operate_info = 2; */
        if (message.operateInfo)
            OperateInfo.internalBinaryWrite(message.operateInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PinCommon
 */
export const PinCommon = new PinCommon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightDataAppointment$Type extends MessageType<HighlightDataAppointment> {
    constructor() {
        super("im.HighlightDataAppointment", [
            { no: 1, name: "appointment_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "demotion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "anchor_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "current_number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "appointment_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "scheduled_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "scheduled_date", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "scheduled_weekdays", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "show_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "date_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "time_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HighlightDataAppointment>): HighlightDataAppointment {
        const message = { appointmentTimestamp: 0n, demotion: false, anchorUid: 0n, currentNumber: 0n, text: "", appointmentId: 0n, scheduledTime: 0, scheduledDate: 0, scheduledWeekdays: [], showDuration: 0, dateText: "", timeText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightDataAppointment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightDataAppointment): HighlightDataAppointment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 appointment_timestamp */ 1:
                    message.appointmentTimestamp = reader.int64().toBigInt();
                    break;
                case /* bool demotion */ 2:
                    message.demotion = reader.bool();
                    break;
                case /* int64 anchor_uid */ 3:
                    message.anchorUid = reader.int64().toBigInt();
                    break;
                case /* int64 current_number */ 4:
                    message.currentNumber = reader.int64().toBigInt();
                    break;
                case /* string text */ 5:
                    message.text = reader.string();
                    break;
                case /* int64 appointment_id */ 6:
                    message.appointmentId = reader.int64().toBigInt();
                    break;
                case /* int32 scheduled_time */ 7:
                    message.scheduledTime = reader.int32();
                    break;
                case /* int32 scheduled_date */ 8:
                    message.scheduledDate = reader.int32();
                    break;
                case /* repeated int32 scheduled_weekdays */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.scheduledWeekdays.push(reader.int32());
                    else
                        message.scheduledWeekdays.push(reader.int32());
                    break;
                case /* int32 show_duration */ 10:
                    message.showDuration = reader.int32();
                    break;
                case /* string date_text */ 11:
                    message.dateText = reader.string();
                    break;
                case /* string time_text */ 12:
                    message.timeText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightDataAppointment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 appointment_timestamp = 1; */
        if (message.appointmentTimestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.appointmentTimestamp);
        /* bool demotion = 2; */
        if (message.demotion !== false)
            writer.tag(2, WireType.Varint).bool(message.demotion);
        /* int64 anchor_uid = 3; */
        if (message.anchorUid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.anchorUid);
        /* int64 current_number = 4; */
        if (message.currentNumber !== 0n)
            writer.tag(4, WireType.Varint).int64(message.currentNumber);
        /* string text = 5; */
        if (message.text !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.text);
        /* int64 appointment_id = 6; */
        if (message.appointmentId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.appointmentId);
        /* int32 scheduled_time = 7; */
        if (message.scheduledTime !== 0)
            writer.tag(7, WireType.Varint).int32(message.scheduledTime);
        /* int32 scheduled_date = 8; */
        if (message.scheduledDate !== 0)
            writer.tag(8, WireType.Varint).int32(message.scheduledDate);
        /* repeated int32 scheduled_weekdays = 9; */
        if (message.scheduledWeekdays.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.scheduledWeekdays.length; i++)
                writer.int32(message.scheduledWeekdays[i]);
            writer.join();
        }
        /* int32 show_duration = 10; */
        if (message.showDuration !== 0)
            writer.tag(10, WireType.Varint).int32(message.showDuration);
        /* string date_text = 11; */
        if (message.dateText !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.dateText);
        /* string time_text = 12; */
        if (message.timeText !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.timeText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightDataAppointment
 */
export const HighlightDataAppointment = new HighlightDataAppointment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightDataAnswer$Type extends MessageType<HighlightDataAnswer> {
    constructor() {
        super("im.HighlightDataAnswer", [
            { no: 1, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "answer_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "answer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "audience_number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "audience_number_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "commenter_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "question_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "answer_msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 255, name: "pin_common", kind: "message", T: () => PinCommon }
        ]);
    }
    create(value?: PartialMessage<HighlightDataAnswer>): HighlightDataAnswer {
        const message = { scene: "", answerId: 0n, question: "", answer: "", audienceNumber: 0n, audienceNumberStr: "", nickName: "", anchorId: 0n, commenterId: 0n, questionMsgId: 0n, answerMsgId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightDataAnswer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightDataAnswer): HighlightDataAnswer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scene */ 1:
                    message.scene = reader.string();
                    break;
                case /* int64 answer_id */ 2:
                    message.answerId = reader.int64().toBigInt();
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* string answer */ 4:
                    message.answer = reader.string();
                    break;
                case /* int64 audience_number */ 5:
                    message.audienceNumber = reader.int64().toBigInt();
                    break;
                case /* string audience_number_str */ 6:
                    message.audienceNumberStr = reader.string();
                    break;
                case /* string nick_name */ 7:
                    message.nickName = reader.string();
                    break;
                case /* int64 anchor_id */ 8:
                    message.anchorId = reader.int64().toBigInt();
                    break;
                case /* int64 commenter_id */ 9:
                    message.commenterId = reader.int64().toBigInt();
                    break;
                case /* int64 question_msg_id */ 10:
                    message.questionMsgId = reader.int64().toBigInt();
                    break;
                case /* int64 answer_msg_id */ 11:
                    message.answerMsgId = reader.int64().toBigInt();
                    break;
                case /* im.PinCommon pin_common */ 255:
                    message.pinCommon = PinCommon.internalBinaryRead(reader, reader.uint32(), options, message.pinCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightDataAnswer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scene = 1; */
        if (message.scene !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scene);
        /* int64 answer_id = 2; */
        if (message.answerId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.answerId);
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* string answer = 4; */
        if (message.answer !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.answer);
        /* int64 audience_number = 5; */
        if (message.audienceNumber !== 0n)
            writer.tag(5, WireType.Varint).int64(message.audienceNumber);
        /* string audience_number_str = 6; */
        if (message.audienceNumberStr !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.audienceNumberStr);
        /* string nick_name = 7; */
        if (message.nickName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.nickName);
        /* int64 anchor_id = 8; */
        if (message.anchorId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.anchorId);
        /* int64 commenter_id = 9; */
        if (message.commenterId !== 0n)
            writer.tag(9, WireType.Varint).int64(message.commenterId);
        /* int64 question_msg_id = 10; */
        if (message.questionMsgId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.questionMsgId);
        /* int64 answer_msg_id = 11; */
        if (message.answerMsgId !== 0n)
            writer.tag(11, WireType.Varint).int64(message.answerMsgId);
        /* im.PinCommon pin_common = 255; */
        if (message.pinCommon)
            PinCommon.internalBinaryWrite(message.pinCommon, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightDataAnswer
 */
export const HighlightDataAnswer = new HighlightDataAnswer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightDataComment$Type extends MessageType<HighlightDataComment> {
    constructor() {
        super("im.HighlightDataComment", [
            { no: 1, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "commenter_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "pre_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 255, name: "pin_common", kind: "message", T: () => PinCommon }
        ]);
    }
    create(value?: PartialMessage<HighlightDataComment>): HighlightDataComment {
        const message = { scene: "", chatId: 0n, content: "", nickName: "", commenterId: 0n, msgId: 0n, preId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightDataComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightDataComment): HighlightDataComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scene */ 1:
                    message.scene = reader.string();
                    break;
                case /* int64 chat_id */ 2:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string nick_name */ 4:
                    message.nickName = reader.string();
                    break;
                case /* int64 commenter_id */ 5:
                    message.commenterId = reader.int64().toBigInt();
                    break;
                case /* int64 msg_id */ 6:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* int64 pre_id */ 7:
                    message.preId = reader.int64().toBigInt();
                    break;
                case /* im.PinCommon pin_common */ 255:
                    message.pinCommon = PinCommon.internalBinaryRead(reader, reader.uint32(), options, message.pinCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightDataComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scene = 1; */
        if (message.scene !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scene);
        /* int64 chat_id = 2; */
        if (message.chatId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.chatId);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string nick_name = 4; */
        if (message.nickName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nickName);
        /* int64 commenter_id = 5; */
        if (message.commenterId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.commenterId);
        /* int64 msg_id = 6; */
        if (message.msgId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.msgId);
        /* int64 pre_id = 7; */
        if (message.preId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.preId);
        /* im.PinCommon pin_common = 255; */
        if (message.pinCommon)
            PinCommon.internalBinaryWrite(message.pinCommon, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightDataComment
 */
export const HighlightDataComment = new HighlightDataComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightDataVideo$Type extends MessageType<HighlightDataVideo> {
    constructor() {
        super("im.HighlightDataVideo", [
            { no: 1, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "video_pin_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "item_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "role", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 255, name: "pin_common", kind: "message", T: () => PinCommon }
        ]);
    }
    create(value?: PartialMessage<HighlightDataVideo>): HighlightDataVideo {
        const message = { scene: "", videoPinId: 0n, url: "", itemId: 0n, itemType: 0n, title: "", nickName: "", msgId: 0n, role: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightDataVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightDataVideo): HighlightDataVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scene */ 1:
                    message.scene = reader.string();
                    break;
                case /* int64 video_pin_id */ 2:
                    message.videoPinId = reader.int64().toBigInt();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* int64 item_id */ 4:
                    message.itemId = reader.int64().toBigInt();
                    break;
                case /* int64 item_type */ 5:
                    message.itemType = reader.int64().toBigInt();
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* string nick_name */ 7:
                    message.nickName = reader.string();
                    break;
                case /* int64 msg_id */ 8:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* int64 role */ 9:
                    message.role = reader.int64().toBigInt();
                    break;
                case /* im.PinCommon pin_common */ 255:
                    message.pinCommon = PinCommon.internalBinaryRead(reader, reader.uint32(), options, message.pinCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightDataVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scene = 1; */
        if (message.scene !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scene);
        /* int64 video_pin_id = 2; */
        if (message.videoPinId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.videoPinId);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* int64 item_id = 4; */
        if (message.itemId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.itemId);
        /* int64 item_type = 5; */
        if (message.itemType !== 0n)
            writer.tag(5, WireType.Varint).int64(message.itemType);
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* string nick_name = 7; */
        if (message.nickName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.nickName);
        /* int64 msg_id = 8; */
        if (message.msgId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.msgId);
        /* int64 role = 9; */
        if (message.role !== 0n)
            writer.tag(9, WireType.Varint).int64(message.role);
        /* im.PinCommon pin_common = 255; */
        if (message.pinCommon)
            PinCommon.internalBinaryWrite(message.pinCommon, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightDataVideo
 */
export const HighlightDataVideo = new HighlightDataVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightDataMicroApp$Type extends MessageType<HighlightDataMicroApp> {
    constructor() {
        super("im.HighlightDataMicroApp", [
            { no: 1, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pin_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "micro_app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "micro_app_avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "micro_app_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "micro_app_introduction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "nick_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 255, name: "pin_common", kind: "message", T: () => PinCommon }
        ]);
    }
    create(value?: PartialMessage<HighlightDataMicroApp>): HighlightDataMicroApp {
        const message = { scene: "", pinId: 0n, msgId: 0n, microAppId: "", microAppAvatar: "", microAppName: "", microAppIntroduction: "", schema: "", nickName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightDataMicroApp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightDataMicroApp): HighlightDataMicroApp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scene */ 1:
                    message.scene = reader.string();
                    break;
                case /* int64 pin_id */ 2:
                    message.pinId = reader.int64().toBigInt();
                    break;
                case /* int64 msg_id */ 3:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* string micro_app_id */ 4:
                    message.microAppId = reader.string();
                    break;
                case /* string micro_app_avatar */ 5:
                    message.microAppAvatar = reader.string();
                    break;
                case /* string micro_app_name */ 6:
                    message.microAppName = reader.string();
                    break;
                case /* string micro_app_introduction */ 7:
                    message.microAppIntroduction = reader.string();
                    break;
                case /* string schema */ 8:
                    message.schema = reader.string();
                    break;
                case /* string nick_name */ 9:
                    message.nickName = reader.string();
                    break;
                case /* im.PinCommon pin_common */ 255:
                    message.pinCommon = PinCommon.internalBinaryRead(reader, reader.uint32(), options, message.pinCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightDataMicroApp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scene = 1; */
        if (message.scene !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scene);
        /* int64 pin_id = 2; */
        if (message.pinId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pinId);
        /* int64 msg_id = 3; */
        if (message.msgId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.msgId);
        /* string micro_app_id = 4; */
        if (message.microAppId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.microAppId);
        /* string micro_app_avatar = 5; */
        if (message.microAppAvatar !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.microAppAvatar);
        /* string micro_app_name = 6; */
        if (message.microAppName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.microAppName);
        /* string micro_app_introduction = 7; */
        if (message.microAppIntroduction !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.microAppIntroduction);
        /* string schema = 8; */
        if (message.schema !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.schema);
        /* string nick_name = 9; */
        if (message.nickName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.nickName);
        /* im.PinCommon pin_common = 255; */
        if (message.pinCommon)
            PinCommon.internalBinaryWrite(message.pinCommon, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightDataMicroApp
 */
export const HighlightDataMicroApp = new HighlightDataMicroApp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightDataImCommon$Type extends MessageType<HighlightDataImCommon> {
    constructor() {
        super("im.HighlightDataImCommon", [
            { no: 1, name: "scene", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pin_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "display_text", kind: "message", T: () => Text },
            { no: 255, name: "pin_common", kind: "message", T: () => PinCommon }
        ]);
    }
    create(value?: PartialMessage<HighlightDataImCommon>): HighlightDataImCommon {
        const message = { scene: "", pinId: 0n, msgId: 0n, title: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighlightDataImCommon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightDataImCommon): HighlightDataImCommon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string scene */ 1:
                    message.scene = reader.string();
                    break;
                case /* int64 pin_id */ 2:
                    message.pinId = reader.int64().toBigInt();
                    break;
                case /* int64 msg_id */ 3:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* data.Text display_text */ 5:
                    message.displayText = Text.internalBinaryRead(reader, reader.uint32(), options, message.displayText);
                    break;
                case /* im.PinCommon pin_common */ 255:
                    message.pinCommon = PinCommon.internalBinaryRead(reader, reader.uint32(), options, message.pinCommon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightDataImCommon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string scene = 1; */
        if (message.scene !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.scene);
        /* int64 pin_id = 2; */
        if (message.pinId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pinId);
        /* int64 msg_id = 3; */
        if (message.msgId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.msgId);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* data.Text display_text = 5; */
        if (message.displayText)
            Text.internalBinaryWrite(message.displayText, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* im.PinCommon pin_common = 255; */
        if (message.pinCommon)
            PinCommon.internalBinaryWrite(message.pinCommon, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.HighlightDataImCommon
 */
export const HighlightDataImCommon = new HighlightDataImCommon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputPanelComponentSyncData$Type extends MessageType<InputPanelComponentSyncData> {
    constructor() {
        super("im.InputPanelComponentSyncData", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PanelComponentItem }
        ]);
    }
    create(value?: PartialMessage<InputPanelComponentSyncData>): InputPanelComponentSyncData {
        const message = { data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InputPanelComponentSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputPanelComponentSyncData): InputPanelComponentSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.PanelComponentItem data */ 1:
                    message.data.push(PanelComponentItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputPanelComponentSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.PanelComponentItem data = 1; */
        for (let i = 0; i < message.data.length; i++)
            PanelComponentItem.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.InputPanelComponentSyncData
 */
export const InputPanelComponentSyncData = new InputPanelComponentSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PanelComponentItem$Type extends MessageType<PanelComponentItem> {
    constructor() {
        super("im.PanelComponentItem", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "icon", kind: "message", T: () => Image },
            { no: 22, name: "display_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "schema_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PanelComponentItem>): PanelComponentItem {
        const message = { type: 0, status: 0, displayText: "", schemaUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PanelComponentItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PanelComponentItem): PanelComponentItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* data.Image icon */ 21:
                    message.icon = Image.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                case /* string display_text */ 22:
                    message.displayText = reader.string();
                    break;
                case /* string schema_url */ 23:
                    message.schemaUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PanelComponentItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* data.Image icon = 21; */
        if (message.icon)
            Image.internalBinaryWrite(message.icon, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* string display_text = 22; */
        if (message.displayText !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.displayText);
        /* string schema_url = 23; */
        if (message.schemaUrl !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.schemaUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PanelComponentItem
 */
export const PanelComponentItem = new PanelComponentItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebcastInteractControlSyncData$Type extends MessageType<WebcastInteractControlSyncData> {
    constructor() {
        super("im.WebcastInteractControlSyncData", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "time_stamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "anchor_operation", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientOperation },
            { no: 5, name: "audience_operation", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientOperation }
        ]);
    }
    create(value?: PartialMessage<WebcastInteractControlSyncData>): WebcastInteractControlSyncData {
        const message = { roomId: "", timeStamp: "", anchorOperation: [], audienceOperation: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebcastInteractControlSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebcastInteractControlSyncData): WebcastInteractControlSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string room_id */ 2:
                    message.roomId = reader.string();
                    break;
                case /* string time_stamp */ 3:
                    message.timeStamp = reader.string();
                    break;
                case /* repeated im.ClientOperation anchor_operation */ 4:
                    message.anchorOperation.push(ClientOperation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated im.ClientOperation audience_operation */ 5:
                    message.audienceOperation.push(ClientOperation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebcastInteractControlSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string room_id = 2; */
        if (message.roomId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomId);
        /* string time_stamp = 3; */
        if (message.timeStamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timeStamp);
        /* repeated im.ClientOperation anchor_operation = 4; */
        for (let i = 0; i < message.anchorOperation.length; i++)
            ClientOperation.internalBinaryWrite(message.anchorOperation[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.ClientOperation audience_operation = 5; */
        for (let i = 0; i < message.audienceOperation.length; i++)
            ClientOperation.internalBinaryWrite(message.audienceOperation[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.WebcastInteractControlSyncData
 */
export const WebcastInteractControlSyncData = new WebcastInteractControlSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntercomChangeSyncData$Type extends MessageType<IntercomChangeSyncData> {
    constructor() {
        super("im.IntercomChangeSyncData", [
            { no: 1, name: "intercom_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "close_reason", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<IntercomChangeSyncData>): IntercomChangeSyncData {
        const message = { intercomStatus: 0n, closeReason: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IntercomChangeSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntercomChangeSyncData): IntercomChangeSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 intercom_status */ 1:
                    message.intercomStatus = reader.int64().toBigInt();
                    break;
                case /* int64 close_reason */ 2:
                    message.closeReason = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntercomChangeSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 intercom_status = 1; */
        if (message.intercomStatus !== 0n)
            writer.tag(1, WireType.Varint).int64(message.intercomStatus);
        /* int64 close_reason = 2; */
        if (message.closeReason !== 0n)
            writer.tag(2, WireType.Varint).int64(message.closeReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.IntercomChangeSyncData
 */
export const IntercomChangeSyncData = new IntercomChangeSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvDressSyncData$Type extends MessageType<KtvDressSyncData> {
    constructor() {
        super("im.KtvDressSyncData", [
            { no: 1, name: "dress_info", kind: "message", T: () => MidiSkinDressInfo },
            { no: 2, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "singer_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KtvDressSyncData>): KtvDressSyncData {
        const message = { songId: 0n, singerId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvDressSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvDressSyncData): KtvDressSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MidiSkinDressInfo dress_info */ 1:
                    message.dressInfo = MidiSkinDressInfo.internalBinaryRead(reader, reader.uint32(), options, message.dressInfo);
                    break;
                case /* int64 song_id */ 2:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* int64 singer_id */ 3:
                    message.singerId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvDressSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MidiSkinDressInfo dress_info = 1; */
        if (message.dressInfo)
            MidiSkinDressInfo.internalBinaryWrite(message.dressInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 song_id = 2; */
        if (message.songId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.songId);
        /* int64 singer_id = 3; */
        if (message.singerId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.singerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvDressSyncData
 */
export const KtvDressSyncData = new KtvDressSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KtvStreamSingSyncData$Type extends MessageType<KtvStreamSingSyncData> {
    constructor() {
        super("im.KtvStreamSingSyncData", [
            { no: 1, name: "song", kind: "message", T: () => KtvSongStruct },
            { no: 2, name: "video_info", kind: "message", T: () => KtvAtmosphereVideoInfo },
            { no: 3, name: "time_stamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<KtvStreamSingSyncData>): KtvStreamSingSyncData {
        const message = { timeStamp: 0n, action: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KtvStreamSingSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KtvStreamSingSyncData): KtvStreamSingSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.KtvSongStruct song */ 1:
                    message.song = KtvSongStruct.internalBinaryRead(reader, reader.uint32(), options, message.song);
                    break;
                case /* data.KtvAtmosphereVideoInfo video_info */ 2:
                    message.videoInfo = KtvAtmosphereVideoInfo.internalBinaryRead(reader, reader.uint32(), options, message.videoInfo);
                    break;
                case /* int64 time_stamp */ 3:
                    message.timeStamp = reader.int64().toBigInt();
                    break;
                case /* int32 action */ 4:
                    message.action = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KtvStreamSingSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.KtvSongStruct song = 1; */
        if (message.song)
            KtvSongStruct.internalBinaryWrite(message.song, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.KtvAtmosphereVideoInfo video_info = 2; */
        if (message.videoInfo)
            KtvAtmosphereVideoInfo.internalBinaryWrite(message.videoInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 time_stamp = 3; */
        if (message.timeStamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timeStamp);
        /* int32 action = 4; */
        if (message.action !== 0)
            writer.tag(4, WireType.Varint).int32(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.KtvStreamSingSyncData
 */
export const KtvStreamSingSyncData = new KtvStreamSingSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeEggSyncData$Type extends MessageType<LikeEggSyncData> {
    constructor() {
        super("im.LikeEggSyncData", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trayColor", kind: "message", T: () => LikeEggTrayColor },
            { no: 3, name: "user_start_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_start_second", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "jump_detail", kind: "message", T: () => LikeEggJumpDetail },
            { no: 7, name: "prepare_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "prepare_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "finish_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "finish_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 255, name: "common", kind: "message", T: () => Common }
        ]);
    }
    create(value?: PartialMessage<LikeEggSyncData>): LikeEggSyncData {
        const message = { content: "", userStartTimestamp: 0n, userStartSecond: 0n, duration: 0n, prepareContent: "", prepareDuration: 0n, finishContent: "", finishDuration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeEggSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeEggSyncData): LikeEggSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* im.LikeEggTrayColor trayColor */ 2:
                    message.trayColor = LikeEggTrayColor.internalBinaryRead(reader, reader.uint32(), options, message.trayColor);
                    break;
                case /* int64 user_start_timestamp */ 3:
                    message.userStartTimestamp = reader.int64().toBigInt();
                    break;
                case /* int64 user_start_second */ 4:
                    message.userStartSecond = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 5:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* im.LikeEggJumpDetail jump_detail */ 6:
                    message.jumpDetail = LikeEggJumpDetail.internalBinaryRead(reader, reader.uint32(), options, message.jumpDetail);
                    break;
                case /* string prepare_content */ 7:
                    message.prepareContent = reader.string();
                    break;
                case /* int64 prepare_duration */ 8:
                    message.prepareDuration = reader.int64().toBigInt();
                    break;
                case /* string finish_content */ 9:
                    message.finishContent = reader.string();
                    break;
                case /* int64 finish_duration */ 10:
                    message.finishDuration = reader.int64().toBigInt();
                    break;
                case /* im.Common common */ 255:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeEggSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* im.LikeEggTrayColor trayColor = 2; */
        if (message.trayColor)
            LikeEggTrayColor.internalBinaryWrite(message.trayColor, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 user_start_timestamp = 3; */
        if (message.userStartTimestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userStartTimestamp);
        /* int64 user_start_second = 4; */
        if (message.userStartSecond !== 0n)
            writer.tag(4, WireType.Varint).int64(message.userStartSecond);
        /* int64 duration = 5; */
        if (message.duration !== 0n)
            writer.tag(5, WireType.Varint).int64(message.duration);
        /* im.LikeEggJumpDetail jump_detail = 6; */
        if (message.jumpDetail)
            LikeEggJumpDetail.internalBinaryWrite(message.jumpDetail, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string prepare_content = 7; */
        if (message.prepareContent !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.prepareContent);
        /* int64 prepare_duration = 8; */
        if (message.prepareDuration !== 0n)
            writer.tag(8, WireType.Varint).int64(message.prepareDuration);
        /* string finish_content = 9; */
        if (message.finishContent !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.finishContent);
        /* int64 finish_duration = 10; */
        if (message.finishDuration !== 0n)
            writer.tag(10, WireType.Varint).int64(message.finishDuration);
        /* im.Common common = 255; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LikeEggSyncData
 */
export const LikeEggSyncData = new LikeEggSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeEggJumpDetail$Type extends MessageType<LikeEggJumpDetail> {
    constructor() {
        super("im.LikeEggJumpDetail", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "photo_jump_detail", kind: "message", T: () => GroupPhotoJumpDetail },
            { no: 3, name: "template_photo_jump_detail", kind: "message", T: () => TemplatePhotoJumpDetail }
        ]);
    }
    create(value?: PartialMessage<LikeEggJumpDetail>): LikeEggJumpDetail {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeEggJumpDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeEggJumpDetail): LikeEggJumpDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* im.GroupPhotoJumpDetail photo_jump_detail */ 2:
                    message.photoJumpDetail = GroupPhotoJumpDetail.internalBinaryRead(reader, reader.uint32(), options, message.photoJumpDetail);
                    break;
                case /* im.TemplatePhotoJumpDetail template_photo_jump_detail */ 3:
                    message.templatePhotoJumpDetail = TemplatePhotoJumpDetail.internalBinaryRead(reader, reader.uint32(), options, message.templatePhotoJumpDetail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeEggJumpDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* im.GroupPhotoJumpDetail photo_jump_detail = 2; */
        if (message.photoJumpDetail)
            GroupPhotoJumpDetail.internalBinaryWrite(message.photoJumpDetail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* im.TemplatePhotoJumpDetail template_photo_jump_detail = 3; */
        if (message.templatePhotoJumpDetail)
            TemplatePhotoJumpDetail.internalBinaryWrite(message.templatePhotoJumpDetail, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LikeEggJumpDetail
 */
export const LikeEggJumpDetail = new LikeEggJumpDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupPhotoJumpDetail$Type extends MessageType<GroupPhotoJumpDetail> {
    constructor() {
        super("im.GroupPhotoJumpDetail", [
            { no: 1, name: "group_photo", kind: "message", T: () => Image },
            { no: 2, name: "location_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldLocation },
            { no: 4, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "share_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupPhotoJumpDetail>): GroupPhotoJumpDetail {
        const message = { locationList: [], width: 0, height: 0, shareContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupPhotoJumpDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupPhotoJumpDetail): GroupPhotoJumpDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image group_photo */ 1:
                    message.groupPhoto = Image.internalBinaryRead(reader, reader.uint32(), options, message.groupPhoto);
                    break;
                case /* repeated im.FieldLocation location_list */ 2:
                    message.locationList.push(FieldLocation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 width */ 4:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 5:
                    message.height = reader.int32();
                    break;
                case /* string share_content */ 6:
                    message.shareContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupPhotoJumpDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image group_photo = 1; */
        if (message.groupPhoto)
            Image.internalBinaryWrite(message.groupPhoto, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated im.FieldLocation location_list = 2; */
        for (let i = 0; i < message.locationList.length; i++)
            FieldLocation.internalBinaryWrite(message.locationList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 width = 4; */
        if (message.width !== 0)
            writer.tag(4, WireType.Varint).int32(message.width);
        /* int32 height = 5; */
        if (message.height !== 0)
            writer.tag(5, WireType.Varint).int32(message.height);
        /* string share_content = 6; */
        if (message.shareContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.shareContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.GroupPhotoJumpDetail
 */
export const GroupPhotoJumpDetail = new GroupPhotoJumpDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplatePhotoJumpDetail$Type extends MessageType<TemplatePhotoJumpDetail> {
    constructor() {
        super("im.TemplatePhotoJumpDetail", [
            { no: 1, name: "template_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TemplateInfo },
            { no: 2, name: "template_panel_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "photo_panel_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_photo", kind: "message", T: () => Image }
        ]);
    }
    create(value?: PartialMessage<TemplatePhotoJumpDetail>): TemplatePhotoJumpDetail {
        const message = { templateList: [], templatePanelTitle: "", photoPanelTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemplatePhotoJumpDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplatePhotoJumpDetail): TemplatePhotoJumpDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated im.TemplateInfo template_list */ 1:
                    message.templateList.push(TemplateInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string template_panel_title */ 2:
                    message.templatePanelTitle = reader.string();
                    break;
                case /* string photo_panel_title */ 3:
                    message.photoPanelTitle = reader.string();
                    break;
                case /* data.Image bg_photo */ 4:
                    message.bgPhoto = Image.internalBinaryRead(reader, reader.uint32(), options, message.bgPhoto);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplatePhotoJumpDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated im.TemplateInfo template_list = 1; */
        for (let i = 0; i < message.templateList.length; i++)
            TemplateInfo.internalBinaryWrite(message.templateList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string template_panel_title = 2; */
        if (message.templatePanelTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.templatePanelTitle);
        /* string photo_panel_title = 3; */
        if (message.photoPanelTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.photoPanelTitle);
        /* data.Image bg_photo = 4; */
        if (message.bgPhoto)
            Image.internalBinaryWrite(message.bgPhoto, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TemplatePhotoJumpDetail
 */
export const TemplatePhotoJumpDetail = new TemplatePhotoJumpDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateInfo$Type extends MessageType<TemplateInfo> {
    constructor() {
        super("im.TemplateInfo", [
            { no: 1, name: "template_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "template_photo", kind: "message", T: () => Image },
            { no: 3, name: "author_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "template_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "support_replace", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "replace_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TemplateInfo>): TemplateInfo {
        const message = { templateId: "", authorName: "", templateTitle: "", supportReplace: false, replaceContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemplateInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateInfo): TemplateInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string template_id */ 1:
                    message.templateId = reader.string();
                    break;
                case /* data.Image template_photo */ 2:
                    message.templatePhoto = Image.internalBinaryRead(reader, reader.uint32(), options, message.templatePhoto);
                    break;
                case /* string author_name */ 3:
                    message.authorName = reader.string();
                    break;
                case /* string template_title */ 4:
                    message.templateTitle = reader.string();
                    break;
                case /* bool support_replace */ 5:
                    message.supportReplace = reader.bool();
                    break;
                case /* string replace_content */ 6:
                    message.replaceContent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string template_id = 1; */
        if (message.templateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.templateId);
        /* data.Image template_photo = 2; */
        if (message.templatePhoto)
            Image.internalBinaryWrite(message.templatePhoto, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string author_name = 3; */
        if (message.authorName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.authorName);
        /* string template_title = 4; */
        if (message.templateTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.templateTitle);
        /* bool support_replace = 5; */
        if (message.supportReplace !== false)
            writer.tag(5, WireType.Varint).bool(message.supportReplace);
        /* string replace_content = 6; */
        if (message.replaceContent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.replaceContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.TemplateInfo
 */
export const TemplateInfo = new TemplateInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeEggTrayColor$Type extends MessageType<LikeEggTrayColor> {
    constructor() {
        super("im.LikeEggTrayColor", [
            { no: 1, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bar_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LikeEggTrayColor>): LikeEggTrayColor {
        const message = { backgroundColor: "", barColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LikeEggTrayColor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeEggTrayColor): LikeEggTrayColor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string background_color */ 1:
                    message.backgroundColor = reader.string();
                    break;
                case /* string bar_color */ 2:
                    message.barColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeEggTrayColor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string background_color = 1; */
        if (message.backgroundColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.backgroundColor);
        /* string bar_color = 2; */
        if (message.barColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.barColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LikeEggTrayColor
 */
export const LikeEggTrayColor = new LikeEggTrayColor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldLocation$Type extends MessageType<FieldLocation> {
    constructor() {
        super("im.FieldLocation", [
            { no: 1, name: "location_x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "location_y", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FieldLocation>): FieldLocation {
        const message = { locationX: 0, locationY: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FieldLocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldLocation): FieldLocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 location_x */ 1:
                    message.locationX = reader.int32();
                    break;
                case /* int32 location_y */ 2:
                    message.locationY = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldLocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 location_x = 1; */
        if (message.locationX !== 0)
            writer.tag(1, WireType.Varint).int32(message.locationX);
        /* int32 location_y = 2; */
        if (message.locationY !== 0)
            writer.tag(2, WireType.Varint).int32(message.locationY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.FieldLocation
 */
export const FieldLocation = new FieldLocation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomLinkMicSyncData$Type extends MessageType<RoomLinkMicSyncData> {
    constructor() {
        super("im.RoomLinkMicSyncData", [
            { no: 1, name: "linked_users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListUser },
            { no: 3, name: "linker_base_info", kind: "message", T: () => LinkerBaseInfo },
            { no: 4, name: "locked_positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem },
            { no: 5, name: "positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicPositionItem },
            { no: 6, name: "placeholder", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoomLinkMicSyncData>): RoomLinkMicSyncData {
        const message = { linkedUsers: [], lockedPositions: [], positions: [], placeholder: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomLinkMicSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomLinkMicSyncData): RoomLinkMicSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ListUser linked_users */ 1:
                    message.linkedUsers.push(ListUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* data.LinkerBaseInfo linker_base_info */ 3:
                    message.linkerBaseInfo = LinkerBaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.linkerBaseInfo);
                    break;
                case /* repeated data.LinkmicPositionItem locked_positions */ 4:
                    message.lockedPositions.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated data.LinkmicPositionItem positions */ 5:
                    message.positions.push(LinkmicPositionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 placeholder */ 6:
                    message.placeholder = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomLinkMicSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ListUser linked_users = 1; */
        for (let i = 0; i < message.linkedUsers.length; i++)
            ListUser.internalBinaryWrite(message.linkedUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* data.LinkerBaseInfo linker_base_info = 3; */
        if (message.linkerBaseInfo)
            LinkerBaseInfo.internalBinaryWrite(message.linkerBaseInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkmicPositionItem locked_positions = 4; */
        for (let i = 0; i < message.lockedPositions.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.lockedPositions[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated data.LinkmicPositionItem positions = 5; */
        for (let i = 0; i < message.positions.length; i++)
            LinkmicPositionItem.internalBinaryWrite(message.positions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 placeholder = 6; */
        if (message.placeholder !== 0n)
            writer.tag(6, WireType.Varint).int64(message.placeholder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomLinkMicSyncData
 */
export const RoomLinkMicSyncData = new RoomLinkMicSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomLinkMicAnchorSettingsSyncData$Type extends MessageType<RoomLinkMicAnchorSettingsSyncData> {
    constructor() {
        super("im.RoomLinkMicAnchorSettingsSyncData", [
            { no: 1, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LinkmicSetting }
        ]);
    }
    create(value?: PartialMessage<RoomLinkMicAnchorSettingsSyncData>): RoomLinkMicAnchorSettingsSyncData {
        const message = { settings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomLinkMicAnchorSettingsSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomLinkMicAnchorSettingsSyncData): RoomLinkMicAnchorSettingsSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.LinkmicSetting settings */ 1:
                    message.settings.push(LinkmicSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomLinkMicAnchorSettingsSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.LinkmicSetting settings = 1; */
        for (let i = 0; i < message.settings.length; i++)
            LinkmicSetting.internalBinaryWrite(message.settings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomLinkMicAnchorSettingsSyncData
 */
export const RoomLinkMicAnchorSettingsSyncData = new RoomLinkMicAnchorSettingsSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LotteryInfoSyncData$Type extends MessageType<LotteryInfoSyncData> {
    constructor() {
        super("im.LotteryInfoSyncData", [
            { no: 1, name: "lottery_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "lucky_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "candidate_total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "last_candidate_total_count_surge_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LotteryInfoSyncData>): LotteryInfoSyncData {
        const message = { lotteryId: 0n, luckyCount: 0n, candidateTotalCount: 0n, lastCandidateTotalCountSurgeTimestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LotteryInfoSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LotteryInfoSyncData): LotteryInfoSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 lottery_id */ 1:
                    message.lotteryId = reader.int64().toBigInt();
                    break;
                case /* int64 lucky_count */ 2:
                    message.luckyCount = reader.int64().toBigInt();
                    break;
                case /* int64 candidate_total_count */ 3:
                    message.candidateTotalCount = reader.int64().toBigInt();
                    break;
                case /* int64 last_candidate_total_count_surge_timestamp */ 4:
                    message.lastCandidateTotalCountSurgeTimestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LotteryInfoSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 lottery_id = 1; */
        if (message.lotteryId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.lotteryId);
        /* int64 lucky_count = 2; */
        if (message.luckyCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.luckyCount);
        /* int64 candidate_total_count = 3; */
        if (message.candidateTotalCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.candidateTotalCount);
        /* int64 last_candidate_total_count_surge_timestamp = 4; */
        if (message.lastCandidateTotalCountSurgeTimestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.lastCandidateTotalCountSurgeTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LotteryInfoSyncData
 */
export const LotteryInfoSyncData = new LotteryInfoSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDynamicIslandSyncData$Type extends MessageType<MatchDynamicIslandSyncData> {
    constructor() {
        super("im.MatchDynamicIslandSyncData", [
            { no: 1, name: "common", kind: "message", T: () => Common },
            { no: 2, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDynamicIslandSyncData>): MatchDynamicIslandSyncData {
        const message = { data: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDynamicIslandSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDynamicIslandSyncData): MatchDynamicIslandSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* im.Common common */ 1:
                    message.common = Common.internalBinaryRead(reader, reader.uint32(), options, message.common);
                    break;
                case /* string data */ 2:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDynamicIslandSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* im.Common common = 1; */
        if (message.common)
            Common.internalBinaryWrite(message.common, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string data = 2; */
        if (message.data !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MatchDynamicIslandSyncData
 */
export const MatchDynamicIslandSyncData = new MatchDynamicIslandSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MicroAppStartSyncData$Type extends MessageType<MicroAppStartSyncData> {
    constructor() {
        super("im.MicroAppStartSyncData", [
            { no: 1, name: "app_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audience_start_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "anchor_start_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MicroAppStartSyncData>): MicroAppStartSyncData {
        const message = { appId: "", audienceStartMsg: "", anchorStartMsg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MicroAppStartSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MicroAppStartSyncData): MicroAppStartSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string app_id */ 1:
                    message.appId = reader.string();
                    break;
                case /* string audience_start_msg */ 2:
                    message.audienceStartMsg = reader.string();
                    break;
                case /* string anchor_start_msg */ 3:
                    message.anchorStartMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MicroAppStartSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string app_id = 1; */
        if (message.appId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appId);
        /* string audience_start_msg = 2; */
        if (message.audienceStartMsg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.audienceStartMsg);
        /* string anchor_start_msg = 3; */
        if (message.anchorStartMsg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.anchorStartMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MicroAppStartSyncData
 */
export const MicroAppStartSyncData = new MicroAppStartSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoreLiveSyncData$Type extends MessageType<MoreLiveSyncData> {
    constructor() {
        super("im.MoreLiveSyncData", [
            { no: 1, name: "info", kind: "message", T: () => MoreLiveEntrance }
        ]);
    }
    create(value?: PartialMessage<MoreLiveSyncData>): MoreLiveSyncData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MoreLiveSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoreLiveSyncData): MoreLiveSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.MoreLiveEntrance info */ 1:
                    message.info = MoreLiveEntrance.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoreLiveSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.MoreLiveEntrance info = 1; */
        if (message.info)
            MoreLiveEntrance.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.MoreLiveSyncData
 */
export const MoreLiveSyncData = new MoreLiveSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfChannelShowlistSyncData$Type extends MessageType<OfChannelShowlistSyncData> {
    constructor() {
        super("im.OfChannelShowlistSyncData", [
            { no: 1, name: "channel_uid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "channel_anchor_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "showlist_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "showlist_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "showlist_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "showlist_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<OfChannelShowlistSyncData>): OfChannelShowlistSyncData {
        const message = { channelUid: 0n, channelAnchorId: 0n, showlistText: "", showlistSchema: "", showlistName: "", channelName: "", showlistId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfChannelShowlistSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfChannelShowlistSyncData): OfChannelShowlistSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 channel_uid */ 1:
                    message.channelUid = reader.int64().toBigInt();
                    break;
                case /* int64 channel_anchor_id */ 2:
                    message.channelAnchorId = reader.int64().toBigInt();
                    break;
                case /* string showlist_text */ 3:
                    message.showlistText = reader.string();
                    break;
                case /* string showlist_schema */ 4:
                    message.showlistSchema = reader.string();
                    break;
                case /* string showlist_name */ 5:
                    message.showlistName = reader.string();
                    break;
                case /* string channel_name */ 6:
                    message.channelName = reader.string();
                    break;
                case /* int64 showlist_id */ 7:
                    message.showlistId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfChannelShowlistSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 channel_uid = 1; */
        if (message.channelUid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.channelUid);
        /* int64 channel_anchor_id = 2; */
        if (message.channelAnchorId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.channelAnchorId);
        /* string showlist_text = 3; */
        if (message.showlistText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.showlistText);
        /* string showlist_schema = 4; */
        if (message.showlistSchema !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.showlistSchema);
        /* string showlist_name = 5; */
        if (message.showlistName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.showlistName);
        /* string channel_name = 6; */
        if (message.channelName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.channelName);
        /* int64 showlist_id = 7; */
        if (message.showlistId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.showlistId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.OfChannelShowlistSyncData
 */
export const OfChannelShowlistSyncData = new OfChannelShowlistSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermissionCheckTriggerSyncData$Type extends MessageType<PermissionCheckTriggerSyncData> {
    constructor() {
        super("im.PermissionCheckTriggerSyncData", [
            { no: 1, name: "trigger", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "max_delay_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PermissionCheckTriggerSyncData>): PermissionCheckTriggerSyncData {
        const message = { trigger: 0n, maxDelayTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PermissionCheckTriggerSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermissionCheckTriggerSyncData): PermissionCheckTriggerSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 trigger */ 1:
                    message.trigger = reader.int64().toBigInt();
                    break;
                case /* int64 max_delay_time */ 2:
                    message.maxDelayTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PermissionCheckTriggerSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 trigger = 1; */
        if (message.trigger !== 0n)
            writer.tag(1, WireType.Varint).int64(message.trigger);
        /* int64 max_delay_time = 2; */
        if (message.maxDelayTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.maxDelayTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PermissionCheckTriggerSyncData
 */
export const PermissionCheckTriggerSyncData = new PermissionCheckTriggerSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewCommentSyncData$Type extends MessageType<PreviewCommentSyncData> {
    constructor() {
        super("im.PreviewCommentSyncData", [
            { no: 1, name: "hot_comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hot_comment_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "hot_comment_sequence_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewCommentSyncData>): PreviewCommentSyncData {
        const message = { hotComment: "", hotCommentTime: 0n, hotCommentSequenceId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewCommentSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewCommentSyncData): PreviewCommentSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hot_comment */ 1:
                    message.hotComment = reader.string();
                    break;
                case /* int64 hot_comment_time */ 2:
                    message.hotCommentTime = reader.int64().toBigInt();
                    break;
                case /* int64 hot_comment_sequence_id */ 3:
                    message.hotCommentSequenceId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewCommentSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hot_comment = 1; */
        if (message.hotComment !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hotComment);
        /* int64 hot_comment_time = 2; */
        if (message.hotCommentTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.hotCommentTime);
        /* int64 hot_comment_sequence_id = 3; */
        if (message.hotCommentSequenceId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.hotCommentSequenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PreviewCommentSyncData
 */
export const PreviewCommentSyncData = new PreviewCommentSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewControlSyncData$Type extends MessageType<PreviewControlSyncData> {
    constructor() {
        super("im.PreviewControlSyncData", [
            { no: 1, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewControlSyncData>): PreviewControlSyncData {
        const message = { action: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewControlSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewControlSyncData): PreviewControlSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 action */ 1:
                    message.action = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewControlSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 action = 1; */
        if (message.action !== 0n)
            writer.tag(1, WireType.Varint).int64(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PreviewControlSyncData
 */
export const PreviewControlSyncData = new PreviewControlSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExtendAreaSyncData$Type extends MessageType<PreviewExtendAreaSyncData> {
    constructor() {
        super("im.PreviewExtendAreaSyncData", [
            { no: 1, name: "extend_icon", kind: "message", T: () => Image },
            { no: 2, name: "extend_pre_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extend_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extend_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "use_marquee", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "icon_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "right_part", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExtendAreaSyncData_Part },
            { no: 9, name: "button_part", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "mid_part", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExtendAreaSyncData_Part },
            { no: 11, name: "need_delimiter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "bottom_part", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PreviewExtendAreaSyncData_Part },
            { no: 13, name: "ui_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "action_cfg", kind: "message", T: () => PreviewExtendAreaSyncData_ActionConfig },
            { no: 18, name: "use_pass_through_extra_json", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "pass_through_extra_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "extra_business", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExtendAreaSyncData>): PreviewExtendAreaSyncData {
        const message = { extendPreText: "", extendText: "", extendType: 0, extra: "", useMarquee: 0, iconType: 0, rightPart: [], buttonPart: "", midPart: [], needDelimiter: false, bottomPart: [], uiType: 0, version: 0, usePassThroughExtraJson: false, passThroughExtraJson: "", extraBusiness: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExtendAreaSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExtendAreaSyncData): PreviewExtendAreaSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* data.Image extend_icon */ 1:
                    message.extendIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.extendIcon);
                    break;
                case /* string extend_pre_text */ 2:
                    message.extendPreText = reader.string();
                    break;
                case /* string extend_text */ 3:
                    message.extendText = reader.string();
                    break;
                case /* int32 extend_type */ 4:
                    message.extendType = reader.int32();
                    break;
                case /* string extra */ 5:
                    message.extra = reader.string();
                    break;
                case /* int32 use_marquee */ 6:
                    message.useMarquee = reader.int32();
                    break;
                case /* int32 icon_type */ 7:
                    message.iconType = reader.int32();
                    break;
                case /* repeated im.PreviewExtendAreaSyncData.Part right_part */ 8:
                    message.rightPart.push(PreviewExtendAreaSyncData_Part.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string button_part */ 9:
                    message.buttonPart = reader.string();
                    break;
                case /* repeated im.PreviewExtendAreaSyncData.Part mid_part */ 10:
                    message.midPart.push(PreviewExtendAreaSyncData_Part.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool need_delimiter */ 11:
                    message.needDelimiter = reader.bool();
                    break;
                case /* repeated im.PreviewExtendAreaSyncData.Part bottom_part */ 12:
                    message.bottomPart.push(PreviewExtendAreaSyncData_Part.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 ui_type */ 13:
                    message.uiType = reader.int32();
                    break;
                case /* int32 version */ 14:
                    message.version = reader.int32();
                    break;
                case /* im.PreviewExtendAreaSyncData.ActionConfig action_cfg */ 17:
                    message.actionCfg = PreviewExtendAreaSyncData_ActionConfig.internalBinaryRead(reader, reader.uint32(), options, message.actionCfg);
                    break;
                case /* bool use_pass_through_extra_json */ 18:
                    message.usePassThroughExtraJson = reader.bool();
                    break;
                case /* string pass_through_extra_json */ 19:
                    message.passThroughExtraJson = reader.string();
                    break;
                case /* string extra_business */ 21:
                    message.extraBusiness = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExtendAreaSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* data.Image extend_icon = 1; */
        if (message.extendIcon)
            Image.internalBinaryWrite(message.extendIcon, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string extend_pre_text = 2; */
        if (message.extendPreText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.extendPreText);
        /* string extend_text = 3; */
        if (message.extendText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extendText);
        /* int32 extend_type = 4; */
        if (message.extendType !== 0)
            writer.tag(4, WireType.Varint).int32(message.extendType);
        /* string extra = 5; */
        if (message.extra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.extra);
        /* int32 use_marquee = 6; */
        if (message.useMarquee !== 0)
            writer.tag(6, WireType.Varint).int32(message.useMarquee);
        /* int32 icon_type = 7; */
        if (message.iconType !== 0)
            writer.tag(7, WireType.Varint).int32(message.iconType);
        /* repeated im.PreviewExtendAreaSyncData.Part right_part = 8; */
        for (let i = 0; i < message.rightPart.length; i++)
            PreviewExtendAreaSyncData_Part.internalBinaryWrite(message.rightPart[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string button_part = 9; */
        if (message.buttonPart !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.buttonPart);
        /* repeated im.PreviewExtendAreaSyncData.Part mid_part = 10; */
        for (let i = 0; i < message.midPart.length; i++)
            PreviewExtendAreaSyncData_Part.internalBinaryWrite(message.midPart[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bool need_delimiter = 11; */
        if (message.needDelimiter !== false)
            writer.tag(11, WireType.Varint).bool(message.needDelimiter);
        /* repeated im.PreviewExtendAreaSyncData.Part bottom_part = 12; */
        for (let i = 0; i < message.bottomPart.length; i++)
            PreviewExtendAreaSyncData_Part.internalBinaryWrite(message.bottomPart[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 ui_type = 13; */
        if (message.uiType !== 0)
            writer.tag(13, WireType.Varint).int32(message.uiType);
        /* int32 version = 14; */
        if (message.version !== 0)
            writer.tag(14, WireType.Varint).int32(message.version);
        /* im.PreviewExtendAreaSyncData.ActionConfig action_cfg = 17; */
        if (message.actionCfg)
            PreviewExtendAreaSyncData_ActionConfig.internalBinaryWrite(message.actionCfg, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* bool use_pass_through_extra_json = 18; */
        if (message.usePassThroughExtraJson !== false)
            writer.tag(18, WireType.Varint).bool(message.usePassThroughExtraJson);
        /* string pass_through_extra_json = 19; */
        if (message.passThroughExtraJson !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.passThroughExtraJson);
        /* string extra_business = 21; */
        if (message.extraBusiness !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.extraBusiness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PreviewExtendAreaSyncData
 */
export const PreviewExtendAreaSyncData = new PreviewExtendAreaSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExtendAreaSyncData_Part$Type extends MessageType<PreviewExtendAreaSyncData_Part> {
    constructor() {
        super("im.PreviewExtendAreaSyncData.Part", [
            { no: 1, name: "fontSize", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "interval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cuttable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "font_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bold", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExtendAreaSyncData_Part>): PreviewExtendAreaSyncData_Part {
        const message = { fontSize: 0, interval: 0, text: "", cuttable: false, deleted: false, fontColor: "", bold: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExtendAreaSyncData_Part>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExtendAreaSyncData_Part): PreviewExtendAreaSyncData_Part {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 fontSize */ 1:
                    message.fontSize = reader.int32();
                    break;
                case /* int32 interval */ 2:
                    message.interval = reader.int32();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* bool cuttable */ 4:
                    message.cuttable = reader.bool();
                    break;
                case /* bool deleted */ 5:
                    message.deleted = reader.bool();
                    break;
                case /* string font_color */ 6:
                    message.fontColor = reader.string();
                    break;
                case /* bool bold */ 7:
                    message.bold = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExtendAreaSyncData_Part, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 fontSize = 1; */
        if (message.fontSize !== 0)
            writer.tag(1, WireType.Varint).int32(message.fontSize);
        /* int32 interval = 2; */
        if (message.interval !== 0)
            writer.tag(2, WireType.Varint).int32(message.interval);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* bool cuttable = 4; */
        if (message.cuttable !== false)
            writer.tag(4, WireType.Varint).bool(message.cuttable);
        /* bool deleted = 5; */
        if (message.deleted !== false)
            writer.tag(5, WireType.Varint).bool(message.deleted);
        /* string font_color = 6; */
        if (message.fontColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fontColor);
        /* bool bold = 7; */
        if (message.bold !== false)
            writer.tag(7, WireType.Varint).bool(message.bold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PreviewExtendAreaSyncData.Part
 */
export const PreviewExtendAreaSyncData_Part = new PreviewExtendAreaSyncData_Part$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreviewExtendAreaSyncData_ActionConfig$Type extends MessageType<PreviewExtendAreaSyncData_ActionConfig> {
    constructor() {
        super("im.PreviewExtendAreaSyncData.ActionConfig", [
            { no: 1, name: "areaAction", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PreviewExtendAreaSyncData_ActionConfig>): PreviewExtendAreaSyncData_ActionConfig {
        const message = { areaAction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PreviewExtendAreaSyncData_ActionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreviewExtendAreaSyncData_ActionConfig): PreviewExtendAreaSyncData_ActionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 areaAction */ 1:
                    message.areaAction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreviewExtendAreaSyncData_ActionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 areaAction = 1; */
        if (message.areaAction !== 0)
            writer.tag(1, WireType.Varint).int32(message.areaAction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PreviewExtendAreaSyncData.ActionConfig
 */
export const PreviewExtendAreaSyncData_ActionConfig = new PreviewExtendAreaSyncData_ActionConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RiskAdviseSyncData$Type extends MessageType<RiskAdviseSyncData> {
    constructor() {
        super("im.RiskAdviseSyncData", [
            { no: 1, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "advise_text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<RiskAdviseSyncData>): RiskAdviseSyncData {
        const message = { createTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RiskAdviseSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RiskAdviseSyncData): RiskAdviseSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 create_time */ 1:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* data.Text advise_text */ 2:
                    message.adviseText = Text.internalBinaryRead(reader, reader.uint32(), options, message.adviseText);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RiskAdviseSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 create_time = 1; */
        if (message.createTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.createTime);
        /* data.Text advise_text = 2; */
        if (message.adviseText)
            Text.internalBinaryWrite(message.adviseText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RiskAdviseSyncData
 */
export const RiskAdviseSyncData = new RiskAdviseSyncData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomChannelSettingsSyncData$Type extends MessageType<RoomChannelSettingsSyncData> {
    constructor() {
        super("im.RoomChannelSettingsSyncData", [
            { no: 1, name: "channel_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "link_mic_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "enter_approve_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "member_invite_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RoomChannelSettingsSyncData>): RoomChannelSettingsSyncData {
        const message = { channelId: 0n, linkMicSwitch: false, enterApproveSwitch: false, memberInviteSwitch: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomChannelSettingsSyncData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomChannelSettingsSyncData): RoomChannelSettingsSyncData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 channel_id */ 1:
                    message.channelId = reader.int64().toBigInt();
                    break;
                case /* bool link_mic_switch */ 2:
                    message.linkMicSwitch = reader.bool();
                    break;
                case /* bool enter_approve_switch */ 3:
                    message.enterApproveSwitch = reader.bool();
                    break;
                case /* bool member_invite_switch */ 4:
                    message.memberInviteSwitch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomChannelSettingsSyncData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 channel_id = 1; */
        if (message.channelId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.channelId);
        /* bool link_mic_switch = 2; */
        if (message.linkMicSwitch !== false)
            writer.tag(2, WireType.Varint).bool(message.linkMicSwitch);
        /* bool enter_approve_switch = 3; */
        if (message.enterApproveSwitch !== false)
            writer.tag(3, WireType.Varint).bool(message.enterApproveSwitch);
        /* bool member_invite_switch = 4; */
        if (message.memberInviteSwitch !== false)
            writer.tag(4, WireType.Varint).bool(message.memberInviteSwitch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.RoomChannelSettingsSyncData
 */
export const RoomChannelSettingsSyncData = new RoomChannelSettingsSyncData$Type();
